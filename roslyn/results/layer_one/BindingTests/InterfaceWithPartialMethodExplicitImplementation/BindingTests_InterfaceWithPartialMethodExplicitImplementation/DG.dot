digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 689697"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 689698"];
3 [label="param BindingTests(this) 689699"];
4 [label="'C' 689700"];
5 [label="DefaultTypeName = 'C' 689701"];
6 [label="'M' 689702"];
7 [label="DefaultMethodName = 'M' 689703"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 689704"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 689705"];
10 [label="param CompilingTestBase(this) 689706"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 689707"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 689708"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 689709"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 689710"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 689711"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 689712"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 689713"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 689714"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 689715"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 689716"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 689717"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 689718"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 689719"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 689720"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 689721"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 689722"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 689723"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 689724"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 689725"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 689726"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 689727"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 689728"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 689729"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 689730"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 689731"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 689732"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 689733"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 689734"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 689735"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 689736"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 689737"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 689738"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 689739"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 689740"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 689741"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 689742"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 689743"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 689744"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 689745"];
50 [label="LazyThreadSafetyMode.PublicationOnly 689746"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 689747"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 689748"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 689749"];
54 [label="LazyThreadSafetyMode.PublicationOnly 689750"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 689751"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 689752"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 689753"];
58 [label="'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' 689754"];
59 [label="new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51') 689755"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 689756"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 689757"];
62 [label="LazyThreadSafetyMode.PublicationOnly 689758"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 689759"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 689760"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 689761"];
66 [label="LazyThreadSafetyMode.PublicationOnly 689762"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 689763"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 689764"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 689765"];
70 [label="LazyThreadSafetyMode.PublicationOnly 689766"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 689767"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 689768"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 689769"];
74 [label="LazyThreadSafetyMode.PublicationOnly 689770"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689771"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689772"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 689773"];
78 [label="LazyThreadSafetyMode.PublicationOnly 689774"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689775"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689776"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 689777"];
82 [label="LazyThreadSafetyMode.PublicationOnly 689778"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689779"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689780"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 689781"];
86 [label="LazyThreadSafetyMode.PublicationOnly 689782"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689783"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689784"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 689785"];
90 [label="LazyThreadSafetyMode.PublicationOnly 689786"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689787"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689788"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 689789"];
94 [label="LazyThreadSafetyMode.PublicationOnly 689790"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689791"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689792"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 689793"];
98 [label="LazyThreadSafetyMode.PublicationOnly 689794"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689795"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689796"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 689797"];
102 [label="LazyThreadSafetyMode.PublicationOnly 689798"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 689799"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 689800"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 689801"];
106 [label="LazyThreadSafetyMode.PublicationOnly 689802"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 689803"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 689804"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 689805"];
110 [label="LazyThreadSafetyMode.PublicationOnly 689806"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689807"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689808"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 689809"];
114 [label="LazyThreadSafetyMode.PublicationOnly 689810"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689811"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689812"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 689813"];
118 [label="LazyThreadSafetyMode.PublicationOnly 689814"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689815"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689816"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 689817"];
122 [label="LazyThreadSafetyMode.PublicationOnly 689818"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689819"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689820"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 689821"];
126 [label="LazyThreadSafetyMode.PublicationOnly 689822"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 689823"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 689824"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 689825"];
130 [label="LazyThreadSafetyMode.PublicationOnly 689826"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689827"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689828"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 689829"];
134 [label="LazyThreadSafetyMode.PublicationOnly 689830"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689831"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689832"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 689833"];
138 [label="LazyThreadSafetyMode.PublicationOnly 689834"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689835"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689836"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 689837"];
142 [label="LazyThreadSafetyMode.PublicationOnly 689838"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689839"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689840"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 689841"];
146 [label="LazyThreadSafetyMode.PublicationOnly 689842"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689843"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689844"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 689845"];
150 [label="LazyThreadSafetyMode.PublicationOnly 689846"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689847"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689848"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 689849"];
154 [label="LazyThreadSafetyMode.PublicationOnly 689850"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689851"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689852"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 689853"];
158 [label="LazyThreadSafetyMode.PublicationOnly 689854"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689855"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689856"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 689857"];
162 [label="LazyThreadSafetyMode.PublicationOnly 689858"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689859"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689860"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 689861"];
166 [label="LazyThreadSafetyMode.PublicationOnly 689862"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689863"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689864"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 689865"];
170 [label="LazyThreadSafetyMode.PublicationOnly 689866"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689867"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689868"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 689869"];
174 [label="LazyThreadSafetyMode.PublicationOnly 689870"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689871"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689872"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 689873"];
178 [label="LazyThreadSafetyMode.PublicationOnly 689874"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689875"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 689876"];
181 [label="@'R:\\Invalid.dll' 689877"];
182 [label="fullPath: @'R:\\Invalid.dll' 689878"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 689879"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 689880"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 689881"];
186 [label="MscorlibRef_v4_0_30316_17626 689882"];
187 [label="Net451.mscorlib 689883"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 689884"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 689885"];
190 [label="'/*<bind>*/' 689886"];
191 [label="StartString = '/*<bind>*/' 689887"];
192 [label="'/*</bind>*/' 689888"];
193 [label="EndString = '/*</bind>*/' 689889"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 689890"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 689891"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 689892"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 689893"];
198 [label="param CSharpTestBase(this) 689894"];
199 [label="param CommonTestBase(this) 689895"];
200 [label="param TestBase(this) 689896"];
201 [label="_temp 689897"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 689898"];
203 [label="param InterfaceWithPartialMethodExplicitImplementation(this) 689899"];
204 [label="var source =\n@'interface I\n{\n    partial void I.M();\n}'; 689900"];
205 [label="kind: SourceCodeKind.Regular 689901"];
206 [label="documentationMode: DocumentationMode.Parse 689902"];
207 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 689903"];
208 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 689904"];
209 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 689905"];
210 [label="SourceCodeKind.Script 689906"];
211 [label="Regular.WithKind(SourceCodeKind.Script) 689907"];
212 [label="Script = Regular.WithKind(SourceCodeKind.Script) 689908"];
213 [label="LanguageVersion.CSharp6 689909"];
214 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 689910"];
215 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 689911"];
216 [label="LanguageVersion.CSharp7 689912"];
217 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 689913"];
218 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 689914"];
219 [label="LanguageVersion.CSharp7_1 689915"];
220 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 689916"];
221 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 689917"];
222 [label="LanguageVersion.CSharp7_2 689918"];
223 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 689919"];
224 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 689920"];
225 [label="LanguageVersion.CSharp7_3 689921"];
226 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 689922"];
227 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 689923"];
228 [label="LanguageVersion.Default 689924"];
229 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 689925"];
230 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 689926"];
231 [label="LanguageVersion.Preview 689927"];
232 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 689928"];
233 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 689929"];
234 [label="LanguageVersion.CSharp8 689930"];
235 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 689931"];
236 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 689932"];
237 [label="LanguageVersion.CSharp9 689933"];
238 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 689934"];
239 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 689935"];
240 [label="DocumentationMode.Diagnose 689936"];
241 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 689937"];
242 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 689938"];
243 [label="Regular 689939"];
244 [label="'UseLegacyStrongNameProvider' 689940"];
245 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 689941"];
246 [label="param WithFeature(this CSharpParseOptions options) 689942"];
247 [label="param WithFeature(string feature) 689943"];
248 [label="param WithFeature(string value = 'true') 689944"];
249 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 689945"];
250 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 689946"];
251 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 689947"];
252 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 689948"];
253 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 689949"];
254 [label="new[] { new KeyValuePair<string, string>(feature, value) } 689950"];
255 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 689951"];
256 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 689952"];
257 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 689953"];
258 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 689954"];
259 [label="1 689955"];
260 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 689956"];
261 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 689957"];
262 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 689958"];
263 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 689959"];
264 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 689960"];
265 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 689961"];
266 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 689962"];
267 [label="LanguageVersion.CSharp8 689963"];
268 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 689964"];
269 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 689965"];
270 [label="RegularWithExtendedPartialMethods = RegularPreview 689966"];
271 [label="new SmallDictionary<string, string> { } 689967"];
272 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 689968"];
273 [label="kind: SourceCodeKind.Regular 689969"];
274 [label="documentationMode: DocumentationMode.None 689970"];
275 [label="languageVersion: LanguageVersion.Preview 689971"];
276 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 689972"];
277 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 689973"];
278 [label="s_experimentalFeatures 689974"];
279 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 689975"];
280 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 689976"];
281 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 689977"];
282 [label="'testV7SwitchBinder' 689978"];
283 [label="'true' 689979"];
284 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 689980"];
285 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 689981"];
286 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 689982"];
287 [label="RegularWithoutRecursivePatterns = Regular7_3 689983"];
288 [label="RegularWithRecursivePatterns = Regular8 689984"];
289 [label="RegularWithoutPatternCombinators = Regular8 689985"];
290 [label="RegularWithPatternCombinators = RegularPreview 689986"];
291 [label="OutputKind.DynamicallyLinkedLibrary 689987"];
292 [label="OptimizationLevel.Release 689988"];
293 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 689989"];
294 [label="param CreateTestOptions(OutputKind outputKind) 689990"];
295 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 689991"];
296 [label="param CreateTestOptions(bool allowUnsafe = false) 689992"];
297 [label="outputKind 689993"];
298 [label="optimizationLevel: optimizationLevel 689994"];
299 [label="warningLevel: Diagnostic.MaxWarningLevel 689995"];
300 [label="allowUnsafe: allowUnsafe 689996"];
301 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 689997"];
302 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 689998"];
303 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 689999"];
304 [label="OutputKind.ConsoleApplication 690000"];
305 [label="OptimizationLevel.Release 690001"];
306 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 690002"];
307 [label="param CreateTestOptions(OutputKind outputKind) 690003"];
308 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 690004"];
309 [label="param CreateTestOptions(bool allowUnsafe = false) 690005"];
310 [label="outputKind 690006"];
311 [label="optimizationLevel: optimizationLevel 690007"];
312 [label="warningLevel: Diagnostic.MaxWarningLevel 690008"];
313 [label="allowUnsafe: allowUnsafe 690009"];
314 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690010"];
315 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690011"];
316 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 690012"];
317 [label="true 690013"];
318 [label="ReleaseDll.WithDebugPlusMode(true) 690014"];
319 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 690015"];
320 [label="true 690016"];
321 [label="ReleaseExe.WithDebugPlusMode(true) 690017"];
322 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 690018"];
323 [label="OutputKind.DynamicallyLinkedLibrary 690019"];
324 [label="OptimizationLevel.Debug 690020"];
325 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 690021"];
326 [label="param CreateTestOptions(OutputKind outputKind) 690022"];
327 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 690023"];
328 [label="param CreateTestOptions(bool allowUnsafe = false) 690024"];
329 [label="outputKind 690025"];
330 [label="optimizationLevel: optimizationLevel 690026"];
331 [label="warningLevel: Diagnostic.MaxWarningLevel 690027"];
332 [label="allowUnsafe: allowUnsafe 690028"];
333 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690029"];
334 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690030"];
335 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 690031"];
336 [label="OutputKind.ConsoleApplication 690032"];
337 [label="OptimizationLevel.Debug 690033"];
338 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 690034"];
339 [label="param CreateTestOptions(OutputKind outputKind) 690035"];
340 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 690036"];
341 [label="param CreateTestOptions(bool allowUnsafe = false) 690037"];
342 [label="outputKind 690038"];
343 [label="optimizationLevel: optimizationLevel 690039"];
344 [label="warningLevel: Diagnostic.MaxWarningLevel 690040"];
345 [label="allowUnsafe: allowUnsafe 690041"];
346 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690042"];
347 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690043"];
348 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 690044"];
349 [label="OutputKind.WindowsRuntimeMetadata 690045"];
350 [label="OptimizationLevel.Release 690046"];
351 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 690047"];
352 [label="param CreateTestOptions(OutputKind outputKind) 690048"];
353 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 690049"];
354 [label="param CreateTestOptions(bool allowUnsafe = false) 690050"];
355 [label="outputKind 690051"];
356 [label="optimizationLevel: optimizationLevel 690052"];
357 [label="warningLevel: Diagnostic.MaxWarningLevel 690053"];
358 [label="allowUnsafe: allowUnsafe 690054"];
359 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690055"];
360 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690056"];
361 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 690057"];
362 [label="OutputKind.WindowsRuntimeMetadata 690058"];
363 [label="OptimizationLevel.Debug 690059"];
364 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 690060"];
365 [label="param CreateTestOptions(OutputKind outputKind) 690061"];
366 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 690062"];
367 [label="param CreateTestOptions(bool allowUnsafe = false) 690063"];
368 [label="outputKind 690064"];
369 [label="optimizationLevel: optimizationLevel 690065"];
370 [label="warningLevel: Diagnostic.MaxWarningLevel 690066"];
371 [label="allowUnsafe: allowUnsafe 690067"];
372 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690068"];
373 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690069"];
374 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 690070"];
375 [label="OutputKind.NetModule 690071"];
376 [label="OptimizationLevel.Release 690072"];
377 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 690073"];
378 [label="param CreateTestOptions(OutputKind outputKind) 690074"];
379 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 690075"];
380 [label="param CreateTestOptions(bool allowUnsafe = false) 690076"];
381 [label="outputKind 690077"];
382 [label="optimizationLevel: optimizationLevel 690078"];
383 [label="warningLevel: Diagnostic.MaxWarningLevel 690079"];
384 [label="allowUnsafe: allowUnsafe 690080"];
385 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690081"];
386 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690082"];
387 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 690083"];
388 [label="OutputKind.NetModule 690084"];
389 [label="OptimizationLevel.Debug 690085"];
390 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 690086"];
391 [label="param CreateTestOptions(OutputKind outputKind) 690087"];
392 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 690088"];
393 [label="param CreateTestOptions(bool allowUnsafe = false) 690089"];
394 [label="outputKind 690090"];
395 [label="optimizationLevel: optimizationLevel 690091"];
396 [label="warningLevel: Diagnostic.MaxWarningLevel 690092"];
397 [label="allowUnsafe: allowUnsafe 690093"];
398 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690094"];
399 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 690095"];
400 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 690096"];
401 [label="true 690097"];
402 [label="ReleaseDll.WithAllowUnsafe(true) 690098"];
403 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 690099"];
404 [label="true 690100"];
405 [label="ReleaseExe.WithAllowUnsafe(true) 690101"];
406 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 690102"];
407 [label="true 690103"];
408 [label="DebugDll.WithAllowUnsafe(true) 690104"];
409 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 690105"];
410 [label="true 690106"];
411 [label="DebugExe.WithAllowUnsafe(true) 690107"];
412 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 690108"];
413 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 690109"];
414 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 690110"];
415 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 690111"];
416 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 690112"];
417 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 690113"];
418 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 690114"];
419 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 690115"];
420 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 690116"];
421 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 690117"];
422 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 690118"];
423 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 690119"];
424 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 690120"];
425 [label="DebugInformationFormat.Pdb 690121"];
426 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 690122"];
427 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 690123"];
428 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 690124"];
429 [label="source 690125"];
430 [label="param operator(string source) 690126"];
431 [label="source 690127"];
432 [label="new CSharpTestSource(source) 690128"];
433 [label="param CSharpTestSource(object value) 690129"];
434 [label="param CSharpTestSource(this) 690130"];
435 [label="Value 690131"];
436 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 690132"];
437 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 690133"];
438 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 690134"];
439 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 690135"];
440 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp) 690136"];
441 [label="param CreateCompilation(CSharpTestSource source) 690137"];
442 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 690138"];
443 [label="param CreateCompilation(CSharpCompilationOptions options = null) 690139"];
444 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 690140"];
445 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 690141"];
446 [label="param CreateCompilation(string assemblyName = '') 690142"];
447 [label="param CreateCompilation(string sourceFileName = '') 690143"];
448 [label="param CreateCompilation(bool skipUsesIsNullable = false) 690144"];
449 [label="source 690145"];
450 [label="targetFramework 690146"];
451 [label="references 690147"];
452 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 690148"];
453 [label="param GetReferences(TargetFramework tf) 690149"];
454 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 690150"];
455 [label="var references = GetReferences(tf); 690151"];
456 [label="GetReferences(tf) 690152"];
457 [label="param GetReferences(TargetFramework targetFramework) 690153"];
458 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 690154"];
459 [label="NetCoreAppReferences 690155"];
460 [label="ImmutableArray.Create<MetadataReference>(NetCoreApp.netstandard, NetCoreApp.mscorlib, NetCoreApp.SystemRuntime, NetCoreApp.SystemCore,\n                                                                                                                           NetCoreApp.SystemConsole, NetCoreApp.SystemLinq, NetCoreApp.SystemLinqExpressions, NetCoreApp.SystemThreadingTasks,\n                                                                                                                           NetCoreApp.SystemCollections) 690156"];
461 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 690157"];
462 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 690158"];
463 [label="return references; 690159"];
464 [label="options 690160"];
465 [label="parseOptions 690161"];
466 [label="assemblyName 690162"];
467 [label="sourceFileName 690163"];
468 [label="skipUsesIsNullable 690164"];
469 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 690165"];
470 [label="param CreateEmptyCompilation(CSharpTestSource source) 690166"];
471 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 690167"];
472 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 690168"];
473 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 690169"];
474 [label="param CreateEmptyCompilation(string assemblyName = '') 690170"];
475 [label="param CreateEmptyCompilation(string sourceFileName = '') 690171"];
476 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 690172"];
477 [label="source 690173"];
478 [label="references 690174"];
479 [label="options 690175"];
480 [label="parseOptions 690176"];
481 [label="assemblyName 690177"];
482 [label="sourceFileName 690178"];
483 [label="skipUsesIsNullable 690179"];
484 [label="null 690180"];
485 [label="experimentalFeature: null 690181"];
486 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 690182"];
487 [label="param CreateCompilationCore(CSharpTestSource source) 690183"];
488 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 690184"];
489 [label="param CreateCompilationCore(CSharpCompilationOptions options) 690185"];
490 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 690186"];
491 [label="param CreateCompilationCore(string assemblyName) 690187"];
492 [label="param CreateCompilationCore(string sourceFileName) 690188"];
493 [label="param CreateCompilationCore(bool skipUsesIsNullable) 690189"];
494 [label="param CreateCompilationCore(MessageID? experimentalFeature) 690190"];
495 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 690191"];
496 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 690192"];
497 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 690193"];
498 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 690194"];
499 [label="param GetSyntaxTrees(string sourceFileName = '') 690195"];
500 [label="param GetSyntaxTrees(this) 690196"];
501 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 690197"];
502 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 690198"];
503 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 690199"];
504 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 690200"];
505 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 690201"];
506 [label="param Parse(string text) 690202"];
507 [label="param Parse(string filename = '') 690203"];
508 [label="param Parse(CSharpParseOptions options = null) 690204"];
509 [label="param Parse(Encoding encoding = null) 690205"];
510 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 690206"];
511 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 690207"];
512 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 690208"];
513 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 690209"];
514 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 690210"];
515 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 690211"];
516 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 690212"];
517 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 690213"];
518 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 690214"];
519 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 690215"];
520 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 690216"];
521 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 690217"];
522 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 690218"];
523 [label="param CheckSerializable(SyntaxTree tree) 690219"];
524 [label="var stream = new MemoryStream(); 690220"];
525 [label="var root = tree.GetRoot(); 690221"];
526 [label="var root = tree.GetRoot(); 690222"];
527 [label="root.SerializeTo(stream); 690223"];
528 [label="root.SerializeTo(stream); 690224"];
529 [label="root.SerializeTo(stream); 690225"];
530 [label="stream.Position = 0; 690226"];
531 [label="stream.Position 690227"];
532 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 690228"];
533 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 690229"];
534 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 690230"];
535 [label="return tree; 690231"];
536 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 690232"];
537 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 690233"];
538 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 690234"];
539 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 690235"];
540 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 690236"];
541 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 690237"];
542 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 690238"];
543 [label="hasTopLevelStatements 690239"];
544 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 690240"];
545 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 690241"];
546 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 690242"];
547 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 690243"];
548 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 690244"];
549 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 690245"];
550 [label="param ValidateIOperations(Func<Compilation> createCompilation) 690246"];
551 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 690247"];
552 [label="return; 690248"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 690249"];
554 [label="var compilation = createCompilationLambda(); 690250"];
555 [label="var compilation = createCompilationLambda(); 690251"];
556 [label="return Guid.NewGuid().ToString('D'); 690252"];
557 [label="var compilation = createCompilationLambda(); 690253"];
558 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 690254"];
559 [label="IsNullableEnabled(compilation) 690255"];
560 [label="param IsNullableEnabled(CSharpCompilation compilation) 690256"];
561 [label="var trees = compilation.SyntaxTrees; 690257"];
562 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 690258"];
563 [label="var options = (CSharpParseOptions)trees[0].Options; 690259"];
564 [label="var options = (CSharpParseOptions)trees[0].Options; 690260"];
565 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 690261"];
566 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 690262"];
567 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 690263"];
568 [label="VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty); 690264"];
569 [label="VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty); 690265"];
570 [label="VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty); 690266"];
571 [label="VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty) 690267"];
572 [label="param VerifyUsesOfNullability(Symbol symbol) 690268"];
573 [label="param VerifyUsesOfNullability(ImmutableArray<string> expectedUsesOfNullable) 690269"];
574 [label="var builder = ArrayBuilder<Symbol>.GetInstance(); 690270"];
575 [label="UsesIsNullableVisitor.GetUses(builder, symbol); 690271"];
576 [label="UsesIsNullableVisitor.GetUses(builder, symbol); 690272"];
577 [label="UsesIsNullableVisitor.GetUses(builder, symbol) 690273"];
578 [label="param GetUses(ArrayBuilder<Symbol> builder) 690274"];
579 [label="param GetUses(Symbol symbol) 690275"];
580 [label="var visitor = new UsesIsNullableVisitor(builder); 690276"];
581 [label="var visitor = new UsesIsNullableVisitor(builder); 690277"];
582 [label="new UsesIsNullableVisitor(builder) 690278"];
583 [label="param UsesIsNullableVisitor(ArrayBuilder<Symbol> builder) 690279"];
584 [label="param UsesIsNullableVisitor(this) 690280"];
585 [label="param UsesIsNullableVisitor(this) 690281"];
586 [label="_builder 690282"];
587 [label="_builder 690283"];
588 [label="visitor.Visit(symbol); 690284"];
589 [label="visitor.Visit(symbol); 690285"];
590 [label="visitor.Visit(symbol); 690286"];
591 [label="param VisitNamespace(NamespaceSymbol symbol) 690287"];
592 [label="param VisitNamespace(this) 690288"];
593 [label="return VisitList(symbol.GetMembers()); 690289"];
594 [label="VisitList(symbol.GetMembers()) 690290"];
595 [label="param VisitList(ImmutableArray<TSymbol> symbols) 690291"];
596 [label="param VisitList(this) 690292"];
597 [label="bool result = false; 690293"];
598 [label="foreach (var symbol in symbols)\n            {\n                if (this.Visit(symbol))\n                {\n                    result = true;\n                }\n            } 690294"];
599 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 690295"];
600 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 690296"];
601 [label="param VisitNamedType(NamedTypeSymbol symbol) 690297"];
602 [label="param VisitNamedType(this) 690298"];
603 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 690299"];
604 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 690300"];
605 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 690301"];
606 [label="AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) 690302"];
607 [label="param AddIfUsesIsNullable(Symbol symbol) 690303"];
608 [label="param AddIfUsesIsNullable(TypeSymbol type) 690304"];
609 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 690305"];
610 [label="param AddIfUsesIsNullable(this) 690306"];
611 [label="if (UsesIsNullable(type, inProgress))\n            {\n                Add(symbol);\n                return true;\n            } 690307"];
612 [label="if (UsesIsNullable(type, inProgress))\n            {\n                Add(symbol);\n                return true;\n            } 690308"];
613 [label="UsesIsNullable(type, inProgress) 690309"];
614 [label="param UsesIsNullable(TypeSymbol type) 690310"];
615 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 690311"];
616 [label="param UsesIsNullable(this) 690312"];
617 [label="if (type is null)\n            {\n                return false;\n            } 690313"];
618 [label="return false; 690314"];
619 [label="return false; 690315"];
620 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 690316"];
621 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 690317"];
622 [label="AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) 690318"];
623 [label="param AddIfUsesIsNullable(Symbol symbol) 690319"];
624 [label="param AddIfUsesIsNullable(ImmutableArray<NamedTypeSymbol> types) 690320"];
625 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 690321"];
626 [label="param AddIfUsesIsNullable(this) 690322"];
627 [label="foreach (var type in types)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 690323"];
628 [label="return false; 690324"];
629 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 690325"];
630 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 690326"];
631 [label="AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) 690327"];
632 [label="param AddIfUsesIsNullable(Symbol symbol) 690328"];
633 [label="param AddIfUsesIsNullable(ImmutableArray<TypeParameterSymbol> typeParameters) 690329"];
634 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 690330"];
635 [label="param AddIfUsesIsNullable(this) 690331"];
636 [label="foreach (var type in typeParameters)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 690332"];
637 [label="return false; 690333"];
638 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 690334"];
639 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 690335"];
640 [label="return VisitList(symbol.GetMembers()); 690336"];
641 [label="return VisitList(symbol.GetMembers()); 690337"];
642 [label="return VisitList(symbol.GetMembers()); 690338"];
643 [label="param BinderFactory(CSharpCompilation compilation) 690339"];
644 [label="param BinderFactory(SyntaxTree syntaxTree) 690340"];
645 [label="param BinderFactory(bool ignoreAccessibility) 690341"];
646 [label="param BinderFactory(this) 690342"];
647 [label="_binderCache 690343"];
648 [label="_compilation 690344"];
649 [label="_syntaxTree 690345"];
650 [label="_buckStopsHereBinder 690346"];
651 [label="_ignoreAccessibility 690347"];
652 [label="_binderFactoryVisitorPool 690348"];
653 [label="_compilation 690349"];
654 [label="_syntaxTree 690350"];
655 [label="_ignoreAccessibility 690351"];
656 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 690352"];
657 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 690353"];
658 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 690354"];
659 [label="_binderFactoryVisitorPool 690355"];
660 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 690356"];
661 [label="_binderCache 690357"];
662 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 690358"];
663 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 690359"];
664 [label="new BuckStopsHereBinder(compilation) 690360"];
665 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 690361"];
666 [label="param BuckStopsHereBinder(this) 690362"];
667 [label="0 690363"];
668 [label="ExternalScope = 0 690364"];
669 [label="1 690365"];
670 [label="TopLevelScope = 1 690366"];
671 [label="2 690367"];
672 [label="ValueKindInsignificantBits = 2 690368"];
673 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 690369"];
674 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 690370"];
675 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 690371"];
676 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 690372"];
677 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 690373"];
678 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 690374"];
679 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 690375"];
680 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 690376"];
681 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 690377"];
682 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 690378"];
683 [label="10 690379"];
684 [label="MaxParameterListsForErrorRecovery = 10 690380"];
685 [label="'<>h__TransparentIdentifier' 690381"];
686 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 690382"];
687 [label="s => (MethodSymbol)s 690383"];
688 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 690384"];
689 [label="s => (PropertySymbol)s 690385"];
690 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 690386"];
691 [label="compilation 690387"];
692 [label="param BuckStopsHereBinder(this) 690388"];
693 [label="param Binder(CSharpCompilation compilation) 690389"];
694 [label="param Binder(this) 690390"];
695 [label="internal CSharpCompilation Compilation { get; } 690391"];
696 [label="Flags 690392"];
697 [label="protected internal Binder? Next { get; } 690393"];
698 [label="_lazyConversions 690394"];
699 [label="_lazyOverloadResolution 690395"];
700 [label="RoslynDebug.Assert(compilation != null); 690396"];
701 [label="RoslynDebug.Assert(compilation != null); 690397"];
702 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 690398"];
703 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 690399"];
704 [label="this.Flags 690400"];
705 [label="this.Compilation 690401"];
706 [label="_buckStopsHereBinder 690402"];
707 [label="return VisitList(symbol.GetMembers()); 690403"];
708 [label="param GetBinder(SyntaxNode node) 690404"];
709 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 690405"];
710 [label="param GetBinder(Symbol memberOpt = null) 690406"];
711 [label="param GetBinder(this) 690407"];
712 [label="int position = node.SpanStart; 690408"];
713 [label="InScript 690409"];
714 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 690410"];
715 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 690411"];
716 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 690412"];
717 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 690413"];
718 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 690414"];
719 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 690415"];
720 [label="node = node.Parent; 690416"];
721 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 690417"];
722 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 690418"];
723 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 690419"];
724 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 690420"];
725 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 690421"];
726 [label="param GetBinder(SyntaxNode node) 690422"];
727 [label="param GetBinder(int position) 690423"];
728 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 690424"];
729 [label="param GetBinder(Symbol memberOpt = null) 690425"];
730 [label="param GetBinder(this) 690426"];
731 [label="Debug.Assert(node != null); 690427"];
732 [label="Debug.Assert(node != null); 690428"];
733 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 690429"];
734 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 690430"];
735 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 690431"];
736 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 690432"];
737 [label="param BinderFactoryVisitor(BinderFactory factory) 690433"];
738 [label="param BinderFactoryVisitor(this) 690434"];
739 [label="param BinderFactoryVisitor(this) 690435"];
740 [label="_position 690436"];
741 [label="_memberDeclarationOpt 690437"];
742 [label="_memberOpt 690438"];
743 [label="_factory 690439"];
744 [label="_factory 690440"];
745 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 690441"];
746 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 690442"];
747 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 690443"];
748 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 690444"];
749 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 690445"];
750 [label="param Initialize(int position) 690446"];
751 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 690447"];
752 [label="param Initialize(Symbol memberOpt) 690448"];
753 [label="param Initialize(this) 690449"];
754 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 690450"];
755 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 690451"];
756 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 690452"];
757 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 690453"];
758 [label="_position 690454"];
759 [label="_memberDeclarationOpt 690455"];
760 [label="_memberOpt 690456"];
761 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 690457"];
762 [label="Binder result = visitor.Visit(node); 690458"];
763 [label="visitor.Visit(node) 690459"];
764 [label="param Visit(SyntaxNode node) 690460"];
765 [label="param Visit(this) 690461"];
766 [label="return VisitCore(node); 690462"];
767 [label="VisitCore(node) 690463"];
768 [label="param VisitCore(SyntaxNode node) 690464"];
769 [label="param VisitCore(this) 690465"];
770 [label="return ((CSharpSyntaxNode)node).Accept(this); 690466"];
771 [label="return ((CSharpSyntaxNode)node).Accept(this); 690467"];
772 [label="return ((CSharpSyntaxNode)node).Accept(this); 690468"];
773 [label="param VisitInterfaceDeclaration(InterfaceDeclarationSyntax node) 690469"];
774 [label="param VisitInterfaceDeclaration(this) 690470"];
775 [label="return VisitTypeDeclarationCore(node); 690471"];
776 [label="VisitTypeDeclarationCore(node) 690472"];
777 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 690473"];
778 [label="param VisitTypeDeclarationCore(this) 690474"];
779 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 690475"];
780 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 690476"];
781 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 690477"];
782 [label="NodeUsage extraInfo = NodeUsage.Normal; 690478"];
783 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 690479"];
784 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 690480"];
785 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 690481"];
786 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 690482"];
787 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 690483"];
788 [label="return VisitTypeDeclarationCore(parent, extraInfo); 690484"];
789 [label="return VisitTypeDeclarationCore(parent, extraInfo); 690485"];
790 [label="VisitTypeDeclarationCore(parent, extraInfo) 690486"];
791 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 690487"];
792 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 690488"];
793 [label="param VisitTypeDeclarationCore(this) 690489"];
794 [label="var key = CreateBinderCacheKey(parent, extraInfo); 690490"];
795 [label="var key = CreateBinderCacheKey(parent, extraInfo); 690491"];
796 [label="CreateBinderCacheKey(parent, extraInfo) 690492"];
797 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 690493"];
798 [label="param CreateBinderCacheKey(NodeUsage usage) 690494"];
799 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 690495"];
800 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 690496"];
801 [label="return new BinderCacheKey(node, usage); 690497"];
802 [label="return new BinderCacheKey(node, usage); 690498"];
803 [label="return new BinderCacheKey(node, usage); 690499"];
804 [label="new BinderCacheKey(node, usage) 690500"];
805 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 690501"];
806 [label="param BinderCacheKey(NodeUsage usage) 690502"];
807 [label="param BinderCacheKey(this) 690503"];
808 [label="this.syntaxNode 690504"];
809 [label="this.usage 690505"];
810 [label="var key = CreateBinderCacheKey(parent, extraInfo); 690506"];
811 [label="Binder resultBinder; 690507"];
812 [label="binderCache 690508"];
813 [label="get\n                {\n                    return _factory._binderCache;\n                } 690509"];
814 [label="return _factory._binderCache; 690510"];
815 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 690511"];
816 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 690512"];
817 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 690513"];
818 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 690514"];
819 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 690515"];
820 [label="param GetHashCode(this) 690516"];
821 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 690517"];
822 [label="resultBinder = VisitCore(parent.Parent); 690518"];
823 [label="VisitCore(parent.Parent) 690519"];
824 [label="param VisitCore(SyntaxNode node) 690520"];
825 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 690521"];
826 [label="param VisitCompilationUnit(this) 690522"];
827 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 690523"];
828 [label="IsInUsing(parent) 690524"];
829 [label="param IsInUsing(CSharpSyntaxNode containingNode) 690525"];
830 [label="param IsInUsing(this) 690526"];
831 [label="TextSpan containingSpan = containingNode.Span; 690527"];
832 [label="SyntaxToken token; 690528"];
833 [label="token 690529"];
834 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 690530"];
835 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 690531"];
836 [label="token = containingNode.FindToken(_position); 690532"];
837 [label="token = containingNode.FindToken(_position); 690533"];
838 [label="var node = token.Parent; 690534"];
839 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 690535"];
840 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 690536"];
841 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 690537"];
842 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 690538"];
843 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 690539"];
844 [label="node = node.Parent; 690540"];
845 [label="return false; 690541"];
846 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 690542"];
847 [label="InScript 690543"];
848 [label="get\n                {\n                    return _factory.InScript;\n                } 690544"];
849 [label="_factory.InScript 690545"];
850 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 690546"];
851 [label="return _factory.InScript; 690547"];
852 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 690548"];
853 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 690549"];
854 [label="param VisitCompilationUnit(bool inUsing) 690550"];
855 [label="param VisitCompilationUnit(bool inScript) 690551"];
856 [label="param VisitCompilationUnit(this) 690552"];
857 [label="syntaxTree 690553"];
858 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 690554"];
859 [label="return _factory._syntaxTree; 690555"];
860 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 690556"];
861 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 690557"];
862 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 690558"];
863 [label="inUsing 690559"];
864 [label="inScript 690560"];
865 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 690561"];
866 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 690562"];
867 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 690563"];
868 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 690564"];
869 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 690565"];
870 [label="param CreateBinderCacheKey(NodeUsage usage) 690566"];
871 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 690567"];
872 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 690568"];
873 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 690569"];
874 [label="Binder result; 690570"];
875 [label="binderCache 690571"];
876 [label="get\n                {\n                    return _factory._binderCache;\n                } 690572"];
877 [label="return _factory._binderCache; 690573"];
878 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 690574"];
879 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 690575"];
880 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 690576"];
881 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 690577"];
882 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 690578"];
883 [label="this.buckStopsHereBinder 690579"];
884 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 690580"];
885 [label="return _factory._buckStopsHereBinder; 690581"];
886 [label="result = this.buckStopsHereBinder; 690582"];
887 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 690583"];
888 [label="compilation 690584"];
889 [label="get\n                {\n                    return _factory._compilation;\n                } 690585"];
890 [label="return _factory._compilation; 690586"];
891 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 690587"];
892 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 690588"];
893 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 690589"];
894 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 690590"];
895 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 690591"];
896 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 690592"];
897 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 690593"];
898 [label="param InContainerBinder(Binder next) 690594"];
899 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 690595"];
900 [label="param InContainerBinder(bool inUsing) 690596"];
901 [label="param InContainerBinder(this) 690597"];
902 [label="next 690598"];
903 [label="param InContainerBinder(this) 690599"];
904 [label="param Binder(Binder next) 690600"];
905 [label="param Binder(this) 690601"];
906 [label="param Binder(Conversions? conversions = null) 690602"];
907 [label="RoslynDebug.Assert(next != null); 690603"];
908 [label="RoslynDebug.Assert(next != null); 690604"];
909 [label="Next 690605"];
910 [label="this.Flags 690606"];
911 [label="this.Compilation 690607"];
912 [label="_lazyConversions 690608"];
913 [label="_container 690609"];
914 [label="_computeImports 690610"];
915 [label="_lazyImports 690611"];
916 [label="_lazyImportChain 690612"];
917 [label="_lazyQuickAttributeChecker 690613"];
918 [label="Debug.Assert((object)container != null); 690614"];
919 [label="Debug.Assert((object)container != null); 690615"];
920 [label="Debug.Assert(declarationSyntax != null); 690616"];
921 [label="Debug.Assert(declarationSyntax != null); 690617"];
922 [label="_container 690618"];
923 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 690619"];
924 [label="_computeImports 690620"];
925 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 690621"];
926 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 690622"];
927 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 690623"];
928 [label="_usingsSyntax 690624"];
929 [label="compilation 690625"];
930 [label="get\n                {\n                    return _factory._compilation;\n                } 690626"];
931 [label="return _factory._compilation; 690627"];
932 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 690628"];
933 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 690629"];
934 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 690630"];
935 [label="binderCache 690631"];
936 [label="return _factory._binderCache; 690632"];
937 [label="binderCache.TryAdd(key, result); 690633"];
938 [label="binderCache.TryAdd(key, result); 690634"];
939 [label="binderCache.TryAdd(key, result); 690635"];
940 [label="binderCache.TryAdd(key, result); 690636"];
941 [label="binderCache.TryAdd(key, result); 690637"];
942 [label="return result; 690638"];
943 [label="return ((CSharpSyntaxNode)node).Accept(this); 690639"];
944 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 690640"];
945 [label="resultBinder.ContainingMemberOrLambda 690641"];
946 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 690642"];
947 [label="var merged = _container as MergedNamespaceSymbol; 690643"];
948 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 690644"];
949 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 690645"];
950 [label="((object)merged != null) 690646"];
951 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 690647"];
952 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 690648"];
953 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 690649"];
954 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 690650"];
955 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 690651"];
956 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 690652"];
957 [label="new InContainerBinder(typeSymbol, resultBinder) 690653"];
958 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 690654"];
959 [label="param InContainerBinder(Binder next) 690655"];
960 [label="param InContainerBinder(Imports imports = null) 690656"];
961 [label="param InContainerBinder(this) 690657"];
962 [label="next 690658"];
963 [label="param InContainerBinder(this) 690659"];
964 [label="param Binder(Binder next) 690660"];
965 [label="param Binder(this) 690661"];
966 [label="param Binder(Conversions? conversions = null) 690662"];
967 [label="RoslynDebug.Assert(next != null); 690663"];
968 [label="RoslynDebug.Assert(next != null); 690664"];
969 [label="this.Flags 690665"];
970 [label="this.Compilation 690666"];
971 [label="_lazyConversions 690667"];
972 [label="_container 690668"];
973 [label="_computeImports 690669"];
974 [label="_lazyImports 690670"];
975 [label="_lazyImportChain 690671"];
976 [label="_lazyQuickAttributeChecker 690672"];
977 [label="Debug.Assert((object)container != null || imports != null); 690673"];
978 [label="Debug.Assert((object)container != null || imports != null); 690674"];
979 [label="_container 690675"];
980 [label="null 690676"];
981 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 690677"];
982 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 690678"];
983 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 690679"];
984 [label="null 690680"];
985 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 690681"];
986 [label="param Imports(CSharpCompilation compilation) 690682"];
987 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 690683"];
988 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 690684"];
989 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 690685"];
990 [label="param Imports(DiagnosticBag diagnostics) 690686"];
991 [label="param Imports(this) 690687"];
992 [label="_compilation 690688"];
993 [label="_diagnostics 690689"];
994 [label="UsingAliases 690690"];
995 [label="Debug.Assert(usingAliases != null); 690691"];
996 [label="Debug.Assert(usingAliases != null); 690692"];
997 [label="Debug.Assert(!usings.IsDefault); 690693"];
998 [label="Debug.Assert(!externs.IsDefault); 690694"];
999 [label="_compilation 690695"];
1000 [label="this.UsingAliases 690696"];
1001 [label="this.Usings 690697"];
1002 [label="_diagnostics 690698"];
1003 [label="this.ExternAliases 690699"];
1004 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 690700"];
1005 [label="_lazyImports = imports ?? Imports.Empty; 690701"];
1006 [label="_lazyImports = imports ?? Imports.Empty; 690702"];
1007 [label="_lazyImports 690703"];
1008 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 690704"];
1009 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 690705"];
1010 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 690706"];
1011 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 690707"];
1012 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 690708"];
1013 [label="param WithUnsafeRegionIfNecessary(this) 690709"];
1014 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 690710"];
1015 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 690711"];
1016 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 690712"];
1017 [label="param Includes(this BinderFlags self) 690713"];
1018 [label="param Includes(BinderFlags other) 690714"];
1019 [label="return (self & other) == other; 690715"];
1020 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 690716"];
1021 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 690717"];
1022 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 690718"];
1023 [label="binderCache 690719"];
1024 [label="return _factory._binderCache; 690720"];
1025 [label="binderCache.TryAdd(key, resultBinder); 690721"];
1026 [label="binderCache.TryAdd(key, resultBinder); 690722"];
1027 [label="binderCache.TryAdd(key, resultBinder); 690723"];
1028 [label="binderCache.TryAdd(key, resultBinder); 690724"];
1029 [label="binderCache.TryAdd(key, resultBinder); 690725"];
1030 [label="return resultBinder; 690726"];
1031 [label="return ((CSharpSyntaxNode)node).Accept(this); 690727"];
1032 [label="_binderFactoryVisitorPool.Free(visitor); 690728"];
1033 [label="_binderFactoryVisitorPool.Free(visitor); 690729"];
1034 [label="return result; 690730"];
1035 [label="return VisitList(symbol.GetMembers()); 690731"];
1036 [label="param WithAdditionalFlags(BinderFlags flags) 690732"];
1037 [label="param WithAdditionalFlags(this) 690733"];
1038 [label="return this.Flags.Includes(flags)\n                ? this\n                : new Binder(this, this.Flags | flags); 690734"];
1039 [label="return this.Flags.Includes(flags)\n                ? this\n                : new Binder(this, this.Flags | flags); 690735"];
1040 [label="this.Flags.Includes(flags) 690736"];
1041 [label="param Includes(this BinderFlags self) 690737"];
1042 [label="param Includes(BinderFlags other) 690738"];
1043 [label="return (self & other) == other; 690739"];
1044 [label="new Binder(this, this.Flags | flags) 690740"];
1045 [label="param Binder(Binder next) 690741"];
1046 [label="param Binder(BinderFlags flags) 690742"];
1047 [label="param Binder(this) 690743"];
1048 [label="RoslynDebug.Assert(next != null); 690744"];
1049 [label="RoslynDebug.Assert(next != null); 690745"];
1050 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 690746"];
1051 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 690747"];
1052 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 690748"];
1053 [label="param Includes(this BinderFlags self) 690749"];
1054 [label="param Includes(BinderFlags other) 690750"];
1055 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 690751"];
1056 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 690752"];
1057 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 690753"];
1058 [label="param Includes(this BinderFlags self) 690754"];
1059 [label="param Includes(BinderFlags other) 690755"];
1060 [label="Next 690756"];
1061 [label="this.Flags 690757"];
1062 [label="this.Compilation 690758"];
1063 [label="return VisitList(symbol.GetMembers()); 690759"];
1064 [label="param BindType(ExpressionSyntax syntax) 690760"];
1065 [label="param BindType(DiagnosticBag diagnostics) 690761"];
1066 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 690762"];
1067 [label="param BindType(bool suppressUseSiteDiagnostics = false) 690763"];
1068 [label="param BindType(this) 690764"];
1069 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 690765"];
1070 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 690766"];
1071 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 690767"];
1072 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 690768"];
1073 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 690769"];
1074 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 690770"];
1075 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 690771"];
1076 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 690772"];
1077 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 690773"];
1078 [label="param BindTypeOrAlias(this) 690774"];
1079 [label="Debug.Assert(diagnostics != null); 690775"];
1080 [label="Debug.Assert(diagnostics != null); 690776"];
1081 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 690777"];
1082 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 690778"];
1083 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 690779"];
1084 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 690780"];
1085 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 690781"];
1086 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 690782"];
1087 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 690783"];
1088 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 690784"];
1089 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 690785"];
1090 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 690786"];
1091 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 690787"];
1092 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 690788"];
1093 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 690789"];
1094 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 690790"];
1095 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 690791"];
1096 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 690792"];
1097 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 690793"];
1098 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 690794"];
1099 [label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 690795"];
1100 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 690796"];
1101 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 690797"];
1102 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 690798"];
1103 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 690799"];
1104 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 690800"];
1105 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 690801"];
1106 [label="var identifierValueText = node.Identifier.ValueText; 690802"];
1107 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 690803"];
1108 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 690804"];
1109 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 690805"];
1110 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 690806"];
1111 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 690807"];
1112 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 690808"];
1113 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 690809"];
1114 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 690810"];
1115 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 690811"];
1116 [label="param CreateErrorIfLookupOnTypeParameter(string name) 690812"];
1117 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 690813"];
1118 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 690814"];
1119 [label="param CreateErrorIfLookupOnTypeParameter(this) 690815"];
1120 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 690816"];
1121 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 690817"];
1122 [label="return null; 690818"];
1123 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 690819"];
1124 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 690820"];
1125 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 690821"];
1126 [label="CreatePool() 690822"];
1127 [label="ObjectPool<LookupResult> pool = null; 690823"];
1128 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 690824"];
1129 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 690825"];
1130 [label="return pool; 690826"];
1131 [label="s_poolInstance = CreatePool() 690827"];
1132 [label="LookupResult.GetInstance() 690828"];
1133 [label="var instance = s_poolInstance.Allocate(); 690829"];
1134 [label="var instance = s_poolInstance.Allocate(); 690830"];
1135 [label="var instance = s_poolInstance.Allocate(); 690831"];
1136 [label="param LookupResult(ObjectPool<LookupResult> pool) 690832"];
1137 [label="param LookupResult(this) 690833"];
1138 [label="_kind 690834"];
1139 [label="_symbolList 690835"];
1140 [label="_error 690836"];
1141 [label="_pool 690837"];
1142 [label="_pool 690838"];
1143 [label="_kind 690839"];
1144 [label="_symbolList = new ArrayBuilder<Symbol>(); 690840"];
1145 [label="_symbolList 690841"];
1146 [label="_error = null; 690842"];
1147 [label="_error 690843"];
1148 [label="var instance = s_poolInstance.Allocate(); 690844"];
1149 [label="instance.IsClear 690845"];
1150 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 690846"];
1151 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 690847"];
1152 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 690848"];
1153 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 690849"];
1154 [label="Debug.Assert(instance.IsClear); 690850"];
1155 [label="return instance; 690851"];
1156 [label="var result = LookupResult.GetInstance(); 690852"];
1157 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 690853"];
1158 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 690854"];
1159 [label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 690855"];
1160 [label="param GetSimpleNameLookupOptions(NameSyntax node) 690856"];
1161 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 690857"];
1162 [label="if (SyntaxFacts.IsAttributeName(node))\n            {\n                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.\n                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.\n                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity\n                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled\n                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only\n                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.\n\n                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;\n            }\n            else\n            {\n                return LookupOptions.NamespacesOrTypesOnly;\n            } 690858"];
1163 [label="return LookupOptions.NamespacesOrTypesOnly; 690859"];
1164 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 690860"];
1165 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 690861"];
1166 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 690862"];
1167 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 690863"];
1168 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 690864"];
1169 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 690865"];
1170 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 690866"];
1171 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 690867"];
1172 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 690868"];
1173 [label="param LookupSymbolsSimpleName(LookupResult result) 690869"];
1174 [label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 690870"];
1175 [label="param LookupSymbolsSimpleName(string plainName) 690871"];
1176 [label="param LookupSymbolsSimpleName(int arity) 690872"];
1177 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 690873"];
1178 [label="param LookupSymbolsSimpleName(LookupOptions options) 690874"];
1179 [label="param LookupSymbolsSimpleName(bool diagnose) 690875"];
1180 [label="param LookupSymbolsSimpleName(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 690876"];
1181 [label="param LookupSymbolsSimpleName(this) 690877"];
1182 [label="if (options.IsAttributeTypeLookup())\n            {\n                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 690878"];
1183 [label="options.IsAttributeTypeLookup() 690879"];
1184 [label="param IsAttributeTypeLookup(this LookupOptions options) 690880"];
1185 [label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 690881"];
1186 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690882"];
1187 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690883"];
1188 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690884"];
1189 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690885"];
1190 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690886"];
1191 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690887"];
1192 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690888"];
1193 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690889"];
1194 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 690890"];
1195 [label="param LookupSymbolsOrMembersInternal(LookupResult result) 690891"];
1196 [label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 690892"];
1197 [label="param LookupSymbolsOrMembersInternal(string name) 690893"];
1198 [label="param LookupSymbolsOrMembersInternal(int arity) 690894"];
1199 [label="param LookupSymbolsOrMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 690895"];
1200 [label="param LookupSymbolsOrMembersInternal(LookupOptions options) 690896"];
1201 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 690897"];
1202 [label="param LookupSymbolsOrMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 690898"];
1203 [label="param LookupSymbolsOrMembersInternal(this) 690899"];
1204 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 690900"];
1205 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 690901"];
1206 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690902"];
1207 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690903"];
1208 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690904"];
1209 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690905"];
1210 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690906"];
1211 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690907"];
1212 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 690908"];
1213 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 690909"];
1214 [label="param LookupSymbolsInternal(LookupResult result) 690910"];
1215 [label="param LookupSymbolsInternal(string name) 690911"];
1216 [label="param LookupSymbolsInternal(int arity) 690912"];
1217 [label="param LookupSymbolsInternal(ConsList<TypeSymbol> basesBeingResolved) 690913"];
1218 [label="param LookupSymbolsInternal(LookupOptions options) 690914"];
1219 [label="param LookupSymbolsInternal(bool diagnose) 690915"];
1220 [label="param LookupSymbolsInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 690916"];
1221 [label="param LookupSymbolsInternal(this) 690917"];
1222 [label="result.IsClear 690918"];
1223 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 690919"];
1224 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 690920"];
1225 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 690921"];
1226 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 690922"];
1227 [label="Debug.Assert(result.IsClear); 690923"];
1228 [label="Debug.Assert(options.AreValid()); 690924"];
1229 [label="options.AreValid() 690925"];
1230 [label="param AreValid(this LookupOptions options) 690926"];
1231 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 690927"];
1232 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 690928"];
1233 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 690929"];
1234 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 690930"];
1235 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 690931"];
1236 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 690932"];
1237 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 690933"];
1238 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 690934"];
1239 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 690935"];
1240 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 690936"];
1241 [label="return OnlyOneBitSet(onlyOptions); 690937"];
1242 [label="OnlyOneBitSet(onlyOptions) 690938"];
1243 [label="param OnlyOneBitSet(LookupOptions o) 690939"];
1244 [label="return (o & (o - 1)) == 0; 690940"];
1245 [label="return (o & (o - 1)) == 0; 690941"];
1246 [label="Binder binder = null; 690942"];
1247 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 690943"];
1248 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 690944"];
1249 [label="result.IsMultiViable 690945"];
1250 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 690946"];
1251 [label="Kind 690947"];
1252 [label="get\n            {\n                return _kind;\n            } 690948"];
1253 [label="return _kind; 690949"];
1254 [label="return Kind == LookupResultKind.Viable; 690950"];
1255 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 690951"];
1256 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 690952"];
1257 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 690953"];
1258 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 690954"];
1259 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 690955"];
1260 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 690956"];
1261 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 690957"];
1262 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 690958"];
1263 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 690959"];
1264 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 690960"];
1265 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 690961"];
1266 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 690962"];
1267 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 690963"];
1268 [label="param LookupSymbolsInSingleBinder(LookupResult result) 690964"];
1269 [label="param LookupSymbolsInSingleBinder(string name) 690965"];
1270 [label="param LookupSymbolsInSingleBinder(int arity) 690966"];
1271 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 690967"];
1272 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 690968"];
1273 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 690969"];
1274 [label="param LookupSymbolsInSingleBinder(bool diagnose) 690970"];
1275 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 690971"];
1276 [label="param LookupSymbolsInSingleBinder(this) 690972"];
1277 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 690973"];
1278 [label="result.IsClear 690974"];
1279 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 690975"];
1280 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 690976"];
1281 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 690977"];
1282 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 690978"];
1283 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 690979"];
1284 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 690980"];
1285 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 690981"];
1286 [label="param LookupSymbolsInSingleBinder(LookupResult result) 690982"];
1287 [label="param LookupSymbolsInSingleBinder(string name) 690983"];
1288 [label="param LookupSymbolsInSingleBinder(int arity) 690984"];
1289 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 690985"];
1290 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 690986"];
1291 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 690987"];
1292 [label="param LookupSymbolsInSingleBinder(bool diagnose) 690988"];
1293 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 690989"];
1294 [label="param LookupSymbolsInSingleBinder(this) 690990"];
1295 [label="result.IsClear 690991"];
1296 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 690992"];
1297 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 690993"];
1298 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 690994"];
1299 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 690995"];
1300 [label="Debug.Assert(result.IsClear); 690996"];
1301 [label="IsSubmissionClass 690997"];
1302 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 690998"];
1303 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 690999"];
1304 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 691000"];
1305 [label="var imports = GetImports(basesBeingResolved); 691001"];
1306 [label="GetImports(basesBeingResolved) 691002"];
1307 [label="param GetImports(ConsList<TypeSymbol> basesBeingResolved) 691003"];
1308 [label="param GetImports(this) 691004"];
1309 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 691005"];
1310 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 691006"];
1311 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 691007"];
1312 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 691008"];
1313 [label="return _lazyImports; 691009"];
1314 [label="var imports = GetImports(basesBeingResolved); 691010"];
1315 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 691011"];
1316 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 691012"];
1317 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 691013"];
1318 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 691014"];
1319 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691015"];
1320 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691016"];
1321 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691017"];
1322 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691018"];
1323 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691019"];
1324 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691020"];
1325 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691021"];
1326 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691022"];
1327 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691023"];
1328 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 691024"];
1329 [label="param LookupMembersInternal(LookupResult result) 691025"];
1330 [label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 691026"];
1331 [label="param LookupMembersInternal(string name) 691027"];
1332 [label="param LookupMembersInternal(int arity) 691028"];
1333 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 691029"];
1334 [label="param LookupMembersInternal(LookupOptions options) 691030"];
1335 [label="param LookupMembersInternal(Binder originalBinder) 691031"];
1336 [label="param LookupMembersInternal(bool diagnose) 691032"];
1337 [label="param LookupMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691033"];
1338 [label="param LookupMembersInternal(this) 691034"];
1339 [label="Debug.Assert(options.AreValid()); 691035"];
1340 [label="options.AreValid() 691036"];
1341 [label="param AreValid(this LookupOptions options) 691037"];
1342 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 691038"];
1343 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 691039"];
1344 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 691040"];
1345 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 691041"];
1346 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 691042"];
1347 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 691043"];
1348 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 691044"];
1349 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 691045"];
1350 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 691046"];
1351 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 691047"];
1352 [label="return OnlyOneBitSet(onlyOptions); 691048"];
1353 [label="OnlyOneBitSet(onlyOptions) 691049"];
1354 [label="param OnlyOneBitSet(LookupOptions o) 691050"];
1355 [label="return (o & (o - 1)) == 0; 691051"];
1356 [label="return (o & (o - 1)) == 0; 691052"];
1357 [label="Debug.Assert(arity >= 0); 691053"];
1358 [label="Debug.Assert(arity >= 0); 691054"];
1359 [label="if (nsOrType.IsNamespace)\n            {\n                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            } 691055"];
1360 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691056"];
1361 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691057"];
1362 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691058"];
1363 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691059"];
1364 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691060"];
1365 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691061"];
1366 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691062"];
1367 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691063"];
1368 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691064"];
1369 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 691065"];
1370 [label="param LookupMembersInType(LookupResult result) 691066"];
1371 [label="param LookupMembersInType(TypeSymbol type) 691067"];
1372 [label="param LookupMembersInType(string name) 691068"];
1373 [label="param LookupMembersInType(int arity) 691069"];
1374 [label="param LookupMembersInType(ConsList<TypeSymbol> basesBeingResolved) 691070"];
1375 [label="param LookupMembersInType(LookupOptions options) 691071"];
1376 [label="param LookupMembersInType(Binder originalBinder) 691072"];
1377 [label="param LookupMembersInType(bool diagnose) 691073"];
1378 [label="param LookupMembersInType(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691074"];
1379 [label="param LookupMembersInType(this) 691075"];
1380 [label="switch (type.TypeKind)\n            {\n                case TypeKind.TypeParameter:\n                    this.LookupMembersInTypeParameter(result, (TypeParameterSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Interface:\n                    this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Class:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                case TypeKind.Delegate:\n                case TypeKind.Array:\n                case TypeKind.Dynamic:\n                    this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Submission:\n                    this.LookupMembersInSubmissions(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Error:\n                    LookupMembersInErrorType(result, (ErrorTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Pointer:\n                case TypeKind.FunctionPointer:\n                    result.Clear();\n                    break;\n\n                case TypeKind.Unknown:\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);\n            } 691076"];
1381 [label="this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691077"];
1382 [label="this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691078"];
1383 [label="this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691079"];
1384 [label="this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691080"];
1385 [label="this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691081"];
1386 [label="this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691082"];
1387 [label="this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691083"];
1388 [label="this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691084"];
1389 [label="this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691085"];
1390 [label="this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 691086"];
1391 [label="param LookupMembersInInterface(LookupResult current) 691087"];
1392 [label="param LookupMembersInInterface(NamedTypeSymbol type) 691088"];
1393 [label="param LookupMembersInInterface(string name) 691089"];
1394 [label="param LookupMembersInInterface(int arity) 691090"];
1395 [label="param LookupMembersInInterface(ConsList<TypeSymbol> basesBeingResolved) 691091"];
1396 [label="param LookupMembersInInterface(LookupOptions options) 691092"];
1397 [label="param LookupMembersInInterface(Binder originalBinder) 691093"];
1398 [label="param LookupMembersInInterface(bool diagnose) 691094"];
1399 [label="param LookupMembersInInterface(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691095"];
1400 [label="param LookupMembersInInterface(this) 691096"];
1401 [label="Debug.Assert((object)type != null); 691097"];
1402 [label="Debug.Assert((object)type != null); 691098"];
1403 [label="Debug.Assert(type.IsInterface); 691099"];
1404 [label="LookupMembersInInterfaceOnly(current, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691100"];
1405 [label="LookupMembersInInterfaceOnly(current, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691101"];
1406 [label="LookupMembersInInterfaceOnly(current, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691102"];
1407 [label="LookupMembersInInterfaceOnly(current, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691103"];
1408 [label="LookupMembersInInterfaceOnly(current, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691104"];
1409 [label="LookupMembersInInterfaceOnly(current, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691105"];
1410 [label="LookupMembersInInterfaceOnly(current, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691106"];
1411 [label="LookupMembersInInterfaceOnly(current, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691107"];
1412 [label="LookupMembersInInterfaceOnly(current, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691108"];
1413 [label="LookupMembersInInterfaceOnly(current, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics) 691109"];
1414 [label="param LookupMembersInInterfaceOnly(LookupResult current) 691110"];
1415 [label="param LookupMembersInInterfaceOnly(NamedTypeSymbol type) 691111"];
1416 [label="param LookupMembersInInterfaceOnly(string name) 691112"];
1417 [label="param LookupMembersInInterfaceOnly(int arity) 691113"];
1418 [label="param LookupMembersInInterfaceOnly(ConsList<TypeSymbol> basesBeingResolved) 691114"];
1419 [label="param LookupMembersInInterfaceOnly(LookupOptions options) 691115"];
1420 [label="param LookupMembersInInterfaceOnly(Binder originalBinder) 691116"];
1421 [label="param LookupMembersInInterfaceOnly(TypeSymbol accessThroughType) 691117"];
1422 [label="param LookupMembersInInterfaceOnly(bool diagnose) 691118"];
1423 [label="param LookupMembersInInterfaceOnly(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691119"];
1424 [label="Debug.Assert((object)type != null); 691120"];
1425 [label="Debug.Assert((object)type != null); 691121"];
1426 [label="Debug.Assert(type.IsInterface); 691122"];
1427 [label="LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691123"];
1428 [label="LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691124"];
1429 [label="LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691125"];
1430 [label="LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691126"];
1431 [label="LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691127"];
1432 [label="LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691128"];
1433 [label="LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691129"];
1434 [label="LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691130"];
1435 [label="LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691131"];
1436 [label="LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691132"];
1437 [label="LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved) 691133"];
1438 [label="param LookupMembersWithoutInheritance(LookupResult result) 691134"];
1439 [label="param LookupMembersWithoutInheritance(TypeSymbol type) 691135"];
1440 [label="param LookupMembersWithoutInheritance(string name) 691136"];
1441 [label="param LookupMembersWithoutInheritance(int arity) 691137"];
1442 [label="param LookupMembersWithoutInheritance(LookupOptions options) 691138"];
1443 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 691139"];
1444 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 691140"];
1445 [label="param LookupMembersWithoutInheritance(bool diagnose) 691141"];
1446 [label="param LookupMembersWithoutInheritance(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691142"];
1447 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 691143"];
1448 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 691144"];
1449 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 691145"];
1450 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 691146"];
1451 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 691147"];
1452 [label="GetCandidateMembers(type, name, options, originalBinder) 691148"];
1453 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 691149"];
1454 [label="param GetCandidateMembers(string name) 691150"];
1455 [label="param GetCandidateMembers(LookupOptions options) 691151"];
1456 [label="param GetCandidateMembers(Binder originalBinder) 691152"];
1457 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 691153"];
1458 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 691154"];
1459 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 691155"];
1460 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 691156"];
1461 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 691157"];
1462 [label="LookupMembersWithoutInheritance(current, type, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691158"];
1463 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && !originalBinder.InCrefButNotParameterOrReturnType)\n            {\n                LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics);\n            } 691159"];
1464 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && !originalBinder.InCrefButNotParameterOrReturnType)\n            {\n                LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics);\n            } 691160"];
1465 [label="originalBinder.InCrefButNotParameterOrReturnType 691161"];
1466 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 691162"];
1467 [label="InCref 691163"];
1468 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 691164"];
1469 [label="return this.Flags.Includes(BinderFlags.Cref); 691165"];
1470 [label="return this.Flags.Includes(BinderFlags.Cref); 691166"];
1471 [label="this.Flags.Includes(BinderFlags.Cref) 691167"];
1472 [label="param Includes(this BinderFlags self) 691168"];
1473 [label="param Includes(BinderFlags other) 691169"];
1474 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 691170"];
1475 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && !originalBinder.InCrefButNotParameterOrReturnType)\n            {\n                LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics);\n            } 691171"];
1476 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 691172"];
1477 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 691173"];
1478 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 691174"];
1479 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 691175"];
1480 [label="GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics) 691176"];
1481 [label="param GetBaseInterfaces(NamedTypeSymbol type) 691177"];
1482 [label="param GetBaseInterfaces(ConsList<TypeSymbol> basesBeingResolved) 691178"];
1483 [label="param GetBaseInterfaces(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691179"];
1484 [label="if (basesBeingResolved?.Any() != true)\n            {\n                return type.AllInterfacesWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n            } 691180"];
1485 [label="if (basesBeingResolved?.Any() != true)\n            {\n                return type.AllInterfacesWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n            } 691181"];
1486 [label="return type.AllInterfacesWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics); 691182"];
1487 [label="return type.AllInterfacesWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics); 691183"];
1488 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 691184"];
1489 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 691185"];
1490 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 691186"];
1491 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 691187"];
1492 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 691188"];
1493 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 691189"];
1494 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics) 691190"];
1495 [label="param LookupMembersInInterfacesWithoutInheritance(LookupResult current) 691191"];
1496 [label="param LookupMembersInInterfacesWithoutInheritance(ImmutableArray<NamedTypeSymbol> interfaces) 691192"];
1497 [label="param LookupMembersInInterfacesWithoutInheritance(string name) 691193"];
1498 [label="param LookupMembersInInterfacesWithoutInheritance(int arity) 691194"];
1499 [label="param LookupMembersInInterfacesWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 691195"];
1500 [label="param LookupMembersInInterfacesWithoutInheritance(LookupOptions options) 691196"];
1501 [label="param LookupMembersInInterfacesWithoutInheritance(Binder originalBinder) 691197"];
1502 [label="param LookupMembersInInterfacesWithoutInheritance(TypeSymbol accessThroughType) 691198"];
1503 [label="param LookupMembersInInterfacesWithoutInheritance(bool diagnose) 691199"];
1504 [label="param LookupMembersInInterfacesWithoutInheritance(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691200"];
1505 [label="if (interfaces.Length > 0)\n            {\n                var tmp = LookupResult.GetInstance();\n                HashSet<NamedTypeSymbol> seenInterfaces = null;\n                if (interfaces.Length > 1)\n                {\n                    seenInterfaces = new HashSet<NamedTypeSymbol>(Symbols.SymbolEqualityComparer.IgnoringNullable);\n                }\n\n                foreach (NamedTypeSymbol baseInterface in interfaces)\n                {\n                    if (seenInterfaces is null || seenInterfaces.Add(baseInterface))\n                    {\n                        LookupMembersWithoutInheritance(tmp, baseInterface, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                        MergeHidingLookupResults(current, tmp, basesBeingResolved, ref useSiteDiagnostics);\n                        tmp.Clear();\n                    }\n                }\n                tmp.Free();\n            } 691201"];
1506 [label="if (interfaces.Length > 0)\n            {\n                var tmp = LookupResult.GetInstance();\n                HashSet<NamedTypeSymbol> seenInterfaces = null;\n                if (interfaces.Length > 1)\n                {\n                    seenInterfaces = new HashSet<NamedTypeSymbol>(Symbols.SymbolEqualityComparer.IgnoringNullable);\n                }\n\n                foreach (NamedTypeSymbol baseInterface in interfaces)\n                {\n                    if (seenInterfaces is null || seenInterfaces.Add(baseInterface))\n                    {\n                        LookupMembersWithoutInheritance(tmp, baseInterface, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                        MergeHidingLookupResults(current, tmp, basesBeingResolved, ref useSiteDiagnostics);\n                        tmp.Clear();\n                    }\n                }\n                tmp.Free();\n            } 691202"];
1507 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 691203"];
1508 [label="LookupMembersInInterfaceOnly(current, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691204"];
1509 [label="originalBinder.InCrefButNotParameterOrReturnType 691205"];
1510 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 691206"];
1511 [label="InCref 691207"];
1512 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 691208"];
1513 [label="return this.Flags.Includes(BinderFlags.Cref); 691209"];
1514 [label="return this.Flags.Includes(BinderFlags.Cref); 691210"];
1515 [label="this.Flags.Includes(BinderFlags.Cref) 691211"];
1516 [label="param Includes(BinderFlags other) 691212"];
1517 [label="if (!originalBinder.InCrefButNotParameterOrReturnType)\n            {\n                var tmp = LookupResult.GetInstance();\n                // NB: we assume use-site-errors on System.Object, if any, have been reported earlier.\n                this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics);\n                MergeHidingLookupResults(current, tmp, basesBeingResolved, ref useSiteDiagnostics);\n                tmp.Free();\n            } 691213"];
1518 [label="LookupResult.GetInstance() 691214"];
1519 [label="_kind 691215"];
1520 [label="_symbolList 691216"];
1521 [label="_error 691217"];
1522 [label="_pool 691218"];
1523 [label="instance.IsClear 691219"];
1524 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 691220"];
1525 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 691221"];
1526 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 691222"];
1527 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 691223"];
1528 [label="Debug.Assert(instance.IsClear); 691224"];
1529 [label="var tmp = LookupResult.GetInstance(); 691225"];
1530 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691226"];
1531 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691227"];
1532 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691228"];
1533 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691229"];
1534 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691230"];
1535 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691231"];
1536 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691232"];
1537 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691233"];
1538 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691234"];
1539 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691235"];
1540 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691236"];
1541 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics) 691237"];
1542 [label="param LookupMembersInClass(LookupResult result) 691238"];
1543 [label="param LookupMembersInClass(TypeSymbol type) 691239"];
1544 [label="param LookupMembersInClass(string name) 691240"];
1545 [label="param LookupMembersInClass(int arity) 691241"];
1546 [label="param LookupMembersInClass(ConsList<TypeSymbol> basesBeingResolved) 691242"];
1547 [label="param LookupMembersInClass(LookupOptions options) 691243"];
1548 [label="param LookupMembersInClass(Binder originalBinder) 691244"];
1549 [label="param LookupMembersInClass(TypeSymbol accessThroughType) 691245"];
1550 [label="param LookupMembersInClass(bool diagnose) 691246"];
1551 [label="param LookupMembersInClass(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691247"];
1552 [label="param LookupMembersInClass(this) 691248"];
1553 [label="Debug.Assert((object)type != null); 691249"];
1554 [label="Debug.Assert((object)type != null); 691250"];
1555 [label="Debug.Assert(!type.IsInterfaceType() && type.TypeKind != TypeKind.TypeParameter); 691251"];
1556 [label="TypeSymbol currentType = type; 691252"];
1557 [label="LookupResult.GetInstance() 691253"];
1558 [label="var instance = s_poolInstance.Allocate(); 691254"];
1559 [label="_kind 691255"];
1560 [label="_symbolList 691256"];
1561 [label="_error 691257"];
1562 [label="_pool 691258"];
1563 [label="instance.IsClear 691259"];
1564 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 691260"];
1565 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 691261"];
1566 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 691262"];
1567 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 691263"];
1568 [label="Debug.Assert(instance.IsClear); 691264"];
1569 [label="var tmp = LookupResult.GetInstance(); 691265"];
1570 [label="PooledHashSet<NamedTypeSymbol> visited = null; 691266"];
1571 [label="while ((object)currentType != null)\n            {\n                tmp.Clear();\n                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n\n                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);\n\n                // If the type is from a winmd and implements any of the special WinRT collection\n                // projections then we may need to add underlying interface members. \n                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;\n                if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                }\n\n                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes\n                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);\n\n                // short circuit looking up bases if we already have a viable result and we won't be adding on more\n                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                }\n\n                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                }\n\n                // As in dev11, we don't consider inherited members within crefs.\n                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,\n                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.\n                if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                }\n\n                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);\n                if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 691267"];
1572 [label="while ((object)currentType != null)\n            {\n                tmp.Clear();\n                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n\n                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);\n\n                // If the type is from a winmd and implements any of the special WinRT collection\n                // projections then we may need to add underlying interface members. \n                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;\n                if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                }\n\n                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes\n                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);\n\n                // short circuit looking up bases if we already have a viable result and we won't be adding on more\n                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                }\n\n                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                }\n\n                // As in dev11, we don't consider inherited members within crefs.\n                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,\n                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.\n                if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                }\n\n                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);\n                if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 691268"];
1573 [label="tmp.Clear() 691269"];
1574 [label="param Clear(this) 691270"];
1575 [label="_kind 691271"];
1576 [label="_symbolList.Clear(); 691272"];
1577 [label="_error = null; 691273"];
1578 [label="_error 691274"];
1579 [label="tmp.Clear(); 691275"];
1580 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691276"];
1581 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691277"];
1582 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691278"];
1583 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691279"];
1584 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691280"];
1585 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691281"];
1586 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691282"];
1587 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691283"];
1588 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691284"];
1589 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691285"];
1590 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved) 691286"];
1591 [label="param LookupMembersWithoutInheritance(LookupResult result) 691287"];
1592 [label="param LookupMembersWithoutInheritance(TypeSymbol type) 691288"];
1593 [label="param LookupMembersWithoutInheritance(string name) 691289"];
1594 [label="param LookupMembersWithoutInheritance(int arity) 691290"];
1595 [label="param LookupMembersWithoutInheritance(LookupOptions options) 691291"];
1596 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 691292"];
1597 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 691293"];
1598 [label="param LookupMembersWithoutInheritance(bool diagnose) 691294"];
1599 [label="param LookupMembersWithoutInheritance(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691295"];
1600 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 691296"];
1601 [label="param GetCandidateMembers(Binder originalBinder) 691297"];
1602 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 691298"];
1603 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 691299"];
1604 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 691300"];
1605 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 691301"];
1606 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 691302"];
1607 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 691303"];
1608 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 691304"];
1609 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 691305"];
1610 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 691306"];
1611 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 691307"];
1612 [label="param MergePrioritized(LookupResult other) 691308"];
1613 [label="param MergePrioritized(this) 691309"];
1614 [label="other.Kind 691310"];
1615 [label="get\n            {\n                return _kind;\n            } 691311"];
1616 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 691312"];
1617 [label="Kind 691313"];
1618 [label="get\n            {\n                return _kind;\n            } 691314"];
1619 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 691315"];
1620 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 691316"];
1621 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 691317"];
1622 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 691318"];
1623 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 691319"];
1624 [label="tmp.IsMultiViable 691320"];
1625 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 691321"];
1626 [label="return _kind; 691322"];
1627 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 691323"];
1628 [label="result.IsMultiViable 691324"];
1629 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 691325"];
1630 [label="return _kind; 691326"];
1631 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 691327"];
1632 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 691328"];
1633 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 691329"];
1634 [label="originalBinder.InCrefButNotParameterOrReturnType 691330"];
1635 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 691331"];
1636 [label="return this.Flags.Includes(BinderFlags.Cref); 691332"];
1637 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 691333"];
1638 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 691334"];
1639 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 691335"];
1640 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 691336"];
1641 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 691337"];
1642 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 691338"];
1643 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 691339"];
1644 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 691340"];
1645 [label="visited?.Free(); 691341"];
1646 [label="tmp.Free() 691342"];
1647 [label="param Free(this) 691343"];
1648 [label="this.Clear() 691344"];
1649 [label="param Clear(this) 691345"];
1650 [label="_kind 691346"];
1651 [label="_symbolList.Clear(); 691347"];
1652 [label="_error = null; 691348"];
1653 [label="_error 691349"];
1654 [label="this.Clear(); 691350"];
1655 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 691351"];
1656 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 691352"];
1657 [label="_pool.Free(this); 691353"];
1658 [label="tmp.Free(); 691354"];
1659 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 691355"];
1660 [label="MergeHidingLookupResults(current, tmp, basesBeingResolved, ref useSiteDiagnostics); 691356"];
1661 [label="MergeHidingLookupResults(current, tmp, basesBeingResolved, ref useSiteDiagnostics); 691357"];
1662 [label="MergeHidingLookupResults(current, tmp, basesBeingResolved, ref useSiteDiagnostics); 691358"];
1663 [label="MergeHidingLookupResults(current, tmp, basesBeingResolved, ref useSiteDiagnostics); 691359"];
1664 [label="MergeHidingLookupResults(current, tmp, basesBeingResolved, ref useSiteDiagnostics); 691360"];
1665 [label="MergeHidingLookupResults(current, tmp, basesBeingResolved, ref useSiteDiagnostics); 691361"];
1666 [label="param MergePrioritized(LookupResult other) 691362"];
1667 [label="param MergePrioritized(this) 691363"];
1668 [label="other.Kind 691364"];
1669 [label="get\n            {\n                return _kind;\n            } 691365"];
1670 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 691366"];
1671 [label="Kind 691367"];
1672 [label="get\n            {\n                return _kind;\n            } 691368"];
1673 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 691369"];
1674 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 691370"];
1675 [label="tmp.Free() 691371"];
1676 [label="param Free(this) 691372"];
1677 [label="this.Clear() 691373"];
1678 [label="param Clear(this) 691374"];
1679 [label="_kind 691375"];
1680 [label="_symbolList.Clear(); 691376"];
1681 [label="_error = null; 691377"];
1682 [label="_error 691378"];
1683 [label="this.Clear(); 691379"];
1684 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 691380"];
1685 [label="tmp.Free(); 691381"];
1686 [label="this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691382"];
1687 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691383"];
1688 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691384"];
1689 [label="result.IsMultiViable 691385"];
1690 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 691386"];
1691 [label="return _kind; 691387"];
1692 [label="if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                } 691388"];
1693 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691389"];
1694 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691390"];
1695 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691391"];
1696 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691392"];
1697 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691393"];
1698 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691394"];
1699 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691395"];
1700 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691396"];
1701 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 691397"];
1702 [label="param LookupSymbol(Binder originalBinder) 691398"];
1703 [label="param LookupSymbol(LookupResult result) 691399"];
1704 [label="param LookupSymbol(string name) 691400"];
1705 [label="param LookupSymbol(int arity) 691401"];
1706 [label="param LookupSymbol(ConsList<TypeSymbol> basesBeingResolved) 691402"];
1707 [label="param LookupSymbol(LookupOptions options) 691403"];
1708 [label="param LookupSymbol(bool diagnose) 691404"];
1709 [label="param LookupSymbol(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691405"];
1710 [label="param LookupSymbol(this) 691406"];
1711 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691407"];
1712 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691408"];
1713 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691409"];
1714 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691410"];
1715 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691411"];
1716 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691412"];
1717 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691413"];
1718 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691414"];
1719 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 691415"];
1720 [label="param LookupSymbolInAliases(Binder originalBinder) 691416"];
1721 [label="param LookupSymbolInAliases(LookupResult result) 691417"];
1722 [label="param LookupSymbolInAliases(string name) 691418"];
1723 [label="param LookupSymbolInAliases(int arity) 691419"];
1724 [label="param LookupSymbolInAliases(ConsList<TypeSymbol> basesBeingResolved) 691420"];
1725 [label="param LookupSymbolInAliases(LookupOptions options) 691421"];
1726 [label="param LookupSymbolInAliases(bool diagnose) 691422"];
1727 [label="param LookupSymbolInAliases(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691423"];
1728 [label="param LookupSymbolInAliases(this) 691424"];
1729 [label="originalBinder.IsSemanticModelBinder 691425"];
1730 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 691426"];
1731 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 691427"];
1732 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 691428"];
1733 [label="this.Flags.Includes(BinderFlags.SemanticModel) 691429"];
1734 [label="param Includes(this BinderFlags self) 691430"];
1735 [label="param Includes(BinderFlags other) 691431"];
1736 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 691432"];
1737 [label="AliasAndUsingDirective alias; 691433"];
1738 [label="alias 691434"];
1739 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 691435"];
1740 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 691436"];
1741 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 691437"];
1742 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 691438"];
1743 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691439"];
1744 [label="result.IsMultiViable 691440"];
1745 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 691441"];
1746 [label="return _kind; 691442"];
1747 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 691443"];
1748 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 691444"];
1749 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 691445"];
1750 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 691446"];
1751 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691447"];
1752 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691448"];
1753 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691449"];
1754 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691450"];
1755 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691451"];
1756 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691452"];
1757 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691453"];
1758 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691454"];
1759 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691455"];
1760 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 691456"];
1761 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 691457"];
1762 [label="param LookupSymbolInUsings(Binder originalBinder) 691458"];
1763 [label="param LookupSymbolInUsings(LookupResult result) 691459"];
1764 [label="param LookupSymbolInUsings(string name) 691460"];
1765 [label="param LookupSymbolInUsings(int arity) 691461"];
1766 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 691462"];
1767 [label="param LookupSymbolInUsings(LookupOptions options) 691463"];
1768 [label="param LookupSymbolInUsings(bool diagnose) 691464"];
1769 [label="param LookupSymbolInUsings(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691465"];
1770 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 691466"];
1771 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 691467"];
1772 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 691468"];
1773 [label="param Includes(this BinderFlags self) 691469"];
1774 [label="param Includes(BinderFlags other) 691470"];
1775 [label="originalBinder.IsSemanticModelBinder 691471"];
1776 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 691472"];
1777 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 691473"];
1778 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 691474"];
1779 [label="this.Flags.Includes(BinderFlags.SemanticModel) 691475"];
1780 [label="param Includes(this BinderFlags self) 691476"];
1781 [label="param Includes(BinderFlags other) 691477"];
1782 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 691478"];
1783 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 691479"];
1784 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691480"];
1785 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691481"];
1786 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 691482"];
1787 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 691483"];
1788 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 691484"];
1789 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 691485"];
1790 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 691486"];
1791 [label="param LookupSymbolsInSingleBinder(int arity) 691487"];
1792 [label="param LookupSymbolsInSingleBinder(bool diagnose) 691488"];
1793 [label="result.IsClear 691489"];
1794 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 691490"];
1795 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 691491"];
1796 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 691492"];
1797 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 691493"];
1798 [label="Debug.Assert(result.IsClear); 691494"];
1799 [label="IsSubmissionClass 691495"];
1800 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 691496"];
1801 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 691497"];
1802 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 691498"];
1803 [label="param GetImports(ConsList<TypeSymbol> basesBeingResolved) 691499"];
1804 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 691500"];
1805 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 691501"];
1806 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 691502"];
1807 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 691503"];
1808 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 691504"];
1809 [label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 691505"];
1810 [label="param FromSyntax(InContainerBinder binder) 691506"];
1811 [label="param FromSyntax(ConsList<TypeSymbol> basesBeingResolved) 691507"];
1812 [label="param FromSyntax(bool inUsing) 691508"];
1813 [label="SyntaxList<UsingDirectiveSyntax> usingDirectives; 691509"];
1814 [label="usingDirectives 691510"];
1815 [label="SyntaxList<ExternAliasDirectiveSyntax> externAliasDirectives; 691511"];
1816 [label="externAliasDirectives 691512"];
1817 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n            {\n                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings;\n                externAliasDirectives = compilationUnit.Externs;\n            }\n            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n            {\n                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : namespaceDecl.Usings;\n                externAliasDirectives = namespaceDecl.Externs;\n            }\n            else\n            {\n                return Empty;\n            } 691513"];
1818 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 691514"];
1819 [label="inUsing 691515"];
1820 [label="compilationUnit.Usings 691516"];
1821 [label="usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings; 691517"];
1822 [label="externAliasDirectives = compilationUnit.Externs; 691518"];
1823 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 691519"];
1824 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 691520"];
1825 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 691521"];
1826 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 691522"];
1827 [label="return Empty; 691523"];
1828 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691524"];
1829 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691525"];
1830 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 691526"];
1831 [label="param LookupMembersInternal(int arity) 691527"];
1832 [label="param LookupMembersInternal(bool diagnose) 691528"];
1833 [label="Debug.Assert(options.AreValid()); 691529"];
1834 [label="options.AreValid() 691530"];
1835 [label="param AreValid(this LookupOptions options) 691531"];
1836 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 691532"];
1837 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 691533"];
1838 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 691534"];
1839 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 691535"];
1840 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 691536"];
1841 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 691537"];
1842 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 691538"];
1843 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 691539"];
1844 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 691540"];
1845 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 691541"];
1846 [label="return OnlyOneBitSet(onlyOptions); 691542"];
1847 [label="OnlyOneBitSet(onlyOptions) 691543"];
1848 [label="param OnlyOneBitSet(LookupOptions o) 691544"];
1849 [label="return (o & (o - 1)) == 0; 691545"];
1850 [label="return (o & (o - 1)) == 0; 691546"];
1851 [label="Debug.Assert(arity >= 0); 691547"];
1852 [label="Debug.Assert(arity >= 0); 691548"];
1853 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 691549"];
1854 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 691550"];
1855 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 691551"];
1856 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 691552"];
1857 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 691553"];
1858 [label="param LookupMembersInNamespace(LookupResult result) 691554"];
1859 [label="param LookupMembersInNamespace(NamespaceSymbol ns) 691555"];
1860 [label="param LookupMembersInNamespace(string name) 691556"];
1861 [label="param LookupMembersInNamespace(int arity) 691557"];
1862 [label="param LookupMembersInNamespace(LookupOptions options) 691558"];
1863 [label="param LookupMembersInNamespace(Binder originalBinder) 691559"];
1864 [label="param LookupMembersInNamespace(bool diagnose) 691560"];
1865 [label="param LookupMembersInNamespace(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691561"];
1866 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 691562"];
1867 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 691563"];
1868 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 691564"];
1869 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 691565"];
1870 [label="GetCandidateMembers(ns, name, options, originalBinder) 691566"];
1871 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 691567"];
1872 [label="param GetCandidateMembers(string name) 691568"];
1873 [label="param GetCandidateMembers(LookupOptions options) 691569"];
1874 [label="param GetCandidateMembers(Binder originalBinder) 691570"];
1875 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 691571"];
1876 [label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 691572"];
1877 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 691573"];
1878 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 691574"];
1879 [label="return nsOrType.GetMembers(name); 691575"];
1880 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 691576"];
1881 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 691577"];
1882 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 691578"];
1883 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 691579"];
1884 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 691580"];
1885 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 691581"];
1886 [label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 691582"];
1887 [label="param CheckViability(Symbol symbol) 691583"];
1888 [label="param CheckViability(int arity) 691584"];
1889 [label="param CheckViability(LookupOptions options) 691585"];
1890 [label="param CheckViability(TypeSymbol accessThroughType) 691586"];
1891 [label="param CheckViability(bool diagnose) 691587"];
1892 [label="param CheckViability(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691588"];
1893 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 691589"];
1894 [label="param CheckViability(this) 691590"];
1895 [label="bool inaccessibleViaQualifier; 691591"];
1896 [label="DiagnosticInfo diagInfo; 691592"];
1897 [label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias\n                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)\n                : symbol; 691593"];
1898 [label="symbol.Kind == SymbolKind.Alias 691594"];
1899 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691595"];
1900 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691596"];
1901 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691597"];
1902 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691598"];
1903 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691599"];
1904 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691600"];
1905 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691601"];
1906 [label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 691602"];
1907 [label="param WrongArity(Symbol symbol) 691603"];
1908 [label="param WrongArity(int arity) 691604"];
1909 [label="param WrongArity(bool diagnose) 691605"];
1910 [label="param WrongArity(LookupOptions options) 691606"];
1911 [label="param WrongArity(out DiagnosticInfo diagInfo) 691607"];
1912 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 691608"];
1913 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 691609"];
1914 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 691610"];
1915 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 691611"];
1916 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 691612"];
1917 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 691613"];
1918 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 691614"];
1919 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 691615"];
1920 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 691616"];
1921 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 691617"];
1922 [label="options.IsAttributeTypeLookup() 691618"];
1923 [label="param IsAttributeTypeLookup(this LookupOptions options) 691619"];
1924 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 691620"];
1925 [label="diagInfo = null; 691621"];
1926 [label="return false; 691622"];
1927 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691623"];
1928 [label="InCref 691624"];
1929 [label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691625"];
1930 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691626"];
1931 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691627"];
1932 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691628"];
1933 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691629"];
1934 [label="InCref 691630"];
1935 [label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691631"];
1936 [label="InCref 691632"];
1937 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691633"];
1938 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691634"];
1939 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691635"];
1940 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691636"];
1941 [label="RefineAccessThroughType(options, accessThroughType) 691637"];
1942 [label="param RefineAccessThroughType(LookupOptions options) 691638"];
1943 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 691639"];
1944 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 691640"];
1945 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 691641"];
1946 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 691642"];
1947 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 691643"];
1948 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691644"];
1949 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691645"];
1950 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691646"];
1951 [label="this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved) 691647"];
1952 [label="param IsAccessible(Symbol symbol) 691648"];
1953 [label="param IsAccessible(TypeSymbol accessThroughType) 691649"];
1954 [label="param IsAccessible(out bool failedThroughTypeCheck) 691650"];
1955 [label="param IsAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691651"];
1956 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 691652"];
1957 [label="param IsAccessible(this) 691653"];
1958 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 691654"];
1959 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 691655"];
1960 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 691656"];
1961 [label="param Includes(this BinderFlags self) 691657"];
1962 [label="param Includes(BinderFlags other) 691658"];
1963 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691659"];
1964 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691660"];
1965 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691661"];
1966 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691662"];
1967 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691663"];
1968 [label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 691664"];
1969 [label="param IsAccessibleHelper(Symbol symbol) 691665"];
1970 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 691666"];
1971 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 691667"];
1972 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691668"];
1973 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 691669"];
1974 [label="param IsAccessibleHelper(this) 691670"];
1975 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691671"];
1976 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691672"];
1977 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691673"];
1978 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691674"];
1979 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691675"];
1980 [label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 691676"];
1981 [label="param IsAccessibleHelper(Symbol symbol) 691677"];
1982 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 691678"];
1983 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 691679"];
1984 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691680"];
1985 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 691681"];
1986 [label="param IsAccessibleHelper(this) 691682"];
1987 [label="var type = _container as NamedTypeSymbol; 691683"];
1988 [label="if ((object)type != null)\n            {\n                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);\n            }\n            else\n            {\n                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.\n            } 691684"];
1989 [label="if ((object)type != null)\n            {\n                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);\n            }\n            else\n            {\n                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.\n            } 691685"];
1990 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 691686"];
1991 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 691687"];
1992 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 691688"];
1993 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 691689"];
1994 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 691690"];
1995 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 691691"];
1996 [label="this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics) 691692"];
1997 [label="param IsSymbolAccessibleConditional(Symbol symbol) 691693"];
1998 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 691694"];
1999 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 691695"];
2000 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 691696"];
2001 [label="param IsSymbolAccessibleConditional(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 691697"];
2002 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 691698"];
2003 [label="param IsSymbolAccessibleConditional(this) 691699"];
2004 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 691700"];
2005 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 691701"];
2006 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 691702"];
2007 [label="param Includes(this BinderFlags self) 691703"];
2008 [label="param Includes(BinderFlags other) 691704"];
2009 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691705"];
2010 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691706"];
2011 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691707"];
2012 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691708"];
2013 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691709"];
2014 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 691710"];
2015 [label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 691711"];
2016 [label="param IsSymbolAccessible(Symbol symbol) 691712"];
2017 [label="param IsSymbolAccessible(NamedTypeSymbol within) 691713"];
2018 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 691714"];
2019 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 691715"];
2020 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691716"];
2021 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 691717"];
2022 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 691718"];
2023 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 691719"];
2024 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 691720"];
2025 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 691721"];
2026 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 691722"];
2027 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 691723"];
2028 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 691724"];
2029 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 691725"];
2030 [label="param IsSymbolAccessibleCore(Symbol symbol) 691726"];
2031 [label="param IsSymbolAccessibleCore(Symbol within) 691727"];
2032 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 691728"];
2033 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 691729"];
2034 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 691730"];
2035 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691731"];
2036 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 691732"];
2037 [label="Debug.Assert((object)symbol != null); 691733"];
2038 [label="Debug.Assert((object)symbol != null); 691734"];
2039 [label="Debug.Assert((object)within != null); 691735"];
2040 [label="Debug.Assert((object)within != null); 691736"];
2041 [label="Debug.Assert(within.IsDefinition); 691737"];
2042 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 691738"];
2043 [label="failedThroughTypeCheck = false; 691739"];
2044 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 691740"];
2045 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 691741"];
2046 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 691742"];
2047 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 691743"];
2048 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 691744"];
2049 [label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 691745"];
2050 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 691746"];
2051 [label="param IsNamedTypeAccessible(Symbol within) 691747"];
2052 [label="param IsNamedTypeAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 691748"];
2053 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 691749"];
2054 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 691750"];
2055 [label="Debug.Assert((object)type != null); 691751"];
2056 [label="Debug.Assert((object)type != null); 691752"];
2057 [label="var compilation = within.DeclaringCompilation; 691753"];
2058 [label="bool unused; 691754"];
2059 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 691755"];
2060 [label="var containingType = type.ContainingType; 691756"];
2061 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 691757"];
2062 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 691758"];
2063 [label="(object)containingType == null 691759"];
2064 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 691760"];
2065 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 691761"];
2066 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 691762"];
2067 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 691763"];
2068 [label="param IsNonNestedTypeAccessible(Symbol within) 691764"];
2069 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 691765"];
2070 [label="Debug.Assert((object)assembly != null); 691766"];
2071 [label="Debug.Assert((object)assembly != null); 691767"];
2072 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 691768"];
2073 [label="var withinType = within as NamedTypeSymbol; 691769"];
2074 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 691770"];
2075 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 691771"];
2076 [label="(object)withinType != null 691772"];
2077 [label="withinType.ContainingAssembly 691773"];
2078 [label="return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly); 691774"];
2079 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691775"];
2080 [label="InCref 691776"];
2081 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691777"];
2082 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691778"];
2083 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691779"];
2084 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691780"];
2085 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691781"];
2086 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691782"];
2087 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691783"];
2088 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691784"];
2089 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691785"];
2090 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 691786"];
2091 [label="return LookupResult.Good(symbol); 691787"];
2092 [label="LookupResult.Good(symbol) 691788"];
2093 [label="param Good(Symbol symbol) 691789"];
2094 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 691790"];
2095 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 691791"];
2096 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 691792"];
2097 [label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 691793"];
2098 [label="param SingleLookupResult(LookupResultKind kind) 691794"];
2099 [label="param SingleLookupResult(Symbol symbol) 691795"];
2100 [label="param SingleLookupResult(DiagnosticInfo error) 691796"];
2101 [label="param SingleLookupResult(this) 691797"];
2102 [label="this.Kind 691798"];
2103 [label="this.Symbol 691799"];
2104 [label="this.Error 691800"];
2105 [label="return LookupResult.Good(symbol); 691801"];
2106 [label="result.MergeEqual(resultOfThisMember); 691802"];
2107 [label="result.MergeEqual(resultOfThisMember) 691803"];
2108 [label="param MergeEqual(SingleLookupResult result) 691804"];
2109 [label="param MergeEqual(this) 691805"];
2110 [label="Kind 691806"];
2111 [label="get\n            {\n                return _kind;\n            } 691807"];
2112 [label="return _kind; 691808"];
2113 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 691809"];
2114 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 691810"];
2115 [label="Kind 691811"];
2116 [label="if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 691812"];
2117 [label="this.SetFrom(result); 691813"];
2118 [label="this.SetFrom(result) 691814"];
2119 [label="param SetFrom(SingleLookupResult other) 691815"];
2120 [label="param SetFrom(this) 691816"];
2121 [label="_kind 691817"];
2122 [label="_symbolList.Clear(); 691818"];
2123 [label="_symbolList.Add(other.Symbol); 691819"];
2124 [label="_symbolList.Add(other.Symbol); 691820"];
2125 [label="_error 691821"];
2126 [label="this.SetFrom(result); 691822"];
2127 [label="result.MergeEqual(resultOfThisMember); 691823"];
2128 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 691824"];
2129 [label="result.IsMultiViable 691825"];
2130 [label="return _kind; 691826"];
2131 [label="if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                } 691827"];
2132 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 691828"];
2133 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 691829"];
2134 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 691830"];
2135 [label="originalBinder.IsSemanticModelBinder 691831"];
2136 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 691832"];
2137 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 691833"];
2138 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 691834"];
2139 [label="this.Flags.Includes(BinderFlags.SemanticModel) 691835"];
2140 [label="param Includes(this BinderFlags self) 691836"];
2141 [label="param Includes(BinderFlags other) 691837"];
2142 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 691838"];
2143 [label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 691839"];
2144 [label="param IsUsingAlias(string name) 691840"];
2145 [label="param IsUsingAlias(bool callerIsSemanticModel) 691841"];
2146 [label="param IsUsingAlias(this) 691842"];
2147 [label="AliasAndUsingDirective node; 691843"];
2148 [label="node 691844"];
2149 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 691845"];
2150 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 691846"];
2151 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 691847"];
2152 [label="return false; 691848"];
2153 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 691849"];
2154 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 691850"];
2155 [label="return; 691851"];
2156 [label="result.IsClear 691852"];
2157 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 691853"];
2158 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 691854"];
2159 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 691855"];
2160 [label="binder = scope; 691856"];
2161 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 691857"];
2162 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 691858"];
2163 [label="return binder; 691859"];
2164 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 691860"];
2165 [label="diagnostics.Add(node, useSiteDiagnostics); 691861"];
2166 [label="diagnostics.Add(node, useSiteDiagnostics); 691862"];
2167 [label="diagnostics.Add(node, useSiteDiagnostics); 691863"];
2168 [label="diagnostics.Add(node, useSiteDiagnostics); 691864"];
2169 [label="Symbol bindingResult = null; 691865"];
2170 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 691866"];
2171 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 691867"];
2172 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 691868"];
2173 [label="IsViableType(result) 691869"];
2174 [label="param IsViableType(LookupResult result) 691870"];
2175 [label="result.IsMultiViable 691871"];
2176 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 691872"];
2177 [label="Kind 691873"];
2178 [label="get\n            {\n                return _kind;\n            } 691874"];
2179 [label="return _kind; 691875"];
2180 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 691876"];
2181 [label="result.Symbols 691877"];
2182 [label="get\n            {\n                return _symbolList;\n            } 691878"];
2183 [label="return _symbolList; 691879"];
2184 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 691880"];
2185 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 691881"];
2186 [label="return true; 691882"];
2187 [label="if (bindingResult is null)\n            {\n                bool wasError;\n\n                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);\n                if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n            } 691883"];
2188 [label="bool wasError; 691884"];
2189 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691885"];
2190 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691886"];
2191 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691887"];
2192 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691888"];
2193 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691889"];
2194 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691890"];
2195 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691891"];
2196 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691892"];
2197 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691893"];
2198 [label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 691894"];
2199 [label="param ResultSymbol(LookupResult result) 691895"];
2200 [label="param ResultSymbol(string simpleName) 691896"];
2201 [label="param ResultSymbol(int arity) 691897"];
2202 [label="param ResultSymbol(SyntaxNode where) 691898"];
2203 [label="param ResultSymbol(DiagnosticBag diagnostics) 691899"];
2204 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 691900"];
2205 [label="param ResultSymbol(out bool wasError) 691901"];
2206 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 691902"];
2207 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 691903"];
2208 [label="param ResultSymbol(this) 691904"];
2209 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691905"];
2210 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691906"];
2211 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691907"];
2212 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691908"];
2213 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691909"];
2214 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691910"];
2215 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691911"];
2216 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691912"];
2217 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 691913"];
2218 [label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 691914"];
2219 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 691915"];
2220 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 691916"];
2221 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 691917"];
2222 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 691918"];
2223 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 691919"];
2224 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 691920"];
2225 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 691921"];
2226 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 691922"];
2227 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 691923"];
2228 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 691924"];
2229 [label="Debug.Assert(where != null); 691925"];
2230 [label="Debug.Assert(where != null); 691926"];
2231 [label="Debug.Assert(diagnostics != null); 691927"];
2232 [label="Debug.Assert(diagnostics != null); 691928"];
2233 [label="result.Symbols 691929"];
2234 [label="get\n            {\n                return _symbolList;\n            } 691930"];
2235 [label="return _symbolList; 691931"];
2236 [label="var symbols = result.Symbols; 691932"];
2237 [label="wasError = false; 691933"];
2238 [label="result.IsMultiViable 691934"];
2239 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 691935"];
2240 [label="Kind 691936"];
2241 [label="get\n            {\n                return _kind;\n            } 691937"];
2242 [label="return _kind; 691938"];
2243 [label="if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                } 691939"];
2244 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 691940"];
2245 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 691941"];
2246 [label="var singleResult = symbols[0]; 691942"];
2247 [label="var singleType = singleResult as TypeSymbol; 691943"];
2248 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 691944"];
2249 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 691945"];
2250 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 691946"];
2251 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 691947"];
2252 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 691948"];
2253 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 691949"];
2254 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 691950"];
2255 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 691951"];
2256 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 691952"];
2257 [label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 691953"];
2258 [label="param ReportUseSiteDiagnostics(Symbol symbol) 691954"];
2259 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 691955"];
2260 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 691956"];
2261 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 691957"];
2262 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 691958"];
2263 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 691959"];
2264 [label="return singleResult; 691960"];
2265 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 691961"];
2266 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 691962"];
2267 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 691963"];
2268 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 691964"];
2269 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 691965"];
2270 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 691966"];
2271 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 691967"];
2272 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 691968"];
2273 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 691969"];
2274 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 691970"];
2275 [label="param CheckRuntimeSupportForSymbolAccess(this) 691971"];
2276 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 691972"];
2277 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 691973"];
2278 [label="return symbol; 691974"];
2279 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 691975"];
2280 [label="result.Free() 691976"];
2281 [label="param Free(this) 691977"];
2282 [label="this.Clear() 691978"];
2283 [label="param Clear(this) 691979"];
2284 [label="_kind 691980"];
2285 [label="_symbolList.Clear(); 691981"];
2286 [label="_error = null; 691982"];
2287 [label="_error 691983"];
2288 [label="this.Clear(); 691984"];
2289 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 691985"];
2290 [label="result.Free(); 691986"];
2291 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 691987"];
2292 [label="AreNullableAnnotationsEnabled(node.Identifier) 691988"];
2293 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 691989"];
2294 [label="param AreNullableAnnotationsEnabled(this) 691990"];
2295 [label="RoslynDebug.Assert(token.SyntaxTree is object); 691991"];
2296 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 691992"];
2297 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 691993"];
2298 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 691994"];
2299 [label="param AreNullableAnnotationsEnabled(int position) 691995"];
2300 [label="param AreNullableAnnotationsEnabled(this) 691996"];
2301 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 691997"];
2302 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 691998"];
2303 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 691999"];
2304 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 692000"];
2305 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 692001"];
2306 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 692002"];
2307 [label="AreNullableAnnotationsGloballyEnabled() 692003"];
2308 [label="param AreNullableAnnotationsGloballyEnabled(this) 692004"];
2309 [label="RoslynDebug.Assert(Next is object); 692005"];
2310 [label="Next.AreNullableAnnotationsGloballyEnabled() 692006"];
2311 [label="param AreNullableAnnotationsGloballyEnabled(this) 692007"];
2312 [label="param AreNullableAnnotationsGloballyEnabled(this) 692008"];
2313 [label="GetGlobalAnnotationState() 692009"];
2314 [label="param GetGlobalAnnotationState(this) 692010"];
2315 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 692011"];
2316 [label="return false; 692012"];
2317 [label="return GetGlobalAnnotationState(); 692013"];
2318 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 692014"];
2319 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 692015"];
2320 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 692016"];
2321 [label="param CreateUnannotated(bool isNullableEnabled) 692017"];
2322 [label="param CreateUnannotated(Symbol symbol) 692018"];
2323 [label="if (symbol is null)\n                {\n                    return default;\n                } 692019"];
2324 [label="var type = symbol as TypeSymbol; 692020"];
2325 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 692021"];
2326 [label="type is null 692022"];
2327 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 692023"];
2328 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 692024"];
2329 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 692025"];
2330 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 692026"];
2331 [label="Debug.Assert(typeWithAnnotations.HasType); 692027"];
2332 [label="_typeWithAnnotations 692028"];
2333 [label="_symbol = null; 692029"];
2334 [label="_symbol 692030"];
2335 [label="_isNullableEnabled = false; 692031"];
2336 [label="_isNullableEnabled 692032"];
2337 [label="symbol.IsType 692033"];
2338 [label="=> !_typeWithAnnotations.IsDefault 692034"];
2339 [label="!_typeWithAnnotations.IsDefault 692035"];
2340 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 692036"];
2341 [label="symbol.IsType 692037"];
2342 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 692038"];
2343 [label="symbol.TypeWithAnnotations 692039"];
2344 [label="=> _typeWithAnnotations 692040"];
2345 [label="_typeWithAnnotations 692041"];
2346 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 692042"];
2347 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 692043"];
2348 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 692044"];
2349 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 692045"];
2350 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 692046"];
2351 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 692047"];
2352 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 692048"];
2353 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 692049"];
2354 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 692050"];
2355 [label="param ReportDiagnosticsIfObsolete(this) 692051"];
2356 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 692052"];
2357 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 692053"];
2358 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 692054"];
2359 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 692055"];
2360 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 692056"];
2361 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 692057"];
2362 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 692058"];
2363 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 692059"];
2364 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 692060"];
2365 [label="param ReportDiagnosticsIfObsolete(this) 692061"];
2366 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 692062"];
2367 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 692063"];
2368 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 692064"];
2369 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 692065"];
2370 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 692066"];
2371 [label="this.ContainingMemberOrLambda 692067"];
2372 [label="get\n            {\n                RoslynDebug.Assert(Next is object);\n                return Next.ContainingMemberOrLambda;\n            } 692068"];
2373 [label="RoslynDebug.Assert(Next is object); 692069"];
2374 [label="Next.ContainingMemberOrLambda 692070"];
2375 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 692071"];
2376 [label="_container 692072"];
2377 [label="return Next.ContainingMemberOrLambda; 692073"];
2378 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 692074"];
2379 [label="this.ContainingType 692075"];
2380 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 692076"];
2381 [label="this.ContainingMemberOrLambda 692077"];
2382 [label="get\n            {\n                RoslynDebug.Assert(Next is object);\n                return Next.ContainingMemberOrLambda;\n            } 692078"];
2383 [label="RoslynDebug.Assert(Next is object); 692079"];
2384 [label="RoslynDebug.Assert(Next is object); 692080"];
2385 [label="Next.ContainingMemberOrLambda 692081"];
2386 [label="return Next.ContainingMemberOrLambda; 692082"];
2387 [label="var member = this.ContainingMemberOrLambda; 692083"];
2388 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 692084"];
2389 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 692085"];
2390 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 692086"];
2391 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 692087"];
2392 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 692088"];
2393 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 692089"];
2394 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 692090"];
2395 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 692091"];
2396 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 692092"];
2397 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 692093"];
2398 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 692094"];
2399 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 692095"];
2400 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 692096"];
2401 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 692097"];
2402 [label="RoslynDebug.Assert(symbol is object); 692098"];
2403 [label="RoslynDebug.Assert(symbol is object); 692099"];
2404 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 692100"];
2405 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 692101"];
2406 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 692102"];
2407 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 692103"];
2408 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 692104"];
2409 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 692105"];
2410 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 692106"];
2411 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 692107"];
2412 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 692108"];
2413 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 692109"];
2414 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 692110"];
2415 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 692111"];
2416 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 692112"];
2417 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 692113"];
2418 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 692114"];
2419 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 692115"];
2420 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 692116"];
2421 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 692117"];
2422 [label="RoslynDebug.Assert(diagnostics != null); 692118"];
2423 [label="RoslynDebug.Assert(diagnostics != null); 692119"];
2424 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 692120"];
2425 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 692121"];
2426 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 692122"];
2427 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 692123"];
2428 [label="DiagnosticInfo? info = null; 692124"];
2429 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 692125"];
2430 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 692126"];
2431 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 692127"];
2432 [label="return kind; 692128"];
2433 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 692129"];
2434 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 692130"];
2435 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 692131"];
2436 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 692132"];
2437 [label="return symbol; 692133"];
2438 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 692134"];
2439 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 692135"];
2440 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 692136"];
2441 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 692137"];
2442 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 692138"];
2443 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 692139"];
2444 [label="param UnwrapAlias(DiagnosticBag diagnostics) 692140"];
2445 [label="param UnwrapAlias(SyntaxNode syntax) 692141"];
2446 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 692142"];
2447 [label="param UnwrapAlias(this) 692143"];
2448 [label="symbol.IsAlias 692144"];
2449 [label="=> _symbol?.Kind == SymbolKind.Alias 692145"];
2450 [label="_symbol 692146"];
2451 [label="_symbol?.Kind == SymbolKind.Alias 692147"];
2452 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 692148"];
2453 [label="return symbol; 692149"];
2454 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 692150"];
2455 [label="=> _typeWithAnnotations 692151"];
2456 [label="_typeWithAnnotations 692152"];
2457 [label="return VisitList(symbol.GetMembers()); 692153"];
2458 [label="param CheckFeatureAvailability(SyntaxNode syntax) 692154"];
2459 [label="param CheckFeatureAvailability(MessageID feature) 692155"];
2460 [label="param CheckFeatureAvailability(DiagnosticBag diagnostics) 692156"];
2461 [label="param CheckFeatureAvailability(Location? location = null) 692157"];
2462 [label="return CheckFeatureAvailability(syntax.SyntaxTree, feature, diagnostics, location ?? syntax.GetLocation()); 692158"];
2463 [label="return CheckFeatureAvailability(syntax.SyntaxTree, feature, diagnostics, location ?? syntax.GetLocation()); 692159"];
2464 [label="return CheckFeatureAvailability(syntax.SyntaxTree, feature, diagnostics, location ?? syntax.GetLocation()); 692160"];
2465 [label="return CheckFeatureAvailability(syntax.SyntaxTree, feature, diagnostics, location ?? syntax.GetLocation()); 692161"];
2466 [label="CheckFeatureAvailability(syntax.SyntaxTree, feature, diagnostics, location ?? syntax.GetLocation()) 692162"];
2467 [label="param CheckFeatureAvailability(SyntaxTree tree) 692163"];
2468 [label="param CheckFeatureAvailability(MessageID feature) 692164"];
2469 [label="param CheckFeatureAvailability(DiagnosticBag diagnostics) 692165"];
2470 [label="param CheckFeatureAvailability(Location location) 692166"];
2471 [label="if (feature.GetFeatureAvailabilityDiagnosticInfo((CSharpParseOptions)tree.Options) is { } diagInfo)\n            {\n                diagnostics.Add(diagInfo, location);\n                return false;\n            } 692167"];
2472 [label="if (feature.GetFeatureAvailabilityDiagnosticInfo((CSharpParseOptions)tree.Options) is { } diagInfo)\n            {\n                diagnostics.Add(diagInfo, location);\n                return false;\n            } 692168"];
2473 [label="if (feature.GetFeatureAvailabilityDiagnosticInfo((CSharpParseOptions)tree.Options) is { } diagInfo)\n            {\n                diagnostics.Add(diagInfo, location);\n                return false;\n            } 692169"];
2474 [label="diagnostics.Add(diagInfo, location); 692170"];
2475 [label="diagnostics.Add(diagInfo, location); 692171"];
2476 [label="diagnostics.Add(diagInfo, location); 692172"];
2477 [label="diagnostics.Add(diagInfo, location); 692173"];
2478 [label="return false; 692174"];
2479 [label="return VisitList(symbol.GetMembers()); 692175"];
2480 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 692176"];
2481 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 692177"];
2482 [label="Debug.Assert(symbol is object); 692178"];
2483 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 692179"];
2484 [label="isInternal = false; 692180"];
2485 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 692181"];
2486 [label="symbol = symbol.ContainingType; 692182"];
2487 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 692183"];
2488 [label="return true; 692184"];
2489 [label="return VisitList(symbol.GetMembers()); 692185"];
2490 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 692186"];
2491 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 692187"];
2492 [label="Debug.Assert(symbol is object); 692188"];
2493 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 692189"];
2494 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 692190"];
2495 [label="symbol = symbol.ContainingType; 692191"];
2496 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 692192"];
2497 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 692193"];
2498 [label="return VisitList(symbol.GetMembers()); 692194"];
2499 [label="VisitList(symbol.GetMembers()) 692195"];
2500 [label="param VisitList(ImmutableArray<TSymbol> symbols) 692196"];
2501 [label="param VisitList(this) 692197"];
2502 [label="bool result = false; 692198"];
2503 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 692199"];
2504 [label="param VisitMethod(MethodSymbol symbol) 692200"];
2505 [label="param VisitMethod(this) 692201"];
2506 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 692202"];
2507 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 692203"];
2508 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 692204"];
2509 [label="AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) 692205"];
2510 [label="param AddIfUsesIsNullable(Symbol symbol) 692206"];
2511 [label="param AddIfUsesIsNullable(ImmutableArray<TypeParameterSymbol> typeParameters) 692207"];
2512 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 692208"];
2513 [label="param AddIfUsesIsNullable(this) 692209"];
2514 [label="foreach (var type in typeParameters)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 692210"];
2515 [label="return false; 692211"];
2516 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 692212"];
2517 [label="symbol.ReturnTypeWithAnnotations 692213"];
2518 [label="param BinderFactory(CSharpCompilation compilation) 692214"];
2519 [label="param BinderFactory(SyntaxTree syntaxTree) 692215"];
2520 [label="param BinderFactory(bool ignoreAccessibility) 692216"];
2521 [label="param BinderFactory(this) 692217"];
2522 [label="_compilation 692218"];
2523 [label="_syntaxTree 692219"];
2524 [label="_ignoreAccessibility 692220"];
2525 [label="RoslynDebug.Assert(compilation != null); 692221"];
2526 [label="RoslynDebug.Assert(compilation != null); 692222"];
2527 [label="param GetBinder(SyntaxNode node) 692223"];
2528 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 692224"];
2529 [label="param GetBinder(Symbol memberOpt = null) 692225"];
2530 [label="param GetBinder(this) 692226"];
2531 [label="Debug.Assert(node != null); 692227"];
2532 [label="Debug.Assert(node != null); 692228"];
2533 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 692229"];
2534 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 692230"];
2535 [label="container.AssertMemberExposure(memberOpt); 692231"];
2536 [label="container.AssertMemberExposure(memberOpt); 692232"];
2537 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 692233"];
2538 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 692234"];
2539 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 692235"];
2540 [label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 692236"];
2541 [label="param VisitMethodDeclaration(this) 692237"];
2542 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 692238"];
2543 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 692239"];
2544 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 692240"];
2545 [label="NodeUsage usage; 692241"];
2546 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 692242"];
2547 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 692243"];
2548 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 692244"];
2549 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 692245"];
2550 [label="usage = NodeUsage.Normal; 692246"];
2551 [label="var key = CreateBinderCacheKey(methodDecl, usage); 692247"];
2552 [label="var key = CreateBinderCacheKey(methodDecl, usage); 692248"];
2553 [label="CreateBinderCacheKey(methodDecl, usage) 692249"];
2554 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 692250"];
2555 [label="param CreateBinderCacheKey(NodeUsage usage) 692251"];
2556 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 692252"];
2557 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 692253"];
2558 [label="var key = CreateBinderCacheKey(methodDecl, usage); 692254"];
2559 [label="Binder resultBinder; 692255"];
2560 [label="binderCache 692256"];
2561 [label="get\n                {\n                    return _factory._binderCache;\n                } 692257"];
2562 [label="return _factory._binderCache; 692258"];
2563 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 692259"];
2564 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 692260"];
2565 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 692261"];
2566 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 692262"];
2567 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 692263"];
2568 [label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 692264"];
2569 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 692265"];
2570 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 692266"];
2571 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 692267"];
2572 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 692268"];
2573 [label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 692269"];
2574 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 692270"];
2575 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 692271"];
2576 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 692272"];
2577 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 692273"];
2578 [label="SyntaxToken token; 692274"];
2579 [label="token 692275"];
2580 [label="syntaxTree 692276"];
2581 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 692277"];
2582 [label="return _factory._syntaxTree; 692278"];
2583 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 692279"];
2584 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 692280"];
2585 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 692281"];
2586 [label="RoslynDebug.Assert(next != null); 692282"];
2587 [label="_container 692283"];
2588 [label="Debug.Assert((object)container != null); 692284"];
2589 [label="Debug.Assert(declarationSyntax != null); 692285"];
2590 [label="RoslynDebug.Assert(next != null); 692286"];
2591 [label="_container 692287"];
2592 [label="Debug.Assert((object)container != null || imports != null); 692288"];
2593 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 692289"];
2594 [label="SourceMemberMethodSymbol method = null; 692290"];
2595 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 692291"];
2596 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 692292"];
2597 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 692293"];
2598 [label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 692294"];
2599 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 692295"];
2600 [label="param WithUnsafeRegionIfNecessary(this) 692296"];
2601 [label="binderCache 692297"];
2602 [label="return _factory._binderCache; 692298"];
2603 [label="binderCache.TryAdd(key, resultBinder); 692299"];
2604 [label="binderCache.TryAdd(key, resultBinder); 692300"];
2605 [label="binderCache.TryAdd(key, resultBinder); 692301"];
2606 [label="binderCache.TryAdd(key, resultBinder); 692302"];
2607 [label="return resultBinder; 692303"];
2608 [label="return ((CSharpSyntaxNode)node).Accept(this); 692304"];
2609 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 692305"];
2610 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 692306"];
2611 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 692307"];
2612 [label="Debug.Assert((object)containing != null); 692308"];
2613 [label="Debug.Assert((object)containing != null); 692309"];
2614 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 692310"];
2615 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 692311"];
2616 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 692312"];
2617 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 692313"];
2618 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 692314"];
2619 [label="param BinderWithContainingMemberOrLambda(Binder next) 692315"];
2620 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 692316"];
2621 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 692317"];
2622 [label="param BinderWithContainingMemberOrLambda(this) 692318"];
2623 [label="next 692319"];
2624 [label="flags 692320"];
2625 [label="param BinderWithContainingMemberOrLambda(this) 692321"];
2626 [label="param Binder(Binder next) 692322"];
2627 [label="param Binder(BinderFlags flags) 692323"];
2628 [label="RoslynDebug.Assert(next != null); 692324"];
2629 [label="RoslynDebug.Assert(next != null); 692325"];
2630 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 692326"];
2631 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 692327"];
2632 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 692328"];
2633 [label="param Includes(this BinderFlags self) 692329"];
2634 [label="param Includes(BinderFlags other) 692330"];
2635 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 692331"];
2636 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 692332"];
2637 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 692333"];
2638 [label="param Includes(this BinderFlags self) 692334"];
2639 [label="param Includes(BinderFlags other) 692335"];
2640 [label="this.Compilation 692336"];
2641 [label="_containingMemberOrLambda 692337"];
2642 [label="Debug.Assert(containingMemberOrLambda != null); 692338"];
2643 [label="Debug.Assert(containingMemberOrLambda != null); 692339"];
2644 [label="_containingMemberOrLambda 692340"];
2645 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 692341"];
2646 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 692342"];
2647 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 692343"];
2648 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 692344"];
2649 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 692345"];
2650 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 692346"];
2651 [label="param ValidateParameterNameConflicts(this) 692347"];
2652 [label="PooledHashSet<string>? tpNames = null; 692348"];
2653 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 692349"];
2654 [label="PooledHashSet<string>? pNames = null; 692350"];
2655 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 692351"];
2656 [label="tpNames?.Free(); 692352"];
2657 [label="pNames?.Free(); 692353"];
2658 [label="param BindType(ExpressionSyntax syntax) 692354"];
2659 [label="param BindType(DiagnosticBag diagnostics) 692355"];
2660 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 692356"];
2661 [label="param BindType(bool suppressUseSiteDiagnostics = false) 692357"];
2662 [label="param BindType(this) 692358"];
2663 [label="Debug.Assert(diagnostics != null); 692359"];
2664 [label="Debug.Assert(diagnostics != null); 692360"];
2665 [label="return bindPredefined(syntax, diagnostics); 692361"];
2666 [label="return bindPredefined(syntax, diagnostics); 692362"];
2667 [label="bindPredefined(syntax, diagnostics) 692363"];
2668 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 692364"];
2669 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 692365"];
2670 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 692366"];
2671 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 692367"];
2672 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 692368"];
2673 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 692369"];
2674 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 692370"];
2675 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 692371"];
2676 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 692372"];
2677 [label="param BindPredefinedTypeSymbol(this) 692373"];
2678 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 692374"];
2679 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 692375"];
2680 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 692376"];
2681 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 692377"];
2682 [label="param GetSpecialType(SpecialType typeId) 692378"];
2683 [label="param GetSpecialType(DiagnosticBag diagnostics) 692379"];
2684 [label="param GetSpecialType(SyntaxNode node) 692380"];
2685 [label="param GetSpecialType(this) 692381"];
2686 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 692382"];
2687 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 692383"];
2688 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 692384"];
2689 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 692385"];
2690 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 692386"];
2691 [label="param GetSpecialType(CSharpCompilation compilation) 692387"];
2692 [label="param GetSpecialType(SpecialType typeId) 692388"];
2693 [label="param GetSpecialType(SyntaxNode node) 692389"];
2694 [label="param GetSpecialType(DiagnosticBag diagnostics) 692390"];
2695 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 692391"];
2696 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 692392"];
2697 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 692393"];
2698 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 692394"];
2699 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 692395"];
2700 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 692396"];
2701 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 692397"];
2702 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 692398"];
2703 [label="param ReportUseSiteDiagnostics(Symbol symbol) 692399"];
2704 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 692400"];
2705 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 692401"];
2706 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 692402"];
2707 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 692403"];
2708 [label="Debug.Assert(symbol is object); 692404"];
2709 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 692405"];
2710 [label="isInternal = false; 692406"];
2711 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 692407"];
2712 [label="symbol = symbol.ContainingType; 692408"];
2713 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 692409"];
2714 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 692410"];
2715 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 692411"];
2716 [label="Debug.Assert(symbol is object); 692412"];
2717 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 692413"];
2718 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 692414"];
2719 [label="symbol = symbol.ContainingType; 692415"];
2720 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 692416"];
2721 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 692417"];
2722 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 692418"];
2723 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 692419"];
2724 [label="return typeSymbol; 692420"];
2725 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 692421"];
2726 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 692422"];
2727 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 692423"];
2728 [label="param AreNullableAnnotationsEnabled(this) 692424"];
2729 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 692425"];
2730 [label="type 692426"];
2731 [label="param operator(TypeWithAnnotations typeWithAnnotations) 692427"];
2732 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 692428"];
2733 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 692429"];
2734 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 692430"];
2735 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 692431"];
2736 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 692432"];
2737 [label="Debug.Assert(typeWithAnnotations.HasType); 692433"];
2738 [label="_symbol = null; 692434"];
2739 [label="_symbol 692435"];
2740 [label="_isNullableEnabled = false; 692436"];
2741 [label="_isNullableEnabled 692437"];
2742 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 692438"];
2743 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 692439"];
2744 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 692440"];
2745 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 692441"];
2746 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 692442"];
2747 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 692443"];
2748 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 692444"];
2749 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 692445"];
2750 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 692446"];
2751 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 692447"];
2752 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 692448"];
2753 [label="get { return _containingMemberOrLambda; } 692449"];
2754 [label="return _containingMemberOrLambda; 692450"];
2755 [label="get { return _containingMemberOrLambda; } 692451"];
2756 [label="return _containingMemberOrLambda; 692452"];
2757 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 692453"];
2758 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 692454"];
2759 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 692455"];
2760 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 692456"];
2761 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 692457"];
2762 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 692458"];
2763 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 692459"];
2764 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 692460"];
2765 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 692461"];
2766 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 692462"];
2767 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 692463"];
2768 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 692464"];
2769 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 692465"];
2770 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 692466"];
2771 [label="RoslynDebug.Assert(diagnostics != null); 692467"];
2772 [label="RoslynDebug.Assert(diagnostics != null); 692468"];
2773 [label="DiagnosticInfo? info = null; 692469"];
2774 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 692470"];
2775 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 692471"];
2776 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 692472"];
2777 [label="return kind; 692473"];
2778 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 692474"];
2779 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 692475"];
2780 [label="param UnwrapAlias(DiagnosticBag diagnostics) 692476"];
2781 [label="param UnwrapAlias(SyntaxNode syntax) 692477"];
2782 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 692478"];
2783 [label="param UnwrapAlias(this) 692479"];
2784 [label="symbol.IsAlias 692480"];
2785 [label="=> _symbol?.Kind == SymbolKind.Alias 692481"];
2786 [label="_symbol 692482"];
2787 [label="_symbol?.Kind == SymbolKind.Alias 692483"];
2788 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 692484"];
2789 [label="AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) 692485"];
2790 [label="param AddIfUsesIsNullable(Symbol symbol) 692486"];
2791 [label="param AddIfUsesIsNullable(TypeWithAnnotations type) 692487"];
2792 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 692488"];
2793 [label="param AddIfUsesIsNullable(this) 692489"];
2794 [label="if (UsesIsNullable(type, inProgress))\n            {\n                Add(symbol);\n                return true;\n            } 692490"];
2795 [label="if (UsesIsNullable(type, inProgress))\n            {\n                Add(symbol);\n                return true;\n            } 692491"];
2796 [label="UsesIsNullable(type, inProgress) 692492"];
2797 [label="param UsesIsNullable(TypeWithAnnotations type) 692493"];
2798 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 692494"];
2799 [label="param UsesIsNullable(this) 692495"];
2800 [label="if (!type.HasType)\n            {\n                return false;\n            } 692496"];
2801 [label="var typeSymbol = type.Type; 692497"];
2802 [label="return (type.NullableAnnotation != NullableAnnotation.Oblivious && typeSymbol.IsReferenceType && !typeSymbol.IsErrorType()) ||\n                UsesIsNullable(typeSymbol, inProgress); 692498"];
2803 [label="return (type.NullableAnnotation != NullableAnnotation.Oblivious && typeSymbol.IsReferenceType && !typeSymbol.IsErrorType()) ||\n                UsesIsNullable(typeSymbol, inProgress); 692499"];
2804 [label="return (type.NullableAnnotation != NullableAnnotation.Oblivious && typeSymbol.IsReferenceType && !typeSymbol.IsErrorType()) ||\n                UsesIsNullable(typeSymbol, inProgress); 692500"];
2805 [label="UsesIsNullable(typeSymbol, inProgress) 692501"];
2806 [label="param UsesIsNullable(TypeSymbol type) 692502"];
2807 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 692503"];
2808 [label="param UsesIsNullable(this) 692504"];
2809 [label="if (type is null)\n            {\n                return false;\n            } 692505"];
2810 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 692506"];
2811 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 692507"];
2812 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 692508"];
2813 [label="UsesIsNullable(type.ContainingType, inProgress) 692509"];
2814 [label="param UsesIsNullable(TypeSymbol type) 692510"];
2815 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 692511"];
2816 [label="param UsesIsNullable(this) 692512"];
2817 [label="if (type is null)\n            {\n                return false;\n            } 692513"];
2818 [label="return false; 692514"];
2819 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Array:\n                    return UsesIsNullable(((ArrayTypeSymbol)type).ElementTypeWithAnnotations, inProgress);\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Error:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                    return UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress);\n                case TypeKind.Dynamic:\n                case TypeKind.Enum:\n                    return false;\n                case TypeKind.Pointer:\n                    return UsesIsNullable(((PointerTypeSymbol)type).PointedAtTypeWithAnnotations, inProgress);\n                case TypeKind.TypeParameter:\n                    var typeParameter = (TypeParameterSymbol)type;\n                    // Lafhis\n                    if (inProgress != null ? inProgress.ContainsReference(typeParameter) == true : false)\n                    {\n                        return false;\n                    }\n                    inProgress = inProgress ?? ConsList<TypeParameterSymbol>.Empty;\n                    inProgress = inProgress.Prepend(typeParameter);\n                    return UsesIsNullable(typeParameter.ConstraintTypesNoUseSiteDiagnostics, inProgress) ||\n                        typeParameter.ReferenceTypeConstraintIsNullable == true;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);\n            } 692515"];
2820 [label="return UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress); 692516"];
2821 [label="return UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress); 692517"];
2822 [label="UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress) 692518"];
2823 [label="param UsesIsNullable(ImmutableArray<TypeWithAnnotations> types) 692519"];
2824 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 692520"];
2825 [label="param UsesIsNullable(this) 692521"];
2826 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 692522"];
2827 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 692523"];
2828 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 692524"];
2829 [label="return false; 692525"];
2830 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 692526"];
2831 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 692527"];
2832 [label="AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null) 692528"];
2833 [label="param AddIfUsesIsNullable(Symbol symbol) 692529"];
2834 [label="param AddIfUsesIsNullable(ImmutableArray<ParameterSymbol> parameters) 692530"];
2835 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 692531"];
2836 [label="param AddIfUsesIsNullable(this) 692532"];
2837 [label="foreach (var parameter in parameters)\n            {\n                if (UsesIsNullable(parameter.TypeWithAnnotations, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 692533"];
2838 [label="return false; 692534"];
2839 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 692535"];
2840 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 692536"];
2841 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 692537"];
2842 [label="return result; 692538"];
2843 [label="return VisitList(symbol.GetMembers()); 692539"];
2844 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 692540"];
2845 [label="return result; 692541"];
2846 [label="return VisitList(symbol.GetMembers()); 692542"];
2847 [label="UsesIsNullableVisitor.GetUses(builder, symbol); 692543"];
2848 [label="var format = SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .RemoveParameterOptions(SymbolDisplayParameterOptions.IncludeName); 692544"];
2849 [label="var symbols = builder.SelectAsArray(s => s.ToDisplayString(format)); 692545"];
2850 [label="var symbols = builder.SelectAsArray(s => s.ToDisplayString(format)); 692546"];
2851 [label="var symbols = builder.SelectAsArray(s => s.ToDisplayString(format)); 692547"];
2852 [label="builder.Free(); 692548"];
2853 [label="'ROSLYN_DIFFTOOL' 692549"];
2854 [label="Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 692550"];
2855 [label="s_diffToolPath = Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 692551"];
2856 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\''); 692552"];
2857 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\''); 692553"];
2858 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\''); 692554"];
2859 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\'') 692555"];
2860 [label="param Equal(IEnumerable<T> expected) 692556"];
2861 [label="param Equal(IEnumerable<T> actual) 692557"];
2862 [label="param Equal(IEqualityComparer<T> comparer = null) 692558"];
2863 [label="param Equal(string message = null) 692559"];
2864 [label="param Equal(string itemSeparator = null) 692560"];
2865 [label="param Equal(Func<T, string> itemInspector = null) 692561"];
2866 [label="param Equal(string expectedValueSourcePath = null) 692562"];
2867 [label="param Equal(int expectedValueSourceLine = 0) 692563"];
2868 [label="var toReturn = true; 692564"];
2869 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 692565"];
2870 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 692566"];
2871 [label="CustomAssert.NotNull(actual); 692567"];
2872 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 692568"];
2873 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 692569"];
2874 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 692570"];
2875 [label="SequenceEqual(expected, actual, comparer) 692571"];
2876 [label="param SequenceEqual(IEnumerable<T> expected) 692572"];
2877 [label="param SequenceEqual(IEnumerable<T> actual) 692573"];
2878 [label="param SequenceEqual(IEqualityComparer<T> comparer = null) 692574"];
2879 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 692575"];
2880 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 692576"];
2881 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 692577"];
2882 [label="var enumerator1 = expected.GetEnumerator(); 692578"];
2883 [label="var enumerator2 = actual.GetEnumerator(); 692579"];
2884 [label="while (true)\n            {\n                var hasNext1 = enumerator1.MoveNext();\n                var hasNext2 = enumerator2.MoveNext();\n\n                if (hasNext1 != hasNext2)\n                {\n                    return false;\n                }\n\n                if (!hasNext1)\n                {\n                    break;\n                }\n\n                var value1 = enumerator1.Current;\n                var value2 = enumerator2.Current;\n\n                if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                }\n            } 692580"];
2885 [label="var hasNext1 = enumerator1.MoveNext(); 692581"];
2886 [label="var hasNext2 = enumerator2.MoveNext(); 692582"];
2887 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 692583"];
2888 [label="if (!hasNext1)\n                {\n                    break;\n                } 692584"];
2889 [label="return true; 692585"];
2890 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 692586"];
2891 [label="return true; 692587"];
2892 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\''); 692588"];
2893 [label="return compilation; 692589"];
2894 [label="Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M') 692590"];
2895 [label="param Diagnostic(object code) 692591"];
2896 [label="param Diagnostic(string squiggledText = null) 692592"];
2897 [label="param Diagnostic(object[] arguments = null) 692593"];
2898 [label="param Diagnostic(LinePosition? startLocation = null) 692594"];
2899 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 692595"];
2900 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 692596"];
2901 [label="param Diagnostic(bool isSuppressed = false) 692597"];
2902 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692598"];
2903 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692599"];
2904 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692600"];
2905 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692601"];
2906 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692602"];
2907 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692603"];
2908 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692604"];
2909 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 692605"];
2910 [label="param Diagnostic(object code) 692606"];
2911 [label="param Diagnostic(string squiggledText = null) 692607"];
2912 [label="param Diagnostic(object[] arguments = null) 692608"];
2913 [label="param Diagnostic(LinePosition? startLocation = null) 692609"];
2914 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 692610"];
2915 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 692611"];
2916 [label="param Diagnostic(bool isSuppressed = false) 692612"];
2917 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 692613"];
2918 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692614"];
2919 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692615"];
2920 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692616"];
2921 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692617"];
2922 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692618"];
2923 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692619"];
2924 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692620"];
2925 [label="{ } 692621"];
2926 [label="None = { } 692622"];
2927 [label="null 692623"];
2928 [label="Any = null 692624"];
2929 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692625"];
2930 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 692626"];
2931 [label="param DiagnosticDescription(object code) 692627"];
2932 [label="param DiagnosticDescription(bool isWarningAsError) 692628"];
2933 [label="param DiagnosticDescription(string squiggledText) 692629"];
2934 [label="param DiagnosticDescription(object[] arguments) 692630"];
2935 [label="param DiagnosticDescription(LinePosition? startLocation) 692631"];
2936 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 692632"];
2937 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 692633"];
2938 [label="param DiagnosticDescription(Type errorCodeType = null) 692634"];
2939 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 692635"];
2940 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 692636"];
2941 [label="param DiagnosticDescription(bool isSuppressed = false) 692637"];
2942 [label="param DiagnosticDescription(this) 692638"];
2943 [label="_code 692639"];
2944 [label="_isWarningAsError 692640"];
2945 [label="_isSuppressed 692641"];
2946 [label="_squiggledText 692642"];
2947 [label="_arguments 692643"];
2948 [label="_startPosition 692644"];
2949 [label="_argumentOrderDoesNotMatter 692645"];
2950 [label="_errorCodeType 692646"];
2951 [label="_ignoreArgumentsWhenComparing 692647"];
2952 [label="_defaultSeverityOpt 692648"];
2953 [label="_effectiveSeverityOpt 692649"];
2954 [label="_syntaxPredicate 692650"];
2955 [label="_showPredicate 692651"];
2956 [label="_location 692652"];
2957 [label="_argumentsAsStrings 692653"];
2958 [label="_code 692654"];
2959 [label="_isWarningAsError 692655"];
2960 [label="_squiggledText 692656"];
2961 [label="_arguments 692657"];
2962 [label="_startPosition 692658"];
2963 [label="_syntaxPredicate 692659"];
2964 [label="_argumentOrderDoesNotMatter 692660"];
2965 [label="_errorCodeType = errorCodeType ?? code.GetType(); 692661"];
2966 [label="_errorCodeType 692662"];
2967 [label="_defaultSeverityOpt 692663"];
2968 [label="_effectiveSeverityOpt 692664"];
2969 [label="_isSuppressed 692665"];
2970 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692666"];
2971 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 692667"];
2972 [label="Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20) 692668"];
2973 [label="param WithLocation(int line) 692669"];
2974 [label="param WithLocation(int column) 692670"];
2975 [label="param WithLocation(this) 692671"];
2976 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692672"];
2977 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692673"];
2978 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692674"];
2979 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692675"];
2980 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692676"];
2981 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692677"];
2982 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692678"];
2983 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692679"];
2984 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692680"];
2985 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692681"];
2986 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692682"];
2987 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692683"];
2988 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692684"];
2989 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692685"];
2990 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 692686"];
2991 [label="param DiagnosticDescription(object code) 692687"];
2992 [label="param DiagnosticDescription(bool isWarningAsError) 692688"];
2993 [label="param DiagnosticDescription(string squiggledText) 692689"];
2994 [label="param DiagnosticDescription(object[] arguments) 692690"];
2995 [label="param DiagnosticDescription(LinePosition? startLocation) 692691"];
2996 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 692692"];
2997 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 692693"];
2998 [label="param DiagnosticDescription(Type errorCodeType = null) 692694"];
2999 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 692695"];
3000 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 692696"];
3001 [label="param DiagnosticDescription(bool isSuppressed = false) 692697"];
3002 [label="param DiagnosticDescription(this) 692698"];
3003 [label="_code 692699"];
3004 [label="_isWarningAsError 692700"];
3005 [label="_isSuppressed 692701"];
3006 [label="_squiggledText 692702"];
3007 [label="_arguments 692703"];
3008 [label="_startPosition 692704"];
3009 [label="_argumentOrderDoesNotMatter 692705"];
3010 [label="_errorCodeType 692706"];
3011 [label="_ignoreArgumentsWhenComparing 692707"];
3012 [label="_defaultSeverityOpt 692708"];
3013 [label="_effectiveSeverityOpt 692709"];
3014 [label="_syntaxPredicate 692710"];
3015 [label="_showPredicate 692711"];
3016 [label="_location 692712"];
3017 [label="_argumentsAsStrings 692713"];
3018 [label="_startPosition 692714"];
3019 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 692715"];
3020 [label="Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M') 692716"];
3021 [label="param Diagnostic(object code) 692717"];
3022 [label="param Diagnostic(string squiggledText = null) 692718"];
3023 [label="param Diagnostic(object[] arguments = null) 692719"];
3024 [label="param Diagnostic(LinePosition? startLocation = null) 692720"];
3025 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 692721"];
3026 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 692722"];
3027 [label="param Diagnostic(bool isSuppressed = false) 692723"];
3028 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692724"];
3029 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692725"];
3030 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692726"];
3031 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692727"];
3032 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692728"];
3033 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692729"];
3034 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692730"];
3035 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 692731"];
3036 [label="param Diagnostic(object code) 692732"];
3037 [label="param Diagnostic(string squiggledText = null) 692733"];
3038 [label="param Diagnostic(object[] arguments = null) 692734"];
3039 [label="param Diagnostic(LinePosition? startLocation = null) 692735"];
3040 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 692736"];
3041 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 692737"];
3042 [label="param Diagnostic(bool isSuppressed = false) 692738"];
3043 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 692739"];
3044 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692740"];
3045 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692741"];
3046 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692742"];
3047 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692743"];
3048 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692744"];
3049 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692745"];
3050 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692746"];
3051 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692747"];
3052 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 692748"];
3053 [label="param DiagnosticDescription(object code) 692749"];
3054 [label="param DiagnosticDescription(bool isWarningAsError) 692750"];
3055 [label="param DiagnosticDescription(string squiggledText) 692751"];
3056 [label="param DiagnosticDescription(object[] arguments) 692752"];
3057 [label="param DiagnosticDescription(LinePosition? startLocation) 692753"];
3058 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 692754"];
3059 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 692755"];
3060 [label="param DiagnosticDescription(Type errorCodeType = null) 692756"];
3061 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 692757"];
3062 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 692758"];
3063 [label="param DiagnosticDescription(bool isSuppressed = false) 692759"];
3064 [label="param DiagnosticDescription(this) 692760"];
3065 [label="_code 692761"];
3066 [label="_isWarningAsError 692762"];
3067 [label="_isSuppressed 692763"];
3068 [label="_squiggledText 692764"];
3069 [label="_arguments 692765"];
3070 [label="_startPosition 692766"];
3071 [label="_argumentOrderDoesNotMatter 692767"];
3072 [label="_errorCodeType 692768"];
3073 [label="_ignoreArgumentsWhenComparing 692769"];
3074 [label="_defaultSeverityOpt 692770"];
3075 [label="_effectiveSeverityOpt 692771"];
3076 [label="_syntaxPredicate 692772"];
3077 [label="_showPredicate 692773"];
3078 [label="_location 692774"];
3079 [label="_argumentsAsStrings 692775"];
3080 [label="_code 692776"];
3081 [label="_isWarningAsError 692777"];
3082 [label="_squiggledText 692778"];
3083 [label="_arguments 692779"];
3084 [label="_startPosition 692780"];
3085 [label="_syntaxPredicate 692781"];
3086 [label="_argumentOrderDoesNotMatter 692782"];
3087 [label="_errorCodeType = errorCodeType ?? code.GetType(); 692783"];
3088 [label="_errorCodeType 692784"];
3089 [label="_defaultSeverityOpt 692785"];
3090 [label="_effectiveSeverityOpt 692786"];
3091 [label="_isSuppressed 692787"];
3092 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692788"];
3093 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 692789"];
3094 [label="Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20) 692790"];
3095 [label="param WithLocation(int line) 692791"];
3096 [label="param WithLocation(int column) 692792"];
3097 [label="param WithLocation(this) 692793"];
3098 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692794"];
3099 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692795"];
3100 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692796"];
3101 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692797"];
3102 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692798"];
3103 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692799"];
3104 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692800"];
3105 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692801"];
3106 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692802"];
3107 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692803"];
3108 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692804"];
3109 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692805"];
3110 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692806"];
3111 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692807"];
3112 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 692808"];
3113 [label="param DiagnosticDescription(object code) 692809"];
3114 [label="param DiagnosticDescription(bool isWarningAsError) 692810"];
3115 [label="param DiagnosticDescription(string squiggledText) 692811"];
3116 [label="param DiagnosticDescription(object[] arguments) 692812"];
3117 [label="param DiagnosticDescription(LinePosition? startLocation) 692813"];
3118 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 692814"];
3119 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 692815"];
3120 [label="param DiagnosticDescription(Type errorCodeType = null) 692816"];
3121 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 692817"];
3122 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 692818"];
3123 [label="param DiagnosticDescription(bool isSuppressed = false) 692819"];
3124 [label="param DiagnosticDescription(this) 692820"];
3125 [label="_code 692821"];
3126 [label="_isWarningAsError 692822"];
3127 [label="_isSuppressed 692823"];
3128 [label="_squiggledText 692824"];
3129 [label="_arguments 692825"];
3130 [label="_startPosition 692826"];
3131 [label="_argumentOrderDoesNotMatter 692827"];
3132 [label="_errorCodeType 692828"];
3133 [label="_ignoreArgumentsWhenComparing 692829"];
3134 [label="_defaultSeverityOpt 692830"];
3135 [label="_effectiveSeverityOpt 692831"];
3136 [label="_syntaxPredicate 692832"];
3137 [label="_showPredicate 692833"];
3138 [label="_location 692834"];
3139 [label="_argumentsAsStrings 692835"];
3140 [label="_startPosition 692836"];
3141 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 692837"];
3142 [label="Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M') 692838"];
3143 [label="param Diagnostic(object code) 692839"];
3144 [label="param Diagnostic(string squiggledText = null) 692840"];
3145 [label="param Diagnostic(object[] arguments = null) 692841"];
3146 [label="param Diagnostic(LinePosition? startLocation = null) 692842"];
3147 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 692843"];
3148 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 692844"];
3149 [label="param Diagnostic(bool isSuppressed = false) 692845"];
3150 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692846"];
3151 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692847"];
3152 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692848"];
3153 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692849"];
3154 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692850"];
3155 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692851"];
3156 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692852"];
3157 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 692853"];
3158 [label="param Diagnostic(object code) 692854"];
3159 [label="param Diagnostic(string squiggledText = null) 692855"];
3160 [label="param Diagnostic(object[] arguments = null) 692856"];
3161 [label="param Diagnostic(LinePosition? startLocation = null) 692857"];
3162 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 692858"];
3163 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 692859"];
3164 [label="param Diagnostic(bool isSuppressed = false) 692860"];
3165 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 692861"];
3166 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692862"];
3167 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692863"];
3168 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692864"];
3169 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692865"];
3170 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692866"];
3171 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692867"];
3172 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692868"];
3173 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 692869"];
3174 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 692870"];
3175 [label="param DiagnosticDescription(object code) 692871"];
3176 [label="param DiagnosticDescription(bool isWarningAsError) 692872"];
3177 [label="param DiagnosticDescription(string squiggledText) 692873"];
3178 [label="param DiagnosticDescription(object[] arguments) 692874"];
3179 [label="param DiagnosticDescription(LinePosition? startLocation) 692875"];
3180 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 692876"];
3181 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 692877"];
3182 [label="param DiagnosticDescription(Type errorCodeType = null) 692878"];
3183 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 692879"];
3184 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 692880"];
3185 [label="param DiagnosticDescription(bool isSuppressed = false) 692881"];
3186 [label="param DiagnosticDescription(this) 692882"];
3187 [label="_code 692883"];
3188 [label="_isWarningAsError 692884"];
3189 [label="_isSuppressed 692885"];
3190 [label="_squiggledText 692886"];
3191 [label="_arguments 692887"];
3192 [label="_startPosition 692888"];
3193 [label="_argumentOrderDoesNotMatter 692889"];
3194 [label="_errorCodeType 692890"];
3195 [label="_ignoreArgumentsWhenComparing 692891"];
3196 [label="_defaultSeverityOpt 692892"];
3197 [label="_effectiveSeverityOpt 692893"];
3198 [label="_syntaxPredicate 692894"];
3199 [label="_showPredicate 692895"];
3200 [label="_location 692896"];
3201 [label="_argumentsAsStrings 692897"];
3202 [label="_code 692898"];
3203 [label="_isWarningAsError 692899"];
3204 [label="_squiggledText 692900"];
3205 [label="_arguments 692901"];
3206 [label="_startPosition 692902"];
3207 [label="_syntaxPredicate 692903"];
3208 [label="_argumentOrderDoesNotMatter 692904"];
3209 [label="_errorCodeType = errorCodeType ?? code.GetType(); 692905"];
3210 [label="_errorCodeType 692906"];
3211 [label="_defaultSeverityOpt 692907"];
3212 [label="_effectiveSeverityOpt 692908"];
3213 [label="_isSuppressed 692909"];
3214 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 692910"];
3215 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 692911"];
3216 [label="Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0') 692912"];
3217 [label="Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0') 692913"];
3218 [label="param WithArguments(params object[] arguments) 692914"];
3219 [label="param WithArguments(this) 692915"];
3220 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692916"];
3221 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692917"];
3222 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692918"];
3223 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692919"];
3224 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692920"];
3225 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692921"];
3226 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692922"];
3227 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692923"];
3228 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692924"];
3229 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692925"];
3230 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692926"];
3231 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 692927"];
3232 [label="param DiagnosticDescription(object code) 692928"];
3233 [label="param DiagnosticDescription(bool isWarningAsError) 692929"];
3234 [label="param DiagnosticDescription(string squiggledText) 692930"];
3235 [label="param DiagnosticDescription(object[] arguments) 692931"];
3236 [label="param DiagnosticDescription(LinePosition? startLocation) 692932"];
3237 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 692933"];
3238 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 692934"];
3239 [label="param DiagnosticDescription(Type errorCodeType = null) 692935"];
3240 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 692936"];
3241 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 692937"];
3242 [label="param DiagnosticDescription(bool isSuppressed = false) 692938"];
3243 [label="param DiagnosticDescription(this) 692939"];
3244 [label="_code 692940"];
3245 [label="_isWarningAsError 692941"];
3246 [label="_isSuppressed 692942"];
3247 [label="_squiggledText 692943"];
3248 [label="_arguments 692944"];
3249 [label="_startPosition 692945"];
3250 [label="_argumentOrderDoesNotMatter 692946"];
3251 [label="_errorCodeType 692947"];
3252 [label="_ignoreArgumentsWhenComparing 692948"];
3253 [label="_defaultSeverityOpt 692949"];
3254 [label="_effectiveSeverityOpt 692950"];
3255 [label="_syntaxPredicate 692951"];
3256 [label="_showPredicate 692952"];
3257 [label="_location 692953"];
3258 [label="_argumentsAsStrings 692954"];
3259 [label="_arguments 692955"];
3260 [label="_argumentOrderDoesNotMatter 692956"];
3261 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 692957"];
3262 [label="Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20) 692958"];
3263 [label="param WithLocation(int line) 692959"];
3264 [label="param WithLocation(int column) 692960"];
3265 [label="param WithLocation(this) 692961"];
3266 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692962"];
3267 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692963"];
3268 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692964"];
3269 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692965"];
3270 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692966"];
3271 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692967"];
3272 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692968"];
3273 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692969"];
3274 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692970"];
3275 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692971"];
3276 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692972"];
3277 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692973"];
3278 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692974"];
3279 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 692975"];
3280 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 692976"];
3281 [label="param DiagnosticDescription(object code) 692977"];
3282 [label="param DiagnosticDescription(bool isWarningAsError) 692978"];
3283 [label="param DiagnosticDescription(string squiggledText) 692979"];
3284 [label="param DiagnosticDescription(object[] arguments) 692980"];
3285 [label="param DiagnosticDescription(LinePosition? startLocation) 692981"];
3286 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 692982"];
3287 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 692983"];
3288 [label="param DiagnosticDescription(Type errorCodeType = null) 692984"];
3289 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 692985"];
3290 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 692986"];
3291 [label="param DiagnosticDescription(bool isSuppressed = false) 692987"];
3292 [label="param DiagnosticDescription(this) 692988"];
3293 [label="_code 692989"];
3294 [label="_isWarningAsError 692990"];
3295 [label="_isSuppressed 692991"];
3296 [label="_squiggledText 692992"];
3297 [label="_arguments 692993"];
3298 [label="_startPosition 692994"];
3299 [label="_argumentOrderDoesNotMatter 692995"];
3300 [label="_errorCodeType 692996"];
3301 [label="_ignoreArgumentsWhenComparing 692997"];
3302 [label="_defaultSeverityOpt 692998"];
3303 [label="_effectiveSeverityOpt 692999"];
3304 [label="_syntaxPredicate 693000"];
3305 [label="_showPredicate 693001"];
3306 [label="_location 693002"];
3307 [label="_argumentsAsStrings 693003"];
3308 [label="_startPosition 693004"];
3309 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 693005"];
3310 [label="Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I') 693006"];
3311 [label="param Diagnostic(object code) 693007"];
3312 [label="param Diagnostic(string squiggledText = null) 693008"];
3313 [label="param Diagnostic(object[] arguments = null) 693009"];
3314 [label="param Diagnostic(LinePosition? startLocation = null) 693010"];
3315 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 693011"];
3316 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 693012"];
3317 [label="param Diagnostic(bool isSuppressed = false) 693013"];
3318 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 693014"];
3319 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 693015"];
3320 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 693016"];
3321 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 693017"];
3322 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 693018"];
3323 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 693019"];
3324 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 693020"];
3325 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 693021"];
3326 [label="param Diagnostic(object code) 693022"];
3327 [label="param Diagnostic(string squiggledText = null) 693023"];
3328 [label="param Diagnostic(object[] arguments = null) 693024"];
3329 [label="param Diagnostic(LinePosition? startLocation = null) 693025"];
3330 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 693026"];
3331 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 693027"];
3332 [label="param Diagnostic(bool isSuppressed = false) 693028"];
3333 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 693029"];
3334 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 693030"];
3335 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 693031"];
3336 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 693032"];
3337 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 693033"];
3338 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 693034"];
3339 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 693035"];
3340 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 693036"];
3341 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 693037"];
3342 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 693038"];
3343 [label="param DiagnosticDescription(object code) 693039"];
3344 [label="param DiagnosticDescription(bool isWarningAsError) 693040"];
3345 [label="param DiagnosticDescription(string squiggledText) 693041"];
3346 [label="param DiagnosticDescription(object[] arguments) 693042"];
3347 [label="param DiagnosticDescription(LinePosition? startLocation) 693043"];
3348 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 693044"];
3349 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 693045"];
3350 [label="param DiagnosticDescription(Type errorCodeType = null) 693046"];
3351 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 693047"];
3352 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 693048"];
3353 [label="param DiagnosticDescription(bool isSuppressed = false) 693049"];
3354 [label="param DiagnosticDescription(this) 693050"];
3355 [label="_code 693051"];
3356 [label="_isWarningAsError 693052"];
3357 [label="_isSuppressed 693053"];
3358 [label="_squiggledText 693054"];
3359 [label="_arguments 693055"];
3360 [label="_startPosition 693056"];
3361 [label="_argumentOrderDoesNotMatter 693057"];
3362 [label="_errorCodeType 693058"];
3363 [label="_ignoreArgumentsWhenComparing 693059"];
3364 [label="_defaultSeverityOpt 693060"];
3365 [label="_effectiveSeverityOpt 693061"];
3366 [label="_syntaxPredicate 693062"];
3367 [label="_showPredicate 693063"];
3368 [label="_location 693064"];
3369 [label="_argumentsAsStrings 693065"];
3370 [label="_code 693066"];
3371 [label="_isWarningAsError 693067"];
3372 [label="_squiggledText 693068"];
3373 [label="_arguments 693069"];
3374 [label="_startPosition 693070"];
3375 [label="_syntaxPredicate 693071"];
3376 [label="_argumentOrderDoesNotMatter 693072"];
3377 [label="_errorCodeType = errorCodeType ?? code.GetType(); 693073"];
3378 [label="_errorCodeType 693074"];
3379 [label="_defaultSeverityOpt 693075"];
3380 [label="_effectiveSeverityOpt 693076"];
3381 [label="_isSuppressed 693077"];
3382 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 693078"];
3383 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 693079"];
3384 [label="Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I') 693080"];
3385 [label="Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I') 693081"];
3386 [label="param WithArguments(params object[] arguments) 693082"];
3387 [label="param WithArguments(this) 693083"];
3388 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693084"];
3389 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693085"];
3390 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693086"];
3391 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693087"];
3392 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693088"];
3393 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693089"];
3394 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693090"];
3395 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693091"];
3396 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693092"];
3397 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693093"];
3398 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693094"];
3399 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 693095"];
3400 [label="param DiagnosticDescription(object code) 693096"];
3401 [label="param DiagnosticDescription(bool isWarningAsError) 693097"];
3402 [label="param DiagnosticDescription(string squiggledText) 693098"];
3403 [label="param DiagnosticDescription(object[] arguments) 693099"];
3404 [label="param DiagnosticDescription(LinePosition? startLocation) 693100"];
3405 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 693101"];
3406 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 693102"];
3407 [label="param DiagnosticDescription(Type errorCodeType = null) 693103"];
3408 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 693104"];
3409 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 693105"];
3410 [label="param DiagnosticDescription(bool isSuppressed = false) 693106"];
3411 [label="param DiagnosticDescription(this) 693107"];
3412 [label="_code 693108"];
3413 [label="_isWarningAsError 693109"];
3414 [label="_isSuppressed 693110"];
3415 [label="_squiggledText 693111"];
3416 [label="_arguments 693112"];
3417 [label="_startPosition 693113"];
3418 [label="_argumentOrderDoesNotMatter 693114"];
3419 [label="_errorCodeType 693115"];
3420 [label="_ignoreArgumentsWhenComparing 693116"];
3421 [label="_defaultSeverityOpt 693117"];
3422 [label="_effectiveSeverityOpt 693118"];
3423 [label="_syntaxPredicate 693119"];
3424 [label="_showPredicate 693120"];
3425 [label="_location 693121"];
3426 [label="_argumentsAsStrings 693122"];
3427 [label="_arguments 693123"];
3428 [label="_argumentOrderDoesNotMatter 693124"];
3429 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 693125"];
3430 [label="Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18) 693126"];
3431 [label="param WithLocation(int line) 693127"];
3432 [label="param WithLocation(int column) 693128"];
3433 [label="param WithLocation(this) 693129"];
3434 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693130"];
3435 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693131"];
3436 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693132"];
3437 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693133"];
3438 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693134"];
3439 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693135"];
3440 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693136"];
3441 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693137"];
3442 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693138"];
3443 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693139"];
3444 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693140"];
3445 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693141"];
3446 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693142"];
3447 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 693143"];
3448 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 693144"];
3449 [label="param DiagnosticDescription(object code) 693145"];
3450 [label="param DiagnosticDescription(bool isWarningAsError) 693146"];
3451 [label="param DiagnosticDescription(string squiggledText) 693147"];
3452 [label="param DiagnosticDescription(object[] arguments) 693148"];
3453 [label="param DiagnosticDescription(LinePosition? startLocation) 693149"];
3454 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 693150"];
3455 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 693151"];
3456 [label="param DiagnosticDescription(Type errorCodeType = null) 693152"];
3457 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 693153"];
3458 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 693154"];
3459 [label="param DiagnosticDescription(bool isSuppressed = false) 693155"];
3460 [label="param DiagnosticDescription(this) 693156"];
3461 [label="_code 693157"];
3462 [label="_isWarningAsError 693158"];
3463 [label="_isSuppressed 693159"];
3464 [label="_squiggledText 693160"];
3465 [label="_arguments 693161"];
3466 [label="_startPosition 693162"];
3467 [label="_argumentOrderDoesNotMatter 693163"];
3468 [label="_errorCodeType 693164"];
3469 [label="_ignoreArgumentsWhenComparing 693165"];
3470 [label="_defaultSeverityOpt 693166"];
3471 [label="_effectiveSeverityOpt 693167"];
3472 [label="_syntaxPredicate 693168"];
3473 [label="_showPredicate 693169"];
3474 [label="_location 693170"];
3475 [label="_argumentsAsStrings 693171"];
3476 [label="_startPosition 693172"];
3477 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ); 693173"];
3478 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ) 693174"];
3479 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ) 693175"];
3480 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ) 693176"];
3481 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ) 693177"];
3482 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7, targetFramework: TargetFramework.NetCoreApp).VerifyDiagnostics(\n                // (3,20): error CS0754: A partial method may not explicitly implement an interface method\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodNotExplicit, 'M').WithLocation(3, 20),\n                // (3,20): error CS0751: A partial method must be declared within a partial type\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_PartialMethodOnlyInPartialClass, 'M').WithLocation(3, 20),\n                // (3,20): error CS8652: The feature 'default interface implementation' is not available in C# 7.0. Please use language version 8.0 or greater.\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion7, 'M').WithArguments('default interface implementation', '8.0').WithLocation(3, 20),\n                // (3,18): error CS0540: 'I.M()': containing type does not implement interface 'I'\n                //     partial void I.M();\n                Diagnostic(ErrorCode.ERR_ClassDoesntImplementInterface, 'I').WithArguments('I.M()', 'I').WithLocation(3, 18)\n                ) 693178"];
3483 [label="param VerifyDiagnostics(this TCompilation c) 693179"];
3484 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 693180"];
3485 [label="var diagnostics = c.GetDiagnostics(); 693181"];
3486 [label="var diagnostics = c.GetDiagnostics(); 693182"];
3487 [label="param FromGlobalUsings(CSharpCompilation compilation) 693183"];
3488 [label="var usings = compilation.Options.Usings; 693184"];
3489 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 693185"];
3490 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 693186"];
3491 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 693187"];
3492 [label="return Empty; 693188"];
3493 [label="param Complete(CancellationToken cancellationToken) 693189"];
3494 [label="param Complete(this) 693190"];
3495 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 693191"];
3496 [label="cancellationToken.ThrowIfCancellationRequested(); 693192"];
3497 [label="var incompletePart = _state.NextIncompletePart; 693193"];
3498 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 693194"];
3499 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 693195"];
3500 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 693196"];
3501 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 693197"];
3502 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 693198"];
3503 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 693199"];
3504 [label="Validate() 693200"];
3505 [label="param Validate(this) 693201"];
3506 [label="if (this == Empty)\n            {\n                return;\n            } 693202"];
3507 [label="return; 693203"];
3508 [label="Validate(); 693204"];
3509 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 693205"];
3510 [label="return; 693206"];
3511 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 693207"];
3512 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 693208"];
3513 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 693209"];
3514 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 693210"];
3515 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 693211"];
3516 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 693212"];
3517 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 693213"];
3518 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 693214"];
3519 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 693215"];
3520 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 693216"];
3521 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 693217"];
3522 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 693218"];
3523 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 693219"];
3524 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 693220"];
3525 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 693221"];
3526 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 693222"];
3527 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 693223"];
3528 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 693224"];
3529 [label="param GetWellKnownTypeMember(WellKnownMember member) 693225"];
3530 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 693226"];
3531 [label="param GetWellKnownTypeMember(Location location = null) 693227"];
3532 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 693228"];
3533 [label="param GetWellKnownTypeMember(bool isOptional = false) 693229"];
3534 [label="Debug.Assert((syntax != null) ^ (location != null)); 693230"];
3535 [label="Debug.Assert((syntax != null) ^ (location != null)); 693231"];
3536 [label="Debug.Assert((syntax != null) ^ (location != null)); 693232"];
3537 [label="Debug.Assert((syntax != null) ^ (location != null)); 693233"];
3538 [label="DiagnosticInfo useSiteDiagnostic; 693234"];
3539 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 693235"];
3540 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 693236"];
3541 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 693237"];
3542 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 693238"];
3543 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 693239"];
3544 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 693240"];
3545 [label="param GetWellKnownTypeMember(WellKnownMember member) 693241"];
3546 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 693242"];
3547 [label="param GetWellKnownTypeMember(bool isOptional = false) 693243"];
3548 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 693244"];
3549 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 693245"];
3550 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 693246"];
3551 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 693247"];
3552 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 693248"];
3553 [label="Debug.Assert(symbol is object); 693249"];
3554 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 693250"];
3555 [label="isInternal = false; 693251"];
3556 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 693252"];
3557 [label="symbol = symbol.ContainingType; 693253"];
3558 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 693254"];
3559 [label="return true; 693255"];
3560 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 693256"];
3561 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 693257"];
3562 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 693258"];
3563 [label="Debug.Assert(symbol is object); 693259"];
3564 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 693260"];
3565 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 693261"];
3566 [label="symbol = symbol.ContainingType; 693262"];
3567 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 693263"];
3568 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 693264"];
3569 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 693265"];
3570 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 693266"];
3571 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 693267"];
3572 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 693268"];
3573 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 693269"];
3574 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 693270"];
3575 [label="Debug.Assert(symbol is object); 693271"];
3576 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 693272"];
3577 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 693273"];
3578 [label="symbol = symbol.ContainingType; 693274"];
3579 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 693275"];
3580 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 693276"];
3581 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 693277"];
3582 [label="Debug.Assert(symbol is object); 693278"];
3583 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 693279"];
3584 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 693280"];
3585 [label="symbol = symbol.ContainingType; 693281"];
3586 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 693282"];
3587 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 693283"];
3588 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 693284"];
3589 [label="return memberSymbol; 693285"];
3590 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 693286"];
3591 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 693287"];
3592 [label="return memberSymbol; 693288"];
3593 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 693289"];
3594 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 693290"];
3595 [label="Debug.Assert(symbol is object); 693291"];
3596 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 693292"];
3597 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 693293"];
3598 [label="symbol = symbol.ContainingType; 693294"];
3599 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 693295"];
3600 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 693296"];
3601 [label="return memberSymbol; 693297"];
3602 [label="return memberSymbol; 693298"];
3603 [label="_compilation 693299"];
3604 [label="_syntaxTree 693300"];
3605 [label="_ignoreAccessibility 693301"];
3606 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 693302"];
3607 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 693303"];
3608 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 693304"];
3609 [label="new BuckStopsHereBinder(compilation) 693305"];
3610 [label="param BuckStopsHereBinder(this) 693306"];
3611 [label="param BuckStopsHereBinder(this) 693307"];
3612 [label="param Binder(this) 693308"];
3613 [label="internal CSharpCompilation Compilation { get; } 693309"];
3614 [label="Flags 693310"];
3615 [label="protected internal Binder? Next { get; } 693311"];
3616 [label="_lazyConversions 693312"];
3617 [label="_lazyOverloadResolution 693313"];
3618 [label="RoslynDebug.Assert(compilation != null); 693314"];
3619 [label="RoslynDebug.Assert(compilation != null); 693315"];
3620 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 693316"];
3621 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 693317"];
3622 [label="InScript 693318"];
3623 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 693319"];
3624 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 693320"];
3625 [label="Debug.Assert(node != null); 693321"];
3626 [label="Debug.Assert(node != null); 693322"];
3627 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 693323"];
3628 [label="param BinderFactoryVisitor(this) 693324"];
3629 [label="_position 693325"];
3630 [label="_memberDeclarationOpt 693326"];
3631 [label="_memberOpt 693327"];
3632 [label="_factory 693328"];
3633 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 693329"];
3634 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 693330"];
3635 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 693331"];
3636 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 693332"];
3637 [label="visitor.Visit(node) 693333"];
3638 [label="VisitCore(node) 693334"];
3639 [label="return ((CSharpSyntaxNode)node).Accept(this); 693335"];
3640 [label="VisitTypeDeclarationCore(node) 693336"];
3641 [label="NodeUsage extraInfo = NodeUsage.Normal; 693337"];
3642 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 693338"];
3643 [label="VisitTypeDeclarationCore(parent, extraInfo) 693339"];
3644 [label="CreateBinderCacheKey(parent, extraInfo) 693340"];
3645 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 693341"];
3646 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 693342"];
3647 [label="return new BinderCacheKey(node, usage); 693343"];
3648 [label="new BinderCacheKey(node, usage) 693344"];
3649 [label="param BinderCacheKey(this) 693345"];
3650 [label="var key = CreateBinderCacheKey(parent, extraInfo); 693346"];
3651 [label="Binder resultBinder; 693347"];
3652 [label="binderCache 693348"];
3653 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 693349"];
3654 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 693350"];
3655 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 693351"];
3656 [label="SyntaxToken token; 693352"];
3657 [label="token 693353"];
3658 [label="syntaxTree 693354"];
3659 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 693355"];
3660 [label="return _factory._syntaxTree; 693356"];
3661 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 693357"];
3662 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 693358"];
3663 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 693359"];
3664 [label="RoslynDebug.Assert(next != null); 693360"];
3665 [label="_container 693361"];
3666 [label="Debug.Assert((object)container != null); 693362"];
3667 [label="Debug.Assert(declarationSyntax != null); 693363"];
3668 [label="Debug.Assert((object)container != null || imports != null); 693364"];
3669 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 693365"];
3670 [label="this.Flags.Includes(flags) 693366"];
3671 [label="RoslynDebug.Assert(next != null); 693367"];
3672 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 693368"];
3673 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 693369"];
3674 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 693370"];
3675 [label="param Includes(this BinderFlags self) 693371"];
3676 [label="param Includes(BinderFlags other) 693372"];
3677 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 693373"];
3678 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 693374"];
3679 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 693375"];
3680 [label="param Includes(this BinderFlags self) 693376"];
3681 [label="param Includes(BinderFlags other) 693377"];
3682 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 693378"];
3683 [label="Debug.Assert(diagnostics != null); 693379"];
3684 [label="Debug.Assert(diagnostics != null); 693380"];
3685 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 693381"];
3686 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 693382"];
3687 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 693383"];
3688 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 693384"];
3689 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 693385"];
3690 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 693386"];
3691 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 693387"];
3692 [label="param CreateErrorIfLookupOnTypeParameter(string name) 693388"];
3693 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 693389"];
3694 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 693390"];
3695 [label="param CreateErrorIfLookupOnTypeParameter(this) 693391"];
3696 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 693392"];
3697 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 693393"];
3698 [label="return null; 693394"];
3699 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 693395"];
3700 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 693396"];
3701 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 693397"];
3702 [label="instance.IsClear 693398"];
3703 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 693399"];
3704 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693400"];
3705 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693401"];
3706 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693402"];
3707 [label="Debug.Assert(instance.IsClear); 693403"];
3708 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 693404"];
3709 [label="param LookupSymbolsSimpleName(int arity) 693405"];
3710 [label="param LookupSymbolsSimpleName(bool diagnose) 693406"];
3711 [label="param LookupSymbolsOrMembersInternal(int arity) 693407"];
3712 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 693408"];
3713 [label="param LookupSymbolsInternal(int arity) 693409"];
3714 [label="param LookupSymbolsInternal(bool diagnose) 693410"];
3715 [label="result.IsClear 693411"];
3716 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 693412"];
3717 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693413"];
3718 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693414"];
3719 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693415"];
3720 [label="Debug.Assert(result.IsClear); 693416"];
3721 [label="Debug.Assert(options.AreValid()); 693417"];
3722 [label="options.AreValid() 693418"];
3723 [label="param AreValid(this LookupOptions options) 693419"];
3724 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 693420"];
3725 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 693421"];
3726 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 693422"];
3727 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 693423"];
3728 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 693424"];
3729 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 693425"];
3730 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 693426"];
3731 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 693427"];
3732 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 693428"];
3733 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 693429"];
3734 [label="return OnlyOneBitSet(onlyOptions); 693430"];
3735 [label="OnlyOneBitSet(onlyOptions) 693431"];
3736 [label="param OnlyOneBitSet(LookupOptions o) 693432"];
3737 [label="return (o & (o - 1)) == 0; 693433"];
3738 [label="return (o & (o - 1)) == 0; 693434"];
3739 [label="param LookupSymbolsInSingleBinder(LookupResult result) 693435"];
3740 [label="param LookupSymbolsInSingleBinder(string name) 693436"];
3741 [label="param LookupSymbolsInSingleBinder(int arity) 693437"];
3742 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 693438"];
3743 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 693439"];
3744 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 693440"];
3745 [label="param LookupSymbolsInSingleBinder(bool diagnose) 693441"];
3746 [label="param LookupSymbolsInSingleBinder(this) 693442"];
3747 [label="result.IsClear 693443"];
3748 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 693444"];
3749 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693445"];
3750 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693446"];
3751 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693447"];
3752 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 693448"];
3753 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 693449"];
3754 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 693450"];
3755 [label="param LookupSymbolsInSingleBinder(int arity) 693451"];
3756 [label="param LookupSymbolsInSingleBinder(bool diagnose) 693452"];
3757 [label="result.IsClear 693453"];
3758 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 693454"];
3759 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693455"];
3760 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693456"];
3761 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693457"];
3762 [label="Debug.Assert(result.IsClear); 693458"];
3763 [label="IsSubmissionClass 693459"];
3764 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 693460"];
3765 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 693461"];
3766 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 693462"];
3767 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 693463"];
3768 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 693464"];
3769 [label="param LookupMembersInternal(int arity) 693465"];
3770 [label="param LookupMembersInternal(bool diagnose) 693466"];
3771 [label="Debug.Assert(options.AreValid()); 693467"];
3772 [label="options.AreValid() 693468"];
3773 [label="param AreValid(this LookupOptions options) 693469"];
3774 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 693470"];
3775 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 693471"];
3776 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 693472"];
3777 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 693473"];
3778 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 693474"];
3779 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 693475"];
3780 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 693476"];
3781 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 693477"];
3782 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 693478"];
3783 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 693479"];
3784 [label="return OnlyOneBitSet(onlyOptions); 693480"];
3785 [label="OnlyOneBitSet(onlyOptions) 693481"];
3786 [label="param OnlyOneBitSet(LookupOptions o) 693482"];
3787 [label="return (o & (o - 1)) == 0; 693483"];
3788 [label="return (o & (o - 1)) == 0; 693484"];
3789 [label="Debug.Assert(arity >= 0); 693485"];
3790 [label="Debug.Assert(arity >= 0); 693486"];
3791 [label="param LookupMembersInType(int arity) 693487"];
3792 [label="param LookupMembersInType(bool diagnose) 693488"];
3793 [label="param LookupMembersInInterface(int arity) 693489"];
3794 [label="param LookupMembersInInterface(bool diagnose) 693490"];
3795 [label="Debug.Assert((object)type != null); 693491"];
3796 [label="Debug.Assert(type.IsInterface); 693492"];
3797 [label="param LookupMembersInInterfaceOnly(LookupResult current) 693493"];
3798 [label="param LookupMembersInInterfaceOnly(int arity) 693494"];
3799 [label="param LookupMembersInInterfaceOnly(TypeSymbol accessThroughType) 693495"];
3800 [label="param LookupMembersInInterfaceOnly(bool diagnose) 693496"];
3801 [label="Debug.Assert((object)type != null); 693497"];
3802 [label="Debug.Assert(type.IsInterface); 693498"];
3803 [label="param LookupMembersWithoutInheritance(LookupResult result) 693499"];
3804 [label="param LookupMembersWithoutInheritance(int arity) 693500"];
3805 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 693501"];
3806 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 693502"];
3807 [label="param LookupMembersWithoutInheritance(bool diagnose) 693503"];
3808 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 693504"];
3809 [label="param GetCandidateMembers(Binder originalBinder) 693505"];
3810 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 693506"];
3811 [label="return this.Flags.Includes(BinderFlags.Cref); 693507"];
3812 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 693508"];
3813 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 693509"];
3814 [label="LookupMembersInInterfacesWithoutInheritance(current, GetBaseInterfaces(type, basesBeingResolved, ref useSiteDiagnostics),\n                    name, arity, basesBeingResolved, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics); 693510"];
3815 [label="param LookupMembersInInterfacesWithoutInheritance(LookupResult current) 693511"];
3816 [label="param LookupMembersInInterfacesWithoutInheritance(ImmutableArray<NamedTypeSymbol> interfaces) 693512"];
3817 [label="param LookupMembersInInterfacesWithoutInheritance(string name) 693513"];
3818 [label="param LookupMembersInInterfacesWithoutInheritance(int arity) 693514"];
3819 [label="param LookupMembersInInterfacesWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 693515"];
3820 [label="param LookupMembersInInterfacesWithoutInheritance(LookupOptions options) 693516"];
3821 [label="param LookupMembersInInterfacesWithoutInheritance(Binder originalBinder) 693517"];
3822 [label="param LookupMembersInInterfacesWithoutInheritance(TypeSymbol accessThroughType) 693518"];
3823 [label="param LookupMembersInInterfacesWithoutInheritance(bool diagnose) 693519"];
3824 [label="if (interfaces.Length > 0)\n            {\n                var tmp = LookupResult.GetInstance();\n                HashSet<NamedTypeSymbol> seenInterfaces = null;\n                if (interfaces.Length > 1)\n                {\n                    seenInterfaces = new HashSet<NamedTypeSymbol>(Symbols.SymbolEqualityComparer.IgnoringNullable);\n                }\n\n                foreach (NamedTypeSymbol baseInterface in interfaces)\n                {\n                    if (seenInterfaces is null || seenInterfaces.Add(baseInterface))\n                    {\n                        LookupMembersWithoutInheritance(tmp, baseInterface, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                        MergeHidingLookupResults(current, tmp, basesBeingResolved, ref useSiteDiagnostics);\n                        tmp.Clear();\n                    }\n                }\n                tmp.Free();\n            } 693520"];
3825 [label="if (interfaces.Length > 0)\n            {\n                var tmp = LookupResult.GetInstance();\n                HashSet<NamedTypeSymbol> seenInterfaces = null;\n                if (interfaces.Length > 1)\n                {\n                    seenInterfaces = new HashSet<NamedTypeSymbol>(Symbols.SymbolEqualityComparer.IgnoringNullable);\n                }\n\n                foreach (NamedTypeSymbol baseInterface in interfaces)\n                {\n                    if (seenInterfaces is null || seenInterfaces.Add(baseInterface))\n                    {\n                        LookupMembersWithoutInheritance(tmp, baseInterface, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                        MergeHidingLookupResults(current, tmp, basesBeingResolved, ref useSiteDiagnostics);\n                        tmp.Clear();\n                    }\n                }\n                tmp.Free();\n            } 693521"];
3826 [label="instance.IsClear 693522"];
3827 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 693523"];
3828 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693524"];
3829 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693525"];
3830 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693526"];
3831 [label="Debug.Assert(instance.IsClear); 693527"];
3832 [label="this.LookupMembersInClass(tmp, this.Compilation.GetSpecialType(SpecialType.System_Object), name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 693528"];
3833 [label="param LookupMembersInClass(int arity) 693529"];
3834 [label="param LookupMembersInClass(Binder originalBinder) 693530"];
3835 [label="param LookupMembersInClass(TypeSymbol accessThroughType) 693531"];
3836 [label="param LookupMembersInClass(bool diagnose) 693532"];
3837 [label="Debug.Assert((object)type != null); 693533"];
3838 [label="tmp.Clear(); 693534"];
3839 [label="param LookupMembersWithoutInheritance(LookupResult result) 693535"];
3840 [label="param LookupMembersWithoutInheritance(int arity) 693536"];
3841 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 693537"];
3842 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 693538"];
3843 [label="param LookupMembersWithoutInheritance(bool diagnose) 693539"];
3844 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 693540"];
3845 [label="param GetCandidateMembers(Binder originalBinder) 693541"];
3846 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 693542"];
3847 [label="param MergePrioritized(LookupResult other) 693543"];
3848 [label="param MergePrioritized(this) 693544"];
3849 [label="other.Kind 693545"];
3850 [label="get\n            {\n                return _kind;\n            } 693546"];
3851 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 693547"];
3852 [label="Kind 693548"];
3853 [label="get\n            {\n                return _kind;\n            } 693549"];
3854 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 693550"];
3855 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 693551"];
3856 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 693552"];
3857 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 693553"];
3858 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 693554"];
3859 [label="tmp.IsMultiViable 693555"];
3860 [label="return _kind; 693556"];
3861 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 693557"];
3862 [label="result.IsMultiViable 693558"];
3863 [label="return _kind; 693559"];
3864 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 693560"];
3865 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 693561"];
3866 [label="originalBinder.InCrefButNotParameterOrReturnType 693562"];
3867 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 693563"];
3868 [label="return this.Flags.Includes(BinderFlags.Cref); 693564"];
3869 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 693565"];
3870 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 693566"];
3871 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 693567"];
3872 [label="visited?.Free(); 693568"];
3873 [label="this.Clear(); 693569"];
3874 [label="tmp.Free(); 693570"];
3875 [label="tmp.Free(); 693571"];
3876 [label="param LookupSymbol(Binder originalBinder) 693572"];
3877 [label="param LookupSymbol(int arity) 693573"];
3878 [label="param LookupSymbol(ConsList<TypeSymbol> basesBeingResolved) 693574"];
3879 [label="param LookupSymbol(bool diagnose) 693575"];
3880 [label="param LookupSymbolInAliases(Binder originalBinder) 693576"];
3881 [label="param LookupSymbolInAliases(LookupResult result) 693577"];
3882 [label="param LookupSymbolInAliases(int arity) 693578"];
3883 [label="param LookupSymbolInAliases(ConsList<TypeSymbol> basesBeingResolved) 693579"];
3884 [label="param LookupSymbolInAliases(LookupOptions options) 693580"];
3885 [label="param LookupSymbolInAliases(bool diagnose) 693581"];
3886 [label="originalBinder.IsSemanticModelBinder 693582"];
3887 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 693583"];
3888 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 693584"];
3889 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 693585"];
3890 [label="this.Flags.Includes(BinderFlags.SemanticModel) 693586"];
3891 [label="param Includes(this BinderFlags self) 693587"];
3892 [label="param Includes(BinderFlags other) 693588"];
3893 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 693589"];
3894 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 693590"];
3895 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 693591"];
3896 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 693592"];
3897 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 693593"];
3898 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 693594"];
3899 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 693595"];
3900 [label="param LookupSymbolInUsings(Binder originalBinder) 693596"];
3901 [label="param LookupSymbolInUsings(LookupResult result) 693597"];
3902 [label="param LookupSymbolInUsings(string name) 693598"];
3903 [label="param LookupSymbolInUsings(int arity) 693599"];
3904 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 693600"];
3905 [label="param LookupSymbolInUsings(LookupOptions options) 693601"];
3906 [label="param LookupSymbolInUsings(bool diagnose) 693602"];
3907 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 693603"];
3908 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 693604"];
3909 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 693605"];
3910 [label="param Includes(this BinderFlags self) 693606"];
3911 [label="param Includes(BinderFlags other) 693607"];
3912 [label="originalBinder.IsSemanticModelBinder 693608"];
3913 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 693609"];
3914 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 693610"];
3915 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 693611"];
3916 [label="this.Flags.Includes(BinderFlags.SemanticModel) 693612"];
3917 [label="param Includes(this BinderFlags self) 693613"];
3918 [label="param Includes(BinderFlags other) 693614"];
3919 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 693615"];
3920 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 693616"];
3921 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693617"];
3922 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693618"];
3923 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 693619"];
3924 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 693620"];
3925 [label="param LookupSymbolsInSingleBinder(bool diagnose) 693621"];
3926 [label="result.IsClear 693622"];
3927 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 693623"];
3928 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693624"];
3929 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693625"];
3930 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693626"];
3931 [label="Debug.Assert(result.IsClear); 693627"];
3932 [label="IsSubmissionClass 693628"];
3933 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 693629"];
3934 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 693630"];
3935 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 693631"];
3936 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 693632"];
3937 [label="param FromSyntax(InContainerBinder binder) 693633"];
3938 [label="param FromSyntax(ConsList<TypeSymbol> basesBeingResolved) 693634"];
3939 [label="SyntaxList<UsingDirectiveSyntax> usingDirectives; 693635"];
3940 [label="usingDirectives 693636"];
3941 [label="SyntaxList<ExternAliasDirectiveSyntax> externAliasDirectives; 693637"];
3942 [label="externAliasDirectives 693638"];
3943 [label="param LookupMembersInternal(bool diagnose) 693639"];
3944 [label="Debug.Assert(options.AreValid()); 693640"];
3945 [label="options.AreValid() 693641"];
3946 [label="param AreValid(this LookupOptions options) 693642"];
3947 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 693643"];
3948 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 693644"];
3949 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 693645"];
3950 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 693646"];
3951 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 693647"];
3952 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 693648"];
3953 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 693649"];
3954 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 693650"];
3955 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 693651"];
3956 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 693652"];
3957 [label="return OnlyOneBitSet(onlyOptions); 693653"];
3958 [label="OnlyOneBitSet(onlyOptions) 693654"];
3959 [label="param OnlyOneBitSet(LookupOptions o) 693655"];
3960 [label="return (o & (o - 1)) == 0; 693656"];
3961 [label="return (o & (o - 1)) == 0; 693657"];
3962 [label="Debug.Assert(arity >= 0); 693658"];
3963 [label="param LookupMembersInNamespace(int arity) 693659"];
3964 [label="param LookupMembersInNamespace(bool diagnose) 693660"];
3965 [label="param GetCandidateMembers(Binder originalBinder) 693661"];
3966 [label="param CheckViability(int arity) 693662"];
3967 [label="param CheckViability(TypeSymbol accessThroughType) 693663"];
3968 [label="param CheckViability(bool diagnose) 693664"];
3969 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 693665"];
3970 [label="bool inaccessibleViaQualifier; 693666"];
3971 [label="DiagnosticInfo diagInfo; 693667"];
3972 [label="param WrongArity(Symbol symbol) 693668"];
3973 [label="param WrongArity(int arity) 693669"];
3974 [label="param WrongArity(bool diagnose) 693670"];
3975 [label="param WrongArity(LookupOptions options) 693671"];
3976 [label="param WrongArity(out DiagnosticInfo diagInfo) 693672"];
3977 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 693673"];
3978 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 693674"];
3979 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 693675"];
3980 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 693676"];
3981 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 693677"];
3982 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 693678"];
3983 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 693679"];
3984 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 693680"];
3985 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 693681"];
3986 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 693682"];
3987 [label="options.IsAttributeTypeLookup() 693683"];
3988 [label="param IsAttributeTypeLookup(this LookupOptions options) 693684"];
3989 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 693685"];
3990 [label="diagInfo = null; 693686"];
3991 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 693687"];
3992 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 693688"];
3993 [label="RefineAccessThroughType(options, accessThroughType) 693689"];
3994 [label="param RefineAccessThroughType(LookupOptions options) 693690"];
3995 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 693691"];
3996 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 693692"];
3997 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 693693"];
3998 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 693694"];
3999 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 693695"];
4000 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 693696"];
4001 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 693697"];
4002 [label="param IsAccessible(TypeSymbol accessThroughType) 693698"];
4003 [label="param IsAccessible(out bool failedThroughTypeCheck) 693699"];
4004 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 693700"];
4005 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 693701"];
4006 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 693702"];
4007 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 693703"];
4008 [label="param Includes(this BinderFlags self) 693704"];
4009 [label="param Includes(BinderFlags other) 693705"];
4010 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 693706"];
4011 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 693707"];
4012 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 693708"];
4013 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 693709"];
4014 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 693710"];
4015 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 693711"];
4016 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 693712"];
4017 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 693713"];
4018 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 693714"];
4019 [label="param IsSymbolAccessibleConditional(this) 693715"];
4020 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 693716"];
4021 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 693717"];
4022 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 693718"];
4023 [label="param Includes(this BinderFlags self) 693719"];
4024 [label="param Includes(BinderFlags other) 693720"];
4025 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 693721"];
4026 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 693722"];
4027 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 693723"];
4028 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 693724"];
4029 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 693725"];
4030 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 693726"];
4031 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 693727"];
4032 [label="Debug.Assert((object)symbol != null); 693728"];
4033 [label="Debug.Assert((object)within != null); 693729"];
4034 [label="Debug.Assert(within.IsDefinition); 693730"];
4035 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 693731"];
4036 [label="failedThroughTypeCheck = false; 693732"];
4037 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 693733"];
4038 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 693734"];
4039 [label="Debug.Assert((object)type != null); 693735"];
4040 [label="var compilation = within.DeclaringCompilation; 693736"];
4041 [label="bool unused; 693737"];
4042 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 693738"];
4043 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 693739"];
4044 [label="Debug.Assert((object)assembly != null); 693740"];
4045 [label="originalBinder.IsSemanticModelBinder 693741"];
4046 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 693742"];
4047 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 693743"];
4048 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 693744"];
4049 [label="this.Flags.Includes(BinderFlags.SemanticModel) 693745"];
4050 [label="param Includes(this BinderFlags self) 693746"];
4051 [label="param Includes(BinderFlags other) 693747"];
4052 [label="param IsUsingAlias(bool callerIsSemanticModel) 693748"];
4053 [label="return false; 693749"];
4054 [label="return; 693750"];
4055 [label="result.IsClear 693751"];
4056 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 693752"];
4057 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 693753"];
4058 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 693754"];
4059 [label="binder = scope; 693755"];
4060 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 693756"];
4061 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 693757"];
4062 [label="return binder; 693758"];
4063 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 693759"];
4064 [label="IsViableType(result) 693760"];
4065 [label="param IsViableType(LookupResult result) 693761"];
4066 [label="result.IsMultiViable 693762"];
4067 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 693763"];
4068 [label="return _kind; 693764"];
4069 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 693765"];
4070 [label="result.Symbols 693766"];
4071 [label="get\n            {\n                return _symbolList;\n            } 693767"];
4072 [label="return _symbolList; 693768"];
4073 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 693769"];
4074 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 693770"];
4075 [label="return true; 693771"];
4076 [label="bool wasError; 693772"];
4077 [label="param ResultSymbol(string simpleName) 693773"];
4078 [label="param ResultSymbol(int arity) 693774"];
4079 [label="param ResultSymbol(SyntaxNode where) 693775"];
4080 [label="param ResultSymbol(DiagnosticBag diagnostics) 693776"];
4081 [label="param ResultSymbol(out bool wasError) 693777"];
4082 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 693778"];
4083 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 693779"];
4084 [label="param ResultSymbol(this) 693780"];
4085 [label="Debug.Assert(where != null); 693781"];
4086 [label="Debug.Assert(where != null); 693782"];
4087 [label="Debug.Assert(diagnostics != null); 693783"];
4088 [label="Debug.Assert(diagnostics != null); 693784"];
4089 [label="wasError = false; 693785"];
4090 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 693786"];
4091 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 693787"];
4092 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 693788"];
4093 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 693789"];
4094 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 693790"];
4095 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 693791"];
4096 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 693792"];
4097 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 693793"];
4098 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 693794"];
4099 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 693795"];
4100 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 693796"];
4101 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 693797"];
4102 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 693798"];
4103 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 693799"];
4104 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 693800"];
4105 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 693801"];
4106 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 693802"];
4107 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 693803"];
4108 [label="param CheckRuntimeSupportForSymbolAccess(this) 693804"];
4109 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 693805"];
4110 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 693806"];
4111 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 693807"];
4112 [label="this.Clear(); 693808"];
4113 [label="result.Free(); 693809"];
4114 [label="if (symbol is null)\n                {\n                    return default;\n                } 693810"];
4115 [label="Debug.Assert(typeWithAnnotations.HasType); 693811"];
4116 [label="symbol.IsType 693812"];
4117 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 693813"];
4118 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 693814"];
4119 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 693815"];
4120 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 693816"];
4121 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 693817"];
4122 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 693818"];
4123 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 693819"];
4124 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 693820"];
4125 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 693821"];
4126 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 693822"];
4127 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 693823"];
4128 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 693824"];
4129 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 693825"];
4130 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 693826"];
4131 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 693827"];
4132 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 693828"];
4133 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 693829"];
4134 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 693830"];
4135 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 693831"];
4136 [label="RoslynDebug.Assert(diagnostics != null); 693832"];
4137 [label="RoslynDebug.Assert(diagnostics != null); 693833"];
4138 [label="DiagnosticInfo? info = null; 693834"];
4139 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 693835"];
4140 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 693836"];
4141 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 693837"];
4142 [label="return kind; 693838"];
4143 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 693839"];
4144 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 693840"];
4145 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 693841"];
4146 [label="param UnwrapAlias(DiagnosticBag diagnostics) 693842"];
4147 [label="param UnwrapAlias(SyntaxNode syntax) 693843"];
4148 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 693844"];
4149 [label="param UnwrapAlias(this) 693845"];
4150 [label="symbol.IsAlias 693846"];
4151 [label="=> _symbol?.Kind == SymbolKind.Alias 693847"];
4152 [label="_symbol 693848"];
4153 [label="_symbol?.Kind == SymbolKind.Alias 693849"];
4154 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 693850"];
4155 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 693851"];
4156 [label="CheckFeatureAvailability(syntax.SyntaxTree, feature, diagnostics, location ?? syntax.GetLocation()) 693852"];
4157 [label="Debug.Assert(node != null); 693853"];
4158 [label="NodeUsage usage; 693854"];
4159 [label="CreateBinderCacheKey(methodDecl, usage) 693855"];
4160 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 693856"];
4161 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 693857"];
4162 [label="return new BinderCacheKey(node, usage); 693858"];
4163 [label="new BinderCacheKey(node, usage) 693859"];
4164 [label="param BinderCacheKey(this) 693860"];
4165 [label="var key = CreateBinderCacheKey(methodDecl, usage); 693861"];
4166 [label="Binder resultBinder; 693862"];
4167 [label="binderCache 693863"];
4168 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 693864"];
4169 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 693865"];
4170 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 693866"];
4171 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 693867"];
4172 [label="SyntaxToken token; 693868"];
4173 [label="token 693869"];
4174 [label="syntaxTree 693870"];
4175 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 693871"];
4176 [label="return _factory._syntaxTree; 693872"];
4177 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 693873"];
4178 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 693874"];
4179 [label="RoslynDebug.Assert(next != null); 693875"];
4180 [label="_container 693876"];
4181 [label="Debug.Assert((object)container != null); 693877"];
4182 [label="Debug.Assert(declarationSyntax != null); 693878"];
4183 [label="Debug.Assert((object)container != null || imports != null); 693879"];
4184 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 693880"];
4185 [label="SourceMemberMethodSymbol method = null; 693881"];
4186 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 693882"];
4187 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 693883"];
4188 [label="Debug.Assert((object)containing != null); 693884"];
4189 [label="Debug.Assert((object)containing != null); 693885"];
4190 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 693886"];
4191 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 693887"];
4192 [label="param BinderWithContainingMemberOrLambda(this) 693888"];
4193 [label="param BinderWithContainingMemberOrLambda(this) 693889"];
4194 [label="param Binder(this) 693890"];
4195 [label="internal CSharpCompilation Compilation { get; } 693891"];
4196 [label="Flags 693892"];
4197 [label="protected internal Binder? Next { get; } 693893"];
4198 [label="_lazyConversions 693894"];
4199 [label="_lazyOverloadResolution 693895"];
4200 [label="RoslynDebug.Assert(next != null); 693896"];
4201 [label="RoslynDebug.Assert(next != null); 693897"];
4202 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 693898"];
4203 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 693899"];
4204 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 693900"];
4205 [label="param Includes(this BinderFlags self) 693901"];
4206 [label="param Includes(BinderFlags other) 693902"];
4207 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 693903"];
4208 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 693904"];
4209 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 693905"];
4210 [label="param Includes(this BinderFlags self) 693906"];
4211 [label="param Includes(BinderFlags other) 693907"];
4212 [label="_containingMemberOrLambda 693908"];
4213 [label="Debug.Assert(containingMemberOrLambda != null); 693909"];
4214 [label="Debug.Assert(containingMemberOrLambda != null); 693910"];
4215 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 693911"];
4216 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 693912"];
4217 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 693913"];
4218 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 693914"];
4219 [label="param ValidateParameterNameConflicts(this) 693915"];
4220 [label="PooledHashSet<string>? tpNames = null; 693916"];
4221 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 693917"];
4222 [label="PooledHashSet<string>? pNames = null; 693918"];
4223 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 693919"];
4224 [label="tpNames?.Free(); 693920"];
4225 [label="pNames?.Free(); 693921"];
4226 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 693922"];
4227 [label="param GetSpecialType(DiagnosticBag diagnostics) 693923"];
4228 [label="param GetSpecialType(SyntaxNode node) 693924"];
4229 [label="param GetSpecialType(SyntaxNode node) 693925"];
4230 [label="param GetSpecialType(DiagnosticBag diagnostics) 693926"];
4231 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 693927"];
4232 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 693928"];
4233 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 693929"];
4234 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 693930"];
4235 [label="Debug.Assert(typeWithAnnotations.HasType); 693931"];
4236 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 693932"];
4237 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 693933"];
4238 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 693934"];
4239 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 693935"];
4240 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 693936"];
4241 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 693937"];
4242 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 693938"];
4243 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 693939"];
4244 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 693940"];
4245 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 693941"];
4246 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 693942"];
4247 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 693943"];
4248 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 693944"];
4249 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 693945"];
4250 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 693946"];
4251 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 693947"];
4252 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 693948"];
4253 [label="RoslynDebug.Assert(diagnostics != null); 693949"];
4254 [label="RoslynDebug.Assert(diagnostics != null); 693950"];
4255 [label="DiagnosticInfo? info = null; 693951"];
4256 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 693952"];
4257 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 693953"];
4258 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 693954"];
4259 [label="return kind; 693955"];
4260 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 693956"];
4261 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 693957"];
4262 [label="=> _symbol?.Kind == SymbolKind.Alias 693958"];
4263 [label="_symbol 693959"];
4264 [label="_symbol?.Kind == SymbolKind.Alias 693960"];
4265 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 693961"];
4266 [label="param TypeConversions(AssemblySymbol corLibrary) 693962"];
4267 [label="param TypeConversions(bool includeNullability = false) 693963"];
4268 [label="param TypeConversions(this) 693964"];
4269 [label="corLibrary 693965"];
4270 [label="0 693966"];
4271 [label="includeNullability 693967"];
4272 [label="null 693968"];
4273 [label="param TypeConversions(this) 693969"];
4274 [label="param TypeConversions(AssemblySymbol corLibrary) 693970"];
4275 [label="param TypeConversions(int currentRecursionDepth) 693971"];
4276 [label="param TypeConversions(bool includeNullability) 693972"];
4277 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 693973"];
4278 [label="param TypeConversions(this) 693974"];
4279 [label="50 693975"];
4280 [label="MaximumRecursionDepth = 50 693976"];
4281 [label="false 693977"];
4282 [label="F = false 693978"];
4283 [label="true 693979"];
4284 [label="T = true 693980"];
4285 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 693981"];
4286 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 693982"];
4287 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 693983"];
4288 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 693984"];
4289 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 693985"];
4290 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 693986"];
4291 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 693987"];
4292 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 693988"];
4293 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 693989"];
4294 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 693990"];
4295 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 693991"];
4296 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 693992"];
4297 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 693993"];
4298 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 693994"];
4299 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 693995"];
4300 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 693996"];
4301 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 693997"];
4302 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 693998"];
4303 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 693999"];
4304 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 694000"];
4305 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 694001"];
4306 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 694002"];
4307 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 694003"];
4308 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 694004"];
4309 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 694005"];
4310 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 694006"];
4311 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 694007"];
4312 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 694008"];
4313 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 694009"];
4314 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 694010"];
4315 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 694011"];
4316 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 694012"];
4317 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 694013"];
4318 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 694014"];
4319 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694015"];
4320 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694016"];
4321 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694017"];
4322 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694018"];
4323 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694019"];
4324 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694020"];
4325 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694021"];
4326 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694022"];
4327 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694023"];
4328 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694024"];
4329 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694025"];
4330 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694026"];
4331 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694027"];
4332 [label="s_implicitNumericConversions =\n        {\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 694028"];
4333 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 694029"];
4334 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 694030"];
4335 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 694031"];
4336 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 694032"];
4337 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 694033"];
4338 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 694034"];
4339 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 694035"];
4340 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 694036"];
4341 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 694037"];
4342 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 694038"];
4343 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 694039"];
4344 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 694040"];
4345 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 694041"];
4346 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 694042"];
4347 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 694043"];
4348 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 694044"];
4349 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 694045"];
4350 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 694046"];
4351 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 694047"];
4352 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 694048"];
4353 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 694049"];
4354 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 694050"];
4355 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 694051"];
4356 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 694052"];
4357 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 694053"];
4358 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 694054"];
4359 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 694055"];
4360 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 694056"];
4361 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 694057"];
4362 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 694058"];
4363 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 694059"];
4364 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 694060"];
4365 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 694061"];
4366 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 694062"];
4367 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 694063"];
4368 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 694064"];
4369 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694065"];
4370 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694066"];
4371 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694067"];
4372 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694068"];
4373 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694069"];
4374 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694070"];
4375 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694071"];
4376 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694072"];
4377 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694073"];
4378 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694074"];
4379 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694075"];
4380 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694076"];
4381 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694077"];
4382 [label="s_explicitNumericConversions =\n        {\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 694078"];
4383 [label="corLibrary 694079"];
4384 [label="currentRecursionDepth 694080"];
4385 [label="includeNullability 694081"];
4386 [label="otherNullabilityOpt 694082"];
4387 [label="param TypeConversions(this) 694083"];
4388 [label="param ConversionsBase(AssemblySymbol corLibrary) 694084"];
4389 [label="param ConversionsBase(int currentRecursionDepth) 694085"];
4390 [label="param ConversionsBase(bool includeNullability) 694086"];
4391 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 694087"];
4392 [label="param ConversionsBase(this) 694088"];
4393 [label="corLibrary 694089"];
4394 [label="currentRecursionDepth 694090"];
4395 [label="IncludeNullability 694091"];
4396 [label="_lazyOtherNullability 694092"];
4397 [label="Debug.Assert((object)corLibrary != null); 694093"];
4398 [label="Debug.Assert((object)corLibrary != null); 694094"];
4399 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 694095"];
4400 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 694096"];
4401 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 694097"];
4402 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 694098"];
4403 [label="this.corLibrary 694099"];
4404 [label="this.currentRecursionDepth 694100"];
4405 [label="IncludeNullability 694101"];
4406 [label="_lazyOtherNullability 694102"];
4407 [label="var diagnostics = c.GetDiagnostics(); 694103"];
4408 [label="diagnostics.Verify(expected); 694104"];
4409 [label="diagnostics.Verify(expected); 694105"];
4410 [label="diagnostics.Verify(expected) 694106"];
4411 [label="param Verify(this ImmutableArray<Diagnostic> actual) 694107"];
4412 [label="param Verify(params DiagnosticDescription[] expected) 694108"];
4413 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 694109"];
4414 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 694110"];
4415 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 694111"];
4416 [label="param Verify(this IEnumerable<Diagnostic> actual) 694112"];
4417 [label="param Verify(params DiagnosticDescription[] expected) 694113"];
4418 [label="Verify(actual, expected, errorCodeOnly: false); 694114"];
4419 [label="Verify(actual, expected, errorCodeOnly: false); 694115"];
4420 [label="Verify(actual, expected, errorCodeOnly: false); 694116"];
4421 [label="Verify(actual, expected, errorCodeOnly: false) 694117"];
4422 [label="param Verify(IEnumerable<Diagnostic> actual) 694118"];
4423 [label="param Verify(DiagnosticDescription[] expected) 694119"];
4424 [label="param Verify(bool errorCodeOnly) 694120"];
4425 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 694121"];
4426 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 694122"];
4427 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 694123"];
4428 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 694124"];
4429 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 694125"];
4430 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 694126"];
4431 [label="=> _defaultSeverityOpt 694127"];
4432 [label="_defaultSeverityOpt 694128"];
4433 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 694129"];
4434 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 694130"];
4435 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 694131"];
4436 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 694132"];
4437 [label="=> _effectiveSeverityOpt 694133"];
4438 [label="_effectiveSeverityOpt 694134"];
4439 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 694135"];
4440 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 694136"];
4441 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 694137"];
4442 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 694138"];
4443 [label="param DiagnosticDescription(Diagnostic d) 694139"];
4444 [label="param DiagnosticDescription(bool errorCodeOnly) 694140"];
4445 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 694141"];
4446 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 694142"];
4447 [label="param DiagnosticDescription(this) 694143"];
4448 [label="_code 694144"];
4449 [label="_isWarningAsError 694145"];
4450 [label="_isSuppressed 694146"];
4451 [label="_squiggledText 694147"];
4452 [label="_arguments 694148"];
4453 [label="_startPosition 694149"];
4454 [label="_argumentOrderDoesNotMatter 694150"];
4455 [label="_errorCodeType 694151"];
4456 [label="_defaultSeverityOpt 694152"];
4457 [label="_effectiveSeverityOpt 694153"];
4458 [label="_syntaxPredicate 694154"];
4459 [label="_code 694155"];
4460 [label="_isWarningAsError 694156"];
4461 [label="_isSuppressed 694157"];
4462 [label="_location 694158"];
4463 [label="includeDefaultSeverity 694159"];
4464 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 694160"];
4465 [label="_defaultSeverityOpt 694161"];
4466 [label="includeEffectiveSeverity 694162"];
4467 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 694163"];
4468 [label="_effectiveSeverityOpt 694164"];
4469 [label="DiagnosticWithInfo dinfo = null; 694165"];
4470 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 694166"];
4471 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 694167"];
4472 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 694168"];
4473 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 694169"];
4474 [label="dinfo = d as DiagnosticWithInfo; 694170"];
4475 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 694171"];
4476 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 694172"];
4477 [label="_errorCodeType 694173"];
4478 [label="_code 694174"];
4479 [label="_ignoreArgumentsWhenComparing 694175"];
4480 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 694176"];
4481 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 694177"];
4482 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 694178"];
4483 [label="_squiggledText 694179"];
4484 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 694180"];
4485 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 694181"];
4486 [label="_arguments 694182"];
4487 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 694183"];
4488 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 694184"];
4489 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 694185"];
4490 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 694186"];
4491 [label="_startPosition 694187"];
4492 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 694188"];
4493 [label="_code 694189"];
4494 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 694190"];
4495 [label="_arguments = null; 694191"];
4496 [label="_arguments 694192"];
4497 [label="_code 694193"];
4498 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 694194"];
4499 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 694195"];
4500 [label="int index = unmatched.IndexOf(d); 694196"];
4501 [label="int index = unmatched.IndexOf(d); 694197"];
4502 [label="param Equals(object obj) 694198"];
4503 [label="param Equals(this) 694199"];
4504 [label="var d = obj as DiagnosticDescription; 694200"];
4505 [label="if (d == null)\n                return false; 694201"];
4506 [label="if (d == null)\n                return false; 694202"];
4507 [label="if (!_code.Equals(d._code))\n                return false; 694203"];
4508 [label="if (!_code.Equals(d._code))\n                return false; 694204"];
4509 [label="return false; 694205"];
4510 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 694206"];
4511 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 694207"];
4512 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 694208"];
4513 [label="if (_squiggledText != d._squiggledText)\n                    return false; 694209"];
4514 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 694210"];
4515 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 694211"];
4516 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 694212"];
4517 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 694213"];
4518 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 694214"];
4519 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 694215"];
4520 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 694216"];
4521 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 694217"];
4522 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 694218"];
4523 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 694219"];
4524 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 694220"];
4525 [label="if (d._arguments != null)\n                    return false; 694221"];
4526 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 694222"];
4527 [label="return true; 694223"];
4528 [label="int index = unmatched.IndexOf(d); 694224"];
4529 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 694225"];
4530 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 694226"];
4531 [label="unmatched.RemoveAt(index); 694227"];
4532 [label="if (d == null)\n                return false; 694228"];
4533 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 694229"];
4534 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 694230"];
4535 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 694231"];
4536 [label="if (_squiggledText != d._squiggledText)\n                    return false; 694232"];
4537 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 694233"];
4538 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 694234"];
4539 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 694235"];
4540 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 694236"];
4541 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 694237"];
4542 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 694238"];
4543 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 694239"];
4544 [label="if (d._arguments != null)\n                    return false; 694240"];
4545 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 694241"];
4546 [label="if (d._arguments == null)\n                    return false; 694242"];
4547 [label="GetArgumentsAsStrings() 694243"];
4548 [label="param GetArgumentsAsStrings(this) 694244"];
4549 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 694245"];
4550 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 694246"];
4551 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 694247"];
4552 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 694248"];
4553 [label="_argumentsAsStrings 694249"];
4554 [label="return _argumentsAsStrings; 694250"];
4555 [label="var args1 = GetArgumentsAsStrings(); 694251"];
4556 [label="d.GetArgumentsAsStrings() 694252"];
4557 [label="param GetArgumentsAsStrings(this) 694253"];
4558 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 694254"];
4559 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 694255"];
4560 [label="return _argumentsAsStrings; 694256"];
4561 [label="var args2 = d.GetArgumentsAsStrings(); 694257"];
4562 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 694258"];
4563 [label="if (!args1.SequenceEqual(args2))\n                        return false; 694259"];
4564 [label="if (!args1.SequenceEqual(args2))\n                        return false; 694260"];
4565 [label="if (!args1.SequenceEqual(args2))\n                        return false; 694261"];
4566 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 694262"];
4567 [label="if (d == null)\n                return false; 694263"];
4568 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 694264"];
4569 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 694265"];
4570 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 694266"];
4571 [label="if (_squiggledText != d._squiggledText)\n                    return false; 694267"];
4572 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 694268"];
4573 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 694269"];
4574 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 694270"];
4575 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 694271"];
4576 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 694272"];
4577 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 694273"];
4578 [label="if (d._arguments == null)\n                    return false; 694274"];
4579 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 694275"];
4580 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 694276"];
4581 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 694277"];
4582 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 694278"];
4583 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 694279"];
4584 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 694280"];
4585 [label="DiagnosticDescription.GetAssertText(expected, actual) 694281"];
4586 [label="param GetAssertText(DiagnosticDescription[] expected) 694282"];
4587 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 694283"];
4588 [label="const int CSharp = 1; 694284"];
4589 [label="const int VisualBasic = 2; 694285"];
4590 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 694286"];
4591 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 694287"];
4592 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 694288"];
4593 [label="actual.Any() && actual.First() is CSDiagnostic 694289"];
4594 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 694290"];
4595 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 694291"];
4596 [label="int indentDepth = (language == CSharp) ? 4 : 1; 694292"];
4597 [label="(language == CSharp) 694293"];
4598 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 694294"];
4599 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 694295"];
4600 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 694296"];
4601 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 694297"];
4602 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 694298"];
4603 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 694299"];
4604 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 694300"];
4605 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 694301"];
4606 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 694302"];
4607 [label="IsSortedOrEmpty(expected) 694303"];
4608 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 694304"];
4609 [label="new LinePositionComparer() 694305"];
4610 [label="param LinePositionComparer(this) 694306"];
4611 [label="Instance = new LinePositionComparer() 694307"];
4612 [label="var comparer = LinePositionComparer.Instance; 694308"];
4613 [label="DiagnosticDescription last = null; 694309"];
4614 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 694310"];
4615 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 694311"];
4616 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 694312"];
4617 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 694313"];
4618 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 694314"];
4619 [label="last = diagnostic; 694315"];
4620 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 694316"];
4621 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 694317"];
4622 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 694318"];
4623 [label="comparer.Compare(last._startPosition, diagnostic._startPosition) 694319"];
4624 [label="param Compare(LinePosition? x) 694320"];
4625 [label="param Compare(LinePosition? y) 694321"];
4626 [label="param Compare(this) 694322"];
4627 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 694323"];
4628 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 694324"];
4629 [label="if (y == null)\n                {\n                    return 1;\n                } 694325"];
4630 [label="if (y == null)\n                {\n                    return 1;\n                } 694326"];
4631 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 694327"];
4632 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 694328"];
4633 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 694329"];
4634 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 694330"];
4635 [label="return x.Value.Character.CompareTo(y.Value.Character); 694331"];
4636 [label="return x.Value.Character.CompareTo(y.Value.Character); 694332"];
4637 [label="return false; 694333"];
4638 [label="var assertText = new StringBuilder(); 694334"];
4639 [label="assertText.AppendLine(); 694335"];
4640 [label="int i; 694336"];
4641 [label="assertText.AppendLine('Expected:'); 694337"];
4642 [label="assertText.AppendLine('Expected:'); 694338"];
4643 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 694339"];
4644 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 694340"];
4645 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 694341"];
4646 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 694342"];
4647 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 694343"];
4648 [label="GetDiagnosticDescription(d, indentDepth) 694344"];
4649 [label="param GetDiagnosticDescription(DiagnosticDescription d) 694345"];
4650 [label="param GetDiagnosticDescription(int indentDepth) 694346"];
4651 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694347"];
4652 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694348"];
4653 [label="d.ToString() 694349"];
4654 [label="param ToString(this) 694350"];
4655 [label="var sb = new StringBuilder(); 694351"];
4656 [label="sb.Append('Diagnostic('); 694352"];
4657 [label="sb.Append('Diagnostic('); 694353"];
4658 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 694354"];
4659 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 694355"];
4660 [label="sb.Append(_errorCodeType.Name); 694356"];
4661 [label="sb.Append(_errorCodeType.Name); 694357"];
4662 [label="sb.Append('.'); 694358"];
4663 [label="sb.Append('.'); 694359"];
4664 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 694360"];
4665 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 694361"];
4666 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 694362"];
4667 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 694363"];
4668 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 694364"];
4669 [label="sb.Append(', \\''); 694365"];
4670 [label="sb.Append(', \\''); 694366"];
4671 [label="sb.Append(_squiggledText); 694367"];
4672 [label="sb.Append(_squiggledText); 694368"];
4673 [label="sb.Append('''); 694369"];
4674 [label="sb.Append('''); 694370"];
4675 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 694371"];
4676 [label="sb.Append(')'); 694372"];
4677 [label="sb.Append(')'); 694373"];
4678 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 694374"];
4679 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 694375"];
4680 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 694376"];
4681 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 694377"];
4682 [label="sb.Append('.WithLocation('); 694378"];
4683 [label="sb.Append('.WithLocation('); 694379"];
4684 [label="sb.Append(_startPosition.Value.Line + 1); 694380"];
4685 [label="sb.Append(_startPosition.Value.Line + 1); 694381"];
4686 [label="sb.Append(', '); 694382"];
4687 [label="sb.Append(', '); 694383"];
4688 [label="sb.Append(_startPosition.Value.Character + 1); 694384"];
4689 [label="sb.Append(_startPosition.Value.Character + 1); 694385"];
4690 [label="sb.Append(')'); 694386"];
4691 [label="sb.Append(')'); 694387"];
4692 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 694388"];
4693 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 694389"];
4694 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 694390"];
4695 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 694391"];
4696 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 694392"];
4697 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 694393"];
4698 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 694394"];
4699 [label="return sb.ToString(); 694395"];
4700 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694396"];
4701 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694397"];
4702 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 694398"];
4703 [label="sb.Append('.WithArguments('); 694399"];
4704 [label="sb.Append('.WithArguments('); 694400"];
4705 [label="GetArgumentsAsStrings() 694401"];
4706 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 694402"];
4707 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 694403"];
4708 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 694404"];
4709 [label="sb.Append('\\''); 694405"];
4710 [label="sb.Append('\\''); 694406"];
4711 [label="sb.Append(argumentStrings.Current); 694407"];
4712 [label="sb.Append(argumentStrings.Current); 694408"];
4713 [label="sb.Append('\\''); 694409"];
4714 [label="sb.Append('\\''); 694410"];
4715 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 694411"];
4716 [label="sb.Append(', '); 694412"];
4717 [label="sb.Append(', '); 694413"];
4718 [label="sb.Append(')'); 694414"];
4719 [label="sb.Append(')'); 694415"];
4720 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 694416"];
4721 [label="sb.Append('.WithLocation('); 694417"];
4722 [label="sb.Append('.WithLocation('); 694418"];
4723 [label="sb.Append(_startPosition.Value.Line + 1); 694419"];
4724 [label="sb.Append(_startPosition.Value.Line + 1); 694420"];
4725 [label="sb.Append(', '); 694421"];
4726 [label="sb.Append(', '); 694422"];
4727 [label="sb.Append(_startPosition.Value.Character + 1); 694423"];
4728 [label="sb.Append(_startPosition.Value.Character + 1); 694424"];
4729 [label="sb.Append(')'); 694425"];
4730 [label="sb.Append(')'); 694426"];
4731 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 694427"];
4732 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 694428"];
4733 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 694429"];
4734 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 694430"];
4735 [label="return sb.ToString(); 694431"];
4736 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694432"];
4737 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694433"];
4738 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 694434"];
4739 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 694435"];
4740 [label="param GetDiagnosticDescription(int indentDepth) 694436"];
4741 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694437"];
4742 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694438"];
4743 [label="var sb = new StringBuilder(); 694439"];
4744 [label="sb.Append('Diagnostic('); 694440"];
4745 [label="sb.Append('Diagnostic('); 694441"];
4746 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 694442"];
4747 [label="sb.Append(_errorCodeType.Name); 694443"];
4748 [label="sb.Append(_errorCodeType.Name); 694444"];
4749 [label="sb.Append('.'); 694445"];
4750 [label="sb.Append('.'); 694446"];
4751 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 694447"];
4752 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 694448"];
4753 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 694449"];
4754 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 694450"];
4755 [label="sb.Append(', \\''); 694451"];
4756 [label="sb.Append(', \\''); 694452"];
4757 [label="sb.Append(_squiggledText); 694453"];
4758 [label="sb.Append(_squiggledText); 694454"];
4759 [label="sb.Append('''); 694455"];
4760 [label="sb.Append('''); 694456"];
4761 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 694457"];
4762 [label="sb.Append(')'); 694458"];
4763 [label="sb.Append(')'); 694459"];
4764 [label="sb.Append('.WithArguments('); 694460"];
4765 [label="sb.Append('.WithArguments('); 694461"];
4766 [label="sb.Append('\\''); 694462"];
4767 [label="sb.Append(argumentStrings.Current); 694463"];
4768 [label="sb.Append(argumentStrings.Current); 694464"];
4769 [label="sb.Append('\\''); 694465"];
4770 [label="sb.Append(', '); 694466"];
4771 [label="sb.Append(')'); 694467"];
4772 [label="sb.Append(')'); 694468"];
4773 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 694469"];
4774 [label="sb.Append('.WithLocation('); 694470"];
4775 [label="sb.Append('.WithLocation('); 694471"];
4776 [label="sb.Append(_startPosition.Value.Line + 1); 694472"];
4777 [label="sb.Append(_startPosition.Value.Line + 1); 694473"];
4778 [label="sb.Append(', '); 694474"];
4779 [label="sb.Append(', '); 694475"];
4780 [label="sb.Append(_startPosition.Value.Character + 1); 694476"];
4781 [label="sb.Append(_startPosition.Value.Character + 1); 694477"];
4782 [label="sb.Append(')'); 694478"];
4783 [label="sb.Append(')'); 694479"];
4784 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 694480"];
4785 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 694481"];
4786 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 694482"];
4787 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 694483"];
4788 [label="return sb.ToString(); 694484"];
4789 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694485"];
4790 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694486"];
4791 [label="GetCommaSeparatedLines(assertText, expectedText); 694487"];
4792 [label="GetCommaSeparatedLines(assertText, expectedText); 694488"];
4793 [label="GetCommaSeparatedLines(assertText, expectedText) 694489"];
4794 [label="param GetCommaSeparatedLines(StringBuilder sb) 694490"];
4795 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 694491"];
4796 [label="int n = lines.Count; 694492"];
4797 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 694493"];
4798 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 694494"];
4799 [label="sb.Append(lines[i]); 694495"];
4800 [label="sb.Append(lines[i]); 694496"];
4801 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 694497"];
4802 [label="sb.Append(','); 694498"];
4803 [label="sb.Append(','); 694499"];
4804 [label="sb.AppendLine(); 694500"];
4805 [label="GetCommaSeparatedLines(assertText, expectedText); 694501"];
4806 [label="assertText.AppendLine('Actual:'); 694502"];
4807 [label="assertText.AppendLine('Actual:'); 694503"];
4808 [label="var actualText = ArrayBuilder<string>.GetInstance(); 694504"];
4809 [label="var e = actual.GetEnumerator(); 694505"];
4810 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 694506"];
4811 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 694507"];
4812 [label="Diagnostic d = e.Current; 694508"];
4813 [label="string message = d.ToString(); 694509"];
4814 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 694510"];
4815 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 694511"];
4816 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 694512"];
4817 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 694513"];
4818 [label="Indent(assertText, indentDepth); 694514"];
4819 [label="Indent(assertText, indentDepth); 694515"];
4820 [label="Indent(assertText, indentDepth) 694516"];
4821 [label="param Indent(StringBuilder sb) 694517"];
4822 [label="param Indent(int count) 694518"];
4823 [label="sb.Append(' ', 4 * count); 694519"];
4824 [label="sb.Append(' ', 4 * count); 694520"];
4825 [label="sb.Append(' ', 4 * count); 694521"];
4826 [label="Indent(assertText, indentDepth); 694522"];
4827 [label="assertText.Append('// '); 694523"];
4828 [label="assertText.Append('// '); 694524"];
4829 [label="assertText.AppendLine(d.ToString()); 694525"];
4830 [label="assertText.AppendLine(d.ToString()); 694526"];
4831 [label="var l = d.Location; 694527"];
4832 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 694528"];
4833 [label="Indent(assertText, indentDepth); 694529"];
4834 [label="Indent(assertText, indentDepth); 694530"];
4835 [label="Indent(assertText, indentDepth) 694531"];
4836 [label="param Indent(StringBuilder sb) 694532"];
4837 [label="param Indent(int count) 694533"];
4838 [label="sb.Append(' ', 4 * count); 694534"];
4839 [label="sb.Append(' ', 4 * count); 694535"];
4840 [label="sb.Append(' ', 4 * count); 694536"];
4841 [label="Indent(assertText, indentDepth); 694537"];
4842 [label="assertText.Append('// '); 694538"];
4843 [label="assertText.Append('// '); 694539"];
4844 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 694540"];
4845 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 694541"];
4846 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 694542"];
4847 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 694543"];
4848 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 694544"];
4849 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 694545"];
4850 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 694546"];
4851 [label="param DiagnosticDescription(Diagnostic d) 694547"];
4852 [label="param DiagnosticDescription(bool errorCodeOnly) 694548"];
4853 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 694549"];
4854 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 694550"];
4855 [label="param DiagnosticDescription(this) 694551"];
4856 [label="_code 694552"];
4857 [label="_isWarningAsError 694553"];
4858 [label="_isSuppressed 694554"];
4859 [label="_squiggledText 694555"];
4860 [label="_arguments 694556"];
4861 [label="_startPosition 694557"];
4862 [label="_errorCodeType 694558"];
4863 [label="_defaultSeverityOpt 694559"];
4864 [label="_effectiveSeverityOpt 694560"];
4865 [label="_code 694561"];
4866 [label="_isWarningAsError 694562"];
4867 [label="_isSuppressed 694563"];
4868 [label="_location 694564"];
4869 [label="DiagnosticWithInfo dinfo = null; 694565"];
4870 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 694566"];
4871 [label="var diffDescription = description; 694567"];
4872 [label="var idx = Array.IndexOf(expected, description); 694568"];
4873 [label="var idx = Array.IndexOf(expected, description); 694569"];
4874 [label="var idx = Array.IndexOf(expected, description); 694570"];
4875 [label="var idx = Array.IndexOf(expected, description); 694571"];
4876 [label="if (d == null)\n                return false; 694572"];
4877 [label="if (d == null)\n                return false; 694573"];
4878 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 694574"];
4879 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 694575"];
4880 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 694576"];
4881 [label="if (_squiggledText != d._squiggledText)\n                    return false; 694577"];
4882 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 694578"];
4883 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 694579"];
4884 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 694580"];
4885 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 694581"];
4886 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 694582"];
4887 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 694583"];
4888 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 694584"];
4889 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 694585"];
4890 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 694586"];
4891 [label="if (d._arguments == null)\n                    return false; 694587"];
4892 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 694588"];
4893 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 694589"];
4894 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 694590"];
4895 [label="diffDescription = expected[idx]; 694591"];
4896 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 694592"];
4897 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 694593"];
4898 [label="GetDiagnosticDescription(description, indentDepth) 694594"];
4899 [label="param GetDiagnosticDescription(DiagnosticDescription d) 694595"];
4900 [label="param GetDiagnosticDescription(int indentDepth) 694596"];
4901 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694597"];
4902 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694598"];
4903 [label="var sb = new StringBuilder(); 694599"];
4904 [label="sb.Append('Diagnostic('); 694600"];
4905 [label="sb.Append('Diagnostic('); 694601"];
4906 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 694602"];
4907 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 694603"];
4908 [label="sb.Append(_errorCodeType.Name); 694604"];
4909 [label="sb.Append(_errorCodeType.Name); 694605"];
4910 [label="sb.Append('.'); 694606"];
4911 [label="sb.Append('.'); 694607"];
4912 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 694608"];
4913 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 694609"];
4914 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 694610"];
4915 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 694611"];
4916 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 694612"];
4917 [label="sb.Append(', \\''); 694613"];
4918 [label="sb.Append(', \\''); 694614"];
4919 [label="sb.Append(_squiggledText); 694615"];
4920 [label="sb.Append(_squiggledText); 694616"];
4921 [label="sb.Append('''); 694617"];
4922 [label="sb.Append('''); 694618"];
4923 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 694619"];
4924 [label="sb.Append(')'); 694620"];
4925 [label="sb.Append(')'); 694621"];
4926 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 694622"];
4927 [label="sb.Append('.WithArguments('); 694623"];
4928 [label="sb.Append('.WithArguments('); 694624"];
4929 [label="sb.Append('\\''); 694625"];
4930 [label="sb.Append('\\''); 694626"];
4931 [label="sb.Append(argumentStrings.Current); 694627"];
4932 [label="sb.Append(argumentStrings.Current); 694628"];
4933 [label="sb.Append('\\''); 694629"];
4934 [label="sb.Append('\\''); 694630"];
4935 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 694631"];
4936 [label="sb.Append(', '); 694632"];
4937 [label="sb.Append(', '); 694633"];
4938 [label="sb.Append(')'); 694634"];
4939 [label="sb.Append(')'); 694635"];
4940 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 694636"];
4941 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 694637"];
4942 [label="sb.Append('.WithLocation('); 694638"];
4943 [label="sb.Append('.WithLocation('); 694639"];
4944 [label="sb.Append(_startPosition.Value.Line + 1); 694640"];
4945 [label="sb.Append(_startPosition.Value.Line + 1); 694641"];
4946 [label="sb.Append(', '); 694642"];
4947 [label="sb.Append(', '); 694643"];
4948 [label="sb.Append(_startPosition.Value.Character + 1); 694644"];
4949 [label="sb.Append(_startPosition.Value.Character + 1); 694645"];
4950 [label="sb.Append(')'); 694646"];
4951 [label="sb.Append(')'); 694647"];
4952 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 694648"];
4953 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 694649"];
4954 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 694650"];
4955 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 694651"];
4956 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 694652"];
4957 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 694653"];
4958 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 694654"];
4959 [label="return sb.ToString(); 694655"];
4960 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694656"];
4961 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694657"];
4962 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 694658"];
4963 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 694659"];
4964 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 694660"];
4965 [label="GetDiagnosticDescription(diffDescription, indentDepth) 694661"];
4966 [label="param GetDiagnosticDescription(DiagnosticDescription d) 694662"];
4967 [label="param GetDiagnosticDescription(int indentDepth) 694663"];
4968 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694664"];
4969 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694665"];
4970 [label="var sb = new StringBuilder(); 694666"];
4971 [label="sb.Append('Diagnostic('); 694667"];
4972 [label="sb.Append('Diagnostic('); 694668"];
4973 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 694669"];
4974 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 694670"];
4975 [label="sb.Append(_errorCodeType.Name); 694671"];
4976 [label="sb.Append(_errorCodeType.Name); 694672"];
4977 [label="sb.Append('.'); 694673"];
4978 [label="sb.Append('.'); 694674"];
4979 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 694675"];
4980 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 694676"];
4981 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 694677"];
4982 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 694678"];
4983 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 694679"];
4984 [label="sb.Append(', \\''); 694680"];
4985 [label="sb.Append(', \\''); 694681"];
4986 [label="sb.Append(_squiggledText); 694682"];
4987 [label="sb.Append(_squiggledText); 694683"];
4988 [label="sb.Append('''); 694684"];
4989 [label="sb.Append('''); 694685"];
4990 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 694686"];
4991 [label="sb.Append(')'); 694687"];
4992 [label="sb.Append(')'); 694688"];
4993 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 694689"];
4994 [label="sb.Append('.WithArguments('); 694690"];
4995 [label="sb.Append('.WithArguments('); 694691"];
4996 [label="sb.Append('\\''); 694692"];
4997 [label="sb.Append('\\''); 694693"];
4998 [label="sb.Append(argumentStrings.Current); 694694"];
4999 [label="sb.Append(argumentStrings.Current); 694695"];
5000 [label="sb.Append('\\''); 694696"];
5001 [label="sb.Append('\\''); 694697"];
5002 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 694698"];
5003 [label="sb.Append(', '); 694699"];
5004 [label="sb.Append(', '); 694700"];
5005 [label="sb.Append(')'); 694701"];
5006 [label="sb.Append(')'); 694702"];
5007 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 694703"];
5008 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 694704"];
5009 [label="sb.Append('.WithLocation('); 694705"];
5010 [label="sb.Append('.WithLocation('); 694706"];
5011 [label="sb.Append(_startPosition.Value.Line + 1); 694707"];
5012 [label="sb.Append(_startPosition.Value.Line + 1); 694708"];
5013 [label="sb.Append(', '); 694709"];
5014 [label="sb.Append(', '); 694710"];
5015 [label="sb.Append(_startPosition.Value.Character + 1); 694711"];
5016 [label="sb.Append(_startPosition.Value.Character + 1); 694712"];
5017 [label="sb.Append(')'); 694713"];
5018 [label="sb.Append(')'); 694714"];
5019 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 694715"];
5020 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 694716"];
5021 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 694717"];
5022 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 694718"];
5023 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 694719"];
5024 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 694720"];
5025 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 694721"];
5026 [label="return sb.ToString(); 694722"];
5027 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694723"];
5028 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694724"];
5029 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 694725"];
5030 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 694726"];
5031 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 694727"];
5032 [label="assertText.AppendLine(','); 694728"];
5033 [label="assertText.AppendLine(','); 694729"];
5034 [label="Indent(assertText, indentDepth); 694730"];
5035 [label="Indent(assertText, indentDepth); 694731"];
5036 [label="Indent(assertText, indentDepth) 694732"];
5037 [label="param Indent(StringBuilder sb) 694733"];
5038 [label="param Indent(int count) 694734"];
5039 [label="sb.Append(' ', 4 * count); 694735"];
5040 [label="sb.Append(' ', 4 * count); 694736"];
5041 [label="Indent(assertText, indentDepth); 694737"];
5042 [label="assertText.Append('// '); 694738"];
5043 [label="Indent(assertText, indentDepth); 694739"];
5044 [label="Indent(assertText, indentDepth); 694740"];
5045 [label="Indent(assertText, indentDepth) 694741"];
5046 [label="param Indent(StringBuilder sb) 694742"];
5047 [label="param Indent(int count) 694743"];
5048 [label="sb.Append(' ', 4 * count); 694744"];
5049 [label="sb.Append(' ', 4 * count); 694745"];
5050 [label="Indent(assertText, indentDepth); 694746"];
5051 [label="assertText.Append('// '); 694747"];
5052 [label="_code 694748"];
5053 [label="_isWarningAsError 694749"];
5054 [label="_isSuppressed 694750"];
5055 [label="_squiggledText 694751"];
5056 [label="_arguments 694752"];
5057 [label="_startPosition 694753"];
5058 [label="_errorCodeType 694754"];
5059 [label="_defaultSeverityOpt 694755"];
5060 [label="_effectiveSeverityOpt 694756"];
5061 [label="_code 694757"];
5062 [label="DiagnosticWithInfo dinfo = null; 694758"];
5063 [label="var diffDescription = description; 694759"];
5064 [label="if (d == null)\n                return false; 694760"];
5065 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 694761"];
5066 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 694762"];
5067 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 694763"];
5068 [label="if (_squiggledText != d._squiggledText)\n                    return false; 694764"];
5069 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 694765"];
5070 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 694766"];
5071 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 694767"];
5072 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 694768"];
5073 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 694769"];
5074 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 694770"];
5075 [label="if (d._arguments != null)\n                    return false; 694771"];
5076 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 694772"];
5077 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 694773"];
5078 [label="param GetDiagnosticDescription(int indentDepth) 694774"];
5079 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694775"];
5080 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694776"];
5081 [label="var sb = new StringBuilder(); 694777"];
5082 [label="sb.Append('Diagnostic('); 694778"];
5083 [label="sb.Append('Diagnostic('); 694779"];
5084 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 694780"];
5085 [label="sb.Append(_errorCodeType.Name); 694781"];
5086 [label="sb.Append(_errorCodeType.Name); 694782"];
5087 [label="sb.Append('.'); 694783"];
5088 [label="sb.Append('.'); 694784"];
5089 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 694785"];
5090 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 694786"];
5091 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 694787"];
5092 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 694788"];
5093 [label="sb.Append(', \\''); 694789"];
5094 [label="sb.Append(', \\''); 694790"];
5095 [label="sb.Append(_squiggledText); 694791"];
5096 [label="sb.Append(_squiggledText); 694792"];
5097 [label="sb.Append('''); 694793"];
5098 [label="sb.Append('''); 694794"];
5099 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 694795"];
5100 [label="sb.Append(')'); 694796"];
5101 [label="sb.Append(')'); 694797"];
5102 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 694798"];
5103 [label="sb.Append('.WithLocation('); 694799"];
5104 [label="sb.Append('.WithLocation('); 694800"];
5105 [label="sb.Append(_startPosition.Value.Line + 1); 694801"];
5106 [label="sb.Append(_startPosition.Value.Line + 1); 694802"];
5107 [label="sb.Append(', '); 694803"];
5108 [label="sb.Append(', '); 694804"];
5109 [label="sb.Append(_startPosition.Value.Character + 1); 694805"];
5110 [label="sb.Append(_startPosition.Value.Character + 1); 694806"];
5111 [label="sb.Append(')'); 694807"];
5112 [label="sb.Append(')'); 694808"];
5113 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 694809"];
5114 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 694810"];
5115 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 694811"];
5116 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 694812"];
5117 [label="return sb.ToString(); 694813"];
5118 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694814"];
5119 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694815"];
5120 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 694816"];
5121 [label="param GetDiagnosticDescription(int indentDepth) 694817"];
5122 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694818"];
5123 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694819"];
5124 [label="if (d._arguments == null)\n                    return false; 694820"];
5125 [label="sb.Append('.WithArguments('); 694821"];
5126 [label="sb.Append('\\''); 694822"];
5127 [label="sb.Append(argumentStrings.Current); 694823"];
5128 [label="sb.Append('\\''); 694824"];
5129 [label="sb.Append(', '); 694825"];
5130 [label="sb.Append(')'); 694826"];
5131 [label="sb.Append('.WithLocation('); 694827"];
5132 [label="sb.Append(_startPosition.Value.Line + 1); 694828"];
5133 [label="sb.Append(', '); 694829"];
5134 [label="sb.Append(_startPosition.Value.Character + 1); 694830"];
5135 [label="sb.Append(')'); 694831"];
5136 [label="return sb.ToString(); 694832"];
5137 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694833"];
5138 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694834"];
5139 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 694835"];
5140 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 694836"];
5141 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 694837"];
5142 [label="assertText.AppendLine(); 694838"];
5143 [label="assertText.AppendLine('Diff:'); 694839"];
5144 [label="assertText.AppendLine('Diff:'); 694840"];
5145 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 694841"];
5146 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 694842"];
5147 [label="new[] { '\\r', '\\n' } 694843"];
5148 [label="'\\r' 694844"];
5149 [label="'\\n' 694845"];
5150 [label="new[] { '\\r', '\\n' } 694846"];
5151 [label="new[] { '\\r', '\\n' } 694847"];
5152 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 694848"];
5153 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 694849"];
5154 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 694850"];
5155 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 694851"];
5156 [label="param DiffReport(IEnumerable<T> expected) 694852"];
5157 [label="param DiffReport(IEnumerable<T> actual) 694853"];
5158 [label="param DiffReport(string separator) 694854"];
5159 [label="param DiffReport(IEqualityComparer<T> comparer = null) 694855"];
5160 [label="param DiffReport(Func<T, string> toString = null) 694856"];
5161 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 694857"];
5162 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 694858"];
5163 [label="(comparer != null) 694859"];
5164 [label="EqualityComparer<T>.Default 694860"];
5165 [label="new LCS<T>(EqualityComparer<T>.Default) 694861"];
5166 [label="param LCS(IEqualityComparer<T> comparer) 694862"];
5167 [label="param LCS(this) 694863"];
5168 [label="1 694864"];
5169 [label="DeleteCost = 1 694865"];
5170 [label="1 694866"];
5171 [label="InsertCost = 1 694867"];
5172 [label="2 694868"];
5173 [label="UpdateCost = 2 694869"];
5174 [label="param LongestCommonSubsequence(this) 694870"];
5175 [label="_comparer 694871"];
5176 [label="_comparer 694872"];
5177 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 694873"];
5178 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 694874"];
5179 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 694875"];
5180 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 694876"];
5181 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 694877"];
5182 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 694878"];
5183 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 694879"];
5184 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 694880"];
5185 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 694881"];
5186 [label="lcs.CalculateDiff(expectedList, actualList, toString) 694882"];
5187 [label="param CalculateDiff(IList<T> sequenceA) 694883"];
5188 [label="param CalculateDiff(IList<T> sequenceB) 694884"];
5189 [label="param CalculateDiff(Func<T, string> toString) 694885"];
5190 [label="param CalculateDiff(this) 694886"];
5191 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 694887"];
5192 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 694888"];
5193 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 694889"];
5194 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 694890"];
5195 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 694891"];
5196 [label="param GetEdits(TSequence sequenceA) 694892"];
5197 [label="param GetEdits(int lengthA) 694893"];
5198 [label="param GetEdits(TSequence sequenceB) 694894"];
5199 [label="param GetEdits(int lengthB) 694895"];
5200 [label="param GetEdits(this) 694896"];
5201 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 694897"];
5202 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 694898"];
5203 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 694899"];
5204 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 694900"];
5205 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 694901"];
5206 [label="param ComputeCostMatrix(TSequence sequenceA) 694902"];
5207 [label="param ComputeCostMatrix(int lengthA) 694903"];
5208 [label="param ComputeCostMatrix(TSequence sequenceB) 694904"];
5209 [label="param ComputeCostMatrix(int lengthB) 694905"];
5210 [label="param ComputeCostMatrix(this) 694906"];
5211 [label="var la = lengthA + 1; 694907"];
5212 [label="var la = lengthA + 1; 694908"];
5213 [label="var lb = lengthB + 1; 694909"];
5214 [label="var lb = lengthB + 1; 694910"];
5215 [label="var d = new int[la, lb]; 694911"];
5216 [label="d[0, 0] = 0; 694912"];
5217 [label="d[0, 0] 694913"];
5218 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 694914"];
5219 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 694915"];
5220 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 694916"];
5221 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 694917"];
5222 [label="d[i, 0] 694918"];
5223 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 694919"];
5224 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 694920"];
5225 [label="d[0, j] = d[0, j - 1] + InsertCost; 694921"];
5226 [label="d[0, j] = d[0, j - 1] + InsertCost; 694922"];
5227 [label="d[0, j] 694923"];
5228 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 694924"];
5229 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 694925"];
5230 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 694926"];
5231 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 694927"];
5232 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 694928"];
5233 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 694929"];
5234 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 694930"];
5235 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 694931"];
5236 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 694932"];
5237 [label="param ItemsEqual(IList<T> sequenceA) 694933"];
5238 [label="param ItemsEqual(int indexA) 694934"];
5239 [label="param ItemsEqual(IList<T> sequenceB) 694935"];
5240 [label="param ItemsEqual(int indexB) 694936"];
5241 [label="param ItemsEqual(this) 694937"];
5242 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 694938"];
5243 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 694939"];
5244 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 694940"];
5245 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 694941"];
5246 [label="int m2 = d[i - 1, j] + DeleteCost; 694942"];
5247 [label="int m2 = d[i - 1, j] + DeleteCost; 694943"];
5248 [label="int m3 = d[i, j - 1] + InsertCost; 694944"];
5249 [label="int m3 = d[i, j - 1] + InsertCost; 694945"];
5250 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 694946"];
5251 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 694947"];
5252 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 694948"];
5253 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 694949"];
5254 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 694950"];
5255 [label="d[i, j] 694951"];
5256 [label="return d; 694952"];
5257 [label="int i = lengthA; 694953"];
5258 [label="int j = lengthB; 694954"];
5259 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 694955"];
5260 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 694956"];
5261 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 694957"];
5262 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 694958"];
5263 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 694959"];
5264 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 694960"];
5265 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 694961"];
5266 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 694962"];
5267 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 694963"];
5268 [label="i--; 694964"];
5269 [label="j--; 694965"];
5270 [label="yield return new Edit(EditKind.Update, i, j); 694966"];
5271 [label="yield return new Edit(EditKind.Update, i, j); 694967"];
5272 [label="yield return new Edit(EditKind.Update, i, j); 694968"];
5273 [label="yield return new Edit(EditKind.Update, i, j); 694969"];
5274 [label="new Edit(EditKind.Update, i, j) 694970"];
5275 [label="param Edit(EditKind kind) 694971"];
5276 [label="param Edit(int indexA) 694972"];
5277 [label="param Edit(int indexB) 694973"];
5278 [label="param Edit(this) 694974"];
5279 [label="this.Kind 694975"];
5280 [label="this.IndexA 694976"];
5281 [label="this.IndexB 694977"];
5282 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 694978"];
5283 [label="i--; 694979"];
5284 [label="yield return new Edit(EditKind.Delete, i, -1); 694980"];
5285 [label="yield return new Edit(EditKind.Delete, i, -1); 694981"];
5286 [label="yield return new Edit(EditKind.Delete, i, -1); 694982"];
5287 [label="new Edit(EditKind.Delete, i, -1) 694983"];
5288 [label="param Edit(EditKind kind) 694984"];
5289 [label="param Edit(int indexA) 694985"];
5290 [label="param Edit(int indexB) 694986"];
5291 [label="param Edit(this) 694987"];
5292 [label="this.Kind 694988"];
5293 [label="this.IndexA 694989"];
5294 [label="this.IndexB 694990"];
5295 [label="yield return new Edit(EditKind.Update, i, j); 694991"];
5296 [label="yield return new Edit(EditKind.Update, i, j); 694992"];
5297 [label="yield return new Edit(EditKind.Update, i, j); 694993"];
5298 [label="new Edit(EditKind.Update, i, j) 694994"];
5299 [label="param Edit(EditKind kind) 694995"];
5300 [label="param Edit(int indexA) 694996"];
5301 [label="param Edit(int indexB) 694997"];
5302 [label="param Edit(this) 694998"];
5303 [label="this.Kind 694999"];
5304 [label="this.IndexA 695000"];
5305 [label="this.IndexB 695001"];
5306 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 695002"];
5307 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 695003"];
5308 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 695004"];
5309 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 695005"];
5310 [label="j--; 695006"];
5311 [label="yield return new Edit(EditKind.Insert, -1, j); 695007"];
5312 [label="yield return new Edit(EditKind.Insert, -1, j); 695008"];
5313 [label="yield return new Edit(EditKind.Insert, -1, j); 695009"];
5314 [label="new Edit(EditKind.Insert, -1, j) 695010"];
5315 [label="param Edit(EditKind kind) 695011"];
5316 [label="param Edit(int indexA) 695012"];
5317 [label="param Edit(int indexB) 695013"];
5318 [label="param Edit(this) 695014"];
5319 [label="this.Kind 695015"];
5320 [label="this.IndexA 695016"];
5321 [label="this.IndexB 695017"];
5322 [label="yield return new Edit(EditKind.Update, i, j); 695018"];
5323 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 695019"];
5324 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 695020"];
5325 [label="yield return '++> ' + toString(sequenceB[edit.IndexB]); 695021"];
5326 [label="yield return '++> ' + toString(sequenceB[edit.IndexB]); 695022"];
5327 [label="yield return '++> ' + toString(sequenceB[edit.IndexB]); 695023"];
5328 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 695024"];
5329 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 695025"];
5330 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 695026"];
5331 [label="yield return '--> ' + toString(sequenceA[edit.IndexA]); 695027"];
5332 [label="yield return '--> ' + toString(sequenceA[edit.IndexA]); 695028"];
5333 [label="yield return '--> ' + toString(sequenceA[edit.IndexA]); 695029"];
5334 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 695030"];
5335 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 695031"];
5336 [label="actualText.Free(); 695032"];
5337 [label="expectedText.Free(); 695033"];
5338 [label="return assertText.ToString(); 695034"];
5339 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 695035"];
5340 [label="diagnostics.Verify(expected); 695036"];
5341 [label="VerifyAssemblyIds(c, diagnostics); 695037"];
5342 [label="VerifyAssemblyIds(c, diagnostics); 695038"];
5343 [label="VerifyAssemblyIds(c, diagnostics) 695039"];
5344 [label="param VerifyAssemblyIds(TCompilation c) 695040"];
5345 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 695041"];
5346 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 695042"];
5347 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 695043"];
5348 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 695044"];
5349 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 695045"];
5350 [label="CustomAssert.True(assemblyIds.IsEmpty); 695046"];
5351 [label="CustomAssert.True(assemblyIds.IsEmpty); 695047"];
5352 [label="VerifyAssemblyIds(c, diagnostics); 695048"];
5353 [label="return c; 695049"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 0;
206 -> 0;
208 -> 205;
208 -> 206;
208 -> 207;
209 -> 208;
210 -> 0;
211 -> 209;
211 -> 208;
211 -> 210;
212 -> 211;
213 -> 0;
214 -> 209;
214 -> 208;
214 -> 213;
215 -> 214;
216 -> 0;
217 -> 209;
217 -> 208;
217 -> 216;
218 -> 217;
219 -> 0;
220 -> 209;
220 -> 208;
220 -> 219;
221 -> 220;
222 -> 0;
223 -> 209;
223 -> 208;
223 -> 222;
224 -> 223;
225 -> 0;
226 -> 209;
226 -> 208;
226 -> 225;
227 -> 226;
228 -> 0;
229 -> 209;
229 -> 208;
229 -> 228;
230 -> 229;
231 -> 0;
232 -> 209;
232 -> 208;
232 -> 231;
233 -> 232;
234 -> 0;
235 -> 209;
235 -> 208;
235 -> 234;
236 -> 235;
237 -> 0;
238 -> 209;
238 -> 208;
238 -> 237;
239 -> 238;
240 -> 0;
241 -> 209;
241 -> 208;
241 -> 240;
242 -> 241;
243 -> 209;
246 -> 243;
246 -> 245;
247 -> 244;
247 -> 245;
248 -> 245;
249 -> 246;
249 -> 208;
249 -> 245;
250 -> 245;
251 -> 247;
251 -> 245;
252 -> 248;
252 -> 245;
253 -> 251;
253 -> 252;
253 -> 245;
254 -> 253;
254 -> 250;
254 -> 245;
255 -> 249;
255 -> 250;
255 -> 208;
255 -> 254;
255 -> 253;
255 -> 245;
256 -> 255;
257 -> 0;
258 -> 257;
260 -> 258;
260 -> 259;
261 -> 209;
261 -> 208;
261 -> 260;
262 -> 261;
263 -> 0;
264 -> 263;
265 -> 209;
265 -> 208;
265 -> 264;
266 -> 265;
267 -> 0;
268 -> 209;
268 -> 208;
268 -> 267;
269 -> 268;
270 -> 233;
272 -> 271;
273 -> 0;
274 -> 0;
275 -> 0;
277 -> 273;
277 -> 274;
277 -> 275;
277 -> 276;
278 -> 272;
279 -> 277;
279 -> 278;
279 -> 271;
280 -> 279;
284 -> 281;
284 -> 282;
284 -> 283;
285 -> 215;
285 -> 208;
285 -> 214;
285 -> 281;
285 -> 284;
286 -> 285;
287 -> 227;
288 -> 236;
289 -> 236;
290 -> 233;
291 -> 0;
292 -> 0;
294 -> 291;
294 -> 293;
295 -> 292;
295 -> 293;
296 -> 293;
297 -> 294;
297 -> 293;
298 -> 295;
298 -> 293;
299 -> 0;
299 -> 293;
300 -> 296;
300 -> 293;
301 -> 293;
302 -> 297;
302 -> 298;
302 -> 299;
302 -> 300;
302 -> 301;
302 -> 293;
303 -> 302;
304 -> 0;
305 -> 0;
307 -> 304;
307 -> 306;
308 -> 305;
308 -> 306;
309 -> 306;
310 -> 307;
310 -> 306;
311 -> 308;
311 -> 306;
312 -> 0;
312 -> 306;
313 -> 309;
313 -> 306;
314 -> 306;
315 -> 310;
315 -> 311;
315 -> 312;
315 -> 313;
315 -> 314;
315 -> 306;
316 -> 315;
318 -> 303;
318 -> 302;
318 -> 317;
319 -> 318;
321 -> 316;
321 -> 315;
321 -> 320;
322 -> 321;
323 -> 0;
324 -> 0;
326 -> 323;
326 -> 325;
327 -> 324;
327 -> 325;
328 -> 325;
329 -> 326;
329 -> 325;
330 -> 327;
330 -> 325;
331 -> 0;
331 -> 325;
332 -> 328;
332 -> 325;
333 -> 325;
334 -> 329;
334 -> 330;
334 -> 331;
334 -> 332;
334 -> 333;
334 -> 325;
335 -> 334;
336 -> 0;
337 -> 0;
339 -> 336;
339 -> 338;
340 -> 337;
340 -> 338;
341 -> 338;
342 -> 339;
342 -> 338;
343 -> 340;
343 -> 338;
344 -> 0;
344 -> 338;
345 -> 341;
345 -> 338;
346 -> 338;
347 -> 342;
347 -> 343;
347 -> 344;
347 -> 345;
347 -> 346;
347 -> 338;
348 -> 347;
349 -> 0;
350 -> 0;
352 -> 349;
352 -> 351;
353 -> 350;
353 -> 351;
354 -> 351;
355 -> 352;
355 -> 351;
356 -> 353;
356 -> 351;
357 -> 0;
357 -> 351;
358 -> 354;
358 -> 351;
359 -> 351;
360 -> 355;
360 -> 356;
360 -> 357;
360 -> 358;
360 -> 359;
360 -> 351;
361 -> 360;
362 -> 0;
363 -> 0;
365 -> 362;
365 -> 364;
366 -> 363;
366 -> 364;
367 -> 364;
368 -> 365;
368 -> 364;
369 -> 366;
369 -> 364;
370 -> 0;
370 -> 364;
371 -> 367;
371 -> 364;
372 -> 364;
373 -> 368;
373 -> 369;
373 -> 370;
373 -> 371;
373 -> 372;
373 -> 364;
374 -> 373;
375 -> 0;
376 -> 0;
378 -> 375;
378 -> 377;
379 -> 376;
379 -> 377;
380 -> 377;
381 -> 378;
381 -> 377;
382 -> 379;
382 -> 377;
383 -> 0;
383 -> 377;
384 -> 380;
384 -> 377;
385 -> 377;
386 -> 381;
386 -> 382;
386 -> 383;
386 -> 384;
386 -> 385;
386 -> 377;
387 -> 386;
388 -> 0;
389 -> 0;
391 -> 388;
391 -> 390;
392 -> 389;
392 -> 390;
393 -> 390;
394 -> 391;
394 -> 390;
395 -> 392;
395 -> 390;
396 -> 0;
396 -> 390;
397 -> 393;
397 -> 390;
398 -> 390;
399 -> 394;
399 -> 395;
399 -> 396;
399 -> 397;
399 -> 398;
399 -> 390;
400 -> 399;
402 -> 303;
402 -> 302;
402 -> 401;
403 -> 402;
405 -> 316;
405 -> 315;
405 -> 404;
406 -> 405;
408 -> 335;
408 -> 334;
408 -> 407;
409 -> 408;
411 -> 348;
411 -> 347;
411 -> 410;
412 -> 411;
413 -> 0;
414 -> 303;
414 -> 302;
414 -> 413;
414 -> 0;
415 -> 414;
416 -> 0;
417 -> 316;
417 -> 315;
417 -> 416;
417 -> 0;
418 -> 417;
419 -> 0;
420 -> 387;
420 -> 386;
420 -> 419;
420 -> 0;
421 -> 420;
422 -> 0;
423 -> 335;
423 -> 334;
423 -> 422;
423 -> 0;
424 -> 423;
425 -> 0;
426 -> 0;
426 -> 425;
427 -> 426;
428 -> 204;
428 -> 1;
429 -> 1;
430 -> 428;
430 -> 429;
431 -> 430;
431 -> 429;
432 -> 429;
433 -> 431;
433 -> 432;
434 -> 432;
435 -> 433;
435 -> 434;
435 -> 432;
436 -> 432;
436 -> 1;
437 -> 218;
437 -> 1;
438 -> 0;
438 -> 1;
439 -> 1;
440 -> 1;
441 -> 436;
441 -> 440;
442 -> 439;
442 -> 440;
443 -> 439;
443 -> 440;
444 -> 437;
444 -> 440;
445 -> 438;
445 -> 440;
446 -> 439;
446 -> 440;
447 -> 439;
447 -> 440;
448 -> 439;
448 -> 440;
449 -> 441;
449 -> 440;
450 -> 445;
450 -> 440;
451 -> 442;
451 -> 440;
452 -> 440;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 453;
455 -> 452;
456 -> 452;
457 -> 455;
457 -> 456;
458 -> 457;
458 -> 456;
459 -> 458;
460 -> 459;
461 -> 452;
462 -> 454;
462 -> 461;
462 -> 452;
463 -> 460;
463 -> 462;
464 -> 443;
464 -> 440;
465 -> 444;
465 -> 440;
466 -> 446;
466 -> 440;
467 -> 447;
467 -> 440;
468 -> 448;
468 -> 440;
469 -> 440;
470 -> 449;
470 -> 469;
471 -> 463;
471 -> 469;
472 -> 464;
472 -> 469;
473 -> 465;
473 -> 469;
474 -> 466;
474 -> 469;
475 -> 467;
475 -> 469;
476 -> 468;
476 -> 469;
477 -> 470;
477 -> 469;
478 -> 471;
478 -> 469;
479 -> 472;
479 -> 469;
480 -> 473;
480 -> 469;
481 -> 474;
481 -> 469;
482 -> 475;
482 -> 469;
483 -> 476;
483 -> 469;
484 -> 469;
485 -> 484;
485 -> 469;
486 -> 469;
487 -> 477;
487 -> 486;
488 -> 478;
488 -> 486;
489 -> 479;
489 -> 486;
490 -> 480;
490 -> 486;
491 -> 481;
491 -> 486;
492 -> 482;
492 -> 486;
493 -> 483;
493 -> 486;
494 -> 485;
494 -> 486;
495 -> 490;
495 -> 486;
496 -> 492;
496 -> 486;
497 -> 486;
498 -> 495;
498 -> 497;
499 -> 496;
499 -> 497;
500 -> 487;
500 -> 497;
501 -> 500;
501 -> 435;
501 -> 497;
502 -> 501;
503 -> 499;
503 -> 501;
504 -> 498;
504 -> 501;
505 -> 501;
506 -> 502;
506 -> 505;
507 -> 503;
507 -> 505;
508 -> 504;
508 -> 505;
509 -> 502;
509 -> 505;
510 -> 505;
511 -> 508;
511 -> 510;
511 -> 505;
512 -> 506;
512 -> 505;
513 -> 0;
513 -> 505;
514 -> 513;
514 -> 509;
514 -> 505;
515 -> 505;
516 -> 512;
516 -> 514;
516 -> 515;
516 -> 0;
516 -> 505;
517 -> 516;
517 -> 505;
518 -> 508;
518 -> 505;
519 -> 507;
519 -> 505;
520 -> 505;
521 -> 517;
521 -> 518;
521 -> 519;
521 -> 520;
521 -> 516;
521 -> 208;
521 -> 217;
521 -> 505;
522 -> 505;
523 -> 521;
523 -> 522;
524 -> 522;
525 -> 522;
526 -> 523;
526 -> 521;
526 -> 525;
526 -> 522;
527 -> 524;
527 -> 522;
528 -> 522;
529 -> 526;
529 -> 521;
529 -> 525;
529 -> 527;
529 -> 528;
529 -> 524;
529 -> 522;
530 -> 522;
531 -> 530;
531 -> 524;
531 -> 522;
532 -> 524;
532 -> 522;
533 -> 522;
534 -> 532;
534 -> 533;
534 -> 524;
534 -> 531;
534 -> 522;
535 -> 523;
535 -> 522;
536 -> 535;
536 -> 502;
536 -> 501;
537 -> 502;
537 -> 486;
538 -> 486;
539 -> 489;
539 -> 538;
539 -> 486;
540 -> 537;
540 -> 539;
541 -> 539;
542 -> 540;
542 -> 541;
542 -> 502;
542 -> 536;
542 -> 521;
542 -> 539;
543 -> 542;
543 -> 539;
544 -> 303;
544 -> 543;
545 -> 0;
545 -> 486;
546 -> 494;
546 -> 486;
547 -> 491;
547 -> 537;
547 -> 488;
547 -> 544;
547 -> 486;
548 -> 547;
548 -> 486;
549 -> 486;
550 -> 548;
550 -> 549;
551 -> 0;
551 -> 549;
552 -> 551;
553 -> 486;
554 -> 547;
554 -> 502;
554 -> 536;
554 -> 521;
554 -> 460;
554 -> 0;
554 -> 302;
554 -> 486;
555 -> 486;
556 -> 555;
557 -> 554;
557 -> 556;
557 -> 486;
558 -> 557;
558 -> 486;
559 -> 486;
560 -> 558;
560 -> 559;
561 -> 560;
561 -> 557;
561 -> 559;
562 -> 561;
562 -> 557;
562 -> 559;
563 -> 559;
564 -> 561;
564 -> 563;
564 -> 557;
564 -> 559;
565 -> 0;
565 -> 559;
566 -> 564;
566 -> 565;
566 -> 559;
567 -> 493;
567 -> 566;
567 -> 486;
568 -> 547;
568 -> 566;
568 -> 567;
569 -> 567;
570 -> 0;
570 -> 567;
571 -> 567;
572 -> 569;
572 -> 571;
573 -> 570;
573 -> 571;
574 -> 571;
575 -> 574;
575 -> 571;
576 -> 572;
576 -> 571;
577 -> 571;
578 -> 575;
578 -> 577;
579 -> 576;
579 -> 577;
580 -> 578;
580 -> 577;
581 -> 577;
582 -> 577;
583 -> 580;
583 -> 582;
584 -> 581;
584 -> 582;
585 -> 582;
586 -> 585;
586 -> 582;
587 -> 583;
587 -> 585;
587 -> 582;
588 -> 579;
588 -> 577;
589 -> 588;
589 -> 581;
589 -> 569;
589 -> 585;
589 -> 586;
589 -> 587;
589 -> 574;
589 -> 577;
590 -> 577;
591 -> 589;
591 -> 590;
592 -> 589;
592 -> 590;
593 -> 591;
593 -> 589;
593 -> 590;
594 -> 590;
595 -> 593;
595 -> 594;
596 -> 592;
596 -> 594;
597 -> 594;
598 -> 595;
598 -> 594;
599 -> 598;
600 -> 599;
600 -> 596;
600 -> 589;
600 -> 593;
600 -> 598;
601 -> 600;
601 -> 599;
602 -> 600;
602 -> 599;
603 -> 601;
603 -> 599;
604 -> 601;
604 -> 600;
604 -> 599;
605 -> 599;
606 -> 599;
607 -> 603;
607 -> 606;
608 -> 604;
608 -> 606;
609 -> 605;
609 -> 606;
610 -> 602;
610 -> 606;
611 -> 608;
611 -> 606;
612 -> 609;
612 -> 606;
613 -> 606;
614 -> 611;
614 -> 613;
615 -> 612;
615 -> 613;
616 -> 610;
616 -> 613;
617 -> 614;
617 -> 613;
618 -> 617;
619 -> 606;
620 -> 619;
620 -> 599;
621 -> 601;
621 -> 600;
621 -> 605;
621 -> 599;
622 -> 599;
623 -> 603;
623 -> 622;
624 -> 621;
624 -> 622;
625 -> 605;
625 -> 622;
626 -> 602;
626 -> 622;
627 -> 624;
627 -> 622;
628 -> 622;
629 -> 628;
629 -> 599;
630 -> 620;
630 -> 629;
630 -> 599;
631 -> 599;
632 -> 603;
632 -> 631;
633 -> 604;
633 -> 631;
634 -> 605;
634 -> 631;
635 -> 602;
635 -> 631;
636 -> 633;
636 -> 631;
637 -> 631;
638 -> 637;
638 -> 599;
639 -> 630;
639 -> 638;
639 -> 599;
640 -> 601;
640 -> 599;
641 -> 601;
641 -> 600;
641 -> 599;
642 -> 599;
643 -> 641;
643 -> 642;
644 -> 641;
644 -> 642;
645 -> 641;
645 -> 642;
646 -> 640;
646 -> 642;
647 -> 646;
647 -> 642;
648 -> 646;
648 -> 642;
649 -> 646;
649 -> 642;
650 -> 646;
650 -> 642;
651 -> 646;
651 -> 642;
652 -> 646;
652 -> 642;
653 -> 643;
653 -> 646;
653 -> 642;
654 -> 644;
654 -> 646;
654 -> 642;
655 -> 645;
655 -> 646;
655 -> 642;
656 -> 646;
656 -> 642;
657 -> 642;
658 -> 656;
658 -> 657;
658 -> 647;
658 -> 653;
658 -> 654;
658 -> 650;
658 -> 655;
658 -> 652;
658 -> 641;
658 -> 642;
659 -> 658;
659 -> 646;
659 -> 642;
660 -> 642;
661 -> 660;
661 -> 646;
661 -> 642;
662 -> 643;
662 -> 642;
663 -> 642;
664 -> 642;
665 -> 662;
665 -> 664;
666 -> 663;
666 -> 664;
668 -> 667;
670 -> 669;
672 -> 671;
675 -> 674;
676 -> 0;
677 -> 0;
678 -> 0;
679 -> 678;
681 -> 676;
681 -> 677;
681 -> 679;
681 -> 680;
682 -> 681;
684 -> 683;
686 -> 685;
688 -> 687;
690 -> 689;
691 -> 665;
691 -> 664;
692 -> 664;
693 -> 691;
693 -> 692;
694 -> 666;
694 -> 692;
695 -> 694;
695 -> 692;
696 -> 694;
696 -> 692;
697 -> 694;
697 -> 692;
698 -> 694;
698 -> 692;
699 -> 694;
699 -> 692;
700 -> 692;
701 -> 693;
701 -> 700;
701 -> 692;
702 -> 694;
702 -> 692;
703 -> 702;
703 -> 695;
703 -> 696;
703 -> 697;
703 -> 698;
703 -> 699;
703 -> 692;
704 -> 693;
704 -> 658;
704 -> 659;
704 -> 661;
704 -> 694;
704 -> 692;
705 -> 693;
705 -> 694;
705 -> 692;
706 -> 663;
706 -> 646;
706 -> 642;
707 -> 641;
707 -> 640;
707 -> 658;
707 -> 659;
707 -> 661;
707 -> 706;
707 -> 660;
707 -> 703;
707 -> 704;
707 -> 705;
707 -> 599;
708 -> 641;
708 -> 642;
709 -> 641;
709 -> 642;
710 -> 641;
710 -> 642;
711 -> 641;
711 -> 642;
712 -> 708;
712 -> 707;
712 -> 642;
713 -> 642;
714 -> 711;
714 -> 713;
715 -> 714;
715 -> 707;
715 -> 0;
715 -> 713;
716 -> 715;
716 -> 642;
717 -> 642;
718 -> 708;
718 -> 707;
718 -> 717;
718 -> 642;
719 -> 716;
719 -> 718;
719 -> 642;
720 -> 708;
720 -> 707;
720 -> 719;
721 -> 720;
721 -> 642;
722 -> 712;
722 -> 642;
723 -> 709;
723 -> 642;
724 -> 710;
724 -> 642;
725 -> 642;
726 -> 721;
726 -> 725;
727 -> 722;
727 -> 725;
728 -> 723;
728 -> 725;
729 -> 724;
729 -> 725;
730 -> 711;
730 -> 725;
731 -> 725;
732 -> 726;
732 -> 731;
732 -> 725;
733 -> 729;
733 -> 725;
734 -> 729;
734 -> 707;
734 -> 725;
735 -> 730;
735 -> 707;
735 -> 725;
736 -> 725;
737 -> 735;
737 -> 736;
738 -> 735;
738 -> 736;
739 -> 736;
740 -> 739;
740 -> 736;
741 -> 739;
741 -> 736;
742 -> 739;
742 -> 736;
743 -> 739;
743 -> 736;
744 -> 737;
744 -> 739;
744 -> 736;
745 -> 735;
745 -> 739;
745 -> 740;
745 -> 741;
745 -> 742;
745 -> 743;
745 -> 744;
745 -> 725;
746 -> 727;
746 -> 725;
747 -> 728;
747 -> 725;
748 -> 729;
748 -> 725;
749 -> 725;
750 -> 746;
750 -> 749;
751 -> 747;
751 -> 749;
752 -> 748;
752 -> 749;
753 -> 745;
753 -> 749;
754 -> 749;
755 -> 751;
755 -> 754;
755 -> 749;
756 -> 752;
756 -> 754;
756 -> 749;
757 -> 755;
757 -> 756;
757 -> 749;
758 -> 750;
758 -> 753;
758 -> 749;
759 -> 751;
759 -> 753;
759 -> 749;
760 -> 752;
760 -> 753;
760 -> 749;
761 -> 725;
762 -> 726;
762 -> 725;
763 -> 725;
764 -> 762;
764 -> 763;
765 -> 745;
765 -> 763;
766 -> 764;
766 -> 763;
767 -> 763;
768 -> 766;
768 -> 767;
769 -> 765;
769 -> 767;
770 -> 769;
770 -> 767;
771 -> 770;
771 -> 768;
771 -> 745;
771 -> 758;
771 -> 759;
771 -> 760;
771 -> 767;
772 -> 767;
773 -> 771;
773 -> 772;
774 -> 771;
774 -> 772;
775 -> 773;
775 -> 772;
776 -> 772;
777 -> 775;
777 -> 776;
778 -> 774;
778 -> 776;
779 -> 778;
779 -> 771;
779 -> 776;
780 -> 777;
780 -> 776;
781 -> 779;
781 -> 780;
781 -> 771;
781 -> 776;
782 -> 0;
782 -> 776;
783 -> 776;
784 -> 777;
784 -> 781;
784 -> 783;
784 -> 776;
785 -> 778;
785 -> 781;
785 -> 776;
786 -> 777;
786 -> 781;
786 -> 776;
787 -> 0;
787 -> 784;
788 -> 777;
788 -> 776;
789 -> 787;
789 -> 776;
790 -> 776;
791 -> 788;
791 -> 790;
792 -> 789;
792 -> 790;
793 -> 778;
793 -> 790;
794 -> 791;
794 -> 790;
795 -> 792;
795 -> 790;
796 -> 790;
797 -> 794;
797 -> 796;
798 -> 795;
798 -> 796;
799 -> 798;
799 -> 796;
800 -> 796;
801 -> 797;
801 -> 796;
802 -> 798;
802 -> 796;
803 -> 796;
804 -> 796;
805 -> 801;
805 -> 804;
806 -> 802;
806 -> 804;
807 -> 803;
807 -> 804;
808 -> 805;
808 -> 807;
808 -> 804;
809 -> 806;
809 -> 807;
809 -> 804;
810 -> 803;
810 -> 790;
811 -> 790;
812 -> 790;
813 -> 793;
813 -> 812;
814 -> 813;
814 -> 785;
814 -> 812;
815 -> 814;
815 -> 790;
816 -> 810;
816 -> 790;
817 -> 811;
817 -> 790;
818 -> 816;
818 -> 817;
818 -> 815;
818 -> 808;
818 -> 809;
818 -> 785;
818 -> 790;
819 -> 790;
820 -> 818;
820 -> 819;
821 -> 820;
821 -> 818;
821 -> 819;
822 -> 791;
822 -> 821;
823 -> 821;
824 -> 822;
824 -> 823;
825 -> 824;
825 -> 823;
826 -> 824;
826 -> 823;
827 -> 825;
827 -> 823;
828 -> 823;
829 -> 827;
829 -> 828;
830 -> 826;
830 -> 828;
831 -> 829;
831 -> 824;
831 -> 828;
832 -> 828;
833 -> 832;
833 -> 828;
834 -> 829;
834 -> 824;
834 -> 828;
835 -> 830;
835 -> 834;
835 -> 831;
835 -> 824;
836 -> 830;
836 -> 834;
836 -> 835;
837 -> 835;
838 -> 836;
838 -> 828;
839 -> 828;
840 -> 838;
840 -> 839;
840 -> 828;
841 -> 838;
841 -> 829;
841 -> 828;
842 -> 838;
842 -> 840;
843 -> 0;
843 -> 840;
844 -> 838;
844 -> 842;
844 -> 840;
845 -> 828;
846 -> 845;
846 -> 823;
847 -> 823;
848 -> 826;
848 -> 847;
849 -> 847;
850 -> 848;
850 -> 844;
850 -> 849;
851 -> 850;
851 -> 847;
852 -> 823;
853 -> 827;
853 -> 852;
854 -> 846;
854 -> 852;
855 -> 851;
855 -> 852;
856 -> 826;
856 -> 852;
857 -> 852;
858 -> 856;
858 -> 857;
859 -> 858;
859 -> 844;
859 -> 857;
860 -> 859;
860 -> 852;
861 -> 852;
862 -> 853;
862 -> 860;
862 -> 852;
863 -> 854;
863 -> 852;
864 -> 855;
864 -> 863;
865 -> 0;
865 -> 864;
866 -> 853;
866 -> 852;
867 -> 865;
867 -> 852;
868 -> 852;
869 -> 866;
869 -> 868;
870 -> 867;
870 -> 868;
871 -> 870;
871 -> 868;
872 -> 868;
873 -> 868;
873 -> 852;
874 -> 852;
875 -> 852;
876 -> 856;
876 -> 875;
877 -> 876;
877 -> 844;
877 -> 875;
878 -> 877;
878 -> 852;
879 -> 873;
879 -> 852;
880 -> 874;
880 -> 852;
881 -> 879;
881 -> 880;
881 -> 878;
881 -> 869;
881 -> 870;
881 -> 844;
881 -> 852;
882 -> 852;
883 -> 881;
884 -> 856;
884 -> 883;
885 -> 884;
885 -> 881;
885 -> 883;
886 -> 885;
886 -> 881;
887 -> 855;
887 -> 881;
888 -> 887;
889 -> 856;
889 -> 888;
890 -> 889;
890 -> 881;
890 -> 888;
891 -> 890;
891 -> 887;
892 -> 886;
892 -> 887;
893 -> 853;
893 -> 887;
894 -> 854;
894 -> 887;
895 -> 887;
896 -> 887;
897 -> 891;
897 -> 896;
898 -> 892;
898 -> 896;
899 -> 893;
899 -> 896;
900 -> 894;
900 -> 896;
901 -> 895;
901 -> 896;
902 -> 898;
902 -> 896;
903 -> 896;
904 -> 902;
904 -> 903;
905 -> 901;
905 -> 903;
906 -> 903;
907 -> 903;
908 -> 904;
908 -> 907;
908 -> 903;
909 -> 904;
909 -> 905;
909 -> 903;
910 -> 904;
910 -> 881;
910 -> 905;
910 -> 903;
911 -> 904;
911 -> 881;
911 -> 905;
911 -> 903;
912 -> 906;
912 -> 905;
912 -> 903;
913 -> 901;
913 -> 896;
914 -> 901;
914 -> 896;
915 -> 901;
915 -> 896;
916 -> 901;
916 -> 896;
917 -> 901;
917 -> 896;
918 -> 896;
919 -> 897;
919 -> 918;
919 -> 896;
920 -> 896;
921 -> 899;
921 -> 920;
921 -> 896;
922 -> 897;
922 -> 901;
922 -> 896;
923 -> 899;
923 -> 901;
923 -> 900;
923 -> 896;
924 -> 923;
924 -> 901;
924 -> 896;
925 -> 900;
925 -> 896;
926 -> 899;
926 -> 881;
926 -> 925;
927 -> 899;
927 -> 926;
928 -> 927;
928 -> 926;
928 -> 901;
929 -> 887;
930 -> 856;
930 -> 929;
931 -> 930;
931 -> 926;
931 -> 929;
932 -> 931;
932 -> 887;
933 -> 853;
933 -> 887;
934 -> 887;
935 -> 881;
936 -> 935;
936 -> 932;
937 -> 936;
937 -> 881;
938 -> 873;
938 -> 881;
939 -> 895;
939 -> 881;
940 -> 938;
940 -> 939;
940 -> 937;
940 -> 869;
940 -> 870;
940 -> 911;
940 -> 910;
940 -> 909;
940 -> 912;
940 -> 905;
940 -> 922;
940 -> 924;
940 -> 915;
940 -> 916;
940 -> 917;
940 -> 928;
940 -> 932;
940 -> 923;
940 -> 926;
940 -> 881;
941 -> 881;
942 -> 895;
942 -> 852;
943 -> 824;
943 -> 942;
943 -> 940;
943 -> 823;
944 -> 792;
944 -> 865;
944 -> 821;
945 -> 944;
946 -> 943;
946 -> 945;
947 -> 946;
947 -> 943;
947 -> 945;
948 -> 945;
949 -> 947;
949 -> 948;
949 -> 945;
950 -> 949;
950 -> 945;
951 -> 950;
951 -> 944;
952 -> 791;
952 -> 944;
953 -> 792;
953 -> 0;
953 -> 944;
954 -> 951;
954 -> 953;
955 -> 943;
955 -> 953;
956 -> 953;
957 -> 953;
958 -> 954;
958 -> 957;
959 -> 955;
959 -> 957;
960 -> 956;
960 -> 957;
961 -> 956;
961 -> 957;
962 -> 959;
962 -> 957;
963 -> 957;
964 -> 962;
964 -> 963;
965 -> 961;
965 -> 963;
966 -> 963;
967 -> 963;
968 -> 964;
968 -> 967;
968 -> 963;
969 -> 964;
969 -> 951;
969 -> 965;
969 -> 963;
970 -> 964;
970 -> 951;
970 -> 965;
970 -> 963;
971 -> 966;
971 -> 965;
971 -> 963;
972 -> 961;
972 -> 957;
973 -> 961;
973 -> 957;
974 -> 961;
974 -> 957;
975 -> 961;
975 -> 957;
976 -> 961;
976 -> 957;
977 -> 957;
978 -> 958;
978 -> 977;
978 -> 957;
979 -> 958;
979 -> 961;
979 -> 957;
981 -> 0;
982 -> 0;
983 -> 0;
986 -> 980;
986 -> 985;
987 -> 981;
987 -> 985;
988 -> 982;
988 -> 985;
989 -> 983;
989 -> 985;
990 -> 984;
990 -> 985;
991 -> 985;
992 -> 991;
992 -> 985;
993 -> 991;
993 -> 985;
994 -> 991;
994 -> 985;
995 -> 985;
996 -> 987;
996 -> 995;
996 -> 985;
997 -> 988;
997 -> 0;
997 -> 985;
998 -> 989;
998 -> 0;
998 -> 985;
999 -> 986;
999 -> 991;
999 -> 985;
1000 -> 987;
1000 -> 991;
1000 -> 985;
1001 -> 988;
1001 -> 991;
1001 -> 985;
1002 -> 990;
1002 -> 991;
1002 -> 985;
1003 -> 989;
1003 -> 991;
1003 -> 985;
1004 -> 985;
1005 -> 1004;
1005 -> 957;
1006 -> 1005;
1006 -> 960;
1006 -> 957;
1007 -> 1006;
1007 -> 961;
1007 -> 957;
1008 -> 953;
1009 -> 791;
1009 -> 951;
1009 -> 1008;
1009 -> 953;
1010 -> 791;
1010 -> 951;
1010 -> 821;
1011 -> 821;
1012 -> 1010;
1012 -> 1011;
1013 -> 956;
1013 -> 1011;
1014 -> 1013;
1014 -> 969;
1014 -> 1011;
1015 -> 0;
1015 -> 1011;
1016 -> 1011;
1017 -> 1014;
1017 -> 1016;
1018 -> 1015;
1018 -> 1016;
1019 -> 1017;
1019 -> 1018;
1019 -> 1016;
1020 -> 1012;
1020 -> 1011;
1021 -> 1019;
1021 -> 1020;
1021 -> 1011;
1022 -> 1021;
1022 -> 1011;
1023 -> 821;
1024 -> 1023;
1024 -> 1020;
1025 -> 1024;
1025 -> 821;
1026 -> 810;
1026 -> 821;
1027 -> 1022;
1027 -> 821;
1028 -> 1026;
1028 -> 1027;
1028 -> 1025;
1028 -> 808;
1028 -> 809;
1028 -> 970;
1028 -> 969;
1028 -> 964;
1028 -> 971;
1028 -> 965;
1028 -> 979;
1028 -> 973;
1028 -> 1007;
1028 -> 975;
1028 -> 976;
1028 -> 1020;
1028 -> 999;
1028 -> 1002;
1028 -> 1000;
1028 -> 1001;
1028 -> 1003;
1028 -> 0;
1028 -> 821;
1029 -> 821;
1030 -> 1022;
1030 -> 790;
1031 -> 771;
1031 -> 1030;
1031 -> 1028;
1031 -> 767;
1032 -> 745;
1032 -> 725;
1033 -> 730;
1033 -> 1031;
1033 -> 1032;
1033 -> 725;
1034 -> 1031;
1034 -> 725;
1035 -> 641;
1035 -> 1034;
1035 -> 1033;
1035 -> 599;
1036 -> 641;
1036 -> 642;
1037 -> 641;
1037 -> 642;
1038 -> 1037;
1038 -> 1035;
1038 -> 642;
1039 -> 1036;
1039 -> 642;
1040 -> 642;
1041 -> 1038;
1041 -> 1040;
1042 -> 1039;
1042 -> 1040;
1043 -> 1041;
1043 -> 1042;
1043 -> 1040;
1044 -> 1043;
1045 -> 1043;
1045 -> 1044;
1046 -> 1043;
1046 -> 1044;
1047 -> 1043;
1047 -> 1044;
1048 -> 1044;
1049 -> 1045;
1049 -> 1048;
1049 -> 1044;
1050 -> 1046;
1050 -> 1044;
1051 -> 0;
1051 -> 1044;
1052 -> 1044;
1053 -> 1050;
1053 -> 1052;
1054 -> 1051;
1054 -> 1052;
1055 -> 1046;
1055 -> 1044;
1056 -> 0;
1056 -> 1044;
1057 -> 1044;
1058 -> 1055;
1058 -> 1057;
1059 -> 1056;
1059 -> 1057;
1060 -> 1045;
1060 -> 1047;
1060 -> 1044;
1061 -> 1046;
1061 -> 1047;
1061 -> 1044;
1062 -> 1045;
1062 -> 1035;
1062 -> 1047;
1062 -> 1044;
1063 -> 641;
1063 -> 1043;
1063 -> 1035;
1063 -> 1062;
1063 -> 1061;
1063 -> 1060;
1063 -> 1047;
1063 -> 599;
1064 -> 641;
1064 -> 642;
1065 -> 641;
1065 -> 642;
1066 -> 641;
1066 -> 642;
1067 -> 641;
1067 -> 642;
1068 -> 641;
1068 -> 642;
1069 -> 1064;
1069 -> 642;
1070 -> 1065;
1070 -> 642;
1071 -> 1066;
1071 -> 642;
1072 -> 1067;
1072 -> 642;
1073 -> 642;
1074 -> 1069;
1074 -> 1073;
1075 -> 1070;
1075 -> 1073;
1076 -> 1071;
1076 -> 1073;
1077 -> 1072;
1077 -> 1073;
1078 -> 1068;
1078 -> 1073;
1079 -> 1073;
1080 -> 1075;
1080 -> 1079;
1080 -> 1073;
1081 -> 1074;
1081 -> 1073;
1082 -> 1075;
1082 -> 1073;
1083 -> 1076;
1083 -> 1073;
1084 -> 1073;
1085 -> 1076;
1085 -> 1084;
1085 -> 1073;
1086 -> 1085;
1086 -> 1077;
1086 -> 1073;
1087 -> 1073;
1088 -> 1081;
1088 -> 1087;
1089 -> 1082;
1089 -> 1087;
1090 -> 1083;
1090 -> 1087;
1091 -> 1086;
1091 -> 1087;
1092 -> 1078;
1092 -> 1087;
1093 -> 1088;
1093 -> 1063;
1093 -> 1087;
1094 -> 1088;
1094 -> 1093;
1095 -> 1089;
1095 -> 1093;
1096 -> 1090;
1096 -> 1093;
1097 -> 1091;
1097 -> 1093;
1098 -> 1093;
1099 -> 1093;
1100 -> 1094;
1100 -> 1099;
1101 -> 1095;
1101 -> 1099;
1102 -> 1096;
1102 -> 1099;
1103 -> 1097;
1103 -> 1099;
1104 -> 1098;
1104 -> 1099;
1105 -> 1092;
1105 -> 1099;
1106 -> 1100;
1106 -> 1093;
1106 -> 1099;
1107 -> 1106;
1107 -> 1099;
1108 -> 1100;
1108 -> 1093;
1108 -> 1099;
1109 -> 1104;
1109 -> 1099;
1110 -> 1106;
1110 -> 1099;
1111 -> 1099;
1112 -> 1101;
1112 -> 1099;
1113 -> 1099;
1114 -> 1108;
1114 -> 1113;
1115 -> 1109;
1115 -> 1113;
1116 -> 1110;
1116 -> 1113;
1117 -> 1111;
1117 -> 1113;
1118 -> 1112;
1118 -> 1113;
1119 -> 1105;
1119 -> 1113;
1120 -> 1113;
1121 -> 1115;
1121 -> 1120;
1121 -> 1113;
1122 -> 1113;
1123 -> 1122;
1123 -> 1099;
1124 -> 1099;
1125 -> 1123;
1125 -> 1124;
1125 -> 1099;
1127 -> 1126;
1128 -> 1127;
1128 -> 1126;
1129 -> 1126;
1130 -> 1128;
1130 -> 1126;
1131 -> 1130;
1132 -> 1099;
1133 -> 1131;
1133 -> 1132;
1134 -> 1131;
1134 -> 1128;
1134 -> 1132;
1135 -> 1132;
1136 -> 1134;
1136 -> 1135;
1137 -> 1133;
1137 -> 1135;
1138 -> 1137;
1138 -> 1135;
1139 -> 1137;
1139 -> 1135;
1140 -> 1137;
1140 -> 1135;
1141 -> 1137;
1141 -> 1135;
1142 -> 1136;
1142 -> 1137;
1142 -> 1135;
1143 -> 0;
1143 -> 1137;
1143 -> 1135;
1144 -> 1135;
1145 -> 1144;
1145 -> 1137;
1145 -> 1135;
1146 -> 1135;
1147 -> 1146;
1147 -> 1137;
1147 -> 1135;
1148 -> 1134;
1148 -> 1133;
1148 -> 1143;
1148 -> 1145;
1148 -> 1147;
1148 -> 1142;
1148 -> 1144;
1148 -> 1132;
1149 -> 1132;
1150 -> 1148;
1150 -> 1149;
1151 -> 1150;
1151 -> 1148;
1151 -> 0;
1151 -> 1149;
1152 -> 1149;
1153 -> 1150;
1153 -> 1148;
1153 -> 1152;
1153 -> 1149;
1154 -> 1151;
1154 -> 1132;
1155 -> 1148;
1155 -> 1132;
1156 -> 1155;
1156 -> 1099;
1157 -> 1100;
1157 -> 1099;
1158 -> 1100;
1158 -> 1093;
1158 -> 1099;
1159 -> 1099;
1160 -> 1157;
1160 -> 1159;
1161 -> 1158;
1161 -> 1159;
1162 -> 1160;
1162 -> 1159;
1163 -> 0;
1163 -> 1162;
1164 -> 1099;
1165 -> 1156;
1165 -> 1099;
1166 -> 1104;
1166 -> 1099;
1167 -> 1106;
1167 -> 1099;
1168 -> 1099;
1169 -> 1102;
1169 -> 1099;
1170 -> 1163;
1170 -> 1099;
1171 -> 1164;
1171 -> 1099;
1172 -> 1099;
1173 -> 1165;
1173 -> 1172;
1174 -> 1166;
1174 -> 1172;
1175 -> 1167;
1175 -> 1172;
1176 -> 1168;
1176 -> 1172;
1177 -> 1169;
1177 -> 1172;
1178 -> 1170;
1178 -> 1172;
1179 -> 1168;
1179 -> 1172;
1180 -> 1171;
1180 -> 1172;
1181 -> 1105;
1181 -> 1172;
1182 -> 1178;
1182 -> 1172;
1183 -> 1172;
1184 -> 1182;
1184 -> 1183;
1185 -> 1184;
1185 -> 0;
1185 -> 1183;
1186 -> 1173;
1186 -> 1185;
1187 -> 1174;
1187 -> 1185;
1188 -> 1175;
1188 -> 1185;
1189 -> 1176;
1189 -> 1185;
1190 -> 1177;
1190 -> 1185;
1191 -> 1178;
1191 -> 1185;
1192 -> 1179;
1192 -> 1185;
1193 -> 1180;
1193 -> 1185;
1194 -> 1185;
1195 -> 1186;
1195 -> 1194;
1196 -> 1187;
1196 -> 1194;
1197 -> 1188;
1197 -> 1194;
1198 -> 1189;
1198 -> 1194;
1199 -> 1190;
1199 -> 1194;
1200 -> 1191;
1200 -> 1194;
1201 -> 1192;
1201 -> 1194;
1202 -> 1193;
1202 -> 1194;
1203 -> 1181;
1203 -> 1194;
1204 -> 1194;
1205 -> 1196;
1205 -> 1204;
1205 -> 1194;
1206 -> 1195;
1206 -> 1205;
1207 -> 1197;
1207 -> 1205;
1208 -> 1198;
1208 -> 1205;
1209 -> 1199;
1209 -> 1205;
1210 -> 1200;
1210 -> 1205;
1211 -> 1201;
1211 -> 1205;
1212 -> 1202;
1212 -> 1205;
1213 -> 1205;
1214 -> 1206;
1214 -> 1213;
1215 -> 1207;
1215 -> 1213;
1216 -> 1208;
1216 -> 1213;
1217 -> 1209;
1217 -> 1213;
1218 -> 1210;
1218 -> 1213;
1219 -> 1211;
1219 -> 1213;
1220 -> 1212;
1220 -> 1213;
1221 -> 1203;
1221 -> 1213;
1222 -> 1213;
1223 -> 1214;
1223 -> 1222;
1224 -> 1223;
1224 -> 1148;
1224 -> 0;
1224 -> 1222;
1225 -> 1222;
1226 -> 1223;
1226 -> 1148;
1226 -> 1225;
1226 -> 1222;
1227 -> 1224;
1227 -> 1213;
1228 -> 1218;
1228 -> 1213;
1229 -> 1213;
1230 -> 1228;
1230 -> 1229;
1231 -> 1230;
1231 -> 0;
1231 -> 1229;
1232 -> 1230;
1232 -> 0;
1232 -> 1229;
1233 -> 1229;
1234 -> 0;
1234 -> 1229;
1235 -> 1230;
1235 -> 1234;
1235 -> 1229;
1236 -> 0;
1236 -> 1229;
1237 -> 1230;
1237 -> 1236;
1237 -> 1229;
1238 -> 1229;
1239 -> 0;
1239 -> 1229;
1240 -> 1230;
1240 -> 1239;
1240 -> 1229;
1241 -> 1240;
1241 -> 1229;
1242 -> 1229;
1243 -> 1241;
1243 -> 1242;
1244 -> 1242;
1245 -> 1243;
1245 -> 1244;
1245 -> 1242;
1246 -> 1213;
1247 -> 1221;
1247 -> 1213;
1248 -> 1213;
1249 -> 1213;
1250 -> 1214;
1250 -> 1249;
1251 -> 1249;
1252 -> 1250;
1252 -> 1251;
1253 -> 1252;
1253 -> 1148;
1253 -> 1251;
1254 -> 1253;
1254 -> 1249;
1255 -> 1254;
1255 -> 1213;
1256 -> 1247;
1256 -> 1255;
1256 -> 1213;
1257 -> 1256;
1258 -> 1246;
1258 -> 1257;
1258 -> 1256;
1259 -> 1214;
1259 -> 1258;
1260 -> 1215;
1260 -> 1258;
1261 -> 1216;
1261 -> 1258;
1262 -> 1217;
1262 -> 1258;
1263 -> 1218;
1263 -> 1258;
1264 -> 1221;
1264 -> 1258;
1265 -> 1219;
1265 -> 1258;
1266 -> 1220;
1266 -> 1258;
1267 -> 1258;
1268 -> 1259;
1268 -> 1267;
1269 -> 1260;
1269 -> 1267;
1270 -> 1261;
1270 -> 1267;
1271 -> 1262;
1271 -> 1267;
1272 -> 1263;
1272 -> 1267;
1273 -> 1264;
1273 -> 1267;
1274 -> 1265;
1274 -> 1267;
1275 -> 1266;
1275 -> 1267;
1276 -> 1247;
1276 -> 1267;
1277 -> 1258;
1278 -> 1258;
1279 -> 1214;
1279 -> 1278;
1280 -> 1279;
1280 -> 1148;
1280 -> 0;
1280 -> 1278;
1281 -> 1278;
1282 -> 1279;
1282 -> 1148;
1282 -> 1281;
1282 -> 1278;
1283 -> 1280;
1283 -> 1258;
1284 -> 1218;
1284 -> 0;
1284 -> 1256;
1285 -> 1256;
1286 -> 1259;
1286 -> 1267;
1287 -> 1260;
1287 -> 1267;
1288 -> 1261;
1288 -> 1267;
1289 -> 1262;
1289 -> 1267;
1290 -> 1263;
1290 -> 1267;
1291 -> 1264;
1291 -> 1267;
1292 -> 1265;
1292 -> 1267;
1293 -> 1275;
1293 -> 1267;
1294 -> 1256;
1294 -> 1267;
1295 -> 1267;
1296 -> 1286;
1296 -> 1295;
1297 -> 1296;
1297 -> 1148;
1297 -> 0;
1297 -> 1295;
1298 -> 1295;
1299 -> 1296;
1299 -> 1148;
1299 -> 1298;
1299 -> 1295;
1300 -> 1297;
1300 -> 1267;
1301 -> 1267;
1302 -> 1294;
1302 -> 1301;
1303 -> 1302;
1303 -> 1162;
1303 -> 0;
1303 -> 1301;
1304 -> 1303;
1304 -> 1267;
1305 -> 1289;
1305 -> 1267;
1306 -> 1267;
1307 -> 1305;
1307 -> 1306;
1308 -> 1294;
1308 -> 1306;
1309 -> 1306;
1310 -> 1308;
1310 -> 1162;
1310 -> 1309;
1310 -> 1306;
1311 -> 1306;
1312 -> 1308;
1312 -> 1162;
1312 -> 1311;
1312 -> 1306;
1313 -> 1308;
1313 -> 1162;
1313 -> 1306;
1314 -> 1313;
1314 -> 1267;
1315 -> 1290;
1315 -> 0;
1315 -> 1267;
1316 -> 1267;
1317 -> 1294;
1317 -> 1162;
1317 -> 1316;
1317 -> 1267;
1318 -> 1315;
1318 -> 1317;
1318 -> 1267;
1319 -> 1286;
1319 -> 1318;
1320 -> 1294;
1320 -> 1162;
1320 -> 1318;
1321 -> 1287;
1321 -> 1318;
1322 -> 1288;
1322 -> 1318;
1323 -> 1289;
1323 -> 1318;
1324 -> 1290;
1324 -> 1318;
1325 -> 1291;
1325 -> 1318;
1326 -> 1292;
1326 -> 1318;
1327 -> 1293;
1327 -> 1318;
1328 -> 1318;
1329 -> 1319;
1329 -> 1328;
1330 -> 1320;
1330 -> 1328;
1331 -> 1321;
1331 -> 1328;
1332 -> 1322;
1332 -> 1328;
1333 -> 1323;
1333 -> 1328;
1334 -> 1324;
1334 -> 1328;
1335 -> 1325;
1335 -> 1328;
1336 -> 1326;
1336 -> 1328;
1337 -> 1327;
1337 -> 1328;
1338 -> 1294;
1338 -> 1328;
1339 -> 1334;
1339 -> 1328;
1340 -> 1328;
1341 -> 1339;
1341 -> 1340;
1342 -> 1341;
1342 -> 0;
1342 -> 1340;
1343 -> 1341;
1343 -> 0;
1343 -> 1340;
1344 -> 1340;
1345 -> 0;
1345 -> 1340;
1346 -> 1341;
1346 -> 1345;
1346 -> 1340;
1347 -> 0;
1347 -> 1340;
1348 -> 1341;
1348 -> 1347;
1348 -> 1340;
1349 -> 1340;
1350 -> 0;
1350 -> 1340;
1351 -> 1341;
1351 -> 1350;
1351 -> 1340;
1352 -> 1351;
1352 -> 1340;
1353 -> 1340;
1354 -> 1352;
1354 -> 1353;
1355 -> 1353;
1356 -> 1354;
1356 -> 1355;
1356 -> 1353;
1357 -> 1328;
1358 -> 1332;
1358 -> 1357;
1358 -> 1328;
1359 -> 1330;
1359 -> 1162;
1359 -> 1328;
1360 -> 1329;
1360 -> 1359;
1361 -> 1330;
1361 -> 1359;
1362 -> 1331;
1362 -> 1359;
1363 -> 1332;
1363 -> 1359;
1364 -> 1333;
1364 -> 1359;
1365 -> 1334;
1365 -> 1359;
1366 -> 1335;
1366 -> 1359;
1367 -> 1336;
1367 -> 1359;
1368 -> 1337;
1368 -> 1359;
1369 -> 1359;
1370 -> 1360;
1370 -> 1369;
1371 -> 1361;
1371 -> 1369;
1372 -> 1362;
1372 -> 1369;
1373 -> 1363;
1373 -> 1369;
1374 -> 1364;
1374 -> 1369;
1375 -> 1365;
1375 -> 1369;
1376 -> 1366;
1376 -> 1369;
1377 -> 1367;
1377 -> 1369;
1378 -> 1368;
1378 -> 1369;
1379 -> 1338;
1379 -> 1369;
1380 -> 1371;
1380 -> 1162;
1380 -> 1369;
1381 -> 1370;
1381 -> 1380;
1382 -> 1371;
1382 -> 1380;
1383 -> 1372;
1383 -> 1380;
1384 -> 1373;
1384 -> 1380;
1385 -> 1374;
1385 -> 1380;
1386 -> 1375;
1386 -> 1380;
1387 -> 1376;
1387 -> 1380;
1388 -> 1377;
1388 -> 1380;
1389 -> 1378;
1389 -> 1380;
1390 -> 1380;
1391 -> 1381;
1391 -> 1390;
1392 -> 1382;
1392 -> 1390;
1393 -> 1383;
1393 -> 1390;
1394 -> 1384;
1394 -> 1390;
1395 -> 1385;
1395 -> 1390;
1396 -> 1386;
1396 -> 1390;
1397 -> 1387;
1397 -> 1390;
1398 -> 1388;
1398 -> 1390;
1399 -> 1389;
1399 -> 1390;
1400 -> 1379;
1400 -> 1390;
1401 -> 1390;
1402 -> 1392;
1402 -> 1401;
1402 -> 1390;
1403 -> 1392;
1403 -> 1162;
1403 -> 1390;
1404 -> 1391;
1404 -> 1390;
1405 -> 1392;
1405 -> 1390;
1406 -> 1393;
1406 -> 1390;
1407 -> 1394;
1407 -> 1390;
1408 -> 1395;
1408 -> 1390;
1409 -> 1396;
1409 -> 1390;
1410 -> 1397;
1410 -> 1390;
1411 -> 1398;
1411 -> 1390;
1412 -> 1399;
1412 -> 1390;
1413 -> 1390;
1414 -> 1404;
1414 -> 1413;
1415 -> 1405;
1415 -> 1413;
1416 -> 1406;
1416 -> 1413;
1417 -> 1407;
1417 -> 1413;
1418 -> 1408;
1418 -> 1413;
1419 -> 1409;
1419 -> 1413;
1420 -> 1410;
1420 -> 1413;
1421 -> 1405;
1421 -> 1413;
1422 -> 1411;
1422 -> 1413;
1423 -> 1412;
1423 -> 1413;
1424 -> 1413;
1425 -> 1415;
1425 -> 1424;
1425 -> 1413;
1426 -> 1415;
1426 -> 1162;
1426 -> 1413;
1427 -> 1414;
1427 -> 1413;
1428 -> 1415;
1428 -> 1413;
1429 -> 1416;
1429 -> 1413;
1430 -> 1417;
1430 -> 1413;
1431 -> 1419;
1431 -> 1413;
1432 -> 1420;
1432 -> 1413;
1433 -> 1421;
1433 -> 1413;
1434 -> 1422;
1434 -> 1413;
1435 -> 1423;
1435 -> 1413;
1436 -> 1418;
1436 -> 1413;
1437 -> 1413;
1438 -> 1427;
1438 -> 1437;
1439 -> 1428;
1439 -> 1437;
1440 -> 1429;
1440 -> 1437;
1441 -> 1430;
1441 -> 1437;
1442 -> 1431;
1442 -> 1437;
1443 -> 1432;
1443 -> 1437;
1444 -> 1433;
1444 -> 1437;
1445 -> 1434;
1445 -> 1437;
1446 -> 1435;
1446 -> 1437;
1447 -> 1436;
1447 -> 1437;
1448 -> 1439;
1448 -> 1437;
1449 -> 1440;
1449 -> 1437;
1450 -> 1442;
1450 -> 1437;
1451 -> 1443;
1451 -> 1437;
1452 -> 1437;
1453 -> 1448;
1453 -> 1452;
1454 -> 1449;
1454 -> 1452;
1455 -> 1450;
1455 -> 1452;
1456 -> 1451;
1456 -> 1452;
1457 -> 1455;
1457 -> 0;
1457 -> 1452;
1458 -> 1452;
1459 -> 1457;
1459 -> 1453;
1459 -> 1452;
1460 -> 1454;
1460 -> 1459;
1461 -> 1460;
1461 -> 1437;
1462 -> 1413;
1463 -> 1419;
1463 -> 0;
1463 -> 1413;
1464 -> 1413;
1465 -> 1413;
1466 -> 1420;
1466 -> 1465;
1467 -> 1465;
1468 -> 1466;
1468 -> 1467;
1469 -> 1468;
1469 -> 1460;
1469 -> 1467;
1470 -> 0;
1470 -> 1467;
1471 -> 1467;
1472 -> 1469;
1472 -> 1471;
1473 -> 1470;
1473 -> 1471;
1474 -> 1472;
1474 -> 1465;
1475 -> 1474;
1475 -> 1413;
1476 -> 1414;
1476 -> 1475;
1477 -> 1415;
1477 -> 1475;
1478 -> 1418;
1478 -> 1475;
1479 -> 1446;
1479 -> 1475;
1480 -> 1475;
1481 -> 1477;
1481 -> 1480;
1482 -> 1478;
1482 -> 1480;
1483 -> 1479;
1483 -> 1480;
1484 -> 1482;
1484 -> 1480;
1485 -> 1480;
1486 -> 1483;
1486 -> 1484;
1487 -> 1481;
1487 -> 1486;
1487 -> 1460;
1487 -> 1484;
1488 -> 1416;
1488 -> 1475;
1489 -> 1417;
1489 -> 1475;
1490 -> 1419;
1490 -> 1475;
1491 -> 1420;
1491 -> 1475;
1492 -> 1421;
1492 -> 1475;
1493 -> 1422;
1493 -> 1475;
1494 -> 1475;
1495 -> 1476;
1495 -> 1494;
1496 -> 1487;
1496 -> 1494;
1497 -> 1488;
1497 -> 1494;
1498 -> 1489;
1498 -> 1494;
1499 -> 1478;
1499 -> 1494;
1500 -> 1490;
1500 -> 1494;
1501 -> 1491;
1501 -> 1494;
1502 -> 1492;
1502 -> 1494;
1503 -> 1493;
1503 -> 1494;
1504 -> 1487;
1504 -> 1494;
1505 -> 1494;
1506 -> 1496;
1506 -> 1487;
1506 -> 1505;
1506 -> 1494;
1507 -> 1475;
1508 -> 1390;
1509 -> 1390;
1510 -> 1397;
1510 -> 1509;
1511 -> 1509;
1512 -> 1510;
1512 -> 1511;
1513 -> 1512;
1513 -> 1487;
1513 -> 1511;
1514 -> 0;
1514 -> 1511;
1515 -> 1511;
1516 -> 1514;
1516 -> 1515;
1517 -> 1513;
1517 -> 1390;
1518 -> 1517;
1519 -> 1518;
1520 -> 1518;
1521 -> 1518;
1522 -> 1518;
1523 -> 1518;
1524 -> 1518;
1524 -> 1523;
1525 -> 1524;
1525 -> 1518;
1525 -> 0;
1525 -> 1523;
1526 -> 1523;
1527 -> 1524;
1527 -> 1518;
1527 -> 1526;
1527 -> 1523;
1528 -> 1525;
1528 -> 1518;
1529 -> 1518;
1529 -> 1517;
1530 -> 1529;
1530 -> 1517;
1531 -> 0;
1531 -> 1517;
1532 -> 1400;
1532 -> 1487;
1532 -> 1531;
1532 -> 1517;
1533 -> 1393;
1533 -> 1517;
1534 -> 1394;
1534 -> 1517;
1535 -> 1395;
1535 -> 1517;
1536 -> 1396;
1536 -> 1517;
1537 -> 1397;
1537 -> 1517;
1538 -> 1392;
1538 -> 1517;
1539 -> 1398;
1539 -> 1517;
1540 -> 1504;
1540 -> 1517;
1541 -> 1517;
1542 -> 1530;
1542 -> 1541;
1543 -> 1532;
1543 -> 1541;
1544 -> 1533;
1544 -> 1541;
1545 -> 1534;
1545 -> 1541;
1546 -> 1535;
1546 -> 1541;
1547 -> 1536;
1547 -> 1541;
1548 -> 1537;
1548 -> 1541;
1549 -> 1538;
1549 -> 1541;
1550 -> 1539;
1550 -> 1541;
1551 -> 1540;
1551 -> 1541;
1552 -> 1400;
1552 -> 1541;
1553 -> 1541;
1554 -> 1543;
1554 -> 1553;
1554 -> 1541;
1555 -> 1543;
1555 -> 1541;
1556 -> 1543;
1556 -> 1541;
1557 -> 1541;
1558 -> 1131;
1558 -> 1518;
1558 -> 1557;
1559 -> 1557;
1560 -> 1557;
1561 -> 1557;
1562 -> 1557;
1563 -> 1557;
1564 -> 1558;
1564 -> 1563;
1565 -> 1564;
1565 -> 1558;
1565 -> 0;
1565 -> 1563;
1566 -> 1563;
1567 -> 1564;
1567 -> 1558;
1567 -> 1566;
1567 -> 1563;
1568 -> 1565;
1568 -> 1557;
1569 -> 1558;
1569 -> 1541;
1570 -> 1541;
1571 -> 1541;
1572 -> 1556;
1572 -> 1571;
1572 -> 1541;
1573 -> 1572;
1574 -> 1569;
1574 -> 1573;
1575 -> 0;
1575 -> 1574;
1575 -> 1573;
1576 -> 1574;
1576 -> 1558;
1576 -> 1575;
1576 -> 1573;
1577 -> 1573;
1578 -> 1577;
1578 -> 1574;
1578 -> 1573;
1579 -> 1572;
1580 -> 1569;
1580 -> 1572;
1581 -> 1556;
1581 -> 1572;
1582 -> 1544;
1582 -> 1572;
1583 -> 1545;
1583 -> 1572;
1584 -> 1547;
1584 -> 1572;
1585 -> 1548;
1585 -> 1572;
1586 -> 1549;
1586 -> 1572;
1587 -> 1550;
1587 -> 1572;
1588 -> 1551;
1588 -> 1572;
1589 -> 1546;
1589 -> 1572;
1590 -> 1572;
1591 -> 1580;
1591 -> 1590;
1592 -> 1581;
1592 -> 1590;
1593 -> 1582;
1593 -> 1590;
1594 -> 1583;
1594 -> 1590;
1595 -> 1584;
1595 -> 1590;
1596 -> 1585;
1596 -> 1590;
1597 -> 1586;
1597 -> 1590;
1598 -> 1587;
1598 -> 1590;
1599 -> 1588;
1599 -> 1590;
1600 -> 1589;
1600 -> 1590;
1601 -> 1596;
1601 -> 1590;
1602 -> 1593;
1602 -> 1595;
1603 -> 1592;
1603 -> 1602;
1603 -> 1555;
1603 -> 1595;
1604 -> 1603;
1604 -> 1590;
1605 -> 1572;
1606 -> 1542;
1606 -> 1572;
1607 -> 1569;
1607 -> 1572;
1608 -> 1546;
1608 -> 1572;
1609 -> 1599;
1609 -> 1572;
1610 -> 1606;
1610 -> 1607;
1610 -> 1608;
1610 -> 1609;
1610 -> 1576;
1610 -> 1578;
1610 -> 1603;
1610 -> 1572;
1611 -> 1572;
1612 -> 1610;
1612 -> 1611;
1613 -> 1610;
1613 -> 1611;
1614 -> 1611;
1615 -> 1612;
1615 -> 1614;
1616 -> 1615;
1616 -> 1611;
1617 -> 1611;
1618 -> 1613;
1618 -> 1617;
1619 -> 1618;
1619 -> 1611;
1620 -> 1616;
1620 -> 1619;
1620 -> 1611;
1621 -> 1556;
1621 -> 1572;
1622 -> 1572;
1623 -> 1621;
1623 -> 1610;
1623 -> 1622;
1623 -> 1572;
1624 -> 1572;
1625 -> 1569;
1625 -> 1624;
1626 -> 1625;
1626 -> 1610;
1626 -> 1624;
1627 -> 1626;
1627 -> 1572;
1628 -> 1572;
1629 -> 1542;
1629 -> 1628;
1630 -> 1629;
1630 -> 1610;
1630 -> 1628;
1631 -> 1630;
1631 -> 1572;
1632 -> 1572;
1633 -> 1546;
1633 -> 1632;
1633 -> 1572;
1634 -> 1572;
1635 -> 1548;
1635 -> 1634;
1636 -> 1635;
1636 -> 1610;
1636 -> 1634;
1637 -> 1636;
1637 -> 1572;
1638 -> 1556;
1638 -> 1572;
1639 -> 1546;
1639 -> 1572;
1640 -> 1552;
1640 -> 1610;
1640 -> 1572;
1641 -> 1570;
1641 -> 1572;
1642 -> 1638;
1642 -> 1639;
1642 -> 1640;
1642 -> 1641;
1642 -> 1610;
1642 -> 1572;
1643 -> 1572;
1644 -> 1642;
1644 -> 1643;
1644 -> 1572;
1645 -> 1642;
1645 -> 1541;
1646 -> 1541;
1647 -> 1569;
1647 -> 1646;
1648 -> 1646;
1649 -> 1647;
1649 -> 1648;
1650 -> 0;
1650 -> 1649;
1650 -> 1648;
1651 -> 1649;
1651 -> 1642;
1651 -> 1650;
1651 -> 1648;
1652 -> 1648;
1653 -> 1652;
1653 -> 1649;
1653 -> 1648;
1654 -> 1646;
1655 -> 1646;
1656 -> 1647;
1656 -> 1651;
1656 -> 1655;
1656 -> 1646;
1657 -> 1647;
1657 -> 1656;
1658 -> 1541;
1659 -> 1517;
1660 -> 1391;
1660 -> 1517;
1661 -> 1529;
1661 -> 1517;
1662 -> 1395;
1662 -> 1517;
1663 -> 1610;
1663 -> 1517;
1664 -> 1660;
1664 -> 1661;
1664 -> 1662;
1664 -> 1663;
1664 -> 1657;
1664 -> 1517;
1665 -> 1517;
1666 -> 1664;
1666 -> 1665;
1667 -> 1664;
1667 -> 1665;
1668 -> 1665;
1669 -> 1666;
1669 -> 1668;
1670 -> 1669;
1670 -> 1665;
1671 -> 1665;
1672 -> 1667;
1672 -> 1671;
1673 -> 1672;
1673 -> 1665;
1674 -> 1670;
1674 -> 1673;
1674 -> 1665;
1675 -> 1517;
1676 -> 1529;
1676 -> 1675;
1677 -> 1675;
1678 -> 1676;
1678 -> 1677;
1679 -> 0;
1679 -> 1678;
1679 -> 1677;
1680 -> 1678;
1680 -> 1664;
1680 -> 1679;
1680 -> 1677;
1681 -> 1677;
1682 -> 1681;
1682 -> 1678;
1682 -> 1677;
1683 -> 1675;
1684 -> 1675;
1685 -> 1517;
1686 -> 1380;
1687 -> 1359;
1688 -> 1318;
1689 -> 1318;
1690 -> 1286;
1690 -> 1689;
1691 -> 1690;
1691 -> 1680;
1691 -> 1689;
1692 -> 1691;
1692 -> 1318;
1693 -> 1291;
1693 -> 1267;
1694 -> 1286;
1694 -> 1267;
1695 -> 1287;
1695 -> 1267;
1696 -> 1288;
1696 -> 1267;
1697 -> 1289;
1697 -> 1267;
1698 -> 1290;
1698 -> 1267;
1699 -> 1292;
1699 -> 1267;
1700 -> 1664;
1700 -> 1267;
1701 -> 1267;
1702 -> 1693;
1702 -> 1701;
1703 -> 1694;
1703 -> 1701;
1704 -> 1695;
1704 -> 1701;
1705 -> 1696;
1705 -> 1701;
1706 -> 1697;
1706 -> 1701;
1707 -> 1698;
1707 -> 1701;
1708 -> 1699;
1708 -> 1701;
1709 -> 1700;
1709 -> 1701;
1710 -> 1314;
1710 -> 1701;
1711 -> 1702;
1711 -> 1701;
1712 -> 1703;
1712 -> 1701;
1713 -> 1704;
1713 -> 1701;
1714 -> 1705;
1714 -> 1701;
1715 -> 1706;
1715 -> 1701;
1716 -> 1707;
1716 -> 1701;
1717 -> 1708;
1717 -> 1701;
1718 -> 1709;
1718 -> 1701;
1719 -> 1701;
1720 -> 1711;
1720 -> 1719;
1721 -> 1712;
1721 -> 1719;
1722 -> 1713;
1722 -> 1719;
1723 -> 1714;
1723 -> 1719;
1724 -> 1715;
1724 -> 1719;
1725 -> 1716;
1725 -> 1719;
1726 -> 1717;
1726 -> 1719;
1727 -> 1718;
1727 -> 1719;
1728 -> 1710;
1728 -> 1719;
1729 -> 1719;
1730 -> 1720;
1730 -> 1729;
1731 -> 1730;
1731 -> 1680;
1731 -> 1729;
1732 -> 0;
1732 -> 1729;
1733 -> 1729;
1734 -> 1731;
1734 -> 1733;
1735 -> 1732;
1735 -> 1733;
1736 -> 1734;
1736 -> 1719;
1737 -> 1719;
1738 -> 1737;
1738 -> 1719;
1739 -> 1722;
1739 -> 1719;
1740 -> 1737;
1740 -> 1719;
1741 -> 1728;
1741 -> 1680;
1741 -> 1739;
1741 -> 1740;
1741 -> 1738;
1741 -> 1719;
1742 -> 1728;
1742 -> 1741;
1742 -> 1719;
1743 -> 1701;
1744 -> 1701;
1745 -> 1703;
1745 -> 1744;
1746 -> 1745;
1746 -> 1741;
1746 -> 1744;
1747 -> 1746;
1747 -> 1701;
1748 -> 1707;
1748 -> 0;
1748 -> 1701;
1749 -> 1701;
1750 -> 1747;
1750 -> 1748;
1750 -> 1701;
1751 -> 1710;
1751 -> 1741;
1751 -> 1750;
1752 -> 1702;
1752 -> 1750;
1753 -> 1703;
1753 -> 1750;
1754 -> 1704;
1754 -> 1750;
1755 -> 1705;
1755 -> 1750;
1756 -> 1706;
1756 -> 1750;
1757 -> 1707;
1757 -> 1750;
1758 -> 1708;
1758 -> 1750;
1759 -> 1727;
1759 -> 1750;
1760 -> 1750;
1761 -> 1751;
1761 -> 1760;
1762 -> 1752;
1762 -> 1760;
1763 -> 1753;
1763 -> 1760;
1764 -> 1754;
1764 -> 1760;
1765 -> 1755;
1765 -> 1760;
1766 -> 1756;
1766 -> 1760;
1767 -> 1757;
1767 -> 1760;
1768 -> 1758;
1768 -> 1760;
1769 -> 1759;
1769 -> 1760;
1770 -> 1762;
1770 -> 1741;
1770 -> 1760;
1771 -> 0;
1771 -> 1760;
1772 -> 1760;
1773 -> 1770;
1773 -> 1772;
1774 -> 1771;
1774 -> 1772;
1775 -> 1760;
1776 -> 1762;
1776 -> 1775;
1777 -> 1776;
1777 -> 1741;
1777 -> 1775;
1778 -> 0;
1778 -> 1775;
1779 -> 1775;
1780 -> 1777;
1780 -> 1779;
1781 -> 1778;
1781 -> 1779;
1782 -> 1780;
1782 -> 1760;
1783 -> 1761;
1783 -> 1760;
1784 -> 1750;
1785 -> 1267;
1786 -> 1279;
1786 -> 1741;
1786 -> 0;
1786 -> 1278;
1787 -> 1279;
1787 -> 1741;
1787 -> 1281;
1787 -> 1278;
1788 -> 1786;
1788 -> 1258;
1789 -> 1216;
1789 -> 1741;
1790 -> 1219;
1790 -> 1741;
1791 -> 1789;
1791 -> 1741;
1792 -> 1790;
1792 -> 1741;
1793 -> 1741;
1794 -> 1741;
1794 -> 1793;
1795 -> 1794;
1795 -> 1741;
1795 -> 0;
1795 -> 1793;
1796 -> 1793;
1797 -> 1794;
1797 -> 1741;
1797 -> 1796;
1797 -> 1793;
1798 -> 1795;
1798 -> 1741;
1799 -> 1741;
1800 -> 1741;
1800 -> 1799;
1801 -> 1800;
1801 -> 1741;
1801 -> 0;
1801 -> 1799;
1802 -> 1801;
1802 -> 1741;
1803 -> 1741;
1804 -> 1741;
1805 -> 1741;
1806 -> 1741;
1806 -> 1805;
1807 -> 1803;
1807 -> 1805;
1808 -> 1805;
1809 -> 1807;
1809 -> 1808;
1810 -> 1807;
1810 -> 1808;
1811 -> 1807;
1811 -> 1808;
1812 -> 1807;
1812 -> 1808;
1813 -> 1808;
1814 -> 1813;
1814 -> 1808;
1815 -> 1808;
1816 -> 1815;
1816 -> 1808;
1817 -> 1809;
1817 -> 1807;
1817 -> 1808;
1818 -> 1809;
1818 -> 1817;
1819 -> 1812;
1819 -> 1817;
1820 -> 1818;
1820 -> 1817;
1820 -> 1819;
1821 -> 1818;
1821 -> 1817;
1821 -> 1820;
1822 -> 1818;
1822 -> 1817;
1823 -> 1808;
1824 -> 1821;
1824 -> 1817;
1824 -> 1823;
1824 -> 1808;
1825 -> 1822;
1825 -> 1817;
1825 -> 1823;
1825 -> 1808;
1826 -> 1824;
1826 -> 1825;
1826 -> 1808;
1827 -> 1004;
1827 -> 1826;
1828 -> 1791;
1828 -> 1827;
1829 -> 1792;
1829 -> 1827;
1830 -> 1769;
1830 -> 1827;
1831 -> 1828;
1831 -> 1827;
1832 -> 1829;
1832 -> 1827;
1833 -> 1827;
1834 -> 1827;
1835 -> 1833;
1835 -> 1834;
1836 -> 1835;
1836 -> 0;
1836 -> 1834;
1837 -> 1835;
1837 -> 0;
1837 -> 1834;
1838 -> 1834;
1839 -> 0;
1839 -> 1834;
1840 -> 1835;
1840 -> 1839;
1840 -> 1834;
1841 -> 0;
1841 -> 1834;
1842 -> 1835;
1842 -> 1841;
1842 -> 1834;
1843 -> 1834;
1844 -> 0;
1844 -> 1834;
1845 -> 1835;
1845 -> 1844;
1845 -> 1834;
1846 -> 1845;
1846 -> 1834;
1847 -> 1834;
1848 -> 1846;
1848 -> 1847;
1849 -> 1847;
1850 -> 1848;
1850 -> 1849;
1850 -> 1847;
1851 -> 1827;
1852 -> 1831;
1852 -> 1851;
1852 -> 1827;
1853 -> 1827;
1854 -> 1831;
1854 -> 1827;
1855 -> 1832;
1855 -> 1827;
1856 -> 1830;
1856 -> 1827;
1857 -> 1827;
1858 -> 1853;
1858 -> 1857;
1859 -> 1853;
1859 -> 1857;
1860 -> 1853;
1860 -> 1857;
1861 -> 1854;
1861 -> 1857;
1862 -> 1853;
1862 -> 1857;
1863 -> 1853;
1863 -> 1857;
1864 -> 1855;
1864 -> 1857;
1865 -> 1856;
1865 -> 1857;
1866 -> 1859;
1866 -> 1857;
1867 -> 1860;
1867 -> 1857;
1868 -> 1862;
1868 -> 1857;
1869 -> 1863;
1869 -> 1857;
1870 -> 1857;
1871 -> 1866;
1871 -> 1870;
1872 -> 1867;
1872 -> 1870;
1873 -> 1868;
1873 -> 1870;
1874 -> 1869;
1874 -> 1870;
1875 -> 1873;
1875 -> 1871;
1875 -> 1870;
1876 -> 1871;
1876 -> 1827;
1876 -> 0;
1876 -> 1875;
1877 -> 1873;
1877 -> 0;
1877 -> 1876;
1878 -> 1876;
1879 -> 1872;
1879 -> 1877;
1880 -> 1879;
1880 -> 1857;
1881 -> 1880;
1882 -> 1861;
1882 -> 1880;
1883 -> 1862;
1883 -> 1880;
1884 -> 1864;
1884 -> 1880;
1885 -> 1865;
1885 -> 1880;
1886 -> 1880;
1887 -> 1881;
1887 -> 1886;
1888 -> 1882;
1888 -> 1886;
1889 -> 1883;
1889 -> 1886;
1890 -> 1881;
1890 -> 1886;
1891 -> 1884;
1891 -> 1886;
1892 -> 1885;
1892 -> 1886;
1893 -> 1881;
1893 -> 1886;
1894 -> 1863;
1894 -> 1886;
1895 -> 1886;
1896 -> 1886;
1897 -> 1887;
1897 -> 1827;
1897 -> 1879;
1897 -> 0;
1897 -> 1886;
1898 -> 1897;
1898 -> 1886;
1899 -> 1898;
1899 -> 1827;
1899 -> 1879;
1899 -> 1886;
1900 -> 1894;
1900 -> 1827;
1900 -> 1899;
1900 -> 1879;
1900 -> 1886;
1901 -> 1898;
1901 -> 1900;
1902 -> 1888;
1902 -> 1900;
1903 -> 1891;
1903 -> 1900;
1904 -> 1889;
1904 -> 1900;
1905 -> 1896;
1905 -> 1900;
1906 -> 1900;
1907 -> 1901;
1907 -> 1906;
1908 -> 1902;
1908 -> 1906;
1909 -> 1903;
1909 -> 1906;
1910 -> 1904;
1910 -> 1906;
1911 -> 1905;
1911 -> 1906;
1912 -> 1907;
1912 -> 1827;
1912 -> 1900;
1912 -> 1879;
1912 -> 1906;
1913 -> 1912;
1914 -> 1908;
1914 -> 1913;
1914 -> 1912;
1915 -> 1910;
1915 -> 0;
1915 -> 1912;
1916 -> 1914;
1916 -> 1915;
1916 -> 1912;
1917 -> 1907;
1917 -> 1916;
1918 -> 1917;
1918 -> 1827;
1918 -> 1900;
1918 -> 1879;
1918 -> 1916;
1919 -> 1917;
1919 -> 1916;
1920 -> 1917;
1920 -> 1827;
1920 -> 1900;
1920 -> 1879;
1920 -> 1908;
1920 -> 1916;
1921 -> 1910;
1921 -> 1916;
1922 -> 1916;
1923 -> 1921;
1923 -> 1922;
1924 -> 1920;
1924 -> 1923;
1924 -> 1916;
1925 -> 1906;
1926 -> 1906;
1927 -> 1926;
1927 -> 1900;
1928 -> 1927;
1929 -> 1928;
1929 -> 1927;
1930 -> 1889;
1930 -> 0;
1930 -> 1929;
1931 -> 1929;
1932 -> 1889;
1932 -> 0;
1932 -> 1930;
1933 -> 1930;
1934 -> 1932;
1935 -> 1934;
1935 -> 1932;
1936 -> 1935;
1937 -> 1936;
1937 -> 1935;
1938 -> 1898;
1938 -> 1935;
1939 -> 1889;
1939 -> 1935;
1940 -> 1890;
1940 -> 1935;
1941 -> 1935;
1942 -> 1939;
1942 -> 1941;
1943 -> 1940;
1943 -> 1941;
1944 -> 1942;
1944 -> 0;
1944 -> 1941;
1945 -> 1941;
1946 -> 1944;
1946 -> 1941;
1947 -> 1943;
1947 -> 1946;
1948 -> 1895;
1948 -> 1935;
1949 -> 1892;
1949 -> 1935;
1950 -> 1893;
1950 -> 1935;
1951 -> 1935;
1952 -> 1938;
1952 -> 1951;
1953 -> 1947;
1953 -> 1951;
1954 -> 1948;
1954 -> 1951;
1955 -> 1949;
1955 -> 1951;
1956 -> 1950;
1956 -> 1951;
1957 -> 1894;
1957 -> 1951;
1958 -> 1957;
1958 -> 1900;
1958 -> 1951;
1959 -> 0;
1959 -> 1951;
1960 -> 1951;
1961 -> 1958;
1961 -> 1960;
1962 -> 1959;
1962 -> 1960;
1963 -> 1952;
1963 -> 1951;
1964 -> 1953;
1964 -> 1951;
1965 -> 1954;
1965 -> 1951;
1966 -> 1955;
1966 -> 1951;
1967 -> 1956;
1967 -> 1951;
1968 -> 1951;
1969 -> 1963;
1969 -> 1968;
1970 -> 1964;
1970 -> 1968;
1971 -> 1965;
1971 -> 1968;
1972 -> 1966;
1972 -> 1968;
1973 -> 1967;
1973 -> 1968;
1974 -> 1957;
1974 -> 1968;
1975 -> 1969;
1975 -> 1968;
1976 -> 1970;
1976 -> 1968;
1977 -> 1971;
1977 -> 1968;
1978 -> 1972;
1978 -> 1968;
1979 -> 1973;
1979 -> 1968;
1980 -> 1968;
1981 -> 1975;
1981 -> 1980;
1982 -> 1976;
1982 -> 1980;
1983 -> 1977;
1983 -> 1980;
1984 -> 1978;
1984 -> 1980;
1985 -> 1979;
1985 -> 1980;
1986 -> 1974;
1986 -> 1900;
1986 -> 1980;
1987 -> 1986;
1987 -> 1900;
1987 -> 1980;
1988 -> 1980;
1989 -> 1987;
1989 -> 1988;
1989 -> 1980;
1990 -> 1981;
1990 -> 1989;
1991 -> 1987;
1991 -> 1989;
1992 -> 1982;
1992 -> 1989;
1993 -> 1983;
1993 -> 1989;
1994 -> 1984;
1994 -> 1989;
1995 -> 1989;
1996 -> 1989;
1997 -> 1990;
1997 -> 1996;
1998 -> 1991;
1998 -> 1996;
1999 -> 1992;
1999 -> 1996;
2000 -> 1993;
2000 -> 1996;
2001 -> 1994;
2001 -> 1996;
2002 -> 1995;
2002 -> 1996;
2003 -> 1986;
2003 -> 1996;
2004 -> 2003;
2004 -> 1900;
2004 -> 1996;
2005 -> 0;
2005 -> 1996;
2006 -> 1996;
2007 -> 2004;
2007 -> 2006;
2008 -> 2005;
2008 -> 2006;
2009 -> 1997;
2009 -> 1996;
2010 -> 1998;
2010 -> 1996;
2011 -> 1999;
2011 -> 1996;
2012 -> 2000;
2012 -> 1996;
2013 -> 2001;
2013 -> 1996;
2014 -> 2002;
2014 -> 1996;
2015 -> 1996;
2016 -> 2009;
2016 -> 2015;
2017 -> 2010;
2017 -> 2015;
2018 -> 2011;
2018 -> 2015;
2019 -> 2012;
2019 -> 2015;
2020 -> 2013;
2020 -> 2015;
2021 -> 2014;
2021 -> 2015;
2022 -> 2016;
2022 -> 2015;
2023 -> 2017;
2023 -> 2015;
2024 -> 2018;
2024 -> 2015;
2025 -> 2019;
2025 -> 2015;
2026 -> 2017;
2026 -> 1900;
2026 -> 2015;
2027 -> 2020;
2027 -> 2015;
2028 -> 2021;
2028 -> 2015;
2029 -> 2015;
2030 -> 2022;
2030 -> 2029;
2031 -> 2023;
2031 -> 2029;
2032 -> 2024;
2032 -> 2029;
2033 -> 2025;
2033 -> 2029;
2034 -> 2026;
2034 -> 2029;
2035 -> 2027;
2035 -> 2029;
2036 -> 2028;
2036 -> 2029;
2037 -> 2029;
2038 -> 2030;
2038 -> 2037;
2038 -> 2029;
2039 -> 2029;
2040 -> 2031;
2040 -> 2039;
2040 -> 2029;
2041 -> 2031;
2041 -> 1900;
2041 -> 2029;
2042 -> 2031;
2042 -> 2029;
2043 -> 2029;
2044 -> 2030;
2044 -> 1827;
2044 -> 1900;
2044 -> 1879;
2044 -> 2029;
2045 -> 2030;
2045 -> 2044;
2046 -> 2031;
2046 -> 2044;
2047 -> 2035;
2047 -> 2044;
2048 -> 2036;
2048 -> 2044;
2049 -> 2044;
2050 -> 2045;
2050 -> 2049;
2051 -> 2046;
2051 -> 2049;
2052 -> 2047;
2052 -> 2049;
2053 -> 2048;
2053 -> 2049;
2054 -> 2051;
2054 -> 2049;
2055 -> 2049;
2056 -> 2050;
2056 -> 2055;
2056 -> 2049;
2057 -> 2051;
2057 -> 1900;
2057 -> 2049;
2058 -> 2049;
2059 -> 2050;
2059 -> 1827;
2059 -> 1900;
2059 -> 1879;
2059 -> 2049;
2060 -> 2050;
2060 -> 1827;
2060 -> 1900;
2060 -> 1879;
2060 -> 2049;
2061 -> 2049;
2062 -> 2060;
2062 -> 2061;
2062 -> 2049;
2063 -> 2062;
2063 -> 2049;
2064 -> 2051;
2064 -> 2063;
2065 -> 2063;
2066 -> 2063;
2066 -> 2065;
2067 -> 2063;
2067 -> 2065;
2068 -> 2064;
2068 -> 2065;
2069 -> 2068;
2069 -> 2065;
2070 -> 2065;
2071 -> 2066;
2071 -> 2070;
2071 -> 2065;
2072 -> 2067;
2072 -> 2065;
2073 -> 2068;
2073 -> 2072;
2074 -> 2072;
2075 -> 2073;
2075 -> 2074;
2075 -> 2072;
2076 -> 2075;
2076 -> 2072;
2077 -> 2073;
2077 -> 1900;
2077 -> 2076;
2078 -> 2077;
2078 -> 2066;
2078 -> 2072;
2079 -> 1937;
2079 -> 2078;
2079 -> 1935;
2080 -> 2079;
2081 -> 2080;
2081 -> 2079;
2082 -> 1898;
2082 -> 2079;
2083 -> 1889;
2083 -> 0;
2083 -> 2081;
2084 -> 2081;
2085 -> 1889;
2085 -> 0;
2085 -> 2083;
2086 -> 2083;
2087 -> 1889;
2087 -> 0;
2087 -> 2085;
2088 -> 2085;
2089 -> 1889;
2089 -> 0;
2089 -> 2087;
2090 -> 2087;
2091 -> 1898;
2091 -> 2089;
2092 -> 2089;
2093 -> 2091;
2093 -> 2092;
2094 -> 0;
2094 -> 2092;
2095 -> 2093;
2095 -> 2092;
2096 -> 2092;
2097 -> 2092;
2098 -> 2094;
2098 -> 2097;
2099 -> 2095;
2099 -> 2097;
2100 -> 2096;
2100 -> 2097;
2101 -> 2096;
2101 -> 2097;
2102 -> 2098;
2102 -> 2101;
2102 -> 2097;
2103 -> 2099;
2103 -> 2101;
2103 -> 2097;
2104 -> 2100;
2104 -> 2101;
2104 -> 2097;
2105 -> 2096;
2105 -> 2089;
2106 -> 2105;
2106 -> 1880;
2107 -> 1880;
2108 -> 2106;
2108 -> 2107;
2109 -> 1858;
2109 -> 2107;
2110 -> 2107;
2111 -> 2109;
2111 -> 2110;
2112 -> 2111;
2112 -> 2082;
2112 -> 2110;
2113 -> 2112;
2113 -> 2107;
2114 -> 2113;
2114 -> 2108;
2114 -> 2102;
2114 -> 2107;
2115 -> 2114;
2116 -> 2115;
2116 -> 2114;
2117 -> 2108;
2117 -> 2116;
2118 -> 2116;
2119 -> 2117;
2119 -> 2118;
2120 -> 2109;
2120 -> 2118;
2121 -> 2119;
2121 -> 2102;
2121 -> 2120;
2121 -> 2118;
2122 -> 2120;
2122 -> 2082;
2122 -> 2121;
2122 -> 2118;
2123 -> 2119;
2123 -> 2103;
2123 -> 2118;
2124 -> 2120;
2124 -> 2122;
2124 -> 2123;
2124 -> 2118;
2125 -> 2119;
2125 -> 2104;
2125 -> 2120;
2125 -> 2118;
2126 -> 2116;
2127 -> 1880;
2128 -> 1880;
2128 -> 2124;
2128 -> 2125;
2128 -> 1857;
2129 -> 1827;
2130 -> 2129;
2130 -> 2124;
2131 -> 2130;
2131 -> 1827;
2132 -> 2131;
2133 -> 1791;
2133 -> 2132;
2133 -> 2131;
2134 -> 1741;
2134 -> 2131;
2135 -> 2131;
2136 -> 1741;
2136 -> 2135;
2137 -> 2136;
2137 -> 2124;
2137 -> 2135;
2138 -> 0;
2138 -> 2135;
2139 -> 2135;
2140 -> 2137;
2140 -> 2139;
2141 -> 2138;
2141 -> 2139;
2142 -> 2140;
2142 -> 2131;
2143 -> 2131;
2144 -> 2134;
2144 -> 2143;
2145 -> 2142;
2145 -> 2143;
2146 -> 1827;
2146 -> 2143;
2147 -> 2143;
2148 -> 2147;
2148 -> 2143;
2149 -> 2144;
2149 -> 2143;
2150 -> 2147;
2150 -> 2143;
2151 -> 2146;
2151 -> 2124;
2151 -> 2149;
2151 -> 2150;
2151 -> 2125;
2151 -> 2148;
2151 -> 2143;
2152 -> 2143;
2153 -> 2152;
2153 -> 2131;
2154 -> 2133;
2154 -> 2153;
2154 -> 2131;
2155 -> 2131;
2156 -> 1741;
2157 -> 1214;
2157 -> 2156;
2158 -> 2157;
2158 -> 2151;
2158 -> 0;
2158 -> 2156;
2159 -> 2158;
2159 -> 1741;
2160 -> 1741;
2160 -> 2159;
2161 -> 1218;
2161 -> 0;
2161 -> 1741;
2162 -> 1741;
2163 -> 2160;
2163 -> 1213;
2164 -> 1185;
2165 -> 1101;
2165 -> 1099;
2166 -> 1100;
2166 -> 1099;
2167 -> 2052;
2167 -> 1099;
2168 -> 2165;
2168 -> 2166;
2168 -> 2167;
2168 -> 2151;
2168 -> 1099;
2169 -> 1099;
2170 -> 1099;
2171 -> 1104;
2171 -> 2170;
2171 -> 1099;
2172 -> 1156;
2172 -> 1099;
2173 -> 1099;
2174 -> 2172;
2174 -> 2173;
2175 -> 2173;
2176 -> 2174;
2176 -> 2175;
2177 -> 2175;
2178 -> 2176;
2178 -> 2177;
2179 -> 2178;
2179 -> 2168;
2179 -> 2177;
2180 -> 2179;
2180 -> 2173;
2181 -> 2173;
2182 -> 2174;
2182 -> 2181;
2183 -> 2182;
2183 -> 2168;
2183 -> 2181;
2184 -> 2183;
2184 -> 2173;
2185 -> 2184;
2185 -> 2168;
2186 -> 2185;
2187 -> 2169;
2187 -> 1099;
2188 -> 2187;
2189 -> 1156;
2189 -> 2187;
2190 -> 1106;
2190 -> 2187;
2191 -> 2187;
2192 -> 1100;
2192 -> 2187;
2193 -> 1101;
2193 -> 2187;
2194 -> 1103;
2194 -> 2187;
2195 -> 2188;
2195 -> 2187;
2196 -> 1104;
2196 -> 2187;
2197 -> 1163;
2197 -> 2187;
2198 -> 2187;
2199 -> 2189;
2199 -> 2198;
2200 -> 2190;
2200 -> 2198;
2201 -> 2191;
2201 -> 2198;
2202 -> 2192;
2202 -> 2198;
2203 -> 2193;
2203 -> 2198;
2204 -> 2194;
2204 -> 2198;
2205 -> 2195;
2205 -> 2198;
2206 -> 2196;
2206 -> 2198;
2207 -> 2197;
2207 -> 2198;
2208 -> 1105;
2208 -> 2198;
2209 -> 2199;
2209 -> 2198;
2210 -> 2200;
2210 -> 2198;
2211 -> 2201;
2211 -> 2198;
2212 -> 2202;
2212 -> 2198;
2213 -> 2203;
2213 -> 2198;
2214 -> 2204;
2214 -> 2198;
2215 -> 2205;
2215 -> 2198;
2216 -> 2206;
2216 -> 2198;
2217 -> 2207;
2217 -> 2198;
2218 -> 2198;
2219 -> 2209;
2219 -> 2218;
2220 -> 2210;
2220 -> 2218;
2221 -> 2211;
2221 -> 2218;
2222 -> 2212;
2222 -> 2218;
2223 -> 2213;
2223 -> 2218;
2224 -> 2214;
2224 -> 2218;
2225 -> 2215;
2225 -> 2218;
2226 -> 2216;
2226 -> 2218;
2227 -> 2217;
2227 -> 2218;
2228 -> 2208;
2228 -> 2218;
2229 -> 2218;
2230 -> 2222;
2230 -> 2229;
2230 -> 2218;
2231 -> 2218;
2232 -> 2223;
2232 -> 2231;
2232 -> 2218;
2233 -> 2218;
2234 -> 2219;
2234 -> 2233;
2235 -> 2234;
2235 -> 2168;
2235 -> 2233;
2236 -> 2235;
2236 -> 2218;
2237 -> 2218;
2238 -> 2218;
2239 -> 2219;
2239 -> 2238;
2240 -> 2238;
2241 -> 2239;
2241 -> 2240;
2242 -> 2241;
2242 -> 2168;
2242 -> 2240;
2243 -> 2242;
2243 -> 2218;
2244 -> 2243;
2245 -> 2236;
2245 -> 2168;
2245 -> 2244;
2245 -> 2243;
2246 -> 2245;
2247 -> 2246;
2247 -> 2245;
2248 -> 2245;
2249 -> 2247;
2249 -> 2248;
2249 -> 2245;
2250 -> 2247;
2250 -> 2246;
2250 -> 0;
2250 -> 2245;
2251 -> 2246;
2251 -> 0;
2251 -> 2249;
2252 -> 2251;
2252 -> 2228;
2252 -> 2246;
2252 -> 2249;
2253 -> 2224;
2253 -> 2249;
2254 -> 2246;
2254 -> 2253;
2255 -> 2223;
2255 -> 2253;
2256 -> 2222;
2256 -> 2253;
2257 -> 2253;
2258 -> 2254;
2258 -> 2257;
2259 -> 2255;
2259 -> 2257;
2260 -> 2256;
2260 -> 2257;
2261 -> 2258;
2261 -> 2246;
2261 -> 2257;
2262 -> 2257;
2263 -> 2261;
2263 -> 2262;
2263 -> 2257;
2264 -> 2246;
2264 -> 2245;
2265 -> 2264;
2265 -> 2261;
2265 -> 0;
2265 -> 2198;
2266 -> 2202;
2266 -> 2265;
2267 -> 2265;
2268 -> 2264;
2268 -> 2265;
2269 -> 2203;
2269 -> 2265;
2270 -> 2265;
2271 -> 2266;
2271 -> 2270;
2272 -> 2267;
2272 -> 2270;
2273 -> 2268;
2273 -> 2270;
2274 -> 2269;
2274 -> 2270;
2275 -> 2208;
2275 -> 2270;
2276 -> 2273;
2276 -> 2261;
2276 -> 2270;
2277 -> 2270;
2278 -> 2264;
2278 -> 2198;
2279 -> 2278;
2279 -> 2261;
2279 -> 0;
2279 -> 2187;
2280 -> 1099;
2281 -> 1156;
2281 -> 2280;
2282 -> 2280;
2283 -> 2281;
2283 -> 2282;
2284 -> 0;
2284 -> 2283;
2284 -> 2282;
2285 -> 2283;
2285 -> 2261;
2285 -> 2284;
2285 -> 2282;
2286 -> 2282;
2287 -> 2286;
2287 -> 2283;
2287 -> 2282;
2288 -> 2280;
2289 -> 2280;
2290 -> 1099;
2291 -> 1100;
2291 -> 2285;
2291 -> 1099;
2292 -> 1099;
2293 -> 2291;
2293 -> 2292;
2294 -> 1105;
2294 -> 2292;
2295 -> 2293;
2295 -> 2285;
2295 -> 2292;
2296 -> 2293;
2296 -> 2285;
2296 -> 2292;
2297 -> 2292;
2298 -> 2296;
2298 -> 2297;
2299 -> 2296;
2299 -> 2297;
2300 -> 2294;
2300 -> 2297;
2301 -> 2298;
2301 -> 2297;
2302 -> 2299;
2302 -> 2297;
2303 -> 2301;
2303 -> 2302;
2303 -> 2295;
2303 -> 2297;
2304 -> 2303;
2304 -> 2297;
2305 -> 2300;
2305 -> 2303;
2305 -> 2304;
2306 -> 0;
2306 -> 2304;
2307 -> 2304;
2308 -> 2300;
2308 -> 2307;
2309 -> 2308;
2309 -> 2305;
2309 -> 2307;
2310 -> 2307;
2311 -> 2308;
2311 -> 2309;
2311 -> 2310;
2312 -> 2311;
2312 -> 2310;
2313 -> 2310;
2314 -> 2312;
2314 -> 2313;
2315 -> 2314;
2315 -> 2311;
2315 -> 2313;
2316 -> 2315;
2317 -> 2316;
2317 -> 2310;
2318 -> 2317;
2318 -> 2310;
2319 -> 2278;
2319 -> 1099;
2320 -> 1099;
2321 -> 2318;
2321 -> 2320;
2322 -> 2319;
2322 -> 2320;
2323 -> 2322;
2323 -> 2320;
2324 -> 2322;
2324 -> 2320;
2325 -> 2324;
2325 -> 2320;
2326 -> 2325;
2326 -> 2320;
2327 -> 2321;
2327 -> 2326;
2328 -> 2326;
2329 -> 2327;
2329 -> 2328;
2330 -> 2326;
2330 -> 2328;
2331 -> 2329;
2331 -> 2327;
2331 -> 2328;
2332 -> 2329;
2332 -> 2330;
2332 -> 2328;
2333 -> 2328;
2334 -> 2333;
2334 -> 2330;
2334 -> 2328;
2335 -> 2328;
2336 -> 2335;
2336 -> 2330;
2336 -> 2328;
2337 -> 1073;
2338 -> 2326;
2338 -> 2337;
2339 -> 2338;
2339 -> 2332;
2339 -> 2327;
2339 -> 2337;
2340 -> 2339;
2340 -> 1073;
2341 -> 2340;
2342 -> 2341;
2342 -> 2340;
2343 -> 2342;
2344 -> 2326;
2344 -> 2343;
2345 -> 2344;
2345 -> 2332;
2345 -> 2343;
2346 -> 2345;
2346 -> 2342;
2347 -> 1078;
2347 -> 2342;
2348 -> 1074;
2348 -> 2342;
2349 -> 1075;
2349 -> 2342;
2350 -> 2342;
2351 -> 2346;
2351 -> 2350;
2352 -> 2346;
2352 -> 2350;
2353 -> 2346;
2353 -> 2350;
2354 -> 2346;
2354 -> 2350;
2355 -> 2346;
2355 -> 2350;
2356 -> 2351;
2356 -> 2350;
2357 -> 2352;
2357 -> 2350;
2358 -> 2353;
2358 -> 2350;
2359 -> 2354;
2359 -> 2350;
2360 -> 2350;
2361 -> 2356;
2361 -> 2360;
2362 -> 2357;
2362 -> 2360;
2363 -> 2358;
2363 -> 2360;
2364 -> 2359;
2364 -> 2360;
2365 -> 2355;
2365 -> 2360;
2366 -> 2362;
2366 -> 2346;
2366 -> 2360;
2367 -> 2361;
2367 -> 2366;
2368 -> 2362;
2368 -> 2366;
2369 -> 2363;
2369 -> 2366;
2370 -> 2364;
2370 -> 2366;
2371 -> 2366;
2372 -> 2365;
2372 -> 2371;
2373 -> 2372;
2373 -> 2346;
2373 -> 2371;
2374 -> 2371;
2375 -> 2372;
2375 -> 2373;
2375 -> 2374;
2376 -> 2375;
2376 -> 2373;
2377 -> 2376;
2377 -> 2371;
2378 -> 2377;
2378 -> 2366;
2379 -> 2366;
2380 -> 2365;
2380 -> 2379;
2381 -> 2379;
2382 -> 2380;
2382 -> 2381;
2383 -> 2382;
2383 -> 2373;
2383 -> 2381;
2384 -> 2383;
2384 -> 2373;
2384 -> 2376;
2384 -> 2381;
2385 -> 2381;
2386 -> 2384;
2386 -> 2381;
2387 -> 2386;
2387 -> 2379;
2388 -> 2387;
2388 -> 2379;
2389 -> 2387;
2389 -> 2384;
2389 -> 0;
2389 -> 2379;
2390 -> 2387;
2390 -> 2379;
2391 -> 2387;
2391 -> 2379;
2392 -> 2391;
2392 -> 2366;
2393 -> 2365;
2393 -> 2384;
2393 -> 2366;
2394 -> 2366;
2395 -> 2367;
2395 -> 2394;
2396 -> 2368;
2396 -> 2394;
2397 -> 2369;
2397 -> 2394;
2398 -> 2370;
2398 -> 2394;
2399 -> 2378;
2399 -> 2394;
2400 -> 2392;
2400 -> 2394;
2401 -> 2393;
2401 -> 2394;
2402 -> 2396;
2402 -> 2394;
2403 -> 2402;
2403 -> 2384;
2403 -> 2394;
2404 -> 2396;
2404 -> 2403;
2404 -> 0;
2404 -> 2394;
2405 -> 2396;
2405 -> 2403;
2405 -> 0;
2405 -> 2394;
2406 -> 2396;
2406 -> 2394;
2407 -> 2400;
2407 -> 2394;
2408 -> 2406;
2408 -> 2407;
2408 -> 2403;
2408 -> 2394;
2409 -> 2398;
2409 -> 2394;
2410 -> 2409;
2410 -> 2394;
2411 -> 2395;
2411 -> 2394;
2412 -> 2408;
2412 -> 2394;
2413 -> 2397;
2413 -> 2394;
2414 -> 2399;
2414 -> 2394;
2415 -> 2401;
2415 -> 2394;
2416 -> 2394;
2417 -> 2411;
2417 -> 2416;
2418 -> 2412;
2418 -> 2416;
2419 -> 2413;
2419 -> 2416;
2420 -> 2414;
2420 -> 2416;
2421 -> 2415;
2421 -> 2416;
2422 -> 2416;
2423 -> 2417;
2423 -> 2422;
2423 -> 2416;
2424 -> 2418;
2424 -> 2416;
2425 -> 2420;
2425 -> 2416;
2426 -> 2416;
2427 -> 2424;
2427 -> 2425;
2427 -> 2426;
2427 -> 2408;
2427 -> 2416;
2428 -> 2416;
2429 -> 2427;
2429 -> 2416;
2430 -> 2416;
2431 -> 2428;
2431 -> 2430;
2431 -> 2416;
2432 -> 2427;
2432 -> 2416;
2433 -> 2432;
2433 -> 2394;
2434 -> 2409;
2434 -> 2433;
2435 -> 2366;
2436 -> 2350;
2437 -> 2326;
2437 -> 2340;
2438 -> 2437;
2438 -> 642;
2439 -> 1065;
2439 -> 642;
2440 -> 1064;
2440 -> 642;
2441 -> 1066;
2441 -> 642;
2442 -> 642;
2443 -> 2438;
2443 -> 2442;
2444 -> 2439;
2444 -> 2442;
2445 -> 2440;
2445 -> 2442;
2446 -> 2441;
2446 -> 2442;
2447 -> 1068;
2447 -> 2442;
2448 -> 2442;
2449 -> 2443;
2449 -> 2448;
2450 -> 2449;
2450 -> 2334;
2450 -> 2448;
2451 -> 2450;
2451 -> 0;
2451 -> 2448;
2452 -> 2451;
2452 -> 2442;
2453 -> 2443;
2453 -> 2442;
2454 -> 642;
2455 -> 2453;
2455 -> 2454;
2456 -> 2455;
2456 -> 2332;
2456 -> 2454;
2457 -> 641;
2457 -> 2456;
2457 -> 2427;
2457 -> 2327;
2457 -> 599;
2458 -> 641;
2458 -> 642;
2459 -> 641;
2459 -> 642;
2460 -> 641;
2460 -> 642;
2461 -> 641;
2461 -> 642;
2462 -> 2458;
2462 -> 2457;
2462 -> 642;
2463 -> 2459;
2463 -> 642;
2464 -> 2460;
2464 -> 642;
2465 -> 2461;
2465 -> 642;
2466 -> 642;
2467 -> 2462;
2467 -> 2466;
2468 -> 2463;
2468 -> 2466;
2469 -> 2464;
2469 -> 2466;
2470 -> 2465;
2470 -> 2466;
2471 -> 2468;
2471 -> 2466;
2472 -> 2467;
2472 -> 2457;
2472 -> 2466;
2473 -> 2471;
2473 -> 2472;
2473 -> 2457;
2473 -> 2466;
2474 -> 2469;
2474 -> 2473;
2475 -> 2473;
2476 -> 2470;
2476 -> 2473;
2477 -> 2474;
2477 -> 2475;
2477 -> 2476;
2477 -> 2473;
2478 -> 2473;
2479 -> 641;
2479 -> 2478;
2479 -> 2477;
2479 -> 599;
2480 -> 641;
2480 -> 642;
2481 -> 641;
2481 -> 642;
2482 -> 2480;
2482 -> 642;
2483 -> 2480;
2483 -> 2479;
2483 -> 642;
2484 -> 642;
2485 -> 2480;
2485 -> 2479;
2485 -> 642;
2486 -> 2480;
2486 -> 2479;
2486 -> 642;
2487 -> 2486;
2487 -> 642;
2488 -> 642;
2489 -> 2484;
2489 -> 2488;
2489 -> 599;
2490 -> 2484;
2490 -> 642;
2491 -> 2484;
2491 -> 642;
2492 -> 2490;
2492 -> 642;
2493 -> 2490;
2493 -> 642;
2494 -> 2490;
2494 -> 642;
2495 -> 2490;
2495 -> 642;
2496 -> 2495;
2496 -> 642;
2497 -> 2495;
2497 -> 2496;
2498 -> 601;
2498 -> 640;
2498 -> 1034;
2498 -> 1043;
2498 -> 2456;
2498 -> 2478;
2498 -> 2488;
2498 -> 2479;
2498 -> 599;
2499 -> 599;
2500 -> 2498;
2500 -> 2499;
2501 -> 602;
2501 -> 2499;
2502 -> 2499;
2503 -> 2500;
2503 -> 2501;
2503 -> 2498;
2504 -> 2503;
2504 -> 2500;
2505 -> 2503;
2505 -> 2500;
2506 -> 2504;
2506 -> 2500;
2507 -> 2504;
2507 -> 2503;
2507 -> 2500;
2508 -> 2500;
2509 -> 2500;
2510 -> 2506;
2510 -> 2509;
2511 -> 2507;
2511 -> 2509;
2512 -> 2508;
2512 -> 2509;
2513 -> 2505;
2513 -> 2509;
2514 -> 2511;
2514 -> 2509;
2515 -> 2509;
2516 -> 2515;
2516 -> 2500;
2517 -> 2500;
2518 -> 2507;
2518 -> 2517;
2519 -> 2507;
2519 -> 2517;
2520 -> 2507;
2520 -> 2517;
2521 -> 2507;
2521 -> 2517;
2522 -> 2521;
2522 -> 2517;
2523 -> 2521;
2523 -> 2517;
2524 -> 2521;
2524 -> 2517;
2525 -> 2517;
2526 -> 2518;
2526 -> 2525;
2526 -> 2517;
2527 -> 2507;
2527 -> 2517;
2528 -> 2507;
2528 -> 2517;
2529 -> 2507;
2529 -> 2517;
2530 -> 2507;
2530 -> 2517;
2531 -> 2517;
2532 -> 2527;
2532 -> 2531;
2532 -> 2517;
2533 -> 2529;
2533 -> 2517;
2534 -> 2529;
2534 -> 2521;
2534 -> 2517;
2535 -> 2529;
2535 -> 2534;
2536 -> 2534;
2537 -> 2517;
2538 -> 2528;
2538 -> 2537;
2538 -> 2517;
2539 -> 2529;
2539 -> 2537;
2539 -> 2517;
2540 -> 2535;
2540 -> 2517;
2541 -> 2535;
2541 -> 2517;
2542 -> 2541;
2542 -> 2535;
2542 -> 2517;
2543 -> 2540;
2543 -> 2517;
2544 -> 2542;
2544 -> 2543;
2544 -> 2535;
2544 -> 2517;
2545 -> 2517;
2546 -> 2541;
2546 -> 2544;
2546 -> 2517;
2547 -> 2540;
2547 -> 2517;
2548 -> 2541;
2548 -> 2546;
2549 -> 2540;
2549 -> 2546;
2550 -> 865;
2550 -> 2548;
2551 -> 2540;
2551 -> 2517;
2552 -> 2550;
2552 -> 2517;
2553 -> 2517;
2554 -> 2551;
2554 -> 2553;
2555 -> 2552;
2555 -> 2553;
2556 -> 2555;
2556 -> 2553;
2557 -> 2553;
2558 -> 2553;
2558 -> 2517;
2559 -> 2517;
2560 -> 2517;
2561 -> 2541;
2561 -> 2560;
2562 -> 2561;
2562 -> 2548;
2562 -> 2560;
2563 -> 2562;
2563 -> 2517;
2564 -> 2558;
2564 -> 2517;
2565 -> 2559;
2565 -> 2517;
2566 -> 2564;
2566 -> 2565;
2566 -> 2563;
2566 -> 2554;
2566 -> 2555;
2566 -> 2548;
2566 -> 2517;
2567 -> 2517;
2568 -> 2540;
2568 -> 2566;
2569 -> 2566;
2570 -> 2568;
2570 -> 2569;
2570 -> 2566;
2571 -> 2568;
2571 -> 2570;
2572 -> 0;
2572 -> 2570;
2573 -> 2570;
2574 -> 2571;
2574 -> 2573;
2575 -> 2572;
2575 -> 2573;
2576 -> 2575;
2576 -> 2573;
2577 -> 2573;
2578 -> 2574;
2579 -> 2578;
2579 -> 2574;
2580 -> 2574;
2581 -> 2574;
2581 -> 2580;
2582 -> 2581;
2582 -> 2574;
2582 -> 2580;
2583 -> 2582;
2583 -> 2574;
2584 -> 2574;
2585 -> 2574;
2586 -> 2574;
2587 -> 2574;
2588 -> 2574;
2589 -> 2574;
2590 -> 2575;
2591 -> 2575;
2592 -> 2575;
2593 -> 2575;
2594 -> 2566;
2595 -> 2550;
2595 -> 2574;
2595 -> 2566;
2596 -> 2550;
2596 -> 0;
2596 -> 2566;
2597 -> 2540;
2597 -> 2574;
2597 -> 2566;
2598 -> 2566;
2599 -> 2597;
2599 -> 2598;
2600 -> 2575;
2600 -> 2598;
2601 -> 2566;
2602 -> 2601;
2602 -> 2599;
2603 -> 2602;
2603 -> 2566;
2604 -> 2558;
2604 -> 2566;
2605 -> 2599;
2605 -> 2566;
2606 -> 2566;
2607 -> 2599;
2607 -> 2517;
2608 -> 2535;
2608 -> 2607;
2608 -> 2603;
2608 -> 2517;
2609 -> 2507;
2609 -> 2517;
2610 -> 2507;
2610 -> 2517;
2611 -> 2507;
2611 -> 2517;
2612 -> 2517;
2613 -> 2610;
2613 -> 2612;
2613 -> 2517;
2614 -> 2611;
2614 -> 2517;
2615 -> 2611;
2615 -> 2608;
2615 -> 2609;
2615 -> 2517;
2616 -> 2610;
2616 -> 2517;
2617 -> 2517;
2618 -> 2517;
2619 -> 2614;
2619 -> 2618;
2620 -> 2615;
2620 -> 2618;
2621 -> 2616;
2621 -> 2618;
2622 -> 2617;
2622 -> 2618;
2623 -> 2619;
2623 -> 2618;
2624 -> 2620;
2624 -> 2618;
2625 -> 2618;
2626 -> 2623;
2626 -> 2625;
2627 -> 2624;
2627 -> 2625;
2628 -> 2625;
2629 -> 2626;
2629 -> 2628;
2629 -> 2625;
2630 -> 2627;
2630 -> 2625;
2631 -> 0;
2631 -> 2625;
2632 -> 2625;
2633 -> 2630;
2633 -> 2632;
2634 -> 2631;
2634 -> 2632;
2635 -> 2627;
2635 -> 2625;
2636 -> 0;
2636 -> 2625;
2637 -> 2625;
2638 -> 2635;
2638 -> 2637;
2639 -> 2636;
2639 -> 2637;
2640 -> 2626;
2640 -> 2608;
2640 -> 2622;
2640 -> 2625;
2641 -> 2622;
2641 -> 2618;
2642 -> 2618;
2643 -> 2621;
2643 -> 2642;
2643 -> 2618;
2644 -> 2621;
2644 -> 2622;
2644 -> 2618;
2645 -> 2617;
2645 -> 2500;
2646 -> 2507;
2646 -> 2645;
2646 -> 2608;
2646 -> 2640;
2646 -> 2627;
2646 -> 2626;
2646 -> 2622;
2646 -> 2644;
2646 -> 2500;
2647 -> 2507;
2647 -> 2517;
2648 -> 2507;
2648 -> 2517;
2649 -> 2507;
2649 -> 2517;
2650 -> 2507;
2650 -> 2517;
2651 -> 2507;
2651 -> 2517;
2652 -> 2517;
2653 -> 2647;
2653 -> 2646;
2653 -> 2517;
2654 -> 2517;
2655 -> 2648;
2655 -> 2646;
2655 -> 2517;
2656 -> 2652;
2656 -> 2517;
2657 -> 2654;
2657 -> 2517;
2658 -> 2507;
2658 -> 2517;
2659 -> 2507;
2659 -> 2517;
2660 -> 2507;
2660 -> 2517;
2661 -> 2507;
2661 -> 2517;
2662 -> 2507;
2662 -> 2517;
2663 -> 2517;
2664 -> 2659;
2664 -> 2663;
2664 -> 2517;
2665 -> 2658;
2665 -> 2646;
2666 -> 2659;
2666 -> 2646;
2667 -> 2646;
2668 -> 2665;
2668 -> 2667;
2669 -> 2666;
2669 -> 2667;
2670 -> 2662;
2670 -> 2667;
2671 -> 2668;
2671 -> 2667;
2672 -> 2671;
2672 -> 2667;
2673 -> 2669;
2673 -> 2667;
2674 -> 2667;
2675 -> 2672;
2675 -> 2674;
2676 -> 2673;
2676 -> 2674;
2677 -> 2670;
2677 -> 2674;
2678 -> 2675;
2678 -> 2646;
2678 -> 2674;
2679 -> 2676;
2679 -> 2674;
2680 -> 2675;
2680 -> 2674;
2681 -> 2674;
2682 -> 2678;
2682 -> 2681;
2683 -> 2679;
2683 -> 2681;
2684 -> 2680;
2684 -> 2681;
2685 -> 2677;
2685 -> 2681;
2686 -> 2685;
2686 -> 2678;
2686 -> 2681;
2687 -> 2682;
2687 -> 2681;
2688 -> 2684;
2688 -> 2681;
2689 -> 2683;
2689 -> 2681;
2690 -> 2681;
2691 -> 2686;
2691 -> 2690;
2692 -> 2687;
2692 -> 2690;
2693 -> 2688;
2693 -> 2690;
2694 -> 2689;
2694 -> 2690;
2695 -> 2692;
2695 -> 2690;
2696 -> 2691;
2696 -> 2695;
2696 -> 2678;
2696 -> 2690;
2697 -> 2690;
2698 -> 2696;
2698 -> 2697;
2698 -> 2690;
2699 -> 2696;
2699 -> 2690;
2700 -> 2694;
2700 -> 2690;
2701 -> 2693;
2701 -> 2690;
2702 -> 2690;
2703 -> 2699;
2703 -> 2702;
2704 -> 2700;
2704 -> 2702;
2705 -> 2701;
2705 -> 2702;
2706 -> 2703;
2706 -> 2702;
2707 -> 2703;
2707 -> 2702;
2708 -> 2706;
2708 -> 2702;
2709 -> 2706;
2709 -> 2703;
2709 -> 2702;
2710 -> 2702;
2711 -> 2706;
2711 -> 2703;
2711 -> 2702;
2712 -> 2706;
2712 -> 2703;
2712 -> 2702;
2713 -> 2712;
2713 -> 2702;
2714 -> 2710;
2715 -> 2710;
2716 -> 2714;
2716 -> 2710;
2717 -> 2714;
2717 -> 2710;
2718 -> 2714;
2718 -> 2710;
2719 -> 2714;
2719 -> 2710;
2720 -> 2719;
2720 -> 2710;
2721 -> 2703;
2721 -> 2702;
2721 -> 2710;
2722 -> 2702;
2723 -> 2721;
2723 -> 2722;
2723 -> 2702;
2724 -> 2696;
2724 -> 2690;
2725 -> 2671;
2725 -> 2721;
2725 -> 2667;
2726 -> 2667;
2727 -> 2725;
2727 -> 2726;
2728 -> 2670;
2728 -> 2726;
2729 -> 2724;
2729 -> 2667;
2730 -> 2667;
2731 -> 2729;
2731 -> 2730;
2732 -> 2731;
2732 -> 2730;
2733 -> 2730;
2734 -> 2730;
2735 -> 2732;
2735 -> 2734;
2736 -> 2733;
2736 -> 2734;
2737 -> 2735;
2737 -> 2734;
2738 -> 2734;
2739 -> 2738;
2739 -> 2736;
2739 -> 2734;
2740 -> 2734;
2741 -> 2740;
2741 -> 2736;
2741 -> 2734;
2742 -> 2733;
2742 -> 2667;
2743 -> 2667;
2744 -> 2727;
2744 -> 2742;
2744 -> 2743;
2744 -> 2735;
2744 -> 2739;
2744 -> 2741;
2744 -> 2667;
2745 -> 2744;
2746 -> 2744;
2747 -> 2744;
2748 -> 2745;
2748 -> 2744;
2749 -> 2746;
2749 -> 2744;
2750 -> 2747;
2750 -> 2744;
2751 -> 2749;
2751 -> 2745;
2752 -> 2750;
2752 -> 2745;
2753 -> 2744;
2753 -> 2745;
2754 -> 2753;
2754 -> 2744;
2754 -> 2745;
2755 -> 2745;
2756 -> 2755;
2756 -> 2744;
2756 -> 2745;
2757 -> 2756;
2757 -> 2745;
2758 -> 2756;
2758 -> 2744;
2758 -> 0;
2758 -> 2745;
2759 -> 2756;
2759 -> 2745;
2760 -> 2748;
2760 -> 2745;
2761 -> 2751;
2761 -> 2745;
2762 -> 2752;
2762 -> 2745;
2763 -> 2748;
2763 -> 2745;
2764 -> 2745;
2764 -> 0;
2765 -> 2745;
2765 -> 0;
2766 -> 2762;
2766 -> 2745;
2767 -> 2766;
2767 -> 2745;
2768 -> 2760;
2768 -> 2745;
2769 -> 2761;
2769 -> 2745;
2770 -> 2763;
2770 -> 2745;
2771 -> 2745;
2772 -> 2768;
2772 -> 2771;
2772 -> 2745;
2773 -> 2745;
2774 -> 2756;
2774 -> 2745;
2775 -> 2745;
2776 -> 2773;
2776 -> 2775;
2776 -> 2745;
2777 -> 2756;
2777 -> 2745;
2778 -> 2777;
2778 -> 2745;
2779 -> 2766;
2779 -> 2778;
2780 -> 2659;
2780 -> 2517;
2781 -> 2658;
2781 -> 2517;
2782 -> 2660;
2782 -> 2517;
2783 -> 2662;
2783 -> 2517;
2784 -> 2517;
2785 -> 2744;
2785 -> 2784;
2786 -> 2785;
2786 -> 2744;
2786 -> 2784;
2787 -> 2786;
2787 -> 0;
2787 -> 2784;
2788 -> 2787;
2788 -> 2517;
2789 -> 2500;
2790 -> 2506;
2790 -> 2789;
2791 -> 2756;
2791 -> 2789;
2792 -> 2508;
2792 -> 2789;
2793 -> 2505;
2793 -> 2789;
2794 -> 2791;
2794 -> 2789;
2795 -> 2792;
2795 -> 2789;
2796 -> 2789;
2797 -> 2794;
2797 -> 2796;
2798 -> 2795;
2798 -> 2796;
2799 -> 2793;
2799 -> 2796;
2800 -> 2797;
2800 -> 2756;
2800 -> 2796;
2801 -> 2797;
2801 -> 2756;
2801 -> 2796;
2802 -> 2797;
2802 -> 2756;
2802 -> 0;
2802 -> 2796;
2803 -> 2801;
2803 -> 2796;
2804 -> 2798;
2804 -> 2796;
2805 -> 2796;
2806 -> 2803;
2806 -> 2805;
2807 -> 2804;
2807 -> 2805;
2808 -> 2799;
2808 -> 2805;
2809 -> 2806;
2809 -> 2805;
2810 -> 2806;
2810 -> 2756;
2810 -> 2805;
2811 -> 2806;
2811 -> 2756;
2811 -> 2810;
2812 -> 2807;
2812 -> 2810;
2813 -> 2810;
2814 -> 2811;
2814 -> 2813;
2815 -> 2812;
2815 -> 2813;
2816 -> 2808;
2816 -> 2813;
2817 -> 2814;
2817 -> 2813;
2818 -> 2817;
2819 -> 2806;
2819 -> 2756;
2819 -> 2805;
2820 -> 2806;
2820 -> 2756;
2820 -> 2819;
2821 -> 2807;
2821 -> 2819;
2822 -> 2819;
2823 -> 2820;
2823 -> 2822;
2824 -> 2821;
2824 -> 2822;
2825 -> 2808;
2825 -> 2822;
2826 -> 2823;
2826 -> 2822;
2827 -> 2825;
2827 -> 2824;
2827 -> 2822;
2828 -> 2826;
2828 -> 2827;
2828 -> 2756;
2828 -> 2822;
2829 -> 2789;
2830 -> 2829;
2830 -> 2500;
2831 -> 2516;
2831 -> 2830;
2831 -> 2500;
2832 -> 2500;
2833 -> 2506;
2833 -> 2832;
2834 -> 2828;
2834 -> 2832;
2835 -> 2508;
2835 -> 2832;
2836 -> 2505;
2836 -> 2832;
2837 -> 2834;
2837 -> 2832;
2838 -> 2832;
2839 -> 2838;
2839 -> 2500;
2840 -> 2831;
2840 -> 2839;
2840 -> 2500;
2841 -> 2503;
2841 -> 2840;
2841 -> 2828;
2841 -> 2500;
2842 -> 2502;
2842 -> 2499;
2843 -> 2842;
2843 -> 599;
2844 -> 600;
2844 -> 2843;
2844 -> 2841;
2844 -> 598;
2845 -> 597;
2845 -> 594;
2846 -> 2845;
2846 -> 590;
2847 -> 571;
2848 -> 0;
2848 -> 571;
2849 -> 574;
2849 -> 571;
2850 -> 2848;
2850 -> 571;
2851 -> 2849;
2851 -> 2850;
2851 -> 2844;
2851 -> 2848;
2851 -> 571;
2852 -> 574;
2852 -> 2851;
2852 -> 571;
2854 -> 2853;
2855 -> 2854;
2856 -> 573;
2856 -> 571;
2857 -> 2851;
2857 -> 571;
2858 -> 571;
2859 -> 571;
2860 -> 2856;
2860 -> 2859;
2861 -> 2857;
2861 -> 2859;
2862 -> 2858;
2862 -> 2859;
2863 -> 2858;
2863 -> 2859;
2864 -> 2858;
2864 -> 2859;
2865 -> 2858;
2865 -> 2859;
2866 -> 2858;
2866 -> 2859;
2867 -> 2858;
2867 -> 2859;
2868 -> 2859;
2869 -> 2859;
2870 -> 2860;
2870 -> 2869;
2870 -> 2859;
2871 -> 2861;
2871 -> 2870;
2872 -> 2860;
2872 -> 2859;
2873 -> 2861;
2873 -> 2859;
2874 -> 2862;
2874 -> 2859;
2875 -> 2859;
2876 -> 2872;
2876 -> 2875;
2877 -> 2873;
2877 -> 2875;
2878 -> 2874;
2878 -> 2875;
2879 -> 2876;
2879 -> 2875;
2880 -> 2877;
2880 -> 2875;
2881 -> 2879;
2881 -> 2880;
2881 -> 2875;
2882 -> 2876;
2882 -> 0;
2882 -> 2875;
2883 -> 2877;
2883 -> 2851;
2883 -> 2852;
2883 -> 2875;
2884 -> 2875;
2885 -> 2882;
2885 -> 2884;
2886 -> 2883;
2886 -> 2884;
2887 -> 2885;
2887 -> 2886;
2887 -> 2884;
2888 -> 2885;
2888 -> 2884;
2889 -> 2875;
2890 -> 2889;
2890 -> 2859;
2891 -> 2890;
2892 -> 2891;
2892 -> 571;
2893 -> 557;
2893 -> 486;
2894 -> 1;
2895 -> 438;
2895 -> 2894;
2896 -> 439;
2896 -> 2894;
2897 -> 439;
2897 -> 2894;
2898 -> 439;
2898 -> 2894;
2899 -> 439;
2899 -> 2894;
2900 -> 439;
2900 -> 2894;
2901 -> 439;
2901 -> 2894;
2902 -> 2895;
2902 -> 2894;
2903 -> 2896;
2903 -> 2894;
2904 -> 2897;
2904 -> 2894;
2905 -> 2898;
2905 -> 2894;
2906 -> 2899;
2906 -> 2894;
2907 -> 2900;
2907 -> 2894;
2908 -> 2901;
2908 -> 2894;
2909 -> 2894;
2910 -> 2902;
2910 -> 2909;
2911 -> 2903;
2911 -> 2909;
2912 -> 2904;
2912 -> 2909;
2913 -> 2905;
2913 -> 2909;
2914 -> 2906;
2914 -> 2909;
2915 -> 2907;
2915 -> 2909;
2916 -> 2908;
2916 -> 2909;
2917 -> 2910;
2917 -> 2909;
2918 -> 2910;
2918 -> 2909;
2919 -> 2909;
2920 -> 2911;
2920 -> 2909;
2921 -> 2912;
2921 -> 2909;
2922 -> 2913;
2922 -> 2909;
2923 -> 2914;
2923 -> 2909;
2924 -> 2915;
2924 -> 2909;
2926 -> 2925;
2928 -> 2927;
2929 -> 2916;
2929 -> 2909;
2930 -> 2909;
2931 -> 2918;
2931 -> 2930;
2932 -> 2919;
2932 -> 2930;
2933 -> 2920;
2933 -> 2930;
2934 -> 2921;
2934 -> 2930;
2935 -> 2922;
2935 -> 2930;
2936 -> 2923;
2936 -> 2930;
2937 -> 2924;
2937 -> 2930;
2938 -> 2918;
2938 -> 2930;
2939 -> 2929;
2939 -> 2930;
2940 -> 2919;
2940 -> 2930;
2941 -> 2919;
2941 -> 2930;
2942 -> 2919;
2942 -> 2930;
2943 -> 2942;
2943 -> 2930;
2944 -> 2942;
2944 -> 2930;
2945 -> 2942;
2945 -> 2930;
2946 -> 2942;
2946 -> 2930;
2947 -> 2942;
2947 -> 2930;
2948 -> 2942;
2948 -> 2930;
2949 -> 2942;
2949 -> 2930;
2950 -> 2942;
2950 -> 2930;
2951 -> 2942;
2951 -> 2930;
2952 -> 2942;
2952 -> 2930;
2953 -> 2942;
2953 -> 2930;
2954 -> 2942;
2954 -> 2930;
2955 -> 2942;
2955 -> 2930;
2956 -> 2942;
2956 -> 2930;
2957 -> 2942;
2957 -> 2930;
2958 -> 2931;
2958 -> 2942;
2958 -> 2930;
2959 -> 2932;
2959 -> 2942;
2959 -> 2930;
2960 -> 2933;
2960 -> 2942;
2960 -> 2930;
2961 -> 2934;
2961 -> 2942;
2961 -> 2930;
2962 -> 2935;
2962 -> 2942;
2962 -> 2930;
2963 -> 2936;
2963 -> 2942;
2963 -> 2930;
2964 -> 2937;
2964 -> 2942;
2964 -> 2930;
2965 -> 2938;
2965 -> 2930;
2966 -> 2965;
2966 -> 2942;
2966 -> 2930;
2967 -> 2939;
2967 -> 2942;
2967 -> 2930;
2968 -> 2940;
2968 -> 2942;
2968 -> 2930;
2969 -> 2941;
2969 -> 2942;
2969 -> 2930;
2970 -> 2919;
2970 -> 2894;
2971 -> 2970;
2971 -> 1;
2972 -> 1;
2973 -> 439;
2973 -> 2972;
2974 -> 439;
2974 -> 2972;
2975 -> 2971;
2975 -> 2972;
2976 -> 2975;
2976 -> 2958;
2976 -> 2972;
2977 -> 2975;
2977 -> 2959;
2977 -> 2972;
2978 -> 2975;
2978 -> 2960;
2978 -> 2972;
2979 -> 2975;
2979 -> 2961;
2979 -> 2972;
2980 -> 2972;
2981 -> 2973;
2981 -> 2980;
2981 -> 2972;
2982 -> 2974;
2982 -> 2980;
2982 -> 2972;
2983 -> 2981;
2983 -> 2982;
2983 -> 2972;
2984 -> 2975;
2984 -> 2963;
2984 -> 2972;
2985 -> 2975;
2985 -> 2964;
2985 -> 2972;
2986 -> 2975;
2986 -> 2966;
2986 -> 2972;
2987 -> 2975;
2987 -> 2967;
2987 -> 2972;
2988 -> 2975;
2988 -> 2968;
2988 -> 2972;
2989 -> 2975;
2989 -> 2969;
2989 -> 2972;
2990 -> 2972;
2991 -> 2976;
2991 -> 2990;
2992 -> 2977;
2992 -> 2990;
2993 -> 2978;
2993 -> 2990;
2994 -> 2979;
2994 -> 2990;
2995 -> 2983;
2995 -> 2990;
2996 -> 2984;
2996 -> 2990;
2997 -> 2985;
2997 -> 2990;
2998 -> 2986;
2998 -> 2990;
2999 -> 2987;
2999 -> 2990;
3000 -> 2988;
3000 -> 2990;
3001 -> 2989;
3001 -> 2990;
3002 -> 2980;
3002 -> 2990;
3003 -> 3002;
3003 -> 2990;
3004 -> 3002;
3004 -> 2990;
3005 -> 3002;
3005 -> 2990;
3006 -> 3002;
3006 -> 2990;
3007 -> 3002;
3007 -> 2990;
3008 -> 3002;
3008 -> 2990;
3009 -> 3002;
3009 -> 2990;
3010 -> 3002;
3010 -> 2990;
3011 -> 3002;
3011 -> 2990;
3012 -> 3002;
3012 -> 2990;
3013 -> 3002;
3013 -> 2990;
3014 -> 3002;
3014 -> 2990;
3015 -> 3002;
3015 -> 2990;
3016 -> 3002;
3016 -> 2990;
3017 -> 3002;
3017 -> 2990;
3018 -> 2995;
3018 -> 3002;
3018 -> 2990;
3019 -> 2980;
3019 -> 1;
3020 -> 1;
3021 -> 438;
3021 -> 3020;
3022 -> 439;
3022 -> 3020;
3023 -> 439;
3023 -> 3020;
3024 -> 439;
3024 -> 3020;
3025 -> 439;
3025 -> 3020;
3026 -> 439;
3026 -> 3020;
3027 -> 439;
3027 -> 3020;
3028 -> 3021;
3028 -> 3020;
3029 -> 3022;
3029 -> 3020;
3030 -> 3023;
3030 -> 3020;
3031 -> 3024;
3031 -> 3020;
3032 -> 3025;
3032 -> 3020;
3033 -> 3026;
3033 -> 3020;
3034 -> 3027;
3034 -> 3020;
3035 -> 3020;
3036 -> 3028;
3036 -> 3035;
3037 -> 3029;
3037 -> 3035;
3038 -> 3030;
3038 -> 3035;
3039 -> 3031;
3039 -> 3035;
3040 -> 3032;
3040 -> 3035;
3041 -> 3033;
3041 -> 3035;
3042 -> 3034;
3042 -> 3035;
3043 -> 3036;
3043 -> 3035;
3044 -> 3036;
3044 -> 3035;
3045 -> 3035;
3046 -> 3037;
3046 -> 3035;
3047 -> 3038;
3047 -> 3035;
3048 -> 3039;
3048 -> 3035;
3049 -> 3040;
3049 -> 3035;
3050 -> 3041;
3050 -> 3035;
3051 -> 3042;
3051 -> 3035;
3052 -> 3035;
3053 -> 3044;
3053 -> 3052;
3054 -> 3045;
3054 -> 3052;
3055 -> 3046;
3055 -> 3052;
3056 -> 3047;
3056 -> 3052;
3057 -> 3048;
3057 -> 3052;
3058 -> 3049;
3058 -> 3052;
3059 -> 3050;
3059 -> 3052;
3060 -> 3044;
3060 -> 3052;
3061 -> 3051;
3061 -> 3052;
3062 -> 3045;
3062 -> 3052;
3063 -> 3045;
3063 -> 3052;
3064 -> 3045;
3064 -> 3052;
3065 -> 3064;
3065 -> 3052;
3066 -> 3064;
3066 -> 3052;
3067 -> 3064;
3067 -> 3052;
3068 -> 3064;
3068 -> 3052;
3069 -> 3064;
3069 -> 3052;
3070 -> 3064;
3070 -> 3052;
3071 -> 3064;
3071 -> 3052;
3072 -> 3064;
3072 -> 3052;
3073 -> 3064;
3073 -> 3052;
3074 -> 3064;
3074 -> 3052;
3075 -> 3064;
3075 -> 3052;
3076 -> 3064;
3076 -> 3052;
3077 -> 3064;
3077 -> 3052;
3078 -> 3064;
3078 -> 3052;
3079 -> 3064;
3079 -> 3052;
3080 -> 3053;
3080 -> 3064;
3080 -> 3052;
3081 -> 3054;
3081 -> 3064;
3081 -> 3052;
3082 -> 3055;
3082 -> 3064;
3082 -> 3052;
3083 -> 3056;
3083 -> 3064;
3083 -> 3052;
3084 -> 3057;
3084 -> 3064;
3084 -> 3052;
3085 -> 3058;
3085 -> 3064;
3085 -> 3052;
3086 -> 3059;
3086 -> 3064;
3086 -> 3052;
3087 -> 3060;
3087 -> 3052;
3088 -> 3087;
3088 -> 3064;
3088 -> 3052;
3089 -> 3061;
3089 -> 3064;
3089 -> 3052;
3090 -> 3062;
3090 -> 3064;
3090 -> 3052;
3091 -> 3063;
3091 -> 3064;
3091 -> 3052;
3092 -> 3045;
3092 -> 3020;
3093 -> 3092;
3093 -> 1;
3094 -> 1;
3095 -> 439;
3095 -> 3094;
3096 -> 439;
3096 -> 3094;
3097 -> 3093;
3097 -> 3094;
3098 -> 3097;
3098 -> 3080;
3098 -> 3094;
3099 -> 3097;
3099 -> 3081;
3099 -> 3094;
3100 -> 3097;
3100 -> 3082;
3100 -> 3094;
3101 -> 3097;
3101 -> 3083;
3101 -> 3094;
3102 -> 3094;
3103 -> 3095;
3103 -> 3102;
3103 -> 3094;
3104 -> 3096;
3104 -> 3102;
3104 -> 3094;
3105 -> 3103;
3105 -> 3104;
3105 -> 3094;
3106 -> 3097;
3106 -> 3085;
3106 -> 3094;
3107 -> 3097;
3107 -> 3086;
3107 -> 3094;
3108 -> 3097;
3108 -> 3088;
3108 -> 3094;
3109 -> 3097;
3109 -> 3089;
3109 -> 3094;
3110 -> 3097;
3110 -> 3090;
3110 -> 3094;
3111 -> 3097;
3111 -> 3091;
3111 -> 3094;
3112 -> 3094;
3113 -> 3098;
3113 -> 3112;
3114 -> 3099;
3114 -> 3112;
3115 -> 3100;
3115 -> 3112;
3116 -> 3101;
3116 -> 3112;
3117 -> 3105;
3117 -> 3112;
3118 -> 3106;
3118 -> 3112;
3119 -> 3107;
3119 -> 3112;
3120 -> 3108;
3120 -> 3112;
3121 -> 3109;
3121 -> 3112;
3122 -> 3110;
3122 -> 3112;
3123 -> 3111;
3123 -> 3112;
3124 -> 3102;
3124 -> 3112;
3125 -> 3124;
3125 -> 3112;
3126 -> 3124;
3126 -> 3112;
3127 -> 3124;
3127 -> 3112;
3128 -> 3124;
3128 -> 3112;
3129 -> 3124;
3129 -> 3112;
3130 -> 3124;
3130 -> 3112;
3131 -> 3124;
3131 -> 3112;
3132 -> 3124;
3132 -> 3112;
3133 -> 3124;
3133 -> 3112;
3134 -> 3124;
3134 -> 3112;
3135 -> 3124;
3135 -> 3112;
3136 -> 3124;
3136 -> 3112;
3137 -> 3124;
3137 -> 3112;
3138 -> 3124;
3138 -> 3112;
3139 -> 3124;
3139 -> 3112;
3140 -> 3117;
3140 -> 3124;
3140 -> 3112;
3141 -> 3102;
3141 -> 1;
3142 -> 1;
3143 -> 438;
3143 -> 3142;
3144 -> 439;
3144 -> 3142;
3145 -> 439;
3145 -> 3142;
3146 -> 439;
3146 -> 3142;
3147 -> 439;
3147 -> 3142;
3148 -> 439;
3148 -> 3142;
3149 -> 439;
3149 -> 3142;
3150 -> 3143;
3150 -> 3142;
3151 -> 3144;
3151 -> 3142;
3152 -> 3145;
3152 -> 3142;
3153 -> 3146;
3153 -> 3142;
3154 -> 3147;
3154 -> 3142;
3155 -> 3148;
3155 -> 3142;
3156 -> 3149;
3156 -> 3142;
3157 -> 3142;
3158 -> 3150;
3158 -> 3157;
3159 -> 3151;
3159 -> 3157;
3160 -> 3152;
3160 -> 3157;
3161 -> 3153;
3161 -> 3157;
3162 -> 3154;
3162 -> 3157;
3163 -> 3155;
3163 -> 3157;
3164 -> 3156;
3164 -> 3157;
3165 -> 3158;
3165 -> 3157;
3166 -> 3158;
3166 -> 3157;
3167 -> 3157;
3168 -> 3159;
3168 -> 3157;
3169 -> 3160;
3169 -> 3157;
3170 -> 3161;
3170 -> 3157;
3171 -> 3162;
3171 -> 3157;
3172 -> 3163;
3172 -> 3157;
3173 -> 3164;
3173 -> 3157;
3174 -> 3157;
3175 -> 3166;
3175 -> 3174;
3176 -> 3167;
3176 -> 3174;
3177 -> 3168;
3177 -> 3174;
3178 -> 3169;
3178 -> 3174;
3179 -> 3170;
3179 -> 3174;
3180 -> 3171;
3180 -> 3174;
3181 -> 3172;
3181 -> 3174;
3182 -> 3166;
3182 -> 3174;
3183 -> 3173;
3183 -> 3174;
3184 -> 3167;
3184 -> 3174;
3185 -> 3167;
3185 -> 3174;
3186 -> 3167;
3186 -> 3174;
3187 -> 3186;
3187 -> 3174;
3188 -> 3186;
3188 -> 3174;
3189 -> 3186;
3189 -> 3174;
3190 -> 3186;
3190 -> 3174;
3191 -> 3186;
3191 -> 3174;
3192 -> 3186;
3192 -> 3174;
3193 -> 3186;
3193 -> 3174;
3194 -> 3186;
3194 -> 3174;
3195 -> 3186;
3195 -> 3174;
3196 -> 3186;
3196 -> 3174;
3197 -> 3186;
3197 -> 3174;
3198 -> 3186;
3198 -> 3174;
3199 -> 3186;
3199 -> 3174;
3200 -> 3186;
3200 -> 3174;
3201 -> 3186;
3201 -> 3174;
3202 -> 3175;
3202 -> 3186;
3202 -> 3174;
3203 -> 3176;
3203 -> 3186;
3203 -> 3174;
3204 -> 3177;
3204 -> 3186;
3204 -> 3174;
3205 -> 3178;
3205 -> 3186;
3205 -> 3174;
3206 -> 3179;
3206 -> 3186;
3206 -> 3174;
3207 -> 3180;
3207 -> 3186;
3207 -> 3174;
3208 -> 3181;
3208 -> 3186;
3208 -> 3174;
3209 -> 3182;
3209 -> 3174;
3210 -> 3209;
3210 -> 3186;
3210 -> 3174;
3211 -> 3183;
3211 -> 3186;
3211 -> 3174;
3212 -> 3184;
3212 -> 3186;
3212 -> 3174;
3213 -> 3185;
3213 -> 3186;
3213 -> 3174;
3214 -> 3167;
3214 -> 3142;
3215 -> 3214;
3215 -> 1;
3216 -> 439;
3216 -> 1;
3217 -> 1;
3218 -> 439;
3218 -> 3217;
3219 -> 3215;
3219 -> 3217;
3220 -> 3219;
3220 -> 3202;
3220 -> 3217;
3221 -> 3219;
3221 -> 3203;
3221 -> 3217;
3222 -> 3219;
3222 -> 3204;
3222 -> 3217;
3223 -> 3218;
3223 -> 3217;
3224 -> 3219;
3224 -> 3206;
3224 -> 3217;
3225 -> 3219;
3225 -> 3207;
3225 -> 3217;
3226 -> 3217;
3227 -> 3219;
3227 -> 3210;
3227 -> 3217;
3228 -> 3219;
3228 -> 3211;
3228 -> 3217;
3229 -> 3219;
3229 -> 3212;
3229 -> 3217;
3230 -> 3219;
3230 -> 3213;
3230 -> 3217;
3231 -> 3217;
3232 -> 3220;
3232 -> 3231;
3233 -> 3221;
3233 -> 3231;
3234 -> 3222;
3234 -> 3231;
3235 -> 3223;
3235 -> 3231;
3236 -> 3224;
3236 -> 3231;
3237 -> 3225;
3237 -> 3231;
3238 -> 3226;
3238 -> 3231;
3239 -> 3227;
3239 -> 3231;
3240 -> 3228;
3240 -> 3231;
3241 -> 3229;
3241 -> 3231;
3242 -> 3230;
3242 -> 3231;
3243 -> 3226;
3243 -> 3231;
3244 -> 3243;
3244 -> 3231;
3245 -> 3243;
3245 -> 3231;
3246 -> 3243;
3246 -> 3231;
3247 -> 3243;
3247 -> 3231;
3248 -> 3243;
3248 -> 3231;
3249 -> 3243;
3249 -> 3231;
3250 -> 3243;
3250 -> 3231;
3251 -> 3243;
3251 -> 3231;
3252 -> 3243;
3252 -> 3231;
3253 -> 3243;
3253 -> 3231;
3254 -> 3243;
3254 -> 3231;
3255 -> 3243;
3255 -> 3231;
3256 -> 3243;
3256 -> 3231;
3257 -> 3243;
3257 -> 3231;
3258 -> 3243;
3258 -> 3231;
3259 -> 3235;
3259 -> 3243;
3259 -> 3231;
3260 -> 3238;
3260 -> 3243;
3260 -> 3231;
3261 -> 3226;
3261 -> 1;
3262 -> 1;
3263 -> 439;
3263 -> 3262;
3264 -> 439;
3264 -> 3262;
3265 -> 3261;
3265 -> 3262;
3266 -> 3265;
3266 -> 3232;
3266 -> 3262;
3267 -> 3265;
3267 -> 3233;
3267 -> 3262;
3268 -> 3265;
3268 -> 3234;
3268 -> 3262;
3269 -> 3265;
3269 -> 3259;
3269 -> 3262;
3270 -> 3262;
3271 -> 3263;
3271 -> 3270;
3271 -> 3262;
3272 -> 3264;
3272 -> 3270;
3272 -> 3262;
3273 -> 3271;
3273 -> 3272;
3273 -> 3262;
3274 -> 3265;
3274 -> 3237;
3274 -> 3262;
3275 -> 3265;
3275 -> 3260;
3275 -> 3262;
3276 -> 3265;
3276 -> 3239;
3276 -> 3262;
3277 -> 3265;
3277 -> 3240;
3277 -> 3262;
3278 -> 3265;
3278 -> 3241;
3278 -> 3262;
3279 -> 3265;
3279 -> 3242;
3279 -> 3262;
3280 -> 3262;
3281 -> 3266;
3281 -> 3280;
3282 -> 3267;
3282 -> 3280;
3283 -> 3268;
3283 -> 3280;
3284 -> 3269;
3284 -> 3280;
3285 -> 3273;
3285 -> 3280;
3286 -> 3274;
3286 -> 3280;
3287 -> 3275;
3287 -> 3280;
3288 -> 3276;
3288 -> 3280;
3289 -> 3277;
3289 -> 3280;
3290 -> 3278;
3290 -> 3280;
3291 -> 3279;
3291 -> 3280;
3292 -> 3270;
3292 -> 3280;
3293 -> 3292;
3293 -> 3280;
3294 -> 3292;
3294 -> 3280;
3295 -> 3292;
3295 -> 3280;
3296 -> 3292;
3296 -> 3280;
3297 -> 3292;
3297 -> 3280;
3298 -> 3292;
3298 -> 3280;
3299 -> 3292;
3299 -> 3280;
3300 -> 3292;
3300 -> 3280;
3301 -> 3292;
3301 -> 3280;
3302 -> 3292;
3302 -> 3280;
3303 -> 3292;
3303 -> 3280;
3304 -> 3292;
3304 -> 3280;
3305 -> 3292;
3305 -> 3280;
3306 -> 3292;
3306 -> 3280;
3307 -> 3292;
3307 -> 3280;
3308 -> 3285;
3308 -> 3292;
3308 -> 3280;
3309 -> 3270;
3309 -> 1;
3310 -> 1;
3311 -> 438;
3311 -> 3310;
3312 -> 439;
3312 -> 3310;
3313 -> 439;
3313 -> 3310;
3314 -> 439;
3314 -> 3310;
3315 -> 439;
3315 -> 3310;
3316 -> 439;
3316 -> 3310;
3317 -> 439;
3317 -> 3310;
3318 -> 3311;
3318 -> 3310;
3319 -> 3312;
3319 -> 3310;
3320 -> 3313;
3320 -> 3310;
3321 -> 3314;
3321 -> 3310;
3322 -> 3315;
3322 -> 3310;
3323 -> 3316;
3323 -> 3310;
3324 -> 3317;
3324 -> 3310;
3325 -> 3310;
3326 -> 3318;
3326 -> 3325;
3327 -> 3319;
3327 -> 3325;
3328 -> 3320;
3328 -> 3325;
3329 -> 3321;
3329 -> 3325;
3330 -> 3322;
3330 -> 3325;
3331 -> 3323;
3331 -> 3325;
3332 -> 3324;
3332 -> 3325;
3333 -> 3326;
3333 -> 3325;
3334 -> 3326;
3334 -> 3325;
3335 -> 3325;
3336 -> 3327;
3336 -> 3325;
3337 -> 3328;
3337 -> 3325;
3338 -> 3329;
3338 -> 3325;
3339 -> 3330;
3339 -> 3325;
3340 -> 3331;
3340 -> 3325;
3341 -> 3332;
3341 -> 3325;
3342 -> 3325;
3343 -> 3334;
3343 -> 3342;
3344 -> 3335;
3344 -> 3342;
3345 -> 3336;
3345 -> 3342;
3346 -> 3337;
3346 -> 3342;
3347 -> 3338;
3347 -> 3342;
3348 -> 3339;
3348 -> 3342;
3349 -> 3340;
3349 -> 3342;
3350 -> 3334;
3350 -> 3342;
3351 -> 3341;
3351 -> 3342;
3352 -> 3335;
3352 -> 3342;
3353 -> 3335;
3353 -> 3342;
3354 -> 3335;
3354 -> 3342;
3355 -> 3354;
3355 -> 3342;
3356 -> 3354;
3356 -> 3342;
3357 -> 3354;
3357 -> 3342;
3358 -> 3354;
3358 -> 3342;
3359 -> 3354;
3359 -> 3342;
3360 -> 3354;
3360 -> 3342;
3361 -> 3354;
3361 -> 3342;
3362 -> 3354;
3362 -> 3342;
3363 -> 3354;
3363 -> 3342;
3364 -> 3354;
3364 -> 3342;
3365 -> 3354;
3365 -> 3342;
3366 -> 3354;
3366 -> 3342;
3367 -> 3354;
3367 -> 3342;
3368 -> 3354;
3368 -> 3342;
3369 -> 3354;
3369 -> 3342;
3370 -> 3343;
3370 -> 3354;
3370 -> 3342;
3371 -> 3344;
3371 -> 3354;
3371 -> 3342;
3372 -> 3345;
3372 -> 3354;
3372 -> 3342;
3373 -> 3346;
3373 -> 3354;
3373 -> 3342;
3374 -> 3347;
3374 -> 3354;
3374 -> 3342;
3375 -> 3348;
3375 -> 3354;
3375 -> 3342;
3376 -> 3349;
3376 -> 3354;
3376 -> 3342;
3377 -> 3350;
3377 -> 3342;
3378 -> 3377;
3378 -> 3354;
3378 -> 3342;
3379 -> 3351;
3379 -> 3354;
3379 -> 3342;
3380 -> 3352;
3380 -> 3354;
3380 -> 3342;
3381 -> 3353;
3381 -> 3354;
3381 -> 3342;
3382 -> 3335;
3382 -> 3310;
3383 -> 3382;
3383 -> 1;
3384 -> 439;
3384 -> 1;
3385 -> 1;
3386 -> 439;
3386 -> 3385;
3387 -> 3383;
3387 -> 3385;
3388 -> 3387;
3388 -> 3370;
3388 -> 3385;
3389 -> 3387;
3389 -> 3371;
3389 -> 3385;
3390 -> 3387;
3390 -> 3372;
3390 -> 3385;
3391 -> 3386;
3391 -> 3385;
3392 -> 3387;
3392 -> 3374;
3392 -> 3385;
3393 -> 3387;
3393 -> 3375;
3393 -> 3385;
3394 -> 3385;
3395 -> 3387;
3395 -> 3378;
3395 -> 3385;
3396 -> 3387;
3396 -> 3379;
3396 -> 3385;
3397 -> 3387;
3397 -> 3380;
3397 -> 3385;
3398 -> 3387;
3398 -> 3381;
3398 -> 3385;
3399 -> 3385;
3400 -> 3388;
3400 -> 3399;
3401 -> 3389;
3401 -> 3399;
3402 -> 3390;
3402 -> 3399;
3403 -> 3391;
3403 -> 3399;
3404 -> 3392;
3404 -> 3399;
3405 -> 3393;
3405 -> 3399;
3406 -> 3394;
3406 -> 3399;
3407 -> 3395;
3407 -> 3399;
3408 -> 3396;
3408 -> 3399;
3409 -> 3397;
3409 -> 3399;
3410 -> 3398;
3410 -> 3399;
3411 -> 3394;
3411 -> 3399;
3412 -> 3411;
3412 -> 3399;
3413 -> 3411;
3413 -> 3399;
3414 -> 3411;
3414 -> 3399;
3415 -> 3411;
3415 -> 3399;
3416 -> 3411;
3416 -> 3399;
3417 -> 3411;
3417 -> 3399;
3418 -> 3411;
3418 -> 3399;
3419 -> 3411;
3419 -> 3399;
3420 -> 3411;
3420 -> 3399;
3421 -> 3411;
3421 -> 3399;
3422 -> 3411;
3422 -> 3399;
3423 -> 3411;
3423 -> 3399;
3424 -> 3411;
3424 -> 3399;
3425 -> 3411;
3425 -> 3399;
3426 -> 3411;
3426 -> 3399;
3427 -> 3403;
3427 -> 3411;
3427 -> 3399;
3428 -> 3406;
3428 -> 3411;
3428 -> 3399;
3429 -> 3394;
3429 -> 1;
3430 -> 1;
3431 -> 439;
3431 -> 3430;
3432 -> 439;
3432 -> 3430;
3433 -> 3429;
3433 -> 3430;
3434 -> 3433;
3434 -> 3400;
3434 -> 3430;
3435 -> 3433;
3435 -> 3401;
3435 -> 3430;
3436 -> 3433;
3436 -> 3402;
3436 -> 3430;
3437 -> 3433;
3437 -> 3427;
3437 -> 3430;
3438 -> 3430;
3439 -> 3431;
3439 -> 3438;
3439 -> 3430;
3440 -> 3432;
3440 -> 3438;
3440 -> 3430;
3441 -> 3439;
3441 -> 3440;
3441 -> 3430;
3442 -> 3433;
3442 -> 3405;
3442 -> 3430;
3443 -> 3433;
3443 -> 3428;
3443 -> 3430;
3444 -> 3433;
3444 -> 3407;
3444 -> 3430;
3445 -> 3433;
3445 -> 3408;
3445 -> 3430;
3446 -> 3433;
3446 -> 3409;
3446 -> 3430;
3447 -> 3433;
3447 -> 3410;
3447 -> 3430;
3448 -> 3430;
3449 -> 3434;
3449 -> 3448;
3450 -> 3435;
3450 -> 3448;
3451 -> 3436;
3451 -> 3448;
3452 -> 3437;
3452 -> 3448;
3453 -> 3441;
3453 -> 3448;
3454 -> 3442;
3454 -> 3448;
3455 -> 3443;
3455 -> 3448;
3456 -> 3444;
3456 -> 3448;
3457 -> 3445;
3457 -> 3448;
3458 -> 3446;
3458 -> 3448;
3459 -> 3447;
3459 -> 3448;
3460 -> 3438;
3460 -> 3448;
3461 -> 3460;
3461 -> 3448;
3462 -> 3460;
3462 -> 3448;
3463 -> 3460;
3463 -> 3448;
3464 -> 3460;
3464 -> 3448;
3465 -> 3460;
3465 -> 3448;
3466 -> 3460;
3466 -> 3448;
3467 -> 3460;
3467 -> 3448;
3468 -> 3460;
3468 -> 3448;
3469 -> 3460;
3469 -> 3448;
3470 -> 3460;
3470 -> 3448;
3471 -> 3460;
3471 -> 3448;
3472 -> 3460;
3472 -> 3448;
3473 -> 3460;
3473 -> 3448;
3474 -> 3460;
3474 -> 3448;
3475 -> 3460;
3475 -> 3448;
3476 -> 3453;
3476 -> 3460;
3476 -> 3448;
3477 -> 3438;
3477 -> 1;
3478 -> 3019;
3478 -> 439;
3478 -> 1;
3479 -> 3141;
3479 -> 439;
3479 -> 1;
3480 -> 3309;
3480 -> 439;
3480 -> 1;
3481 -> 3477;
3481 -> 439;
3481 -> 1;
3482 -> 1;
3483 -> 2893;
3483 -> 3482;
3484 -> 439;
3484 -> 3482;
3485 -> 3482;
3486 -> 3485;
3486 -> 3483;
3486 -> 2886;
3486 -> 3482;
3487 -> 3486;
3487 -> 3485;
3488 -> 3487;
3488 -> 3486;
3488 -> 3485;
3489 -> 3485;
3490 -> 3488;
3490 -> 3486;
3490 -> 3489;
3490 -> 3485;
3491 -> 3487;
3491 -> 3486;
3491 -> 3489;
3491 -> 3485;
3492 -> 1004;
3492 -> 3490;
3493 -> 3486;
3493 -> 3485;
3494 -> 3486;
3494 -> 3485;
3495 -> 3485;
3496 -> 3493;
3496 -> 3492;
3496 -> 3495;
3497 -> 3494;
3497 -> 3496;
3497 -> 3495;
3498 -> 3497;
3498 -> 3495;
3499 -> 0;
3499 -> 3498;
3500 -> 3497;
3500 -> 3495;
3501 -> 3493;
3501 -> 3495;
3502 -> 3494;
3502 -> 3499;
3502 -> 3500;
3502 -> 3501;
3502 -> 3495;
3503 -> 0;
3503 -> 3502;
3504 -> 3503;
3505 -> 3494;
3505 -> 3504;
3506 -> 3505;
3506 -> 1004;
3506 -> 3504;
3507 -> 3506;
3508 -> 3503;
3509 -> 0;
3509 -> 3503;
3510 -> 3509;
3511 -> 3486;
3511 -> 3485;
3512 -> 3486;
3512 -> 3485;
3513 -> 3486;
3513 -> 3485;
3514 -> 3486;
3514 -> 3485;
3515 -> 3486;
3515 -> 3485;
3516 -> 3485;
3517 -> 3514;
3517 -> 3516;
3517 -> 3485;
3518 -> 3515;
3518 -> 3516;
3518 -> 3485;
3519 -> 3517;
3519 -> 3518;
3519 -> 3485;
3520 -> 3512;
3520 -> 3485;
3521 -> 3511;
3521 -> 3485;
3522 -> 3512;
3522 -> 3485;
3523 -> 3513;
3523 -> 3485;
3524 -> 3514;
3524 -> 3485;
3525 -> 3515;
3525 -> 3485;
3526 -> 3520;
3526 -> 3485;
3527 -> 3485;
3528 -> 3521;
3528 -> 3527;
3529 -> 3522;
3529 -> 3527;
3530 -> 3523;
3530 -> 3527;
3531 -> 3524;
3531 -> 3527;
3532 -> 3525;
3532 -> 3527;
3533 -> 3526;
3533 -> 3527;
3534 -> 3527;
3535 -> 3532;
3535 -> 3534;
3535 -> 3527;
3536 -> 3531;
3536 -> 3534;
3536 -> 3527;
3537 -> 3535;
3537 -> 3536;
3537 -> 3527;
3538 -> 3527;
3539 -> 3528;
3539 -> 3527;
3540 -> 3529;
3540 -> 3527;
3541 -> 3538;
3541 -> 3527;
3542 -> 3533;
3542 -> 3527;
3543 -> 3527;
3544 -> 3539;
3544 -> 3543;
3545 -> 3540;
3545 -> 3543;
3546 -> 3541;
3546 -> 3543;
3547 -> 3542;
3547 -> 3543;
3548 -> 3545;
3548 -> 3543;
3549 -> 3548;
3549 -> 3544;
3549 -> 3509;
3549 -> 3543;
3550 -> 3543;
3551 -> 3549;
3551 -> 3550;
3552 -> 3549;
3552 -> 3550;
3553 -> 3551;
3553 -> 3550;
3554 -> 3551;
3554 -> 3549;
3554 -> 3550;
3555 -> 3550;
3556 -> 3551;
3556 -> 3549;
3556 -> 3550;
3557 -> 3551;
3557 -> 3549;
3557 -> 3550;
3558 -> 3557;
3558 -> 3550;
3559 -> 3550;
3560 -> 3555;
3560 -> 3559;
3560 -> 3543;
3561 -> 3555;
3561 -> 3550;
3562 -> 3555;
3562 -> 3550;
3563 -> 3561;
3563 -> 3550;
3564 -> 3561;
3564 -> 3550;
3565 -> 3561;
3565 -> 3550;
3566 -> 3561;
3566 -> 3550;
3567 -> 3566;
3567 -> 3550;
3568 -> 3566;
3568 -> 3567;
3569 -> 3543;
3570 -> 3549;
3570 -> 3569;
3570 -> 3543;
3571 -> 3549;
3571 -> 3570;
3572 -> 3570;
3573 -> 3571;
3573 -> 3572;
3574 -> 3571;
3574 -> 3572;
3575 -> 3573;
3575 -> 3572;
3576 -> 3573;
3576 -> 3571;
3576 -> 3572;
3577 -> 3573;
3577 -> 3571;
3577 -> 3572;
3578 -> 3573;
3578 -> 3571;
3578 -> 3572;
3579 -> 3578;
3579 -> 3572;
3580 -> 3572;
3581 -> 3572;
3582 -> 3580;
3582 -> 3572;
3583 -> 3580;
3583 -> 3572;
3584 -> 3580;
3584 -> 3572;
3585 -> 3580;
3585 -> 3572;
3586 -> 3585;
3586 -> 3572;
3587 -> 3570;
3588 -> 3572;
3588 -> 3587;
3588 -> 3570;
3589 -> 3549;
3589 -> 3543;
3590 -> 3527;
3591 -> 3572;
3591 -> 3590;
3591 -> 3527;
3592 -> 3589;
3592 -> 3527;
3593 -> 3572;
3593 -> 3550;
3594 -> 3572;
3594 -> 3550;
3595 -> 3593;
3595 -> 3550;
3596 -> 3593;
3596 -> 3572;
3596 -> 3550;
3597 -> 3593;
3597 -> 3572;
3597 -> 3550;
3598 -> 3593;
3598 -> 3572;
3598 -> 3550;
3599 -> 3598;
3599 -> 3550;
3600 -> 3572;
3601 -> 3572;
3601 -> 3543;
3602 -> 3601;
3602 -> 3527;
3603 -> 3486;
3603 -> 3485;
3604 -> 3486;
3604 -> 3485;
3605 -> 3486;
3605 -> 3485;
3606 -> 3485;
3607 -> 3485;
3608 -> 3485;
3609 -> 3485;
3610 -> 3608;
3610 -> 3609;
3611 -> 3609;
3612 -> 3610;
3612 -> 3611;
3613 -> 3612;
3613 -> 3611;
3614 -> 3612;
3614 -> 3611;
3615 -> 3612;
3615 -> 3611;
3616 -> 3612;
3616 -> 3611;
3617 -> 3612;
3617 -> 3611;
3618 -> 3611;
3619 -> 3486;
3619 -> 3618;
3619 -> 3611;
3620 -> 3612;
3620 -> 3611;
3621 -> 3620;
3621 -> 3613;
3621 -> 3614;
3621 -> 3615;
3621 -> 3616;
3621 -> 3617;
3621 -> 3611;
3622 -> 3485;
3623 -> 3485;
3624 -> 3485;
3625 -> 3624;
3626 -> 3572;
3626 -> 3625;
3626 -> 3624;
3627 -> 3624;
3628 -> 3627;
3629 -> 3628;
3629 -> 3627;
3630 -> 3628;
3630 -> 3627;
3631 -> 3628;
3631 -> 3627;
3632 -> 3628;
3632 -> 3627;
3633 -> 3624;
3634 -> 3633;
3635 -> 3486;
3635 -> 3634;
3635 -> 3633;
3636 -> 3624;
3637 -> 3624;
3638 -> 3637;
3639 -> 3638;
3640 -> 3639;
3641 -> 2574;
3641 -> 3640;
3642 -> 3640;
3643 -> 3640;
3644 -> 3643;
3645 -> 3572;
3645 -> 3644;
3646 -> 3644;
3647 -> 3644;
3648 -> 3644;
3649 -> 3647;
3649 -> 3648;
3650 -> 3647;
3650 -> 3643;
3651 -> 3643;
3652 -> 3643;
3653 -> 3650;
3653 -> 3643;
3654 -> 3651;
3654 -> 3643;
3655 -> 3643;
3656 -> 3572;
3657 -> 3656;
3657 -> 3572;
3658 -> 3572;
3659 -> 3572;
3659 -> 3658;
3660 -> 3659;
3660 -> 3572;
3660 -> 3658;
3661 -> 3660;
3661 -> 3572;
3662 -> 3572;
3663 -> 3572;
3664 -> 3572;
3665 -> 3572;
3666 -> 3572;
3667 -> 3572;
3668 -> 3572;
3669 -> 3572;
3670 -> 3485;
3671 -> 3572;
3672 -> 3572;
3673 -> 0;
3673 -> 3572;
3674 -> 3572;
3675 -> 3672;
3675 -> 3674;
3676 -> 3673;
3676 -> 3674;
3677 -> 3572;
3678 -> 0;
3678 -> 3572;
3679 -> 3572;
3680 -> 3677;
3680 -> 3679;
3681 -> 3678;
3681 -> 3679;
3682 -> 3485;
3683 -> 3682;
3684 -> 3486;
3684 -> 3683;
3684 -> 3682;
3685 -> 3682;
3686 -> 3682;
3687 -> 3572;
3688 -> 3572;
3689 -> 3572;
3690 -> 3688;
3690 -> 3689;
3691 -> 3688;
3691 -> 3689;
3692 -> 3688;
3692 -> 3689;
3693 -> 3688;
3693 -> 3689;
3694 -> 3688;
3694 -> 3689;
3695 -> 3572;
3695 -> 3689;
3696 -> 3689;
3697 -> 3691;
3697 -> 3696;
3697 -> 3689;
3698 -> 3689;
3699 -> 3698;
3699 -> 3572;
3700 -> 3572;
3701 -> 3699;
3701 -> 3700;
3701 -> 3572;
3702 -> 3572;
3703 -> 3572;
3703 -> 3702;
3704 -> 3703;
3704 -> 3572;
3704 -> 0;
3704 -> 3702;
3705 -> 3702;
3706 -> 3703;
3706 -> 3572;
3706 -> 3705;
3706 -> 3702;
3707 -> 3704;
3707 -> 3572;
3708 -> 3572;
3709 -> 3572;
3710 -> 3572;
3711 -> 3709;
3711 -> 3572;
3712 -> 3710;
3712 -> 3572;
3713 -> 3711;
3713 -> 3572;
3714 -> 3712;
3714 -> 3572;
3715 -> 3572;
3716 -> 3572;
3716 -> 3715;
3717 -> 3716;
3717 -> 3572;
3717 -> 0;
3717 -> 3715;
3718 -> 3715;
3719 -> 3716;
3719 -> 3572;
3719 -> 3718;
3719 -> 3715;
3720 -> 3717;
3720 -> 3572;
3721 -> 3711;
3721 -> 3572;
3722 -> 3572;
3723 -> 3721;
3723 -> 3722;
3724 -> 3723;
3724 -> 0;
3724 -> 3722;
3725 -> 3723;
3725 -> 0;
3725 -> 3722;
3726 -> 3722;
3727 -> 0;
3727 -> 3722;
3728 -> 3723;
3728 -> 3727;
3728 -> 3722;
3729 -> 0;
3729 -> 3722;
3730 -> 3723;
3730 -> 3729;
3730 -> 3722;
3731 -> 3722;
3732 -> 0;
3732 -> 3722;
3733 -> 3723;
3733 -> 3732;
3733 -> 3722;
3734 -> 3733;
3734 -> 3722;
3735 -> 3722;
3736 -> 3734;
3736 -> 3735;
3737 -> 3735;
3738 -> 3736;
3738 -> 3737;
3738 -> 3735;
3739 -> 3572;
3740 -> 3572;
3741 -> 3713;
3741 -> 3572;
3742 -> 3713;
3742 -> 3572;
3743 -> 3713;
3743 -> 3572;
3744 -> 3572;
3745 -> 3714;
3745 -> 3572;
3746 -> 3572;
3747 -> 3572;
3748 -> 3572;
3748 -> 3747;
3749 -> 3748;
3749 -> 3572;
3749 -> 0;
3749 -> 3747;
3750 -> 3747;
3751 -> 3748;
3751 -> 3572;
3751 -> 3750;
3751 -> 3747;
3752 -> 3749;
3752 -> 3572;
3753 -> 3711;
3753 -> 0;
3753 -> 3572;
3754 -> 3572;
3755 -> 3713;
3755 -> 3572;
3756 -> 3714;
3756 -> 3572;
3757 -> 3572;
3758 -> 3572;
3758 -> 3757;
3759 -> 3758;
3759 -> 3572;
3759 -> 0;
3759 -> 3757;
3760 -> 3757;
3761 -> 3758;
3761 -> 3572;
3761 -> 3760;
3761 -> 3757;
3762 -> 3759;
3762 -> 3572;
3763 -> 3572;
3764 -> 3572;
3764 -> 3763;
3765 -> 3764;
3765 -> 3572;
3765 -> 0;
3765 -> 3763;
3766 -> 3765;
3766 -> 3572;
3767 -> 3572;
3768 -> 3756;
3768 -> 3713;
3769 -> 3755;
3769 -> 3713;
3770 -> 3768;
3770 -> 3713;
3771 -> 3713;
3772 -> 3713;
3773 -> 3771;
3773 -> 3772;
3774 -> 3773;
3774 -> 0;
3774 -> 3772;
3775 -> 3773;
3775 -> 0;
3775 -> 3772;
3776 -> 3772;
3777 -> 0;
3777 -> 3772;
3778 -> 3773;
3778 -> 3777;
3778 -> 3772;
3779 -> 0;
3779 -> 3772;
3780 -> 3773;
3780 -> 3779;
3780 -> 3772;
3781 -> 3772;
3782 -> 0;
3782 -> 3772;
3783 -> 3773;
3783 -> 3782;
3783 -> 3772;
3784 -> 3783;
3784 -> 3772;
3785 -> 3772;
3786 -> 3784;
3786 -> 3785;
3787 -> 3785;
3788 -> 3786;
3788 -> 3787;
3788 -> 3785;
3789 -> 3713;
3790 -> 3769;
3790 -> 3789;
3790 -> 3713;
3791 -> 3769;
3791 -> 3713;
3792 -> 3770;
3792 -> 3713;
3793 -> 3791;
3793 -> 3713;
3794 -> 3792;
3794 -> 3713;
3795 -> 3713;
3796 -> 3713;
3796 -> 3572;
3797 -> 3713;
3798 -> 3793;
3798 -> 3713;
3799 -> 3713;
3800 -> 3794;
3800 -> 3713;
3801 -> 3713;
3802 -> 3713;
3802 -> 3572;
3803 -> 3797;
3803 -> 3713;
3804 -> 3798;
3804 -> 3713;
3805 -> 3798;
3805 -> 3713;
3806 -> 3799;
3806 -> 3713;
3807 -> 3800;
3807 -> 3713;
3808 -> 3797;
3808 -> 3713;
3809 -> 3805;
3809 -> 3713;
3810 -> 3797;
3810 -> 3713;
3811 -> 3793;
3811 -> 3797;
3811 -> 3713;
3812 -> 3798;
3812 -> 3811;
3813 -> 3799;
3813 -> 3811;
3814 -> 3800;
3814 -> 3811;
3815 -> 3811;
3816 -> 3811;
3817 -> 3811;
3818 -> 3812;
3818 -> 3811;
3819 -> 3811;
3820 -> 3811;
3821 -> 3811;
3822 -> 3813;
3822 -> 3811;
3823 -> 3814;
3823 -> 3811;
3824 -> 3811;
3825 -> 3816;
3825 -> 3811;
3825 -> 3824;
3826 -> 3811;
3827 -> 3811;
3827 -> 3826;
3828 -> 3827;
3828 -> 3811;
3828 -> 0;
3828 -> 3826;
3829 -> 3826;
3830 -> 3827;
3830 -> 3811;
3830 -> 3829;
3830 -> 3826;
3831 -> 3828;
3831 -> 3811;
3832 -> 3794;
3832 -> 3811;
3833 -> 3811;
3834 -> 3811;
3835 -> 3811;
3836 -> 3832;
3836 -> 3811;
3837 -> 3811;
3838 -> 3811;
3839 -> 3811;
3840 -> 3833;
3840 -> 3811;
3841 -> 3834;
3841 -> 3811;
3842 -> 3835;
3842 -> 3811;
3843 -> 3836;
3843 -> 3811;
3844 -> 3833;
3844 -> 3811;
3845 -> 3841;
3845 -> 3811;
3846 -> 3833;
3846 -> 3811;
3847 -> 3833;
3848 -> 3833;
3849 -> 3833;
3850 -> 3847;
3850 -> 3849;
3851 -> 3850;
3851 -> 3833;
3852 -> 3833;
3853 -> 3848;
3853 -> 3852;
3854 -> 3853;
3854 -> 3833;
3855 -> 3851;
3855 -> 3854;
3855 -> 3833;
3856 -> 3811;
3857 -> 3811;
3858 -> 3856;
3858 -> 3833;
3858 -> 3857;
3858 -> 3811;
3859 -> 3811;
3860 -> 3859;
3860 -> 3833;
3861 -> 3860;
3861 -> 3811;
3862 -> 3811;
3863 -> 3862;
3863 -> 3833;
3864 -> 3863;
3864 -> 3811;
3865 -> 3811;
3866 -> 3811;
3867 -> 3834;
3867 -> 3866;
3868 -> 3867;
3868 -> 3833;
3868 -> 3866;
3869 -> 3868;
3869 -> 3811;
3870 -> 3811;
3871 -> 3833;
3871 -> 3870;
3871 -> 3811;
3872 -> 3833;
3872 -> 3811;
3873 -> 3811;
3874 -> 3811;
3875 -> 3811;
3876 -> 3572;
3877 -> 3755;
3877 -> 3572;
3878 -> 3755;
3878 -> 3572;
3879 -> 3756;
3879 -> 3572;
3880 -> 3876;
3880 -> 3572;
3881 -> 3876;
3881 -> 3572;
3882 -> 3877;
3882 -> 3572;
3883 -> 3878;
3883 -> 3572;
3884 -> 3877;
3884 -> 3572;
3885 -> 3879;
3885 -> 3572;
3886 -> 3572;
3887 -> 3880;
3887 -> 3886;
3888 -> 3887;
3888 -> 3833;
3888 -> 3886;
3889 -> 0;
3889 -> 3886;
3890 -> 3886;
3891 -> 3888;
3891 -> 3890;
3892 -> 3889;
3892 -> 3890;
3893 -> 3891;
3893 -> 3572;
3894 -> 3572;
3894 -> 3833;
3894 -> 3876;
3895 -> 3572;
3895 -> 3894;
3896 -> 3877;
3896 -> 3894;
3897 -> 3878;
3897 -> 3894;
3898 -> 3879;
3898 -> 3894;
3899 -> 3894;
3900 -> 3894;
3901 -> 3894;
3902 -> 3894;
3903 -> 3896;
3903 -> 3894;
3904 -> 3897;
3904 -> 3894;
3905 -> 3894;
3906 -> 3898;
3906 -> 3894;
3907 -> 3900;
3907 -> 3894;
3908 -> 0;
3908 -> 3894;
3909 -> 3894;
3910 -> 3907;
3910 -> 3909;
3911 -> 3908;
3911 -> 3909;
3912 -> 3894;
3913 -> 3900;
3913 -> 3912;
3914 -> 3913;
3914 -> 3894;
3914 -> 3912;
3915 -> 0;
3915 -> 3912;
3916 -> 3912;
3917 -> 3914;
3917 -> 3916;
3918 -> 3915;
3918 -> 3916;
3919 -> 3917;
3919 -> 3894;
3920 -> 3899;
3920 -> 3894;
3921 -> 3748;
3921 -> 3894;
3921 -> 0;
3921 -> 3747;
3922 -> 3748;
3922 -> 3894;
3922 -> 3750;
3922 -> 3747;
3923 -> 3921;
3923 -> 3572;
3924 -> 3714;
3924 -> 3894;
3925 -> 3924;
3925 -> 3894;
3926 -> 3894;
3927 -> 3894;
3927 -> 3926;
3928 -> 3927;
3928 -> 3894;
3928 -> 0;
3928 -> 3926;
3929 -> 3926;
3930 -> 3927;
3930 -> 3894;
3930 -> 3929;
3930 -> 3926;
3931 -> 3928;
3931 -> 3894;
3932 -> 3894;
3933 -> 3894;
3933 -> 3932;
3934 -> 3933;
3934 -> 3894;
3934 -> 0;
3934 -> 3932;
3935 -> 3934;
3935 -> 3894;
3936 -> 3894;
3937 -> 3894;
3938 -> 3894;
3939 -> 3894;
3940 -> 3939;
3940 -> 3894;
3941 -> 3894;
3942 -> 3941;
3942 -> 3894;
3943 -> 3925;
3943 -> 3894;
3944 -> 3894;
3945 -> 3894;
3946 -> 3944;
3946 -> 3945;
3947 -> 3946;
3947 -> 0;
3947 -> 3945;
3948 -> 3946;
3948 -> 0;
3948 -> 3945;
3949 -> 3945;
3950 -> 0;
3950 -> 3945;
3951 -> 3946;
3951 -> 3950;
3951 -> 3945;
3952 -> 0;
3952 -> 3945;
3953 -> 3946;
3953 -> 3952;
3953 -> 3945;
3954 -> 3945;
3955 -> 0;
3955 -> 3945;
3956 -> 3946;
3956 -> 3955;
3956 -> 3945;
3957 -> 3956;
3957 -> 3945;
3958 -> 3945;
3959 -> 3957;
3959 -> 3958;
3960 -> 3958;
3961 -> 3959;
3961 -> 3960;
3961 -> 3958;
3962 -> 3894;
3963 -> 3894;
3964 -> 3943;
3964 -> 3894;
3965 -> 3894;
3966 -> 3963;
3966 -> 3894;
3967 -> 3963;
3967 -> 3894;
3968 -> 3964;
3968 -> 3894;
3969 -> 3963;
3969 -> 3894;
3970 -> 3894;
3971 -> 3894;
3972 -> 3894;
3973 -> 3966;
3973 -> 3894;
3974 -> 3968;
3974 -> 3894;
3975 -> 3966;
3975 -> 3894;
3976 -> 3971;
3976 -> 3894;
3977 -> 3972;
3977 -> 3894;
3978 -> 3977;
3979 -> 3973;
3979 -> 3978;
3979 -> 3977;
3980 -> 3975;
3980 -> 0;
3980 -> 3977;
3981 -> 3979;
3981 -> 3980;
3981 -> 3977;
3982 -> 3972;
3982 -> 3981;
3983 -> 3982;
3983 -> 3894;
3983 -> 3981;
3984 -> 3982;
3984 -> 3981;
3985 -> 3982;
3985 -> 3894;
3985 -> 3973;
3985 -> 3981;
3986 -> 3975;
3986 -> 3981;
3987 -> 3981;
3988 -> 3986;
3988 -> 3987;
3989 -> 3985;
3989 -> 3988;
3989 -> 3981;
3990 -> 3894;
3991 -> 3963;
3991 -> 0;
3991 -> 3971;
3992 -> 3967;
3992 -> 3991;
3993 -> 3991;
3994 -> 3991;
3994 -> 3993;
3995 -> 3992;
3995 -> 3993;
3996 -> 3994;
3996 -> 0;
3996 -> 3993;
3997 -> 3993;
3998 -> 3996;
3998 -> 3993;
3999 -> 3995;
3999 -> 3998;
4000 -> 3970;
4000 -> 3991;
4001 -> 3969;
4001 -> 3991;
4002 -> 3999;
4002 -> 3991;
4003 -> 4000;
4003 -> 3991;
4004 -> 4001;
4004 -> 3991;
4005 -> 3991;
4005 -> 3894;
4006 -> 0;
4006 -> 3991;
4007 -> 3991;
4008 -> 4005;
4008 -> 4007;
4009 -> 4006;
4009 -> 4007;
4010 -> 4002;
4010 -> 3991;
4011 -> 4003;
4011 -> 3991;
4012 -> 4004;
4012 -> 3991;
4013 -> 4010;
4013 -> 3991;
4014 -> 4011;
4014 -> 3991;
4015 -> 4012;
4015 -> 3991;
4016 -> 4013;
4016 -> 3991;
4017 -> 4014;
4017 -> 3991;
4018 -> 3991;
4019 -> 3991;
4020 -> 4019;
4020 -> 3894;
4020 -> 3991;
4021 -> 0;
4021 -> 3991;
4022 -> 3991;
4023 -> 4020;
4023 -> 4022;
4024 -> 4021;
4024 -> 4022;
4025 -> 4016;
4025 -> 3991;
4026 -> 4017;
4026 -> 3991;
4027 -> 4018;
4027 -> 3991;
4028 -> 4025;
4028 -> 3991;
4029 -> 4026;
4029 -> 3991;
4030 -> 3991;
4031 -> 4027;
4031 -> 3991;
4032 -> 3991;
4033 -> 3991;
4034 -> 3991;
4034 -> 3894;
4035 -> 3991;
4036 -> 3991;
4037 -> 4031;
4037 -> 3991;
4038 -> 3991;
4039 -> 3991;
4040 -> 3991;
4040 -> 3894;
4041 -> 3991;
4042 -> 3991;
4042 -> 3894;
4043 -> 3991;
4044 -> 3991;
4045 -> 4018;
4046 -> 3894;
4046 -> 4045;
4047 -> 4046;
4047 -> 4018;
4047 -> 4045;
4048 -> 0;
4048 -> 4045;
4049 -> 4045;
4050 -> 4047;
4050 -> 4049;
4051 -> 4048;
4051 -> 4049;
4052 -> 4050;
4052 -> 4018;
4053 -> 4018;
4054 -> 4018;
4055 -> 3894;
4056 -> 3572;
4056 -> 4055;
4057 -> 4056;
4057 -> 4018;
4057 -> 0;
4057 -> 4055;
4058 -> 4057;
4058 -> 3894;
4059 -> 3894;
4059 -> 4058;
4060 -> 3711;
4060 -> 0;
4060 -> 3894;
4061 -> 3894;
4062 -> 4059;
4062 -> 3572;
4063 -> 3572;
4064 -> 3572;
4065 -> 4063;
4065 -> 4064;
4066 -> 4064;
4067 -> 4065;
4067 -> 4066;
4068 -> 4067;
4068 -> 4018;
4068 -> 4066;
4069 -> 4068;
4069 -> 4064;
4070 -> 4064;
4071 -> 4065;
4071 -> 4070;
4072 -> 4071;
4072 -> 4018;
4072 -> 4070;
4073 -> 4072;
4073 -> 4064;
4074 -> 4073;
4074 -> 4018;
4075 -> 4074;
4076 -> 3572;
4077 -> 3572;
4078 -> 3572;
4079 -> 3572;
4080 -> 3572;
4081 -> 4076;
4081 -> 3572;
4082 -> 4076;
4082 -> 3572;
4083 -> 4076;
4083 -> 3572;
4084 -> 3572;
4085 -> 3572;
4086 -> 4079;
4086 -> 4085;
4086 -> 3572;
4087 -> 3572;
4088 -> 4080;
4088 -> 4087;
4088 -> 3572;
4089 -> 3572;
4090 -> 4018;
4090 -> 0;
4091 -> 4090;
4091 -> 4084;
4091 -> 4018;
4092 -> 4077;
4092 -> 4018;
4093 -> 4080;
4093 -> 4092;
4094 -> 4079;
4094 -> 4092;
4095 -> 4093;
4095 -> 4092;
4096 -> 4094;
4096 -> 4092;
4097 -> 4092;
4098 -> 4018;
4098 -> 4092;
4098 -> 0;
4098 -> 3572;
4099 -> 4079;
4099 -> 4098;
4100 -> 4098;
4101 -> 4018;
4101 -> 4098;
4102 -> 4080;
4102 -> 4098;
4103 -> 4098;
4104 -> 4099;
4104 -> 4103;
4105 -> 4100;
4105 -> 4103;
4106 -> 4101;
4106 -> 4103;
4107 -> 4102;
4107 -> 4103;
4108 -> 4084;
4108 -> 4103;
4109 -> 4106;
4109 -> 4092;
4109 -> 4103;
4110 -> 4103;
4111 -> 4018;
4111 -> 4092;
4111 -> 0;
4111 -> 3572;
4112 -> 3572;
4113 -> 3572;
4114 -> 4018;
4114 -> 3572;
4115 -> 4092;
4115 -> 4018;
4116 -> 3682;
4117 -> 4092;
4118 -> 4092;
4119 -> 4092;
4120 -> 4117;
4120 -> 4092;
4121 -> 4118;
4121 -> 4092;
4122 -> 4092;
4123 -> 4092;
4123 -> 0;
4124 -> 4092;
4125 -> 4119;
4125 -> 4092;
4126 -> 4120;
4126 -> 4092;
4127 -> 4121;
4127 -> 4092;
4128 -> 4119;
4128 -> 4092;
4129 -> 4119;
4129 -> 0;
4129 -> 4092;
4130 -> 4119;
4130 -> 0;
4130 -> 4092;
4131 -> 4127;
4131 -> 4092;
4132 -> 4131;
4132 -> 4092;
4133 -> 4125;
4133 -> 4092;
4134 -> 4126;
4134 -> 4092;
4135 -> 4128;
4135 -> 4092;
4136 -> 4092;
4137 -> 4133;
4137 -> 4136;
4137 -> 4092;
4138 -> 4092;
4139 -> 4125;
4139 -> 4092;
4140 -> 4092;
4141 -> 4138;
4141 -> 4140;
4141 -> 4092;
4142 -> 4125;
4142 -> 4092;
4143 -> 4142;
4143 -> 4092;
4144 -> 4131;
4144 -> 4143;
4145 -> 3485;
4146 -> 3486;
4146 -> 4145;
4147 -> 3486;
4147 -> 4145;
4148 -> 3486;
4148 -> 4145;
4149 -> 3486;
4149 -> 4145;
4150 -> 4145;
4151 -> 4092;
4151 -> 4150;
4152 -> 4151;
4152 -> 4018;
4152 -> 4150;
4153 -> 4152;
4153 -> 0;
4153 -> 4150;
4154 -> 4153;
4154 -> 4145;
4155 -> 3485;
4156 -> 3485;
4157 -> 4125;
4157 -> 3625;
4157 -> 3624;
4158 -> 3639;
4159 -> 3639;
4160 -> 4125;
4160 -> 4159;
4161 -> 4159;
4162 -> 4159;
4163 -> 4159;
4164 -> 4162;
4164 -> 4163;
4165 -> 4162;
4165 -> 3639;
4166 -> 3639;
4167 -> 3639;
4168 -> 4165;
4168 -> 3639;
4169 -> 4166;
4169 -> 3639;
4170 -> 3639;
4171 -> 4125;
4172 -> 4125;
4173 -> 4172;
4173 -> 4125;
4174 -> 4125;
4175 -> 4125;
4175 -> 4174;
4176 -> 4175;
4176 -> 4125;
4176 -> 4174;
4177 -> 4176;
4177 -> 4125;
4178 -> 4125;
4179 -> 4125;
4180 -> 4125;
4181 -> 4125;
4182 -> 4125;
4183 -> 4125;
4184 -> 4125;
4185 -> 4125;
4186 -> 4125;
4187 -> 4125;
4187 -> 0;
4188 -> 3485;
4189 -> 3486;
4189 -> 4188;
4189 -> 3485;
4190 -> 3485;
4191 -> 3485;
4192 -> 4190;
4192 -> 4191;
4193 -> 4191;
4194 -> 4192;
4194 -> 4193;
4195 -> 4194;
4195 -> 4193;
4196 -> 4194;
4196 -> 4193;
4197 -> 4194;
4197 -> 4193;
4198 -> 4194;
4198 -> 4193;
4199 -> 4194;
4199 -> 4193;
4200 -> 4193;
4201 -> 3486;
4201 -> 4200;
4201 -> 4193;
4202 -> 4125;
4202 -> 4193;
4203 -> 0;
4203 -> 4193;
4204 -> 4193;
4205 -> 4202;
4205 -> 4204;
4206 -> 4203;
4206 -> 4204;
4207 -> 4125;
4207 -> 4193;
4208 -> 0;
4208 -> 4193;
4209 -> 4193;
4210 -> 4207;
4210 -> 4209;
4211 -> 4208;
4211 -> 4209;
4212 -> 4192;
4212 -> 4191;
4213 -> 4191;
4214 -> 3486;
4214 -> 4213;
4214 -> 4191;
4215 -> 3486;
4215 -> 3485;
4216 -> 3486;
4216 -> 3485;
4217 -> 3486;
4217 -> 3485;
4218 -> 3486;
4218 -> 3485;
4219 -> 3486;
4219 -> 3485;
4220 -> 3485;
4221 -> 4215;
4221 -> 4125;
4221 -> 3485;
4222 -> 3485;
4223 -> 4216;
4223 -> 4125;
4223 -> 3485;
4224 -> 4220;
4224 -> 3485;
4225 -> 4222;
4225 -> 3485;
4226 -> 4125;
4227 -> 4226;
4227 -> 4125;
4228 -> 4226;
4228 -> 4125;
4229 -> 4228;
4229 -> 4125;
4230 -> 4227;
4230 -> 4125;
4231 -> 4125;
4232 -> 4230;
4232 -> 4125;
4233 -> 4229;
4233 -> 4125;
4234 -> 4125;
4235 -> 4226;
4235 -> 4125;
4236 -> 4226;
4237 -> 4226;
4238 -> 4236;
4238 -> 4226;
4239 -> 4237;
4239 -> 4226;
4240 -> 4226;
4241 -> 4226;
4241 -> 0;
4242 -> 4226;
4243 -> 4238;
4243 -> 4226;
4244 -> 4239;
4244 -> 4226;
4245 -> 4226;
4246 -> 4226;
4246 -> 0;
4247 -> 4226;
4247 -> 0;
4248 -> 4244;
4248 -> 4226;
4249 -> 4248;
4249 -> 4226;
4250 -> 4226;
4251 -> 4243;
4251 -> 4226;
4252 -> 4245;
4252 -> 4226;
4253 -> 4226;
4254 -> 4250;
4254 -> 4253;
4254 -> 4226;
4255 -> 4226;
4256 -> 4226;
4257 -> 4226;
4258 -> 4255;
4258 -> 4257;
4258 -> 4226;
4259 -> 4226;
4260 -> 4259;
4260 -> 4226;
4261 -> 4248;
4261 -> 4260;
4262 -> 4226;
4262 -> 4150;
4263 -> 4262;
4263 -> 4226;
4263 -> 4150;
4264 -> 4263;
4264 -> 0;
4264 -> 4150;
4265 -> 4264;
4265 -> 4145;
4266 -> 3486;
4266 -> 3485;
4267 -> 3486;
4267 -> 3485;
4268 -> 3486;
4268 -> 3485;
4269 -> 4266;
4269 -> 3485;
4270 -> 3485;
4271 -> 4267;
4271 -> 3485;
4272 -> 3485;
4273 -> 3485;
4274 -> 4269;
4274 -> 4273;
4275 -> 4270;
4275 -> 4273;
4276 -> 4271;
4276 -> 4273;
4277 -> 4272;
4277 -> 4273;
4278 -> 4268;
4278 -> 4273;
4280 -> 4279;
4282 -> 4281;
4284 -> 4283;
4286 -> 4282;
4286 -> 4285;
4287 -> 4284;
4287 -> 4285;
4289 -> 4282;
4289 -> 4288;
4290 -> 4284;
4290 -> 4288;
4292 -> 4282;
4292 -> 4291;
4293 -> 4284;
4293 -> 4291;
4295 -> 4282;
4295 -> 4294;
4296 -> 4284;
4296 -> 4294;
4298 -> 4282;
4298 -> 4297;
4299 -> 4284;
4299 -> 4297;
4301 -> 4282;
4301 -> 4300;
4302 -> 4284;
4302 -> 4300;
4304 -> 4282;
4304 -> 4303;
4305 -> 4284;
4305 -> 4303;
4307 -> 4282;
4307 -> 4306;
4308 -> 4284;
4308 -> 4306;
4310 -> 4282;
4310 -> 4309;
4311 -> 4284;
4311 -> 4309;
4313 -> 4282;
4313 -> 4312;
4314 -> 4284;
4314 -> 4312;
4316 -> 4282;
4316 -> 4315;
4318 -> 4282;
4318 -> 4317;
4320 -> 4285;
4320 -> 4319;
4321 -> 4288;
4321 -> 4319;
4322 -> 4291;
4322 -> 4319;
4323 -> 4294;
4323 -> 4319;
4324 -> 4297;
4324 -> 4319;
4325 -> 4300;
4325 -> 4319;
4326 -> 4303;
4326 -> 4319;
4327 -> 4306;
4327 -> 4319;
4328 -> 4309;
4328 -> 4319;
4329 -> 4312;
4329 -> 4319;
4330 -> 4315;
4330 -> 4319;
4331 -> 4317;
4331 -> 4319;
4332 -> 4319;
4334 -> 4282;
4334 -> 4333;
4335 -> 4284;
4335 -> 4333;
4337 -> 4284;
4337 -> 4336;
4338 -> 4282;
4338 -> 4336;
4340 -> 4284;
4340 -> 4339;
4341 -> 4282;
4341 -> 4339;
4343 -> 4284;
4343 -> 4342;
4344 -> 4282;
4344 -> 4342;
4346 -> 4284;
4346 -> 4345;
4347 -> 4282;
4347 -> 4345;
4349 -> 4284;
4349 -> 4348;
4350 -> 4282;
4350 -> 4348;
4352 -> 4284;
4352 -> 4351;
4353 -> 4282;
4353 -> 4351;
4355 -> 4284;
4355 -> 4354;
4356 -> 4282;
4356 -> 4354;
4358 -> 4284;
4358 -> 4357;
4359 -> 4282;
4359 -> 4357;
4361 -> 4284;
4361 -> 4360;
4362 -> 4282;
4362 -> 4360;
4364 -> 4284;
4364 -> 4363;
4365 -> 4282;
4365 -> 4363;
4367 -> 4284;
4367 -> 4366;
4368 -> 4282;
4368 -> 4366;
4370 -> 4333;
4370 -> 4369;
4371 -> 4336;
4371 -> 4369;
4372 -> 4339;
4372 -> 4369;
4373 -> 4342;
4373 -> 4369;
4374 -> 4345;
4374 -> 4369;
4375 -> 4348;
4375 -> 4369;
4376 -> 4351;
4376 -> 4369;
4377 -> 4354;
4377 -> 4369;
4378 -> 4357;
4378 -> 4369;
4379 -> 4360;
4379 -> 4369;
4380 -> 4363;
4380 -> 4369;
4381 -> 4366;
4381 -> 4369;
4382 -> 4369;
4383 -> 4274;
4383 -> 4273;
4384 -> 4275;
4384 -> 4273;
4385 -> 4276;
4385 -> 4273;
4386 -> 4277;
4386 -> 4273;
4387 -> 4273;
4388 -> 4383;
4388 -> 4387;
4389 -> 4384;
4389 -> 4387;
4390 -> 4385;
4390 -> 4387;
4391 -> 4386;
4391 -> 4387;
4392 -> 4278;
4392 -> 4387;
4393 -> 4392;
4393 -> 4387;
4394 -> 4392;
4394 -> 4387;
4395 -> 4392;
4395 -> 4387;
4396 -> 4392;
4396 -> 4387;
4397 -> 4387;
4398 -> 4388;
4398 -> 4397;
4398 -> 4387;
4399 -> 4387;
4400 -> 4391;
4400 -> 4399;
4400 -> 4387;
4401 -> 4387;
4402 -> 4391;
4402 -> 4401;
4402 -> 4387;
4403 -> 4388;
4403 -> 4392;
4403 -> 4387;
4404 -> 4389;
4404 -> 4392;
4404 -> 4387;
4405 -> 4390;
4405 -> 4392;
4405 -> 4387;
4406 -> 4391;
4406 -> 4392;
4406 -> 4387;
4407 -> 3486;
4407 -> 4226;
4407 -> 4403;
4407 -> 4404;
4407 -> 4405;
4407 -> 4406;
4407 -> 3482;
4408 -> 4407;
4408 -> 3482;
4409 -> 3484;
4409 -> 3482;
4410 -> 3482;
4411 -> 4408;
4411 -> 4410;
4412 -> 4409;
4412 -> 4410;
4413 -> 4411;
4413 -> 4410;
4414 -> 4412;
4414 -> 4410;
4415 -> 4410;
4416 -> 4413;
4416 -> 4415;
4417 -> 4414;
4417 -> 4415;
4418 -> 4416;
4418 -> 4415;
4419 -> 4417;
4419 -> 4415;
4420 -> 4415;
4421 -> 4415;
4422 -> 4418;
4422 -> 4421;
4423 -> 4419;
4423 -> 4421;
4424 -> 4420;
4424 -> 4421;
4425 -> 4421;
4426 -> 4423;
4426 -> 4425;
4426 -> 4421;
4427 -> 4423;
4427 -> 4421;
4428 -> 4427;
4428 -> 439;
4428 -> 3478;
4428 -> 3479;
4428 -> 3480;
4428 -> 3481;
4428 -> 2991;
4428 -> 2992;
4428 -> 3001;
4428 -> 2993;
4428 -> 2994;
4428 -> 3018;
4428 -> 2997;
4428 -> 2998;
4428 -> 3011;
4428 -> 2999;
4428 -> 3000;
4428 -> 2996;
4428 -> 3015;
4428 -> 3016;
4428 -> 3017;
4428 -> 2983;
4428 -> 3113;
4428 -> 3114;
4428 -> 3123;
4428 -> 3115;
4428 -> 3116;
4428 -> 3140;
4428 -> 3119;
4428 -> 3120;
4428 -> 3133;
4428 -> 3121;
4428 -> 3122;
4428 -> 3118;
4428 -> 3137;
4428 -> 3138;
4428 -> 3139;
4428 -> 3105;
4428 -> 3281;
4428 -> 3282;
4428 -> 3291;
4428 -> 3283;
4428 -> 3284;
4428 -> 3308;
4428 -> 3287;
4428 -> 3288;
4428 -> 3301;
4428 -> 3289;
4428 -> 3290;
4428 -> 3286;
4428 -> 3305;
4428 -> 3306;
4428 -> 3307;
4428 -> 3216;
4428 -> 3273;
4428 -> 3449;
4428 -> 3450;
4428 -> 3459;
4428 -> 3451;
4428 -> 3452;
4428 -> 3476;
4428 -> 3455;
4428 -> 3456;
4428 -> 3469;
4428 -> 3457;
4428 -> 3458;
4428 -> 3454;
4428 -> 3473;
4428 -> 3474;
4428 -> 3475;
4428 -> 3334;
4428 -> 3384;
4428 -> 3441;
4428 -> 2918;
4428 -> 3044;
4428 -> 3166;
4428 -> 4421;
4429 -> 4421;
4430 -> 4427;
4430 -> 4429;
4430 -> 439;
4430 -> 3478;
4430 -> 3479;
4430 -> 3480;
4430 -> 3481;
4430 -> 2991;
4430 -> 2992;
4430 -> 3001;
4430 -> 2993;
4430 -> 2994;
4430 -> 3018;
4430 -> 2997;
4430 -> 2998;
4430 -> 3011;
4430 -> 2999;
4430 -> 3000;
4430 -> 2996;
4430 -> 3015;
4430 -> 3016;
4430 -> 3017;
4430 -> 2983;
4430 -> 3113;
4430 -> 3114;
4430 -> 3123;
4430 -> 3115;
4430 -> 3116;
4430 -> 3140;
4430 -> 3119;
4430 -> 3120;
4430 -> 3133;
4430 -> 3121;
4430 -> 3122;
4430 -> 3118;
4430 -> 3137;
4430 -> 3138;
4430 -> 3139;
4430 -> 3105;
4430 -> 3281;
4430 -> 3282;
4430 -> 3291;
4430 -> 3283;
4430 -> 3284;
4430 -> 3308;
4430 -> 3287;
4430 -> 3288;
4430 -> 3301;
4430 -> 3289;
4430 -> 3290;
4430 -> 3286;
4430 -> 3305;
4430 -> 3306;
4430 -> 3307;
4430 -> 3216;
4430 -> 3273;
4430 -> 3449;
4430 -> 3450;
4430 -> 3459;
4430 -> 3451;
4430 -> 3452;
4430 -> 3476;
4430 -> 3455;
4430 -> 3456;
4430 -> 3469;
4430 -> 3457;
4430 -> 3458;
4430 -> 3454;
4430 -> 3473;
4430 -> 3474;
4430 -> 3475;
4430 -> 3334;
4430 -> 3384;
4430 -> 3441;
4430 -> 2918;
4430 -> 3044;
4430 -> 3166;
4430 -> 4421;
4431 -> 4430;
4431 -> 4429;
4432 -> 4431;
4432 -> 4430;
4432 -> 4429;
4433 -> 4423;
4433 -> 4421;
4434 -> 4433;
4434 -> 4432;
4434 -> 4421;
4435 -> 4421;
4436 -> 4433;
4436 -> 4435;
4436 -> 4432;
4436 -> 4421;
4437 -> 4436;
4437 -> 4435;
4438 -> 4437;
4438 -> 4436;
4438 -> 4435;
4439 -> 4422;
4439 -> 4421;
4440 -> 4424;
4440 -> 4432;
4440 -> 4438;
4440 -> 4421;
4441 -> 4439;
4441 -> 4440;
4441 -> 4421;
4442 -> 4421;
4443 -> 4441;
4443 -> 4442;
4444 -> 4441;
4444 -> 4442;
4445 -> 4441;
4445 -> 4442;
4446 -> 4441;
4446 -> 4442;
4447 -> 4441;
4447 -> 4442;
4448 -> 4447;
4448 -> 4442;
4449 -> 4447;
4449 -> 4442;
4450 -> 4447;
4450 -> 4442;
4451 -> 4447;
4451 -> 4442;
4452 -> 4447;
4452 -> 4442;
4453 -> 4447;
4453 -> 4442;
4454 -> 4447;
4454 -> 4442;
4455 -> 4447;
4455 -> 4442;
4456 -> 4447;
4456 -> 4442;
4457 -> 4447;
4457 -> 4442;
4458 -> 4447;
4458 -> 4442;
4459 -> 4443;
4459 -> 4441;
4459 -> 4447;
4459 -> 4442;
4460 -> 4443;
4460 -> 4441;
4460 -> 4447;
4460 -> 4442;
4461 -> 4443;
4461 -> 4441;
4461 -> 4447;
4461 -> 4442;
4462 -> 4443;
4462 -> 4441;
4462 -> 4447;
4462 -> 4442;
4463 -> 4445;
4463 -> 4442;
4464 -> 4463;
4465 -> 4464;
4465 -> 4447;
4465 -> 4442;
4466 -> 4446;
4466 -> 4442;
4467 -> 4466;
4468 -> 4467;
4468 -> 4447;
4468 -> 4442;
4469 -> 4442;
4470 -> 4442;
4471 -> 4443;
4471 -> 4441;
4471 -> 4470;
4471 -> 4442;
4472 -> 4443;
4472 -> 4441;
4472 -> 4442;
4473 -> 0;
4473 -> 4442;
4474 -> 4443;
4474 -> 4471;
4475 -> 4471;
4476 -> 4474;
4476 -> 4475;
4476 -> 4471;
4477 -> 4474;
4477 -> 4472;
4477 -> 4447;
4477 -> 4476;
4478 -> 4443;
4478 -> 4472;
4478 -> 4447;
4478 -> 4476;
4479 -> 4444;
4479 -> 4447;
4479 -> 4442;
4480 -> 4447;
4480 -> 4479;
4480 -> 4442;
4481 -> 4447;
4481 -> 4462;
4481 -> 4472;
4481 -> 4480;
4482 -> 4481;
4483 -> 4482;
4483 -> 4447;
4483 -> 4481;
4484 -> 4480;
4485 -> 4474;
4485 -> 4484;
4485 -> 4480;
4486 -> 4474;
4486 -> 4482;
4486 -> 4447;
4486 -> 4485;
4487 -> 4480;
4488 -> 4447;
4488 -> 4486;
4488 -> 4487;
4488 -> 4480;
4489 -> 4447;
4489 -> 4486;
4489 -> 4482;
4489 -> 4487;
4489 -> 4480;
4490 -> 4447;
4490 -> 4462;
4490 -> 4482;
4490 -> 4442;
4491 -> 4490;
4491 -> 4447;
4491 -> 4442;
4492 -> 4441;
4492 -> 4490;
4492 -> 4478;
4492 -> 4460;
4492 -> 4461;
4492 -> 4483;
4492 -> 4486;
4492 -> 4491;
4492 -> 4454;
4492 -> 4477;
4492 -> 4479;
4492 -> 4465;
4492 -> 4468;
4492 -> 4458;
4492 -> 4447;
4492 -> 4462;
4492 -> 4421;
4493 -> 4443;
4493 -> 4492;
4493 -> 4447;
4493 -> 4442;
4494 -> 4447;
4494 -> 4492;
4494 -> 4487;
4494 -> 4480;
4495 -> 4494;
4496 -> 4495;
4496 -> 4447;
4496 -> 4494;
4497 -> 4443;
4497 -> 4496;
4497 -> 4447;
4497 -> 4442;
4498 -> 4423;
4498 -> 4421;
4499 -> 4498;
4499 -> 4438;
4499 -> 4421;
4500 -> 4499;
4501 -> 4500;
4501 -> 4496;
4501 -> 4438;
4501 -> 4499;
4502 -> 4501;
4502 -> 4500;
4503 -> 4501;
4503 -> 4500;
4504 -> 4502;
4504 -> 4500;
4505 -> 4500;
4506 -> 4504;
4506 -> 4505;
4506 -> 4500;
4507 -> 4504;
4507 -> 4501;
4507 -> 4500;
4508 -> 4503;
4508 -> 4501;
4508 -> 4507;
4508 -> 4500;
4509 -> 4508;
4510 -> 4503;
4510 -> 4509;
4510 -> 4504;
4510 -> 4500;
4511 -> 4503;
4511 -> 4509;
4511 -> 4504;
4511 -> 4500;
4512 -> 4503;
4512 -> 4509;
4512 -> 4500;
4513 -> 4503;
4513 -> 4509;
4513 -> 4504;
4513 -> 4512;
4514 -> 4500;
4515 -> 4503;
4515 -> 4509;
4515 -> 4514;
4515 -> 4500;
4516 -> 4515;
4517 -> 4503;
4517 -> 4509;
4517 -> 4504;
4517 -> 4516;
4518 -> 4500;
4519 -> 4503;
4519 -> 4509;
4519 -> 4518;
4519 -> 4500;
4520 -> 4500;
4521 -> 4504;
4521 -> 4509;
4521 -> 4520;
4521 -> 4500;
4522 -> 4503;
4522 -> 4509;
4522 -> 4504;
4522 -> 4500;
4523 -> 4500;
4524 -> 4503;
4524 -> 4509;
4524 -> 4523;
4524 -> 4500;
4525 -> 4524;
4526 -> 4503;
4526 -> 4509;
4526 -> 4504;
4526 -> 4500;
4527 -> 4500;
4528 -> 4501;
4528 -> 4527;
4528 -> 4509;
4528 -> 4499;
4529 -> 4499;
4530 -> 4528;
4530 -> 4529;
4530 -> 4499;
4531 -> 4528;
4531 -> 4530;
4532 -> 4531;
4533 -> 4531;
4534 -> 4531;
4535 -> 4531;
4536 -> 4531;
4536 -> 4535;
4537 -> 4531;
4538 -> 4537;
4539 -> 4531;
4539 -> 4538;
4540 -> 4531;
4541 -> 4531;
4542 -> 4531;
4543 -> 4531;
4544 -> 4543;
4545 -> 4531;
4546 -> 4543;
4547 -> 4543;
4548 -> 4531;
4548 -> 4547;
4549 -> 4547;
4550 -> 4548;
4550 -> 4531;
4550 -> 4549;
4550 -> 4547;
4551 -> 4548;
4551 -> 4531;
4551 -> 4550;
4552 -> 4550;
4553 -> 4551;
4553 -> 4548;
4553 -> 4550;
4554 -> 4548;
4554 -> 4531;
4554 -> 4553;
4554 -> 4547;
4555 -> 4554;
4555 -> 4543;
4556 -> 4543;
4557 -> 4531;
4557 -> 4556;
4558 -> 4556;
4559 -> 4557;
4559 -> 4531;
4559 -> 4553;
4559 -> 4558;
4559 -> 4556;
4560 -> 4557;
4560 -> 4531;
4560 -> 4553;
4560 -> 4559;
4560 -> 4556;
4561 -> 4560;
4561 -> 4543;
4562 -> 4531;
4562 -> 4543;
4563 -> 4555;
4563 -> 4562;
4564 -> 4561;
4564 -> 4562;
4565 -> 4563;
4565 -> 4564;
4565 -> 4531;
4565 -> 4553;
4565 -> 4559;
4565 -> 4551;
4565 -> 4552;
4565 -> 4562;
4566 -> 4531;
4566 -> 4565;
4567 -> 4565;
4568 -> 4565;
4569 -> 4565;
4570 -> 4565;
4571 -> 4565;
4571 -> 4570;
4572 -> 4565;
4573 -> 4572;
4574 -> 4565;
4574 -> 4573;
4575 -> 4565;
4576 -> 4565;
4577 -> 4565;
4578 -> 4565;
4579 -> 4565;
4580 -> 4421;
4581 -> 4496;
4581 -> 4565;
4581 -> 4580;
4581 -> 4421;
4582 -> 4421;
4583 -> 4423;
4583 -> 4421;
4584 -> 4422;
4584 -> 4421;
4585 -> 4421;
4586 -> 4583;
4586 -> 4585;
4587 -> 4584;
4587 -> 4585;
4588 -> 4585;
4589 -> 4585;
4590 -> 4587;
4590 -> 4585;
4591 -> 4590;
4591 -> 4565;
4591 -> 4585;
4592 -> 4565;
4592 -> 4585;
4593 -> 4591;
4593 -> 4585;
4594 -> 4588;
4594 -> 4593;
4595 -> 4594;
4595 -> 4585;
4596 -> 4594;
4596 -> 4585;
4597 -> 4596;
4597 -> 4585;
4598 -> 4586;
4598 -> 4585;
4599 -> 4598;
4599 -> 4565;
4599 -> 4585;
4600 -> 4585;
4601 -> 4598;
4601 -> 4600;
4601 -> 4565;
4601 -> 4585;
4602 -> 4586;
4602 -> 4585;
4603 -> 4602;
4603 -> 4601;
4603 -> 4585;
4604 -> 4585;
4605 -> 4602;
4605 -> 4604;
4605 -> 4601;
4605 -> 4585;
4606 -> 4586;
4606 -> 4585;
4607 -> 4585;
4608 -> 4606;
4608 -> 4607;
4610 -> 4609;
4611 -> 4609;
4612 -> 4611;
4612 -> 4607;
4613 -> 4607;
4614 -> 4608;
4614 -> 4607;
4615 -> 4614;
4615 -> 4605;
4615 -> 4607;
4616 -> 4615;
4617 -> 4615;
4618 -> 4613;
4618 -> 4617;
4618 -> 4615;
4619 -> 4615;
4620 -> 4619;
4620 -> 4617;
4620 -> 4615;
4621 -> 4619;
4621 -> 4605;
4621 -> 4615;
4622 -> 4615;
4622 -> 4605;
4623 -> 4615;
4624 -> 4621;
4624 -> 4623;
4625 -> 4622;
4625 -> 4623;
4626 -> 4612;
4626 -> 4623;
4627 -> 4623;
4628 -> 4624;
4628 -> 4627;
4628 -> 4623;
4629 -> 4623;
4630 -> 4625;
4630 -> 4629;
4630 -> 4623;
4631 -> 4625;
4631 -> 4605;
4631 -> 4623;
4632 -> 4624;
4632 -> 4605;
4632 -> 4631;
4632 -> 4623;
4633 -> 4623;
4634 -> 4632;
4634 -> 4633;
4634 -> 4623;
4635 -> 4625;
4635 -> 4605;
4635 -> 4623;
4636 -> 4624;
4636 -> 4605;
4636 -> 4635;
4636 -> 4623;
4637 -> 4636;
4638 -> 4585;
4639 -> 4638;
4639 -> 4585;
4640 -> 4585;
4641 -> 4585;
4642 -> 4638;
4642 -> 4641;
4642 -> 4639;
4642 -> 4585;
4643 -> 4585;
4644 -> 4586;
4644 -> 4585;
4645 -> 4644;
4645 -> 4605;
4645 -> 4585;
4646 -> 4645;
4647 -> 4597;
4647 -> 4645;
4648 -> 4645;
4649 -> 4646;
4649 -> 4648;
4650 -> 4647;
4650 -> 4648;
4651 -> 4648;
4652 -> 4651;
4652 -> 4650;
4652 -> 4648;
4653 -> 4648;
4654 -> 4649;
4654 -> 4653;
4655 -> 4653;
4656 -> 4653;
4657 -> 4655;
4657 -> 4656;
4657 -> 4653;
4658 -> 4653;
4659 -> 4654;
4659 -> 4605;
4659 -> 4658;
4659 -> 4653;
4660 -> 4654;
4660 -> 4605;
4660 -> 4659;
4661 -> 4655;
4661 -> 4660;
4661 -> 4657;
4661 -> 4659;
4662 -> 4659;
4663 -> 4655;
4663 -> 4662;
4663 -> 4661;
4663 -> 4659;
4664 -> 4654;
4664 -> 4605;
4664 -> 4659;
4665 -> 4655;
4665 -> 4664;
4665 -> 4663;
4665 -> 4659;
4666 -> 4653;
4667 -> 4654;
4667 -> 4605;
4667 -> 4666;
4667 -> 4653;
4668 -> 4667;
4669 -> 4668;
4670 -> 4655;
4670 -> 4669;
4670 -> 4665;
4670 -> 4668;
4671 -> 4654;
4671 -> 4605;
4671 -> 4668;
4672 -> 4655;
4672 -> 4671;
4672 -> 4670;
4672 -> 4668;
4673 -> 4667;
4674 -> 4655;
4674 -> 4673;
4674 -> 4672;
4674 -> 4667;
4675 -> 4654;
4675 -> 4605;
4675 -> 4653;
4676 -> 4653;
4677 -> 4655;
4677 -> 4676;
4677 -> 4674;
4677 -> 4653;
4678 -> 4653;
4679 -> 4654;
4679 -> 4605;
4679 -> 4678;
4679 -> 4653;
4680 -> 4653;
4681 -> 4654;
4681 -> 4605;
4681 -> 4680;
4681 -> 4653;
4682 -> 4681;
4683 -> 4655;
4683 -> 4682;
4683 -> 4677;
4683 -> 4681;
4684 -> 4681;
4685 -> 4655;
4685 -> 4684;
4685 -> 4683;
4685 -> 4681;
4686 -> 4681;
4687 -> 4655;
4687 -> 4686;
4687 -> 4685;
4687 -> 4681;
4688 -> 4681;
4689 -> 4655;
4689 -> 4688;
4689 -> 4687;
4689 -> 4681;
4690 -> 4681;
4691 -> 4655;
4691 -> 4690;
4691 -> 4689;
4691 -> 4681;
4692 -> 4654;
4692 -> 4605;
4692 -> 4653;
4693 -> 4653;
4694 -> 4654;
4694 -> 4605;
4694 -> 4693;
4694 -> 4653;
4695 -> 4653;
4696 -> 4654;
4696 -> 4605;
4696 -> 4695;
4696 -> 4653;
4697 -> 4653;
4698 -> 4654;
4698 -> 4605;
4698 -> 4697;
4698 -> 4653;
4699 -> 4655;
4699 -> 4691;
4699 -> 4653;
4700 -> 4699;
4700 -> 4648;
4701 -> 4652;
4701 -> 4700;
4701 -> 4648;
4702 -> 4643;
4702 -> 4701;
4702 -> 4645;
4703 -> 4679;
4704 -> 4655;
4704 -> 4703;
4704 -> 4677;
4704 -> 4679;
4705 -> 4679;
4706 -> 4705;
4706 -> 4679;
4707 -> 4679;
4708 -> 4706;
4708 -> 4679;
4709 -> 4708;
4710 -> 4655;
4710 -> 4709;
4710 -> 4704;
4710 -> 4708;
4711 -> 4706;
4711 -> 4708;
4712 -> 4655;
4712 -> 4711;
4712 -> 4710;
4712 -> 4708;
4713 -> 4708;
4714 -> 4655;
4714 -> 4713;
4714 -> 4712;
4714 -> 4708;
4715 -> 4708;
4716 -> 4715;
4717 -> 4655;
4717 -> 4716;
4717 -> 4714;
4717 -> 4715;
4718 -> 4679;
4719 -> 4655;
4719 -> 4718;
4719 -> 4717;
4719 -> 4679;
4720 -> 4654;
4720 -> 4708;
4720 -> 4680;
4720 -> 4653;
4721 -> 4720;
4722 -> 4655;
4722 -> 4721;
4722 -> 4719;
4722 -> 4720;
4723 -> 4720;
4724 -> 4655;
4724 -> 4723;
4724 -> 4722;
4724 -> 4720;
4725 -> 4720;
4726 -> 4655;
4726 -> 4725;
4726 -> 4724;
4726 -> 4720;
4727 -> 4720;
4728 -> 4655;
4728 -> 4727;
4728 -> 4726;
4728 -> 4720;
4729 -> 4720;
4730 -> 4655;
4730 -> 4729;
4730 -> 4728;
4730 -> 4720;
4731 -> 4654;
4731 -> 4708;
4731 -> 4653;
4732 -> 4654;
4732 -> 4708;
4732 -> 4693;
4732 -> 4653;
4733 -> 4654;
4733 -> 4708;
4733 -> 4695;
4733 -> 4653;
4734 -> 4654;
4734 -> 4708;
4734 -> 4697;
4734 -> 4653;
4735 -> 4655;
4735 -> 4730;
4735 -> 4653;
4736 -> 4735;
4736 -> 4648;
4737 -> 4652;
4737 -> 4736;
4737 -> 4648;
4738 -> 4643;
4738 -> 4737;
4738 -> 4702;
4738 -> 4645;
4739 -> 4597;
4739 -> 4708;
4740 -> 4739;
4740 -> 4708;
4741 -> 4708;
4742 -> 4741;
4742 -> 4740;
4742 -> 4708;
4743 -> 4708;
4744 -> 4708;
4745 -> 4743;
4745 -> 4744;
4745 -> 4708;
4746 -> 4708;
4747 -> 4708;
4747 -> 4746;
4748 -> 4743;
4748 -> 4747;
4748 -> 4745;
4748 -> 4746;
4749 -> 4746;
4750 -> 4743;
4750 -> 4749;
4750 -> 4748;
4750 -> 4746;
4751 -> 4708;
4751 -> 4746;
4752 -> 4743;
4752 -> 4751;
4752 -> 4750;
4752 -> 4746;
4753 -> 4708;
4754 -> 4753;
4755 -> 4754;
4756 -> 4743;
4756 -> 4755;
4756 -> 4752;
4756 -> 4754;
4757 -> 4708;
4757 -> 4754;
4758 -> 4743;
4758 -> 4757;
4758 -> 4756;
4758 -> 4754;
4759 -> 4753;
4760 -> 4743;
4760 -> 4759;
4760 -> 4758;
4760 -> 4753;
4761 -> 4708;
4762 -> 4708;
4763 -> 4743;
4763 -> 4762;
4763 -> 4760;
4763 -> 4708;
4764 -> 4708;
4765 -> 4743;
4765 -> 4764;
4765 -> 4763;
4765 -> 4708;
4766 -> 4743;
4766 -> 4709;
4766 -> 4765;
4766 -> 4708;
4767 -> 4708;
4768 -> 4743;
4768 -> 4767;
4768 -> 4766;
4768 -> 4708;
4769 -> 4743;
4769 -> 4713;
4769 -> 4768;
4769 -> 4708;
4770 -> 4743;
4770 -> 4716;
4770 -> 4769;
4770 -> 4715;
4771 -> 4708;
4772 -> 4743;
4772 -> 4771;
4772 -> 4770;
4772 -> 4708;
4773 -> 4708;
4774 -> 4773;
4775 -> 4743;
4775 -> 4774;
4775 -> 4772;
4775 -> 4773;
4776 -> 4773;
4777 -> 4743;
4777 -> 4776;
4777 -> 4775;
4777 -> 4773;
4778 -> 4773;
4779 -> 4743;
4779 -> 4778;
4779 -> 4777;
4779 -> 4773;
4780 -> 4773;
4781 -> 4743;
4781 -> 4780;
4781 -> 4779;
4781 -> 4773;
4782 -> 4773;
4783 -> 4743;
4783 -> 4782;
4783 -> 4781;
4783 -> 4773;
4784 -> 4708;
4785 -> 4708;
4786 -> 4708;
4787 -> 4708;
4788 -> 4743;
4788 -> 4783;
4788 -> 4708;
4789 -> 4788;
4789 -> 4708;
4790 -> 4742;
4790 -> 4789;
4790 -> 4708;
4791 -> 4638;
4791 -> 4585;
4792 -> 4643;
4792 -> 4585;
4793 -> 4585;
4794 -> 4791;
4794 -> 4793;
4795 -> 4792;
4795 -> 4793;
4796 -> 4795;
4796 -> 4738;
4796 -> 4793;
4797 -> 4793;
4798 -> 4797;
4798 -> 4796;
4798 -> 4793;
4799 -> 4795;
4799 -> 4797;
4799 -> 4738;
4799 -> 4798;
4800 -> 4794;
4800 -> 4799;
4800 -> 4642;
4800 -> 4798;
4801 -> 4798;
4802 -> 4801;
4803 -> 4794;
4803 -> 4802;
4803 -> 4800;
4803 -> 4801;
4804 -> 4794;
4804 -> 4803;
4804 -> 4798;
4805 -> 4585;
4806 -> 4585;
4807 -> 4638;
4807 -> 4806;
4807 -> 4804;
4807 -> 4585;
4808 -> 4585;
4809 -> 4587;
4809 -> 4708;
4809 -> 4585;
4810 -> 4585;
4811 -> 4809;
4811 -> 4585;
4812 -> 4809;
4812 -> 4811;
4813 -> 4812;
4813 -> 4811;
4814 -> 4813;
4814 -> 4811;
4815 -> 4811;
4816 -> 4811;
4817 -> 4595;
4817 -> 4811;
4818 -> 4638;
4818 -> 4817;
4819 -> 4597;
4819 -> 4817;
4820 -> 4817;
4821 -> 4818;
4821 -> 4820;
4822 -> 4819;
4822 -> 4820;
4823 -> 4820;
4824 -> 4823;
4824 -> 4822;
4824 -> 4820;
4825 -> 4821;
4825 -> 4823;
4825 -> 4824;
4825 -> 4807;
4825 -> 4820;
4826 -> 4817;
4827 -> 4817;
4828 -> 4638;
4828 -> 4827;
4828 -> 4825;
4828 -> 4817;
4829 -> 4812;
4829 -> 4813;
4829 -> 4817;
4830 -> 4638;
4830 -> 4829;
4830 -> 4828;
4830 -> 4817;
4831 -> 4812;
4831 -> 4829;
4831 -> 4817;
4832 -> 4831;
4832 -> 4829;
4832 -> 4817;
4833 -> 4638;
4833 -> 4832;
4834 -> 4597;
4834 -> 4832;
4835 -> 4832;
4836 -> 4833;
4836 -> 4835;
4837 -> 4834;
4837 -> 4835;
4838 -> 4835;
4839 -> 4838;
4839 -> 4837;
4839 -> 4835;
4840 -> 4836;
4840 -> 4838;
4840 -> 4839;
4840 -> 4830;
4840 -> 4835;
4841 -> 4832;
4842 -> 4832;
4843 -> 4638;
4843 -> 4842;
4843 -> 4840;
4843 -> 4832;
4844 -> 4832;
4845 -> 4638;
4845 -> 4844;
4845 -> 4843;
4845 -> 4832;
4846 -> 4812;
4846 -> 4811;
4847 -> 4811;
4848 -> 4599;
4848 -> 4811;
4849 -> 4603;
4849 -> 4811;
4850 -> 4811;
4851 -> 4846;
4851 -> 4850;
4852 -> 4847;
4852 -> 4850;
4853 -> 4848;
4853 -> 4850;
4854 -> 4849;
4854 -> 4850;
4855 -> 4847;
4855 -> 4850;
4856 -> 4855;
4856 -> 4850;
4857 -> 4855;
4857 -> 4850;
4858 -> 4855;
4858 -> 4850;
4859 -> 4855;
4859 -> 4850;
4860 -> 4855;
4860 -> 4850;
4861 -> 4855;
4861 -> 4850;
4862 -> 4855;
4862 -> 4850;
4863 -> 4855;
4863 -> 4850;
4864 -> 4855;
4864 -> 4850;
4865 -> 4851;
4865 -> 4844;
4865 -> 4855;
4865 -> 4850;
4866 -> 4851;
4866 -> 4844;
4866 -> 4855;
4866 -> 4850;
4867 -> 4851;
4867 -> 4844;
4867 -> 4855;
4867 -> 4850;
4868 -> 4851;
4868 -> 4844;
4868 -> 4855;
4868 -> 4850;
4869 -> 4850;
4870 -> 4851;
4870 -> 4844;
4870 -> 4850;
4871 -> 4847;
4871 -> 4811;
4872 -> 4586;
4872 -> 4811;
4873 -> 4847;
4873 -> 4811;
4874 -> 4872;
4874 -> 4873;
4874 -> 4868;
4874 -> 4870;
4874 -> 4866;
4874 -> 4867;
4874 -> 4855;
4874 -> 4852;
4874 -> 4853;
4874 -> 4854;
4874 -> 4811;
4875 -> 4811;
4876 -> 4875;
4877 -> 4874;
4877 -> 4876;
4877 -> 4875;
4878 -> 4874;
4878 -> 4875;
4879 -> 4874;
4879 -> 4875;
4880 -> 4874;
4880 -> 4875;
4881 -> 4874;
4881 -> 4880;
4882 -> 4875;
4883 -> 4874;
4883 -> 4882;
4883 -> 4875;
4884 -> 4883;
4885 -> 4874;
4885 -> 4884;
4886 -> 4875;
4887 -> 4874;
4887 -> 4886;
4887 -> 4875;
4888 -> 4875;
4889 -> 4874;
4889 -> 4888;
4889 -> 4875;
4890 -> 4874;
4890 -> 4875;
4891 -> 4874;
4892 -> 4874;
4892 -> 4875;
4893 -> 4811;
4894 -> 4874;
4894 -> 4893;
4894 -> 4811;
4895 -> 4586;
4895 -> 4874;
4895 -> 4894;
4896 -> 4847;
4896 -> 4811;
4897 -> 4597;
4897 -> 4811;
4898 -> 4811;
4899 -> 4896;
4899 -> 4898;
4900 -> 4897;
4900 -> 4898;
4901 -> 4898;
4902 -> 4901;
4902 -> 4900;
4902 -> 4898;
4903 -> 4898;
4904 -> 4898;
4905 -> 4903;
4905 -> 4904;
4905 -> 4898;
4906 -> 4898;
4907 -> 4899;
4907 -> 4874;
4907 -> 4906;
4907 -> 4898;
4908 -> 4899;
4908 -> 4874;
4908 -> 4907;
4909 -> 4903;
4909 -> 4908;
4909 -> 4905;
4909 -> 4907;
4910 -> 4907;
4911 -> 4903;
4911 -> 4910;
4911 -> 4909;
4911 -> 4907;
4912 -> 4899;
4912 -> 4874;
4912 -> 4907;
4913 -> 4903;
4913 -> 4912;
4913 -> 4911;
4913 -> 4907;
4914 -> 4898;
4915 -> 4899;
4915 -> 4874;
4915 -> 4914;
4915 -> 4898;
4916 -> 4915;
4917 -> 4916;
4918 -> 4903;
4918 -> 4917;
4918 -> 4913;
4918 -> 4916;
4919 -> 4899;
4919 -> 4874;
4919 -> 4916;
4920 -> 4903;
4920 -> 4919;
4920 -> 4918;
4920 -> 4916;
4921 -> 4915;
4922 -> 4903;
4922 -> 4921;
4922 -> 4920;
4922 -> 4915;
4923 -> 4899;
4923 -> 4874;
4923 -> 4898;
4924 -> 4898;
4925 -> 4903;
4925 -> 4924;
4925 -> 4922;
4925 -> 4898;
4926 -> 4899;
4926 -> 4874;
4926 -> 4898;
4927 -> 4926;
4928 -> 4903;
4928 -> 4927;
4928 -> 4925;
4928 -> 4926;
4929 -> 4926;
4930 -> 4903;
4930 -> 4929;
4930 -> 4928;
4930 -> 4926;
4931 -> 4926;
4932 -> 4903;
4932 -> 4931;
4932 -> 4930;
4932 -> 4926;
4933 -> 4926;
4934 -> 4903;
4934 -> 4933;
4934 -> 4932;
4934 -> 4926;
4935 -> 4926;
4936 -> 4935;
4937 -> 4903;
4937 -> 4936;
4937 -> 4934;
4937 -> 4935;
4938 -> 4926;
4939 -> 4903;
4939 -> 4938;
4939 -> 4937;
4939 -> 4926;
4940 -> 4898;
4941 -> 4899;
4941 -> 4926;
4941 -> 4940;
4941 -> 4898;
4942 -> 4941;
4943 -> 4903;
4943 -> 4942;
4943 -> 4939;
4943 -> 4941;
4944 -> 4941;
4945 -> 4903;
4945 -> 4944;
4945 -> 4943;
4945 -> 4941;
4946 -> 4941;
4947 -> 4903;
4947 -> 4946;
4947 -> 4945;
4947 -> 4941;
4948 -> 4941;
4949 -> 4903;
4949 -> 4948;
4949 -> 4947;
4949 -> 4941;
4950 -> 4941;
4951 -> 4903;
4951 -> 4950;
4951 -> 4949;
4951 -> 4941;
4952 -> 4899;
4952 -> 4926;
4952 -> 4898;
4953 -> 4898;
4954 -> 4899;
4954 -> 4926;
4954 -> 4953;
4954 -> 4898;
4955 -> 4898;
4956 -> 4899;
4956 -> 4926;
4956 -> 4955;
4956 -> 4898;
4957 -> 4898;
4958 -> 4899;
4958 -> 4926;
4958 -> 4957;
4958 -> 4898;
4959 -> 4903;
4959 -> 4951;
4959 -> 4898;
4960 -> 4959;
4960 -> 4898;
4961 -> 4902;
4961 -> 4960;
4961 -> 4898;
4962 -> 4638;
4962 -> 4961;
4962 -> 4845;
4962 -> 4811;
4963 -> 4895;
4963 -> 4811;
4964 -> 4597;
4964 -> 4811;
4965 -> 4811;
4966 -> 4963;
4966 -> 4965;
4967 -> 4964;
4967 -> 4965;
4968 -> 4965;
4969 -> 4968;
4969 -> 4967;
4969 -> 4965;
4970 -> 4965;
4971 -> 4965;
4972 -> 4970;
4972 -> 4971;
4972 -> 4965;
4973 -> 4965;
4974 -> 4966;
4974 -> 4926;
4974 -> 4973;
4974 -> 4965;
4975 -> 4966;
4975 -> 4926;
4975 -> 4974;
4976 -> 4970;
4976 -> 4975;
4976 -> 4972;
4976 -> 4974;
4977 -> 4974;
4978 -> 4970;
4978 -> 4977;
4978 -> 4976;
4978 -> 4974;
4979 -> 4966;
4979 -> 4926;
4979 -> 4974;
4980 -> 4970;
4980 -> 4979;
4980 -> 4978;
4980 -> 4974;
4981 -> 4965;
4982 -> 4966;
4982 -> 4926;
4982 -> 4981;
4982 -> 4965;
4983 -> 4982;
4984 -> 4983;
4985 -> 4970;
4985 -> 4984;
4985 -> 4980;
4985 -> 4983;
4986 -> 4966;
4986 -> 4926;
4986 -> 4983;
4987 -> 4970;
4987 -> 4986;
4987 -> 4985;
4987 -> 4983;
4988 -> 4982;
4989 -> 4970;
4989 -> 4988;
4989 -> 4987;
4989 -> 4982;
4990 -> 4966;
4990 -> 4926;
4990 -> 4965;
4991 -> 4965;
4992 -> 4970;
4992 -> 4991;
4992 -> 4989;
4992 -> 4965;
4993 -> 4966;
4993 -> 4926;
4993 -> 4965;
4994 -> 4993;
4995 -> 4970;
4995 -> 4994;
4995 -> 4992;
4995 -> 4993;
4996 -> 4993;
4997 -> 4970;
4997 -> 4996;
4997 -> 4995;
4997 -> 4993;
4998 -> 4993;
4999 -> 4970;
4999 -> 4998;
4999 -> 4997;
4999 -> 4993;
5000 -> 4993;
5001 -> 4970;
5001 -> 5000;
5001 -> 4999;
5001 -> 4993;
5002 -> 4993;
5003 -> 5002;
5004 -> 4970;
5004 -> 5003;
5004 -> 5001;
5004 -> 5002;
5005 -> 4993;
5006 -> 4970;
5006 -> 5005;
5006 -> 5004;
5006 -> 4993;
5007 -> 4965;
5008 -> 4966;
5008 -> 4993;
5008 -> 5007;
5008 -> 4965;
5009 -> 5008;
5010 -> 4970;
5010 -> 5009;
5010 -> 5006;
5010 -> 5008;
5011 -> 5008;
5012 -> 4970;
5012 -> 5011;
5012 -> 5010;
5012 -> 5008;
5013 -> 5008;
5014 -> 4970;
5014 -> 5013;
5014 -> 5012;
5014 -> 5008;
5015 -> 5008;
5016 -> 4970;
5016 -> 5015;
5016 -> 5014;
5016 -> 5008;
5017 -> 5008;
5018 -> 4970;
5018 -> 5017;
5018 -> 5016;
5018 -> 5008;
5019 -> 4966;
5019 -> 4993;
5019 -> 4965;
5020 -> 4965;
5021 -> 4966;
5021 -> 4993;
5021 -> 5020;
5021 -> 4965;
5022 -> 4965;
5023 -> 4966;
5023 -> 4993;
5023 -> 5022;
5023 -> 4965;
5024 -> 4965;
5025 -> 4966;
5025 -> 4993;
5025 -> 5024;
5025 -> 4965;
5026 -> 4970;
5026 -> 5018;
5026 -> 4965;
5027 -> 5026;
5027 -> 4965;
5028 -> 4969;
5028 -> 5027;
5028 -> 4965;
5029 -> 4808;
5029 -> 5028;
5029 -> 4811;
5030 -> 4993;
5031 -> 4993;
5032 -> 5031;
5033 -> 4638;
5033 -> 5032;
5033 -> 4962;
5033 -> 5031;
5034 -> 4638;
5034 -> 4993;
5035 -> 4597;
5035 -> 4993;
5036 -> 4993;
5037 -> 5034;
5037 -> 5036;
5038 -> 5035;
5038 -> 5036;
5039 -> 5036;
5040 -> 5039;
5040 -> 5038;
5040 -> 5036;
5041 -> 4993;
5042 -> 4993;
5043 -> 4638;
5043 -> 4993;
5044 -> 4597;
5044 -> 4993;
5045 -> 4993;
5046 -> 5043;
5046 -> 5045;
5047 -> 5044;
5047 -> 5045;
5048 -> 5045;
5049 -> 5048;
5049 -> 5047;
5049 -> 5045;
5050 -> 4993;
5051 -> 4993;
5052 -> 4993;
5053 -> 4993;
5054 -> 4993;
5055 -> 4993;
5056 -> 4993;
5057 -> 4993;
5058 -> 4993;
5059 -> 4993;
5060 -> 4993;
5061 -> 4993;
5062 -> 4993;
5063 -> 4993;
5064 -> 4993;
5065 -> 4993;
5066 -> 4993;
5067 -> 4993;
5068 -> 4993;
5068 -> 5067;
5069 -> 4993;
5070 -> 5069;
5071 -> 4993;
5071 -> 5070;
5072 -> 4993;
5073 -> 4993;
5074 -> 4993;
5075 -> 4993;
5076 -> 4993;
5077 -> 4597;
5077 -> 4993;
5078 -> 5077;
5078 -> 4993;
5079 -> 4993;
5080 -> 5079;
5080 -> 5078;
5080 -> 4993;
5081 -> 4993;
5082 -> 4993;
5083 -> 5081;
5083 -> 5082;
5083 -> 4993;
5084 -> 4993;
5085 -> 4993;
5085 -> 5084;
5086 -> 5081;
5086 -> 5085;
5086 -> 5083;
5086 -> 5084;
5087 -> 5084;
5088 -> 5081;
5088 -> 5087;
5088 -> 5086;
5088 -> 5084;
5089 -> 4993;
5089 -> 5084;
5090 -> 5081;
5090 -> 5089;
5090 -> 5088;
5090 -> 5084;
5091 -> 4993;
5092 -> 5091;
5093 -> 5092;
5094 -> 5081;
5094 -> 5093;
5094 -> 5090;
5094 -> 5092;
5095 -> 4993;
5095 -> 5092;
5096 -> 5081;
5096 -> 5095;
5096 -> 5094;
5096 -> 5092;
5097 -> 5091;
5098 -> 5081;
5098 -> 5097;
5098 -> 5096;
5098 -> 5091;
5099 -> 4993;
5100 -> 4993;
5101 -> 5081;
5101 -> 5100;
5101 -> 5098;
5101 -> 4993;
5102 -> 4993;
5103 -> 5102;
5104 -> 5081;
5104 -> 5103;
5104 -> 5101;
5104 -> 5102;
5105 -> 5102;
5106 -> 5081;
5106 -> 5105;
5106 -> 5104;
5106 -> 5102;
5107 -> 5102;
5108 -> 5081;
5108 -> 5107;
5108 -> 5106;
5108 -> 5102;
5109 -> 5102;
5110 -> 5081;
5110 -> 5109;
5110 -> 5108;
5110 -> 5102;
5111 -> 5102;
5112 -> 5081;
5112 -> 5111;
5112 -> 5110;
5112 -> 5102;
5113 -> 4993;
5114 -> 4993;
5115 -> 4993;
5116 -> 4993;
5117 -> 5081;
5117 -> 5112;
5117 -> 4993;
5118 -> 5117;
5118 -> 4993;
5119 -> 5080;
5119 -> 5118;
5119 -> 4993;
5120 -> 4597;
5120 -> 4993;
5121 -> 5120;
5121 -> 4993;
5122 -> 5079;
5122 -> 5121;
5122 -> 4993;
5123 -> 5122;
5123 -> 5118;
5123 -> 4993;
5124 -> 4993;
5125 -> 5081;
5125 -> 4994;
5125 -> 5101;
5125 -> 4993;
5126 -> 5081;
5126 -> 4996;
5126 -> 5125;
5126 -> 4993;
5127 -> 5081;
5127 -> 4998;
5127 -> 5126;
5127 -> 4993;
5128 -> 5081;
5128 -> 5000;
5128 -> 5127;
5128 -> 4993;
5129 -> 5081;
5129 -> 5003;
5129 -> 5128;
5129 -> 5002;
5130 -> 5081;
5130 -> 5005;
5130 -> 5129;
5130 -> 4993;
5131 -> 5081;
5131 -> 5103;
5131 -> 5130;
5131 -> 5102;
5132 -> 5081;
5132 -> 5105;
5132 -> 5131;
5132 -> 5102;
5133 -> 5081;
5133 -> 5107;
5133 -> 5132;
5133 -> 5102;
5134 -> 5081;
5134 -> 5109;
5134 -> 5133;
5134 -> 5102;
5135 -> 5081;
5135 -> 5111;
5135 -> 5134;
5135 -> 5102;
5136 -> 5081;
5136 -> 5135;
5136 -> 4993;
5137 -> 5136;
5137 -> 4993;
5138 -> 5080;
5138 -> 5137;
5138 -> 4993;
5139 -> 5122;
5139 -> 5137;
5139 -> 4993;
5140 -> 4585;
5141 -> 4993;
5141 -> 5140;
5141 -> 4585;
5142 -> 4638;
5142 -> 5033;
5142 -> 5141;
5143 -> 4585;
5144 -> 4638;
5144 -> 5143;
5144 -> 5142;
5144 -> 4585;
5145 -> 4643;
5145 -> 4585;
5146 -> 4808;
5146 -> 4585;
5150 -> 5148;
5150 -> 5147;
5151 -> 5149;
5151 -> 5147;
5152 -> 5147;
5153 -> 0;
5153 -> 4585;
5154 -> 4585;
5155 -> 4585;
5156 -> 5145;
5156 -> 5155;
5157 -> 5146;
5157 -> 5155;
5158 -> 5153;
5158 -> 5155;
5159 -> 5154;
5159 -> 5155;
5160 -> 5154;
5160 -> 5155;
5161 -> 5155;
5162 -> 5159;
5162 -> 5161;
5162 -> 5155;
5163 -> 5162;
5163 -> 5155;
5164 -> 0;
5166 -> 5164;
5166 -> 5165;
5167 -> 5165;
5169 -> 5168;
5171 -> 5170;
5173 -> 5172;
5174 -> 5167;
5175 -> 5167;
5175 -> 5165;
5176 -> 5166;
5176 -> 5167;
5176 -> 5165;
5177 -> 5165;
5178 -> 5155;
5179 -> 5178;
5179 -> 5160;
5179 -> 5155;
5180 -> 5156;
5180 -> 5155;
5181 -> 5157;
5181 -> 5155;
5182 -> 5158;
5182 -> 5155;
5183 -> 5180;
5183 -> 5155;
5184 -> 5181;
5184 -> 5155;
5185 -> 5179;
5185 -> 5155;
5186 -> 5155;
5187 -> 5183;
5187 -> 5186;
5188 -> 5184;
5188 -> 5186;
5189 -> 5185;
5189 -> 5186;
5190 -> 5163;
5190 -> 5186;
5191 -> 5187;
5191 -> 5186;
5192 -> 5187;
5192 -> 5180;
5192 -> 5186;
5193 -> 5188;
5193 -> 5186;
5194 -> 5188;
5194 -> 5181;
5194 -> 5186;
5195 -> 5186;
5196 -> 5191;
5196 -> 5195;
5197 -> 5192;
5197 -> 5195;
5198 -> 5193;
5198 -> 5195;
5199 -> 5194;
5199 -> 5195;
5200 -> 5190;
5200 -> 5195;
5201 -> 5196;
5201 -> 5195;
5202 -> 5197;
5202 -> 5195;
5203 -> 5198;
5203 -> 5195;
5204 -> 5199;
5204 -> 5195;
5205 -> 5195;
5206 -> 5201;
5206 -> 5205;
5207 -> 5202;
5207 -> 5205;
5208 -> 5203;
5208 -> 5205;
5209 -> 5204;
5209 -> 5205;
5210 -> 5200;
5210 -> 5205;
5211 -> 5205;
5212 -> 5207;
5212 -> 5211;
5212 -> 5205;
5213 -> 5205;
5214 -> 5209;
5214 -> 5213;
5214 -> 5205;
5215 -> 5212;
5215 -> 5214;
5215 -> 5205;
5216 -> 5205;
5217 -> 5216;
5217 -> 5215;
5217 -> 5205;
5218 -> 5205;
5219 -> 5218;
5219 -> 5207;
5219 -> 5205;
5220 -> 5219;
5221 -> 5215;
5221 -> 5217;
5221 -> 5220;
5221 -> 5219;
5222 -> 5221;
5222 -> 5218;
5222 -> 5220;
5222 -> 5215;
5222 -> 5219;
5223 -> 5205;
5224 -> 5223;
5224 -> 5209;
5224 -> 5205;
5225 -> 5224;
5226 -> 5215;
5226 -> 5217;
5226 -> 5222;
5226 -> 5225;
5226 -> 5224;
5227 -> 5226;
5227 -> 5225;
5227 -> 5223;
5227 -> 5215;
5227 -> 5224;
5228 -> 5205;
5229 -> 5228;
5229 -> 5207;
5229 -> 5205;
5230 -> 5229;
5231 -> 5230;
5231 -> 5209;
5231 -> 5229;
5232 -> 5231;
5233 -> 5215;
5233 -> 5217;
5233 -> 5222;
5233 -> 5227;
5233 -> 5232;
5233 -> 5231;
5234 -> 5206;
5234 -> 5231;
5235 -> 5208;
5235 -> 5231;
5236 -> 5231;
5237 -> 5234;
5237 -> 5236;
5238 -> 5232;
5238 -> 5236;
5239 -> 5235;
5239 -> 5236;
5240 -> 5232;
5240 -> 5236;
5241 -> 5210;
5241 -> 5236;
5242 -> 5237;
5242 -> 5180;
5242 -> 5238;
5242 -> 5236;
5243 -> 5239;
5243 -> 5181;
5243 -> 5240;
5243 -> 5236;
5244 -> 5241;
5244 -> 0;
5244 -> 5242;
5244 -> 5243;
5244 -> 5180;
5244 -> 5181;
5244 -> 5236;
5245 -> 5233;
5245 -> 5244;
5245 -> 5231;
5246 -> 5231;
5247 -> 5215;
5247 -> 5217;
5247 -> 5222;
5247 -> 5227;
5247 -> 5246;
5247 -> 5230;
5247 -> 5231;
5248 -> 5231;
5249 -> 5215;
5249 -> 5217;
5249 -> 5222;
5249 -> 5227;
5249 -> 5228;
5249 -> 5248;
5249 -> 5231;
5250 -> 5245;
5250 -> 5231;
5251 -> 5247;
5251 -> 5231;
5252 -> 5250;
5252 -> 5251;
5252 -> 5231;
5253 -> 5249;
5253 -> 5231;
5254 -> 5252;
5254 -> 5253;
5254 -> 5231;
5255 -> 5254;
5255 -> 5228;
5255 -> 5230;
5255 -> 5215;
5255 -> 5231;
5256 -> 5215;
5256 -> 5205;
5257 -> 5197;
5257 -> 5195;
5258 -> 5199;
5258 -> 5195;
5259 -> 5195;
5260 -> 5257;
5260 -> 5259;
5260 -> 5195;
5261 -> 5258;
5261 -> 5259;
5261 -> 5195;
5262 -> 5260;
5262 -> 5261;
5262 -> 5195;
5263 -> 5256;
5263 -> 5215;
5263 -> 5217;
5263 -> 5222;
5263 -> 5227;
5263 -> 5255;
5263 -> 5257;
5263 -> 5258;
5263 -> 5262;
5264 -> 5262;
5265 -> 5256;
5265 -> 5215;
5265 -> 5217;
5265 -> 5222;
5265 -> 5227;
5265 -> 5255;
5265 -> 5264;
5265 -> 5258;
5265 -> 5262;
5266 -> 5256;
5266 -> 5215;
5266 -> 5217;
5266 -> 5222;
5266 -> 5227;
5266 -> 5255;
5266 -> 5257;
5266 -> 5258;
5266 -> 5265;
5267 -> 5265;
5268 -> 5257;
5268 -> 5267;
5269 -> 5258;
5269 -> 5267;
5270 -> 5267;
5271 -> 0;
5271 -> 5267;
5272 -> 5268;
5272 -> 5267;
5273 -> 5269;
5273 -> 5267;
5274 -> 5267;
5275 -> 5271;
5275 -> 5274;
5276 -> 5272;
5276 -> 5274;
5277 -> 5273;
5277 -> 5274;
5278 -> 5270;
5278 -> 5274;
5279 -> 5275;
5279 -> 5278;
5279 -> 5274;
5280 -> 5276;
5280 -> 5278;
5280 -> 5274;
5281 -> 5277;
5281 -> 5278;
5281 -> 5274;
5282 -> 5268;
5282 -> 5269;
5282 -> 5195;
5283 -> 5268;
5283 -> 5282;
5284 -> 0;
5284 -> 5282;
5285 -> 5283;
5285 -> 5282;
5286 -> 5282;
5287 -> 5282;
5288 -> 5284;
5288 -> 5287;
5289 -> 5285;
5289 -> 5287;
5290 -> 5286;
5290 -> 5287;
5291 -> 5286;
5291 -> 5287;
5292 -> 5288;
5292 -> 5291;
5292 -> 5287;
5293 -> 5289;
5293 -> 5291;
5293 -> 5287;
5294 -> 5290;
5294 -> 5291;
5294 -> 5287;
5295 -> 5286;
5295 -> 5282;
5296 -> 0;
5296 -> 5283;
5297 -> 5283;
5298 -> 5283;
5299 -> 5296;
5299 -> 5298;
5300 -> 5297;
5300 -> 5298;
5301 -> 5297;
5301 -> 5298;
5302 -> 5297;
5302 -> 5298;
5303 -> 5299;
5303 -> 5302;
5303 -> 5298;
5304 -> 5300;
5304 -> 5302;
5304 -> 5298;
5305 -> 5301;
5305 -> 5302;
5305 -> 5298;
5306 -> 5195;
5307 -> 5283;
5307 -> 5306;
5307 -> 5195;
5308 -> 5195;
5309 -> 5283;
5309 -> 5308;
5309 -> 5195;
5310 -> 5283;
5310 -> 5309;
5311 -> 0;
5311 -> 5309;
5312 -> 5309;
5313 -> 5310;
5313 -> 5309;
5314 -> 5309;
5315 -> 5311;
5315 -> 5314;
5316 -> 5312;
5316 -> 5314;
5317 -> 5313;
5317 -> 5314;
5318 -> 5312;
5318 -> 5314;
5319 -> 5315;
5319 -> 5318;
5319 -> 5314;
5320 -> 5316;
5320 -> 5318;
5320 -> 5314;
5321 -> 5317;
5321 -> 5318;
5321 -> 5314;
5322 -> 5312;
5322 -> 5309;
5323 -> 5270;
5323 -> 5295;
5323 -> 5297;
5323 -> 5322;
5323 -> 5279;
5323 -> 5280;
5323 -> 5281;
5323 -> 5292;
5323 -> 5293;
5323 -> 5294;
5323 -> 5303;
5323 -> 5304;
5323 -> 5305;
5323 -> 5319;
5323 -> 5320;
5323 -> 5321;
5323 -> 5186;
5324 -> 5323;
5325 -> 5324;
5326 -> 5188;
5326 -> 5181;
5326 -> 5244;
5326 -> 5323;
5326 -> 5324;
5327 -> 5189;
5327 -> 5326;
5327 -> 5178;
5327 -> 5324;
5328 -> 5324;
5329 -> 5188;
5329 -> 5181;
5329 -> 5244;
5329 -> 5323;
5329 -> 5324;
5330 -> 5189;
5330 -> 5329;
5330 -> 5327;
5330 -> 5324;
5331 -> 5324;
5332 -> 5187;
5332 -> 5180;
5332 -> 5244;
5332 -> 5323;
5332 -> 5324;
5333 -> 5189;
5333 -> 5332;
5333 -> 5330;
5333 -> 5324;
5334 -> 5182;
5334 -> 5325;
5334 -> 5155;
5335 -> 4638;
5335 -> 5334;
5335 -> 5144;
5335 -> 4585;
5336 -> 4808;
5336 -> 5029;
5336 -> 4585;
5337 -> 4643;
5337 -> 4799;
5337 -> 4585;
5338 -> 4638;
5338 -> 5335;
5338 -> 4585;
5339 -> 4410;
5340 -> 3482;
5341 -> 3483;
5341 -> 3482;
5342 -> 4407;
5342 -> 3482;
5343 -> 3482;
5344 -> 5341;
5344 -> 5343;
5345 -> 5342;
5345 -> 5343;
5346 -> 5345;
5346 -> 5343;
5347 -> 5346;
5347 -> 4407;
5347 -> 4993;
5348 -> 5344;
5348 -> 5347;
5348 -> 4993;
5348 -> 5346;
5349 -> 5346;
5349 -> 5348;
5350 -> 5349;
5350 -> 5348;
5351 -> 5349;
5352 -> 3482;
5353 -> 3483;
5353 -> 3482;
}