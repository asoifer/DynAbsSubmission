digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 746131"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 746132"];
3 [label="@'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 746133"];
4 [label="prefix = @'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 746134"];
5 [label="@'\n}' 746135"];
6 [label="suffix = @'\n}' 746136"];
7 [label="param FlowTests(this) 746137"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 746138"];
9 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 746139"];
10 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 746140"];
11 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 746141"];
12 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 746142"];
13 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 746143"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 746144"];
15 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 746145"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 746146"];
17 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 746147"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 746148"];
19 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 746149"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 746150"];
21 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 746151"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 746152"];
23 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 746153"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 746154"];
25 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 746155"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 746156"];
27 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 746157"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 746158"];
29 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 746159"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 746160"];
31 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 746161"];
32 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 746162"];
33 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 746163"];
34 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 746164"];
35 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 746165"];
36 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 746166"];
37 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 746167"];
38 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 746168"];
39 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 746169"];
40 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 746170"];
41 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 746171"];
42 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 746172"];
43 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 746173"];
44 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 746174"];
45 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 746175"];
46 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 746176"];
47 [label="LazyThreadSafetyMode.PublicationOnly 746177"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 746178"];
49 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 746179"];
50 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 746180"];
51 [label="LazyThreadSafetyMode.PublicationOnly 746181"];
52 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 746182"];
53 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 746183"];
54 [label="RuntimeUtilities.IsCoreClrRuntime 746184"];
55 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 746185"];
56 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 746186"];
57 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 746187"];
58 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 746188"];
59 [label="LazyThreadSafetyMode.PublicationOnly 746189"];
60 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 746190"];
61 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 746191"];
62 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 746192"];
63 [label="LazyThreadSafetyMode.PublicationOnly 746193"];
64 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 746194"];
65 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 746195"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 746196"];
67 [label="LazyThreadSafetyMode.PublicationOnly 746197"];
68 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 746198"];
69 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 746199"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 746200"];
71 [label="LazyThreadSafetyMode.PublicationOnly 746201"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746202"];
73 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746203"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 746204"];
75 [label="LazyThreadSafetyMode.PublicationOnly 746205"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746206"];
77 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746207"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 746208"];
79 [label="LazyThreadSafetyMode.PublicationOnly 746209"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746210"];
81 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746211"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 746212"];
83 [label="LazyThreadSafetyMode.PublicationOnly 746213"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746214"];
85 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746215"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 746216"];
87 [label="LazyThreadSafetyMode.PublicationOnly 746217"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746218"];
89 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746219"];
90 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 746220"];
91 [label="LazyThreadSafetyMode.PublicationOnly 746221"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746222"];
93 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746223"];
94 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 746224"];
95 [label="LazyThreadSafetyMode.PublicationOnly 746225"];
96 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746226"];
97 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746227"];
98 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 746228"];
99 [label="LazyThreadSafetyMode.PublicationOnly 746229"];
100 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 746230"];
101 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 746231"];
102 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 746232"];
103 [label="LazyThreadSafetyMode.PublicationOnly 746233"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 746234"];
105 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 746235"];
106 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 746236"];
107 [label="LazyThreadSafetyMode.PublicationOnly 746237"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746238"];
109 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746239"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 746240"];
111 [label="LazyThreadSafetyMode.PublicationOnly 746241"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746242"];
113 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746243"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 746244"];
115 [label="LazyThreadSafetyMode.PublicationOnly 746245"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746246"];
117 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746247"];
118 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 746248"];
119 [label="LazyThreadSafetyMode.PublicationOnly 746249"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746250"];
121 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746251"];
122 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 746252"];
123 [label="LazyThreadSafetyMode.PublicationOnly 746253"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 746254"];
125 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 746255"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 746256"];
127 [label="LazyThreadSafetyMode.PublicationOnly 746257"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746258"];
129 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746259"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 746260"];
131 [label="LazyThreadSafetyMode.PublicationOnly 746261"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746262"];
133 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746263"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 746264"];
135 [label="LazyThreadSafetyMode.PublicationOnly 746265"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746266"];
137 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746267"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 746268"];
139 [label="LazyThreadSafetyMode.PublicationOnly 746269"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746270"];
141 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746271"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 746272"];
143 [label="LazyThreadSafetyMode.PublicationOnly 746273"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746274"];
145 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746275"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 746276"];
147 [label="LazyThreadSafetyMode.PublicationOnly 746277"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746278"];
149 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746279"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 746280"];
151 [label="LazyThreadSafetyMode.PublicationOnly 746281"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746282"];
153 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746283"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 746284"];
155 [label="LazyThreadSafetyMode.PublicationOnly 746285"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746286"];
157 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746287"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 746288"];
159 [label="LazyThreadSafetyMode.PublicationOnly 746289"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746290"];
161 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746291"];
162 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 746292"];
163 [label="LazyThreadSafetyMode.PublicationOnly 746293"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746294"];
165 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746295"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 746296"];
167 [label="LazyThreadSafetyMode.PublicationOnly 746297"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746298"];
169 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746299"];
170 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 746300"];
171 [label="LazyThreadSafetyMode.PublicationOnly 746301"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746302"];
173 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746303"];
174 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 746304"];
175 [label="LazyThreadSafetyMode.PublicationOnly 746305"];
176 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746306"];
177 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 746307"];
178 [label="@'R:\\Invalid.dll' 746308"];
179 [label="fullPath: @'R:\\Invalid.dll' 746309"];
180 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 746310"];
181 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 746311"];
182 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 746312"];
183 [label="MscorlibRef_v4_0_30316_17626 746313"];
184 [label="Net451.mscorlib 746314"];
185 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 746315"];
186 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 746316"];
187 [label="'/*<bind>*/' 746317"];
188 [label="StartString = '/*<bind>*/' 746318"];
189 [label="'/*</bind>*/' 746319"];
190 [label="EndString = '/*</bind>*/' 746320"];
191 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 746321"];
192 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 746322"];
193 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 746323"];
194 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 746324"];
195 [label="param CSharpTestBase(this) 746325"];
196 [label="param CommonTestBase(this) 746326"];
197 [label="param TestBase(this) 746327"];
198 [label="_temp 746328"];
199 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 746329"];
200 [label="param ForEachStatement(this) 746330"];
201 [label="var source = prefix + @'\n    // Foreach statement.\n    public void T180() {\n        if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n        if (f) { int a; foreach (char ch in ''abc'') F(a); } // Error // BUG?: Error in wrong order.\n        if (f) { int a; foreach (char ch in G(out a).ToString()) F(a); }\n        if (f) { int a; foreach (char ch in ''abc'') No(); F(a); } // Error\n        if (f) { int a; foreach (char ch in ''abc'') G(out a); F(a); } // Error\n    }\n' + suffix; 746331"];
202 [label="var source = prefix + @'\n    // Foreach statement.\n    public void T180() {\n        if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n        if (f) { int a; foreach (char ch in ''abc'') F(a); } // Error // BUG?: Error in wrong order.\n        if (f) { int a; foreach (char ch in G(out a).ToString()) F(a); }\n        if (f) { int a; foreach (char ch in ''abc'') No(); F(a); } // Error\n        if (f) { int a; foreach (char ch in ''abc'') G(out a); F(a); } // Error\n    }\n' + suffix; 746332"];
203 [label="var source = prefix + @'\n    // Foreach statement.\n    public void T180() {\n        if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n        if (f) { int a; foreach (char ch in ''abc'') F(a); } // Error // BUG?: Error in wrong order.\n        if (f) { int a; foreach (char ch in G(out a).ToString()) F(a); }\n        if (f) { int a; foreach (char ch in ''abc'') No(); F(a); } // Error\n        if (f) { int a; foreach (char ch in ''abc'') G(out a); F(a); } // Error\n    }\n' + suffix; 746333"];
204 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 746334"];
205 [label="source 746335"];
206 [label="param operator(string source) 746336"];
207 [label="source 746337"];
208 [label="new CSharpTestSource(source) 746338"];
209 [label="param CSharpTestSource(object value) 746339"];
210 [label="param CSharpTestSource(this) 746340"];
211 [label="Value 746341"];
212 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 746342"];
213 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 746343"];
214 [label="CreateCompilation(source) 746344"];
215 [label="param CreateCompilation(CSharpTestSource source) 746345"];
216 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 746346"];
217 [label="param CreateCompilation(CSharpCompilationOptions options = null) 746347"];
218 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 746348"];
219 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 746349"];
220 [label="param CreateCompilation(string assemblyName = '') 746350"];
221 [label="param CreateCompilation(string sourceFileName = '') 746351"];
222 [label="param CreateCompilation(bool skipUsesIsNullable = false) 746352"];
223 [label="source 746353"];
224 [label="targetFramework 746354"];
225 [label="references 746355"];
226 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 746356"];
227 [label="param GetReferences(TargetFramework tf) 746357"];
228 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 746358"];
229 [label="var references = GetReferences(tf); 746359"];
230 [label="GetReferences(tf) 746360"];
231 [label="param GetReferences(TargetFramework targetFramework) 746361"];
232 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 746362"];
233 [label="StandardReferences 746363"];
234 [label="RuntimeUtilities.IsCoreClrRuntime 746364"];
235 [label="Mscorlib46ExtendedReferences 746365"];
236 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 746366"];
237 [label="TestBase.ValueTupleRef 746367"];
238 [label="TestReferences.NetFx.ValueTuple.tuplelib 746368"];
239 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 746369"];
240 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 746370"];
241 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 746371"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 746372"];
243 [label="return references; 746373"];
244 [label="options 746374"];
245 [label="parseOptions 746375"];
246 [label="assemblyName 746376"];
247 [label="sourceFileName 746377"];
248 [label="skipUsesIsNullable 746378"];
249 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 746379"];
250 [label="param CreateEmptyCompilation(CSharpTestSource source) 746380"];
251 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 746381"];
252 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 746382"];
253 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 746383"];
254 [label="param CreateEmptyCompilation(string assemblyName = '') 746384"];
255 [label="param CreateEmptyCompilation(string sourceFileName = '') 746385"];
256 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 746386"];
257 [label="source 746387"];
258 [label="references 746388"];
259 [label="options 746389"];
260 [label="parseOptions 746390"];
261 [label="assemblyName 746391"];
262 [label="sourceFileName 746392"];
263 [label="skipUsesIsNullable 746393"];
264 [label="null 746394"];
265 [label="experimentalFeature: null 746395"];
266 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 746396"];
267 [label="param CreateCompilationCore(CSharpTestSource source) 746397"];
268 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 746398"];
269 [label="param CreateCompilationCore(CSharpCompilationOptions options) 746399"];
270 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 746400"];
271 [label="param CreateCompilationCore(string assemblyName) 746401"];
272 [label="param CreateCompilationCore(string sourceFileName) 746402"];
273 [label="param CreateCompilationCore(bool skipUsesIsNullable) 746403"];
274 [label="param CreateCompilationCore(MessageID? experimentalFeature) 746404"];
275 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 746405"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 746406"];
277 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 746407"];
278 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 746408"];
279 [label="param GetSyntaxTrees(string sourceFileName = '') 746409"];
280 [label="param GetSyntaxTrees(this) 746410"];
281 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 746411"];
282 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 746412"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 746413"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 746414"];
285 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 746415"];
286 [label="param Parse(string text) 746416"];
287 [label="param Parse(string filename = '') 746417"];
288 [label="param Parse(CSharpParseOptions options = null) 746418"];
289 [label="param Parse(Encoding encoding = null) 746419"];
290 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 746420"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 746421"];
292 [label="kind: SourceCodeKind.Regular 746422"];
293 [label="documentationMode: DocumentationMode.Parse 746423"];
294 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 746424"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 746425"];
296 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 746426"];
297 [label="SourceCodeKind.Script 746427"];
298 [label="Regular.WithKind(SourceCodeKind.Script) 746428"];
299 [label="Script = Regular.WithKind(SourceCodeKind.Script) 746429"];
300 [label="LanguageVersion.CSharp6 746430"];
301 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 746431"];
302 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 746432"];
303 [label="LanguageVersion.CSharp7 746433"];
304 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 746434"];
305 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 746435"];
306 [label="LanguageVersion.CSharp7_1 746436"];
307 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 746437"];
308 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 746438"];
309 [label="LanguageVersion.CSharp7_2 746439"];
310 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 746440"];
311 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 746441"];
312 [label="LanguageVersion.CSharp7_3 746442"];
313 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 746443"];
314 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 746444"];
315 [label="LanguageVersion.Default 746445"];
316 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 746446"];
317 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 746447"];
318 [label="LanguageVersion.Preview 746448"];
319 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 746449"];
320 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 746450"];
321 [label="LanguageVersion.CSharp8 746451"];
322 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 746452"];
323 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 746453"];
324 [label="LanguageVersion.CSharp9 746454"];
325 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 746455"];
326 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 746456"];
327 [label="DocumentationMode.Diagnose 746457"];
328 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 746458"];
329 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 746459"];
330 [label="Regular 746460"];
331 [label="'UseLegacyStrongNameProvider' 746461"];
332 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 746462"];
333 [label="param WithFeature(this CSharpParseOptions options) 746463"];
334 [label="param WithFeature(string feature) 746464"];
335 [label="param WithFeature(string value = 'true') 746465"];
336 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 746466"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 746467"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 746468"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 746469"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 746470"];
341 [label="new[] { new KeyValuePair<string, string>(feature, value) } 746471"];
342 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 746472"];
343 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 746473"];
344 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 746474"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 746475"];
346 [label="1 746476"];
347 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 746477"];
348 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 746478"];
349 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 746479"];
350 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 746480"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 746481"];
352 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 746482"];
353 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 746483"];
354 [label="LanguageVersion.CSharp8 746484"];
355 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 746485"];
356 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 746486"];
357 [label="RegularWithExtendedPartialMethods = RegularPreview 746487"];
358 [label="new SmallDictionary<string, string> { } 746488"];
359 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 746489"];
360 [label="kind: SourceCodeKind.Regular 746490"];
361 [label="documentationMode: DocumentationMode.None 746491"];
362 [label="languageVersion: LanguageVersion.Preview 746492"];
363 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 746493"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 746494"];
365 [label="s_experimentalFeatures 746495"];
366 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 746496"];
367 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 746497"];
368 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 746498"];
369 [label="'testV7SwitchBinder' 746499"];
370 [label="'true' 746500"];
371 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 746501"];
372 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 746502"];
373 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 746503"];
374 [label="RegularWithoutRecursivePatterns = Regular7_3 746504"];
375 [label="RegularWithRecursivePatterns = Regular8 746505"];
376 [label="RegularWithoutPatternCombinators = Regular8 746506"];
377 [label="RegularWithPatternCombinators = RegularPreview 746507"];
378 [label="OutputKind.DynamicallyLinkedLibrary 746508"];
379 [label="OptimizationLevel.Release 746509"];
380 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 746510"];
381 [label="param CreateTestOptions(OutputKind outputKind) 746511"];
382 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 746512"];
383 [label="param CreateTestOptions(bool allowUnsafe = false) 746513"];
384 [label="outputKind 746514"];
385 [label="optimizationLevel: optimizationLevel 746515"];
386 [label="warningLevel: Diagnostic.MaxWarningLevel 746516"];
387 [label="allowUnsafe: allowUnsafe 746517"];
388 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746518"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746519"];
390 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 746520"];
391 [label="OutputKind.ConsoleApplication 746521"];
392 [label="OptimizationLevel.Release 746522"];
393 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 746523"];
394 [label="param CreateTestOptions(OutputKind outputKind) 746524"];
395 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 746525"];
396 [label="param CreateTestOptions(bool allowUnsafe = false) 746526"];
397 [label="outputKind 746527"];
398 [label="optimizationLevel: optimizationLevel 746528"];
399 [label="warningLevel: Diagnostic.MaxWarningLevel 746529"];
400 [label="allowUnsafe: allowUnsafe 746530"];
401 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746531"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746532"];
403 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 746533"];
404 [label="true 746534"];
405 [label="ReleaseDll.WithDebugPlusMode(true) 746535"];
406 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 746536"];
407 [label="true 746537"];
408 [label="ReleaseExe.WithDebugPlusMode(true) 746538"];
409 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 746539"];
410 [label="OutputKind.DynamicallyLinkedLibrary 746540"];
411 [label="OptimizationLevel.Debug 746541"];
412 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 746542"];
413 [label="param CreateTestOptions(OutputKind outputKind) 746543"];
414 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 746544"];
415 [label="param CreateTestOptions(bool allowUnsafe = false) 746545"];
416 [label="outputKind 746546"];
417 [label="optimizationLevel: optimizationLevel 746547"];
418 [label="warningLevel: Diagnostic.MaxWarningLevel 746548"];
419 [label="allowUnsafe: allowUnsafe 746549"];
420 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746550"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746551"];
422 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 746552"];
423 [label="OutputKind.ConsoleApplication 746553"];
424 [label="OptimizationLevel.Debug 746554"];
425 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 746555"];
426 [label="param CreateTestOptions(OutputKind outputKind) 746556"];
427 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 746557"];
428 [label="param CreateTestOptions(bool allowUnsafe = false) 746558"];
429 [label="outputKind 746559"];
430 [label="optimizationLevel: optimizationLevel 746560"];
431 [label="warningLevel: Diagnostic.MaxWarningLevel 746561"];
432 [label="allowUnsafe: allowUnsafe 746562"];
433 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746563"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746564"];
435 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 746565"];
436 [label="OutputKind.WindowsRuntimeMetadata 746566"];
437 [label="OptimizationLevel.Release 746567"];
438 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 746568"];
439 [label="param CreateTestOptions(OutputKind outputKind) 746569"];
440 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 746570"];
441 [label="param CreateTestOptions(bool allowUnsafe = false) 746571"];
442 [label="outputKind 746572"];
443 [label="optimizationLevel: optimizationLevel 746573"];
444 [label="warningLevel: Diagnostic.MaxWarningLevel 746574"];
445 [label="allowUnsafe: allowUnsafe 746575"];
446 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746576"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746577"];
448 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 746578"];
449 [label="OutputKind.WindowsRuntimeMetadata 746579"];
450 [label="OptimizationLevel.Debug 746580"];
451 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 746581"];
452 [label="param CreateTestOptions(OutputKind outputKind) 746582"];
453 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 746583"];
454 [label="param CreateTestOptions(bool allowUnsafe = false) 746584"];
455 [label="outputKind 746585"];
456 [label="optimizationLevel: optimizationLevel 746586"];
457 [label="warningLevel: Diagnostic.MaxWarningLevel 746587"];
458 [label="allowUnsafe: allowUnsafe 746588"];
459 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746589"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746590"];
461 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 746591"];
462 [label="OutputKind.NetModule 746592"];
463 [label="OptimizationLevel.Release 746593"];
464 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 746594"];
465 [label="param CreateTestOptions(OutputKind outputKind) 746595"];
466 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 746596"];
467 [label="param CreateTestOptions(bool allowUnsafe = false) 746597"];
468 [label="outputKind 746598"];
469 [label="optimizationLevel: optimizationLevel 746599"];
470 [label="warningLevel: Diagnostic.MaxWarningLevel 746600"];
471 [label="allowUnsafe: allowUnsafe 746601"];
472 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746602"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746603"];
474 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 746604"];
475 [label="OutputKind.NetModule 746605"];
476 [label="OptimizationLevel.Debug 746606"];
477 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 746607"];
478 [label="param CreateTestOptions(OutputKind outputKind) 746608"];
479 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 746609"];
480 [label="param CreateTestOptions(bool allowUnsafe = false) 746610"];
481 [label="outputKind 746611"];
482 [label="optimizationLevel: optimizationLevel 746612"];
483 [label="warningLevel: Diagnostic.MaxWarningLevel 746613"];
484 [label="allowUnsafe: allowUnsafe 746614"];
485 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746615"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 746616"];
487 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 746617"];
488 [label="true 746618"];
489 [label="ReleaseDll.WithAllowUnsafe(true) 746619"];
490 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 746620"];
491 [label="true 746621"];
492 [label="ReleaseExe.WithAllowUnsafe(true) 746622"];
493 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 746623"];
494 [label="true 746624"];
495 [label="DebugDll.WithAllowUnsafe(true) 746625"];
496 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 746626"];
497 [label="true 746627"];
498 [label="DebugExe.WithAllowUnsafe(true) 746628"];
499 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 746629"];
500 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 746630"];
501 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 746631"];
502 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 746632"];
503 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 746633"];
504 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 746634"];
505 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 746635"];
506 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 746636"];
507 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 746637"];
508 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 746638"];
509 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 746639"];
510 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 746640"];
511 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 746641"];
512 [label="DebugInformationFormat.Pdb 746642"];
513 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 746643"];
514 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 746644"];
515 [label="options = TestOptions.Regular; 746645"];
516 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 746646"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 746647"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 746648"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 746649"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 746650"];
521 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 746651"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 746652"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 746653"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 746654"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 746655"];
526 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 746656"];
527 [label="param CheckSerializable(SyntaxTree tree) 746657"];
528 [label="var stream = new MemoryStream(); 746658"];
529 [label="var root = tree.GetRoot(); 746659"];
530 [label="var root = tree.GetRoot(); 746660"];
531 [label="root.SerializeTo(stream); 746661"];
532 [label="root.SerializeTo(stream); 746662"];
533 [label="root.SerializeTo(stream); 746663"];
534 [label="stream.Position = 0; 746664"];
535 [label="stream.Position 746665"];
536 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 746666"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 746667"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 746668"];
539 [label="return tree; 746669"];
540 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 746670"];
541 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 746671"];
542 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 746672"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 746673"];
544 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 746674"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 746675"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 746676"];
547 [label="hasTopLevelStatements 746677"];
548 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 746678"];
549 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 746679"];
550 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 746680"];
551 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 746681"];
552 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 746682"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 746683"];
554 [label="param ValidateIOperations(Func<Compilation> createCompilation) 746684"];
555 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 746685"];
556 [label="return; 746686"];
557 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 746687"];
558 [label="var compilation = createCompilationLambda(); 746688"];
559 [label="var compilation = createCompilationLambda(); 746689"];
560 [label="return Guid.NewGuid().ToString('D'); 746690"];
561 [label="var compilation = createCompilationLambda(); 746691"];
562 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 746692"];
563 [label="IsNullableEnabled(compilation) 746693"];
564 [label="param IsNullableEnabled(CSharpCompilation compilation) 746694"];
565 [label="var trees = compilation.SyntaxTrees; 746695"];
566 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 746696"];
567 [label="var options = (CSharpParseOptions)trees[0].Options; 746697"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 746698"];
569 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 746699"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 746700"];
571 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 746701"];
572 [label="return compilation; 746702"];
573 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 746703"];
574 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a') 746704"];
575 [label="param Diagnostic(object code) 746705"];
576 [label="param Diagnostic(string squiggledText = null) 746706"];
577 [label="param Diagnostic(object[] arguments = null) 746707"];
578 [label="param Diagnostic(LinePosition? startLocation = null) 746708"];
579 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 746709"];
580 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 746710"];
581 [label="param Diagnostic(bool isSuppressed = false) 746711"];
582 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746712"];
583 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746713"];
584 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746714"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746715"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746716"];
587 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746717"];
588 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746718"];
589 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 746719"];
590 [label="param Diagnostic(object code) 746720"];
591 [label="param Diagnostic(string squiggledText = null) 746721"];
592 [label="param Diagnostic(object[] arguments = null) 746722"];
593 [label="param Diagnostic(LinePosition? startLocation = null) 746723"];
594 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 746724"];
595 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 746725"];
596 [label="param Diagnostic(bool isSuppressed = false) 746726"];
597 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 746727"];
598 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746728"];
599 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746729"];
600 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746730"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746731"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746732"];
603 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746733"];
604 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746734"];
605 [label="{ } 746735"];
606 [label="None = { } 746736"];
607 [label="null 746737"];
608 [label="Any = null 746738"];
609 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746739"];
610 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 746740"];
611 [label="param DiagnosticDescription(object code) 746741"];
612 [label="param DiagnosticDescription(bool isWarningAsError) 746742"];
613 [label="param DiagnosticDescription(string squiggledText) 746743"];
614 [label="param DiagnosticDescription(object[] arguments) 746744"];
615 [label="param DiagnosticDescription(LinePosition? startLocation) 746745"];
616 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 746746"];
617 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 746747"];
618 [label="param DiagnosticDescription(Type errorCodeType = null) 746748"];
619 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 746749"];
620 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 746750"];
621 [label="param DiagnosticDescription(bool isSuppressed = false) 746751"];
622 [label="param DiagnosticDescription(this) 746752"];
623 [label="_code 746753"];
624 [label="_isWarningAsError 746754"];
625 [label="_isSuppressed 746755"];
626 [label="_squiggledText 746756"];
627 [label="_arguments 746757"];
628 [label="_startPosition 746758"];
629 [label="_argumentOrderDoesNotMatter 746759"];
630 [label="_errorCodeType 746760"];
631 [label="_ignoreArgumentsWhenComparing 746761"];
632 [label="_defaultSeverityOpt 746762"];
633 [label="_effectiveSeverityOpt 746763"];
634 [label="_syntaxPredicate 746764"];
635 [label="_showPredicate 746765"];
636 [label="_location 746766"];
637 [label="_argumentsAsStrings 746767"];
638 [label="_code 746768"];
639 [label="_isWarningAsError 746769"];
640 [label="_squiggledText 746770"];
641 [label="_arguments 746771"];
642 [label="_startPosition 746772"];
643 [label="_syntaxPredicate 746773"];
644 [label="_argumentOrderDoesNotMatter 746774"];
645 [label="_errorCodeType = errorCodeType ?? code.GetType(); 746775"];
646 [label="_errorCodeType 746776"];
647 [label="_defaultSeverityOpt 746777"];
648 [label="_effectiveSeverityOpt 746778"];
649 [label="_isSuppressed 746779"];
650 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746780"];
651 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 746781"];
652 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a') 746782"];
653 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a') 746783"];
654 [label="param WithArguments(params object[] arguments) 746784"];
655 [label="param WithArguments(this) 746785"];
656 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746786"];
657 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746787"];
658 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746788"];
659 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746789"];
660 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746790"];
661 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746791"];
662 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746792"];
663 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746793"];
664 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746794"];
665 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746795"];
666 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746796"];
667 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 746797"];
668 [label="param DiagnosticDescription(object code) 746798"];
669 [label="param DiagnosticDescription(bool isWarningAsError) 746799"];
670 [label="param DiagnosticDescription(string squiggledText) 746800"];
671 [label="param DiagnosticDescription(object[] arguments) 746801"];
672 [label="param DiagnosticDescription(LinePosition? startLocation) 746802"];
673 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 746803"];
674 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 746804"];
675 [label="param DiagnosticDescription(Type errorCodeType = null) 746805"];
676 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 746806"];
677 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 746807"];
678 [label="param DiagnosticDescription(bool isSuppressed = false) 746808"];
679 [label="param DiagnosticDescription(this) 746809"];
680 [label="_code 746810"];
681 [label="_isWarningAsError 746811"];
682 [label="_isSuppressed 746812"];
683 [label="_squiggledText 746813"];
684 [label="_arguments 746814"];
685 [label="_startPosition 746815"];
686 [label="_argumentOrderDoesNotMatter 746816"];
687 [label="_errorCodeType 746817"];
688 [label="_ignoreArgumentsWhenComparing 746818"];
689 [label="_defaultSeverityOpt 746819"];
690 [label="_effectiveSeverityOpt 746820"];
691 [label="_syntaxPredicate 746821"];
692 [label="_showPredicate 746822"];
693 [label="_location 746823"];
694 [label="_argumentsAsStrings 746824"];
695 [label="_arguments 746825"];
696 [label="_argumentOrderDoesNotMatter 746826"];
697 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 746827"];
698 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a') 746828"];
699 [label="param Diagnostic(object code) 746829"];
700 [label="param Diagnostic(string squiggledText = null) 746830"];
701 [label="param Diagnostic(object[] arguments = null) 746831"];
702 [label="param Diagnostic(LinePosition? startLocation = null) 746832"];
703 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 746833"];
704 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 746834"];
705 [label="param Diagnostic(bool isSuppressed = false) 746835"];
706 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746836"];
707 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746837"];
708 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746838"];
709 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746839"];
710 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746840"];
711 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746841"];
712 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746842"];
713 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 746843"];
714 [label="param Diagnostic(object code) 746844"];
715 [label="param Diagnostic(string squiggledText = null) 746845"];
716 [label="param Diagnostic(object[] arguments = null) 746846"];
717 [label="param Diagnostic(LinePosition? startLocation = null) 746847"];
718 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 746848"];
719 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 746849"];
720 [label="param Diagnostic(bool isSuppressed = false) 746850"];
721 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 746851"];
722 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746852"];
723 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746853"];
724 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746854"];
725 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746855"];
726 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746856"];
727 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746857"];
728 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746858"];
729 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746859"];
730 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 746860"];
731 [label="param DiagnosticDescription(object code) 746861"];
732 [label="param DiagnosticDescription(bool isWarningAsError) 746862"];
733 [label="param DiagnosticDescription(string squiggledText) 746863"];
734 [label="param DiagnosticDescription(object[] arguments) 746864"];
735 [label="param DiagnosticDescription(LinePosition? startLocation) 746865"];
736 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 746866"];
737 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 746867"];
738 [label="param DiagnosticDescription(Type errorCodeType = null) 746868"];
739 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 746869"];
740 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 746870"];
741 [label="param DiagnosticDescription(bool isSuppressed = false) 746871"];
742 [label="param DiagnosticDescription(this) 746872"];
743 [label="_code 746873"];
744 [label="_isWarningAsError 746874"];
745 [label="_isSuppressed 746875"];
746 [label="_squiggledText 746876"];
747 [label="_arguments 746877"];
748 [label="_startPosition 746878"];
749 [label="_argumentOrderDoesNotMatter 746879"];
750 [label="_errorCodeType 746880"];
751 [label="_ignoreArgumentsWhenComparing 746881"];
752 [label="_defaultSeverityOpt 746882"];
753 [label="_effectiveSeverityOpt 746883"];
754 [label="_syntaxPredicate 746884"];
755 [label="_showPredicate 746885"];
756 [label="_location 746886"];
757 [label="_argumentsAsStrings 746887"];
758 [label="_code 746888"];
759 [label="_isWarningAsError 746889"];
760 [label="_squiggledText 746890"];
761 [label="_arguments 746891"];
762 [label="_startPosition 746892"];
763 [label="_syntaxPredicate 746893"];
764 [label="_argumentOrderDoesNotMatter 746894"];
765 [label="_errorCodeType = errorCodeType ?? code.GetType(); 746895"];
766 [label="_errorCodeType 746896"];
767 [label="_defaultSeverityOpt 746897"];
768 [label="_effectiveSeverityOpt 746898"];
769 [label="_isSuppressed 746899"];
770 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746900"];
771 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 746901"];
772 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a') 746902"];
773 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a') 746903"];
774 [label="param WithArguments(params object[] arguments) 746904"];
775 [label="param WithArguments(this) 746905"];
776 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746906"];
777 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746907"];
778 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746908"];
779 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746909"];
780 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746910"];
781 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746911"];
782 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746912"];
783 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746913"];
784 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746914"];
785 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746915"];
786 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 746916"];
787 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 746917"];
788 [label="param DiagnosticDescription(object code) 746918"];
789 [label="param DiagnosticDescription(bool isWarningAsError) 746919"];
790 [label="param DiagnosticDescription(string squiggledText) 746920"];
791 [label="param DiagnosticDescription(object[] arguments) 746921"];
792 [label="param DiagnosticDescription(LinePosition? startLocation) 746922"];
793 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 746923"];
794 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 746924"];
795 [label="param DiagnosticDescription(Type errorCodeType = null) 746925"];
796 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 746926"];
797 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 746927"];
798 [label="param DiagnosticDescription(bool isSuppressed = false) 746928"];
799 [label="param DiagnosticDescription(this) 746929"];
800 [label="_code 746930"];
801 [label="_isWarningAsError 746931"];
802 [label="_isSuppressed 746932"];
803 [label="_squiggledText 746933"];
804 [label="_arguments 746934"];
805 [label="_startPosition 746935"];
806 [label="_argumentOrderDoesNotMatter 746936"];
807 [label="_errorCodeType 746937"];
808 [label="_ignoreArgumentsWhenComparing 746938"];
809 [label="_defaultSeverityOpt 746939"];
810 [label="_effectiveSeverityOpt 746940"];
811 [label="_syntaxPredicate 746941"];
812 [label="_showPredicate 746942"];
813 [label="_location 746943"];
814 [label="_argumentsAsStrings 746944"];
815 [label="_arguments 746945"];
816 [label="_argumentOrderDoesNotMatter 746946"];
817 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 746947"];
818 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a') 746948"];
819 [label="param Diagnostic(object code) 746949"];
820 [label="param Diagnostic(string squiggledText = null) 746950"];
821 [label="param Diagnostic(object[] arguments = null) 746951"];
822 [label="param Diagnostic(LinePosition? startLocation = null) 746952"];
823 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 746953"];
824 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 746954"];
825 [label="param Diagnostic(bool isSuppressed = false) 746955"];
826 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746956"];
827 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746957"];
828 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746958"];
829 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746959"];
830 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746960"];
831 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746961"];
832 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 746962"];
833 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 746963"];
834 [label="param Diagnostic(object code) 746964"];
835 [label="param Diagnostic(string squiggledText = null) 746965"];
836 [label="param Diagnostic(object[] arguments = null) 746966"];
837 [label="param Diagnostic(LinePosition? startLocation = null) 746967"];
838 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 746968"];
839 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 746969"];
840 [label="param Diagnostic(bool isSuppressed = false) 746970"];
841 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 746971"];
842 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746972"];
843 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746973"];
844 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746974"];
845 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746975"];
846 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746976"];
847 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746977"];
848 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746978"];
849 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 746979"];
850 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 746980"];
851 [label="param DiagnosticDescription(object code) 746981"];
852 [label="param DiagnosticDescription(bool isWarningAsError) 746982"];
853 [label="param DiagnosticDescription(string squiggledText) 746983"];
854 [label="param DiagnosticDescription(object[] arguments) 746984"];
855 [label="param DiagnosticDescription(LinePosition? startLocation) 746985"];
856 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 746986"];
857 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 746987"];
858 [label="param DiagnosticDescription(Type errorCodeType = null) 746988"];
859 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 746989"];
860 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 746990"];
861 [label="param DiagnosticDescription(bool isSuppressed = false) 746991"];
862 [label="param DiagnosticDescription(this) 746992"];
863 [label="_code 746993"];
864 [label="_isWarningAsError 746994"];
865 [label="_isSuppressed 746995"];
866 [label="_squiggledText 746996"];
867 [label="_arguments 746997"];
868 [label="_startPosition 746998"];
869 [label="_argumentOrderDoesNotMatter 746999"];
870 [label="_errorCodeType 747000"];
871 [label="_ignoreArgumentsWhenComparing 747001"];
872 [label="_defaultSeverityOpt 747002"];
873 [label="_effectiveSeverityOpt 747003"];
874 [label="_syntaxPredicate 747004"];
875 [label="_showPredicate 747005"];
876 [label="_location 747006"];
877 [label="_argumentsAsStrings 747007"];
878 [label="_code 747008"];
879 [label="_isWarningAsError 747009"];
880 [label="_squiggledText 747010"];
881 [label="_arguments 747011"];
882 [label="_startPosition 747012"];
883 [label="_syntaxPredicate 747013"];
884 [label="_argumentOrderDoesNotMatter 747014"];
885 [label="_errorCodeType = errorCodeType ?? code.GetType(); 747015"];
886 [label="_errorCodeType 747016"];
887 [label="_defaultSeverityOpt 747017"];
888 [label="_effectiveSeverityOpt 747018"];
889 [label="_isSuppressed 747019"];
890 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 747020"];
891 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 747021"];
892 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a') 747022"];
893 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a') 747023"];
894 [label="param WithArguments(params object[] arguments) 747024"];
895 [label="param WithArguments(this) 747025"];
896 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747026"];
897 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747027"];
898 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747028"];
899 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747029"];
900 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747030"];
901 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747031"];
902 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747032"];
903 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747033"];
904 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747034"];
905 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747035"];
906 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747036"];
907 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 747037"];
908 [label="param DiagnosticDescription(object code) 747038"];
909 [label="param DiagnosticDescription(bool isWarningAsError) 747039"];
910 [label="param DiagnosticDescription(string squiggledText) 747040"];
911 [label="param DiagnosticDescription(object[] arguments) 747041"];
912 [label="param DiagnosticDescription(LinePosition? startLocation) 747042"];
913 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 747043"];
914 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 747044"];
915 [label="param DiagnosticDescription(Type errorCodeType = null) 747045"];
916 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 747046"];
917 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 747047"];
918 [label="param DiagnosticDescription(bool isSuppressed = false) 747048"];
919 [label="param DiagnosticDescription(this) 747049"];
920 [label="_code 747050"];
921 [label="_isWarningAsError 747051"];
922 [label="_isSuppressed 747052"];
923 [label="_squiggledText 747053"];
924 [label="_arguments 747054"];
925 [label="_startPosition 747055"];
926 [label="_argumentOrderDoesNotMatter 747056"];
927 [label="_errorCodeType 747057"];
928 [label="_ignoreArgumentsWhenComparing 747058"];
929 [label="_defaultSeverityOpt 747059"];
930 [label="_effectiveSeverityOpt 747060"];
931 [label="_syntaxPredicate 747061"];
932 [label="_showPredicate 747062"];
933 [label="_location 747063"];
934 [label="_argumentsAsStrings 747064"];
935 [label="_arguments 747065"];
936 [label="_argumentOrderDoesNotMatter 747066"];
937 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 747067"];
938 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a') 747068"];
939 [label="param Diagnostic(object code) 747069"];
940 [label="param Diagnostic(string squiggledText = null) 747070"];
941 [label="param Diagnostic(object[] arguments = null) 747071"];
942 [label="param Diagnostic(LinePosition? startLocation = null) 747072"];
943 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 747073"];
944 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 747074"];
945 [label="param Diagnostic(bool isSuppressed = false) 747075"];
946 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 747076"];
947 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 747077"];
948 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 747078"];
949 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 747079"];
950 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 747080"];
951 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 747081"];
952 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 747082"];
953 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 747083"];
954 [label="param Diagnostic(object code) 747084"];
955 [label="param Diagnostic(string squiggledText = null) 747085"];
956 [label="param Diagnostic(object[] arguments = null) 747086"];
957 [label="param Diagnostic(LinePosition? startLocation = null) 747087"];
958 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 747088"];
959 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 747089"];
960 [label="param Diagnostic(bool isSuppressed = false) 747090"];
961 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 747091"];
962 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 747092"];
963 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 747093"];
964 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 747094"];
965 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 747095"];
966 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 747096"];
967 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 747097"];
968 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 747098"];
969 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 747099"];
970 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 747100"];
971 [label="param DiagnosticDescription(object code) 747101"];
972 [label="param DiagnosticDescription(bool isWarningAsError) 747102"];
973 [label="param DiagnosticDescription(string squiggledText) 747103"];
974 [label="param DiagnosticDescription(object[] arguments) 747104"];
975 [label="param DiagnosticDescription(LinePosition? startLocation) 747105"];
976 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 747106"];
977 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 747107"];
978 [label="param DiagnosticDescription(Type errorCodeType = null) 747108"];
979 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 747109"];
980 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 747110"];
981 [label="param DiagnosticDescription(bool isSuppressed = false) 747111"];
982 [label="param DiagnosticDescription(this) 747112"];
983 [label="_code 747113"];
984 [label="_isWarningAsError 747114"];
985 [label="_isSuppressed 747115"];
986 [label="_squiggledText 747116"];
987 [label="_arguments 747117"];
988 [label="_startPosition 747118"];
989 [label="_argumentOrderDoesNotMatter 747119"];
990 [label="_errorCodeType 747120"];
991 [label="_ignoreArgumentsWhenComparing 747121"];
992 [label="_defaultSeverityOpt 747122"];
993 [label="_effectiveSeverityOpt 747123"];
994 [label="_syntaxPredicate 747124"];
995 [label="_showPredicate 747125"];
996 [label="_location 747126"];
997 [label="_argumentsAsStrings 747127"];
998 [label="_code 747128"];
999 [label="_isWarningAsError 747129"];
1000 [label="_squiggledText 747130"];
1001 [label="_arguments 747131"];
1002 [label="_startPosition 747132"];
1003 [label="_syntaxPredicate 747133"];
1004 [label="_argumentOrderDoesNotMatter 747134"];
1005 [label="_errorCodeType = errorCodeType ?? code.GetType(); 747135"];
1006 [label="_errorCodeType 747136"];
1007 [label="_defaultSeverityOpt 747137"];
1008 [label="_effectiveSeverityOpt 747138"];
1009 [label="_isSuppressed 747139"];
1010 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 747140"];
1011 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 747141"];
1012 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a') 747142"];
1013 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a') 747143"];
1014 [label="param WithArguments(params object[] arguments) 747144"];
1015 [label="param WithArguments(this) 747145"];
1016 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747146"];
1017 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747147"];
1018 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747148"];
1019 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747149"];
1020 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747150"];
1021 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747151"];
1022 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747152"];
1023 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747153"];
1024 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747154"];
1025 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747155"];
1026 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 747156"];
1027 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 747157"];
1028 [label="param DiagnosticDescription(object code) 747158"];
1029 [label="param DiagnosticDescription(bool isWarningAsError) 747159"];
1030 [label="param DiagnosticDescription(string squiggledText) 747160"];
1031 [label="param DiagnosticDescription(object[] arguments) 747161"];
1032 [label="param DiagnosticDescription(LinePosition? startLocation) 747162"];
1033 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 747163"];
1034 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 747164"];
1035 [label="param DiagnosticDescription(Type errorCodeType = null) 747165"];
1036 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 747166"];
1037 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 747167"];
1038 [label="param DiagnosticDescription(bool isSuppressed = false) 747168"];
1039 [label="param DiagnosticDescription(this) 747169"];
1040 [label="_code 747170"];
1041 [label="_isWarningAsError 747171"];
1042 [label="_isSuppressed 747172"];
1043 [label="_squiggledText 747173"];
1044 [label="_arguments 747174"];
1045 [label="_startPosition 747175"];
1046 [label="_argumentOrderDoesNotMatter 747176"];
1047 [label="_errorCodeType 747177"];
1048 [label="_ignoreArgumentsWhenComparing 747178"];
1049 [label="_defaultSeverityOpt 747179"];
1050 [label="_effectiveSeverityOpt 747180"];
1051 [label="_syntaxPredicate 747181"];
1052 [label="_showPredicate 747182"];
1053 [label="_location 747183"];
1054 [label="_argumentsAsStrings 747184"];
1055 [label="_arguments 747185"];
1056 [label="_argumentOrderDoesNotMatter 747186"];
1057 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 747187"];
1058 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')) 747188"];
1059 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')) 747189"];
1060 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')) 747190"];
1061 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')) 747191"];
1062 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in F(a).ToString()) No(); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (52,54): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') F(a); } // Error // BUG?: Error in wrong order.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (54,60): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') No(); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a'),\n                // (55,64): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; foreach (char ch in 'abc') G(out a); F(a); } // Error\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')) 747192"];
1063 [label="param VerifyDiagnostics(this TCompilation c) 747193"];
1064 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 747194"];
1065 [label="var diagnostics = c.GetDiagnostics(); 747195"];
1066 [label="var diagnostics = c.GetDiagnostics(); 747196"];
1067 [label="diagnostics.Verify(expected); 747197"];
1068 [label="diagnostics.Verify(expected); 747198"];
1069 [label="diagnostics.Verify(expected) 747199"];
1070 [label="param Verify(this ImmutableArray<Diagnostic> actual) 747200"];
1071 [label="param Verify(params DiagnosticDescription[] expected) 747201"];
1072 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 747202"];
1073 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 747203"];
1074 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 747204"];
1075 [label="param Verify(this IEnumerable<Diagnostic> actual) 747205"];
1076 [label="param Verify(params DiagnosticDescription[] expected) 747206"];
1077 [label="Verify(actual, expected, errorCodeOnly: false); 747207"];
1078 [label="Verify(actual, expected, errorCodeOnly: false); 747208"];
1079 [label="Verify(actual, expected, errorCodeOnly: false); 747209"];
1080 [label="Verify(actual, expected, errorCodeOnly: false) 747210"];
1081 [label="param Verify(IEnumerable<Diagnostic> actual) 747211"];
1082 [label="param Verify(DiagnosticDescription[] expected) 747212"];
1083 [label="param Verify(bool errorCodeOnly) 747213"];
1084 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 747214"];
1085 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 747215"];
1086 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 747216"];
1087 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 747217"];
1088 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 747218"];
1089 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 747219"];
1090 [label="=> _defaultSeverityOpt 747220"];
1091 [label="_defaultSeverityOpt 747221"];
1092 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 747222"];
1093 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 747223"];
1094 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 747224"];
1095 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 747225"];
1096 [label="=> _effectiveSeverityOpt 747226"];
1097 [label="_effectiveSeverityOpt 747227"];
1098 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 747228"];
1099 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 747229"];
1100 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 747230"];
1101 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 747231"];
1102 [label="param DiagnosticDescription(Diagnostic d) 747232"];
1103 [label="param DiagnosticDescription(bool errorCodeOnly) 747233"];
1104 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 747234"];
1105 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 747235"];
1106 [label="param DiagnosticDescription(this) 747236"];
1107 [label="_code 747237"];
1108 [label="_isWarningAsError 747238"];
1109 [label="_isSuppressed 747239"];
1110 [label="_squiggledText 747240"];
1111 [label="_arguments 747241"];
1112 [label="_startPosition 747242"];
1113 [label="_argumentOrderDoesNotMatter 747243"];
1114 [label="_errorCodeType 747244"];
1115 [label="_defaultSeverityOpt 747245"];
1116 [label="_effectiveSeverityOpt 747246"];
1117 [label="_syntaxPredicate 747247"];
1118 [label="_code 747248"];
1119 [label="_isWarningAsError 747249"];
1120 [label="_isSuppressed 747250"];
1121 [label="_location 747251"];
1122 [label="includeDefaultSeverity 747252"];
1123 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 747253"];
1124 [label="_defaultSeverityOpt 747254"];
1125 [label="includeEffectiveSeverity 747255"];
1126 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 747256"];
1127 [label="_effectiveSeverityOpt 747257"];
1128 [label="DiagnosticWithInfo dinfo = null; 747258"];
1129 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 747259"];
1130 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 747260"];
1131 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 747261"];
1132 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 747262"];
1133 [label="dinfo = d as DiagnosticWithInfo; 747263"];
1134 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 747264"];
1135 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 747265"];
1136 [label="_errorCodeType 747266"];
1137 [label="_code 747267"];
1138 [label="_ignoreArgumentsWhenComparing 747268"];
1139 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 747269"];
1140 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 747270"];
1141 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 747271"];
1142 [label="_squiggledText 747272"];
1143 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 747273"];
1144 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 747274"];
1145 [label="_arguments 747275"];
1146 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 747276"];
1147 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 747277"];
1148 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 747278"];
1149 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 747279"];
1150 [label="_startPosition 747280"];
1151 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 747281"];
1152 [label="_code 747282"];
1153 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 747283"];
1154 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 747284"];
1155 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 747285"];
1156 [label="int index = unmatched.IndexOf(d); 747286"];
1157 [label="int index = unmatched.IndexOf(d); 747287"];
1158 [label="param Equals(object obj) 747288"];
1159 [label="param Equals(this) 747289"];
1160 [label="var d = obj as DiagnosticDescription; 747290"];
1161 [label="if (d == null)\n                return false; 747291"];
1162 [label="if (d == null)\n                return false; 747292"];
1163 [label="if (!_code.Equals(d._code))\n                return false; 747293"];
1164 [label="if (!_code.Equals(d._code))\n                return false; 747294"];
1165 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 747295"];
1166 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 747296"];
1167 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 747297"];
1168 [label="if (_squiggledText != d._squiggledText)\n                    return false; 747298"];
1169 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 747299"];
1170 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 747300"];
1171 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 747301"];
1172 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 747302"];
1173 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 747303"];
1174 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 747304"];
1175 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 747305"];
1176 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 747306"];
1177 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 747307"];
1178 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 747308"];
1179 [label="if (d._arguments == null)\n                    return false; 747309"];
1180 [label="GetArgumentsAsStrings() 747310"];
1181 [label="param GetArgumentsAsStrings(this) 747311"];
1182 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 747312"];
1183 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 747313"];
1184 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 747314"];
1185 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 747315"];
1186 [label="_argumentsAsStrings 747316"];
1187 [label="return _argumentsAsStrings; 747317"];
1188 [label="var args1 = GetArgumentsAsStrings(); 747318"];
1189 [label="d.GetArgumentsAsStrings() 747319"];
1190 [label="param GetArgumentsAsStrings(this) 747320"];
1191 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 747321"];
1192 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 747322"];
1193 [label="return _argumentsAsStrings; 747323"];
1194 [label="var args2 = d.GetArgumentsAsStrings(); 747324"];
1195 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 747325"];
1196 [label="if (!args1.SequenceEqual(args2))\n                        return false; 747326"];
1197 [label="if (!args1.SequenceEqual(args2))\n                        return false; 747327"];
1198 [label="if (!args1.SequenceEqual(args2))\n                        return false; 747328"];
1199 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 747329"];
1200 [label="return true; 747330"];
1201 [label="int index = unmatched.IndexOf(d); 747331"];
1202 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 747332"];
1203 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 747333"];
1204 [label="unmatched.RemoveAt(index); 747334"];
1205 [label="if (d == null)\n                return false; 747335"];
1206 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 747336"];
1207 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 747337"];
1208 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 747338"];
1209 [label="if (_squiggledText != d._squiggledText)\n                    return false; 747339"];
1210 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 747340"];
1211 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 747341"];
1212 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 747342"];
1213 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 747343"];
1214 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 747344"];
1215 [label="if (d._arguments == null)\n                    return false; 747345"];
1216 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 747346"];
1217 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 747347"];
1218 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 747348"];
1219 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 747349"];
1220 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 747350"];
1221 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 747351"];
1222 [label="DiagnosticDescription.GetAssertText(expected, actual) 747352"];
1223 [label="param GetAssertText(DiagnosticDescription[] expected) 747353"];
1224 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 747354"];
1225 [label="const int CSharp = 1; 747355"];
1226 [label="const int VisualBasic = 2; 747356"];
1227 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 747357"];
1228 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 747358"];
1229 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 747359"];
1230 [label="actual.Any() && actual.First() is CSDiagnostic 747360"];
1231 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 747361"];
1232 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 747362"];
1233 [label="int indentDepth = (language == CSharp) ? 4 : 1; 747363"];
1234 [label="(language == CSharp) 747364"];
1235 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 747365"];
1236 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 747366"];
1237 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 747367"];
1238 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 747368"];
1239 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 747369"];
1240 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 747370"];
1241 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 747371"];
1242 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 747372"];
1243 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 747373"];
1244 [label="IsSortedOrEmpty(expected) 747374"];
1245 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 747375"];
1246 [label="new LinePositionComparer() 747376"];
1247 [label="param LinePositionComparer(this) 747377"];
1248 [label="Instance = new LinePositionComparer() 747378"];
1249 [label="var comparer = LinePositionComparer.Instance; 747379"];
1250 [label="DiagnosticDescription last = null; 747380"];
1251 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 747381"];
1252 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 747382"];
1253 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 747383"];
1254 [label="return false; 747384"];
1255 [label="var assertText = new StringBuilder(); 747385"];
1256 [label="assertText.AppendLine(); 747386"];
1257 [label="int i; 747387"];
1258 [label="assertText.AppendLine('Expected:'); 747388"];
1259 [label="assertText.AppendLine('Expected:'); 747389"];
1260 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 747390"];
1261 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 747391"];
1262 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 747392"];
1263 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 747393"];
1264 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 747394"];
1265 [label="GetDiagnosticDescription(d, indentDepth) 747395"];
1266 [label="param GetDiagnosticDescription(DiagnosticDescription d) 747396"];
1267 [label="param GetDiagnosticDescription(int indentDepth) 747397"];
1268 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747398"];
1269 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747399"];
1270 [label="d.ToString() 747400"];
1271 [label="param ToString(this) 747401"];
1272 [label="var sb = new StringBuilder(); 747402"];
1273 [label="sb.Append('Diagnostic('); 747403"];
1274 [label="sb.Append('Diagnostic('); 747404"];
1275 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 747405"];
1276 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 747406"];
1277 [label="sb.Append(_errorCodeType.Name); 747407"];
1278 [label="sb.Append(_errorCodeType.Name); 747408"];
1279 [label="sb.Append('.'); 747409"];
1280 [label="sb.Append('.'); 747410"];
1281 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 747411"];
1282 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 747412"];
1283 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 747413"];
1284 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 747414"];
1285 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 747415"];
1286 [label="sb.Append(', \\''); 747416"];
1287 [label="sb.Append(', \\''); 747417"];
1288 [label="sb.Append(_squiggledText); 747418"];
1289 [label="sb.Append(_squiggledText); 747419"];
1290 [label="sb.Append('''); 747420"];
1291 [label="sb.Append('''); 747421"];
1292 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 747422"];
1293 [label="sb.Append(')'); 747423"];
1294 [label="sb.Append(')'); 747424"];
1295 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 747425"];
1296 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 747426"];
1297 [label="sb.Append('.WithArguments('); 747427"];
1298 [label="sb.Append('.WithArguments('); 747428"];
1299 [label="GetArgumentsAsStrings() 747429"];
1300 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 747430"];
1301 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 747431"];
1302 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 747432"];
1303 [label="sb.Append('\\''); 747433"];
1304 [label="sb.Append('\\''); 747434"];
1305 [label="sb.Append(argumentStrings.Current); 747435"];
1306 [label="sb.Append(argumentStrings.Current); 747436"];
1307 [label="sb.Append('\\''); 747437"];
1308 [label="sb.Append('\\''); 747438"];
1309 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 747439"];
1310 [label="sb.Append(')'); 747440"];
1311 [label="sb.Append(')'); 747441"];
1312 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 747442"];
1313 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 747443"];
1314 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 747444"];
1315 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 747445"];
1316 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 747446"];
1317 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 747447"];
1318 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 747448"];
1319 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 747449"];
1320 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 747450"];
1321 [label="return sb.ToString(); 747451"];
1322 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747452"];
1323 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747453"];
1324 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 747454"];
1325 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 747455"];
1326 [label="param GetDiagnosticDescription(int indentDepth) 747456"];
1327 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747457"];
1328 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747458"];
1329 [label="var sb = new StringBuilder(); 747459"];
1330 [label="sb.Append('Diagnostic('); 747460"];
1331 [label="sb.Append('Diagnostic('); 747461"];
1332 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 747462"];
1333 [label="sb.Append(_errorCodeType.Name); 747463"];
1334 [label="sb.Append(_errorCodeType.Name); 747464"];
1335 [label="sb.Append('.'); 747465"];
1336 [label="sb.Append('.'); 747466"];
1337 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 747467"];
1338 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 747468"];
1339 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 747469"];
1340 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 747470"];
1341 [label="sb.Append(', \\''); 747471"];
1342 [label="sb.Append(', \\''); 747472"];
1343 [label="sb.Append(_squiggledText); 747473"];
1344 [label="sb.Append(_squiggledText); 747474"];
1345 [label="sb.Append('''); 747475"];
1346 [label="sb.Append('''); 747476"];
1347 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 747477"];
1348 [label="sb.Append(')'); 747478"];
1349 [label="sb.Append(')'); 747479"];
1350 [label="sb.Append('.WithArguments('); 747480"];
1351 [label="sb.Append('.WithArguments('); 747481"];
1352 [label="sb.Append('\\''); 747482"];
1353 [label="sb.Append(argumentStrings.Current); 747483"];
1354 [label="sb.Append(argumentStrings.Current); 747484"];
1355 [label="sb.Append('\\''); 747485"];
1356 [label="sb.Append(')'); 747486"];
1357 [label="sb.Append(')'); 747487"];
1358 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 747488"];
1359 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 747489"];
1360 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 747490"];
1361 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 747491"];
1362 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 747492"];
1363 [label="return sb.ToString(); 747493"];
1364 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747494"];
1365 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747495"];
1366 [label="GetCommaSeparatedLines(assertText, expectedText); 747496"];
1367 [label="GetCommaSeparatedLines(assertText, expectedText); 747497"];
1368 [label="GetCommaSeparatedLines(assertText, expectedText) 747498"];
1369 [label="param GetCommaSeparatedLines(StringBuilder sb) 747499"];
1370 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 747500"];
1371 [label="int n = lines.Count; 747501"];
1372 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 747502"];
1373 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 747503"];
1374 [label="sb.Append(lines[i]); 747504"];
1375 [label="sb.Append(lines[i]); 747505"];
1376 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 747506"];
1377 [label="sb.Append(','); 747507"];
1378 [label="sb.Append(','); 747508"];
1379 [label="sb.AppendLine(); 747509"];
1380 [label="GetCommaSeparatedLines(assertText, expectedText); 747510"];
1381 [label="assertText.AppendLine('Actual:'); 747511"];
1382 [label="assertText.AppendLine('Actual:'); 747512"];
1383 [label="var actualText = ArrayBuilder<string>.GetInstance(); 747513"];
1384 [label="var e = actual.GetEnumerator(); 747514"];
1385 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 747515"];
1386 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 747516"];
1387 [label="Diagnostic d = e.Current; 747517"];
1388 [label="string message = d.ToString(); 747518"];
1389 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 747519"];
1390 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 747520"];
1391 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 747521"];
1392 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 747522"];
1393 [label="Indent(assertText, indentDepth); 747523"];
1394 [label="Indent(assertText, indentDepth); 747524"];
1395 [label="Indent(assertText, indentDepth) 747525"];
1396 [label="param Indent(StringBuilder sb) 747526"];
1397 [label="param Indent(int count) 747527"];
1398 [label="sb.Append(' ', 4 * count); 747528"];
1399 [label="sb.Append(' ', 4 * count); 747529"];
1400 [label="sb.Append(' ', 4 * count); 747530"];
1401 [label="Indent(assertText, indentDepth); 747531"];
1402 [label="assertText.Append('// '); 747532"];
1403 [label="assertText.Append('// '); 747533"];
1404 [label="assertText.AppendLine(d.ToString()); 747534"];
1405 [label="assertText.AppendLine(d.ToString()); 747535"];
1406 [label="var l = d.Location; 747536"];
1407 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 747537"];
1408 [label="Indent(assertText, indentDepth); 747538"];
1409 [label="Indent(assertText, indentDepth); 747539"];
1410 [label="Indent(assertText, indentDepth) 747540"];
1411 [label="param Indent(StringBuilder sb) 747541"];
1412 [label="param Indent(int count) 747542"];
1413 [label="sb.Append(' ', 4 * count); 747543"];
1414 [label="sb.Append(' ', 4 * count); 747544"];
1415 [label="sb.Append(' ', 4 * count); 747545"];
1416 [label="Indent(assertText, indentDepth); 747546"];
1417 [label="assertText.Append('// '); 747547"];
1418 [label="assertText.Append('// '); 747548"];
1419 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 747549"];
1420 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 747550"];
1421 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 747551"];
1422 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 747552"];
1423 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 747553"];
1424 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 747554"];
1425 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 747555"];
1426 [label="param DiagnosticDescription(Diagnostic d) 747556"];
1427 [label="param DiagnosticDescription(bool errorCodeOnly) 747557"];
1428 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 747558"];
1429 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 747559"];
1430 [label="param DiagnosticDescription(this) 747560"];
1431 [label="_code 747561"];
1432 [label="_isWarningAsError 747562"];
1433 [label="_isSuppressed 747563"];
1434 [label="_squiggledText 747564"];
1435 [label="_arguments 747565"];
1436 [label="_startPosition 747566"];
1437 [label="_errorCodeType 747567"];
1438 [label="_defaultSeverityOpt 747568"];
1439 [label="_effectiveSeverityOpt 747569"];
1440 [label="_code 747570"];
1441 [label="_isWarningAsError 747571"];
1442 [label="_isSuppressed 747572"];
1443 [label="_location 747573"];
1444 [label="DiagnosticWithInfo dinfo = null; 747574"];
1445 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 747575"];
1446 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 747576"];
1447 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 747577"];
1448 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 747578"];
1449 [label="var diffDescription = description; 747579"];
1450 [label="var idx = Array.IndexOf(expected, description); 747580"];
1451 [label="var idx = Array.IndexOf(expected, description); 747581"];
1452 [label="var idx = Array.IndexOf(expected, description); 747582"];
1453 [label="var idx = Array.IndexOf(expected, description); 747583"];
1454 [label="if (d == null)\n                return false; 747584"];
1455 [label="if (d == null)\n                return false; 747585"];
1456 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 747586"];
1457 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 747587"];
1458 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 747588"];
1459 [label="if (_squiggledText != d._squiggledText)\n                    return false; 747589"];
1460 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 747590"];
1461 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 747591"];
1462 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 747592"];
1463 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 747593"];
1464 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 747594"];
1465 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 747595"];
1466 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 747596"];
1467 [label="if (d._arguments == null)\n                    return false; 747597"];
1468 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 747598"];
1469 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 747599"];
1470 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 747600"];
1471 [label="diffDescription = expected[idx]; 747601"];
1472 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 747602"];
1473 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 747603"];
1474 [label="GetDiagnosticDescription(description, indentDepth) 747604"];
1475 [label="param GetDiagnosticDescription(DiagnosticDescription d) 747605"];
1476 [label="param GetDiagnosticDescription(int indentDepth) 747606"];
1477 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747607"];
1478 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747608"];
1479 [label="var sb = new StringBuilder(); 747609"];
1480 [label="sb.Append('Diagnostic('); 747610"];
1481 [label="sb.Append('Diagnostic('); 747611"];
1482 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 747612"];
1483 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 747613"];
1484 [label="sb.Append(_errorCodeType.Name); 747614"];
1485 [label="sb.Append(_errorCodeType.Name); 747615"];
1486 [label="sb.Append('.'); 747616"];
1487 [label="sb.Append('.'); 747617"];
1488 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 747618"];
1489 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 747619"];
1490 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 747620"];
1491 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 747621"];
1492 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 747622"];
1493 [label="sb.Append(', \\''); 747623"];
1494 [label="sb.Append(', \\''); 747624"];
1495 [label="sb.Append(_squiggledText); 747625"];
1496 [label="sb.Append(_squiggledText); 747626"];
1497 [label="sb.Append('''); 747627"];
1498 [label="sb.Append('''); 747628"];
1499 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 747629"];
1500 [label="sb.Append(')'); 747630"];
1501 [label="sb.Append(')'); 747631"];
1502 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 747632"];
1503 [label="sb.Append('.WithArguments('); 747633"];
1504 [label="sb.Append('.WithArguments('); 747634"];
1505 [label="sb.Append('\\''); 747635"];
1506 [label="sb.Append('\\''); 747636"];
1507 [label="sb.Append(argumentStrings.Current); 747637"];
1508 [label="sb.Append(argumentStrings.Current); 747638"];
1509 [label="sb.Append('\\''); 747639"];
1510 [label="sb.Append('\\''); 747640"];
1511 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 747641"];
1512 [label="sb.Append(')'); 747642"];
1513 [label="sb.Append(')'); 747643"];
1514 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 747644"];
1515 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 747645"];
1516 [label="sb.Append('.WithLocation('); 747646"];
1517 [label="sb.Append('.WithLocation('); 747647"];
1518 [label="sb.Append(_startPosition.Value.Line + 1); 747648"];
1519 [label="sb.Append(_startPosition.Value.Line + 1); 747649"];
1520 [label="sb.Append(', '); 747650"];
1521 [label="sb.Append(', '); 747651"];
1522 [label="sb.Append(_startPosition.Value.Character + 1); 747652"];
1523 [label="sb.Append(_startPosition.Value.Character + 1); 747653"];
1524 [label="sb.Append(')'); 747654"];
1525 [label="sb.Append(')'); 747655"];
1526 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 747656"];
1527 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 747657"];
1528 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 747658"];
1529 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 747659"];
1530 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 747660"];
1531 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 747661"];
1532 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 747662"];
1533 [label="return sb.ToString(); 747663"];
1534 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747664"];
1535 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747665"];
1536 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 747666"];
1537 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 747667"];
1538 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 747668"];
1539 [label="GetDiagnosticDescription(diffDescription, indentDepth) 747669"];
1540 [label="param GetDiagnosticDescription(DiagnosticDescription d) 747670"];
1541 [label="param GetDiagnosticDescription(int indentDepth) 747671"];
1542 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747672"];
1543 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747673"];
1544 [label="var sb = new StringBuilder(); 747674"];
1545 [label="sb.Append('Diagnostic('); 747675"];
1546 [label="sb.Append('Diagnostic('); 747676"];
1547 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 747677"];
1548 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 747678"];
1549 [label="sb.Append(_errorCodeType.Name); 747679"];
1550 [label="sb.Append(_errorCodeType.Name); 747680"];
1551 [label="sb.Append('.'); 747681"];
1552 [label="sb.Append('.'); 747682"];
1553 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 747683"];
1554 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 747684"];
1555 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 747685"];
1556 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 747686"];
1557 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 747687"];
1558 [label="sb.Append(', \\''); 747688"];
1559 [label="sb.Append(', \\''); 747689"];
1560 [label="sb.Append(_squiggledText); 747690"];
1561 [label="sb.Append(_squiggledText); 747691"];
1562 [label="sb.Append('''); 747692"];
1563 [label="sb.Append('''); 747693"];
1564 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 747694"];
1565 [label="sb.Append(')'); 747695"];
1566 [label="sb.Append(')'); 747696"];
1567 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 747697"];
1568 [label="sb.Append('.WithArguments('); 747698"];
1569 [label="sb.Append('.WithArguments('); 747699"];
1570 [label="sb.Append('\\''); 747700"];
1571 [label="sb.Append('\\''); 747701"];
1572 [label="sb.Append(argumentStrings.Current); 747702"];
1573 [label="sb.Append(argumentStrings.Current); 747703"];
1574 [label="sb.Append('\\''); 747704"];
1575 [label="sb.Append('\\''); 747705"];
1576 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 747706"];
1577 [label="sb.Append(')'); 747707"];
1578 [label="sb.Append(')'); 747708"];
1579 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 747709"];
1580 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 747710"];
1581 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 747711"];
1582 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 747712"];
1583 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 747713"];
1584 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 747714"];
1585 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 747715"];
1586 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 747716"];
1587 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 747717"];
1588 [label="return sb.ToString(); 747718"];
1589 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747719"];
1590 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747720"];
1591 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 747721"];
1592 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 747722"];
1593 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 747723"];
1594 [label="assertText.AppendLine(','); 747724"];
1595 [label="assertText.AppendLine(','); 747725"];
1596 [label="Indent(assertText, indentDepth); 747726"];
1597 [label="Indent(assertText, indentDepth); 747727"];
1598 [label="Indent(assertText, indentDepth) 747728"];
1599 [label="param Indent(StringBuilder sb) 747729"];
1600 [label="param Indent(int count) 747730"];
1601 [label="sb.Append(' ', 4 * count); 747731"];
1602 [label="sb.Append(' ', 4 * count); 747732"];
1603 [label="Indent(assertText, indentDepth); 747733"];
1604 [label="assertText.Append('// '); 747734"];
1605 [label="Indent(assertText, indentDepth); 747735"];
1606 [label="Indent(assertText, indentDepth); 747736"];
1607 [label="Indent(assertText, indentDepth) 747737"];
1608 [label="param Indent(StringBuilder sb) 747738"];
1609 [label="param Indent(int count) 747739"];
1610 [label="sb.Append(' ', 4 * count); 747740"];
1611 [label="sb.Append(' ', 4 * count); 747741"];
1612 [label="Indent(assertText, indentDepth); 747742"];
1613 [label="assertText.Append('// '); 747743"];
1614 [label="_code 747744"];
1615 [label="_isWarningAsError 747745"];
1616 [label="_isSuppressed 747746"];
1617 [label="_squiggledText 747747"];
1618 [label="_arguments 747748"];
1619 [label="_startPosition 747749"];
1620 [label="_errorCodeType 747750"];
1621 [label="_defaultSeverityOpt 747751"];
1622 [label="_effectiveSeverityOpt 747752"];
1623 [label="_code 747753"];
1624 [label="DiagnosticWithInfo dinfo = null; 747754"];
1625 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 747755"];
1626 [label="var diffDescription = description; 747756"];
1627 [label="if (d == null)\n                return false; 747757"];
1628 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 747758"];
1629 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 747759"];
1630 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 747760"];
1631 [label="if (_squiggledText != d._squiggledText)\n                    return false; 747761"];
1632 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 747762"];
1633 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 747763"];
1634 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 747764"];
1635 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 747765"];
1636 [label="if (d._arguments == null)\n                    return false; 747766"];
1637 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 747767"];
1638 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 747768"];
1639 [label="param GetDiagnosticDescription(int indentDepth) 747769"];
1640 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747770"];
1641 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747771"];
1642 [label="var sb = new StringBuilder(); 747772"];
1643 [label="sb.Append('Diagnostic('); 747773"];
1644 [label="sb.Append('Diagnostic('); 747774"];
1645 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 747775"];
1646 [label="sb.Append(_errorCodeType.Name); 747776"];
1647 [label="sb.Append(_errorCodeType.Name); 747777"];
1648 [label="sb.Append('.'); 747778"];
1649 [label="sb.Append('.'); 747779"];
1650 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 747780"];
1651 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 747781"];
1652 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 747782"];
1653 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 747783"];
1654 [label="sb.Append(', \\''); 747784"];
1655 [label="sb.Append(', \\''); 747785"];
1656 [label="sb.Append(_squiggledText); 747786"];
1657 [label="sb.Append(_squiggledText); 747787"];
1658 [label="sb.Append('''); 747788"];
1659 [label="sb.Append('''); 747789"];
1660 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 747790"];
1661 [label="sb.Append(')'); 747791"];
1662 [label="sb.Append(')'); 747792"];
1663 [label="sb.Append('.WithArguments('); 747793"];
1664 [label="sb.Append('\\''); 747794"];
1665 [label="sb.Append(argumentStrings.Current); 747795"];
1666 [label="sb.Append('\\''); 747796"];
1667 [label="sb.Append(')'); 747797"];
1668 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 747798"];
1669 [label="sb.Append('.WithLocation('); 747799"];
1670 [label="sb.Append('.WithLocation('); 747800"];
1671 [label="sb.Append(_startPosition.Value.Line + 1); 747801"];
1672 [label="sb.Append(_startPosition.Value.Line + 1); 747802"];
1673 [label="sb.Append(', '); 747803"];
1674 [label="sb.Append(', '); 747804"];
1675 [label="sb.Append(_startPosition.Value.Character + 1); 747805"];
1676 [label="sb.Append(_startPosition.Value.Character + 1); 747806"];
1677 [label="sb.Append(')'); 747807"];
1678 [label="sb.Append(')'); 747808"];
1679 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 747809"];
1680 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 747810"];
1681 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 747811"];
1682 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 747812"];
1683 [label="return sb.ToString(); 747813"];
1684 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747814"];
1685 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747815"];
1686 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 747816"];
1687 [label="param GetDiagnosticDescription(int indentDepth) 747817"];
1688 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747818"];
1689 [label="return sb.ToString(); 747819"];
1690 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747820"];
1691 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 747821"];
1692 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 747822"];
1693 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 747823"];
1694 [label="assertText.AppendLine(); 747824"];
1695 [label="assertText.AppendLine('Diff:'); 747825"];
1696 [label="assertText.AppendLine('Diff:'); 747826"];
1697 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 747827"];
1698 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 747828"];
1699 [label="new[] { '\\r', '\\n' } 747829"];
1700 [label="'\\r' 747830"];
1701 [label="'\\n' 747831"];
1702 [label="new[] { '\\r', '\\n' } 747832"];
1703 [label="new[] { '\\r', '\\n' } 747833"];
1704 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 747834"];
1705 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 747835"];
1706 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 747836"];
1707 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 747837"];
1708 [label="param DiffReport(IEnumerable<T> expected) 747838"];
1709 [label="param DiffReport(IEnumerable<T> actual) 747839"];
1710 [label="param DiffReport(string separator) 747840"];
1711 [label="param DiffReport(IEqualityComparer<T> comparer = null) 747841"];
1712 [label="param DiffReport(Func<T, string> toString = null) 747842"];
1713 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 747843"];
1714 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 747844"];
1715 [label="(comparer != null) 747845"];
1716 [label="EqualityComparer<T>.Default 747846"];
1717 [label="new LCS<T>(EqualityComparer<T>.Default) 747847"];
1718 [label="param LCS(IEqualityComparer<T> comparer) 747848"];
1719 [label="param LCS(this) 747849"];
1720 [label="1 747850"];
1721 [label="DeleteCost = 1 747851"];
1722 [label="1 747852"];
1723 [label="InsertCost = 1 747853"];
1724 [label="2 747854"];
1725 [label="UpdateCost = 2 747855"];
1726 [label="param LongestCommonSubsequence(this) 747856"];
1727 [label="_comparer 747857"];
1728 [label="_comparer 747858"];
1729 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 747859"];
1730 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 747860"];
1731 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 747861"];
1732 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 747862"];
1733 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 747863"];
1734 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 747864"];
1735 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 747865"];
1736 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 747866"];
1737 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 747867"];
1738 [label="lcs.CalculateDiff(expectedList, actualList, toString) 747868"];
1739 [label="param CalculateDiff(IList<T> sequenceA) 747869"];
1740 [label="param CalculateDiff(IList<T> sequenceB) 747870"];
1741 [label="param CalculateDiff(Func<T, string> toString) 747871"];
1742 [label="param CalculateDiff(this) 747872"];
1743 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 747873"];
1744 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 747874"];
1745 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 747875"];
1746 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 747876"];
1747 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 747877"];
1748 [label="param GetEdits(TSequence sequenceA) 747878"];
1749 [label="param GetEdits(int lengthA) 747879"];
1750 [label="param GetEdits(TSequence sequenceB) 747880"];
1751 [label="param GetEdits(int lengthB) 747881"];
1752 [label="param GetEdits(this) 747882"];
1753 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 747883"];
1754 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 747884"];
1755 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 747885"];
1756 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 747886"];
1757 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 747887"];
1758 [label="param ComputeCostMatrix(TSequence sequenceA) 747888"];
1759 [label="param ComputeCostMatrix(int lengthA) 747889"];
1760 [label="param ComputeCostMatrix(TSequence sequenceB) 747890"];
1761 [label="param ComputeCostMatrix(int lengthB) 747891"];
1762 [label="param ComputeCostMatrix(this) 747892"];
1763 [label="var la = lengthA + 1; 747893"];
1764 [label="var la = lengthA + 1; 747894"];
1765 [label="var lb = lengthB + 1; 747895"];
1766 [label="var lb = lengthB + 1; 747896"];
1767 [label="var d = new int[la, lb]; 747897"];
1768 [label="d[0, 0] = 0; 747898"];
1769 [label="d[0, 0] 747899"];
1770 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 747900"];
1771 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 747901"];
1772 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 747902"];
1773 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 747903"];
1774 [label="d[i, 0] 747904"];
1775 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 747905"];
1776 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 747906"];
1777 [label="d[0, j] = d[0, j - 1] + InsertCost; 747907"];
1778 [label="d[0, j] = d[0, j - 1] + InsertCost; 747908"];
1779 [label="d[0, j] 747909"];
1780 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 747910"];
1781 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 747911"];
1782 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 747912"];
1783 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 747913"];
1784 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 747914"];
1785 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 747915"];
1786 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 747916"];
1787 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 747917"];
1788 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 747918"];
1789 [label="param ItemsEqual(IList<T> sequenceA) 747919"];
1790 [label="param ItemsEqual(int indexA) 747920"];
1791 [label="param ItemsEqual(IList<T> sequenceB) 747921"];
1792 [label="param ItemsEqual(int indexB) 747922"];
1793 [label="param ItemsEqual(this) 747923"];
1794 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 747924"];
1795 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 747925"];
1796 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 747926"];
1797 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 747927"];
1798 [label="int m2 = d[i - 1, j] + DeleteCost; 747928"];
1799 [label="int m2 = d[i - 1, j] + DeleteCost; 747929"];
1800 [label="int m3 = d[i, j - 1] + InsertCost; 747930"];
1801 [label="int m3 = d[i, j - 1] + InsertCost; 747931"];
1802 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 747932"];
1803 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 747933"];
1804 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 747934"];
1805 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 747935"];
1806 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 747936"];
1807 [label="d[i, j] 747937"];
1808 [label="return d; 747938"];
1809 [label="int i = lengthA; 747939"];
1810 [label="int j = lengthB; 747940"];
1811 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 747941"];
1812 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 747942"];
1813 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 747943"];
1814 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 747944"];
1815 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 747945"];
1816 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 747946"];
1817 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 747947"];
1818 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 747948"];
1819 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 747949"];
1820 [label="i--; 747950"];
1821 [label="j--; 747951"];
1822 [label="yield return new Edit(EditKind.Update, i, j); 747952"];
1823 [label="yield return new Edit(EditKind.Update, i, j); 747953"];
1824 [label="yield return new Edit(EditKind.Update, i, j); 747954"];
1825 [label="yield return new Edit(EditKind.Update, i, j); 747955"];
1826 [label="new Edit(EditKind.Update, i, j) 747956"];
1827 [label="param Edit(EditKind kind) 747957"];
1828 [label="param Edit(int indexA) 747958"];
1829 [label="param Edit(int indexB) 747959"];
1830 [label="param Edit(this) 747960"];
1831 [label="this.Kind 747961"];
1832 [label="this.IndexA 747962"];
1833 [label="this.IndexB 747963"];
1834 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 747964"];
1835 [label="yield return new Edit(EditKind.Update, i, j); 747965"];
1836 [label="yield return new Edit(EditKind.Update, i, j); 747966"];
1837 [label="new Edit(EditKind.Update, i, j) 747967"];
1838 [label="param Edit(EditKind kind) 747968"];
1839 [label="param Edit(int indexA) 747969"];
1840 [label="param Edit(int indexB) 747970"];
1841 [label="param Edit(this) 747971"];
1842 [label="this.Kind 747972"];
1843 [label="this.IndexA 747973"];
1844 [label="this.IndexB 747974"];
1845 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 747975"];
1846 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 747976"];
1847 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 747977"];
1848 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 747978"];
1849 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 747979"];
1850 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 747980"];
1851 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 747981"];
1852 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 747982"];
1853 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 747983"];
1854 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 747984"];
1855 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 747985"];
1856 [label="actualText.Free(); 747986"];
1857 [label="expectedText.Free(); 747987"];
1858 [label="return assertText.ToString(); 747988"];
1859 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 747989"];
1860 [label="diagnostics.Verify(expected); 747990"];
1861 [label="VerifyAssemblyIds(c, diagnostics); 747991"];
1862 [label="VerifyAssemblyIds(c, diagnostics); 747992"];
1863 [label="VerifyAssemblyIds(c, diagnostics) 747993"];
1864 [label="param VerifyAssemblyIds(TCompilation c) 747994"];
1865 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 747995"];
1866 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 747996"];
1867 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 747997"];
1868 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 747998"];
1869 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 747999"];
1870 [label="CustomAssert.True(assemblyIds.IsEmpty); 748000"];
1871 [label="CustomAssert.True(assemblyIds.IsEmpty); 748001"];
1872 [label="VerifyAssemblyIds(c, diagnostics); 748002"];
1873 [label="return c; 748003"];
2 -> 0;
2 -> 1;
4 -> 3;
6 -> 5;
7 -> 1;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
43 -> 42;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 0;
49 -> 48;
50 -> 0;
51 -> 0;
52 -> 50;
52 -> 51;
52 -> 48;
53 -> 52;
54 -> 0;
55 -> 54;
56 -> 55;
56 -> 54;
57 -> 56;
59 -> 0;
60 -> 58;
60 -> 59;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 0;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 52;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 72;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 0;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 76;
93 -> 92;
94 -> 0;
95 -> 0;
96 -> 94;
96 -> 95;
96 -> 0;
97 -> 96;
99 -> 0;
100 -> 98;
100 -> 99;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 92;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 0;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 104;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 136;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 0;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 140;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 0;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 152;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
174 -> 0;
175 -> 0;
176 -> 174;
176 -> 175;
176 -> 0;
177 -> 176;
179 -> 178;
181 -> 179;
181 -> 180;
182 -> 181;
184 -> 0;
184 -> 183;
185 -> 184;
185 -> 0;
186 -> 185;
188 -> 187;
190 -> 189;
192 -> 191;
194 -> 193;
195 -> 7;
196 -> 195;
197 -> 196;
198 -> 197;
198 -> 196;
199 -> 1;
199 -> 2;
199 -> 198;
200 -> 1;
201 -> 1;
202 -> 4;
202 -> 201;
202 -> 1;
203 -> 202;
203 -> 6;
203 -> 1;
204 -> 203;
204 -> 1;
205 -> 1;
206 -> 204;
206 -> 205;
207 -> 206;
207 -> 205;
208 -> 205;
209 -> 207;
209 -> 208;
210 -> 208;
211 -> 209;
211 -> 210;
211 -> 208;
212 -> 208;
212 -> 1;
213 -> 1;
214 -> 1;
215 -> 212;
215 -> 214;
216 -> 213;
216 -> 214;
217 -> 213;
217 -> 214;
218 -> 213;
218 -> 214;
219 -> 213;
219 -> 214;
220 -> 213;
220 -> 214;
221 -> 213;
221 -> 214;
222 -> 213;
222 -> 214;
223 -> 215;
223 -> 214;
224 -> 219;
224 -> 214;
225 -> 216;
225 -> 214;
226 -> 214;
227 -> 224;
227 -> 226;
228 -> 225;
228 -> 226;
229 -> 227;
229 -> 226;
230 -> 226;
231 -> 229;
231 -> 230;
232 -> 231;
232 -> 230;
233 -> 232;
234 -> 0;
234 -> 233;
235 -> 234;
236 -> 235;
237 -> 235;
238 -> 0;
238 -> 237;
239 -> 238;
239 -> 236;
239 -> 235;
240 -> 239;
240 -> 233;
241 -> 226;
242 -> 228;
242 -> 241;
242 -> 226;
243 -> 240;
243 -> 242;
244 -> 217;
244 -> 214;
245 -> 218;
245 -> 214;
246 -> 220;
246 -> 214;
247 -> 221;
247 -> 214;
248 -> 222;
248 -> 214;
249 -> 214;
250 -> 223;
250 -> 249;
251 -> 243;
251 -> 249;
252 -> 244;
252 -> 249;
253 -> 245;
253 -> 249;
254 -> 246;
254 -> 249;
255 -> 247;
255 -> 249;
256 -> 248;
256 -> 249;
257 -> 250;
257 -> 249;
258 -> 251;
258 -> 249;
259 -> 252;
259 -> 249;
260 -> 253;
260 -> 249;
261 -> 254;
261 -> 249;
262 -> 255;
262 -> 249;
263 -> 256;
263 -> 249;
264 -> 249;
265 -> 264;
265 -> 249;
266 -> 249;
267 -> 257;
267 -> 266;
268 -> 258;
268 -> 266;
269 -> 259;
269 -> 266;
270 -> 260;
270 -> 266;
271 -> 261;
271 -> 266;
272 -> 262;
272 -> 266;
273 -> 263;
273 -> 266;
274 -> 265;
274 -> 266;
275 -> 270;
275 -> 266;
276 -> 272;
276 -> 266;
277 -> 266;
278 -> 275;
278 -> 277;
279 -> 276;
279 -> 277;
280 -> 267;
280 -> 277;
281 -> 280;
281 -> 211;
281 -> 277;
282 -> 281;
283 -> 279;
283 -> 281;
284 -> 278;
284 -> 281;
285 -> 281;
286 -> 282;
286 -> 285;
287 -> 283;
287 -> 285;
288 -> 284;
288 -> 285;
289 -> 282;
289 -> 285;
290 -> 285;
291 -> 288;
291 -> 290;
291 -> 285;
292 -> 0;
293 -> 0;
295 -> 292;
295 -> 293;
295 -> 294;
296 -> 295;
297 -> 0;
298 -> 296;
298 -> 295;
298 -> 297;
299 -> 298;
300 -> 0;
301 -> 296;
301 -> 295;
301 -> 300;
302 -> 301;
303 -> 0;
304 -> 296;
304 -> 295;
304 -> 303;
305 -> 304;
306 -> 0;
307 -> 296;
307 -> 295;
307 -> 306;
308 -> 307;
309 -> 0;
310 -> 296;
310 -> 295;
310 -> 309;
311 -> 310;
312 -> 0;
313 -> 296;
313 -> 295;
313 -> 312;
314 -> 313;
315 -> 0;
316 -> 296;
316 -> 295;
316 -> 315;
317 -> 316;
318 -> 0;
319 -> 296;
319 -> 295;
319 -> 318;
320 -> 319;
321 -> 0;
322 -> 296;
322 -> 295;
322 -> 321;
323 -> 322;
324 -> 0;
325 -> 296;
325 -> 295;
325 -> 324;
326 -> 325;
327 -> 0;
328 -> 296;
328 -> 295;
328 -> 327;
329 -> 328;
330 -> 296;
333 -> 330;
333 -> 332;
334 -> 331;
334 -> 332;
335 -> 332;
336 -> 333;
336 -> 295;
336 -> 332;
337 -> 332;
338 -> 334;
338 -> 332;
339 -> 335;
339 -> 332;
340 -> 338;
340 -> 339;
340 -> 332;
341 -> 340;
341 -> 337;
341 -> 332;
342 -> 336;
342 -> 337;
342 -> 295;
342 -> 341;
342 -> 340;
342 -> 332;
343 -> 342;
344 -> 0;
345 -> 344;
347 -> 345;
347 -> 346;
348 -> 296;
348 -> 295;
348 -> 347;
349 -> 348;
350 -> 0;
351 -> 350;
352 -> 296;
352 -> 295;
352 -> 351;
353 -> 352;
354 -> 0;
355 -> 296;
355 -> 295;
355 -> 354;
356 -> 355;
357 -> 320;
359 -> 358;
360 -> 0;
361 -> 0;
362 -> 0;
364 -> 360;
364 -> 361;
364 -> 362;
364 -> 363;
365 -> 359;
366 -> 364;
366 -> 365;
366 -> 358;
367 -> 366;
371 -> 368;
371 -> 369;
371 -> 370;
372 -> 302;
372 -> 295;
372 -> 301;
372 -> 368;
372 -> 371;
373 -> 372;
374 -> 314;
375 -> 323;
376 -> 323;
377 -> 320;
378 -> 0;
379 -> 0;
381 -> 378;
381 -> 380;
382 -> 379;
382 -> 380;
383 -> 380;
384 -> 381;
384 -> 380;
385 -> 382;
385 -> 380;
386 -> 0;
386 -> 380;
387 -> 383;
387 -> 380;
388 -> 380;
389 -> 384;
389 -> 385;
389 -> 386;
389 -> 387;
389 -> 388;
389 -> 380;
390 -> 389;
391 -> 0;
392 -> 0;
394 -> 391;
394 -> 393;
395 -> 392;
395 -> 393;
396 -> 393;
397 -> 394;
397 -> 393;
398 -> 395;
398 -> 393;
399 -> 0;
399 -> 393;
400 -> 396;
400 -> 393;
401 -> 393;
402 -> 397;
402 -> 398;
402 -> 399;
402 -> 400;
402 -> 401;
402 -> 393;
403 -> 402;
405 -> 390;
405 -> 389;
405 -> 404;
406 -> 405;
408 -> 403;
408 -> 402;
408 -> 407;
409 -> 408;
410 -> 0;
411 -> 0;
413 -> 410;
413 -> 412;
414 -> 411;
414 -> 412;
415 -> 412;
416 -> 413;
416 -> 412;
417 -> 414;
417 -> 412;
418 -> 0;
418 -> 412;
419 -> 415;
419 -> 412;
420 -> 412;
421 -> 416;
421 -> 417;
421 -> 418;
421 -> 419;
421 -> 420;
421 -> 412;
422 -> 421;
423 -> 0;
424 -> 0;
426 -> 423;
426 -> 425;
427 -> 424;
427 -> 425;
428 -> 425;
429 -> 426;
429 -> 425;
430 -> 427;
430 -> 425;
431 -> 0;
431 -> 425;
432 -> 428;
432 -> 425;
433 -> 425;
434 -> 429;
434 -> 430;
434 -> 431;
434 -> 432;
434 -> 433;
434 -> 425;
435 -> 434;
436 -> 0;
437 -> 0;
439 -> 436;
439 -> 438;
440 -> 437;
440 -> 438;
441 -> 438;
442 -> 439;
442 -> 438;
443 -> 440;
443 -> 438;
444 -> 0;
444 -> 438;
445 -> 441;
445 -> 438;
446 -> 438;
447 -> 442;
447 -> 443;
447 -> 444;
447 -> 445;
447 -> 446;
447 -> 438;
448 -> 447;
449 -> 0;
450 -> 0;
452 -> 449;
452 -> 451;
453 -> 450;
453 -> 451;
454 -> 451;
455 -> 452;
455 -> 451;
456 -> 453;
456 -> 451;
457 -> 0;
457 -> 451;
458 -> 454;
458 -> 451;
459 -> 451;
460 -> 455;
460 -> 456;
460 -> 457;
460 -> 458;
460 -> 459;
460 -> 451;
461 -> 460;
462 -> 0;
463 -> 0;
465 -> 462;
465 -> 464;
466 -> 463;
466 -> 464;
467 -> 464;
468 -> 465;
468 -> 464;
469 -> 466;
469 -> 464;
470 -> 0;
470 -> 464;
471 -> 467;
471 -> 464;
472 -> 464;
473 -> 468;
473 -> 469;
473 -> 470;
473 -> 471;
473 -> 472;
473 -> 464;
474 -> 473;
475 -> 0;
476 -> 0;
478 -> 475;
478 -> 477;
479 -> 476;
479 -> 477;
480 -> 477;
481 -> 478;
481 -> 477;
482 -> 479;
482 -> 477;
483 -> 0;
483 -> 477;
484 -> 480;
484 -> 477;
485 -> 477;
486 -> 481;
486 -> 482;
486 -> 483;
486 -> 484;
486 -> 485;
486 -> 477;
487 -> 486;
489 -> 390;
489 -> 389;
489 -> 488;
490 -> 489;
492 -> 403;
492 -> 402;
492 -> 491;
493 -> 492;
495 -> 422;
495 -> 421;
495 -> 494;
496 -> 495;
498 -> 435;
498 -> 434;
498 -> 497;
499 -> 498;
500 -> 0;
501 -> 390;
501 -> 389;
501 -> 500;
501 -> 0;
502 -> 501;
503 -> 0;
504 -> 403;
504 -> 402;
504 -> 503;
504 -> 0;
505 -> 504;
506 -> 0;
507 -> 474;
507 -> 473;
507 -> 506;
507 -> 0;
508 -> 507;
509 -> 0;
510 -> 422;
510 -> 421;
510 -> 509;
510 -> 0;
511 -> 510;
512 -> 0;
513 -> 0;
513 -> 512;
514 -> 513;
515 -> 296;
515 -> 291;
516 -> 286;
516 -> 285;
517 -> 0;
517 -> 285;
518 -> 517;
518 -> 289;
518 -> 285;
519 -> 285;
520 -> 516;
520 -> 518;
520 -> 519;
520 -> 0;
520 -> 285;
521 -> 520;
521 -> 285;
522 -> 515;
522 -> 285;
523 -> 287;
523 -> 285;
524 -> 285;
525 -> 521;
525 -> 522;
525 -> 523;
525 -> 524;
525 -> 520;
525 -> 295;
525 -> 285;
526 -> 285;
527 -> 525;
527 -> 526;
528 -> 526;
529 -> 526;
530 -> 527;
530 -> 525;
530 -> 529;
530 -> 526;
531 -> 528;
531 -> 526;
532 -> 526;
533 -> 530;
533 -> 525;
533 -> 529;
533 -> 531;
533 -> 532;
533 -> 528;
533 -> 526;
534 -> 526;
535 -> 534;
535 -> 528;
535 -> 526;
536 -> 528;
536 -> 526;
537 -> 526;
538 -> 536;
538 -> 537;
538 -> 528;
538 -> 535;
538 -> 526;
539 -> 527;
539 -> 526;
540 -> 539;
540 -> 282;
540 -> 281;
541 -> 282;
541 -> 266;
542 -> 266;
543 -> 269;
543 -> 542;
543 -> 266;
544 -> 541;
544 -> 543;
545 -> 543;
546 -> 544;
546 -> 545;
546 -> 282;
546 -> 540;
546 -> 525;
546 -> 543;
547 -> 546;
547 -> 543;
548 -> 390;
548 -> 547;
549 -> 0;
549 -> 266;
550 -> 274;
550 -> 266;
551 -> 271;
551 -> 541;
551 -> 268;
551 -> 548;
551 -> 266;
552 -> 551;
552 -> 266;
553 -> 266;
554 -> 552;
554 -> 553;
555 -> 0;
555 -> 553;
556 -> 555;
557 -> 266;
558 -> 551;
558 -> 282;
558 -> 540;
558 -> 525;
558 -> 239;
558 -> 0;
558 -> 389;
558 -> 236;
558 -> 266;
559 -> 266;
560 -> 559;
561 -> 558;
561 -> 560;
561 -> 266;
562 -> 561;
562 -> 266;
563 -> 266;
564 -> 562;
564 -> 563;
565 -> 564;
565 -> 561;
565 -> 563;
566 -> 565;
566 -> 561;
566 -> 563;
567 -> 563;
568 -> 565;
568 -> 567;
568 -> 561;
568 -> 563;
569 -> 0;
569 -> 563;
570 -> 568;
570 -> 569;
570 -> 563;
571 -> 273;
571 -> 570;
571 -> 266;
572 -> 561;
572 -> 266;
573 -> 0;
573 -> 1;
574 -> 1;
575 -> 573;
575 -> 574;
576 -> 213;
576 -> 574;
577 -> 213;
577 -> 574;
578 -> 213;
578 -> 574;
579 -> 213;
579 -> 574;
580 -> 213;
580 -> 574;
581 -> 213;
581 -> 574;
582 -> 575;
582 -> 574;
583 -> 576;
583 -> 574;
584 -> 577;
584 -> 574;
585 -> 578;
585 -> 574;
586 -> 579;
586 -> 574;
587 -> 580;
587 -> 574;
588 -> 581;
588 -> 574;
589 -> 574;
590 -> 582;
590 -> 589;
591 -> 583;
591 -> 589;
592 -> 584;
592 -> 589;
593 -> 585;
593 -> 589;
594 -> 586;
594 -> 589;
595 -> 587;
595 -> 589;
596 -> 588;
596 -> 589;
597 -> 590;
597 -> 589;
598 -> 590;
598 -> 589;
599 -> 589;
600 -> 591;
600 -> 589;
601 -> 592;
601 -> 589;
602 -> 593;
602 -> 589;
603 -> 594;
603 -> 589;
604 -> 595;
604 -> 589;
606 -> 605;
608 -> 607;
609 -> 596;
609 -> 589;
610 -> 589;
611 -> 598;
611 -> 610;
612 -> 599;
612 -> 610;
613 -> 600;
613 -> 610;
614 -> 601;
614 -> 610;
615 -> 602;
615 -> 610;
616 -> 603;
616 -> 610;
617 -> 604;
617 -> 610;
618 -> 598;
618 -> 610;
619 -> 609;
619 -> 610;
620 -> 599;
620 -> 610;
621 -> 599;
621 -> 610;
622 -> 599;
622 -> 610;
623 -> 622;
623 -> 610;
624 -> 622;
624 -> 610;
625 -> 622;
625 -> 610;
626 -> 622;
626 -> 610;
627 -> 622;
627 -> 610;
628 -> 622;
628 -> 610;
629 -> 622;
629 -> 610;
630 -> 622;
630 -> 610;
631 -> 622;
631 -> 610;
632 -> 622;
632 -> 610;
633 -> 622;
633 -> 610;
634 -> 622;
634 -> 610;
635 -> 622;
635 -> 610;
636 -> 622;
636 -> 610;
637 -> 622;
637 -> 610;
638 -> 611;
638 -> 622;
638 -> 610;
639 -> 612;
639 -> 622;
639 -> 610;
640 -> 613;
640 -> 622;
640 -> 610;
641 -> 614;
641 -> 622;
641 -> 610;
642 -> 615;
642 -> 622;
642 -> 610;
643 -> 616;
643 -> 622;
643 -> 610;
644 -> 617;
644 -> 622;
644 -> 610;
645 -> 618;
645 -> 610;
646 -> 645;
646 -> 622;
646 -> 610;
647 -> 619;
647 -> 622;
647 -> 610;
648 -> 620;
648 -> 622;
648 -> 610;
649 -> 621;
649 -> 622;
649 -> 610;
650 -> 599;
650 -> 574;
651 -> 650;
651 -> 1;
652 -> 213;
652 -> 1;
653 -> 1;
654 -> 213;
654 -> 653;
655 -> 651;
655 -> 653;
656 -> 655;
656 -> 638;
656 -> 653;
657 -> 655;
657 -> 639;
657 -> 653;
658 -> 655;
658 -> 640;
658 -> 653;
659 -> 654;
659 -> 653;
660 -> 655;
660 -> 642;
660 -> 653;
661 -> 655;
661 -> 643;
661 -> 653;
662 -> 653;
663 -> 655;
663 -> 646;
663 -> 653;
664 -> 655;
664 -> 647;
664 -> 653;
665 -> 655;
665 -> 648;
665 -> 653;
666 -> 655;
666 -> 649;
666 -> 653;
667 -> 653;
668 -> 656;
668 -> 667;
669 -> 657;
669 -> 667;
670 -> 658;
670 -> 667;
671 -> 659;
671 -> 667;
672 -> 660;
672 -> 667;
673 -> 661;
673 -> 667;
674 -> 662;
674 -> 667;
675 -> 663;
675 -> 667;
676 -> 664;
676 -> 667;
677 -> 665;
677 -> 667;
678 -> 666;
678 -> 667;
679 -> 662;
679 -> 667;
680 -> 679;
680 -> 667;
681 -> 679;
681 -> 667;
682 -> 679;
682 -> 667;
683 -> 679;
683 -> 667;
684 -> 679;
684 -> 667;
685 -> 679;
685 -> 667;
686 -> 679;
686 -> 667;
687 -> 679;
687 -> 667;
688 -> 679;
688 -> 667;
689 -> 679;
689 -> 667;
690 -> 679;
690 -> 667;
691 -> 679;
691 -> 667;
692 -> 679;
692 -> 667;
693 -> 679;
693 -> 667;
694 -> 679;
694 -> 667;
695 -> 671;
695 -> 679;
695 -> 667;
696 -> 674;
696 -> 679;
696 -> 667;
697 -> 662;
697 -> 1;
698 -> 1;
699 -> 573;
699 -> 698;
700 -> 213;
700 -> 698;
701 -> 213;
701 -> 698;
702 -> 213;
702 -> 698;
703 -> 213;
703 -> 698;
704 -> 213;
704 -> 698;
705 -> 213;
705 -> 698;
706 -> 699;
706 -> 698;
707 -> 700;
707 -> 698;
708 -> 701;
708 -> 698;
709 -> 702;
709 -> 698;
710 -> 703;
710 -> 698;
711 -> 704;
711 -> 698;
712 -> 705;
712 -> 698;
713 -> 698;
714 -> 706;
714 -> 713;
715 -> 707;
715 -> 713;
716 -> 708;
716 -> 713;
717 -> 709;
717 -> 713;
718 -> 710;
718 -> 713;
719 -> 711;
719 -> 713;
720 -> 712;
720 -> 713;
721 -> 714;
721 -> 713;
722 -> 714;
722 -> 713;
723 -> 713;
724 -> 715;
724 -> 713;
725 -> 716;
725 -> 713;
726 -> 717;
726 -> 713;
727 -> 718;
727 -> 713;
728 -> 719;
728 -> 713;
729 -> 720;
729 -> 713;
730 -> 713;
731 -> 722;
731 -> 730;
732 -> 723;
732 -> 730;
733 -> 724;
733 -> 730;
734 -> 725;
734 -> 730;
735 -> 726;
735 -> 730;
736 -> 727;
736 -> 730;
737 -> 728;
737 -> 730;
738 -> 722;
738 -> 730;
739 -> 729;
739 -> 730;
740 -> 723;
740 -> 730;
741 -> 723;
741 -> 730;
742 -> 723;
742 -> 730;
743 -> 742;
743 -> 730;
744 -> 742;
744 -> 730;
745 -> 742;
745 -> 730;
746 -> 742;
746 -> 730;
747 -> 742;
747 -> 730;
748 -> 742;
748 -> 730;
749 -> 742;
749 -> 730;
750 -> 742;
750 -> 730;
751 -> 742;
751 -> 730;
752 -> 742;
752 -> 730;
753 -> 742;
753 -> 730;
754 -> 742;
754 -> 730;
755 -> 742;
755 -> 730;
756 -> 742;
756 -> 730;
757 -> 742;
757 -> 730;
758 -> 731;
758 -> 742;
758 -> 730;
759 -> 732;
759 -> 742;
759 -> 730;
760 -> 733;
760 -> 742;
760 -> 730;
761 -> 734;
761 -> 742;
761 -> 730;
762 -> 735;
762 -> 742;
762 -> 730;
763 -> 736;
763 -> 742;
763 -> 730;
764 -> 737;
764 -> 742;
764 -> 730;
765 -> 738;
765 -> 730;
766 -> 765;
766 -> 742;
766 -> 730;
767 -> 739;
767 -> 742;
767 -> 730;
768 -> 740;
768 -> 742;
768 -> 730;
769 -> 741;
769 -> 742;
769 -> 730;
770 -> 723;
770 -> 698;
771 -> 770;
771 -> 1;
772 -> 213;
772 -> 1;
773 -> 1;
774 -> 213;
774 -> 773;
775 -> 771;
775 -> 773;
776 -> 775;
776 -> 758;
776 -> 773;
777 -> 775;
777 -> 759;
777 -> 773;
778 -> 775;
778 -> 760;
778 -> 773;
779 -> 774;
779 -> 773;
780 -> 775;
780 -> 762;
780 -> 773;
781 -> 775;
781 -> 763;
781 -> 773;
782 -> 773;
783 -> 775;
783 -> 766;
783 -> 773;
784 -> 775;
784 -> 767;
784 -> 773;
785 -> 775;
785 -> 768;
785 -> 773;
786 -> 775;
786 -> 769;
786 -> 773;
787 -> 773;
788 -> 776;
788 -> 787;
789 -> 777;
789 -> 787;
790 -> 778;
790 -> 787;
791 -> 779;
791 -> 787;
792 -> 780;
792 -> 787;
793 -> 781;
793 -> 787;
794 -> 782;
794 -> 787;
795 -> 783;
795 -> 787;
796 -> 784;
796 -> 787;
797 -> 785;
797 -> 787;
798 -> 786;
798 -> 787;
799 -> 782;
799 -> 787;
800 -> 799;
800 -> 787;
801 -> 799;
801 -> 787;
802 -> 799;
802 -> 787;
803 -> 799;
803 -> 787;
804 -> 799;
804 -> 787;
805 -> 799;
805 -> 787;
806 -> 799;
806 -> 787;
807 -> 799;
807 -> 787;
808 -> 799;
808 -> 787;
809 -> 799;
809 -> 787;
810 -> 799;
810 -> 787;
811 -> 799;
811 -> 787;
812 -> 799;
812 -> 787;
813 -> 799;
813 -> 787;
814 -> 799;
814 -> 787;
815 -> 791;
815 -> 799;
815 -> 787;
816 -> 794;
816 -> 799;
816 -> 787;
817 -> 782;
817 -> 1;
818 -> 1;
819 -> 573;
819 -> 818;
820 -> 213;
820 -> 818;
821 -> 213;
821 -> 818;
822 -> 213;
822 -> 818;
823 -> 213;
823 -> 818;
824 -> 213;
824 -> 818;
825 -> 213;
825 -> 818;
826 -> 819;
826 -> 818;
827 -> 820;
827 -> 818;
828 -> 821;
828 -> 818;
829 -> 822;
829 -> 818;
830 -> 823;
830 -> 818;
831 -> 824;
831 -> 818;
832 -> 825;
832 -> 818;
833 -> 818;
834 -> 826;
834 -> 833;
835 -> 827;
835 -> 833;
836 -> 828;
836 -> 833;
837 -> 829;
837 -> 833;
838 -> 830;
838 -> 833;
839 -> 831;
839 -> 833;
840 -> 832;
840 -> 833;
841 -> 834;
841 -> 833;
842 -> 834;
842 -> 833;
843 -> 833;
844 -> 835;
844 -> 833;
845 -> 836;
845 -> 833;
846 -> 837;
846 -> 833;
847 -> 838;
847 -> 833;
848 -> 839;
848 -> 833;
849 -> 840;
849 -> 833;
850 -> 833;
851 -> 842;
851 -> 850;
852 -> 843;
852 -> 850;
853 -> 844;
853 -> 850;
854 -> 845;
854 -> 850;
855 -> 846;
855 -> 850;
856 -> 847;
856 -> 850;
857 -> 848;
857 -> 850;
858 -> 842;
858 -> 850;
859 -> 849;
859 -> 850;
860 -> 843;
860 -> 850;
861 -> 843;
861 -> 850;
862 -> 843;
862 -> 850;
863 -> 862;
863 -> 850;
864 -> 862;
864 -> 850;
865 -> 862;
865 -> 850;
866 -> 862;
866 -> 850;
867 -> 862;
867 -> 850;
868 -> 862;
868 -> 850;
869 -> 862;
869 -> 850;
870 -> 862;
870 -> 850;
871 -> 862;
871 -> 850;
872 -> 862;
872 -> 850;
873 -> 862;
873 -> 850;
874 -> 862;
874 -> 850;
875 -> 862;
875 -> 850;
876 -> 862;
876 -> 850;
877 -> 862;
877 -> 850;
878 -> 851;
878 -> 862;
878 -> 850;
879 -> 852;
879 -> 862;
879 -> 850;
880 -> 853;
880 -> 862;
880 -> 850;
881 -> 854;
881 -> 862;
881 -> 850;
882 -> 855;
882 -> 862;
882 -> 850;
883 -> 856;
883 -> 862;
883 -> 850;
884 -> 857;
884 -> 862;
884 -> 850;
885 -> 858;
885 -> 850;
886 -> 885;
886 -> 862;
886 -> 850;
887 -> 859;
887 -> 862;
887 -> 850;
888 -> 860;
888 -> 862;
888 -> 850;
889 -> 861;
889 -> 862;
889 -> 850;
890 -> 843;
890 -> 818;
891 -> 890;
891 -> 1;
892 -> 213;
892 -> 1;
893 -> 1;
894 -> 213;
894 -> 893;
895 -> 891;
895 -> 893;
896 -> 895;
896 -> 878;
896 -> 893;
897 -> 895;
897 -> 879;
897 -> 893;
898 -> 895;
898 -> 880;
898 -> 893;
899 -> 894;
899 -> 893;
900 -> 895;
900 -> 882;
900 -> 893;
901 -> 895;
901 -> 883;
901 -> 893;
902 -> 893;
903 -> 895;
903 -> 886;
903 -> 893;
904 -> 895;
904 -> 887;
904 -> 893;
905 -> 895;
905 -> 888;
905 -> 893;
906 -> 895;
906 -> 889;
906 -> 893;
907 -> 893;
908 -> 896;
908 -> 907;
909 -> 897;
909 -> 907;
910 -> 898;
910 -> 907;
911 -> 899;
911 -> 907;
912 -> 900;
912 -> 907;
913 -> 901;
913 -> 907;
914 -> 902;
914 -> 907;
915 -> 903;
915 -> 907;
916 -> 904;
916 -> 907;
917 -> 905;
917 -> 907;
918 -> 906;
918 -> 907;
919 -> 902;
919 -> 907;
920 -> 919;
920 -> 907;
921 -> 919;
921 -> 907;
922 -> 919;
922 -> 907;
923 -> 919;
923 -> 907;
924 -> 919;
924 -> 907;
925 -> 919;
925 -> 907;
926 -> 919;
926 -> 907;
927 -> 919;
927 -> 907;
928 -> 919;
928 -> 907;
929 -> 919;
929 -> 907;
930 -> 919;
930 -> 907;
931 -> 919;
931 -> 907;
932 -> 919;
932 -> 907;
933 -> 919;
933 -> 907;
934 -> 919;
934 -> 907;
935 -> 911;
935 -> 919;
935 -> 907;
936 -> 914;
936 -> 919;
936 -> 907;
937 -> 902;
937 -> 1;
938 -> 1;
939 -> 573;
939 -> 938;
940 -> 213;
940 -> 938;
941 -> 213;
941 -> 938;
942 -> 213;
942 -> 938;
943 -> 213;
943 -> 938;
944 -> 213;
944 -> 938;
945 -> 213;
945 -> 938;
946 -> 939;
946 -> 938;
947 -> 940;
947 -> 938;
948 -> 941;
948 -> 938;
949 -> 942;
949 -> 938;
950 -> 943;
950 -> 938;
951 -> 944;
951 -> 938;
952 -> 945;
952 -> 938;
953 -> 938;
954 -> 946;
954 -> 953;
955 -> 947;
955 -> 953;
956 -> 948;
956 -> 953;
957 -> 949;
957 -> 953;
958 -> 950;
958 -> 953;
959 -> 951;
959 -> 953;
960 -> 952;
960 -> 953;
961 -> 954;
961 -> 953;
962 -> 954;
962 -> 953;
963 -> 953;
964 -> 955;
964 -> 953;
965 -> 956;
965 -> 953;
966 -> 957;
966 -> 953;
967 -> 958;
967 -> 953;
968 -> 959;
968 -> 953;
969 -> 960;
969 -> 953;
970 -> 953;
971 -> 962;
971 -> 970;
972 -> 963;
972 -> 970;
973 -> 964;
973 -> 970;
974 -> 965;
974 -> 970;
975 -> 966;
975 -> 970;
976 -> 967;
976 -> 970;
977 -> 968;
977 -> 970;
978 -> 962;
978 -> 970;
979 -> 969;
979 -> 970;
980 -> 963;
980 -> 970;
981 -> 963;
981 -> 970;
982 -> 963;
982 -> 970;
983 -> 982;
983 -> 970;
984 -> 982;
984 -> 970;
985 -> 982;
985 -> 970;
986 -> 982;
986 -> 970;
987 -> 982;
987 -> 970;
988 -> 982;
988 -> 970;
989 -> 982;
989 -> 970;
990 -> 982;
990 -> 970;
991 -> 982;
991 -> 970;
992 -> 982;
992 -> 970;
993 -> 982;
993 -> 970;
994 -> 982;
994 -> 970;
995 -> 982;
995 -> 970;
996 -> 982;
996 -> 970;
997 -> 982;
997 -> 970;
998 -> 971;
998 -> 982;
998 -> 970;
999 -> 972;
999 -> 982;
999 -> 970;
1000 -> 973;
1000 -> 982;
1000 -> 970;
1001 -> 974;
1001 -> 982;
1001 -> 970;
1002 -> 975;
1002 -> 982;
1002 -> 970;
1003 -> 976;
1003 -> 982;
1003 -> 970;
1004 -> 977;
1004 -> 982;
1004 -> 970;
1005 -> 978;
1005 -> 970;
1006 -> 1005;
1006 -> 982;
1006 -> 970;
1007 -> 979;
1007 -> 982;
1007 -> 970;
1008 -> 980;
1008 -> 982;
1008 -> 970;
1009 -> 981;
1009 -> 982;
1009 -> 970;
1010 -> 963;
1010 -> 938;
1011 -> 1010;
1011 -> 1;
1012 -> 213;
1012 -> 1;
1013 -> 1;
1014 -> 213;
1014 -> 1013;
1015 -> 1011;
1015 -> 1013;
1016 -> 1015;
1016 -> 998;
1016 -> 1013;
1017 -> 1015;
1017 -> 999;
1017 -> 1013;
1018 -> 1015;
1018 -> 1000;
1018 -> 1013;
1019 -> 1014;
1019 -> 1013;
1020 -> 1015;
1020 -> 1002;
1020 -> 1013;
1021 -> 1015;
1021 -> 1003;
1021 -> 1013;
1022 -> 1013;
1023 -> 1015;
1023 -> 1006;
1023 -> 1013;
1024 -> 1015;
1024 -> 1007;
1024 -> 1013;
1025 -> 1015;
1025 -> 1008;
1025 -> 1013;
1026 -> 1015;
1026 -> 1009;
1026 -> 1013;
1027 -> 1013;
1028 -> 1016;
1028 -> 1027;
1029 -> 1017;
1029 -> 1027;
1030 -> 1018;
1030 -> 1027;
1031 -> 1019;
1031 -> 1027;
1032 -> 1020;
1032 -> 1027;
1033 -> 1021;
1033 -> 1027;
1034 -> 1022;
1034 -> 1027;
1035 -> 1023;
1035 -> 1027;
1036 -> 1024;
1036 -> 1027;
1037 -> 1025;
1037 -> 1027;
1038 -> 1026;
1038 -> 1027;
1039 -> 1022;
1039 -> 1027;
1040 -> 1039;
1040 -> 1027;
1041 -> 1039;
1041 -> 1027;
1042 -> 1039;
1042 -> 1027;
1043 -> 1039;
1043 -> 1027;
1044 -> 1039;
1044 -> 1027;
1045 -> 1039;
1045 -> 1027;
1046 -> 1039;
1046 -> 1027;
1047 -> 1039;
1047 -> 1027;
1048 -> 1039;
1048 -> 1027;
1049 -> 1039;
1049 -> 1027;
1050 -> 1039;
1050 -> 1027;
1051 -> 1039;
1051 -> 1027;
1052 -> 1039;
1052 -> 1027;
1053 -> 1039;
1053 -> 1027;
1054 -> 1039;
1054 -> 1027;
1055 -> 1031;
1055 -> 1039;
1055 -> 1027;
1056 -> 1034;
1056 -> 1039;
1056 -> 1027;
1057 -> 1022;
1057 -> 1;
1058 -> 697;
1058 -> 213;
1058 -> 1;
1059 -> 817;
1059 -> 213;
1059 -> 1;
1060 -> 937;
1060 -> 213;
1060 -> 1;
1061 -> 1057;
1061 -> 213;
1061 -> 1;
1062 -> 1;
1063 -> 572;
1063 -> 1062;
1064 -> 213;
1064 -> 1062;
1065 -> 1062;
1066 -> 1063;
1066 -> 1065;
1066 -> 570;
1066 -> 1062;
1067 -> 1066;
1067 -> 1062;
1068 -> 1064;
1068 -> 1062;
1069 -> 1062;
1070 -> 1067;
1070 -> 1069;
1071 -> 1068;
1071 -> 1069;
1072 -> 1070;
1072 -> 1069;
1073 -> 1071;
1073 -> 1069;
1074 -> 1069;
1075 -> 1072;
1075 -> 1074;
1076 -> 1073;
1076 -> 1074;
1077 -> 1075;
1077 -> 1074;
1078 -> 1076;
1078 -> 1074;
1079 -> 1074;
1080 -> 1074;
1081 -> 1077;
1081 -> 1080;
1082 -> 1078;
1082 -> 1080;
1083 -> 1079;
1083 -> 1080;
1084 -> 1080;
1085 -> 1082;
1085 -> 1084;
1085 -> 1080;
1086 -> 1082;
1086 -> 1080;
1087 -> 1086;
1087 -> 213;
1087 -> 1058;
1087 -> 1059;
1087 -> 1060;
1087 -> 1061;
1087 -> 668;
1087 -> 669;
1087 -> 678;
1087 -> 670;
1087 -> 695;
1087 -> 672;
1087 -> 696;
1087 -> 675;
1087 -> 688;
1087 -> 676;
1087 -> 677;
1087 -> 673;
1087 -> 692;
1087 -> 693;
1087 -> 694;
1087 -> 788;
1087 -> 789;
1087 -> 798;
1087 -> 790;
1087 -> 815;
1087 -> 792;
1087 -> 816;
1087 -> 795;
1087 -> 808;
1087 -> 796;
1087 -> 797;
1087 -> 793;
1087 -> 812;
1087 -> 813;
1087 -> 814;
1087 -> 908;
1087 -> 909;
1087 -> 918;
1087 -> 910;
1087 -> 935;
1087 -> 912;
1087 -> 936;
1087 -> 915;
1087 -> 928;
1087 -> 916;
1087 -> 917;
1087 -> 913;
1087 -> 932;
1087 -> 933;
1087 -> 934;
1087 -> 892;
1087 -> 1028;
1087 -> 1029;
1087 -> 1038;
1087 -> 1030;
1087 -> 1055;
1087 -> 1032;
1087 -> 1056;
1087 -> 1035;
1087 -> 1048;
1087 -> 1036;
1087 -> 1037;
1087 -> 1033;
1087 -> 1052;
1087 -> 1053;
1087 -> 1054;
1087 -> 962;
1087 -> 1012;
1087 -> 652;
1087 -> 598;
1087 -> 772;
1087 -> 722;
1087 -> 842;
1087 -> 1080;
1088 -> 1080;
1089 -> 1086;
1089 -> 1088;
1089 -> 213;
1089 -> 1058;
1089 -> 1059;
1089 -> 1060;
1089 -> 1061;
1089 -> 668;
1089 -> 669;
1089 -> 678;
1089 -> 670;
1089 -> 695;
1089 -> 672;
1089 -> 696;
1089 -> 675;
1089 -> 688;
1089 -> 676;
1089 -> 677;
1089 -> 673;
1089 -> 692;
1089 -> 693;
1089 -> 694;
1089 -> 788;
1089 -> 789;
1089 -> 798;
1089 -> 790;
1089 -> 815;
1089 -> 792;
1089 -> 816;
1089 -> 795;
1089 -> 808;
1089 -> 796;
1089 -> 797;
1089 -> 793;
1089 -> 812;
1089 -> 813;
1089 -> 814;
1089 -> 908;
1089 -> 909;
1089 -> 918;
1089 -> 910;
1089 -> 935;
1089 -> 912;
1089 -> 936;
1089 -> 915;
1089 -> 928;
1089 -> 916;
1089 -> 917;
1089 -> 913;
1089 -> 932;
1089 -> 933;
1089 -> 934;
1089 -> 892;
1089 -> 1028;
1089 -> 1029;
1089 -> 1038;
1089 -> 1030;
1089 -> 1055;
1089 -> 1032;
1089 -> 1056;
1089 -> 1035;
1089 -> 1048;
1089 -> 1036;
1089 -> 1037;
1089 -> 1033;
1089 -> 1052;
1089 -> 1053;
1089 -> 1054;
1089 -> 962;
1089 -> 1012;
1089 -> 652;
1089 -> 598;
1089 -> 772;
1089 -> 722;
1089 -> 842;
1089 -> 1080;
1090 -> 1089;
1090 -> 1088;
1091 -> 1090;
1091 -> 1089;
1091 -> 1088;
1092 -> 1082;
1092 -> 1080;
1093 -> 1092;
1093 -> 1091;
1093 -> 1080;
1094 -> 1080;
1095 -> 1092;
1095 -> 1094;
1095 -> 1091;
1095 -> 1080;
1096 -> 1095;
1096 -> 1094;
1097 -> 1096;
1097 -> 1095;
1097 -> 1094;
1098 -> 1081;
1098 -> 1080;
1099 -> 1083;
1099 -> 1091;
1099 -> 1097;
1099 -> 1080;
1100 -> 1098;
1100 -> 1099;
1100 -> 1080;
1101 -> 1080;
1102 -> 1100;
1102 -> 1101;
1103 -> 1100;
1103 -> 1101;
1104 -> 1100;
1104 -> 1101;
1105 -> 1100;
1105 -> 1101;
1106 -> 1100;
1106 -> 1101;
1107 -> 1106;
1107 -> 1101;
1108 -> 1106;
1108 -> 1101;
1109 -> 1106;
1109 -> 1101;
1110 -> 1106;
1110 -> 1101;
1111 -> 1106;
1111 -> 1101;
1112 -> 1106;
1112 -> 1101;
1113 -> 1106;
1113 -> 1101;
1114 -> 1106;
1114 -> 1101;
1115 -> 1106;
1115 -> 1101;
1116 -> 1106;
1116 -> 1101;
1117 -> 1106;
1117 -> 1101;
1118 -> 1102;
1118 -> 1100;
1118 -> 1106;
1118 -> 1101;
1119 -> 1102;
1119 -> 1100;
1119 -> 1106;
1119 -> 1101;
1120 -> 1102;
1120 -> 1100;
1120 -> 1106;
1120 -> 1101;
1121 -> 1102;
1121 -> 1100;
1121 -> 1106;
1121 -> 1101;
1122 -> 1104;
1122 -> 1101;
1123 -> 1122;
1124 -> 1123;
1124 -> 1106;
1124 -> 1101;
1125 -> 1105;
1125 -> 1101;
1126 -> 1125;
1127 -> 1126;
1127 -> 1106;
1127 -> 1101;
1128 -> 1101;
1129 -> 1101;
1130 -> 1102;
1130 -> 1100;
1130 -> 1129;
1130 -> 1101;
1131 -> 1102;
1131 -> 1100;
1131 -> 1101;
1132 -> 0;
1132 -> 1101;
1133 -> 1102;
1133 -> 1130;
1134 -> 1130;
1135 -> 1133;
1135 -> 1134;
1135 -> 1130;
1136 -> 1133;
1136 -> 1131;
1136 -> 1106;
1136 -> 1135;
1137 -> 1102;
1137 -> 1131;
1137 -> 1106;
1137 -> 1135;
1138 -> 1103;
1138 -> 1106;
1138 -> 1101;
1139 -> 1106;
1139 -> 1138;
1139 -> 1101;
1140 -> 1106;
1140 -> 1121;
1140 -> 1131;
1140 -> 1139;
1141 -> 1140;
1142 -> 1141;
1142 -> 1106;
1142 -> 1140;
1143 -> 1139;
1144 -> 1133;
1144 -> 1143;
1144 -> 1139;
1145 -> 1133;
1145 -> 1141;
1145 -> 1106;
1145 -> 1144;
1146 -> 1139;
1147 -> 1106;
1147 -> 1145;
1147 -> 1146;
1147 -> 1139;
1148 -> 1106;
1148 -> 1145;
1148 -> 1141;
1148 -> 1146;
1148 -> 1139;
1149 -> 1106;
1149 -> 1121;
1149 -> 1141;
1149 -> 1101;
1150 -> 1149;
1150 -> 1106;
1150 -> 1101;
1151 -> 1100;
1151 -> 1149;
1151 -> 1137;
1151 -> 1119;
1151 -> 1120;
1151 -> 1142;
1151 -> 1145;
1151 -> 1150;
1151 -> 1113;
1151 -> 1136;
1151 -> 1138;
1151 -> 1124;
1151 -> 1127;
1151 -> 1117;
1151 -> 1106;
1151 -> 1121;
1151 -> 1080;
1152 -> 1102;
1152 -> 1151;
1152 -> 1106;
1152 -> 1101;
1153 -> 1106;
1153 -> 1151;
1153 -> 1146;
1153 -> 1139;
1154 -> 1082;
1154 -> 1080;
1155 -> 1154;
1155 -> 1097;
1155 -> 1080;
1156 -> 1155;
1157 -> 1156;
1157 -> 1151;
1157 -> 1097;
1157 -> 1155;
1158 -> 1157;
1158 -> 1156;
1159 -> 1157;
1159 -> 1156;
1160 -> 1158;
1160 -> 1156;
1161 -> 1156;
1162 -> 1160;
1162 -> 1161;
1162 -> 1156;
1163 -> 1160;
1163 -> 1157;
1163 -> 1156;
1164 -> 1159;
1164 -> 1157;
1164 -> 1163;
1164 -> 1156;
1165 -> 1159;
1165 -> 1164;
1165 -> 1160;
1165 -> 1156;
1166 -> 1159;
1166 -> 1164;
1166 -> 1160;
1166 -> 1156;
1167 -> 1159;
1167 -> 1164;
1167 -> 1156;
1168 -> 1159;
1168 -> 1164;
1168 -> 1160;
1168 -> 1167;
1169 -> 1156;
1170 -> 1159;
1170 -> 1164;
1170 -> 1169;
1170 -> 1156;
1171 -> 1170;
1172 -> 1156;
1173 -> 1159;
1173 -> 1164;
1173 -> 1172;
1173 -> 1156;
1174 -> 1156;
1175 -> 1160;
1175 -> 1164;
1175 -> 1174;
1175 -> 1156;
1176 -> 1159;
1176 -> 1164;
1176 -> 1160;
1176 -> 1156;
1177 -> 1156;
1178 -> 1159;
1178 -> 1164;
1178 -> 1177;
1178 -> 1156;
1179 -> 1178;
1180 -> 1178;
1181 -> 1159;
1181 -> 1180;
1182 -> 1180;
1183 -> 1181;
1183 -> 1164;
1183 -> 1182;
1183 -> 1180;
1184 -> 1181;
1184 -> 1164;
1184 -> 1183;
1185 -> 1183;
1186 -> 1184;
1186 -> 1181;
1186 -> 1183;
1187 -> 1181;
1187 -> 1164;
1187 -> 1186;
1187 -> 1180;
1188 -> 1187;
1188 -> 1178;
1189 -> 1178;
1190 -> 1160;
1190 -> 1189;
1191 -> 1189;
1192 -> 1190;
1192 -> 1164;
1192 -> 1186;
1192 -> 1191;
1192 -> 1189;
1193 -> 1190;
1193 -> 1164;
1193 -> 1186;
1193 -> 1192;
1193 -> 1189;
1194 -> 1193;
1194 -> 1178;
1195 -> 1159;
1195 -> 1164;
1195 -> 1160;
1195 -> 1178;
1196 -> 1188;
1196 -> 1195;
1197 -> 1194;
1197 -> 1195;
1198 -> 1196;
1198 -> 1197;
1198 -> 1164;
1198 -> 1186;
1198 -> 1192;
1198 -> 1184;
1198 -> 1185;
1198 -> 1195;
1199 -> 1159;
1199 -> 1198;
1199 -> 1160;
1199 -> 1156;
1200 -> 1156;
1201 -> 1157;
1201 -> 1200;
1201 -> 1198;
1201 -> 1155;
1202 -> 1155;
1203 -> 1201;
1203 -> 1202;
1203 -> 1155;
1204 -> 1201;
1204 -> 1203;
1205 -> 1204;
1206 -> 1204;
1207 -> 1204;
1208 -> 1204;
1209 -> 1204;
1209 -> 1208;
1210 -> 1204;
1211 -> 1210;
1212 -> 1204;
1213 -> 1204;
1214 -> 1204;
1215 -> 1204;
1216 -> 1204;
1217 -> 1080;
1218 -> 1151;
1218 -> 1204;
1218 -> 1217;
1218 -> 1080;
1219 -> 1080;
1220 -> 1082;
1220 -> 1080;
1221 -> 1081;
1221 -> 1080;
1222 -> 1080;
1223 -> 1220;
1223 -> 1222;
1224 -> 1221;
1224 -> 1222;
1225 -> 1222;
1226 -> 1222;
1227 -> 1224;
1227 -> 1222;
1228 -> 1227;
1228 -> 1204;
1228 -> 1222;
1229 -> 1204;
1229 -> 1222;
1230 -> 1228;
1230 -> 1222;
1231 -> 1225;
1231 -> 1230;
1232 -> 1231;
1232 -> 1222;
1233 -> 1231;
1233 -> 1222;
1234 -> 1233;
1234 -> 1222;
1235 -> 1223;
1235 -> 1222;
1236 -> 1235;
1236 -> 1204;
1236 -> 1222;
1237 -> 1222;
1238 -> 1235;
1238 -> 1237;
1238 -> 1204;
1238 -> 1222;
1239 -> 1223;
1239 -> 1222;
1240 -> 1239;
1240 -> 1238;
1240 -> 1222;
1241 -> 1222;
1242 -> 1239;
1242 -> 1241;
1242 -> 1238;
1242 -> 1222;
1243 -> 1223;
1243 -> 1222;
1244 -> 1222;
1245 -> 1243;
1245 -> 1244;
1247 -> 1246;
1248 -> 1246;
1249 -> 1248;
1249 -> 1244;
1250 -> 1244;
1251 -> 1245;
1251 -> 1244;
1252 -> 1251;
1252 -> 1242;
1252 -> 1244;
1253 -> 1252;
1254 -> 1253;
1255 -> 1222;
1256 -> 1255;
1256 -> 1222;
1257 -> 1222;
1258 -> 1222;
1259 -> 1255;
1259 -> 1258;
1259 -> 1256;
1259 -> 1222;
1260 -> 1222;
1261 -> 1223;
1261 -> 1222;
1262 -> 1261;
1262 -> 1242;
1262 -> 1222;
1263 -> 1262;
1264 -> 1234;
1264 -> 1262;
1265 -> 1262;
1266 -> 1263;
1266 -> 1265;
1267 -> 1264;
1267 -> 1265;
1268 -> 1265;
1269 -> 1268;
1269 -> 1267;
1269 -> 1265;
1270 -> 1265;
1271 -> 1266;
1271 -> 1270;
1272 -> 1270;
1273 -> 1270;
1274 -> 1272;
1274 -> 1273;
1274 -> 1270;
1275 -> 1270;
1276 -> 1271;
1276 -> 1242;
1276 -> 1275;
1276 -> 1270;
1277 -> 1271;
1277 -> 1242;
1277 -> 1276;
1278 -> 1272;
1278 -> 1277;
1278 -> 1274;
1278 -> 1276;
1279 -> 1276;
1280 -> 1272;
1280 -> 1279;
1280 -> 1278;
1280 -> 1276;
1281 -> 1271;
1281 -> 1242;
1281 -> 1276;
1282 -> 1272;
1282 -> 1281;
1282 -> 1280;
1282 -> 1276;
1283 -> 1270;
1284 -> 1271;
1284 -> 1242;
1284 -> 1283;
1284 -> 1270;
1285 -> 1284;
1286 -> 1285;
1287 -> 1272;
1287 -> 1286;
1287 -> 1282;
1287 -> 1285;
1288 -> 1271;
1288 -> 1242;
1288 -> 1285;
1289 -> 1272;
1289 -> 1288;
1289 -> 1287;
1289 -> 1285;
1290 -> 1284;
1291 -> 1272;
1291 -> 1290;
1291 -> 1289;
1291 -> 1284;
1292 -> 1271;
1292 -> 1242;
1292 -> 1270;
1293 -> 1270;
1294 -> 1272;
1294 -> 1293;
1294 -> 1291;
1294 -> 1270;
1295 -> 1270;
1296 -> 1271;
1296 -> 1242;
1296 -> 1295;
1296 -> 1270;
1297 -> 1296;
1298 -> 1272;
1298 -> 1297;
1298 -> 1294;
1298 -> 1296;
1299 -> 1296;
1300 -> 1299;
1300 -> 1296;
1301 -> 1296;
1302 -> 1300;
1302 -> 1296;
1303 -> 1302;
1304 -> 1272;
1304 -> 1303;
1304 -> 1298;
1304 -> 1302;
1305 -> 1300;
1305 -> 1302;
1306 -> 1272;
1306 -> 1305;
1306 -> 1304;
1306 -> 1302;
1307 -> 1302;
1308 -> 1272;
1308 -> 1307;
1308 -> 1306;
1308 -> 1302;
1309 -> 1302;
1310 -> 1296;
1311 -> 1272;
1311 -> 1310;
1311 -> 1308;
1311 -> 1296;
1312 -> 1270;
1313 -> 1271;
1313 -> 1302;
1313 -> 1312;
1313 -> 1270;
1314 -> 1271;
1314 -> 1302;
1314 -> 1270;
1315 -> 1270;
1316 -> 1271;
1316 -> 1302;
1316 -> 1315;
1316 -> 1270;
1317 -> 1270;
1318 -> 1271;
1318 -> 1302;
1318 -> 1317;
1318 -> 1270;
1319 -> 1270;
1320 -> 1271;
1320 -> 1302;
1320 -> 1319;
1320 -> 1270;
1321 -> 1272;
1321 -> 1311;
1321 -> 1270;
1322 -> 1321;
1322 -> 1265;
1323 -> 1269;
1323 -> 1322;
1323 -> 1265;
1324 -> 1260;
1324 -> 1323;
1324 -> 1262;
1325 -> 1234;
1325 -> 1302;
1326 -> 1325;
1326 -> 1302;
1327 -> 1302;
1328 -> 1327;
1328 -> 1326;
1328 -> 1302;
1329 -> 1302;
1330 -> 1302;
1331 -> 1329;
1331 -> 1330;
1331 -> 1302;
1332 -> 1302;
1333 -> 1302;
1333 -> 1332;
1334 -> 1329;
1334 -> 1333;
1334 -> 1331;
1334 -> 1332;
1335 -> 1332;
1336 -> 1329;
1336 -> 1335;
1336 -> 1334;
1336 -> 1332;
1337 -> 1302;
1337 -> 1332;
1338 -> 1329;
1338 -> 1337;
1338 -> 1336;
1338 -> 1332;
1339 -> 1302;
1340 -> 1339;
1341 -> 1340;
1342 -> 1329;
1342 -> 1341;
1342 -> 1338;
1342 -> 1340;
1343 -> 1302;
1343 -> 1340;
1344 -> 1329;
1344 -> 1343;
1344 -> 1342;
1344 -> 1340;
1345 -> 1339;
1346 -> 1329;
1346 -> 1345;
1346 -> 1344;
1346 -> 1339;
1347 -> 1302;
1348 -> 1302;
1349 -> 1329;
1349 -> 1348;
1349 -> 1346;
1349 -> 1302;
1350 -> 1302;
1351 -> 1329;
1351 -> 1350;
1351 -> 1349;
1351 -> 1302;
1352 -> 1329;
1352 -> 1303;
1352 -> 1351;
1352 -> 1302;
1353 -> 1302;
1354 -> 1329;
1354 -> 1353;
1354 -> 1352;
1354 -> 1302;
1355 -> 1329;
1355 -> 1307;
1355 -> 1354;
1355 -> 1302;
1356 -> 1302;
1357 -> 1329;
1357 -> 1356;
1357 -> 1355;
1357 -> 1302;
1358 -> 1302;
1359 -> 1302;
1360 -> 1302;
1361 -> 1302;
1362 -> 1302;
1363 -> 1329;
1363 -> 1357;
1363 -> 1302;
1364 -> 1363;
1364 -> 1302;
1365 -> 1328;
1365 -> 1364;
1365 -> 1302;
1366 -> 1255;
1366 -> 1222;
1367 -> 1260;
1367 -> 1222;
1368 -> 1222;
1369 -> 1366;
1369 -> 1368;
1370 -> 1367;
1370 -> 1368;
1371 -> 1370;
1371 -> 1324;
1371 -> 1368;
1372 -> 1368;
1373 -> 1372;
1373 -> 1371;
1373 -> 1368;
1374 -> 1370;
1374 -> 1372;
1374 -> 1324;
1374 -> 1373;
1375 -> 1369;
1375 -> 1374;
1375 -> 1259;
1375 -> 1373;
1376 -> 1373;
1377 -> 1376;
1378 -> 1369;
1378 -> 1377;
1378 -> 1375;
1378 -> 1376;
1379 -> 1369;
1379 -> 1378;
1379 -> 1373;
1380 -> 1222;
1381 -> 1222;
1382 -> 1255;
1382 -> 1381;
1382 -> 1379;
1382 -> 1222;
1383 -> 1222;
1384 -> 1224;
1384 -> 1302;
1384 -> 1222;
1385 -> 1222;
1386 -> 1384;
1386 -> 1222;
1387 -> 1384;
1387 -> 1386;
1388 -> 1387;
1388 -> 1386;
1389 -> 1388;
1389 -> 1386;
1390 -> 1386;
1391 -> 1386;
1392 -> 1232;
1392 -> 1386;
1393 -> 1255;
1393 -> 1392;
1394 -> 1234;
1394 -> 1392;
1395 -> 1392;
1396 -> 1393;
1396 -> 1395;
1397 -> 1394;
1397 -> 1395;
1398 -> 1395;
1399 -> 1398;
1399 -> 1397;
1399 -> 1395;
1400 -> 1396;
1400 -> 1398;
1400 -> 1399;
1400 -> 1382;
1400 -> 1395;
1401 -> 1392;
1402 -> 1392;
1403 -> 1255;
1403 -> 1402;
1403 -> 1400;
1403 -> 1392;
1404 -> 1387;
1404 -> 1388;
1404 -> 1392;
1405 -> 1255;
1405 -> 1404;
1405 -> 1403;
1405 -> 1392;
1406 -> 1387;
1406 -> 1404;
1406 -> 1392;
1407 -> 1406;
1407 -> 1404;
1407 -> 1392;
1408 -> 1255;
1408 -> 1407;
1409 -> 1234;
1409 -> 1407;
1410 -> 1407;
1411 -> 1408;
1411 -> 1410;
1412 -> 1409;
1412 -> 1410;
1413 -> 1410;
1414 -> 1413;
1414 -> 1412;
1414 -> 1410;
1415 -> 1411;
1415 -> 1413;
1415 -> 1414;
1415 -> 1405;
1415 -> 1410;
1416 -> 1407;
1417 -> 1407;
1418 -> 1255;
1418 -> 1417;
1418 -> 1415;
1418 -> 1407;
1419 -> 1407;
1420 -> 1255;
1420 -> 1419;
1420 -> 1418;
1420 -> 1407;
1421 -> 1387;
1421 -> 1386;
1422 -> 1386;
1423 -> 1236;
1423 -> 1386;
1424 -> 1240;
1424 -> 1386;
1425 -> 1386;
1426 -> 1421;
1426 -> 1425;
1427 -> 1422;
1427 -> 1425;
1428 -> 1423;
1428 -> 1425;
1429 -> 1424;
1429 -> 1425;
1430 -> 1422;
1430 -> 1425;
1431 -> 1430;
1431 -> 1425;
1432 -> 1430;
1432 -> 1425;
1433 -> 1430;
1433 -> 1425;
1434 -> 1430;
1434 -> 1425;
1435 -> 1430;
1435 -> 1425;
1436 -> 1430;
1436 -> 1425;
1437 -> 1430;
1437 -> 1425;
1438 -> 1430;
1438 -> 1425;
1439 -> 1430;
1439 -> 1425;
1440 -> 1426;
1440 -> 1419;
1440 -> 1430;
1440 -> 1425;
1441 -> 1426;
1441 -> 1419;
1441 -> 1430;
1441 -> 1425;
1442 -> 1426;
1442 -> 1419;
1442 -> 1430;
1442 -> 1425;
1443 -> 1426;
1443 -> 1419;
1443 -> 1430;
1443 -> 1425;
1444 -> 1425;
1445 -> 1426;
1445 -> 1419;
1445 -> 1425;
1446 -> 1430;
1447 -> 1430;
1447 -> 1445;
1447 -> 1446;
1448 -> 1430;
1448 -> 1445;
1448 -> 1443;
1448 -> 1446;
1449 -> 1422;
1449 -> 1386;
1450 -> 1223;
1450 -> 1386;
1451 -> 1422;
1451 -> 1386;
1452 -> 1450;
1452 -> 1451;
1452 -> 1443;
1452 -> 1445;
1452 -> 1441;
1452 -> 1442;
1452 -> 1430;
1452 -> 1427;
1452 -> 1428;
1452 -> 1429;
1452 -> 1386;
1453 -> 1386;
1454 -> 1453;
1455 -> 1452;
1455 -> 1454;
1455 -> 1453;
1456 -> 1452;
1456 -> 1453;
1457 -> 1452;
1457 -> 1453;
1458 -> 1452;
1458 -> 1453;
1459 -> 1452;
1459 -> 1458;
1460 -> 1453;
1461 -> 1452;
1461 -> 1460;
1461 -> 1453;
1462 -> 1453;
1463 -> 1452;
1463 -> 1462;
1463 -> 1453;
1464 -> 1453;
1465 -> 1452;
1465 -> 1464;
1465 -> 1453;
1466 -> 1452;
1466 -> 1453;
1467 -> 1452;
1468 -> 1452;
1468 -> 1453;
1469 -> 1386;
1470 -> 1452;
1470 -> 1469;
1470 -> 1386;
1471 -> 1223;
1471 -> 1452;
1471 -> 1470;
1472 -> 1422;
1472 -> 1386;
1473 -> 1234;
1473 -> 1386;
1474 -> 1386;
1475 -> 1472;
1475 -> 1474;
1476 -> 1473;
1476 -> 1474;
1477 -> 1474;
1478 -> 1477;
1478 -> 1476;
1478 -> 1474;
1479 -> 1474;
1480 -> 1474;
1481 -> 1479;
1481 -> 1480;
1481 -> 1474;
1482 -> 1474;
1483 -> 1475;
1483 -> 1452;
1483 -> 1482;
1483 -> 1474;
1484 -> 1475;
1484 -> 1452;
1484 -> 1483;
1485 -> 1479;
1485 -> 1484;
1485 -> 1481;
1485 -> 1483;
1486 -> 1483;
1487 -> 1479;
1487 -> 1486;
1487 -> 1485;
1487 -> 1483;
1488 -> 1475;
1488 -> 1452;
1488 -> 1483;
1489 -> 1479;
1489 -> 1488;
1489 -> 1487;
1489 -> 1483;
1490 -> 1474;
1491 -> 1475;
1491 -> 1452;
1491 -> 1490;
1491 -> 1474;
1492 -> 1491;
1493 -> 1492;
1494 -> 1479;
1494 -> 1493;
1494 -> 1489;
1494 -> 1492;
1495 -> 1475;
1495 -> 1452;
1495 -> 1492;
1496 -> 1479;
1496 -> 1495;
1496 -> 1494;
1496 -> 1492;
1497 -> 1491;
1498 -> 1479;
1498 -> 1497;
1498 -> 1496;
1498 -> 1491;
1499 -> 1475;
1499 -> 1452;
1499 -> 1474;
1500 -> 1474;
1501 -> 1479;
1501 -> 1500;
1501 -> 1498;
1501 -> 1474;
1502 -> 1475;
1502 -> 1452;
1502 -> 1474;
1503 -> 1502;
1504 -> 1479;
1504 -> 1503;
1504 -> 1501;
1504 -> 1502;
1505 -> 1502;
1506 -> 1479;
1506 -> 1505;
1506 -> 1504;
1506 -> 1502;
1507 -> 1502;
1508 -> 1479;
1508 -> 1507;
1508 -> 1506;
1508 -> 1502;
1509 -> 1502;
1510 -> 1479;
1510 -> 1509;
1510 -> 1508;
1510 -> 1502;
1511 -> 1502;
1512 -> 1502;
1513 -> 1479;
1513 -> 1512;
1513 -> 1510;
1513 -> 1502;
1514 -> 1474;
1515 -> 1475;
1515 -> 1502;
1515 -> 1514;
1515 -> 1474;
1516 -> 1515;
1517 -> 1479;
1517 -> 1516;
1517 -> 1513;
1517 -> 1515;
1518 -> 1515;
1519 -> 1479;
1519 -> 1518;
1519 -> 1517;
1519 -> 1515;
1520 -> 1515;
1521 -> 1479;
1521 -> 1520;
1521 -> 1519;
1521 -> 1515;
1522 -> 1515;
1523 -> 1479;
1523 -> 1522;
1523 -> 1521;
1523 -> 1515;
1524 -> 1515;
1525 -> 1479;
1525 -> 1524;
1525 -> 1523;
1525 -> 1515;
1526 -> 1475;
1526 -> 1502;
1526 -> 1474;
1527 -> 1474;
1528 -> 1475;
1528 -> 1502;
1528 -> 1527;
1528 -> 1474;
1529 -> 1474;
1530 -> 1475;
1530 -> 1502;
1530 -> 1529;
1530 -> 1474;
1531 -> 1474;
1532 -> 1475;
1532 -> 1502;
1532 -> 1531;
1532 -> 1474;
1533 -> 1479;
1533 -> 1525;
1533 -> 1474;
1534 -> 1533;
1534 -> 1474;
1535 -> 1478;
1535 -> 1534;
1535 -> 1474;
1536 -> 1255;
1536 -> 1535;
1536 -> 1420;
1536 -> 1386;
1537 -> 1471;
1537 -> 1386;
1538 -> 1234;
1538 -> 1386;
1539 -> 1386;
1540 -> 1537;
1540 -> 1539;
1541 -> 1538;
1541 -> 1539;
1542 -> 1539;
1543 -> 1542;
1543 -> 1541;
1543 -> 1539;
1544 -> 1539;
1545 -> 1539;
1546 -> 1544;
1546 -> 1545;
1546 -> 1539;
1547 -> 1539;
1548 -> 1540;
1548 -> 1502;
1548 -> 1547;
1548 -> 1539;
1549 -> 1540;
1549 -> 1502;
1549 -> 1548;
1550 -> 1544;
1550 -> 1549;
1550 -> 1546;
1550 -> 1548;
1551 -> 1548;
1552 -> 1544;
1552 -> 1551;
1552 -> 1550;
1552 -> 1548;
1553 -> 1540;
1553 -> 1502;
1553 -> 1548;
1554 -> 1544;
1554 -> 1553;
1554 -> 1552;
1554 -> 1548;
1555 -> 1539;
1556 -> 1540;
1556 -> 1502;
1556 -> 1555;
1556 -> 1539;
1557 -> 1556;
1558 -> 1557;
1559 -> 1544;
1559 -> 1558;
1559 -> 1554;
1559 -> 1557;
1560 -> 1540;
1560 -> 1502;
1560 -> 1557;
1561 -> 1544;
1561 -> 1560;
1561 -> 1559;
1561 -> 1557;
1562 -> 1556;
1563 -> 1544;
1563 -> 1562;
1563 -> 1561;
1563 -> 1556;
1564 -> 1540;
1564 -> 1502;
1564 -> 1539;
1565 -> 1539;
1566 -> 1544;
1566 -> 1565;
1566 -> 1563;
1566 -> 1539;
1567 -> 1540;
1567 -> 1502;
1567 -> 1539;
1568 -> 1567;
1569 -> 1544;
1569 -> 1568;
1569 -> 1566;
1569 -> 1567;
1570 -> 1567;
1571 -> 1544;
1571 -> 1570;
1571 -> 1569;
1571 -> 1567;
1572 -> 1567;
1573 -> 1544;
1573 -> 1572;
1573 -> 1571;
1573 -> 1567;
1574 -> 1567;
1575 -> 1544;
1575 -> 1574;
1575 -> 1573;
1575 -> 1567;
1576 -> 1567;
1577 -> 1567;
1578 -> 1544;
1578 -> 1577;
1578 -> 1575;
1578 -> 1567;
1579 -> 1539;
1580 -> 1540;
1580 -> 1567;
1580 -> 1579;
1580 -> 1539;
1581 -> 1540;
1581 -> 1567;
1581 -> 1539;
1582 -> 1539;
1583 -> 1540;
1583 -> 1567;
1583 -> 1582;
1583 -> 1539;
1584 -> 1539;
1585 -> 1540;
1585 -> 1567;
1585 -> 1584;
1585 -> 1539;
1586 -> 1539;
1587 -> 1540;
1587 -> 1567;
1587 -> 1586;
1587 -> 1539;
1588 -> 1544;
1588 -> 1578;
1588 -> 1539;
1589 -> 1588;
1589 -> 1539;
1590 -> 1543;
1590 -> 1589;
1590 -> 1539;
1591 -> 1383;
1591 -> 1590;
1591 -> 1386;
1592 -> 1567;
1593 -> 1567;
1594 -> 1593;
1595 -> 1255;
1595 -> 1594;
1595 -> 1536;
1595 -> 1593;
1596 -> 1255;
1596 -> 1567;
1597 -> 1234;
1597 -> 1567;
1598 -> 1567;
1599 -> 1596;
1599 -> 1598;
1600 -> 1597;
1600 -> 1598;
1601 -> 1598;
1602 -> 1601;
1602 -> 1600;
1602 -> 1598;
1603 -> 1567;
1604 -> 1567;
1605 -> 1255;
1605 -> 1567;
1606 -> 1234;
1606 -> 1567;
1607 -> 1567;
1608 -> 1605;
1608 -> 1607;
1609 -> 1606;
1609 -> 1607;
1610 -> 1607;
1611 -> 1610;
1611 -> 1609;
1611 -> 1607;
1612 -> 1567;
1613 -> 1567;
1614 -> 1567;
1615 -> 1567;
1616 -> 1567;
1617 -> 1567;
1618 -> 1567;
1619 -> 1567;
1620 -> 1567;
1621 -> 1567;
1622 -> 1567;
1623 -> 1567;
1624 -> 1567;
1625 -> 1567;
1626 -> 1567;
1627 -> 1567;
1628 -> 1567;
1629 -> 1567;
1630 -> 1567;
1631 -> 1567;
1631 -> 1630;
1632 -> 1567;
1633 -> 1567;
1634 -> 1567;
1635 -> 1567;
1636 -> 1567;
1637 -> 1567;
1638 -> 1234;
1638 -> 1567;
1639 -> 1638;
1639 -> 1567;
1640 -> 1567;
1641 -> 1640;
1641 -> 1639;
1641 -> 1567;
1642 -> 1567;
1643 -> 1567;
1644 -> 1642;
1644 -> 1643;
1644 -> 1567;
1645 -> 1567;
1646 -> 1567;
1646 -> 1645;
1647 -> 1642;
1647 -> 1646;
1647 -> 1644;
1647 -> 1645;
1648 -> 1645;
1649 -> 1642;
1649 -> 1648;
1649 -> 1647;
1649 -> 1645;
1650 -> 1567;
1650 -> 1645;
1651 -> 1642;
1651 -> 1650;
1651 -> 1649;
1651 -> 1645;
1652 -> 1567;
1653 -> 1652;
1654 -> 1653;
1655 -> 1642;
1655 -> 1654;
1655 -> 1651;
1655 -> 1653;
1656 -> 1567;
1656 -> 1653;
1657 -> 1642;
1657 -> 1656;
1657 -> 1655;
1657 -> 1653;
1658 -> 1652;
1659 -> 1642;
1659 -> 1658;
1659 -> 1657;
1659 -> 1652;
1660 -> 1567;
1661 -> 1567;
1662 -> 1642;
1662 -> 1661;
1662 -> 1659;
1662 -> 1567;
1663 -> 1642;
1663 -> 1568;
1663 -> 1662;
1663 -> 1567;
1664 -> 1642;
1664 -> 1570;
1664 -> 1663;
1664 -> 1567;
1665 -> 1642;
1665 -> 1572;
1665 -> 1664;
1665 -> 1567;
1666 -> 1642;
1666 -> 1574;
1666 -> 1665;
1666 -> 1567;
1667 -> 1642;
1667 -> 1577;
1667 -> 1666;
1667 -> 1567;
1668 -> 1567;
1669 -> 1668;
1670 -> 1642;
1670 -> 1669;
1670 -> 1667;
1670 -> 1668;
1671 -> 1668;
1672 -> 1642;
1672 -> 1671;
1672 -> 1670;
1672 -> 1668;
1673 -> 1668;
1674 -> 1642;
1674 -> 1673;
1674 -> 1672;
1674 -> 1668;
1675 -> 1668;
1676 -> 1642;
1676 -> 1675;
1676 -> 1674;
1676 -> 1668;
1677 -> 1668;
1678 -> 1642;
1678 -> 1677;
1678 -> 1676;
1678 -> 1668;
1679 -> 1567;
1680 -> 1567;
1681 -> 1567;
1682 -> 1567;
1683 -> 1642;
1683 -> 1678;
1683 -> 1567;
1684 -> 1683;
1684 -> 1567;
1685 -> 1641;
1685 -> 1684;
1685 -> 1567;
1686 -> 1234;
1686 -> 1567;
1687 -> 1686;
1687 -> 1567;
1688 -> 1640;
1688 -> 1687;
1688 -> 1567;
1689 -> 1642;
1689 -> 1667;
1689 -> 1567;
1690 -> 1689;
1690 -> 1567;
1691 -> 1688;
1691 -> 1690;
1691 -> 1567;
1692 -> 1222;
1693 -> 1567;
1693 -> 1692;
1693 -> 1222;
1694 -> 1255;
1694 -> 1595;
1694 -> 1693;
1695 -> 1222;
1696 -> 1255;
1696 -> 1695;
1696 -> 1694;
1696 -> 1222;
1697 -> 1260;
1697 -> 1222;
1698 -> 1383;
1698 -> 1222;
1702 -> 1700;
1702 -> 1699;
1703 -> 1701;
1703 -> 1699;
1704 -> 1699;
1705 -> 0;
1705 -> 1222;
1706 -> 1222;
1707 -> 1222;
1708 -> 1697;
1708 -> 1707;
1709 -> 1698;
1709 -> 1707;
1710 -> 1705;
1710 -> 1707;
1711 -> 1706;
1711 -> 1707;
1712 -> 1706;
1712 -> 1707;
1713 -> 1707;
1714 -> 1711;
1714 -> 1713;
1714 -> 1707;
1715 -> 1714;
1715 -> 1707;
1716 -> 0;
1718 -> 1716;
1718 -> 1717;
1719 -> 1717;
1721 -> 1720;
1723 -> 1722;
1725 -> 1724;
1726 -> 1719;
1727 -> 1719;
1727 -> 1717;
1728 -> 1718;
1728 -> 1719;
1728 -> 1717;
1729 -> 1717;
1730 -> 1707;
1731 -> 1730;
1731 -> 1712;
1731 -> 1707;
1732 -> 1708;
1732 -> 1707;
1733 -> 1709;
1733 -> 1707;
1734 -> 1710;
1734 -> 1707;
1735 -> 1732;
1735 -> 1707;
1736 -> 1733;
1736 -> 1707;
1737 -> 1731;
1737 -> 1707;
1738 -> 1707;
1739 -> 1735;
1739 -> 1738;
1740 -> 1736;
1740 -> 1738;
1741 -> 1737;
1741 -> 1738;
1742 -> 1715;
1742 -> 1738;
1743 -> 1739;
1743 -> 1738;
1744 -> 1739;
1744 -> 1732;
1744 -> 1738;
1745 -> 1740;
1745 -> 1738;
1746 -> 1740;
1746 -> 1733;
1746 -> 1738;
1747 -> 1738;
1748 -> 1743;
1748 -> 1747;
1749 -> 1744;
1749 -> 1747;
1750 -> 1745;
1750 -> 1747;
1751 -> 1746;
1751 -> 1747;
1752 -> 1742;
1752 -> 1747;
1753 -> 1748;
1753 -> 1747;
1754 -> 1749;
1754 -> 1747;
1755 -> 1750;
1755 -> 1747;
1756 -> 1751;
1756 -> 1747;
1757 -> 1747;
1758 -> 1753;
1758 -> 1757;
1759 -> 1754;
1759 -> 1757;
1760 -> 1755;
1760 -> 1757;
1761 -> 1756;
1761 -> 1757;
1762 -> 1752;
1762 -> 1757;
1763 -> 1757;
1764 -> 1759;
1764 -> 1763;
1764 -> 1757;
1765 -> 1757;
1766 -> 1761;
1766 -> 1765;
1766 -> 1757;
1767 -> 1764;
1767 -> 1766;
1767 -> 1757;
1768 -> 1757;
1769 -> 1768;
1769 -> 1767;
1769 -> 1757;
1770 -> 1757;
1771 -> 1770;
1771 -> 1759;
1771 -> 1757;
1772 -> 1771;
1773 -> 1767;
1773 -> 1769;
1773 -> 1772;
1773 -> 1771;
1774 -> 1773;
1774 -> 1770;
1774 -> 1772;
1774 -> 1767;
1774 -> 1771;
1775 -> 1757;
1776 -> 1775;
1776 -> 1761;
1776 -> 1757;
1777 -> 1776;
1778 -> 1767;
1778 -> 1769;
1778 -> 1774;
1778 -> 1777;
1778 -> 1776;
1779 -> 1778;
1779 -> 1777;
1779 -> 1775;
1779 -> 1767;
1779 -> 1776;
1780 -> 1757;
1781 -> 1780;
1781 -> 1759;
1781 -> 1757;
1782 -> 1781;
1783 -> 1782;
1783 -> 1761;
1783 -> 1781;
1784 -> 1783;
1785 -> 1767;
1785 -> 1769;
1785 -> 1774;
1785 -> 1779;
1785 -> 1784;
1785 -> 1783;
1786 -> 1758;
1786 -> 1783;
1787 -> 1760;
1787 -> 1783;
1788 -> 1783;
1789 -> 1786;
1789 -> 1788;
1790 -> 1784;
1790 -> 1788;
1791 -> 1787;
1791 -> 1788;
1792 -> 1784;
1792 -> 1788;
1793 -> 1762;
1793 -> 1788;
1794 -> 1789;
1794 -> 1732;
1794 -> 1790;
1794 -> 1788;
1795 -> 1791;
1795 -> 1733;
1795 -> 1792;
1795 -> 1788;
1796 -> 1793;
1796 -> 0;
1796 -> 1794;
1796 -> 1795;
1796 -> 1732;
1796 -> 1733;
1796 -> 1788;
1797 -> 1785;
1797 -> 1796;
1797 -> 1783;
1798 -> 1783;
1799 -> 1767;
1799 -> 1769;
1799 -> 1774;
1799 -> 1779;
1799 -> 1798;
1799 -> 1782;
1799 -> 1783;
1800 -> 1783;
1801 -> 1767;
1801 -> 1769;
1801 -> 1774;
1801 -> 1779;
1801 -> 1780;
1801 -> 1800;
1801 -> 1783;
1802 -> 1797;
1802 -> 1783;
1803 -> 1799;
1803 -> 1783;
1804 -> 1802;
1804 -> 1803;
1804 -> 1783;
1805 -> 1801;
1805 -> 1783;
1806 -> 1804;
1806 -> 1805;
1806 -> 1783;
1807 -> 1806;
1807 -> 1780;
1807 -> 1782;
1807 -> 1767;
1807 -> 1783;
1808 -> 1767;
1808 -> 1757;
1809 -> 1749;
1809 -> 1747;
1810 -> 1751;
1810 -> 1747;
1811 -> 1747;
1812 -> 1809;
1812 -> 1811;
1812 -> 1747;
1813 -> 1810;
1813 -> 1811;
1813 -> 1747;
1814 -> 1812;
1814 -> 1813;
1814 -> 1747;
1815 -> 1808;
1815 -> 1767;
1815 -> 1769;
1815 -> 1774;
1815 -> 1779;
1815 -> 1807;
1815 -> 1809;
1815 -> 1810;
1815 -> 1814;
1816 -> 1814;
1817 -> 1808;
1817 -> 1767;
1817 -> 1769;
1817 -> 1774;
1817 -> 1779;
1817 -> 1807;
1817 -> 1816;
1817 -> 1810;
1817 -> 1814;
1818 -> 1808;
1818 -> 1767;
1818 -> 1769;
1818 -> 1774;
1818 -> 1779;
1818 -> 1807;
1818 -> 1809;
1818 -> 1810;
1818 -> 1817;
1819 -> 1817;
1820 -> 1809;
1820 -> 1819;
1821 -> 1810;
1821 -> 1819;
1822 -> 1819;
1823 -> 0;
1823 -> 1819;
1824 -> 1820;
1824 -> 1819;
1825 -> 1821;
1825 -> 1819;
1826 -> 1819;
1827 -> 1823;
1827 -> 1826;
1828 -> 1824;
1828 -> 1826;
1829 -> 1825;
1829 -> 1826;
1830 -> 1822;
1830 -> 1826;
1831 -> 1827;
1831 -> 1830;
1831 -> 1826;
1832 -> 1828;
1832 -> 1830;
1832 -> 1826;
1833 -> 1829;
1833 -> 1830;
1833 -> 1826;
1834 -> 1820;
1834 -> 1821;
1834 -> 1747;
1835 -> 0;
1835 -> 1834;
1836 -> 1834;
1837 -> 1834;
1838 -> 1835;
1838 -> 1837;
1839 -> 1836;
1839 -> 1837;
1840 -> 1836;
1840 -> 1837;
1841 -> 1836;
1841 -> 1837;
1842 -> 1838;
1842 -> 1841;
1842 -> 1837;
1843 -> 1839;
1843 -> 1841;
1843 -> 1837;
1844 -> 1840;
1844 -> 1841;
1844 -> 1837;
1845 -> 1747;
1846 -> 1834;
1846 -> 1845;
1846 -> 1747;
1847 -> 1747;
1848 -> 1834;
1848 -> 1847;
1848 -> 1747;
1849 -> 1822;
1849 -> 1836;
1849 -> 1831;
1849 -> 1832;
1849 -> 1833;
1849 -> 1842;
1849 -> 1843;
1849 -> 1844;
1849 -> 1738;
1850 -> 1849;
1851 -> 1850;
1852 -> 1740;
1852 -> 1733;
1852 -> 1796;
1852 -> 1849;
1852 -> 1850;
1853 -> 1741;
1853 -> 1852;
1853 -> 1730;
1853 -> 1850;
1854 -> 1734;
1854 -> 1851;
1854 -> 1707;
1855 -> 1255;
1855 -> 1854;
1855 -> 1696;
1855 -> 1222;
1856 -> 1383;
1856 -> 1591;
1856 -> 1222;
1857 -> 1260;
1857 -> 1374;
1857 -> 1222;
1858 -> 1255;
1858 -> 1855;
1858 -> 1222;
1859 -> 1069;
1860 -> 1062;
1861 -> 1063;
1861 -> 1062;
1862 -> 1066;
1862 -> 1062;
1863 -> 1062;
1864 -> 1861;
1864 -> 1863;
1865 -> 1862;
1865 -> 1863;
1866 -> 1865;
1866 -> 1863;
1867 -> 1866;
1867 -> 1066;
1867 -> 1567;
1868 -> 1864;
1868 -> 1867;
1868 -> 1567;
1868 -> 1866;
1869 -> 1866;
1869 -> 1868;
1870 -> 1869;
1870 -> 1868;
1871 -> 1869;
1872 -> 1062;
1873 -> 1063;
1873 -> 1062;
}