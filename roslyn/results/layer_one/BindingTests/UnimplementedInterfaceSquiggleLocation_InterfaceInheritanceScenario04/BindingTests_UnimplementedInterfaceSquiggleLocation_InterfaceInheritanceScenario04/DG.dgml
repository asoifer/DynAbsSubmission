<?xml version="1.0" encoding="utf-8"?>
<DirectedGraph Title="DG" xmlns="http://schemas.microsoft.com/vs/2009/dgml">
<Nodes>
<Node Id="EXTERNAL" Label="EXTERNAL" />
<Node Id="25014:[387..448).1" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 727077" />
<Node Id="25014:[390..448).1" Label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 727078" />
<Node Id="28001:[588..156578).1" Label="param BindingTests(this) 727079" />
<Node Id="21002:[790..793).1" Label="'C' 727080" />
<Node Id="21002:[772..793).1" Label="DefaultTypeName = 'C' 727081" />
<Node Id="21002:[845..848).1" Label="'M' 727082" />
<Node Id="21002:[825..848).1" Label="DefaultMethodName = 'M' 727083" />
<Node Id="21002:[3243..25375).1" Label="@'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 727084" />
<Node Id="21002:[3098..25375).1" Label="LINQ =
        #region the string LINQ defines a complete LINQ API called List1$T$ (for instance method) and List2$T$ (for extension methods)
 @'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 727085" />
<Node Id="21002:[678..25421).1" Label="param CompilingTestBase(this) 727086" />
<Node Id="21003:[1338..2835).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 727087" />
<Node Id="21003:[1308..2835).1" Label="NullableAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 727088" />
<Node Id="21003:[2908..3440).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 727089" />
<Node Id="21003:[2871..3440).1" Label="NullableContextAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 727090" />
<Node Id="21003:[3516..3915).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 727091" />
<Node Id="21003:[3476..3915).1" Label="NullablePublicOnlyAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 727092" />
<Node Id="21003:[4223..4448).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 727093" />
<Node Id="21003:[4192..4448).1" Label="AllowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 727094" />
<Node Id="21003:[4518..4746).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 727095" />
<Node Id="21003:[4484..4746).1" Label="DisallowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 727096" />
<Node Id="21003:[4813..5071).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 727097" />
<Node Id="21003:[4782..5071).1" Label="MaybeNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 727098" />
<Node Id="21003:[5142..5397).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 727099" />
<Node Id="21003:[5107..5397).1" Label="MaybeNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 727100" />
<Node Id="21003:[5462..5718).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 727101" />
<Node Id="21003:[5433..5718).1" Label="NotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 727102" />
<Node Id="21003:[5787..6038).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 727103" />
<Node Id="21003:[5754..6038).1" Label="NotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 727104" />
<Node Id="21003:[6109..6460).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 727105" />
<Node Id="21003:[6074..6460).1" Label="MemberNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 727106" />
<Node Id="21003:[6535..6920).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 727107" />
<Node Id="21003:[6496..6920).1" Label="MemberNotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 727108" />
<Node Id="21003:[6993..7250).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 727109" />
<Node Id="21003:[6956..7250).1" Label="DoesNotReturnIfAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 727110" />
<Node Id="21003:[7321..7557).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 727111" />
<Node Id="21003:[7286..7557).1" Label="DoesNotReturnAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 727112" />
<Node Id="21003:[7631..7980).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 727113" />
<Node Id="21003:[7593..7980).1" Label="NotNullIfNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 727114" />
<Node Id="21003:[8047..8155).1" Label="@'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 727115" />
<Node Id="21003:[8016..8155).1" Label="IsExternalInitTypeDefinition = @'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 727116" />
<Node Id="21003:[8220..8359).1" Label="@'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 727117" />
<Node Id="21003:[8191..8359).1" Label="IAsyncDisposableDefinition = @'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 727118" />
<Node Id="21003:[8415..20279).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 727119" />
<Node Id="21003:[8395..20279).1" Label="AsyncStreamsTypes = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 727120" />
<Node Id="21003:[20353..20617).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 727121" />
<Node Id="21003:[20315..20617).1" Label="EnumeratorCancellationAttributeType = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 727122" />
<Node Id="21003:[20689..21473).1" Label="@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 727123" />
<Node Id="21003:[20653..21473).1" Label="NativeIntegerAttributeDefinition =
@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 727124" />
<Node Id="25004:[2227..2317).1" Label="() =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 727125" />
<Node Id="25004:[2332..2368).1" Label="LazyThreadSafetyMode.PublicationOnly 727126" />
<Node Id="25004:[2183..2369).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 727127" />
<Node Id="25004:[2155..2369).1" Label="s_lazyDefaultVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 727128" />
<Node Id="25004:[2602..2696).1" Label="() =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 727129" />
<Node Id="25004:[2711..2747).1" Label="LazyThreadSafetyMode.PublicationOnly 727130" />
<Node Id="25004:[2558..2748).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 727131" />
<Node Id="25004:[2531..2748).1" Label="s_lazyLatestVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 727132" />
<Node Id="25004:[2914..2947).1" Label="RuntimeUtilities.IsCoreClrRuntime 727133" />
<Node Id="25004:[3094..3171).1" Label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 727134" />
<Node Id="25004:[3077..3172).1" Label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 727135" />
<Node Id="25004:[2894..3172).1" Label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime
            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')
            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 727136" />
<Node Id="25004:[3490..5167).1" Label="() =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            } 727137" />
<Node Id="25004:[5182..5218).1" Label="LazyThreadSafetyMode.PublicationOnly 727138" />
<Node Id="25004:[3446..5219).1" Label="new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 727139" />
<Node Id="25004:[3432..5219).1" Label="s_winRtRefs = new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 727140" />
<Node Id="25004:[5576..5645).1" Label="() =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 727141" />
<Node Id="25004:[5660..5696).1" Label="LazyThreadSafetyMode.PublicationOnly 727142" />
<Node Id="25004:[5532..5697).1" Label="new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 727143" />
<Node Id="25004:[5508..5697).1" Label="s_portableRefsMinimal = new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 727144" />
<Node Id="25004:[6321..6439).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 727145" />
<Node Id="25004:[6458..6494).1" Label="LazyThreadSafetyMode.PublicationOnly 727146" />
<Node Id="25004:[6275..6495).1" Label="new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 727147" />
<Node Id="25004:[6244..6495).1" Label="s_systemCoreRef =
            new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 727148" />
<Node Id="25004:[6714..6838).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 727149" />
<Node Id="25004:[6853..6889).1" Label="LazyThreadSafetyMode.PublicationOnly 727150" />
<Node Id="25004:[6672..6890).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727151" />
<Node Id="25004:[6637..6890).1" Label="s_systemCoreRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727152" />
<Node Id="25004:[7130..7249).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 727153" />
<Node Id="25004:[7264..7300).1" Label="LazyThreadSafetyMode.PublicationOnly 727154" />
<Node Id="25004:[7088..7301).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727155" />
<Node Id="25004:[7066..7301).1" Label="s_systemCoreRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727156" />
<Node Id="25004:[7532..7667).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 727157" />
<Node Id="25004:[7682..7718).1" Label="LazyThreadSafetyMode.PublicationOnly 727158" />
<Node Id="25004:[7490..7719).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727159" />
<Node Id="25004:[7464..7719).1" Label="s_systemWindowsFormsRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727160" />
<Node Id="25004:[7940..8064).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 727161" />
<Node Id="25004:[8079..8115).1" Label="LazyThreadSafetyMode.PublicationOnly 727162" />
<Node Id="25004:[7898..8116).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727163" />
<Node Id="25004:[7877..8116).1" Label="s_systemDrawingRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727164" />
<Node Id="25004:[8324..8442).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 727165" />
<Node Id="25004:[8457..8493).1" Label="LazyThreadSafetyMode.PublicationOnly 727166" />
<Node Id="25004:[8282..8494).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727167" />
<Node Id="25004:[8264..8494).1" Label="s_systemDataRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727168" />
<Node Id="25004:[8694..8807).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 727169" />
<Node Id="25004:[8822..8858).1" Label="LazyThreadSafetyMode.PublicationOnly 727170" />
<Node Id="25004:[8652..8859).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727171" />
<Node Id="25004:[8636..8859).1" Label="s_mscorlibRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727172" />
<Node Id="25004:[9063..9214).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 727173" />
<Node Id="25004:[9229..9265).1" Label="LazyThreadSafetyMode.PublicationOnly 727174" />
<Node Id="25004:[9021..9266).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727175" />
<Node Id="25004:[8997..9266).1" Label="s_mscorlibRefPortable = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727176" />
<Node Id="25004:[9478..10389).1" Label="() =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            } 727177" />
<Node Id="25004:[10404..10440).1" Label="LazyThreadSafetyMode.PublicationOnly 727178" />
<Node Id="25004:[9436..10441).1" Label="new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 727179" />
<Node Id="25004:[9420..10441).1" Label="s_aacorlibRef = new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 727180" />
<Node Id="25004:[10811..10967).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri') 727181" />
<Node Id="25004:[10982..11018).1" Label="LazyThreadSafetyMode.PublicationOnly 727182" />
<Node Id="25004:[10769..11019).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 727183" />
<Node Id="25004:[10749..11019).1" Label="s_mscorlibRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 727184" />
<Node Id="25004:[11415..11589).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 727185" />
<Node Id="25004:[11604..11640).1" Label="LazyThreadSafetyMode.PublicationOnly 727186" />
<Node Id="25004:[11373..11641).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727187" />
<Node Id="25004:[11345..11641).1" Label="s_mscorlibRef_silverlight = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727188" />
<Node Id="25004:[12432..12560).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 727189" />
<Node Id="25004:[12575..12611).1" Label="LazyThreadSafetyMode.PublicationOnly 727190" />
<Node Id="25004:[12390..12612).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727191" />
<Node Id="25004:[12369..12612).1" Label="s_desktopCSharpRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727192" />
<Node Id="25004:[12815..12944).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 727193" />
<Node Id="25004:[12959..12995).1" Label="LazyThreadSafetyMode.PublicationOnly 727194" />
<Node Id="25004:[12773..12996).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727195" />
<Node Id="25004:[12760..12996).1" Label="s_std20Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727196" />
<Node Id="25004:[13204..13343).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 727197" />
<Node Id="25004:[13358..13394).1" Label="LazyThreadSafetyMode.PublicationOnly 727198" />
<Node Id="25004:[13162..13395).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727199" />
<Node Id="25004:[13138..13395).1" Label="s_46NetStandardFacade = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727200" />
<Node Id="25004:[13621..13796).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 727201" />
<Node Id="25004:[13811..13847).1" Label="LazyThreadSafetyMode.PublicationOnly 727202" />
<Node Id="25004:[13579..13848).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 727203" />
<Node Id="25004:[13551..13848).1" Label="s_systemDynamicRuntimeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 727204" />
<Node Id="25004:[14066..14175).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 727205" />
<Node Id="25004:[14190..14226).1" Label="LazyThreadSafetyMode.PublicationOnly 727206" />
<Node Id="25004:[14024..14227).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727207" />
<Node Id="25004:[14010..14227).1" Label="s_systemRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727208" />
<Node Id="25004:[14421..14531).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 727209" />
<Node Id="25004:[14546..14582).1" Label="LazyThreadSafetyMode.PublicationOnly 727210" />
<Node Id="25004:[14379..14583).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727211" />
<Node Id="25004:[14361..14583).1" Label="s_systemRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727212" />
<Node Id="25004:[14798..14913).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 727213" />
<Node Id="25004:[14928..14964).1" Label="LazyThreadSafetyMode.PublicationOnly 727214" />
<Node Id="25004:[14756..14965).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727215" />
<Node Id="25004:[14725..14965).1" Label="s_systemRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727216" />
<Node Id="25004:[15193..15301).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 727217" />
<Node Id="25004:[15316..15352).1" Label="LazyThreadSafetyMode.PublicationOnly 727218" />
<Node Id="25004:[15151..15353).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727219" />
<Node Id="25004:[15133..15353).1" Label="s_systemRef_v20 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727220" />
<Node Id="25004:[15554..15670).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 727221" />
<Node Id="25004:[15685..15721).1" Label="LazyThreadSafetyMode.PublicationOnly 727222" />
<Node Id="25004:[15512..15722).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727223" />
<Node Id="25004:[15495..15722).1" Label="s_systemXmlRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727224" />
<Node Id="25004:[15925..16050).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 727225" />
<Node Id="25004:[16065..16101).1" Label="LazyThreadSafetyMode.PublicationOnly 727226" />
<Node Id="25004:[15883..16102).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727227" />
<Node Id="25004:[15862..16102).1" Label="s_systemXmlLinqRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727228" />
<Node Id="25004:[16314..16416).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 727229" />
<Node Id="25004:[16431..16467).1" Label="LazyThreadSafetyMode.PublicationOnly 727230" />
<Node Id="25004:[16272..16468).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727231" />
<Node Id="25004:[16250..16468).1" Label="s_mscorlibFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727232" />
<Node Id="25004:[16687..16800).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 727233" />
<Node Id="25004:[16815..16851).1" Label="LazyThreadSafetyMode.PublicationOnly 727234" />
<Node Id="25004:[16645..16852).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727235" />
<Node Id="25004:[16618..16852).1" Label="s_systemRuntimeFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727236" />
<Node Id="25004:[17083..17200).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 727237" />
<Node Id="25004:[17215..17251).1" Label="LazyThreadSafetyMode.PublicationOnly 727238" />
<Node Id="25004:[17041..17252).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727239" />
<Node Id="25004:[17012..17252).1" Label="s_systemThreadingFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727240" />
<Node Id="25004:[17497..17625).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 727241" />
<Node Id="25004:[17640..17676).1" Label="LazyThreadSafetyMode.PublicationOnly 727242" />
<Node Id="25004:[17455..17677).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727243" />
<Node Id="25004:[17421..17677).1" Label="s_systemThreadingTasksFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727244" />
<Node Id="25004:[17911..18059).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 727245" />
<Node Id="25004:[18074..18110).1" Label="LazyThreadSafetyMode.PublicationOnly 727246" />
<Node Id="25004:[17869..18111).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727247" />
<Node Id="25004:[17850..18111).1" Label="s_mscorlibPP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727248" />
<Node Id="25004:[18321..18481).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 727249" />
<Node Id="25004:[18496..18532).1" Label="LazyThreadSafetyMode.PublicationOnly 727250" />
<Node Id="25004:[18279..18533).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727251" />
<Node Id="25004:[18255..18533).1" Label="s_systemRuntimePP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727252" />
<Node Id="25004:[18754..18880).1" Label="() =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 727253" />
<Node Id="25004:[18895..18931).1" Label="LazyThreadSafetyMode.PublicationOnly 727254" />
<Node Id="25004:[18712..18932).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727255" />
<Node Id="25004:[18687..18932).1" Label="s_FSharpTestLibraryRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 727256" />
<Node Id="25004:[19130..19147).1" Label="@'R:\Invalid.dll' 727257" />
<Node Id="25004:[19120..19147).1" Label="fullPath: @'R:\Invalid.dll' 727258" />
<Node Id="25004:[19094..19148).1" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 727259" />
<Node Id="25004:[19094..19148).5" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 727260" />
<Node Id="25004:[19081..19148).1" Label="InvalidRef = new TestMetadataReference(fullPath: @'R:\Invalid.dll') 727261" />
<Node Id="21003:[51329..51357).1" Label="MscorlibRef_v4_0_30316_17626 727262" />
<Node Id="25004:[10673..10688).1" Label="Net451.mscorlib 727263" />
<Node Id="21003:[51307..51358).1" Label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 727264" />
<Node Id="21003:[51292..51358).1" Label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 727265" />
<Node Id="21003:[56538..56550).1" Label="'/*$bind$*/' 727266" />
<Node Id="21003:[56524..56550).1" Label="StartString = '/*$bind$*/' 727267" />
<Node Id="21003:[56596..56609).1" Label="'/*$/bind$*/' 727268" />
<Node Id="21003:[56584..56609).1" Label="EndString = '/*$/bind$*/' 727269" />
<Node Id="21003:[92394..99056).1" Label="@'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 727270" />
<Node Id="21003:[92381..99056).1" Label="SpanSource = @'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 727271" />
<Node Id="21003:[101764..102290).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 727272" />
<Node Id="21003:[101743..102290).1" Label="s_IAsyncEnumerable = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 727273" />
<Node Id="21003:[1215..102298).1" Label="param CSharpTestBase(this) 727274" />
<Node Id="25015:[917..26825).1" Label="param CommonTestBase(this) 727275" />
<Node Id="25004:[926..968).1" Label="param TestBase(this) 727276" />
<Node Id="25004:[908..913).1" Label="_temp 727277" />
<Node Id="25014:[387..448).372" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 727278" />
<Node Id="28001:[39812..41079).1" Label="param UnimplementedInterfaceSquiggleLocation_InterfaceInheritanceScenario04(this) 727279" />
<Node Id="28001:[40132..40347).1" Label="string scenarioCode = @'
public class ITT
    : IInterfaceBase, 
     IInterfaceBase2 
{ }

public interface IInterfaceBase
{
    void xyz();
}

public interface IInterfaceBase2
{
    void xyz();
}
'; 727280" />
<Node Id="28001:[40361..40412).1" Label="var testAssembly = CreateCompilation(scenarioCode); 727281" />
<Node Id="28001:[40398..40410).1" Label="scenarioCode 727282" />
<Node Id="21004:[2251..2264).1" Label="param operator(string source) 727283" />
<Node Id="21004:[2290..2296).1" Label="source 727284" />
<Node Id="21004:[2269..2297).1" Label="new CSharpTestSource(source) 727285" />
<Node Id="21004:[839..851).1" Label="param CSharpTestSource(object value) 727286" />
<Node Id="21004:[814..902).1" Label="param CSharpTestSource(this) 727287" />
<Node Id="21004:[877..882).1" Label="Value 727288" />
<Node Id="28001:[40361..40412).2" Label="var testAssembly = CreateCompilation(scenarioCode); 727289" />
<Node Id="28001:[40361..40412).4" Label="var testAssembly = CreateCompilation(scenarioCode); 727290" />
<Node Id="28001:[40380..40411).1" Label="CreateCompilation(scenarioCode) 727291" />
<Node Id="21003:[44736..44759).1" Label="param CreateCompilation(CSharpTestSource source) 727292" />
<Node Id="21003:[44774..44822).1" Label="param CreateCompilation(IEnumerable$MetadataReference$ references = null) 727293" />
<Node Id="21003:[44837..44876).1" Label="param CreateCompilation(CSharpCompilationOptions options = null) 727294" />
<Node Id="21003:[44891..44929).1" Label="param CreateCompilation(CSharpParseOptions parseOptions = null) 727295" />
<Node Id="21003:[44944..45002).1" Label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 727296" />
<Node Id="21003:[45017..45041).1" Label="param CreateCompilation(string assemblyName = '') 727297" />
<Node Id="21003:[45056..45082).1" Label="param CreateCompilation(string sourceFileName = '') 727298" />
<Node Id="21003:[45097..45128).1" Label="param CreateCompilation(bool skipUsesIsNullable = false) 727299" />
<Node Id="21003:[45156..45162).1" Label="source 727300" />
<Node Id="21003:[45198..45213).1" Label="targetFramework 727301" />
<Node Id="21003:[45215..45225).1" Label="references 727302" />
<Node Id="21003:[45164..45226).1" Label="TargetFrameworkUtil.GetReferences(targetFramework, references) 727303" />
<Node Id="25005:[9600..9618).1" Label="param GetReferences(TargetFramework tf) 727304" />
<Node Id="25005:[9620..9671).1" Label="param GetReferences(IEnumerable$MetadataReference$ additionalReferences) 727305" />
<Node Id="25005:[9697..9732).1" Label="var references = GetReferences(tf); 727306" />
<Node Id="25005:[9714..9731).1" Label="GetReferences(tf) 727307" />
<Node Id="25005:[7569..7600).1" Label="param GetReferences(TargetFramework targetFramework) 727308" />
<Node Id="25005:[7605..9525).1" Label="targetFramework switch
        {
            TargetFramework.Empty =$ ImmutableArray$MetadataReference$.Empty,
            TargetFramework.Mscorlib40 =$ Mscorlib40References,
            TargetFramework.Mscorlib40Extended =$ Mscorlib40ExtendedReferences,
            TargetFramework.Mscorlib40AndSystemCore =$ Mscorlib40andSystemCoreReferences,
            TargetFramework.Mscorlib40AndVBRuntime =$ Mscorlib40andVBRuntimeReferences,
            TargetFramework.Mscorlib45 =$ Mscorlib45References,
            TargetFramework.Mscorlib45Extended =$ Mscorlib45ExtendedReferences,
            TargetFramework.Mscorlib45AndCSharp =$ Mscorlib45AndCSharpReferences,
            TargetFramework.Mscorlib45AndVBRuntime =$ Mscorlib45AndVBRuntimeReferences,
            TargetFramework.Mscorlib46 =$ Mscorlib46References,
            TargetFramework.Mscorlib46Extended =$ Mscorlib46ExtendedReferences,
            TargetFramework.Mscorlib461 =$ Mscorlib46References,
            TargetFramework.Mscorlib461Extended =$ Mscorlib461ExtendedReferences,
            TargetFramework.NetStandard20 =$ NetStandard20References,
            TargetFramework.NetCoreApp =$ NetCoreAppReferences,
            TargetFramework.WinRT =$ WinRTReferences,
            TargetFramework.Standard =$ StandardReferences,
            TargetFramework.StandardLatest =$ StandardLatestReferences,
            TargetFramework.StandardAndCSharp =$ StandardAndCSharpReferences,
            TargetFramework.StandardAndVBRuntime =$ StandardAndVBRuntimeReferences,
            TargetFramework.StandardCompat =$ StandardCompatReferences,
            TargetFramework.DefaultVb =$ DefaultVbReferences,
            TargetFramework.Minimal =$ MinimalReferences,
            TargetFramework.MinimalAsync =$ MinimalAsyncReferences,
            _ =$ throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),
        } 727309" />
<Node Id="25005:[8889..8907).1" Label="StandardReferences 727310" />
<Node Id="25005:[6208..6241).1" Label="RuntimeUtilities.IsCoreClrRuntime 727311" />
<Node Id="25005:[6270..6298).1" Label="Mscorlib46ExtendedReferences 727312" />
<Node Id="25005:[4543..4693).1" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 727313" />
<Node Id="25005:[4648..4670).1" Label="TestBase.ValueTupleRef 727314" />
<Node Id="25004:[12011..12051).1" Label="TestReferences.NetFx.ValueTuple.tuplelib 727315" />
<Node Id="25005:[4543..4693).7" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 727316" />
<Node Id="25005:[6208..6298).1" Label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 727317" />
<Node Id="25005:[9746..9845).1" Label="if (additionalReferences == null)
            {
                return references;
            } 727318" />
<Node Id="25005:[9746..9845).2" Label="if (additionalReferences == null)
            {
                return references;
            } 727319" />
<Node Id="25005:[9812..9830).1" Label="return references; 727320" />
<Node Id="21003:[45228..45235).1" Label="options 727321" />
<Node Id="21003:[45237..45249).1" Label="parseOptions 727322" />
<Node Id="21003:[45251..45263).1" Label="assemblyName 727323" />
<Node Id="21003:[45265..45279).1" Label="sourceFileName 727324" />
<Node Id="21003:[45281..45299).1" Label="skipUsesIsNullable 727325" />
<Node Id="21003:[45133..45300).1" Label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 727326" />
<Node Id="21003:[45382..45405).1" Label="param CreateEmptyCompilation(CSharpTestSource source) 727327" />
<Node Id="21003:[45420..45468).1" Label="param CreateEmptyCompilation(IEnumerable$MetadataReference$ references = null) 727328" />
<Node Id="21003:[45483..45522).1" Label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 727329" />
<Node Id="21003:[45537..45575).1" Label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 727330" />
<Node Id="21003:[45590..45614).1" Label="param CreateEmptyCompilation(string assemblyName = '') 727331" />
<Node Id="21003:[45629..45655).1" Label="param CreateEmptyCompilation(string sourceFileName = '') 727332" />
<Node Id="21003:[45670..45701).1" Label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 727333" />
<Node Id="21003:[45728..45734).1" Label="source 727334" />
<Node Id="21003:[45736..45746).1" Label="references 727335" />
<Node Id="21003:[45748..45755).1" Label="options 727336" />
<Node Id="21003:[45757..45769).1" Label="parseOptions 727337" />
<Node Id="21003:[45771..45783).1" Label="assemblyName 727338" />
<Node Id="21003:[45785..45799).1" Label="sourceFileName 727339" />
<Node Id="21003:[45801..45819).1" Label="skipUsesIsNullable 727340" />
<Node Id="21003:[45842..45846).1" Label="null 727341" />
<Node Id="21003:[45821..45846).1" Label="experimentalFeature: null 727342" />
<Node Id="21003:[45706..45847).1" Label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 727343" />
<Node Id="21003:[45929..45952).1" Label="param CreateCompilationCore(CSharpTestSource source) 727344" />
<Node Id="21003:[45967..46008).1" Label="param CreateCompilationCore(IEnumerable$MetadataReference$ references) 727345" />
<Node Id="21003:[46023..46055).1" Label="param CreateCompilationCore(CSharpCompilationOptions options) 727346" />
<Node Id="21003:[46070..46101).1" Label="param CreateCompilationCore(CSharpParseOptions parseOptions) 727347" />
<Node Id="21003:[46116..46135).1" Label="param CreateCompilationCore(string assemblyName) 727348" />
<Node Id="21003:[46150..46171).1" Label="param CreateCompilationCore(string sourceFileName) 727349" />
<Node Id="21003:[46186..46209).1" Label="param CreateCompilationCore(bool skipUsesIsNullable) 727350" />
<Node Id="21003:[46224..46254).1" Label="param CreateCompilationCore(MessageID? experimentalFeature) 727351" />
<Node Id="21003:[46280..46350).1" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 727352" />
<Node Id="21003:[46280..46350).2" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 727353" />
<Node Id="21003:[46298..46349).1" Label="source.GetSyntaxTrees(parseOptions, sourceFileName) 727354" />
<Node Id="21004:[949..980).1" Label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 727355" />
<Node Id="21004:[982..1008).1" Label="param GetSyntaxTrees(string sourceFileName = '') 727356" />
<Node Id="21004:[914..2190).1" Label="param GetSyntaxTrees(this) 727357" />
<Node Id="21004:[1034..2179).1" Label="switch (Value)
            {
                case string source:
                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };
                case string[] sources:
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return CSharpTestBase.Parse(parseOptions, sources);
                case SyntaxTree tree:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return new[] { tree };
                case SyntaxTree[] trees:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return trees;
                case CSharpTestSource[] testSources:
                    return testSources.SelectMany(s =$ s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();
                case null:
                    return Array.Empty$SyntaxTree$();
                default:
                    throw new Exception($'Unexpected value: {Value}');
            } 727358" />
<Node Id="21004:[1122..1208).1" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 727359" />
<Node Id="21004:[1122..1208).3" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 727360" />
<Node Id="21004:[1122..1208).4" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 727361" />
<Node Id="21004:[1137..1205).1" Label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 727362" />
<Node Id="21003:[34078..34089).1" Label="param Parse(string text) 727363" />
<Node Id="21003:[34091..34111).1" Label="param Parse(string filename = '') 727364" />
<Node Id="21003:[34113..34146).1" Label="param Parse(CSharpParseOptions options = null) 727365" />
<Node Id="21003:[34148..34172).1" Label="param Parse(Encoding encoding = null) 727366" />
<Node Id="21003:[34198..34304).1" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 727367" />
<Node Id="21003:[34198..34304).2" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 727368" />
<Node Id="21010:[590..618).1" Label="kind: SourceCodeKind.Regular 727369" />
<Node Id="21010:[620..662).1" Label="documentationMode: DocumentationMode.Parse 727370" />
<Node Id="21010:[567..663).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 727371" />
<Node Id="21010:[567..663).5" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 727372" />
<Node Id="21010:[557..663).1" Label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 727373" />
<Node Id="21010:[742..763).1" Label="SourceCodeKind.Script 727374" />
<Node Id="21010:[725..764).1" Label="Regular.WithKind(SourceCodeKind.Script) 727375" />
<Node Id="21010:[716..764).1" Label="Script = Regular.WithKind(SourceCodeKind.Script) 727376" />
<Node Id="21010:[856..879).1" Label="LanguageVersion.CSharp6 727377" />
<Node Id="21010:[828..880).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 727378" />
<Node Id="21010:[817..880).1" Label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 727379" />
<Node Id="21010:[972..995).1" Label="LanguageVersion.CSharp7 727380" />
<Node Id="21010:[944..996).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 727381" />
<Node Id="21010:[933..996).1" Label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 727382" />
<Node Id="21010:[1090..1115).1" Label="LanguageVersion.CSharp7_1 727383" />
<Node Id="21010:[1062..1116).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 727384" />
<Node Id="21010:[1049..1116).1" Label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 727385" />
<Node Id="21010:[1210..1235).1" Label="LanguageVersion.CSharp7_2 727386" />
<Node Id="21010:[1182..1236).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 727387" />
<Node Id="21010:[1169..1236).1" Label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 727388" />
<Node Id="21010:[1330..1355).1" Label="LanguageVersion.CSharp7_3 727389" />
<Node Id="21010:[1302..1356).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 727390" />
<Node Id="21010:[1289..1356).1" Label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 727391" />
<Node Id="21010:[1454..1477).1" Label="LanguageVersion.Default 727392" />
<Node Id="21010:[1426..1478).1" Label="Regular.WithLanguageVersion(LanguageVersion.Default) 727393" />
<Node Id="21010:[1409..1478).1" Label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 727394" />
<Node Id="21010:[1576..1599).1" Label="LanguageVersion.Preview 727395" />
<Node Id="21010:[1548..1600).1" Label="Regular.WithLanguageVersion(LanguageVersion.Preview) 727396" />
<Node Id="21010:[1531..1600).1" Label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 727397" />
<Node Id="21010:[1692..1715).1" Label="LanguageVersion.CSharp8 727398" />
<Node Id="21010:[1664..1716).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 727399" />
<Node Id="21010:[1653..1716).1" Label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 727400" />
<Node Id="21010:[1808..1831).1" Label="LanguageVersion.CSharp9 727401" />
<Node Id="21010:[1780..1832).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 727402" />
<Node Id="21010:[1769..1832).1" Label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 727403" />
<Node Id="21010:[1950..1976).1" Label="DocumentationMode.Diagnose 727404" />
<Node Id="21010:[1920..1977).1" Label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 727405" />
<Node Id="21010:[1885..1977).1" Label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 727406" />
<Node Id="21010:[2060..2067).1" Label="Regular 727407" />
<Node Id="21010:[2080..2109).1" Label="'UseLegacyStrongNameProvider' 727408" />
<Node Id="21010:[2060..2110).1" Label="Regular.WithFeature('UseLegacyStrongNameProvider') 727409" />
<Node Id="21010:[7783..7814).1" Label="param WithFeature(this CSharpParseOptions options) 727410" />
<Node Id="21010:[7816..7830).1" Label="param WithFeature(string feature) 727411" />
<Node Id="21010:[7832..7853).1" Label="param WithFeature(string value = 'true') 727412" />
<Node Id="21010:[7879..7992).1" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 727413" />
<Node Id="21010:[7879..7992).2" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 727414" />
<Node Id="21010:[7879..7992).3" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 727415" />
<Node Id="21010:[7879..7992).4" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 727416" />
<Node Id="21010:[7879..7992).5" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 727417" />
<Node Id="21010:[7931..7989).1" Label="new[] { new KeyValuePair$string, string$(feature, value) } 727418" />
<Node Id="21010:[7879..7992).9" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 727419" />
<Node Id="21010:[2030..2110).1" Label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 727420" />
<Node Id="21010:[2227..2274).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates 727421" />
<Node Id="21010:[2227..2292).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 727422" />
<Node Id="21010:[2295..2296).1" Label="1 727423" />
<Node Id="21010:[2227..2296).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 727424" />
<Node Id="21010:[2199..2297).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 727425" />
<Node Id="21010:[2163..2297).1" Label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 727426" />
<Node Id="21010:[2401..2450).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides 727427" />
<Node Id="21010:[2401..2468).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 727428" />
<Node Id="21010:[2373..2469).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 727429" />
<Node Id="21010:[2350..2469).1" Label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 727430" />
<Node Id="21010:[2576..2599).1" Label="LanguageVersion.CSharp8 727431" />
<Node Id="21010:[2548..2600).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 727432" />
<Node Id="21010:[2522..2600).1" Label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 727433" />
<Node Id="21010:[2655..2705).1" Label="RegularWithExtendedPartialMethods = RegularPreview 727434" />
<Node Id="21010:[2799..2838).1" Label="new SmallDictionary$string, string$ { } 727435" />
<Node Id="21010:[2774..2838).1" Label="s_experimentalFeatures = new SmallDictionary$string, string$ { } 727436" />
<Node Id="21010:[2954..2982).1" Label="kind: SourceCodeKind.Regular 727437" />
<Node Id="21010:[2984..3025).1" Label="documentationMode: DocumentationMode.None 727438" />
<Node Id="21010:[3027..3067).1" Label="languageVersion: LanguageVersion.Preview 727439" />
<Node Id="21010:[2931..3068).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 727440" />
<Node Id="21010:[2931..3068).3" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 727441" />
<Node Id="21010:[3082..3104).1" Label="s_experimentalFeatures 727442" />
<Node Id="21010:[2931..3105).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 727443" />
<Node Id="21010:[2891..3105).1" Label="ExperimentalParseOptions =
            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 727444" />
<Node Id="21010:[3487..3556).1" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 727445" />
<Node Id="21010:[3524..3544).1" Label="'testV7SwitchBinder' 727446" />
<Node Id="21010:[3546..3552).1" Label="'true' 727447" />
<Node Id="21010:[3487..3556).2" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 727448" />
<Node Id="21010:[3465..3557).1" Label="Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 727449" />
<Node Id="21010:[3436..3557).1" Label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 727450" />
<Node Id="21010:[3612..3656).1" Label="RegularWithoutRecursivePatterns = Regular7_3 727451" />
<Node Id="21010:[3709..3748).1" Label="RegularWithRecursivePatterns = Regular8 727452" />
<Node Id="21010:[3801..3844).1" Label="RegularWithoutPatternCombinators = Regular8 727453" />
<Node Id="21010:[3897..3943).1" Label="RegularWithPatternCombinators = RegularPreview 727454" />
<Node Id="21010:[4035..4070).1" Label="OutputKind.DynamicallyLinkedLibrary 727455" />
<Node Id="21010:[4072..4097).1" Label="OptimizationLevel.Release 727456" />
<Node Id="21010:[4017..4098).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 727457" />
<Node Id="21010:[10204..10225).1" Label="param CreateTestOptions(OutputKind outputKind) 727458" />
<Node Id="21010:[10227..10262).1" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727459" />
<Node Id="21010:[10264..10288).1" Label="param CreateTestOptions(bool allowUnsafe = false) 727460" />
<Node Id="21010:[10335..10345).1" Label="outputKind 727461" />
<Node Id="21010:[10347..10383).1" Label="optimizationLevel: optimizationLevel 727462" />
<Node Id="21010:[10385..10425).1" Label="warningLevel: Diagnostic.MaxWarningLevel 727463" />
<Node Id="21010:[10427..10451).1" Label="allowUnsafe: allowUnsafe 727464" />
<Node Id="21010:[10306..10452).1" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727465" />
<Node Id="21010:[10306..10452).47" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727466" />
<Node Id="21010:[4004..4098).1" Label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 727467" />
<Node Id="21010:[4188..4217).1" Label="OutputKind.ConsoleApplication 727468" />
<Node Id="21010:[4219..4244).1" Label="OptimizationLevel.Release 727469" />
<Node Id="21010:[4170..4245).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 727470" />
<Node Id="21010:[10204..10225).2" Label="param CreateTestOptions(OutputKind outputKind) 727471" />
<Node Id="21010:[10227..10262).2" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727472" />
<Node Id="21010:[10264..10288).2" Label="param CreateTestOptions(bool allowUnsafe = false) 727473" />
<Node Id="21010:[10335..10345).2" Label="outputKind 727474" />
<Node Id="21010:[10347..10383).2" Label="optimizationLevel: optimizationLevel 727475" />
<Node Id="21010:[10385..10425).2" Label="warningLevel: Diagnostic.MaxWarningLevel 727476" />
<Node Id="21010:[10427..10451).2" Label="allowUnsafe: allowUnsafe 727477" />
<Node Id="21010:[10306..10452).49" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727478" />
<Node Id="21010:[10306..10452).95" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727479" />
<Node Id="21010:[4157..4245).1" Label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 727480" />
<Node Id="21010:[4353..4357).1" Label="true 727481" />
<Node Id="21010:[4324..4358).1" Label="ReleaseDll.WithDebugPlusMode(true) 727482" />
<Node Id="21010:[4306..4358).1" Label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 727483" />
<Node Id="21010:[4466..4470).1" Label="true 727484" />
<Node Id="21010:[4437..4471).1" Label="ReleaseExe.WithDebugPlusMode(true) 727485" />
<Node Id="21010:[4419..4471).1" Label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 727486" />
<Node Id="21010:[4561..4596).1" Label="OutputKind.DynamicallyLinkedLibrary 727487" />
<Node Id="21010:[4598..4621).1" Label="OptimizationLevel.Debug 727488" />
<Node Id="21010:[4543..4622).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 727489" />
<Node Id="21010:[10204..10225).3" Label="param CreateTestOptions(OutputKind outputKind) 727490" />
<Node Id="21010:[10227..10262).3" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727491" />
<Node Id="21010:[10264..10288).3" Label="param CreateTestOptions(bool allowUnsafe = false) 727492" />
<Node Id="21010:[10335..10345).3" Label="outputKind 727493" />
<Node Id="21010:[10347..10383).3" Label="optimizationLevel: optimizationLevel 727494" />
<Node Id="21010:[10385..10425).3" Label="warningLevel: Diagnostic.MaxWarningLevel 727495" />
<Node Id="21010:[10427..10451).3" Label="allowUnsafe: allowUnsafe 727496" />
<Node Id="21010:[10306..10452).97" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727497" />
<Node Id="21010:[10306..10452).143" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727498" />
<Node Id="21010:[4532..4622).1" Label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 727499" />
<Node Id="21010:[4710..4739).1" Label="OutputKind.ConsoleApplication 727500" />
<Node Id="21010:[4741..4764).1" Label="OptimizationLevel.Debug 727501" />
<Node Id="21010:[4692..4765).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 727502" />
<Node Id="21010:[10204..10225).4" Label="param CreateTestOptions(OutputKind outputKind) 727503" />
<Node Id="21010:[10227..10262).4" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727504" />
<Node Id="21010:[10264..10288).4" Label="param CreateTestOptions(bool allowUnsafe = false) 727505" />
<Node Id="21010:[10335..10345).4" Label="outputKind 727506" />
<Node Id="21010:[10347..10383).4" Label="optimizationLevel: optimizationLevel 727507" />
<Node Id="21010:[10385..10425).4" Label="warningLevel: Diagnostic.MaxWarningLevel 727508" />
<Node Id="21010:[10427..10451).4" Label="allowUnsafe: allowUnsafe 727509" />
<Node Id="21010:[10306..10452).145" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727510" />
<Node Id="21010:[10306..10452).191" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727511" />
<Node Id="21010:[4681..4765).1" Label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 727512" />
<Node Id="21010:[4859..4892).1" Label="OutputKind.WindowsRuntimeMetadata 727513" />
<Node Id="21010:[4894..4919).1" Label="OptimizationLevel.Release 727514" />
<Node Id="21010:[4841..4920).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 727515" />
<Node Id="21010:[10204..10225).5" Label="param CreateTestOptions(OutputKind outputKind) 727516" />
<Node Id="21010:[10227..10262).5" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727517" />
<Node Id="21010:[10264..10288).5" Label="param CreateTestOptions(bool allowUnsafe = false) 727518" />
<Node Id="21010:[10335..10345).5" Label="outputKind 727519" />
<Node Id="21010:[10347..10383).5" Label="optimizationLevel: optimizationLevel 727520" />
<Node Id="21010:[10385..10425).5" Label="warningLevel: Diagnostic.MaxWarningLevel 727521" />
<Node Id="21010:[10427..10451).5" Label="allowUnsafe: allowUnsafe 727522" />
<Node Id="21010:[10306..10452).193" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727523" />
<Node Id="21010:[10306..10452).239" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727524" />
<Node Id="21010:[4826..4920).1" Label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 727525" />
<Node Id="21010:[5010..5043).1" Label="OutputKind.WindowsRuntimeMetadata 727526" />
<Node Id="21010:[5045..5068).1" Label="OptimizationLevel.Debug 727527" />
<Node Id="21010:[4992..5069).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 727528" />
<Node Id="21010:[10204..10225).6" Label="param CreateTestOptions(OutputKind outputKind) 727529" />
<Node Id="21010:[10227..10262).6" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727530" />
<Node Id="21010:[10264..10288).6" Label="param CreateTestOptions(bool allowUnsafe = false) 727531" />
<Node Id="21010:[10335..10345).6" Label="outputKind 727532" />
<Node Id="21010:[10347..10383).6" Label="optimizationLevel: optimizationLevel 727533" />
<Node Id="21010:[10385..10425).6" Label="warningLevel: Diagnostic.MaxWarningLevel 727534" />
<Node Id="21010:[10427..10451).6" Label="allowUnsafe: allowUnsafe 727535" />
<Node Id="21010:[10306..10452).241" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727536" />
<Node Id="21010:[10306..10452).287" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727537" />
<Node Id="21010:[4979..5069).1" Label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 727538" />
<Node Id="21010:[5164..5184).1" Label="OutputKind.NetModule 727539" />
<Node Id="21010:[5186..5211).1" Label="OptimizationLevel.Release 727540" />
<Node Id="21010:[5146..5212).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 727541" />
<Node Id="21010:[10204..10225).7" Label="param CreateTestOptions(OutputKind outputKind) 727542" />
<Node Id="21010:[10227..10262).7" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727543" />
<Node Id="21010:[10264..10288).7" Label="param CreateTestOptions(bool allowUnsafe = false) 727544" />
<Node Id="21010:[10335..10345).7" Label="outputKind 727545" />
<Node Id="21010:[10347..10383).7" Label="optimizationLevel: optimizationLevel 727546" />
<Node Id="21010:[10385..10425).7" Label="warningLevel: Diagnostic.MaxWarningLevel 727547" />
<Node Id="21010:[10427..10451).7" Label="allowUnsafe: allowUnsafe 727548" />
<Node Id="21010:[10306..10452).289" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727549" />
<Node Id="21010:[10306..10452).335" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727550" />
<Node Id="21010:[5130..5212).1" Label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 727551" />
<Node Id="21010:[5303..5323).1" Label="OutputKind.NetModule 727552" />
<Node Id="21010:[5325..5348).1" Label="OptimizationLevel.Debug 727553" />
<Node Id="21010:[5285..5349).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 727554" />
<Node Id="21010:[10204..10225).8" Label="param CreateTestOptions(OutputKind outputKind) 727555" />
<Node Id="21010:[10227..10262).8" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 727556" />
<Node Id="21010:[10264..10288).8" Label="param CreateTestOptions(bool allowUnsafe = false) 727557" />
<Node Id="21010:[10335..10345).8" Label="outputKind 727558" />
<Node Id="21010:[10347..10383).8" Label="optimizationLevel: optimizationLevel 727559" />
<Node Id="21010:[10385..10425).8" Label="warningLevel: Diagnostic.MaxWarningLevel 727560" />
<Node Id="21010:[10427..10451).8" Label="allowUnsafe: allowUnsafe 727561" />
<Node Id="21010:[10306..10452).337" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727562" />
<Node Id="21010:[10306..10452).383" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 727563" />
<Node Id="21010:[5271..5349).1" Label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 727564" />
<Node Id="21010:[5456..5460).1" Label="true 727565" />
<Node Id="21010:[5429..5461).1" Label="ReleaseDll.WithAllowUnsafe(true) 727566" />
<Node Id="21010:[5410..5461).1" Label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 727567" />
<Node Id="21010:[5566..5570).1" Label="true 727568" />
<Node Id="21010:[5539..5571).1" Label="ReleaseExe.WithAllowUnsafe(true) 727569" />
<Node Id="21010:[5520..5571).1" Label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 727570" />
<Node Id="21010:[5674..5678).1" Label="true 727571" />
<Node Id="21010:[5649..5679).1" Label="DebugDll.WithAllowUnsafe(true) 727572" />
<Node Id="21010:[5632..5679).1" Label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 727573" />
<Node Id="21010:[5780..5784).1" Label="true 727574" />
<Node Id="21010:[5755..5785).1" Label="DebugExe.WithAllowUnsafe(true) 727575" />
<Node Id="21010:[5738..5785).1" Label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 727576" />
<Node Id="21010:[5900..5951).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 727577" />
<Node Id="21010:[5866..5952).1" Label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727578" />
<Node Id="21010:[5846..5952).1" Label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727579" />
<Node Id="21010:[6065..6116).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 727580" />
<Node Id="21010:[6031..6117).1" Label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727581" />
<Node Id="21010:[6011..6117).1" Label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727582" />
<Node Id="21010:[6236..6287).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 727583" />
<Node Id="21010:[6199..6288).1" Label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727584" />
<Node Id="21010:[6176..6288).1" Label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727585" />
<Node Id="21010:[6397..6448).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 727586" />
<Node Id="21010:[6365..6449).1" Label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727587" />
<Node Id="21010:[6347..6449).1" Label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 727588" />
<Node Id="21010:[6560..6586).1" Label="DebugInformationFormat.Pdb 727589" />
<Node Id="21010:[6513..6587).1" Label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 727590" />
<Node Id="21010:[6497..6587).1" Label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 727591" />
<Node Id="21003:[34259..34289).1" Label="options = TestOptions.Regular; 727592" />
<Node Id="21003:[34320..34386).1" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 727593" />
<Node Id="21003:[34320..34386).2" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 727594" />
<Node Id="21003:[34320..34386).3" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 727595" />
<Node Id="21003:[34320..34386).5" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 727596" />
<Node Id="21003:[34320..34386).7" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 727597" />
<Node Id="21003:[34400..34487).1" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 727598" />
<Node Id="21003:[34400..34487).2" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 727599" />
<Node Id="21003:[34400..34487).3" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 727600" />
<Node Id="21003:[34400..34487).4" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 727601" />
<Node Id="21003:[34400..34487).6" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 727602" />
<Node Id="21003:[34407..34486).1" Label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 727603" />
<Node Id="21003:[34554..34569).1" Label="param CheckSerializable(SyntaxTree tree) 727604" />
<Node Id="21003:[34595..34627).1" Label="var stream = new MemoryStream(); 727605" />
<Node Id="21003:[34641..34667).1" Label="var root = tree.GetRoot(); 727606" />
<Node Id="21003:[34641..34667).3" Label="var root = tree.GetRoot(); 727607" />
<Node Id="21003:[34681..34706).1" Label="root.SerializeTo(stream); 727608" />
<Node Id="21003:[34681..34706).2" Label="root.SerializeTo(stream); 727609" />
<Node Id="21003:[34681..34706).4" Label="root.SerializeTo(stream); 727610" />
<Node Id="21003:[34720..34740).1" Label="stream.Position = 0; 727611" />
<Node Id="21003:[34720..34735).1" Label="stream.Position 727612" />
<Node Id="21003:[34754..34818).1" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 727613" />
<Node Id="21003:[34754..34818).2" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 727614" />
<Node Id="21003:[34754..34818).4" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 727615" />
<Node Id="21003:[34832..34844).1" Label="return tree; 727616" />
<Node Id="21004:[1129..1207).1" Label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 727617" />
<Node Id="21003:[46280..46350).3" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 727618" />
<Node Id="21003:[46366..46650).1" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 727619" />
<Node Id="21003:[46366..46650).2" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 727620" />
<Node Id="21003:[46419..46533).1" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 727621" />
<Node Id="21003:[46419..46533).2" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 727622" />
<Node Id="21003:[46419..46533).4" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 727623" />
<Node Id="21003:[46563..46584).1" Label="hasTopLevelStatements 727624" />
<Node Id="21003:[46553..46635).1" Label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 727625" />
<Node Id="21003:[46755..46872).1" Label="if (Debugger.IsAttached)
            {
                options = options.WithConcurrentBuild(false);
            } 727626" />
<Node Id="21003:[46888..47066).1" Label="if (experimentalFeature.HasValue)
            {
                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);
            } 727627" />
<Node Id="21003:[47082..47319).1" Label="Func$CSharpCompilation$ createCompilationLambda = () =$ CSharpCompilation.Create(
                assemblyName == '' ? GetUniqueName() : assemblyName,
                syntaxTrees,
                references,
                options); 727628" />
<Node Id="21003:[47333..47400).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 727629" />
<Node Id="21003:[47333..47399).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 727630" />
<Node Id="25006:[11552..11587).1" Label="param ValidateIOperations(Func$Compilation$ createCompilation) 727631" />
<Node Id="25006:[11613..11696).1" Label="if (!EnableVerifyIOperation)
            {
                return;
            } 727632" />
<Node Id="25006:[11674..11681).1" Label="return; 727633" />
<Node Id="21003:[47333..47400).2" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 727634" />
<Node Id="21003:[47414..47458).1" Label="var compilation = createCompilationLambda(); 727635" />
<Node Id="21003:[47414..47458).2" Label="var compilation = createCompilationLambda(); 727636" />
<Node Id="25004:[1041..1077).1" Label="return Guid.NewGuid().ToString('D'); 727637" />
<Node Id="21003:[47414..47458).4" Label="var compilation = createCompilationLambda(); 727638" />
<Node Id="21003:[47689..47930).1" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 727639" />
<Node Id="21003:[47717..47747).1" Label="IsNullableEnabled(compilation) 727640" />
<Node Id="21003:[48025..48054).1" Label="param IsNullableEnabled(CSharpCompilation compilation) 727641" />
<Node Id="21003:[48175..48211).1" Label="var trees = compilation.SyntaxTrees; 727642" />
<Node Id="21003:[48225..48313).1" Label="if (trees.IsDefaultOrEmpty)
            {
                return false;
            } 727643" />
<Node Id="21003:[48327..48378).1" Label="var options = (CSharpParseOptions)trees[0].Options; 727644" />
<Node Id="21003:[48327..48378).2" Label="var options = (CSharpParseOptions)trees[0].Options; 727645" />
<Node Id="21003:[48392..48469).1" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 727646" />
<Node Id="21003:[48392..48469).2" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 727647" />
<Node Id="21003:[47689..47930).3" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 727648" />
<Node Id="21003:[47944..47963).1" Label="return compilation; 727649" />
<Node Id="28001:[40426..41068).1" Label="testAssembly.VerifyDiagnostics(
                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'
                //     : IInterfaceBase, 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),
                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'
                //      IInterfaceBase2 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727650" />
<Node Id="28001:[40426..41068).2" Label="testAssembly.VerifyDiagnostics(
                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'
                //     : IInterfaceBase, 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),
                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'
                //      IInterfaceBase2 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727651" />
<Node Id="28001:[40426..41068).3" Label="testAssembly.VerifyDiagnostics(
                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'
                //     : IInterfaceBase, 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),
                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'
                //      IInterfaceBase2 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727652" />
<Node Id="28001:[40624..40696).1" Label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase') 727653" />
<Node Id="25004:[19277..19288).1" Label="param Diagnostic(object code) 727654" />
<Node Id="25004:[19303..19330).1" Label="param Diagnostic(string squiggledText = null) 727655" />
<Node Id="25004:[19345..19370).1" Label="param Diagnostic(object[] arguments = null) 727656" />
<Node Id="25004:[19385..19419).1" Label="param Diagnostic(LinePosition? startLocation = null) 727657" />
<Node Id="25004:[19434..19483).1" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 727658" />
<Node Id="25004:[19498..19537).1" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 727659" />
<Node Id="25004:[19552..19577).1" Label="param Diagnostic(bool isSuppressed = false) 727660" />
<Node Id="25004:[19603..19877).1" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727661" />
<Node Id="25004:[19603..19877).2" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727662" />
<Node Id="25004:[19603..19877).3" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727663" />
<Node Id="25004:[19603..19877).4" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727664" />
<Node Id="25004:[19603..19877).5" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727665" />
<Node Id="25004:[19603..19877).6" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727666" />
<Node Id="25004:[19603..19877).7" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727667" />
<Node Id="25004:[19610..19876).1" Label="TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed) 727668" />
<Node Id="25007:[3334..3345).1" Label="param Diagnostic(object code) 727669" />
<Node Id="25007:[3360..3387).1" Label="param Diagnostic(string squiggledText = null) 727670" />
<Node Id="25007:[3402..3427).1" Label="param Diagnostic(object[] arguments = null) 727671" />
<Node Id="25007:[3442..3476).1" Label="param Diagnostic(LinePosition? startLocation = null) 727672" />
<Node Id="25007:[3491..3540).1" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 727673" />
<Node Id="25007:[3555..3594).1" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 727674" />
<Node Id="25007:[3609..3634).1" Label="param Diagnostic(bool isSuppressed = false) 727675" />
<Node Id="25007:[3660..3885).1" Label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||
                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||
                         code is int ||
                         code is string); 727676" />
<Node Id="25007:[3901..4266).1" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727677" />
<Node Id="25007:[3901..4266).4" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727678" />
<Node Id="25007:[3901..4266).6" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727679" />
<Node Id="25007:[3901..4266).7" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727680" />
<Node Id="25007:[3901..4266).8" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727681" />
<Node Id="25007:[3901..4266).9" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727682" />
<Node Id="25007:[3901..4266).10" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727683" />
<Node Id="25003:[747..750).1" Label="{ } 727684" />
<Node Id="25003:[740..750).1" Label="None = { } 727685" />
<Node Id="25003:[814..818).1" Label="null 727686" />
<Node Id="25003:[808..818).1" Label="Any = null 727687" />
<Node Id="25007:[3901..4266).13" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727688" />
<Node Id="25007:[3908..4265).1" Label="new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed) 727689" />
<Node Id="25003:[2816..2827).1" Label="param DiagnosticDescription(object code) 727690" />
<Node Id="25003:[2842..2863).1" Label="param DiagnosticDescription(bool isWarningAsError) 727691" />
<Node Id="25003:[2878..2898).1" Label="param DiagnosticDescription(string squiggledText) 727692" />
<Node Id="25003:[2913..2931).1" Label="param DiagnosticDescription(object[] arguments) 727693" />
<Node Id="25003:[2946..2973).1" Label="param DiagnosticDescription(LinePosition? startLocation) 727694" />
<Node Id="25003:[2988..3030).1" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 727695" />
<Node Id="25003:[3045..3076).1" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 727696" />
<Node Id="25003:[3091..3116).1" Label="param DiagnosticDescription(Type errorCodeType = null) 727697" />
<Node Id="25003:[3131..3176).1" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 727698" />
<Node Id="25003:[3191..3238).1" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 727699" />
<Node Id="25003:[3253..3278).1" Label="param DiagnosticDescription(bool isSuppressed = false) 727700" />
<Node Id="25003:[2773..3850).1" Label="param DiagnosticDescription(this) 727701" />
<Node Id="25003:[912..917).1" Label="_code 727702" />
<Node Id="25003:[950..967).1" Label="_isWarningAsError 727703" />
<Node Id="25003:[1000..1013).1" Label="_isSuppressed 727704" />
<Node Id="25003:[1048..1062).1" Label="_squiggledText 727705" />
<Node Id="25003:[1099..1109).1" Label="_arguments 727706" />
<Node Id="25003:[1151..1165).1" Label="_startPosition 727707" />
<Node Id="25003:[1276..1303).1" Label="_argumentOrderDoesNotMatter 727708" />
<Node Id="25003:[1336..1350).1" Label="_errorCodeType 727709" />
<Node Id="25003:[1383..1412).1" Label="_ignoreArgumentsWhenComparing 727710" />
<Node Id="25003:[1460..1479).1" Label="_defaultSeverityOpt 727711" />
<Node Id="25003:[1527..1548).1" Label="_effectiveSeverityOpt 727712" />
<Node Id="25003:[1673..1689).1" Label="_syntaxPredicate 727713" />
<Node Id="25003:[1713..1727).1" Label="_showPredicate 727714" />
<Node Id="25003:[1891..1900).1" Label="_location 727715" />
<Node Id="25003:[1941..1960).1" Label="_argumentsAsStrings 727716" />
<Node Id="25003:[3304..3309).1" Label="_code 727717" />
<Node Id="25003:[3331..3348).1" Label="_isWarningAsError 727718" />
<Node Id="25003:[3382..3396).1" Label="_squiggledText 727719" />
<Node Id="25003:[3427..3437).1" Label="_arguments 727720" />
<Node Id="25003:[3464..3478).1" Label="_startPosition 727721" />
<Node Id="25003:[3509..3525).1" Label="_syntaxPredicate 727722" />
<Node Id="25003:[3562..3589).1" Label="_argumentOrderDoesNotMatter 727723" />
<Node Id="25003:[3633..3682).1" Label="_errorCodeType = errorCodeType ?? code.GetType(); 727724" />
<Node Id="25003:[3633..3647).1" Label="_errorCodeType 727725" />
<Node Id="25003:[3696..3715).1" Label="_defaultSeverityOpt 727726" />
<Node Id="25003:[3751..3772).1" Label="_effectiveSeverityOpt 727727" />
<Node Id="25003:[3810..3823).1" Label="_isSuppressed 727728" />
<Node Id="25004:[19603..19877).8" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727729" />
<Node Id="28001:[40426..41068).16" Label="testAssembly.VerifyDiagnostics(
                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'
                //     : IInterfaceBase, 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),
                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'
                //      IInterfaceBase2 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727730" />
<Node Id="28001:[40624..40741).1" Label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()') 727731" />
<Node Id="28001:[40624..40741).3" Label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()') 727732" />
<Node Id="25003:[7407..7432).1" Label="param WithArguments(params object[] arguments) 727733" />
<Node Id="25003:[7364..7671).1" Label="param WithArguments(this) 727734" />
<Node Id="25003:[7458..7660).1" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727735" />
<Node Id="25003:[7458..7660).2" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727736" />
<Node Id="25003:[7458..7660).3" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727737" />
<Node Id="25003:[7458..7660).4" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727738" />
<Node Id="25003:[7458..7660).5" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727739" />
<Node Id="25003:[7458..7660).6" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727740" />
<Node Id="25003:[7458..7660).7" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727741" />
<Node Id="25003:[7458..7660).9" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727742" />
<Node Id="25003:[7458..7660).10" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727743" />
<Node Id="25003:[7458..7660).11" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727744" />
<Node Id="25003:[7458..7660).12" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727745" />
<Node Id="25003:[7465..7659).1" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 727746" />
<Node Id="25003:[2816..2827).2" Label="param DiagnosticDescription(object code) 727747" />
<Node Id="25003:[2842..2863).2" Label="param DiagnosticDescription(bool isWarningAsError) 727748" />
<Node Id="25003:[2878..2898).2" Label="param DiagnosticDescription(string squiggledText) 727749" />
<Node Id="25003:[2913..2931).2" Label="param DiagnosticDescription(object[] arguments) 727750" />
<Node Id="25003:[2946..2973).2" Label="param DiagnosticDescription(LinePosition? startLocation) 727751" />
<Node Id="25003:[2988..3030).2" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 727752" />
<Node Id="25003:[3045..3076).2" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 727753" />
<Node Id="25003:[3091..3116).2" Label="param DiagnosticDescription(Type errorCodeType = null) 727754" />
<Node Id="25003:[3131..3176).2" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 727755" />
<Node Id="25003:[3191..3238).2" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 727756" />
<Node Id="25003:[3253..3278).2" Label="param DiagnosticDescription(bool isSuppressed = false) 727757" />
<Node Id="25003:[2773..3850).2" Label="param DiagnosticDescription(this) 727758" />
<Node Id="25003:[912..917).2" Label="_code 727759" />
<Node Id="25003:[950..967).2" Label="_isWarningAsError 727760" />
<Node Id="25003:[1000..1013).2" Label="_isSuppressed 727761" />
<Node Id="25003:[1048..1062).2" Label="_squiggledText 727762" />
<Node Id="25003:[1099..1109).2" Label="_arguments 727763" />
<Node Id="25003:[1151..1165).4" Label="_startPosition 727764" />
<Node Id="25003:[1276..1303).2" Label="_argumentOrderDoesNotMatter 727765" />
<Node Id="25003:[1336..1350).2" Label="_errorCodeType 727766" />
<Node Id="25003:[1383..1412).2" Label="_ignoreArgumentsWhenComparing 727767" />
<Node Id="25003:[1460..1479).2" Label="_defaultSeverityOpt 727768" />
<Node Id="25003:[1527..1548).2" Label="_effectiveSeverityOpt 727769" />
<Node Id="25003:[1673..1689).2" Label="_syntaxPredicate 727770" />
<Node Id="25003:[1713..1727).2" Label="_showPredicate 727771" />
<Node Id="25003:[1891..1900).2" Label="_location 727772" />
<Node Id="25003:[1941..1960).2" Label="_argumentsAsStrings 727773" />
<Node Id="25003:[3427..3437).2" Label="_arguments 727774" />
<Node Id="25003:[3562..3589).2" Label="_argumentOrderDoesNotMatter 727775" />
<Node Id="28001:[40426..41068).23" Label="testAssembly.VerifyDiagnostics(
                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'
                //     : IInterfaceBase, 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),
                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'
                //      IInterfaceBase2 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727776" />
<Node Id="28001:[40624..40760).1" Label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7) 727777" />
<Node Id="25003:[9181..9189).1" Label="param WithLocation(int line) 727778" />
<Node Id="25003:[9191..9201).1" Label="param WithLocation(int column) 727779" />
<Node Id="25003:[9139..9487).1" Label="param WithLocation(this) 727780" />
<Node Id="25003:[9227..9476).1" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727781" />
<Node Id="25003:[9227..9476).2" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727782" />
<Node Id="25003:[9227..9476).3" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727783" />
<Node Id="25003:[9227..9476).4" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727784" />
<Node Id="25003:[9227..9476).5" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727785" />
<Node Id="25003:[9227..9476).6" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727786" />
<Node Id="25003:[9227..9476).9" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727787" />
<Node Id="25003:[9227..9476).11" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727788" />
<Node Id="25003:[9227..9476).13" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727789" />
<Node Id="25003:[9227..9476).14" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727790" />
<Node Id="25003:[9227..9476).15" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727791" />
<Node Id="25003:[9227..9476).16" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727792" />
<Node Id="25003:[9227..9476).17" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727793" />
<Node Id="25003:[9227..9476).18" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727794" />
<Node Id="25003:[9234..9475).1" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 727795" />
<Node Id="25003:[2816..2827).3" Label="param DiagnosticDescription(object code) 727796" />
<Node Id="25003:[2842..2863).3" Label="param DiagnosticDescription(bool isWarningAsError) 727797" />
<Node Id="25003:[2878..2898).3" Label="param DiagnosticDescription(string squiggledText) 727798" />
<Node Id="25003:[2913..2931).3" Label="param DiagnosticDescription(object[] arguments) 727799" />
<Node Id="25003:[2946..2973).3" Label="param DiagnosticDescription(LinePosition? startLocation) 727800" />
<Node Id="25003:[2988..3030).3" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 727801" />
<Node Id="25003:[3045..3076).3" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 727802" />
<Node Id="25003:[3091..3116).3" Label="param DiagnosticDescription(Type errorCodeType = null) 727803" />
<Node Id="25003:[3131..3176).3" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 727804" />
<Node Id="25003:[3191..3238).3" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 727805" />
<Node Id="25003:[3253..3278).3" Label="param DiagnosticDescription(bool isSuppressed = false) 727806" />
<Node Id="25003:[2773..3850).3" Label="param DiagnosticDescription(this) 727807" />
<Node Id="25003:[912..917).3" Label="_code 727808" />
<Node Id="25003:[950..967).3" Label="_isWarningAsError 727809" />
<Node Id="25003:[1000..1013).3" Label="_isSuppressed 727810" />
<Node Id="25003:[1048..1062).3" Label="_squiggledText 727811" />
<Node Id="25003:[1099..1109).3" Label="_arguments 727812" />
<Node Id="25003:[1151..1165).7" Label="_startPosition 727813" />
<Node Id="25003:[1276..1303).3" Label="_argumentOrderDoesNotMatter 727814" />
<Node Id="25003:[1336..1350).3" Label="_errorCodeType 727815" />
<Node Id="25003:[1383..1412).3" Label="_ignoreArgumentsWhenComparing 727816" />
<Node Id="25003:[1460..1479).3" Label="_defaultSeverityOpt 727817" />
<Node Id="25003:[1527..1548).3" Label="_effectiveSeverityOpt 727818" />
<Node Id="25003:[1673..1689).3" Label="_syntaxPredicate 727819" />
<Node Id="25003:[1713..1727).3" Label="_showPredicate 727820" />
<Node Id="25003:[1891..1900).3" Label="_location 727821" />
<Node Id="25003:[1941..1960).3" Label="_argumentsAsStrings 727822" />
<Node Id="25003:[3464..3478).3" Label="_startPosition 727823" />
<Node Id="28001:[40426..41068).28" Label="testAssembly.VerifyDiagnostics(
                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'
                //     : IInterfaceBase, 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),
                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'
                //      IInterfaceBase2 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727824" />
<Node Id="28001:[40928..41001).1" Label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2') 727825" />
<Node Id="25004:[19277..19288).2" Label="param Diagnostic(object code) 727826" />
<Node Id="25004:[19303..19330).2" Label="param Diagnostic(string squiggledText = null) 727827" />
<Node Id="25004:[19345..19370).2" Label="param Diagnostic(object[] arguments = null) 727828" />
<Node Id="25004:[19385..19419).2" Label="param Diagnostic(LinePosition? startLocation = null) 727829" />
<Node Id="25004:[19434..19483).2" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 727830" />
<Node Id="25004:[19498..19537).2" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 727831" />
<Node Id="25004:[19552..19577).2" Label="param Diagnostic(bool isSuppressed = false) 727832" />
<Node Id="25004:[19603..19877).10" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727833" />
<Node Id="25004:[19603..19877).11" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727834" />
<Node Id="25004:[19603..19877).12" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727835" />
<Node Id="25004:[19603..19877).13" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727836" />
<Node Id="25004:[19603..19877).14" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727837" />
<Node Id="25004:[19603..19877).15" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727838" />
<Node Id="25004:[19603..19877).16" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727839" />
<Node Id="25004:[19610..19876).2" Label="TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed) 727840" />
<Node Id="25007:[3334..3345).2" Label="param Diagnostic(object code) 727841" />
<Node Id="25007:[3360..3387).2" Label="param Diagnostic(string squiggledText = null) 727842" />
<Node Id="25007:[3402..3427).2" Label="param Diagnostic(object[] arguments = null) 727843" />
<Node Id="25007:[3442..3476).2" Label="param Diagnostic(LinePosition? startLocation = null) 727844" />
<Node Id="25007:[3491..3540).2" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 727845" />
<Node Id="25007:[3555..3594).2" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 727846" />
<Node Id="25007:[3609..3634).2" Label="param Diagnostic(bool isSuppressed = false) 727847" />
<Node Id="25007:[3660..3885).6" Label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||
                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||
                         code is int ||
                         code is string); 727848" />
<Node Id="25007:[3901..4266).20" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727849" />
<Node Id="25007:[3901..4266).23" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727850" />
<Node Id="25007:[3901..4266).25" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727851" />
<Node Id="25007:[3901..4266).26" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727852" />
<Node Id="25007:[3901..4266).27" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727853" />
<Node Id="25007:[3901..4266).28" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727854" />
<Node Id="25007:[3901..4266).29" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727855" />
<Node Id="25007:[3901..4266).32" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 727856" />
<Node Id="25007:[3908..4265).2" Label="new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed) 727857" />
<Node Id="25003:[2816..2827).4" Label="param DiagnosticDescription(object code) 727858" />
<Node Id="25003:[2842..2863).4" Label="param DiagnosticDescription(bool isWarningAsError) 727859" />
<Node Id="25003:[2878..2898).4" Label="param DiagnosticDescription(string squiggledText) 727860" />
<Node Id="25003:[2913..2931).4" Label="param DiagnosticDescription(object[] arguments) 727861" />
<Node Id="25003:[2946..2973).4" Label="param DiagnosticDescription(LinePosition? startLocation) 727862" />
<Node Id="25003:[2988..3030).4" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 727863" />
<Node Id="25003:[3045..3076).4" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 727864" />
<Node Id="25003:[3091..3116).4" Label="param DiagnosticDescription(Type errorCodeType = null) 727865" />
<Node Id="25003:[3131..3176).4" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 727866" />
<Node Id="25003:[3191..3238).4" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 727867" />
<Node Id="25003:[3253..3278).4" Label="param DiagnosticDescription(bool isSuppressed = false) 727868" />
<Node Id="25003:[2773..3850).4" Label="param DiagnosticDescription(this) 727869" />
<Node Id="25003:[912..917).4" Label="_code 727870" />
<Node Id="25003:[950..967).4" Label="_isWarningAsError 727871" />
<Node Id="25003:[1000..1013).4" Label="_isSuppressed 727872" />
<Node Id="25003:[1048..1062).4" Label="_squiggledText 727873" />
<Node Id="25003:[1099..1109).4" Label="_arguments 727874" />
<Node Id="25003:[1151..1165).10" Label="_startPosition 727875" />
<Node Id="25003:[1276..1303).4" Label="_argumentOrderDoesNotMatter 727876" />
<Node Id="25003:[1336..1350).4" Label="_errorCodeType 727877" />
<Node Id="25003:[1383..1412).4" Label="_ignoreArgumentsWhenComparing 727878" />
<Node Id="25003:[1460..1479).4" Label="_defaultSeverityOpt 727879" />
<Node Id="25003:[1527..1548).4" Label="_effectiveSeverityOpt 727880" />
<Node Id="25003:[1673..1689).4" Label="_syntaxPredicate 727881" />
<Node Id="25003:[1713..1727).4" Label="_showPredicate 727882" />
<Node Id="25003:[1891..1900).4" Label="_location 727883" />
<Node Id="25003:[1941..1960).4" Label="_argumentsAsStrings 727884" />
<Node Id="25003:[3304..3309).4" Label="_code 727885" />
<Node Id="25003:[3331..3348).4" Label="_isWarningAsError 727886" />
<Node Id="25003:[3382..3396).4" Label="_squiggledText 727887" />
<Node Id="25003:[3427..3437).4" Label="_arguments 727888" />
<Node Id="25003:[3464..3478).4" Label="_startPosition 727889" />
<Node Id="25003:[3509..3525).4" Label="_syntaxPredicate 727890" />
<Node Id="25003:[3562..3589).4" Label="_argumentOrderDoesNotMatter 727891" />
<Node Id="25003:[3633..3682).4" Label="_errorCodeType = errorCodeType ?? code.GetType(); 727892" />
<Node Id="25003:[3633..3647).4" Label="_errorCodeType 727893" />
<Node Id="25003:[3696..3715).4" Label="_defaultSeverityOpt 727894" />
<Node Id="25003:[3751..3772).4" Label="_effectiveSeverityOpt 727895" />
<Node Id="25003:[3810..3823).4" Label="_isSuppressed 727896" />
<Node Id="25004:[19603..19877).17" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 727897" />
<Node Id="28001:[40426..41068).42" Label="testAssembly.VerifyDiagnostics(
                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'
                //     : IInterfaceBase, 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),
                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'
                //      IInterfaceBase2 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727898" />
<Node Id="28001:[40928..41047).1" Label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()') 727899" />
<Node Id="28001:[40928..41047).3" Label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()') 727900" />
<Node Id="25003:[7407..7432).2" Label="param WithArguments(params object[] arguments) 727901" />
<Node Id="25003:[7364..7671).2" Label="param WithArguments(this) 727902" />
<Node Id="25003:[7458..7660).15" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727903" />
<Node Id="25003:[7458..7660).16" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727904" />
<Node Id="25003:[7458..7660).17" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727905" />
<Node Id="25003:[7458..7660).18" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727906" />
<Node Id="25003:[7458..7660).19" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727907" />
<Node Id="25003:[7458..7660).20" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727908" />
<Node Id="25003:[7458..7660).21" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727909" />
<Node Id="25003:[7458..7660).23" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727910" />
<Node Id="25003:[7458..7660).24" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727911" />
<Node Id="25003:[7458..7660).25" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727912" />
<Node Id="25003:[7458..7660).26" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727913" />
<Node Id="25003:[7465..7659).2" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 727914" />
<Node Id="25003:[2816..2827).5" Label="param DiagnosticDescription(object code) 727915" />
<Node Id="25003:[2842..2863).5" Label="param DiagnosticDescription(bool isWarningAsError) 727916" />
<Node Id="25003:[2878..2898).5" Label="param DiagnosticDescription(string squiggledText) 727917" />
<Node Id="25003:[2913..2931).5" Label="param DiagnosticDescription(object[] arguments) 727918" />
<Node Id="25003:[2946..2973).5" Label="param DiagnosticDescription(LinePosition? startLocation) 727919" />
<Node Id="25003:[2988..3030).5" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 727920" />
<Node Id="25003:[3045..3076).5" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 727921" />
<Node Id="25003:[3091..3116).5" Label="param DiagnosticDescription(Type errorCodeType = null) 727922" />
<Node Id="25003:[3131..3176).5" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 727923" />
<Node Id="25003:[3191..3238).5" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 727924" />
<Node Id="25003:[3253..3278).5" Label="param DiagnosticDescription(bool isSuppressed = false) 727925" />
<Node Id="25003:[2773..3850).5" Label="param DiagnosticDescription(this) 727926" />
<Node Id="25003:[912..917).5" Label="_code 727927" />
<Node Id="25003:[950..967).5" Label="_isWarningAsError 727928" />
<Node Id="25003:[1000..1013).5" Label="_isSuppressed 727929" />
<Node Id="25003:[1048..1062).5" Label="_squiggledText 727930" />
<Node Id="25003:[1099..1109).5" Label="_arguments 727931" />
<Node Id="25003:[1151..1165).13" Label="_startPosition 727932" />
<Node Id="25003:[1276..1303).5" Label="_argumentOrderDoesNotMatter 727933" />
<Node Id="25003:[1336..1350).5" Label="_errorCodeType 727934" />
<Node Id="25003:[1383..1412).5" Label="_ignoreArgumentsWhenComparing 727935" />
<Node Id="25003:[1460..1479).5" Label="_defaultSeverityOpt 727936" />
<Node Id="25003:[1527..1548).5" Label="_effectiveSeverityOpt 727937" />
<Node Id="25003:[1673..1689).5" Label="_syntaxPredicate 727938" />
<Node Id="25003:[1713..1727).5" Label="_showPredicate 727939" />
<Node Id="25003:[1891..1900).5" Label="_location 727940" />
<Node Id="25003:[1941..1960).5" Label="_argumentsAsStrings 727941" />
<Node Id="25003:[3427..3437).5" Label="_arguments 727942" />
<Node Id="25003:[3562..3589).5" Label="_argumentOrderDoesNotMatter 727943" />
<Node Id="28001:[40426..41068).49" Label="testAssembly.VerifyDiagnostics(
                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'
                //     : IInterfaceBase, 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),
                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'
                //      IInterfaceBase2 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727944" />
<Node Id="28001:[40928..41066).1" Label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6) 727945" />
<Node Id="25003:[9181..9189).2" Label="param WithLocation(int line) 727946" />
<Node Id="25003:[9191..9201).2" Label="param WithLocation(int column) 727947" />
<Node Id="25003:[9139..9487).2" Label="param WithLocation(this) 727948" />
<Node Id="25003:[9227..9476).21" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727949" />
<Node Id="25003:[9227..9476).22" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727950" />
<Node Id="25003:[9227..9476).23" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727951" />
<Node Id="25003:[9227..9476).24" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727952" />
<Node Id="25003:[9227..9476).25" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727953" />
<Node Id="25003:[9227..9476).26" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727954" />
<Node Id="25003:[9227..9476).29" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727955" />
<Node Id="25003:[9227..9476).31" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727956" />
<Node Id="25003:[9227..9476).33" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727957" />
<Node Id="25003:[9227..9476).34" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727958" />
<Node Id="25003:[9227..9476).35" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727959" />
<Node Id="25003:[9227..9476).36" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727960" />
<Node Id="25003:[9227..9476).37" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727961" />
<Node Id="25003:[9227..9476).38" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 727962" />
<Node Id="25003:[9234..9475).2" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 727963" />
<Node Id="25003:[2816..2827).6" Label="param DiagnosticDescription(object code) 727964" />
<Node Id="25003:[2842..2863).6" Label="param DiagnosticDescription(bool isWarningAsError) 727965" />
<Node Id="25003:[2878..2898).6" Label="param DiagnosticDescription(string squiggledText) 727966" />
<Node Id="25003:[2913..2931).6" Label="param DiagnosticDescription(object[] arguments) 727967" />
<Node Id="25003:[2946..2973).6" Label="param DiagnosticDescription(LinePosition? startLocation) 727968" />
<Node Id="25003:[2988..3030).6" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 727969" />
<Node Id="25003:[3045..3076).6" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 727970" />
<Node Id="25003:[3091..3116).6" Label="param DiagnosticDescription(Type errorCodeType = null) 727971" />
<Node Id="25003:[3131..3176).6" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 727972" />
<Node Id="25003:[3191..3238).6" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 727973" />
<Node Id="25003:[3253..3278).6" Label="param DiagnosticDescription(bool isSuppressed = false) 727974" />
<Node Id="25003:[2773..3850).6" Label="param DiagnosticDescription(this) 727975" />
<Node Id="25003:[912..917).6" Label="_code 727976" />
<Node Id="25003:[950..967).6" Label="_isWarningAsError 727977" />
<Node Id="25003:[1000..1013).6" Label="_isSuppressed 727978" />
<Node Id="25003:[1048..1062).6" Label="_squiggledText 727979" />
<Node Id="25003:[1099..1109).6" Label="_arguments 727980" />
<Node Id="25003:[1151..1165).16" Label="_startPosition 727981" />
<Node Id="25003:[1276..1303).6" Label="_argumentOrderDoesNotMatter 727982" />
<Node Id="25003:[1336..1350).6" Label="_errorCodeType 727983" />
<Node Id="25003:[1383..1412).6" Label="_ignoreArgumentsWhenComparing 727984" />
<Node Id="25003:[1460..1479).6" Label="_defaultSeverityOpt 727985" />
<Node Id="25003:[1527..1548).6" Label="_effectiveSeverityOpt 727986" />
<Node Id="25003:[1673..1689).6" Label="_syntaxPredicate 727987" />
<Node Id="25003:[1713..1727).6" Label="_showPredicate 727988" />
<Node Id="25003:[1891..1900).6" Label="_location 727989" />
<Node Id="25003:[1941..1960).6" Label="_argumentsAsStrings 727990" />
<Node Id="25003:[3464..3478).6" Label="_startPosition 727991" />
<Node Id="28001:[40426..41068).54" Label="testAssembly.VerifyDiagnostics(
                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'
                //     : IInterfaceBase, 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),
                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'
                //      IInterfaceBase2 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)); 727992" />
<Node Id="28001:[40426..41067).1" Label="testAssembly.VerifyDiagnostics(
                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'
                //     : IInterfaceBase, 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),
                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'
                //      IInterfaceBase2 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)) 727993" />
<Node Id="28001:[40426..41067).2" Label="testAssembly.VerifyDiagnostics(
                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'
                //     : IInterfaceBase, 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),
                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'
                //      IInterfaceBase2 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)) 727994" />
<Node Id="28001:[40426..41067).3" Label="testAssembly.VerifyDiagnostics(
                // (3,7): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyz()'
                //     : IInterfaceBase, 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase').WithArguments('ITT', 'IInterfaceBase.xyz()').WithLocation(3, 7),
                // (4,6): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase2.xyz()'
                //      IInterfaceBase2 
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IInterfaceBase2').WithArguments('ITT', 'IInterfaceBase2.xyz()').WithLocation(4, 6)) 727995" />
<Node Id="25002:[4263..4282).1" Label="param VerifyDiagnostics(this TCompilation c) 727996" />
<Node Id="25002:[4284..4323).1" Label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 727997" />
<Node Id="25002:[4395..4432).1" Label="var diagnostics = c.GetDiagnostics(); 727998" />
<Node Id="10345:[956..960).1" Label="null 727999" />
<Node Id="10345:[975..1032).1" Label="ImmutableDictionary$string, AliasAndUsingDirective$.Empty 728000" />
<Node Id="10345:[1047..1101).1" Label="ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty 728001" />
<Node Id="10345:[1116..1166).1" Label="ImmutableArray$AliasAndExternAliasDirective$.Empty 728002" />
<Node Id="10345:[1181..1185).1" Label="null 728003" />
<Node Id="10345:[930..1186).1" Label="new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 728004" />
<Node Id="10345:[1753..1782).1" Label="param Imports(CSharpCompilation compilation) 728005" />
<Node Id="10345:[1797..1861).1" Label="param Imports(ImmutableDictionary$string, AliasAndUsingDirective$ usingAliases) 728006" />
<Node Id="10345:[1876..1931).1" Label="param Imports(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 728007" />
<Node Id="10345:[1946..1998).1" Label="param Imports(ImmutableArray$AliasAndExternAliasDirective$ externs) 728008" />
<Node Id="10345:[2013..2038).1" Label="param Imports(DiagnosticBag diagnostics) 728009" />
<Node Id="10345:[1723..2412).1" Label="param Imports(this) 728010" />
<Node Id="10345:[1234..1246).1" Label="_compilation 728011" />
<Node Id="10345:[1288..1300).1" Label="_diagnostics 728012" />
<Node Id="10345:[1531..1543).1" Label="UsingAliases 728013" />
<Node Id="10345:[2064..2099).1" Label="Debug.Assert(usingAliases != null); 728014" />
<Node Id="10345:[2064..2099).2" Label="Debug.Assert(usingAliases != null); 728015" />
<Node Id="10345:[2113..2145).1" Label="Debug.Assert(!usings.IsDefault); 728016" />
<Node Id="10345:[2159..2192).1" Label="Debug.Assert(!externs.IsDefault); 728017" />
<Node Id="10345:[2208..2220).1" Label="_compilation 728018" />
<Node Id="10345:[2249..2266).1" Label="this.UsingAliases 728019" />
<Node Id="10345:[2296..2307).1" Label="this.Usings 728020" />
<Node Id="10345:[2331..2343).1" Label="_diagnostics 728021" />
<Node Id="10345:[2372..2390).1" Label="this.ExternAliases 728022" />
<Node Id="10345:[922..1186).1" Label="Empty = new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 728023" />
<Node Id="25002:[4395..4432).3" Label="var diagnostics = c.GetDiagnostics(); 728024" />
<Node Id="10345:[13089..13118).1" Label="param FromGlobalUsings(CSharpCompilation compilation) 728025" />
<Node Id="10345:[13144..13184).1" Label="var usings = compilation.Options.Usings; 728026" />
<Node Id="10345:[13200..13326).1" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 728027" />
<Node Id="10345:[13200..13326).2" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 728028" />
<Node Id="10345:[13200..13326).4" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 728029" />
<Node Id="10345:[13298..13311).1" Label="return Empty; 728030" />
<Node Id="25002:[4395..4432).6" Label="var diagnostics = c.GetDiagnostics(); 728031" />
<Node Id="10345:[24530..24565).1" Label="param Complete(CancellationToken cancellationToken) 728032" />
<Node Id="10345:[24507..26254).1" Label="param Complete(this) 728033" />
<Node Id="10345:[24591..26243).1" Label="while (true)
            {
                cancellationToken.ThrowIfCancellationRequested();
                var incompletePart = _state.NextIncompletePart;
                switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                }

                _state.SpinWaitComplete(incompletePart, cancellationToken);
            } 728034" />
<Node Id="10345:[24636..24685).1" Label="cancellationToken.ThrowIfCancellationRequested(); 728035" />
<Node Id="10345:[24703..24750).1" Label="var incompletePart = _state.NextIncompletePart; 728036" />
<Node Id="10345:[24768..26149).1" Label="switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                } 728037" />
<Node Id="10345:[26025..26098).1" Label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 728038" />
<Node Id="10345:[26169..26228).1" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 728039" />
<Node Id="10345:[26169..26228).2" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 728040" />
<Node Id="10345:[26169..26228).3" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 728041" />
<Node Id="10345:[24932..25204).1" Label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            } 728042" />
<Node Id="10345:[25064..25074).1" Label="Validate() 728043" />
<Node Id="10345:[26266..28173).1" Label="param Validate(this) 728044" />
<Node Id="10345:[26314..26387).1" Label="if (this == Empty)
            {
                return;
            } 728045" />
<Node Id="10345:[26365..26372).1" Label="return; 728046" />
<Node Id="10345:[25064..25075).1" Label="Validate(); 728047" />
<Node Id="10345:[25109..25173).1" Label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 728048" />
<Node Id="10345:[25858..25865).1" Label="return; 728049" />
<Node Id="10298:[471..492).1" Label="param Includes(this BinderFlags self) 728050" />
<Node Id="10298:[494..511).1" Label="param Includes(BinderFlags other) 728051" />
<Node Id="10298:[537..568).1" Label="return (self & other) == other; 728052" />
<Node Id="25002:[4395..4432).10" Label="var diagnostics = c.GetDiagnostics(); 728053" />
<Node Id="10292:[1720..1721).1" Label="0 728054" />
<Node Id="10292:[1704..1721).1" Label="ExternalScope = 0 728055" />
<Node Id="10292:[1768..1769).1" Label="1 728056" />
<Node Id="10292:[1752..1769).1" Label="TopLevelScope = 1 728057" />
<Node Id="10292:[1992..1993).1" Label="2 728058" />
<Node Id="10292:[1963..1993).1" Label="ValueKindInsignificantBits = 2 728059" />
<Node Id="10292:[2032..2129).1" Label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 $$ ValueKindInsignificantBits) - 1)) 728060" />
<Node Id="10306:[388969..389344).1" Label="property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 728061" />
<Node Id="10306:[388923..389344).1" Label="s_isIndexedPropertyWithNonOptionalArguments = property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 728062" />
<Node Id="10306:[389480..389543).1" Label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 728063" />
<Node Id="10306:[389562..389646).1" Label="memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType 728064" />
<Node Id="10306:[389708..389839).1" Label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 728065" />
<Node Id="10306:[389665..389839).1" Label="miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 728066" />
<Node Id="10306:[389438..389840).1" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 728067" />
<Node Id="10306:[389438..389840).17" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 728068" />
<Node Id="10306:[389401..389840).1" Label="s_propertyGroupFormat =
            new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 728069" />
<Node Id="10310:[84494..84496).1" Label="10 728070" />
<Node Id="10310:[84458..84496).1" Label="MaxParameterListsForErrorRecovery = 10 728071" />
<Node Id="10316:[802..830).1" Label="'$$h__TransparentIdentifier' 728072" />
<Node Id="10316:[772..830).1" Label="transparentIdentifierPrefix = '$$h__TransparentIdentifier' 728073" />
<Node Id="10319:[69643..69663).1" Label="s =$ (MethodSymbol)s 728074" />
<Node Id="10319:[69620..69663).1" Label="s_toMethodSymbolFunc = s =$ (MethodSymbol)s 728075" />
<Node Id="10319:[69752..69774).1" Label="s =$ (PropertySymbol)s 728076" />
<Node Id="10319:[69727..69774).1" Label="s_toPropertySymbolFunc = s =$ (PropertySymbol)s 728077" />
<Node Id="10286:[30925..30954).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 728078" />
<Node Id="10286:[30969..31000).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 728079" />
<Node Id="10286:[31015..31040).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 728080" />
<Node Id="10286:[31055..31080).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 728081" />
<Node Id="10286:[31095..31126).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 728082" />
<Node Id="10286:[31152..31210).1" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 728083" />
<Node Id="10286:[31152..31210).2" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 728084" />
<Node Id="10286:[31152..31210).4" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 728085" />
<Node Id="10286:[31152..31210).5" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 728086" />
<Node Id="10286:[31515..31598).1" Label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 728087" />
<Node Id="10286:[31614..31710).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 728088" />
<Node Id="10286:[31614..31710).2" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 728089" />
<Node Id="10286:[31614..31710).3" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 728090" />
<Node Id="10286:[31614..31710).4" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 728091" />
<Node Id="10286:[31614..31710).5" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 728092" />
<Node Id="10286:[31614..31710).6" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 728093" />
<Node Id="10286:[31614..31709).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 728094" />
<Node Id="10319:[80080..80109).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 728095" />
<Node Id="10319:[80111..80133).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 728096" />
<Node Id="10319:[80135..80160).1" Label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 728097" />
<Node Id="10319:[80162..80186).1" Label="param GetWellKnownTypeMember(Location location = null) 728098" />
<Node Id="10319:[80188..80212).1" Label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 728099" />
<Node Id="10319:[80214..80237).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 728100" />
<Node Id="10319:[80263..80315).1" Label="Debug.Assert((syntax != null) ^ (location != null)); 728101" />
<Node Id="10319:[80263..80315).2" Label="Debug.Assert((syntax != null) ^ (location != null)); 728102" />
<Node Id="10319:[80263..80315).4" Label="Debug.Assert((syntax != null) ^ (location != null)); 728103" />
<Node Id="10319:[80263..80315).5" Label="Debug.Assert((syntax != null) ^ (location != null)); 728104" />
<Node Id="10319:[80331..80364).1" Label="DiagnosticInfo useSiteDiagnostic; 728105" />
<Node Id="10319:[80378..80479).1" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 728106" />
<Node Id="10319:[80378..80479).2" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 728107" />
<Node Id="10319:[80378..80479).3" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 728108" />
<Node Id="10319:[80378..80479).4" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 728109" />
<Node Id="10319:[80400..80478).1" Label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 728110" />
<Node Id="10319:[80843..80872).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 728111" />
<Node Id="10319:[80874..80896).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 728112" />
<Node Id="10319:[80898..80931).1" Label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 728113" />
<Node Id="10319:[80933..80956).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 728114" />
<Node Id="10319:[80982..81047).1" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 728115" />
<Node Id="10319:[80982..81047).2" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 728116" />
<Node Id="10319:[80982..81047).3" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 728117" />
<Node Id="10060:[2841..2854).1" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 728118" />
<Node Id="10060:[2856..2875).1" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 728119" />
<Node Id="10060:[2901..2932).1" Label="Debug.Assert(symbol is object); 728120" />
<Node Id="10060:[2948..3467).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 728121" />
<Node Id="10060:[3483..3502).1" Label="isInternal = false; 728122" />
<Node Id="10060:[3553..4223).1" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 728123" />
<Node Id="10060:[4243..4274).1" Label="symbol = symbol.ContainingType; 728124" />
<Node Id="10060:[3518..4328).1" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 728125" />
<Node Id="10060:[4344..4356).1" Label="return true; 728126" />
<Node Id="10319:[80982..81047).8" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 728127" />
<Node Id="10060:[2841..2854).2" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 728128" />
<Node Id="10060:[2856..2875).2" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 728129" />
<Node Id="10060:[2901..2932).3" Label="Debug.Assert(symbol is object); 728130" />
<Node Id="10060:[2948..3467).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 728131" />
<Node Id="10060:[3553..4223).2" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 728132" />
<Node Id="10060:[4243..4274).2" Label="symbol = symbol.ContainingType; 728133" />
<Node Id="10060:[3518..4328).2" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 728134" />
<Node Id="10060:[3553..4223).3" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 728135" />
<Node Id="10319:[80982..81047).15" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 728136" />
<Node Id="10319:[81063..82500).1" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 728137" />
<Node Id="10319:[81063..82500).2" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 728138" />
<Node Id="10319:[81129..81207).1" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 728139" />
<Node Id="10319:[81129..81207).2" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 728140" />
<Node Id="10060:[2841..2854).4" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 728141" />
<Node Id="10060:[2856..2875).4" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 728142" />
<Node Id="10060:[2901..2932).7" Label="Debug.Assert(symbol is object); 728143" />
<Node Id="10060:[2948..3467).4" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 728144" />
<Node Id="10060:[3483..3502).7" Label="isInternal = false; 728145" />
<Node Id="10060:[3553..4223).6" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 728146" />
<Node Id="10060:[4243..4274).6" Label="symbol = symbol.ContainingType; 728147" />
<Node Id="10060:[3518..4328).6" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 728148" />
<Node Id="10060:[2841..2854).5" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 728149" />
<Node Id="10060:[2856..2875).5" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 728150" />
<Node Id="10060:[2901..2932).9" Label="Debug.Assert(symbol is object); 728151" />
<Node Id="10060:[2948..3467).5" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 728152" />
<Node Id="10060:[3553..4223).7" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 728153" />
<Node Id="10060:[4243..4274).7" Label="symbol = symbol.ContainingType; 728154" />
<Node Id="10060:[3518..4328).7" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 728155" />
<Node Id="10319:[81225..82039).1" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 728156" />
<Node Id="10319:[81225..82039).2" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 728157" />
<Node Id="10319:[82516..82536).1" Label="return memberSymbol; 728158" />
<Node Id="10319:[80495..80738).1" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 728159" />
<Node Id="10319:[80495..80738).2" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 728160" />
<Node Id="10319:[80754..80774).1" Label="return memberSymbol; 728161" />
<Node Id="10060:[2841..2854).9" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 728162" />
<Node Id="10060:[2856..2875).9" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 728163" />
<Node Id="10060:[2901..2932).17" Label="Debug.Assert(symbol is object); 728164" />
<Node Id="10060:[2948..3467).9" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 728165" />
<Node Id="10060:[3553..4223).11" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 728166" />
<Node Id="10060:[4243..4274).11" Label="symbol = symbol.ContainingType; 728167" />
<Node Id="10060:[3518..4328).11" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 728168" />
<Node Id="10060:[2841..2854).10" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 728169" />
<Node Id="10060:[2856..2875).10" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 728170" />
<Node Id="10060:[2901..2932).19" Label="Debug.Assert(symbol is object); 728171" />
<Node Id="10060:[2948..3467).10" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 728172" />
<Node Id="10060:[3553..4223).12" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 728173" />
<Node Id="10060:[4243..4274).12" Label="symbol = symbol.ContainingType; 728174" />
<Node Id="10060:[3518..4328).12" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 728175" />
<Node Id="10319:[81225..82039).4" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 728176" />
<Node Id="10319:[81225..82039).5" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 728177" />
<Node Id="10319:[82516..82536).2" Label="return memberSymbol; 728178" />
<Node Id="10319:[80495..80738).5" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 728179" />
<Node Id="10319:[80754..80774).2" Label="return memberSymbol; 728180" />
<Node Id="10319:[81225..82039).7" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 728181" />
<Node Id="10319:[82516..82536).3" Label="return memberSymbol; 728182" />
<Node Id="10319:[80754..80774).3" Label="return memberSymbol; 728183" />
<Node Id="10076:[2308..2337).1" Label="param BinderFactory(CSharpCompilation compilation) 728184" />
<Node Id="10076:[2339..2360).1" Label="param BinderFactory(SyntaxTree syntaxTree) 728185" />
<Node Id="10076:[2362..2386).1" Label="param BinderFactory(bool ignoreAccessibility) 728186" />
<Node Id="10076:[2285..3386).1" Label="param BinderFactory(this) 728187" />
<Node Id="10076:[1715..1727).1" Label="_binderCache 728188" />
<Node Id="10076:[1773..1785).1" Label="_compilation 728189" />
<Node Id="10076:[1824..1835).1" Label="_syntaxTree 728190" />
<Node Id="10076:[1883..1903).1" Label="_buckStopsHereBinder 728191" />
<Node Id="10076:[1936..1956).1" Label="_ignoreAccessibility 728192" />
<Node Id="10076:[2247..2272).1" Label="_binderFactoryVisitorPool 728193" />
<Node Id="10076:[2412..2424).1" Label="_compilation 728194" />
<Node Id="10076:[2453..2464).1" Label="_syntaxTree 728195" />
<Node Id="10076:[2492..2512).1" Label="_ignoreAccessibility 728196" />
<Node Id="10076:[2551..2658).1" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 728197" />
<Node Id="10076:[2551..2658).3" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 728198" />
<Node Id="10076:[2551..2658).5" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 728199" />
<Node Id="10076:[2551..2576).1" Label="_binderFactoryVisitorPool 728200" />
<Node Id="10076:[3236..3299).1" Label="_binderCache = new ConcurrentCache$BinderCacheKey, Binder$(50); 728201" />
<Node Id="10076:[3236..3248).1" Label="_binderCache 728202" />
<Node Id="10076:[3315..3375).1" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 728203" />
<Node Id="10076:[3315..3375).2" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 728204" />
<Node Id="10076:[3338..3374).1" Label="new BuckStopsHereBinder(compilation) 728205" />
<Node Id="10325:[645..674).1" Label="param BuckStopsHereBinder(CSharpCompilation compilation) 728206" />
<Node Id="10325:[616..730).1" Label="param BuckStopsHereBinder(this) 728207" />
<Node Id="10325:[696..707).1" Label="compilation 728208" />
<Node Id="10325:[616..730).2" Label="param BuckStopsHereBinder(this) 728209" />
<Node Id="10286:[939..968).1" Label="param Binder(CSharpCompilation compilation) 728210" />
<Node Id="10286:[923..1219).1" Label="param Binder(this) 728211" />
<Node Id="10286:[726..773).1" Label="internal CSharpCompilation Compilation { get; } 728212" />
<Node Id="10286:[815..820).1" Label="Flags 728213" />
<Node Id="10286:[2975..3015).1" Label="protected internal Binder? Next { get; } 728214" />
<Node Id="10286:[17802..17818).1" Label="_lazyConversions 728215" />
<Node Id="10286:[18200..18223).1" Label="_lazyOverloadResolution 728216" />
<Node Id="10286:[994..1034).1" Label="RoslynDebug.Assert(compilation != null); 728217" />
<Node Id="10286:[994..1034).2" Label="RoslynDebug.Assert(compilation != null); 728218" />
<Node Id="10286:[1048..1096).1" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 728219" />
<Node Id="10286:[1048..1096).2" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 728220" />
<Node Id="10286:[1110..1120).1" Label="this.Flags 728221" />
<Node Id="10286:[1177..1193).1" Label="this.Compilation 728222" />
<Node Id="10076:[3315..3335).1" Label="_buckStopsHereBinder 728223" />
<Node Id="25002:[4395..4432).19" Label="var diagnostics = c.GetDiagnostics(); 728224" />
<Node Id="10076:[4437..4452).1" Label="param GetBinder(SyntaxNode node) 728225" />
<Node Id="10076:[4454..4498).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 728226" />
<Node Id="10076:[4500..4523).1" Label="param GetBinder(Symbol memberOpt = null) 728227" />
<Node Id="10076:[4411..5059).1" Label="param GetBinder(this) 728228" />
<Node Id="10076:[4549..4579).1" Label="int position = node.SpanStart; 728229" />
<Node Id="10076:[4821..4829).1" Label="InScript 728230" />
<Node Id="10076:[3592..3700).1" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 728231" />
<Node Id="10076:[3628..3685).1" Label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 728232" />
<Node Id="10076:[4815..4966).1" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 728233" />
<Node Id="10076:[4815..4966).3" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 728234" />
<Node Id="10076:[4815..4966).4" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 728235" />
<Node Id="10076:[4815..4966).5" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 728236" />
<Node Id="10076:[4932..4951).1" Label="node = node.Parent; 728237" />
<Node Id="10076:[4982..5048).1" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 728238" />
<Node Id="10076:[4982..5048).2" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 728239" />
<Node Id="10076:[4982..5048).3" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 728240" />
<Node Id="10076:[4982..5048).4" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 728241" />
<Node Id="10076:[4989..5047).1" Label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 728242" />
<Node Id="10076:[5097..5112).1" Label="param GetBinder(SyntaxNode node) 728243" />
<Node Id="10076:[5114..5126).1" Label="param GetBinder(int position) 728244" />
<Node Id="10076:[5128..5172).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 728245" />
<Node Id="10076:[5174..5197).1" Label="param GetBinder(Symbol memberOpt = null) 728246" />
<Node Id="10076:[5071..5759).1" Label="param GetBinder(this) 728247" />
<Node Id="10076:[5223..5250).1" Label="Debug.Assert(node != null); 728248" />
<Node Id="10076:[5223..5250).2" Label="Debug.Assert(node != null); 728249" />
<Node Id="10076:[5277..5448).1" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 728250" />
<Node Id="10076:[5277..5448).2" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 728251" />
<Node Id="10076:[5470..5538).1" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 728252" />
<Node Id="10076:[5470..5538).3" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 728253" />
<Node Id="10077:[909..930).1" Label="param BinderFactoryVisitor(BinderFactory factory) 728254" />
<Node Id="10077:[879..998).1" Label="param BinderFactoryVisitor(this) 728255" />
<Node Id="10077:[879..998).2" Label="param BinderFactoryVisitor(this) 728256" />
<Node Id="10077:[698..707).1" Label="_position 728257" />
<Node Id="10077:[747..768).1" Label="_memberDeclarationOpt 728258" />
<Node Id="10077:[798..808).1" Label="_memberOpt 728259" />
<Node Id="10077:[854..862).1" Label="_factory 728260" />
<Node Id="10077:[964..972).1" Label="_factory 728261" />
<Node Id="10076:[5470..5538).4" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 728262" />
<Node Id="10076:[5552..5614).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 728263" />
<Node Id="10076:[5552..5614).2" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 728264" />
<Node Id="10076:[5552..5614).3" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 728265" />
<Node Id="10076:[5552..5613).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 728266" />
<Node Id="10077:[1039..1051).1" Label="param Initialize(int position) 728267" />
<Node Id="10077:[1053..1090).1" Label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 728268" />
<Node Id="10077:[1092..1108).1" Label="param Initialize(Symbol memberOpt) 728269" />
<Node Id="10077:[1014..1370).1" Label="param Initialize(this) 728270" />
<Node Id="10077:[1142..1210).1" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 728271" />
<Node Id="10077:[1142..1210).2" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 728272" />
<Node Id="10077:[1142..1210).4" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 728273" />
<Node Id="10077:[1142..1210).5" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 728274" />
<Node Id="10077:[1230..1239).1" Label="_position 728275" />
<Node Id="10077:[1269..1290).1" Label="_memberDeclarationOpt 728276" />
<Node Id="10077:[1332..1342).1" Label="_memberOpt 728277" />
<Node Id="10076:[5552..5614).4" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 728278" />
<Node Id="10076:[5628..5664).1" Label="Binder result = visitor.Visit(node); 728279" />
<Node Id="10076:[5644..5663).1" Label="visitor.Visit(node) 728280" />
<Node Id="10077:[2693..2708).1" Label="param Visit(SyntaxNode node) 728281" />
<Node Id="10077:[2664..2780).1" Label="param Visit(this) 728282" />
<Node Id="10077:[2742..2765).1" Label="return VisitCore(node); 728283" />
<Node Id="10077:[2749..2764).1" Label="VisitCore(node) 728284" />
<Node Id="10077:[2877..2892).1" Label="param VisitCore(SyntaxNode node) 728285" />
<Node Id="10077:[2852..2986).1" Label="param VisitCore(this) 728286" />
<Node Id="10077:[2926..2971).1" Label="return ((CSharpSyntaxNode)node).Accept(this); 728287" />
<Node Id="10077:[2926..2971).2" Label="return ((CSharpSyntaxNode)node).Accept(this); 728288" />
<Node Id="10077:[2926..2971).3" Label="return ((CSharpSyntaxNode)node).Accept(this); 728289" />
<Node Id="10077:[34617..34644).1" Label="param VisitClassDeclaration(ClassDeclarationSyntax node) 728290" />
<Node Id="10077:[34572..34731).1" Label="param VisitClassDeclaration(this) 728291" />
<Node Id="10077:[34678..34716).1" Label="return VisitTypeDeclarationCore(node); 728292" />
<Node Id="10077:[34685..34715).1" Label="VisitTypeDeclarationCore(node) 728293" />
<Node Id="10077:[31025..31053).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 728294" />
<Node Id="10077:[30985..32417).1" Label="param VisitTypeDeclarationCore(this) 728295" />
<Node Id="10077:[31087..31238).1" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 728296" />
<Node Id="10077:[31087..31238).2" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 728297" />
<Node Id="10077:[31087..31238).3" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 728298" />
<Node Id="10077:[31258..31297).1" Label="NodeUsage extraInfo = NodeUsage.Normal; 728299" />
<Node Id="10077:[31490..32331).1" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 728300" />
<Node Id="10077:[31490..32331).2" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 728301" />
<Node Id="10077:[31490..32331).6" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 728302" />
<Node Id="10077:[31490..32331).7" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 728303" />
<Node Id="10077:[31936..32331).1" Label="if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 728304" />
<Node Id="10077:[31936..32331).2" Label="if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 728305" />
<Node Id="10077:[32131..32331).1" Label="if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 728306" />
<Node Id="10077:[32131..32331).2" Label="if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 728307" />
<Node Id="10077:[32257..32312).1" Label="extraInfo = NodeUsage.NamedTypeBaseListOrParameterList; 728308" />
<Node Id="10077:[32351..32402).1" Label="return VisitTypeDeclarationCore(parent, extraInfo); 728309" />
<Node Id="10077:[32351..32402).2" Label="return VisitTypeDeclarationCore(parent, extraInfo); 728310" />
<Node Id="10077:[32358..32401).1" Label="VisitTypeDeclarationCore(parent, extraInfo) 728311" />
<Node Id="10077:[32474..32502).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 728312" />
<Node Id="10077:[32504..32523).1" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 728313" />
<Node Id="10077:[32433..34556).1" Label="param VisitTypeDeclarationCore(this) 728314" />
<Node Id="10077:[32557..32607).1" Label="var key = CreateBinderCacheKey(parent, extraInfo); 728315" />
<Node Id="10077:[32557..32607).2" Label="var key = CreateBinderCacheKey(parent, extraInfo); 728316" />
<Node Id="10077:[32567..32606).1" Label="CreateBinderCacheKey(parent, extraInfo) 728317" />
<Node Id="10077:[44159..44180).1" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 728318" />
<Node Id="10077:[44182..44197).1" Label="param CreateBinderCacheKey(NodeUsage usage) 728319" />
<Node Id="10077:[44231..44317).1" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 728320" />
<Node Id="10077:[44231..44317).3" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 728321" />
<Node Id="10077:[44335..44374).1" Label="return new BinderCacheKey(node, usage); 728322" />
<Node Id="10077:[44335..44374).2" Label="return new BinderCacheKey(node, usage); 728323" />
<Node Id="10077:[44335..44374).3" Label="return new BinderCacheKey(node, usage); 728324" />
<Node Id="10077:[44342..44373).1" Label="new BinderCacheKey(node, usage) 728325" />
<Node Id="10076:[875..902).1" Label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 728326" />
<Node Id="10076:[904..919).1" Label="param BinderCacheKey(NodeUsage usage) 728327" />
<Node Id="10076:[853..1034).1" Label="param BinderCacheKey(this) 728328" />
<Node Id="10076:[953..968).1" Label="this.syntaxNode 728329" />
<Node Id="10076:[1000..1010).1" Label="this.usage 728330" />
<Node Id="10077:[32557..32607).3" Label="var key = CreateBinderCacheKey(parent, extraInfo); 728331" />
<Node Id="10077:[32627..32647).1" Label="Binder resultBinder; 728332" />
<Node Id="10077:[32670..32681).1" Label="binderCache 728333" />
<Node Id="10077:[2066..2158).1" Label="get
                {
                    return _factory._binderCache;
                } 728334" />
<Node Id="10077:[2110..2139).1" Label="return _factory._binderCache; 728335" />
<Node Id="10077:[32665..34501).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 728336" />
<Node Id="10077:[32665..34501).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 728337" />
<Node Id="10077:[32665..34501).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 728338" />
<Node Id="10077:[32665..34501).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 728339" />
<Node Id="10077:[32665..34501).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 728340" />
<Node Id="10076:[1241..1380).1" Label="param GetHashCode(this) 728341" />
<Node Id="10076:[1307..1365).1" Label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 728342" />
<Node Id="10077:[33226..33266).1" Label="resultBinder = VisitCore(parent.Parent); 728343" />
<Node Id="10077:[33241..33265).1" Label="VisitCore(parent.Parent) 728344" />
<Node Id="10077:[2877..2892).2" Label="param VisitCore(SyntaxNode node) 728345" />
<Node Id="10077:[39020..39048).1" Label="param VisitCompilationUnit(CompilationUnitSyntax parent) 728346" />
<Node Id="10077:[38976..39245).1" Label="param VisitCompilationUnit(this) 728347" />
<Node Id="10077:[39082..39230).1" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 728348" />
<Node Id="10077:[39170..39187).1" Label="IsInUsing(parent) 728349" />
<Node Id="10077:[44823..44854).1" Label="param IsInUsing(CSharpSyntaxNode containingNode) 728350" />
<Node Id="10077:[44800..46356).1" Label="param IsInUsing(this) 728351" />
<Node Id="10077:[44888..44934).1" Label="TextSpan containingSpan = containingNode.Span; 728352" />
<Node Id="10077:[44954..44972).1" Label="SyntaxToken token; 728353" />
<Node Id="10077:[44966..44971).1" Label="token 728354" />
<Node Id="10077:[44990..45616).1" Label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)
                {
                    // This occurs at EOF
                    token = containingNode.GetLastToken();
                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());
                }
                else if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 728355" />
<Node Id="10077:[45331..45616).1" Label="if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 728356" />
<Node Id="10077:[45553..45597).1" Label="token = containingNode.FindToken(_position); 728357" />
<Node Id="10077:[45553..45597).2" Label="token = containingNode.FindToken(_position); 728358" />
<Node Id="10077:[45636..45660).1" Label="var node = token.Parent; 728359" />
<Node Id="10077:[45678..46310).1" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 728360" />
<Node Id="10077:[45678..46310).2" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 728361" />
<Node Id="10077:[45678..46310).3" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 728362" />
<Node Id="10077:[46088..46248).1" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 728363" />
<Node Id="10077:[46088..46248).2" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 728364" />
<Node Id="10077:[46272..46291).1" Label="node = node.Parent; 728365" />
<Node Id="10077:[46328..46341).1" Label="return false; 728366" />
<Node Id="10077:[39082..39230).3" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 728367" />
<Node Id="10077:[39220..39228).1" Label="InScript 728368" />
<Node Id="10077:[2243..2331).1" Label="get
                {
                    return _factory.InScript;
                } 728369" />
<Node Id="10077:[2294..2311).1" Label="_factory.InScript 728370" />
<Node Id="10076:[3592..3700).2" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 728371" />
<Node Id="10077:[2287..2312).1" Label="return _factory.InScript; 728372" />
<Node Id="10077:[39089..39229).1" Label="VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript) 728373" />
<Node Id="10077:[39298..39335).1" Label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 728374" />
<Node Id="10077:[39337..39349).1" Label="param VisitCompilationUnit(bool inUsing) 728375" />
<Node Id="10077:[39351..39364).1" Label="param VisitCompilationUnit(bool inScript) 728376" />
<Node Id="10077:[39261..44091).1" Label="param VisitCompilationUnit(this) 728377" />
<Node Id="10077:[39421..39431).1" Label="syntaxTree 728378" />
<Node Id="10077:[1641..1732).1" Label="get
                {
                    return _factory._syntaxTree;
                } 728379" />
<Node Id="10077:[1685..1713).1" Label="return _factory._syntaxTree; 728380" />
<Node Id="10077:[39398..39590).1" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 728381" />
<Node Id="10077:[39398..39590).2" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 728382" />
<Node Id="10077:[39398..39590).5" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 728383" />
<Node Id="10077:[39626..39633).1" Label="inUsing 728384" />
<Node Id="10077:[39766..39774).1" Label="inScript 728385" />
<Node Id="10077:[39610..39829).1" Label="var extraInfo = inUsing
                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)
                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 728386" />
<Node Id="10077:[39877..39936).1" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 728387" />
<Node Id="10077:[39877..39936).2" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 728388" />
<Node Id="10077:[39887..39935).1" Label="CreateBinderCacheKey(compilationUnit, extraInfo) 728389" />
<Node Id="10077:[44159..44180).2" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 728390" />
<Node Id="10077:[44182..44197).2" Label="param CreateBinderCacheKey(NodeUsage usage) 728391" />
<Node Id="10077:[44231..44317).9" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 728392" />
<Node Id="10077:[44231..44317).11" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 728393" />
<Node Id="10077:[39877..39936).3" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 728394" />
<Node Id="10077:[39956..39970).1" Label="Binder result; 728395" />
<Node Id="10077:[39993..40004).1" Label="binderCache 728396" />
<Node Id="10077:[2066..2158).2" Label="get
                {
                    return _factory._binderCache;
                } 728397" />
<Node Id="10077:[2110..2139).2" Label="return _factory._binderCache; 728398" />
<Node Id="10077:[39988..44042).1" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 728399" />
<Node Id="10077:[39988..44042).2" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 728400" />
<Node Id="10077:[39988..44042).3" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 728401" />
<Node Id="10077:[39988..44042).4" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 728402" />
<Node Id="10077:[39988..44042).5" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 728403" />
<Node Id="10077:[40084..40108).1" Label="this.buckStopsHereBinder 728404" />
<Node Id="10077:[1843..1943).1" Label="get
                {
                    return _factory._buckStopsHereBinder;
                } 728405" />
<Node Id="10077:[1887..1924).1" Label="return _factory._buckStopsHereBinder; 728406" />
<Node Id="10077:[40075..40109).1" Label="result = this.buckStopsHereBinder; 728407" />
<Node Id="10077:[40133..43967).1" Label="if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    } 728408" />
<Node Id="10077:[43302..43313).1" Label="compilation 728409" />
<Node Id="10077:[1456..1548).1" Label="get
                {
                    return _factory._compilation;
                } 728410" />
<Node Id="10077:[1500..1529).1" Label="return _factory._compilation; 728411" />
<Node Id="10077:[43271..43374).1" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 728412" />
<Node Id="10077:[43271..43374).3" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 728413" />
<Node Id="10077:[43271..43374).4" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 728414" />
<Node Id="10077:[43271..43374).5" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 728415" />
<Node Id="10077:[43271..43374).6" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 728416" />
<Node Id="10077:[43280..43373).1" Label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 728417" />
<Node Id="10346:[1426..1457).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 728418" />
<Node Id="10346:[1459..1470).1" Label="param InContainerBinder(Binder next) 728419" />
<Node Id="10346:[1472..1506).1" Label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 728420" />
<Node Id="10346:[1508..1520).1" Label="param InContainerBinder(bool inUsing) 728421" />
<Node Id="10346:[1399..2435).1" Label="param InContainerBinder(this) 728422" />
<Node Id="10346:[1542..1546).1" Label="next 728423" />
<Node Id="10346:[1399..2435).2" Label="param InContainerBinder(this) 728424" />
<Node Id="10286:[1247..1258).1" Label="param Binder(Binder next) 728425" />
<Node Id="10286:[1231..1520).1" Label="param Binder(this) 728426" />
<Node Id="10286:[1260..1291).1" Label="param Binder(Conversions? conversions = null) 728427" />
<Node Id="10286:[1317..1350).1" Label="RoslynDebug.Assert(next != null); 728428" />
<Node Id="10286:[1317..1350).2" Label="RoslynDebug.Assert(next != null); 728429" />
<Node Id="10286:[1364..1368).1" Label="Next 728430" />
<Node Id="10286:[1390..1400).1" Label="this.Flags 728431" />
<Node Id="10286:[1428..1444).1" Label="this.Compilation 728432" />
<Node Id="10286:[1478..1494).1" Label="_lazyConversions 728433" />
<Node Id="10346:[858..868).1" Label="_container 728434" />
<Node Id="10346:[932..947).1" Label="_computeImports 728435" />
<Node Id="10346:[974..986).1" Label="_lazyImports 728436" />
<Node Id="10346:[1017..1033).1" Label="_lazyImportChain 728437" />
<Node Id="10346:[1074..1100).1" Label="_lazyQuickAttributeChecker 728438" />
<Node Id="10346:[1572..1612).1" Label="Debug.Assert((object)container != null); 728439" />
<Node Id="10346:[1572..1612).2" Label="Debug.Assert((object)container != null); 728440" />
<Node Id="10346:[1626..1666).1" Label="Debug.Assert(declarationSyntax != null); 728441" />
<Node Id="10346:[1626..1666).2" Label="Debug.Assert(declarationSyntax != null); 728442" />
<Node Id="10346:[1682..1692).1" Label="_container 728443" />
<Node Id="10346:[1719..1832).1" Label="_computeImports = basesBeingResolved =$ Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 728444" />
<Node Id="10346:[1719..1734).1" Label="_computeImports 728445" />
<Node Id="10346:[1848..2424).1" Label="if (!inUsing)
            {
                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                }
            } 728446" />
<Node Id="10346:[1894..2409).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                } 728447" />
<Node Id="10346:[1994..2057).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 728448" />
<Node Id="10346:[2079..2092).1" Label="_usingsSyntax 728449" />
<Node Id="10077:[43503..43514).1" Label="compilation 728450" />
<Node Id="10077:[1456..1548).2" Label="get
                {
                    return _factory._compilation;
                } 728451" />
<Node Id="10077:[1500..1529).2" Label="return _factory._compilation; 728452" />
<Node Id="10077:[43402..43944).1" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 728453" />
<Node Id="10077:[43402..43944).3" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 728454" />
<Node Id="10077:[43402..43944).4" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 728455" />
<Node Id="10077:[43991..44002).1" Label="binderCache 728456" />
<Node Id="10077:[2110..2139).3" Label="return _factory._binderCache; 728457" />
<Node Id="10077:[43991..44023).1" Label="binderCache.TryAdd(key, result); 728458" />
<Node Id="10077:[43991..44023).2" Label="binderCache.TryAdd(key, result); 728459" />
<Node Id="10077:[43991..44023).3" Label="binderCache.TryAdd(key, result); 728460" />
<Node Id="10077:[43991..44023).4" Label="binderCache.TryAdd(key, result); 728461" />
<Node Id="10077:[43991..44023).5" Label="binderCache.TryAdd(key, result); 728462" />
<Node Id="10077:[44062..44076).1" Label="return result; 728463" />
<Node Id="10077:[2926..2971).8" Label="return ((CSharpSyntaxNode)node).Accept(this); 728464" />
<Node Id="10077:[33290..34322).1" Label="if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    } 728465" />
<Node Id="10077:[33414..33451).1" Label="resultBinder.ContainingMemberOrLambda 728466" />
<Node Id="10346:[7369..7588).1" Label="get
            {
                var merged = _container as MergedNamespaceSymbol;
                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;
            } 728467" />
<Node Id="10346:[7405..7454).1" Label="var merged = _container as MergedNamespaceSymbol; 728468" />
<Node Id="10346:[7472..7573).1" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 728469" />
<Node Id="10346:[7472..7573).2" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 728470" />
<Node Id="10346:[7479..7503).1" Label="((object)merged != null) 728471" />
<Node Id="10077:[33373..33481).1" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 728472" />
<Node Id="10077:[33373..33481).2" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 728473" />
<Node Id="10077:[33509..34299).1" Label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        } 728474" />
<Node Id="10077:[33780..33855).1" Label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 728475" />
<Node Id="10077:[33780..33855).2" Label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 728476" />
<Node Id="10077:[33780..33855).3" Label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 728477" />
<Node Id="10077:[33795..33854).1" Label="new WithClassTypeParametersBinder(typeSymbol, resultBinder) 728478" />
<Node Id="10376:[838..863).1" Label="param WithClassTypeParametersBinder(NamedTypeSymbol container) 728479" />
<Node Id="10376:[865..876).1" Label="param WithClassTypeParametersBinder(Binder next) 728480" />
<Node Id="10376:[799..1016).1" Label="param WithClassTypeParametersBinder(this) 728481" />
<Node Id="10376:[898..902).1" Label="next 728482" />
<Node Id="10376:[799..1016).2" Label="param WithClassTypeParametersBinder(this) 728483" />
<Node Id="10382:[520..531).1" Label="param WithTypeParametersBinder(Binder next) 728484" />
<Node Id="10382:[486..580).1" Label="param WithTypeParametersBinder(this) 728485" />
<Node Id="10382:[553..557).1" Label="next 728486" />
<Node Id="10382:[486..580).2" Label="param WithTypeParametersBinder(this) 728487" />
<Node Id="10286:[1247..1258).2" Label="param Binder(Binder next) 728488" />
<Node Id="10286:[1231..1520).2" Label="param Binder(this) 728489" />
<Node Id="10286:[1260..1291).2" Label="param Binder(Conversions? conversions = null) 728490" />
<Node Id="10286:[1317..1350).5" Label="RoslynDebug.Assert(next != null); 728491" />
<Node Id="10286:[1317..1350).6" Label="RoslynDebug.Assert(next != null); 728492" />
<Node Id="10286:[1390..1400).2" Label="this.Flags 728493" />
<Node Id="10286:[1428..1444).2" Label="this.Compilation 728494" />
<Node Id="10286:[1478..1494).2" Label="_lazyConversions 728495" />
<Node Id="10376:[691..701).1" Label="_namedType 728496" />
<Node Id="10376:[765..786).1" Label="_lazyTypeParameterMap 728497" />
<Node Id="10376:[928..968).1" Label="Debug.Assert((object)container != null); 728498" />
<Node Id="10376:[928..968).2" Label="Debug.Assert((object)container != null); 728499" />
<Node Id="10376:[982..992).1" Label="_namedType 728500" />
<Node Id="10077:[34346..34420).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 728501" />
<Node Id="10077:[34361..34419).1" Label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 728502" />
<Node Id="10307:[3496..3521).1" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 728503" />
<Node Id="10307:[3452..3756).1" Label="param WithUnsafeRegionIfNecessary(this) 728504" />
<Node Id="10307:[3547..3745).1" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 728505" />
<Node Id="10307:[3547..3745).2" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 728506" />
<Node Id="10307:[3555..3600).1" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 728507" />
<Node Id="10298:[471..492).6" Label="param Includes(this BinderFlags self) 728508" />
<Node Id="10298:[494..511).6" Label="param Includes(BinderFlags other) 728509" />
<Node Id="10307:[3547..3745).4" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 728510" />
<Node Id="10307:[3547..3745).7" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 728511" />
<Node Id="10307:[3554..3645).1" Label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 728512" />
<Node Id="10077:[34444..34455).1" Label="binderCache 728513" />
<Node Id="10077:[2110..2139).4" Label="return _factory._binderCache; 728514" />
<Node Id="10077:[34444..34482).1" Label="binderCache.TryAdd(key, resultBinder); 728515" />
<Node Id="10077:[34444..34482).2" Label="binderCache.TryAdd(key, resultBinder); 728516" />
<Node Id="10077:[34444..34482).3" Label="binderCache.TryAdd(key, resultBinder); 728517" />
<Node Id="10077:[34444..34482).4" Label="binderCache.TryAdd(key, resultBinder); 728518" />
<Node Id="10077:[34444..34482).5" Label="binderCache.TryAdd(key, resultBinder); 728519" />
<Node Id="10077:[34521..34541).1" Label="return resultBinder; 728520" />
<Node Id="10077:[2926..2971).12" Label="return ((CSharpSyntaxNode)node).Accept(this); 728521" />
<Node Id="10076:[5678..5718).1" Label="_binderFactoryVisitorPool.Free(visitor); 728522" />
<Node Id="10076:[5678..5718).2" Label="_binderFactoryVisitorPool.Free(visitor); 728523" />
<Node Id="10076:[5734..5748).1" Label="return result; 728524" />
<Node Id="25002:[4395..4432).22" Label="var diagnostics = c.GetDiagnostics(); 728525" />
<Node Id="10307:[3228..3245).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 728526" />
<Node Id="10307:[3247..3264).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 728527" />
<Node Id="10307:[3165..3440).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 728528" />
<Node Id="10307:[3290..3331).1" Label="Debug.Assert((object)containing != null); 728529" />
<Node Id="10307:[3290..3331).2" Label="Debug.Assert((object)containing != null); 728530" />
<Node Id="10307:[3345..3429).1" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 728531" />
<Node Id="10307:[3345..3429).2" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 728532" />
<Node Id="10307:[3345..3429).4" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 728533" />
<Node Id="10307:[3345..3429).5" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 728534" />
<Node Id="10307:[3352..3428).1" Label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 728535" />
<Node Id="10307:[1072..1083).1" Label="param BinderWithContainingMemberOrLambda(Binder next) 728536" />
<Node Id="10307:[1085..1102).1" Label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 728537" />
<Node Id="10307:[1104..1135).1" Label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 728538" />
<Node Id="10307:[1028..1341).1" Label="param BinderWithContainingMemberOrLambda(this) 728539" />
<Node Id="10307:[1161..1165).1" Label="next 728540" />
<Node Id="10307:[1167..1172).1" Label="flags 728541" />
<Node Id="10307:[1028..1341).2" Label="param BinderWithContainingMemberOrLambda(this) 728542" />
<Node Id="10286:[1549..1560).1" Label="param Binder(Binder next) 728543" />
<Node Id="10286:[1562..1579).1" Label="param Binder(BinderFlags flags) 728544" />
<Node Id="10286:[1532..2083).1" Label="param Binder(this) 728545" />
<Node Id="10286:[726..773).4" Label="internal CSharpCompilation Compilation { get; } 728546" />
<Node Id="10286:[815..820).4" Label="Flags 728547" />
<Node Id="10286:[2975..3015).4" Label="protected internal Binder? Next { get; } 728548" />
<Node Id="10286:[17802..17818).4" Label="_lazyConversions 728549" />
<Node Id="10286:[18200..18223).4" Label="_lazyOverloadResolution 728550" />
<Node Id="10286:[1605..1638).1" Label="RoslynDebug.Assert(next != null); 728551" />
<Node Id="10286:[1605..1638).2" Label="RoslynDebug.Assert(next != null); 728552" />
<Node Id="10286:[1688..1781).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 728553" />
<Node Id="10286:[1688..1781).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 728554" />
<Node Id="10286:[1708..1779).1" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 728555" />
<Node Id="10298:[471..492).7" Label="param Includes(this BinderFlags self) 728556" />
<Node Id="10298:[494..511).7" Label="param Includes(BinderFlags other) 728557" />
<Node Id="10286:[1820..1963).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 728558" />
<Node Id="10286:[1820..1963).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 728559" />
<Node Id="10286:[1840..1888).1" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 728560" />
<Node Id="10298:[471..492).8" Label="param Includes(this BinderFlags self) 728561" />
<Node Id="10298:[494..511).8" Label="param Includes(BinderFlags other) 728562" />
<Node Id="10286:[1977..1981).1" Label="Next 728563" />
<Node Id="10286:[2003..2013).1" Label="this.Flags 728564" />
<Node Id="10286:[2036..2052).1" Label="this.Compilation 728565" />
<Node Id="10307:[683..708).1" Label="_containingMemberOrLambda 728566" />
<Node Id="10307:[1206..1253).1" Label="Debug.Assert(containingMemberOrLambda != null); 728567" />
<Node Id="10307:[1206..1253).2" Label="Debug.Assert(containingMemberOrLambda != null); 728568" />
<Node Id="10307:[1273..1298).1" Label="_containingMemberOrLambda 728569" />
<Node Id="25002:[4395..4432).25" Label="var diagnostics = c.GetDiagnostics(); 728570" />
<Node Id="10319:[13685..13708).1" Label="param BindType(ExpressionSyntax syntax) 728571" />
<Node Id="10319:[13710..13735).1" Label="param BindType(DiagnosticBag diagnostics) 728572" />
<Node Id="10319:[13737..13783).1" Label="param BindType(ConsList$TypeSymbol$ basesBeingResolved = null) 728573" />
<Node Id="10319:[13785..13824).1" Label="param BindType(bool suppressUseSiteDiagnostics = false) 728574" />
<Node Id="10319:[13647..14061).1" Label="param BindType(this) 728575" />
<Node Id="10319:[13850..13948).1" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 728576" />
<Node Id="10319:[13850..13948).2" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 728577" />
<Node Id="10319:[13850..13948).3" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 728578" />
<Node Id="10319:[13850..13948).4" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 728579" />
<Node Id="10319:[13863..13947).1" Label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 728580" />
<Node Id="10319:[14931..14954).1" Label="param BindTypeOrAlias(ExpressionSyntax syntax) 728581" />
<Node Id="10319:[14956..14981).1" Label="param BindTypeOrAlias(DiagnosticBag diagnostics) 728582" />
<Node Id="10319:[14983..15029).1" Label="param BindTypeOrAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 728583" />
<Node Id="10319:[15031..15070).1" Label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 728584" />
<Node Id="10319:[14862..16302).1" Label="param BindTypeOrAlias(this) 728585" />
<Node Id="10319:[15096..15130).1" Label="Debug.Assert(diagnostics != null); 728586" />
<Node Id="10319:[15096..15130).2" Label="Debug.Assert(diagnostics != null); 728587" />
<Node Id="10319:[15146..15291).1" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 728588" />
<Node Id="10319:[15146..15291).2" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 728589" />
<Node Id="10319:[15146..15291).3" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 728590" />
<Node Id="10319:[15146..15291).4" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 728591" />
<Node Id="10319:[15146..15291).5" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 728592" />
<Node Id="10319:[15159..15290).1" Label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 728593" />
<Node Id="10319:[20002..20025).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 728594" />
<Node Id="10319:[20027..20052).1" Label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 728595" />
<Node Id="10319:[20054..20093).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 728596" />
<Node Id="10319:[20095..20126).1" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 728597" />
<Node Id="10319:[19916..30085).1" Label="param BindNamespaceOrTypeOrAliasSymbol(this) 728598" />
<Node Id="10319:[20152..24647).1" Label="switch (syntax.Kind())
            {
                case SyntaxKind.NullableType:
                    return bindNullable(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.PredefinedType:
                    return bindPredefined(syntax, diagnostics);

                case SyntaxKind.IdentifierName:
                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);

                case SyntaxKind.GenericName:
                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);

                case SyntaxKind.AliasQualifiedName:
                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);

                case SyntaxKind.QualifiedName:
                    {
                        var node = (QualifiedNameSyntax)syntax;
                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.SimpleMemberAccessExpression:
                    {
                        var node = (MemberAccessExpressionSyntax)syntax;
                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.ArrayType:
                    {
                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);
                    }

                case SyntaxKind.PointerType:
                    return bindPointer(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.FunctionPointerType:
                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;
                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)
                    {
                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;
                        var asterisk = functionPointerTypeSyntax.AsteriskToken;
                        RoslynDebug.Assert(@delegate.SyntaxTree is object);
                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));
                    }

                    return TypeWithAnnotations.Create(
                        FunctionPointerTypeSymbol.CreateFromSource(
                            functionPointerTypeSyntax,
                            this,
                            diagnostics,
                            basesBeingResolved,
                            suppressUseSiteDiagnostics));

                case SyntaxKind.OmittedTypeArgument:
                    {
                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);
                    }

                case SyntaxKind.TupleType:
                    {
                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;
                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));
                    }

                case SyntaxKind.RefType:
                    {
                        // ref needs to be handled by the caller
                        var refTypeSyntax = (RefTypeSyntax)syntax;
                        var refToken = refTypeSyntax.RefKeyword;
                        if (!syntax.HasErrors)
                        {
                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());
                        }

                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                default:
                    {
                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind
                        // is attempted to be bound as a type pattern.
                        return createErrorType(syntax);
                    }
            } 728599" />
<Node Id="10319:[20508..20675).1" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 728600" />
<Node Id="10319:[20508..20675).2" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 728601" />
<Node Id="10319:[20508..20675).3" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 728602" />
<Node Id="10319:[20508..20675).4" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 728603" />
<Node Id="10319:[20508..20675).5" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 728604" />
<Node Id="10319:[20515..20674).1" Label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 728605" />
<Node Id="10319:[41849..41874).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 728606" />
<Node Id="10319:[41889..41914).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 728607" />
<Node Id="10319:[41929..41968).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 728608" />
<Node Id="10319:[41983..42014).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 728609" />
<Node Id="10319:[42029..42063).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 728610" />
<Node Id="10319:[41732..45579).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 728611" />
<Node Id="10319:[42089..42141).1" Label="var identifierValueText = node.Identifier.ValueText; 728612" />
<Node Id="10319:[42478..42805).1" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 728613" />
<Node Id="10319:[42821..42938).1" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 728614" />
<Node Id="10319:[42821..42938).2" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 728615" />
<Node Id="10319:[42821..42938).3" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 728616" />
<Node Id="10319:[42821..42938).4" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 728617" />
<Node Id="10319:[42821..42938).6" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 728618" />
<Node Id="10319:[42839..42937).1" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 728619" />
<Node Id="10319:[63849..63870).1" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 728620" />
<Node Id="10319:[63885..63919).1" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 728621" />
<Node Id="10319:[63934..63945).1" Label="param CreateErrorIfLookupOnTypeParameter(string name) 728622" />
<Node Id="10319:[63960..63969).1" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 728623" />
<Node Id="10319:[63984..64009).1" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 728624" />
<Node Id="10319:[63768..64484).1" Label="param CreateErrorIfLookupOnTypeParameter(this) 728625" />
<Node Id="10319:[64035..64445).1" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 728626" />
<Node Id="10319:[64035..64445).2" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 728627" />
<Node Id="10319:[64461..64473).1" Label="return null; 728628" />
<Node Id="10319:[42821..42938).7" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 728629" />
<Node Id="10319:[42952..43079).1" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 728630" />
<Node Id="10319:[42952..43079).2" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 728631" />
<Node Id="10354:[10826..10838).1" Label="CreatePool() 728632" />
<Node Id="10354:[10975..11012).1" Label="ObjectPool$LookupResult$ pool = null; 728633" />
<Node Id="10354:[11026..11097).1" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 728634" />
<Node Id="10354:[11026..11097).3" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 728635" />
<Node Id="10354:[11142..11154).1" Label="return pool; 728636" />
<Node Id="10354:[10809..10838).1" Label="s_poolInstance = CreatePool() 728637" />
<Node Id="10319:[43108..43134).1" Label="LookupResult.GetInstance() 728638" />
<Node Id="10354:[11244..11285).1" Label="var instance = s_poolInstance.Allocate(); 728639" />
<Node Id="10354:[11244..11285).2" Label="var instance = s_poolInstance.Allocate(); 728640" />
<Node Id="10354:[11244..11285).3" Label="var instance = s_poolInstance.Allocate(); 728641" />
<Node Id="10354:[3419..3448).1" Label="param LookupResult(ObjectPool$LookupResult$ pool) 728642" />
<Node Id="10354:[3398..3626).1" Label="param LookupResult(this) 728643" />
<Node Id="10354:[3068..3073).1" Label="_kind 728644" />
<Node Id="10354:[3200..3211).1" Label="_symbolList 728645" />
<Node Id="10354:[3319..3325).1" Label="_error 728646" />
<Node Id="10354:[3380..3385).1" Label="_pool 728647" />
<Node Id="10354:[3474..3479).1" Label="_pool 728648" />
<Node Id="10354:[3501..3506).1" Label="_kind 728649" />
<Node Id="10354:[3546..3587).1" Label="_symbolList = new ArrayBuilder$Symbol$(); 728650" />
<Node Id="10354:[3546..3557).1" Label="_symbolList 728651" />
<Node Id="10354:[3601..3615).1" Label="_error = null; 728652" />
<Node Id="10354:[3601..3607).1" Label="_error 728653" />
<Node Id="10354:[11244..11285).4" Label="var instance = s_poolInstance.Allocate(); 728654" />
<Node Id="10354:[11312..11328).1" Label="instance.IsClear 728655" />
<Node Id="10354:[3684..3818).1" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 728656" />
<Node Id="10354:[3720..3803).1" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728657" />
<Node Id="10354:[3720..3803).2" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728658" />
<Node Id="10354:[3720..3803).3" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728659" />
<Node Id="10354:[11299..11330).1" Label="Debug.Assert(instance.IsClear); 728660" />
<Node Id="10354:[11344..11360).1" Label="return instance; 728661" />
<Node Id="10319:[43095..43135).1" Label="var result = LookupResult.GetInstance(); 728662" />
<Node Id="10319:[43149..43246).1" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 728663" />
<Node Id="10319:[43149..43246).2" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 728664" />
<Node Id="10319:[43173..43245).1" Label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 728665" />
<Node Id="10319:[50313..50328).1" Label="param GetSimpleNameLookupOptions(NameSyntax node) 728666" />
<Node Id="10319:[50330..50355).1" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 728667" />
<Node Id="10319:[50381..51340).1" Label="if (SyntaxFacts.IsAttributeName(node))
            {
                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.
                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.
                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity
                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled
                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only
                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.

                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;
            }
            else
            {
                return LookupOptions.NamespacesOrTypesOnly;
            } 728668" />
<Node Id="10319:[51282..51325).1" Label="return LookupOptions.NamespacesOrTypesOnly; 728669" />
<Node Id="10319:[43262..43312).1" Label="HashSet$DiagnosticInfo$ useSiteDiagnostics = null; 728670" />
<Node Id="10319:[43326..43490).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728671" />
<Node Id="10319:[43326..43490).2" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728672" />
<Node Id="10319:[43326..43490).3" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728673" />
<Node Id="10319:[43326..43490).4" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728674" />
<Node Id="10319:[43326..43490).6" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728675" />
<Node Id="10319:[43326..43490).7" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728676" />
<Node Id="10319:[43326..43490).10" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 728677" />
<Node Id="10319:[43326..43489).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 728678" />
<Node Id="10312:[994..1013).1" Label="param LookupSymbolsSimpleName(LookupResult result) 728679" />
<Node Id="10312:[1028..1062).1" Label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 728680" />
<Node Id="10312:[1077..1093).1" Label="param LookupSymbolsSimpleName(string plainName) 728681" />
<Node Id="10312:[1108..1117).1" Label="param LookupSymbolsSimpleName(int arity) 728682" />
<Node Id="10312:[1132..1171).1" Label="param LookupSymbolsSimpleName(ConsList$TypeSymbol$ basesBeingResolved) 728683" />
<Node Id="10312:[1186..1207).1" Label="param LookupSymbolsSimpleName(LookupOptions options) 728684" />
<Node Id="10312:[1222..1235).1" Label="param LookupSymbolsSimpleName(bool diagnose) 728685" />
<Node Id="10312:[1250..1296).1" Label="param LookupSymbolsSimpleName(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 728686" />
<Node Id="10312:[942..1750).1" Label="param LookupSymbolsSimpleName(this) 728687" />
<Node Id="10312:[1322..1739).1" Label="if (options.IsAttributeTypeLookup())
            {
                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 728688" />
<Node Id="10312:[1326..1357).1" Label="options.IsAttributeTypeLookup() 728689" />
<Node Id="10353:[7504..7530).1" Label="param IsAttributeTypeLookup(this LookupOptions options) 728690" />
<Node Id="10353:[7556..7642).1" Label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 728691" />
<Node Id="10312:[1585..1724).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728692" />
<Node Id="10312:[1585..1724).2" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728693" />
<Node Id="10312:[1585..1724).3" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728694" />
<Node Id="10312:[1585..1724).4" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728695" />
<Node Id="10312:[1585..1724).5" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728696" />
<Node Id="10312:[1585..1724).6" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728697" />
<Node Id="10312:[1585..1724).7" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728698" />
<Node Id="10312:[1585..1724).8" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728699" />
<Node Id="10312:[1585..1723).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 728700" />
<Node Id="10312:[5721..5740).1" Label="param LookupSymbolsOrMembersInternal(LookupResult result) 728701" />
<Node Id="10312:[5755..5789).1" Label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 728702" />
<Node Id="10312:[5804..5815).1" Label="param LookupSymbolsOrMembersInternal(string name) 728703" />
<Node Id="10312:[5830..5839).1" Label="param LookupSymbolsOrMembersInternal(int arity) 728704" />
<Node Id="10312:[5854..5893).1" Label="param LookupSymbolsOrMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 728705" />
<Node Id="10312:[5908..5929).1" Label="param LookupSymbolsOrMembersInternal(LookupOptions options) 728706" />
<Node Id="10312:[5944..5957).1" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 728707" />
<Node Id="10312:[5972..6018).1" Label="param LookupSymbolsOrMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 728708" />
<Node Id="10312:[5663..6444).1" Label="param LookupSymbolsOrMembersInternal(this) 728709" />
<Node Id="10312:[6044..6433).1" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 728710" />
<Node Id="10312:[6044..6433).2" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 728711" />
<Node Id="10312:[6110..6221).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728712" />
<Node Id="10312:[6110..6221).2" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728713" />
<Node Id="10312:[6110..6221).3" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728714" />
<Node Id="10312:[6110..6221).4" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728715" />
<Node Id="10312:[6110..6221).5" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728716" />
<Node Id="10312:[6110..6221).6" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728717" />
<Node Id="10312:[6110..6221).7" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 728718" />
<Node Id="10312:[6110..6220).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 728719" />
<Node Id="10312:[3696..3715).1" Label="param LookupSymbolsInternal(LookupResult result) 728720" />
<Node Id="10312:[3717..3728).1" Label="param LookupSymbolsInternal(string name) 728721" />
<Node Id="10312:[3730..3739).1" Label="param LookupSymbolsInternal(int arity) 728722" />
<Node Id="10312:[3741..3780).1" Label="param LookupSymbolsInternal(ConsList$TypeSymbol$ basesBeingResolved) 728723" />
<Node Id="10312:[3782..3803).1" Label="param LookupSymbolsInternal(LookupOptions options) 728724" />
<Node Id="10312:[3805..3818).1" Label="param LookupSymbolsInternal(bool diagnose) 728725" />
<Node Id="10312:[3820..3866).1" Label="param LookupSymbolsInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 728726" />
<Node Id="10312:[3645..5112).1" Label="param LookupSymbolsInternal(this) 728727" />
<Node Id="10312:[3905..3919).1" Label="result.IsClear 728728" />
<Node Id="10354:[3684..3818).2" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 728729" />
<Node Id="10354:[3720..3803).9" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728730" />
<Node Id="10354:[3720..3803).10" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728731" />
<Node Id="10354:[3720..3803).11" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728732" />
<Node Id="10312:[3892..3921).1" Label="Debug.Assert(result.IsClear); 728733" />
<Node Id="10312:[3935..3968).1" Label="Debug.Assert(options.AreValid()); 728734" />
<Node Id="10312:[3948..3966).1" Label="options.AreValid() 728735" />
<Node Id="10353:[4698..4724).1" Label="param AreValid(this LookupOptions options) 728736" />
<Node Id="10353:[4750..4847).1" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 728737" />
<Node Id="10353:[4863..5000).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 728738" />
<Node Id="10353:[4863..5000).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 728739" />
<Node Id="10353:[5079..5183).1" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 728740" />
<Node Id="10353:[5197..5323).1" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 728741" />
<Node Id="10353:[5485..5759).1" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 728742" />
<Node Id="10353:[5485..5759).2" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 728743" />
<Node Id="10353:[5485..5759).3" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 728744" />
<Node Id="10353:[5775..5979).1" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 728745" />
<Node Id="10353:[5775..5979).3" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 728746" />
<Node Id="10353:[5995..6029).1" Label="return OnlyOneBitSet(onlyOptions); 728747" />
<Node Id="10353:[6002..6028).1" Label="OnlyOneBitSet(onlyOptions) 728748" />
<Node Id="10353:[6343..6358).1" Label="param OnlyOneBitSet(LookupOptions o) 728749" />
<Node Id="10353:[6384..6410).1" Label="return (o & (o - 1)) == 0; 728750" />
<Node Id="10353:[6384..6410).2" Label="return (o & (o - 1)) == 0; 728751" />
<Node Id="10312:[3984..4005).1" Label="Binder binder = null; 728752" />
<Node Id="10312:[4019..5073).1" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 728753" />
<Node Id="10312:[4019..5073).2" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 728754" />
<Node Id="10312:[4060..4080).1" Label="result.IsMultiViable 728755" />
<Node Id="10354:[4919..5009).1" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 728756" />
<Node Id="10354:[4962..4966).1" Label="Kind 728757" />
<Node Id="10354:[4058..4122).1" Label="get
            {
                return _kind;
            } 728758" />
<Node Id="10354:[4094..4107).1" Label="return _kind; 728759" />
<Node Id="10354:[4955..4994).1" Label="return Kind == LookupResultKind.Viable; 728760" />
<Node Id="10312:[4019..5073).4" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 728761" />
<Node Id="10312:[4019..5073).5" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 728762" />
<Node Id="10312:[4134..4806).1" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 728763" />
<Node Id="10312:[4134..4806).2" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 728764" />
<Node Id="10312:[4534..4658).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728765" />
<Node Id="10312:[4534..4658).2" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728766" />
<Node Id="10312:[4534..4658).3" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728767" />
<Node Id="10312:[4534..4658).4" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728768" />
<Node Id="10312:[4534..4658).5" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728769" />
<Node Id="10312:[4534..4658).6" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728770" />
<Node Id="10312:[4534..4658).7" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728771" />
<Node Id="10312:[4534..4658).8" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728772" />
<Node Id="10312:[4534..4657).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 728773" />
<Node Id="10312:[5188..5207).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 728774" />
<Node Id="10312:[5209..5220).1" Label="param LookupSymbolsInSingleBinder(string name) 728775" />
<Node Id="10312:[5222..5231).1" Label="param LookupSymbolsInSingleBinder(int arity) 728776" />
<Node Id="10312:[5233..5272).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 728777" />
<Node Id="10312:[5274..5295).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 728778" />
<Node Id="10312:[5297..5318).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 728779" />
<Node Id="10312:[5320..5333).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 728780" />
<Node Id="10312:[5335..5381).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 728781" />
<Node Id="10312:[5124..5404).1" Label="param LookupSymbolsInSingleBinder(this) 728782" />
<Node Id="10312:[4534..4658).9" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728783" />
<Node Id="10312:[4685..4699).1" Label="result.IsClear 728784" />
<Node Id="10354:[3684..3818).3" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 728785" />
<Node Id="10354:[3720..3803).17" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728786" />
<Node Id="10354:[3720..3803).18" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728787" />
<Node Id="10354:[3720..3803).19" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728788" />
<Node Id="10312:[4680..4787).1" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 728789" />
<Node Id="10312:[4826..5058).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 728790" />
<Node Id="10312:[4826..5058).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 728791" />
<Node Id="10382:[1340..1359).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 728792" />
<Node Id="10382:[1361..1372).1" Label="param LookupSymbolsInSingleBinder(string name) 728793" />
<Node Id="10382:[1374..1383).1" Label="param LookupSymbolsInSingleBinder(int arity) 728794" />
<Node Id="10382:[1385..1424).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 728795" />
<Node Id="10382:[1426..1447).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 728796" />
<Node Id="10382:[1449..1470).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 728797" />
<Node Id="10382:[1472..1485).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 728798" />
<Node Id="10382:[1487..1533).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 728799" />
<Node Id="10382:[1275..1939).1" Label="param LookupSymbolsInSingleBinder(this) 728800" />
<Node Id="10382:[1572..1586).1" Label="result.IsClear 728801" />
<Node Id="10354:[3684..3818).4" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 728802" />
<Node Id="10354:[3720..3803).25" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728803" />
<Node Id="10354:[3720..3803).26" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728804" />
<Node Id="10354:[3720..3803).27" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728805" />
<Node Id="10382:[1559..1588).1" Label="Debug.Assert(result.IsClear); 728806" />
<Node Id="10382:[1619..1629).1" Label="LookupMask 728807" />
<Node Id="10382:[913..1046).1" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 728808" />
<Node Id="10382:[949..1031).1" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 728809" />
<Node Id="10382:[1604..1691).1" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 728810" />
<Node Id="10382:[1604..1691).2" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 728811" />
<Node Id="10382:[1604..1691).3" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 728812" />
<Node Id="10382:[1737..1753).1" Label="TypeParameterMap 728813" />
<Node Id="10376:[1542..2071).1" Label="get
            {
                if (_lazyTypeParameterMap == null)
                {
                    var result = new MultiDictionary$string, TypeParameterSymbol$();
                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    }
                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);
                }
                return _lazyTypeParameterMap;
            } 728814" />
<Node Id="10376:[1578..2009).1" Label="if (_lazyTypeParameterMap == null)
                {
                    var result = new MultiDictionary$string, TypeParameterSymbol$();
                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    }
                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);
                } 728815" />
<Node Id="10376:[1578..2009).2" Label="if (_lazyTypeParameterMap == null)
                {
                    var result = new MultiDictionary$string, TypeParameterSymbol$();
                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    }
                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);
                } 728816" />
<Node Id="10376:[1653..1717).1" Label="var result = new MultiDictionary$string, TypeParameterSymbol$(); 728817" />
<Node Id="10376:[1739..1899).1" Label="foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    } 728818" />
<Node Id="10376:[1921..1990).1" Label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 728819" />
<Node Id="10376:[1921..1990).2" Label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 728820" />
<Node Id="10376:[1921..1990).3" Label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 728821" />
<Node Id="10376:[2027..2056).1" Label="return _lazyTypeParameterMap; 728822" />
<Node Id="10382:[1707..1928).1" Label="foreach (var typeParameter in TypeParameterMap[name])
            {
                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));
            } 728823" />
<Node Id="10382:[1707..1928).2" Label="foreach (var typeParameter in TypeParameterMap[name])
            {
                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));
            } 728824" />
<Node Id="10312:[4534..4658).21" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728825" />
<Node Id="10312:[4534..4658).22" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728826" />
<Node Id="10312:[4534..4658).23" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728827" />
<Node Id="10312:[4534..4658).25" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728828" />
<Node Id="10312:[4534..4658).26" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 728829" />
<Node Id="10346:[10629..10648).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 728830" />
<Node Id="10346:[10650..10661).1" Label="param LookupSymbolsInSingleBinder(string name) 728831" />
<Node Id="10346:[10663..10672).1" Label="param LookupSymbolsInSingleBinder(int arity) 728832" />
<Node Id="10346:[10674..10713).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 728833" />
<Node Id="10346:[10715..10736).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 728834" />
<Node Id="10346:[10738..10759).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 728835" />
<Node Id="10346:[10761..10774).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 728836" />
<Node Id="10346:[10776..10822).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 728837" />
<Node Id="10346:[10564..12467).1" Label="param LookupSymbolsInSingleBinder(this) 728838" />
<Node Id="10346:[10861..10875).1" Label="result.IsClear 728839" />
<Node Id="10354:[3684..3818).6" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 728840" />
<Node Id="10354:[3720..3803).41" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728841" />
<Node Id="10354:[3720..3803).42" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728842" />
<Node Id="10354:[3720..3803).43" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 728843" />
<Node Id="10346:[10848..10877).1" Label="Debug.Assert(result.IsClear); 728844" />
<Node Id="10346:[10897..10914).1" Label="IsSubmissionClass 728845" />
<Node Id="10346:[7666..7775).1" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 728846" />
<Node Id="10346:[7672..7773).1" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 728847" />
<Node Id="10346:[10893..11127).1" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 728848" />
<Node Id="10346:[11143..11188).1" Label="var imports = GetImports(basesBeingResolved); 728849" />
<Node Id="10346:[11157..11187).1" Label="GetImports(basesBeingResolved) 728850" />
<Node Id="10346:[3460..3499).1" Label="param GetImports(ConsList$TypeSymbol$ basesBeingResolved) 728851" />
<Node Id="10346:[3423..3863).1" Label="param GetImports(this) 728852" />
<Node Id="10346:[3525..3638).1" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 728853" />
<Node Id="10346:[3525..3638).2" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 728854" />
<Node Id="10346:[3654..3816).1" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 728855" />
<Node Id="10346:[3654..3816).2" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 728856" />
<Node Id="10346:[3712..3801).1" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 728857" />
<Node Id="10346:[3712..3801).2" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 728858" />
<Node Id="10346:[3712..3801).4" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 728859" />
<Node Id="10345:[2889..2923).1" Label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 728860" />
<Node Id="10345:[2938..2962).1" Label="param FromSyntax(InContainerBinder binder) 728861" />
<Node Id="10345:[2977..3016).1" Label="param FromSyntax(ConsList$TypeSymbol$ basesBeingResolved) 728862" />
<Node Id="10345:[3031..3043).1" Label="param FromSyntax(bool inUsing) 728863" />
<Node Id="10345:[3069..3118).1" Label="SyntaxList$UsingDirectiveSyntax$ usingDirectives; 728864" />
<Node Id="10345:[3102..3117).1" Label="usingDirectives 728865" />
<Node Id="10345:[3132..3193).1" Label="SyntaxList$ExternAliasDirectiveSyntax$ externAliasDirectives; 728866" />
<Node Id="10345:[3171..3192).1" Label="externAliasDirectives 728867" />
<Node Id="10345:[3207..4163).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
            {
                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                // using directives are not in scope within using directives
                usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : compilationUnit.Usings;
                externAliasDirectives = compilationUnit.Externs;
            }
            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
            {
                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                // using directives are not in scope within using directives
                usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : namespaceDecl.Usings;
                externAliasDirectives = namespaceDecl.Externs;
            }
            else
            {
                return Empty;
            } 728868" />
<Node Id="10345:[3299..3362).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 728869" />
<Node Id="10345:[3476..3483).1" Label="inUsing 728870" />
<Node Id="10345:[3530..3552).1" Label="compilationUnit.Usings 728871" />
<Node Id="10345:[3458..3553).1" Label="usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : compilationUnit.Usings; 728872" />
<Node Id="10345:[3571..3619).1" Label="externAliasDirectives = compilationUnit.Externs; 728873" />
<Node Id="10345:[4179..4307).1" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 728874" />
<Node Id="10345:[4179..4307).2" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 728875" />
<Node Id="10345:[4179..4307).4" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 728876" />
<Node Id="10345:[4179..4307).5" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 728877" />
<Node Id="10345:[4279..4292).1" Label="return Empty; 728878" />
<Node Id="10346:[3832..3852).1" Label="return _lazyImports; 728879" />
<Node Id="10346:[11258..12246).1" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 728880" />
<Node Id="10346:[11258..12246).2" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 728881" />
<Node Id="10346:[11258..12246).5" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 728882" />
<Node Id="10346:[11258..12246).6" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 728883" />
<Node Id="10346:[11369..11508).1" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728884" />
<Node Id="10346:[11369..11508).2" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728885" />
<Node Id="10346:[11369..11508).3" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728886" />
<Node Id="10346:[11369..11508).4" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728887" />
<Node Id="10346:[11369..11508).5" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728888" />
<Node Id="10346:[11369..11508).6" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728889" />
<Node Id="10346:[11369..11508).7" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728890" />
<Node Id="10346:[11369..11508).8" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728891" />
<Node Id="10346:[11369..11508).9" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 728892" />
<Node Id="10346:[11369..11507).1" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 728893" />
<Node Id="10312:[7652..7671).1" Label="param LookupMembersInternal(LookupResult result) 728894" />
<Node Id="10312:[7673..7703).1" Label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 728895" />
<Node Id="10312:[7705..7716).1" Label="param LookupMembersInternal(string name) 728896" />
<Node Id="10312:[7718..7727).1" Label="param LookupMembersInternal(int arity) 728897" />
<Node Id="10312:[7729..7768).1" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 728898" />
<Node Id="10312:[7770..7791).1" Label="param LookupMembersInternal(LookupOptions options) 728899" />
<Node Id="10312:[7793..7814).1" Label="param LookupMembersInternal(Binder originalBinder) 728900" />
<Node Id="10312:[7816..7829).1" Label="param LookupMembersInternal(bool diagnose) 728901" />
<Node Id="10312:[7831..7877).1" Label="param LookupMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 728902" />
<Node Id="10312:[7615..8420).1" Label="param LookupMembersInternal(this) 728903" />
<Node Id="10312:[7903..7936).1" Label="Debug.Assert(options.AreValid()); 728904" />
<Node Id="10312:[7916..7934).1" Label="options.AreValid() 728905" />
<Node Id="10353:[4698..4724).2" Label="param AreValid(this LookupOptions options) 728906" />
<Node Id="10353:[4750..4847).3" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 728907" />
<Node Id="10353:[4863..5000).5" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 728908" />
<Node Id="10353:[4863..5000).6" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 728909" />
<Node Id="10353:[5079..5183).3" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 728910" />
<Node Id="10353:[5197..5323).4" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 728911" />
<Node Id="10353:[5485..5759).7" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 728912" />
<Node Id="10353:[5485..5759).8" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 728913" />
<Node Id="10353:[5485..5759).9" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 728914" />
<Node Id="10353:[5775..5979).5" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 728915" />
<Node Id="10353:[5775..5979).7" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 728916" />
<Node Id="10353:[5995..6029).4" Label="return OnlyOneBitSet(onlyOptions); 728917" />
<Node Id="10353:[6002..6028).2" Label="OnlyOneBitSet(onlyOptions) 728918" />
<Node Id="10353:[6343..6358).2" Label="param OnlyOneBitSet(LookupOptions o) 728919" />
<Node Id="10353:[6384..6410).7" Label="return (o & (o - 1)) == 0; 728920" />
<Node Id="10353:[6384..6410).8" Label="return (o & (o - 1)) == 0; 728921" />
<Node Id="10312:[7952..7977).1" Label="Debug.Assert(arity $= 0); 728922" />
<Node Id="10312:[7952..7977).2" Label="Debug.Assert(arity $= 0); 728923" />
<Node Id="10312:[7991..8409).1" Label="if (nsOrType.IsNamespace)
            {
                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
            } 728924" />
<Node Id="10312:[8049..8181).1" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728925" />
<Node Id="10312:[8049..8181).2" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728926" />
<Node Id="10312:[8049..8181).3" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728927" />
<Node Id="10312:[8049..8181).4" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728928" />
<Node Id="10312:[8049..8181).5" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728929" />
<Node Id="10312:[8049..8181).6" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728930" />
<Node Id="10312:[8049..8181).7" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728931" />
<Node Id="10312:[8049..8181).8" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 728932" />
<Node Id="10312:[8049..8180).1" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 728933" />
<Node Id="10312:[18976..18995).1" Label="param LookupMembersInNamespace(LookupResult result) 728934" />
<Node Id="10312:[18997..19015).1" Label="param LookupMembersInNamespace(NamespaceSymbol ns) 728935" />
<Node Id="10312:[19017..19028).1" Label="param LookupMembersInNamespace(string name) 728936" />
<Node Id="10312:[19030..19039).1" Label="param LookupMembersInNamespace(int arity) 728937" />
<Node Id="10312:[19041..19062).1" Label="param LookupMembersInNamespace(LookupOptions options) 728938" />
<Node Id="10312:[19064..19085).1" Label="param LookupMembersInNamespace(Binder originalBinder) 728939" />
<Node Id="10312:[19087..19100).1" Label="param LookupMembersInNamespace(bool diagnose) 728940" />
<Node Id="10312:[19102..19148).1" Label="param LookupMembersInNamespace(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 728941" />
<Node Id="10312:[19174..19243).1" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 728942" />
<Node Id="10312:[19174..19243).2" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 728943" />
<Node Id="10312:[19174..19243).3" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 728944" />
<Node Id="10312:[19174..19243).4" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 728945" />
<Node Id="10312:[19188..19242).1" Label="GetCandidateMembers(ns, name, options, originalBinder) 728946" />
<Node Id="10312:[61540..61570).1" Label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 728947" />
<Node Id="10312:[61572..61583).1" Label="param GetCandidateMembers(string name) 728948" />
<Node Id="10312:[61585..61606).1" Label="param GetCandidateMembers(LookupOptions options) 728949" />
<Node Id="10312:[61608..61629).1" Label="param GetCandidateMembers(Binder originalBinder) 728950" />
<Node Id="10312:[61655..62327).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 728951" />
<Node Id="10312:[61655..62327).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 728952" />
<Node Id="10312:[61655..62327).4" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 728953" />
<Node Id="10312:[61874..62327).1" Label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 728954" />
<Node Id="10312:[62098..62327).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 728955" />
<Node Id="10312:[62098..62327).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 728956" />
<Node Id="10312:[62279..62312).1" Label="return nsOrType.GetMembers(name); 728957" />
<Node Id="10312:[19259..19531).1" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 728958" />
<Node Id="10312:[19326..19460).1" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 728959" />
<Node Id="10312:[19326..19460).2" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 728960" />
<Node Id="10312:[19326..19460).3" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 728961" />
<Node Id="10312:[19326..19460).6" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 728962" />
<Node Id="10312:[19326..19460).7" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 728963" />
<Node Id="10312:[19366..19459).1" Label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 728964" />
<Node Id="10312:[63424..63437).1" Label="param CheckViability(Symbol symbol) 728965" />
<Node Id="10312:[63439..63448).1" Label="param CheckViability(int arity) 728966" />
<Node Id="10312:[63450..63471).1" Label="param CheckViability(LookupOptions options) 728967" />
<Node Id="10312:[63473..63501).1" Label="param CheckViability(TypeSymbol accessThroughType) 728968" />
<Node Id="10312:[63503..63516).1" Label="param CheckViability(bool diagnose) 728969" />
<Node Id="10312:[63518..63564).1" Label="param CheckViability(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 728970" />
<Node Id="10312:[63566..63612).1" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 728971" />
<Node Id="10312:[63381..70761).1" Label="param CheckViability(this) 728972" />
<Node Id="10312:[63638..63668).1" Label="bool inaccessibleViaQualifier; 728973" />
<Node Id="10312:[63682..63706).1" Label="DiagnosticInfo diagInfo; 728974" />
<Node Id="10312:[63859..64015).1" Label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias
                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)
                : symbol; 728975" />
<Node Id="10312:[63881..63912).1" Label="symbol.Kind == SymbolKind.Alias 728976" />
<Node Id="10312:[64121..69285).1" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 728977" />
<Node Id="10312:[64121..69285).2" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 728978" />
<Node Id="10312:[64353..69285).1" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 728979" />
<Node Id="10312:[64353..69285).2" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 728980" />
<Node Id="10312:[64353..69285).3" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 728981" />
<Node Id="10312:[64353..69285).4" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 728982" />
<Node Id="10312:[64353..69285).5" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 728983" />
<Node Id="10312:[64357..64415).1" Label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 728984" />
<Node Id="10312:[80978..80991).1" Label="param WrongArity(Symbol symbol) 728985" />
<Node Id="10312:[80993..81002).1" Label="param WrongArity(int arity) 728986" />
<Node Id="10312:[81004..81017).1" Label="param WrongArity(bool diagnose) 728987" />
<Node Id="10312:[81019..81040).1" Label="param WrongArity(LookupOptions options) 728988" />
<Node Id="10312:[81042..81069).1" Label="param WrongArity(out DiagnosticInfo diagInfo) 728989" />
<Node Id="10312:[81095..84034).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 728990" />
<Node Id="10312:[81196..82523).1" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 728991" />
<Node Id="10312:[81196..82523).2" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 728992" />
<Node Id="10312:[81196..82523).3" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 728993" />
<Node Id="10312:[81196..82523).6" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 728994" />
<Node Id="10312:[81319..81371).1" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 728995" />
<Node Id="10312:[81495..81570).1" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 728996" />
<Node Id="10312:[81495..81570).2" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 728997" />
<Node Id="10312:[81596..82500).1" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 728998" />
<Node Id="10312:[81596..82500).2" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 728999" />
<Node Id="10312:[81628..81659).1" Label="options.IsAttributeTypeLookup() 729000" />
<Node Id="10353:[7504..7530).2" Label="param IsAttributeTypeLookup(this LookupOptions options) 729001" />
<Node Id="10312:[81596..82500).5" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 729002" />
<Node Id="10312:[84050..84066).1" Label="diagInfo = null; 729003" />
<Node Id="10312:[84080..84093).1" Label="return false; 729004" />
<Node Id="10312:[64353..69285).6" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729005" />
<Node Id="10312:[64537..64543).1" Label="InCref 729006" />
<Node Id="10306:[3196..3249).1" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 729007" />
<Node Id="10306:[3202..3247).1" Label="return this.Flags.Includes(BinderFlags.Cref); 729008" />
<Node Id="10306:[3202..3247).2" Label="return this.Flags.Includes(BinderFlags.Cref); 729009" />
<Node Id="10306:[3209..3246).1" Label="this.Flags.Includes(BinderFlags.Cref) 729010" />
<Node Id="10298:[471..492).9" Label="param Includes(this BinderFlags self) 729011" />
<Node Id="10298:[494..511).9" Label="param Includes(BinderFlags other) 729012" />
<Node Id="10312:[64532..69285).1" Label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729013" />
<Node Id="10312:[65229..69285).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729014" />
<Node Id="10312:[65229..69285).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729015" />
<Node Id="10312:[65474..69285).1" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729016" />
<Node Id="10312:[65474..69285).2" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729017" />
<Node Id="10312:[65730..65736).1" Label="InCref 729018" />
<Node Id="10312:[65726..69285).1" Label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729019" />
<Node Id="10312:[66182..66188).1" Label="InCref 729020" />
<Node Id="10312:[66177..69285).1" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729021" />
<Node Id="10312:[66177..69285).2" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729022" />
<Node Id="10312:[66177..69285).3" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729023" />
<Node Id="10312:[66177..69285).4" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729024" />
<Node Id="10312:[66291..66342).1" Label="RefineAccessThroughType(options, accessThroughType) 729025" />
<Node Id="10312:[75301..75322).1" Label="param RefineAccessThroughType(LookupOptions options) 729026" />
<Node Id="10312:[75324..75352).1" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 729027" />
<Node Id="10312:[75735..75866).1" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 729028" />
<Node Id="10312:[75735..75866).2" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 729029" />
<Node Id="10312:[75742..75804).1" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 729030" />
<Node Id="10312:[75735..75866).4" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 729031" />
<Node Id="10312:[66177..69285).7" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729032" />
<Node Id="10312:[66177..69285).8" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729033" />
<Node Id="10312:[66177..69285).9" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729034" />
<Node Id="10312:[66215..66540).1" Label="this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved) 729035" />
<Node Id="10312:[77528..77541).1" Label="param IsAccessible(Symbol symbol) 729036" />
<Node Id="10312:[77543..77571).1" Label="param IsAccessible(TypeSymbol accessThroughType) 729037" />
<Node Id="10312:[77573..77604).1" Label="param IsAccessible(out bool failedThroughTypeCheck) 729038" />
<Node Id="10312:[77606..77652).1" Label="param IsAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 729039" />
<Node Id="10312:[77654..77700).1" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 729040" />
<Node Id="10312:[77501..78044).1" Label="param IsAccessible(this) 729041" />
<Node Id="10312:[77726..77892).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 729042" />
<Node Id="10312:[77726..77892).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 729043" />
<Node Id="10312:[77730..77782).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 729044" />
<Node Id="10298:[471..492).12" Label="param Includes(this BinderFlags self) 729045" />
<Node Id="10298:[494..511).12" Label="param Includes(BinderFlags other) 729046" />
<Node Id="10312:[77908..78033).1" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729047" />
<Node Id="10312:[77908..78033).2" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729048" />
<Node Id="10312:[77908..78033).3" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729049" />
<Node Id="10312:[77908..78033).4" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729050" />
<Node Id="10312:[77908..78033).5" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729051" />
<Node Id="10312:[77915..78032).1" Label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 729052" />
<Node Id="10312:[78387..78400).1" Label="param IsAccessibleHelper(Symbol symbol) 729053" />
<Node Id="10312:[78402..78430).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 729054" />
<Node Id="10312:[78432..78463).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 729055" />
<Node Id="10312:[78465..78511).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 729056" />
<Node Id="10312:[78513..78552).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 729057" />
<Node Id="10312:[78346..78783).1" Label="param IsAccessibleHelper(this) 729058" />
<Node Id="10312:[78642..78772).1" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729059" />
<Node Id="10312:[78642..78772).2" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729060" />
<Node Id="10312:[78642..78772).3" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729061" />
<Node Id="10312:[78642..78772).4" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729062" />
<Node Id="10312:[78642..78772).5" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729063" />
<Node Id="10312:[78649..78771).1" Label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 729064" />
<Node Id="10376:[1070..1083).1" Label="param IsAccessibleHelper(Symbol symbol) 729065" />
<Node Id="10376:[1085..1113).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 729066" />
<Node Id="10376:[1115..1146).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 729067" />
<Node Id="10376:[1148..1194).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 729068" />
<Node Id="10376:[1196..1235).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 729069" />
<Node Id="10376:[1028..1425).1" Label="param IsAccessibleHelper(this) 729070" />
<Node Id="10376:[1261..1414).1" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729071" />
<Node Id="10376:[1261..1414).2" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729072" />
<Node Id="10376:[1261..1414).3" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729073" />
<Node Id="10376:[1261..1414).4" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729074" />
<Node Id="10376:[1261..1414).5" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729075" />
<Node Id="10376:[1261..1414).6" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729076" />
<Node Id="10376:[1268..1413).1" Label="this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 729077" />
<Node Id="10286:[30070..30083).1" Label="param IsSymbolAccessibleConditional(Symbol symbol) 729078" />
<Node Id="10286:[30098..30120).1" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 729079" />
<Node Id="10286:[30135..30160).1" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 729080" />
<Node Id="10286:[30175..30206).1" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 729081" />
<Node Id="10286:[30221..30268).1" Label="param IsSymbolAccessibleConditional(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 729082" />
<Node Id="10286:[30283..30330).1" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 729083" />
<Node Id="10286:[30012..30691).1" Label="param IsSymbolAccessibleConditional(this) 729084" />
<Node Id="10286:[30356..30522).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 729085" />
<Node Id="10286:[30356..30522).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 729086" />
<Node Id="10286:[30360..30412).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 729087" />
<Node Id="10298:[471..492).13" Label="param Includes(this BinderFlags self) 729088" />
<Node Id="10298:[494..511).13" Label="param Includes(BinderFlags other) 729089" />
<Node Id="10286:[30538..30680).1" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729090" />
<Node Id="10286:[30538..30680).2" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729091" />
<Node Id="10286:[30538..30680).3" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729092" />
<Node Id="10286:[30538..30680).4" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729093" />
<Node Id="10286:[30538..30680).5" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729094" />
<Node Id="10286:[30538..30680).6" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 729095" />
<Node Id="10286:[30545..30679).1" Label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 729096" />
<Node Id="10060:[2108..2121).1" Label="param IsSymbolAccessible(Symbol symbol) 729097" />
<Node Id="10060:[2136..2158).1" Label="param IsSymbolAccessible(NamedTypeSymbol within) 729098" />
<Node Id="10060:[2173..2198).1" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 729099" />
<Node Id="10060:[2213..2244).1" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 729100" />
<Node Id="10060:[2259..2305).1" Label="param IsSymbolAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 729101" />
<Node Id="10060:[2320..2366).1" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 729102" />
<Node Id="10060:[2392..2555).1" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729103" />
<Node Id="10060:[2392..2555).2" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729104" />
<Node Id="10060:[2392..2555).3" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729105" />
<Node Id="10060:[2392..2555).4" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729106" />
<Node Id="10060:[2392..2555).5" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729107" />
<Node Id="10060:[2392..2555).6" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729108" />
<Node Id="10060:[2392..2555).7" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 729109" />
<Node Id="10060:[2399..2554).1" Label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 729110" />
<Node Id="10060:[5593..5606).1" Label="param IsSymbolAccessibleCore(Symbol symbol) 729111" />
<Node Id="10060:[5621..5634).1" Label="param IsSymbolAccessibleCore(Symbol within) 729112" />
<Node Id="10060:[5691..5716).1" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 729113" />
<Node Id="10060:[5731..5762).1" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 729114" />
<Node Id="10060:[5777..5806).1" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 729115" />
<Node Id="10060:[5821..5867).1" Label="param IsSymbolAccessibleCore(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 729116" />
<Node Id="10060:[5882..5928).1" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 729117" />
<Node Id="10060:[5954..5991).1" Label="Debug.Assert((object)symbol != null); 729118" />
<Node Id="10060:[5954..5991).2" Label="Debug.Assert((object)symbol != null); 729119" />
<Node Id="10060:[6005..6042).1" Label="Debug.Assert((object)within != null); 729120" />
<Node Id="10060:[6005..6042).2" Label="Debug.Assert((object)within != null); 729121" />
<Node Id="10060:[6056..6090).1" Label="Debug.Assert(within.IsDefinition); 729122" />
<Node Id="10060:[6104..6172).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 729123" />
<Node Id="10060:[6188..6219).1" Label="failedThroughTypeCheck = false; 729124" />
<Node Id="10060:[6235..9907).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.ArrayType:
                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.PointerType:
                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.NamedType:
                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Alias:
                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Discard:
                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.FunctionPointerType:
                    var funcPtr = (FunctionPointerTypeSymbol)symbol;
                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }

                    foreach (var param in funcPtr.Signature.Parameters)
                    {
                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                        {
                            return false;
                        }
                    }

                    return true;

                case SymbolKind.ErrorType:
                    // Always assume that error types are accessible.
                    return true;

                case SymbolKind.TypeParameter:
                case SymbolKind.Parameter:
                case SymbolKind.Local:
                case SymbolKind.Label:
                case SymbolKind.Namespace:
                case SymbolKind.DynamicType:
                case SymbolKind.Assembly:
                case SymbolKind.NetModule:
                case SymbolKind.RangeVariable:
                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:
                    // These types of symbols are always accessible (if visible).
                    return true;

                case SymbolKind.Method:
                case SymbolKind.Property:
                case SymbolKind.Event:
                case SymbolKind.Field:
                    if (!symbol.RequiresInstanceReceiver())
                    {
                        // static members aren't accessed 'through' an 'instance' of any type.  So we
                        // null out the 'through' instance here.  This ensures that we'll understand
                        // accessing protected statics properly.
                        throughTypeOpt = null;
                    }

                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);

                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 729125" />
<Node Id="10060:[6814..6920).1" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 729126" />
<Node Id="10060:[6814..6920).2" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 729127" />
<Node Id="10060:[6814..6920).3" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 729128" />
<Node Id="10060:[6814..6920).4" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 729129" />
<Node Id="10060:[6821..6919).1" Label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 729130" />
<Node Id="10060:[10180..10200).1" Label="param IsNamedTypeAccessible(NamedTypeSymbol type) 729131" />
<Node Id="10060:[10202..10215).1" Label="param IsNamedTypeAccessible(Symbol within) 729132" />
<Node Id="10060:[10217..10263).1" Label="param IsNamedTypeAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 729133" />
<Node Id="10060:[10265..10311).1" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 729134" />
<Node Id="10060:[10337..10405).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 729135" />
<Node Id="10060:[10419..10454).1" Label="Debug.Assert((object)type != null); 729136" />
<Node Id="10060:[10419..10454).2" Label="Debug.Assert((object)type != null); 729137" />
<Node Id="10060:[10470..10516).1" Label="var compilation = within.DeclaringCompilation; 729138" />
<Node Id="10060:[10532..10544).1" Label="bool unused; 729139" />
<Node Id="10060:[10558..11295).1" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 729140" />
<Node Id="10060:[11311..11352).1" Label="var containingType = type.ContainingType; 729141" />
<Node Id="10060:[11366..11675).1" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 729142" />
<Node Id="10060:[11366..11675).2" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 729143" />
<Node Id="10060:[11373..11403).1" Label="(object)containingType == null 729144" />
<Node Id="10060:[11366..11675).5" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 729145" />
<Node Id="10060:[11423..11509).1" Label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 729146" />
<Node Id="10060:[11990..12013).1" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 729147" />
<Node Id="10060:[12028..12063).1" Label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 729148" />
<Node Id="10060:[12078..12091).1" Label="param IsNonNestedTypeAccessible(Symbol within) 729149" />
<Node Id="10060:[12117..12185).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 729150" />
<Node Id="10060:[12199..12238).1" Label="Debug.Assert((object)assembly != null); 729151" />
<Node Id="10060:[12199..12238).2" Label="Debug.Assert((object)assembly != null); 729152" />
<Node Id="10060:[12254..13527).1" Label="switch (declaredAccessibility)
            {
                case Accessibility.NotApplicable:
                case Accessibility.Public:
                    // Public symbols are always accessible from any context
                    return true;

                case Accessibility.Private:
                case Accessibility.Protected:
                case Accessibility.ProtectedAndInternal:
                    // Shouldn't happen except in error cases.
                    return false;

                case Accessibility.Internal:
                case Accessibility.ProtectedOrInternal:

                    // within is typically a type
                    var withinType = within as NamedTypeSymbol;
                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;

                    // An internal type is accessible if we're in the same assembly or we have
                    // friend access to the assembly it was defined in.
                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);

                default:
                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);
            } 729153" />
<Node Id="10060:[12494..12506).1" Label="return true; 729154" />
<Node Id="10312:[66177..69285).11" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729155" />
<Node Id="10312:[67587..67593).1" Label="InCref 729156" />
<Node Id="10312:[67582..69285).1" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729157" />
<Node Id="10312:[67582..69285).2" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729158" />
<Node Id="10312:[67858..69285).1" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729159" />
<Node Id="10312:[67858..69285).2" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729160" />
<Node Id="10312:[68183..69285).1" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729161" />
<Node Id="10312:[68183..69285).2" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729162" />
<Node Id="10312:[68512..69285).1" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729163" />
<Node Id="10312:[68512..69285).2" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729164" />
<Node Id="10312:[68882..69285).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729165" />
<Node Id="10312:[68882..69285).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729166" />
<Node Id="10312:[69237..69270).1" Label="return LookupResult.Good(symbol); 729167" />
<Node Id="10312:[69244..69269).1" Label="LookupResult.Good(symbol) 729168" />
<Node Id="10354:[5400..5413).1" Label="param Good(Symbol symbol) 729169" />
<Node Id="10354:[5439..5508).1" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 729170" />
<Node Id="10354:[5439..5508).2" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 729171" />
<Node Id="10354:[5439..5508).3" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 729172" />
<Node Id="10354:[5446..5507).1" Label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 729173" />
<Node Id="10368:[1076..1097).1" Label="param SingleLookupResult(LookupResultKind kind) 729174" />
<Node Id="10368:[1099..1112).1" Label="param SingleLookupResult(Symbol symbol) 729175" />
<Node Id="10368:[1114..1134).1" Label="param SingleLookupResult(DiagnosticInfo error) 729176" />
<Node Id="10368:[1048..1256).1" Label="param SingleLookupResult(this) 729177" />
<Node Id="10368:[1160..1169).1" Label="this.Kind 729178" />
<Node Id="10368:[1191..1202).1" Label="this.Symbol 729179" />
<Node Id="10368:[1226..1236).1" Label="this.Error 729180" />
<Node Id="10312:[69237..69270).2" Label="return LookupResult.Good(symbol); 729181" />
<Node Id="10312:[19478..19516).1" Label="result.MergeEqual(resultOfThisMember); 729182" />
<Node Id="10312:[19478..19515).1" Label="result.MergeEqual(resultOfThisMember) 729183" />
<Node Id="10354:[10217..10242).1" Label="param MergeEqual(SingleLookupResult result) 729184" />
<Node Id="10354:[10192..10676).1" Label="param MergeEqual(this) 729185" />
<Node Id="10354:[10272..10276).1" Label="Kind 729186" />
<Node Id="10354:[4058..4122).4" Label="get
            {
                return _kind;
            } 729187" />
<Node Id="10354:[10268..10665).1" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 729188" />
<Node Id="10354:[10268..10665).2" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 729189" />
<Node Id="10354:[10404..10408).1" Label="Kind 729190" />
<Node Id="10354:[10386..10665).1" Label="if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 729191" />
<Node Id="10354:[10442..10463).1" Label="this.SetFrom(result); 729192" />
<Node Id="10354:[10442..10462).1" Label="this.SetFrom(result) 729193" />
<Node Id="10354:[8131..8155).1" Label="param SetFrom(SingleLookupResult other) 729194" />
<Node Id="10354:[8109..8324).1" Label="param SetFrom(this) 729195" />
<Node Id="10354:[8181..8186).1" Label="_kind 729196" />
<Node Id="10354:[8214..8234).1" Label="_symbolList.Clear(); 729197" />
<Node Id="10354:[8248..8278).1" Label="_symbolList.Add(other.Symbol); 729198" />
<Node Id="10354:[8248..8278).2" Label="_symbolList.Add(other.Symbol); 729199" />
<Node Id="10354:[8292..8298).1" Label="_error 729200" />
<Node Id="10354:[10442..10463).2" Label="this.SetFrom(result); 729201" />
<Node Id="10312:[19478..19516).2" Label="result.MergeEqual(resultOfThisMember); 729202" />
<Node Id="10312:[19259..19531).4" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 729203" />
<Node Id="10312:[8049..8181).9" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 729204" />
<Node Id="10346:[11369..11508).10" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 729205" />
<Node Id="10346:[11532..11552).1" Label="result.IsMultiViable 729206" />
<Node Id="10354:[4919..5009).4" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 729207" />
<Node Id="10354:[4094..4107).6" Label="return _kind; 729208" />
<Node Id="10346:[11528..12231).1" Label="if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                } 729209" />
<Node Id="10346:[11665..12181).1" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 729210" />
<Node Id="10346:[11665..12181).2" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 729211" />
<Node Id="10346:[11665..12181).3" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 729212" />
<Node Id="10346:[11710..11746).1" Label="originalBinder.IsSemanticModelBinder 729213" />
<Node Id="10286:[2155..2260).1" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 729214" />
<Node Id="10286:[2191..2245).1" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 729215" />
<Node Id="10286:[2191..2245).2" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 729216" />
<Node Id="10286:[2198..2244).1" Label="this.Flags.Includes(BinderFlags.SemanticModel) 729217" />
<Node Id="10298:[471..492).15" Label="param Includes(this BinderFlags self) 729218" />
<Node Id="10298:[494..511).15" Label="param Includes(BinderFlags other) 729219" />
<Node Id="10346:[11665..12181).4" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 729220" />
<Node Id="10346:[11683..11747).1" Label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 729221" />
<Node Id="10345:[28212..28223).1" Label="param IsUsingAlias(string name) 729222" />
<Node Id="10345:[28225..28251).1" Label="param IsUsingAlias(bool callerIsSemanticModel) 729223" />
<Node Id="10345:[28185..28951).1" Label="param IsUsingAlias(this) 729224" />
<Node Id="10345:[28277..28305).1" Label="AliasAndUsingDirective node; 729225" />
<Node Id="10345:[28300..28304).1" Label="node 729226" />
<Node Id="10345:[28319..28911).1" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 729227" />
<Node Id="10345:[28319..28911).2" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 729228" />
<Node Id="10345:[28319..28911).3" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 729229" />
<Node Id="10345:[28927..28940).1" Label="return false; 729230" />
<Node Id="10346:[11665..12181).6" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 729231" />
<Node Id="10346:[11665..12181).7" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 729232" />
<Node Id="10346:[12205..12212).1" Label="return; 729233" />
<Node Id="10312:[4685..4699).3" Label="result.IsClear 729234" />
<Node Id="10354:[3684..3818).7" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 729235" />
<Node Id="10354:[3720..3803).49" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729236" />
<Node Id="10312:[4680..4787).5" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 729237" />
<Node Id="10312:[4749..4764).1" Label="binder = scope; 729238" />
<Node Id="10312:[4826..5058).11" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 729239" />
<Node Id="10312:[4826..5058).12" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 729240" />
<Node Id="10312:[5087..5101).1" Label="return binder; 729241" />
<Node Id="10312:[1585..1724).9" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 729242" />
<Node Id="10319:[43504..43546).1" Label="diagnostics.Add(node, useSiteDiagnostics); 729243" />
<Node Id="10319:[43504..43546).2" Label="diagnostics.Add(node, useSiteDiagnostics); 729244" />
<Node Id="10319:[43504..43546).3" Label="diagnostics.Add(node, useSiteDiagnostics); 729245" />
<Node Id="10319:[43504..43546).4" Label="diagnostics.Add(node, useSiteDiagnostics); 729246" />
<Node Id="10319:[43562..43590).1" Label="Symbol bindingResult = null; 729247" />
<Node Id="10319:[43799..44676).1" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 729248" />
<Node Id="10319:[43799..44676).2" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 729249" />
<Node Id="10319:[43799..44676).3" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 729250" />
<Node Id="10319:[43853..43873).1" Label="IsViableType(result) 729251" />
<Node Id="10319:[41088..41107).1" Label="param IsViableType(LookupResult result) 729252" />
<Node Id="10319:[41138..41158).1" Label="result.IsMultiViable 729253" />
<Node Id="10354:[4919..5009).6" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 729254" />
<Node Id="10354:[4962..4966).6" Label="Kind 729255" />
<Node Id="10354:[4058..4122).8" Label="get
            {
                return _kind;
            } 729256" />
<Node Id="10354:[4094..4107).8" Label="return _kind; 729257" />
<Node Id="10319:[41133..41220).1" Label="if (!result.IsMultiViable)
            {
                return false;
            } 729258" />
<Node Id="10319:[41254..41268).1" Label="result.Symbols 729259" />
<Node Id="10354:[4525..4595).1" Label="get
            {
                return _symbolList;
            } 729260" />
<Node Id="10354:[4561..4580).1" Label="return _symbolList; 729261" />
<Node Id="10319:[41236..41680).1" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 729262" />
<Node Id="10319:[41302..41665).1" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 729263" />
<Node Id="10319:[41634..41646).1" Label="return true; 729264" />
<Node Id="10319:[44692..45392).1" Label="if (bindingResult is null)
            {
                bool wasError;

                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);
                if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
            } 729265" />
<Node Id="10319:[44751..44765).1" Label="bool wasError; 729266" />
<Node Id="10319:[44785..44930).1" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729267" />
<Node Id="10319:[44785..44930).2" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729268" />
<Node Id="10319:[44785..44930).3" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729269" />
<Node Id="10319:[44785..44930).5" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729270" />
<Node Id="10319:[44785..44930).6" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729271" />
<Node Id="10319:[44785..44930).7" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729272" />
<Node Id="10319:[44785..44930).8" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729273" />
<Node Id="10319:[44785..44930).9" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729274" />
<Node Id="10319:[44785..44930).10" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729275" />
<Node Id="10319:[44801..44929).1" Label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 729276" />
<Node Id="10319:[84167..84186).1" Label="param ResultSymbol(LookupResult result) 729277" />
<Node Id="10319:[84201..84218).1" Label="param ResultSymbol(string simpleName) 729278" />
<Node Id="10319:[84233..84242).1" Label="param ResultSymbol(int arity) 729279" />
<Node Id="10319:[84257..84273).1" Label="param ResultSymbol(SyntaxNode where) 729280" />
<Node Id="10319:[84288..84313).1" Label="param ResultSymbol(DiagnosticBag diagnostics) 729281" />
<Node Id="10319:[84328..84359).1" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 729282" />
<Node Id="10319:[84374..84391).1" Label="param ResultSymbol(out bool wasError) 729283" />
<Node Id="10319:[84406..84447).1" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 729284" />
<Node Id="10319:[84462..84508).1" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 729285" />
<Node Id="10319:[84124..109887).1" Label="param ResultSymbol(this) 729286" />
<Node Id="10319:[84534..84675).1" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729287" />
<Node Id="10319:[84534..84675).2" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729288" />
<Node Id="10319:[84534..84675).3" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729289" />
<Node Id="10319:[84534..84675).4" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729290" />
<Node Id="10319:[84534..84675).5" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729291" />
<Node Id="10319:[84534..84675).6" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729292" />
<Node Id="10319:[84534..84675).7" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729293" />
<Node Id="10319:[84534..84675).8" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729294" />
<Node Id="10319:[84534..84675).9" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 729295" />
<Node Id="10319:[84550..84674).1" Label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 729296" />
<Node Id="10319:[84907..109876).1" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 729297" />
<Node Id="10319:[84907..109876).2" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 729298" />
<Node Id="10319:[84907..109876).3" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 729299" />
<Node Id="10319:[84907..109876).4" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 729300" />
<Node Id="10319:[84907..109876).5" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 729301" />
<Node Id="10319:[84907..109876).6" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 729302" />
<Node Id="10319:[84907..109876).7" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 729303" />
<Node Id="10319:[84907..109876).8" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 729304" />
<Node Id="10319:[84907..109876).9" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 729305" />
<Node Id="10319:[84907..109876).10" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 729306" />
<Node Id="10319:[85320..85348).1" Label="Debug.Assert(where != null); 729307" />
<Node Id="10319:[85320..85348).2" Label="Debug.Assert(where != null); 729308" />
<Node Id="10319:[85366..85400).1" Label="Debug.Assert(diagnostics != null); 729309" />
<Node Id="10319:[85366..85400).2" Label="Debug.Assert(diagnostics != null); 729310" />
<Node Id="10319:[85434..85448).1" Label="result.Symbols 729311" />
<Node Id="10354:[4525..4595).2" Label="get
            {
                return _symbolList;
            } 729312" />
<Node Id="10354:[4561..4580).2" Label="return _symbolList; 729313" />
<Node Id="10319:[85420..85449).1" Label="var symbols = result.Symbols; 729314" />
<Node Id="10319:[85467..85484).1" Label="wasError = false; 729315" />
<Node Id="10319:[85508..85528).1" Label="result.IsMultiViable 729316" />
<Node Id="10354:[4919..5009).7" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 729317" />
<Node Id="10354:[4962..4966).7" Label="Kind 729318" />
<Node Id="10354:[4058..4122).9" Label="get
            {
                return _kind;
            } 729319" />
<Node Id="10354:[4094..4107).9" Label="return _kind; 729320" />
<Node Id="10319:[85504..106825).1" Label="if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                } 729321" />
<Node Id="10319:[85570..106806).1" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 729322" />
<Node Id="10319:[85570..106806).2" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 729323" />
<Node Id="10319:[103953..103983).1" Label="var singleResult = symbols[0]; 729324" />
<Node Id="10319:[104078..104122).1" Label="var singleType = singleResult as TypeSymbol; 729325" />
<Node Id="10319:[104148..106735).1" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 729326" />
<Node Id="10319:[104148..106735).2" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 729327" />
<Node Id="10319:[104148..106735).3" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 729328" />
<Node Id="10319:[104874..105336).1" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 729329" />
<Node Id="10319:[104874..105336).2" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 729330" />
<Node Id="10319:[105368..106708).1" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 729331" />
<Node Id="10319:[105601..106708).1" Label="if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 729332" />
<Node Id="10319:[106763..106783).1" Label="return singleResult; 729333" />
<Node Id="10319:[84691..84861).1" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 729334" />
<Node Id="10319:[84764..84846).1" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729335" />
<Node Id="10319:[84764..84846).2" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729336" />
<Node Id="10319:[84764..84846).4" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729337" />
<Node Id="10319:[84764..84846).5" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729338" />
<Node Id="10319:[84764..84845).1" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 729339" />
<Node Id="10306:[358886..358901).1" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 729340" />
<Node Id="10306:[358903..358930).1" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 729341" />
<Node Id="10306:[358932..358945).1" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 729342" />
<Node Id="10306:[358947..358972).1" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 729343" />
<Node Id="10306:[358838..360009).1" Label="param CheckRuntimeSupportForSymbolAccess(this) 729344" />
<Node Id="10306:[358998..359998).1" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 729345" />
<Node Id="10306:[358998..359998).2" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 729346" />
<Node Id="10319:[84877..84891).1" Label="return symbol; 729347" />
<Node Id="10319:[44948..45377).1" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 729348" />
<Node Id="10319:[45408..45421).1" Label="result.Free() 729349" />
<Node Id="10354:[11383..11549).1" Label="param Free(this) 729350" />
<Node Id="10354:[11428..11440).1" Label="this.Clear() 729351" />
<Node Id="10354:[3841..3991).1" Label="param Clear(this) 729352" />
<Node Id="10354:[3887..3892).1" Label="_kind 729353" />
<Node Id="10354:[3932..3952).1" Label="_symbolList.Clear(); 729354" />
<Node Id="10354:[3966..3980).1" Label="_error = null; 729355" />
<Node Id="10354:[3966..3972).1" Label="_error 729356" />
<Node Id="10354:[11428..11441).1" Label="this.Clear(); 729357" />
<Node Id="10354:[11455..11538).1" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 729358" />
<Node Id="10354:[11455..11538).2" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 729359" />
<Node Id="10354:[11506..11523).1" Label="_pool.Free(this); 729360" />
<Node Id="10354:[11506..11523).2" Label="_pool.Free(this); 729361" />
<Node Id="10319:[45408..45422).1" Label="result.Free(); 729362" />
<Node Id="10319:[45436..45568).1" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 729363" />
<Node Id="10319:[45505..45551).1" Label="AreNullableAnnotationsEnabled(node.Identifier) 729364" />
<Node Id="10286:[10010..10027).1" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 729365" />
<Node Id="10286:[9966..10197).1" Label="param AreNullableAnnotationsEnabled(this) 729366" />
<Node Id="10286:[10053..10100).1" Label="RoslynDebug.Assert(token.SyntaxTree is object); 729367" />
<Node Id="10286:[10114..10186).1" Label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 729368" />
<Node Id="10286:[10121..10185).1" Label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 729369" />
<Node Id="10286:[9073..9094).1" Label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 729370" />
<Node Id="10286:[9096..9108).1" Label="param AreNullableAnnotationsEnabled(int position) 729371" />
<Node Id="10286:[9029..9954).1" Label="param AreNullableAnnotationsEnabled(this) 729372" />
<Node Id="10286:[9134..9189).1" Label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 729373" />
<Node Id="10286:[9203..9282).1" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 729374" />
<Node Id="10286:[9203..9282).2" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 729375" />
<Node Id="10286:[9305..9942).1" Label="context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            } 729376" />
<Node Id="10286:[9298..9943).1" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 729377" />
<Node Id="10286:[9298..9943).2" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 729378" />
<Node Id="10286:[9798..9837).1" Label="AreNullableAnnotationsGloballyEnabled() 729379" />
<Node Id="10286:[10465..10663).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 729380" />
<Node Id="10286:[10551..10586).1" Label="RoslynDebug.Assert(Next is object); 729381" />
<Node Id="10286:[10607..10651).1" Label="Next.AreNullableAnnotationsGloballyEnabled() 729382" />
<Node Id="10286:[10465..10663).2" Label="param AreNullableAnnotationsGloballyEnabled(this) 729383" />
<Node Id="10325:[4462..4594).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 729384" />
<Node Id="10325:[4556..4582).1" Label="GetGlobalAnnotationState() 729385" />
<Node Id="10286:[10675..11259).1" Label="param GetGlobalAnnotationState(this) 729386" />
<Node Id="10286:[10741..11248).1" Label="switch (Compilation.Options.NullableContextOptions)
            {
                case NullableContextOptions.Enable:
                case NullableContextOptions.Annotations:
                    return true;

                case NullableContextOptions.Disable:
                case NullableContextOptions.Warnings:
                    return false;

                default:
                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);
            } 729387" />
<Node Id="10286:[11085..11098).1" Label="return false; 729388" />
<Node Id="10325:[4549..4583).1" Label="return GetGlobalAnnotationState(); 729389" />
<Node Id="10286:[10600..10652).1" Label="return Next.AreNullableAnnotationsGloballyEnabled(); 729390" />
<Node Id="10319:[45436..45568).4" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 729391" />
<Node Id="10319:[45443..45567).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 729392" />
<Node Id="10287:[2306..2328).1" Label="param CreateUnannotated(bool isNullableEnabled) 729393" />
<Node Id="10287:[2330..2343).1" Label="param CreateUnannotated(Symbol symbol) 729394" />
<Node Id="10287:[2377..2471).1" Label="if (symbol is null)
                {
                    return default;
                } 729395" />
<Node Id="10287:[2489..2521).1" Label="var type = symbol as TypeSymbol; 729396" />
<Node Id="10287:[2539..2781).1" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 729397" />
<Node Id="10287:[2546..2558).1" Label="type is null 729398" />
<Node Id="10287:[2539..2781).2" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 729399" />
<Node Id="10287:[2680..2780).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 729400" />
<Node Id="10287:[718..757).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 729401" />
<Node Id="10287:[666..1076).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 729402" />
<Node Id="10287:[791..833).1" Label="Debug.Assert(typeWithAnnotations.HasType); 729403" />
<Node Id="10287:[851..871).1" Label="_typeWithAnnotations 729404" />
<Node Id="10287:[912..927).1" Label="_symbol = null; 729405" />
<Node Id="10287:[912..919).1" Label="_symbol 729406" />
<Node Id="10287:[945..972).1" Label="_isNullableEnabled = false; 729407" />
<Node Id="10287:[945..963).1" Label="_isNullableEnabled 729408" />
<Node Id="10319:[15383..15396).1" Label="symbol.IsType 729409" />
<Node Id="10287:[1609..1643).1" Label="=$ !_typeWithAnnotations.IsDefault 729410" />
<Node Id="10287:[1612..1643).1" Label="!_typeWithAnnotations.IsDefault 729411" />
<Node Id="10319:[15379..15933).1" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 729412" />
<Node Id="10319:[15548..15561).1" Label="symbol.IsType 729413" />
<Node Id="10319:[15544..15884).1" Label="if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                } 729414" />
<Node Id="10319:[15783..15809).1" Label="symbol.TypeWithAnnotations 729415" />
<Node Id="10287:[1474..1497).1" Label="=$ _typeWithAnnotations 729416" />
<Node Id="10287:[1477..1497).1" Label="_typeWithAnnotations 729417" />
<Node Id="10319:[15783..15865).1" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 729418" />
<Node Id="10319:[15783..15865).2" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 729419" />
<Node Id="10319:[15783..15865).3" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 729420" />
<Node Id="10319:[15783..15865).4" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 729421" />
<Node Id="10319:[15783..15865).6" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 729422" />
<Node Id="10286:[21504..21529).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 729423" />
<Node Id="10286:[21531..21544).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 729424" />
<Node Id="10286:[21546..21561).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 729425" />
<Node Id="10286:[21563..21583).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 729426" />
<Node Id="10286:[21462..21711).1" Label="param ReportDiagnosticsIfObsolete(this) 729427" />
<Node Id="10286:[21609..21700).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 729428" />
<Node Id="10286:[21609..21700).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 729429" />
<Node Id="10286:[21609..21700).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 729430" />
<Node Id="10286:[21609..21700).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 729431" />
<Node Id="10286:[21609..21699).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 729432" />
<Node Id="10286:[22044..22069).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 729433" />
<Node Id="10286:[22071..22084).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 729434" />
<Node Id="10286:[22086..22108).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 729435" />
<Node Id="10286:[22110..22130).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 729436" />
<Node Id="10286:[22002..22611).1" Label="param ReportDiagnosticsIfObsolete(this) 729437" />
<Node Id="10286:[22156..22600).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Event:
                case SymbolKind.Property:
                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);
                    break;
            } 729438" />
<Node Id="10286:[22421..22557).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729439" />
<Node Id="10286:[22421..22557).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729440" />
<Node Id="10286:[22421..22557).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729441" />
<Node Id="10286:[22421..22557).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729442" />
<Node Id="10286:[22493..22522).1" Label="this.ContainingMemberOrLambda 729443" />
<Node Id="10307:[1439..1480).1" Label="get { return _containingMemberOrLambda; } 729444" />
<Node Id="10307:[1445..1478).1" Label="return _containingMemberOrLambda; 729445" />
<Node Id="10286:[22421..22557).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729446" />
<Node Id="10286:[22524..22543).1" Label="this.ContainingType 729447" />
<Node Id="10286:[15519..15926).1" Label="get
            {
                var member = this.ContainingMemberOrLambda;
                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);
                return member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                };
            } 729448" />
<Node Id="10286:[15568..15597).1" Label="this.ContainingMemberOrLambda 729449" />
<Node Id="10307:[1439..1480).2" Label="get { return _containingMemberOrLambda; } 729450" />
<Node Id="10307:[1445..1478).2" Label="return _containingMemberOrLambda; 729451" />
<Node Id="10286:[15555..15598).1" Label="var member = this.ContainingMemberOrLambda; 729452" />
<Node Id="10286:[15616..15690).1" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 729453" />
<Node Id="10286:[15616..15690).2" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 729454" />
<Node Id="10286:[15715..15910).1" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 729455" />
<Node Id="10286:[15708..15911).1" Label="return member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                }; 729456" />
<Node Id="10286:[22421..22557).7" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729457" />
<Node Id="10286:[22421..22557).9" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729458" />
<Node Id="10286:[22421..22556).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 729459" />
<Node Id="10286:[23056..23081).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 729460" />
<Node Id="10286:[23096..23109).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 729461" />
<Node Id="10286:[23124..23146).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 729462" />
<Node Id="10286:[23161..23181).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 729463" />
<Node Id="10286:[23196..23220).1" Label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 729464" />
<Node Id="10286:[23235..23266).1" Label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 729465" />
<Node Id="10286:[23281..23301).1" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 729466" />
<Node Id="10286:[23327..23364).1" Label="RoslynDebug.Assert(symbol is object); 729467" />
<Node Id="10286:[23380..23684).1" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 729468" />
<Node Id="10286:[23893..24026).1" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 729469" />
<Node Id="10286:[24450..24529).1" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 729470" />
<Node Id="10286:[24450..24529).2" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 729471" />
<Node Id="10286:[24450..24529).3" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 729472" />
<Node Id="10286:[24545..24641).1" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 729473" />
<Node Id="10286:[24655..25349).1" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 729474" />
<Node Id="10286:[25365..25492).1" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 729475" />
<Node Id="10286:[25365..25492).2" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 729476" />
<Node Id="10286:[25365..25492).3" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 729477" />
<Node Id="10286:[25365..25492).4" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 729478" />
<Node Id="10286:[25365..25492).5" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 729479" />
<Node Id="10286:[25386..25491).1" Label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 729480" />
<Node Id="10286:[26910..26935).1" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 729481" />
<Node Id="10286:[26937..26950).1" Label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 729482" />
<Node Id="10286:[26952..26974).1" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 729483" />
<Node Id="10286:[26976..27000).1" Label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 729484" />
<Node Id="10286:[27002..27022).1" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 729485" />
<Node Id="10286:[27048..27088).1" Label="RoslynDebug.Assert(diagnostics != null); 729486" />
<Node Id="10286:[27048..27088).2" Label="RoslynDebug.Assert(diagnostics != null); 729487" />
<Node Id="10286:[27104..27192).1" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 729488" />
<Node Id="10286:[27104..27192).2" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 729489" />
<Node Id="10286:[27104..27192).3" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 729490" />
<Node Id="10286:[27104..27192).5" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 729491" />
<Node Id="10286:[27208..27236).1" Label="DiagnosticInfo? info = null; 729492" />
<Node Id="10286:[27250..27722).1" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 729493" />
<Node Id="10286:[27738..27845).1" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 729494" />
<Node Id="10286:[27738..27845).2" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 729495" />
<Node Id="10286:[27861..27873).1" Label="return kind; 729496" />
<Node Id="10286:[26281..26812).1" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 729497" />
<Node Id="10286:[26450..26769).1" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 729498" />
<Node Id="10286:[22421..22557).10" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729499" />
<Node Id="10286:[21609..21700).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 729500" />
<Node Id="10319:[15904..15918).1" Label="return symbol; 729501" />
<Node Id="10319:[13962..14050).1" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 729502" />
<Node Id="10319:[13962..14050).2" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 729503" />
<Node Id="10319:[13962..14050).3" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 729504" />
<Node Id="10319:[13962..14050).4" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 729505" />
<Node Id="10319:[13969..14029).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 729506" />
<Node Id="10319:[51762..51815).1" Label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 729507" />
<Node Id="10319:[51817..51842).1" Label="param UnwrapAlias(DiagnosticBag diagnostics) 729508" />
<Node Id="10319:[51844..51861).1" Label="param UnwrapAlias(SyntaxNode syntax) 729509" />
<Node Id="10319:[51863..51909).1" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 729510" />
<Node Id="10319:[51698..52285).1" Label="param UnwrapAlias(this) 729511" />
<Node Id="10319:[51939..51953).1" Label="symbol.IsAlias 729512" />
<Node Id="10287:[1680..1716).1" Label="=$ _symbol?.Kind == SymbolKind.Alias 729513" />
<Node Id="10287:[1683..1690).1" Label="_symbol 729514" />
<Node Id="10287:[1683..1716).1" Label="_symbol?.Kind == SymbolKind.Alias 729515" />
<Node Id="10319:[51935..52244).1" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 729516" />
<Node Id="10319:[52260..52274).1" Label="return symbol; 729517" />
<Node Id="10319:[13969..14049).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 729518" />
<Node Id="10287:[1474..1497).2" Label="=$ _typeWithAnnotations 729519" />
<Node Id="10287:[1477..1497).2" Label="_typeWithAnnotations 729520" />
<Node Id="25002:[4395..4432).28" Label="var diagnostics = c.GetDiagnostics(); 729521" />
<Node Id="10319:[20508..20675).12" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 729522" />
<Node Id="10319:[41983..42014).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 729523" />
<Node Id="10319:[42478..42805).4" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 729524" />
<Node Id="10319:[42821..42938).9" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 729525" />
<Node Id="10319:[42839..42937).2" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 729526" />
<Node Id="10319:[63849..63870).2" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 729527" />
<Node Id="10319:[63885..63919).2" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 729528" />
<Node Id="10319:[63934..63945).2" Label="param CreateErrorIfLookupOnTypeParameter(string name) 729529" />
<Node Id="10319:[63960..63969).2" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 729530" />
<Node Id="10319:[63984..64009).2" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 729531" />
<Node Id="10319:[63768..64484).2" Label="param CreateErrorIfLookupOnTypeParameter(this) 729532" />
<Node Id="10319:[64035..64445).5" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 729533" />
<Node Id="10319:[64035..64445).6" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 729534" />
<Node Id="10319:[64461..64473).3" Label="return null; 729535" />
<Node Id="10319:[42821..42938).15" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 729536" />
<Node Id="10319:[42952..43079).4" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 729537" />
<Node Id="10319:[42952..43079).5" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 729538" />
<Node Id="10354:[11312..11328).2" Label="instance.IsClear 729539" />
<Node Id="10354:[3684..3818).8" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 729540" />
<Node Id="10354:[3720..3803).53" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729541" />
<Node Id="10354:[3720..3803).54" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729542" />
<Node Id="10354:[3720..3803).55" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729543" />
<Node Id="10354:[11299..11330).4" Label="Debug.Assert(instance.IsClear); 729544" />
<Node Id="10319:[50330..50355).2" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 729545" />
<Node Id="10312:[1108..1117).2" Label="param LookupSymbolsSimpleName(int arity) 729546" />
<Node Id="10312:[1222..1235).2" Label="param LookupSymbolsSimpleName(bool diagnose) 729547" />
<Node Id="10312:[5830..5839).2" Label="param LookupSymbolsOrMembersInternal(int arity) 729548" />
<Node Id="10312:[5944..5957).2" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 729549" />
<Node Id="10312:[3730..3739).2" Label="param LookupSymbolsInternal(int arity) 729550" />
<Node Id="10312:[3805..3818).2" Label="param LookupSymbolsInternal(bool diagnose) 729551" />
<Node Id="10312:[3905..3919).2" Label="result.IsClear 729552" />
<Node Id="10354:[3684..3818).9" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 729553" />
<Node Id="10354:[3720..3803).61" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729554" />
<Node Id="10354:[3720..3803).62" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729555" />
<Node Id="10354:[3720..3803).63" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729556" />
<Node Id="10312:[3892..3921).4" Label="Debug.Assert(result.IsClear); 729557" />
<Node Id="10312:[3935..3968).5" Label="Debug.Assert(options.AreValid()); 729558" />
<Node Id="10312:[3948..3966).2" Label="options.AreValid() 729559" />
<Node Id="10353:[4698..4724).3" Label="param AreValid(this LookupOptions options) 729560" />
<Node Id="10353:[4750..4847).5" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 729561" />
<Node Id="10353:[4863..5000).9" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 729562" />
<Node Id="10353:[4863..5000).10" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 729563" />
<Node Id="10353:[5079..5183).5" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 729564" />
<Node Id="10353:[5197..5323).7" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 729565" />
<Node Id="10353:[5485..5759).13" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 729566" />
<Node Id="10353:[5485..5759).14" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 729567" />
<Node Id="10353:[5485..5759).15" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 729568" />
<Node Id="10353:[5775..5979).9" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 729569" />
<Node Id="10353:[5775..5979).11" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 729570" />
<Node Id="10353:[5995..6029).7" Label="return OnlyOneBitSet(onlyOptions); 729571" />
<Node Id="10353:[6002..6028).3" Label="OnlyOneBitSet(onlyOptions) 729572" />
<Node Id="10353:[6343..6358).3" Label="param OnlyOneBitSet(LookupOptions o) 729573" />
<Node Id="10353:[6384..6410).13" Label="return (o & (o - 1)) == 0; 729574" />
<Node Id="10353:[6384..6410).14" Label="return (o & (o - 1)) == 0; 729575" />
<Node Id="10312:[5188..5207).2" Label="param LookupSymbolsInSingleBinder(LookupResult result) 729576" />
<Node Id="10312:[5209..5220).2" Label="param LookupSymbolsInSingleBinder(string name) 729577" />
<Node Id="10312:[5222..5231).2" Label="param LookupSymbolsInSingleBinder(int arity) 729578" />
<Node Id="10312:[5233..5272).2" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 729579" />
<Node Id="10312:[5274..5295).2" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 729580" />
<Node Id="10312:[5297..5318).2" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 729581" />
<Node Id="10312:[5320..5333).2" Label="param LookupSymbolsInSingleBinder(bool diagnose) 729582" />
<Node Id="10312:[5124..5404).2" Label="param LookupSymbolsInSingleBinder(this) 729583" />
<Node Id="10312:[4685..4699).4" Label="result.IsClear 729584" />
<Node Id="10354:[3684..3818).10" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 729585" />
<Node Id="10354:[3720..3803).69" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729586" />
<Node Id="10354:[3720..3803).70" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729587" />
<Node Id="10354:[3720..3803).71" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729588" />
<Node Id="10312:[4680..4787).7" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 729589" />
<Node Id="10312:[4826..5058).16" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 729590" />
<Node Id="10312:[4826..5058).17" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 729591" />
<Node Id="10382:[1340..1359).2" Label="param LookupSymbolsInSingleBinder(LookupResult result) 729592" />
<Node Id="10382:[1374..1383).2" Label="param LookupSymbolsInSingleBinder(int arity) 729593" />
<Node Id="10382:[1385..1424).2" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 729594" />
<Node Id="10382:[1426..1447).2" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 729595" />
<Node Id="10382:[1449..1470).2" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 729596" />
<Node Id="10382:[1472..1485).2" Label="param LookupSymbolsInSingleBinder(bool diagnose) 729597" />
<Node Id="10382:[1572..1586).2" Label="result.IsClear 729598" />
<Node Id="10354:[3684..3818).11" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 729599" />
<Node Id="10354:[3720..3803).77" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729600" />
<Node Id="10354:[3720..3803).78" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729601" />
<Node Id="10354:[3720..3803).79" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729602" />
<Node Id="10382:[1559..1588).4" Label="Debug.Assert(result.IsClear); 729603" />
<Node Id="10382:[1619..1629).2" Label="LookupMask 729604" />
<Node Id="10382:[913..1046).2" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 729605" />
<Node Id="10382:[949..1031).3" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 729606" />
<Node Id="10382:[1604..1691).6" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 729607" />
<Node Id="10382:[1604..1691).7" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 729608" />
<Node Id="10382:[1604..1691).8" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 729609" />
<Node Id="10346:[10663..10672).2" Label="param LookupSymbolsInSingleBinder(int arity) 729610" />
<Node Id="10346:[10761..10774).2" Label="param LookupSymbolsInSingleBinder(bool diagnose) 729611" />
<Node Id="10346:[10861..10875).2" Label="result.IsClear 729612" />
<Node Id="10354:[3684..3818).13" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 729613" />
<Node Id="10354:[3720..3803).93" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729614" />
<Node Id="10354:[3720..3803).94" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729615" />
<Node Id="10354:[3720..3803).95" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729616" />
<Node Id="10346:[10848..10877).4" Label="Debug.Assert(result.IsClear); 729617" />
<Node Id="10346:[10897..10914).2" Label="IsSubmissionClass 729618" />
<Node Id="10346:[7666..7775).2" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 729619" />
<Node Id="10346:[7672..7773).4" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 729620" />
<Node Id="10346:[10893..11127).3" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 729621" />
<Node Id="10346:[3525..3638).10" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 729622" />
<Node Id="10346:[11369..11508).18" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 729623" />
<Node Id="10312:[7718..7727).2" Label="param LookupMembersInternal(int arity) 729624" />
<Node Id="10312:[7729..7768).2" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 729625" />
<Node Id="10312:[7816..7829).2" Label="param LookupMembersInternal(bool diagnose) 729626" />
<Node Id="10312:[7615..8420).2" Label="param LookupMembersInternal(this) 729627" />
<Node Id="10312:[7903..7936).5" Label="Debug.Assert(options.AreValid()); 729628" />
<Node Id="10312:[7916..7934).2" Label="options.AreValid() 729629" />
<Node Id="10353:[4698..4724).4" Label="param AreValid(this LookupOptions options) 729630" />
<Node Id="10353:[4750..4847).7" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 729631" />
<Node Id="10353:[4863..5000).13" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 729632" />
<Node Id="10353:[4863..5000).14" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 729633" />
<Node Id="10353:[5079..5183).7" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 729634" />
<Node Id="10353:[5197..5323).10" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 729635" />
<Node Id="10353:[5485..5759).19" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 729636" />
<Node Id="10353:[5485..5759).20" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 729637" />
<Node Id="10353:[5485..5759).21" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 729638" />
<Node Id="10353:[5775..5979).13" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 729639" />
<Node Id="10353:[5775..5979).15" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 729640" />
<Node Id="10353:[5995..6029).10" Label="return OnlyOneBitSet(onlyOptions); 729641" />
<Node Id="10353:[6002..6028).4" Label="OnlyOneBitSet(onlyOptions) 729642" />
<Node Id="10353:[6343..6358).4" Label="param OnlyOneBitSet(LookupOptions o) 729643" />
<Node Id="10353:[6384..6410).19" Label="return (o & (o - 1)) == 0; 729644" />
<Node Id="10353:[6384..6410).20" Label="return (o & (o - 1)) == 0; 729645" />
<Node Id="10312:[7952..7977).5" Label="Debug.Assert(arity $= 0); 729646" />
<Node Id="10312:[7952..7977).6" Label="Debug.Assert(arity $= 0); 729647" />
<Node Id="10312:[19030..19039).2" Label="param LookupMembersInNamespace(int arity) 729648" />
<Node Id="10312:[19087..19100).2" Label="param LookupMembersInNamespace(bool diagnose) 729649" />
<Node Id="10312:[61608..61629).2" Label="param GetCandidateMembers(Binder originalBinder) 729650" />
<Node Id="10312:[63439..63448).2" Label="param CheckViability(int arity) 729651" />
<Node Id="10312:[63473..63501).2" Label="param CheckViability(TypeSymbol accessThroughType) 729652" />
<Node Id="10312:[63503..63516).2" Label="param CheckViability(bool diagnose) 729653" />
<Node Id="10312:[63566..63612).2" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 729654" />
<Node Id="10312:[63638..63668).2" Label="bool inaccessibleViaQualifier; 729655" />
<Node Id="10312:[63682..63706).2" Label="DiagnosticInfo diagInfo; 729656" />
<Node Id="10312:[64353..69285).10" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729657" />
<Node Id="10312:[64353..69285).12" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729658" />
<Node Id="10312:[80978..80991).2" Label="param WrongArity(Symbol symbol) 729659" />
<Node Id="10312:[80993..81002).2" Label="param WrongArity(int arity) 729660" />
<Node Id="10312:[81004..81017).2" Label="param WrongArity(bool diagnose) 729661" />
<Node Id="10312:[81019..81040).2" Label="param WrongArity(LookupOptions options) 729662" />
<Node Id="10312:[81042..81069).2" Label="param WrongArity(out DiagnosticInfo diagInfo) 729663" />
<Node Id="10312:[81095..84034).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 729664" />
<Node Id="10312:[81196..82523).8" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 729665" />
<Node Id="10312:[81196..82523).9" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 729666" />
<Node Id="10312:[81196..82523).10" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 729667" />
<Node Id="10312:[81196..82523).13" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 729668" />
<Node Id="10312:[81319..81371).2" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 729669" />
<Node Id="10312:[81495..81570).6" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 729670" />
<Node Id="10312:[81495..81570).7" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 729671" />
<Node Id="10312:[81596..82500).7" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 729672" />
<Node Id="10312:[81596..82500).8" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 729673" />
<Node Id="10312:[81628..81659).2" Label="options.IsAttributeTypeLookup() 729674" />
<Node Id="10353:[7504..7530).4" Label="param IsAttributeTypeLookup(this LookupOptions options) 729675" />
<Node Id="10312:[81596..82500).11" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 729676" />
<Node Id="10312:[84050..84066).3" Label="diagInfo = null; 729677" />
<Node Id="10312:[66177..69285).16" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729678" />
<Node Id="10312:[66291..66342).2" Label="RefineAccessThroughType(options, accessThroughType) 729679" />
<Node Id="10312:[75301..75322).2" Label="param RefineAccessThroughType(LookupOptions options) 729680" />
<Node Id="10312:[75324..75352).2" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 729681" />
<Node Id="10312:[75735..75866).6" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 729682" />
<Node Id="10312:[75735..75866).7" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 729683" />
<Node Id="10312:[75742..75804).2" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 729684" />
<Node Id="10312:[75735..75866).9" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 729685" />
<Node Id="10312:[66177..69285).19" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729686" />
<Node Id="10312:[66177..69285).21" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 729687" />
<Node Id="10312:[77543..77571).2" Label="param IsAccessible(TypeSymbol accessThroughType) 729688" />
<Node Id="10312:[77573..77604).2" Label="param IsAccessible(out bool failedThroughTypeCheck) 729689" />
<Node Id="10312:[77654..77700).2" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 729690" />
<Node Id="10312:[77501..78044).2" Label="param IsAccessible(this) 729691" />
<Node Id="10312:[77726..77892).5" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 729692" />
<Node Id="10312:[77726..77892).6" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 729693" />
<Node Id="10312:[77730..77782).2" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 729694" />
<Node Id="10298:[471..492).19" Label="param Includes(this BinderFlags self) 729695" />
<Node Id="10298:[494..511).19" Label="param Includes(BinderFlags other) 729696" />
<Node Id="10312:[78402..78430).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 729697" />
<Node Id="10312:[78432..78463).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 729698" />
<Node Id="10312:[78513..78552).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 729699" />
<Node Id="10312:[78346..78783).2" Label="param IsAccessibleHelper(this) 729700" />
<Node Id="10376:[1085..1113).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 729701" />
<Node Id="10376:[1115..1146).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 729702" />
<Node Id="10376:[1196..1235).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 729703" />
<Node Id="10376:[1028..1425).2" Label="param IsAccessibleHelper(this) 729704" />
<Node Id="10286:[30098..30120).2" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 729705" />
<Node Id="10286:[30135..30160).2" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 729706" />
<Node Id="10286:[30175..30206).2" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 729707" />
<Node Id="10286:[30283..30330).2" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 729708" />
<Node Id="10286:[30012..30691).2" Label="param IsSymbolAccessibleConditional(this) 729709" />
<Node Id="10286:[30356..30522).5" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 729710" />
<Node Id="10286:[30356..30522).6" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 729711" />
<Node Id="10286:[30360..30412).2" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 729712" />
<Node Id="10298:[471..492).20" Label="param Includes(this BinderFlags self) 729713" />
<Node Id="10298:[494..511).20" Label="param Includes(BinderFlags other) 729714" />
<Node Id="10060:[2136..2158).2" Label="param IsSymbolAccessible(NamedTypeSymbol within) 729715" />
<Node Id="10060:[2173..2198).2" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 729716" />
<Node Id="10060:[2213..2244).2" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 729717" />
<Node Id="10060:[2320..2366).2" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 729718" />
<Node Id="10060:[5621..5634).2" Label="param IsSymbolAccessibleCore(Symbol within) 729719" />
<Node Id="10060:[5691..5716).2" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 729720" />
<Node Id="10060:[5731..5762).2" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 729721" />
<Node Id="10060:[5777..5806).2" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 729722" />
<Node Id="10060:[5882..5928).2" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 729723" />
<Node Id="10060:[5954..5991).5" Label="Debug.Assert((object)symbol != null); 729724" />
<Node Id="10060:[6005..6042).5" Label="Debug.Assert((object)within != null); 729725" />
<Node Id="10060:[6005..6042).6" Label="Debug.Assert((object)within != null); 729726" />
<Node Id="10060:[6056..6090).3" Label="Debug.Assert(within.IsDefinition); 729727" />
<Node Id="10060:[6104..6172).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 729728" />
<Node Id="10060:[6188..6219).3" Label="failedThroughTypeCheck = false; 729729" />
<Node Id="10060:[10202..10215).2" Label="param IsNamedTypeAccessible(Symbol within) 729730" />
<Node Id="10060:[10265..10311).2" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 729731" />
<Node Id="10060:[10337..10405).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 729732" />
<Node Id="10060:[10419..10454).5" Label="Debug.Assert((object)type != null); 729733" />
<Node Id="10060:[10470..10516).2" Label="var compilation = within.DeclaringCompilation; 729734" />
<Node Id="10060:[10532..10544).2" Label="bool unused; 729735" />
<Node Id="10060:[10558..11295).2" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 729736" />
<Node Id="10060:[11990..12013).2" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 729737" />
<Node Id="10060:[12078..12091).2" Label="param IsNonNestedTypeAccessible(Symbol within) 729738" />
<Node Id="10060:[12117..12185).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 729739" />
<Node Id="10060:[12199..12238).5" Label="Debug.Assert((object)assembly != null); 729740" />
<Node Id="10060:[12199..12238).6" Label="Debug.Assert((object)assembly != null); 729741" />
<Node Id="10346:[11710..11746).2" Label="originalBinder.IsSemanticModelBinder 729742" />
<Node Id="10286:[2155..2260).2" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 729743" />
<Node Id="10286:[2191..2245).5" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 729744" />
<Node Id="10286:[2191..2245).6" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 729745" />
<Node Id="10286:[2198..2244).2" Label="this.Flags.Includes(BinderFlags.SemanticModel) 729746" />
<Node Id="10298:[471..492).22" Label="param Includes(this BinderFlags self) 729747" />
<Node Id="10298:[494..511).22" Label="param Includes(BinderFlags other) 729748" />
<Node Id="10345:[28225..28251).2" Label="param IsUsingAlias(bool callerIsSemanticModel) 729749" />
<Node Id="10345:[28927..28940).3" Label="return false; 729750" />
<Node Id="10346:[12205..12212).2" Label="return; 729751" />
<Node Id="10354:[3720..3803).101" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729752" />
<Node Id="10312:[4680..4787).11" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 729753" />
<Node Id="10312:[4749..4764).2" Label="binder = scope; 729754" />
<Node Id="10312:[5087..5101).2" Label="return binder; 729755" />
<Node Id="10319:[43799..44676).7" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 729756" />
<Node Id="10319:[43853..43873).2" Label="IsViableType(result) 729757" />
<Node Id="10319:[41088..41107).2" Label="param IsViableType(LookupResult result) 729758" />
<Node Id="10319:[41138..41158).2" Label="result.IsMultiViable 729759" />
<Node Id="10354:[4919..5009).13" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 729760" />
<Node Id="10354:[4094..4107).17" Label="return _kind; 729761" />
<Node Id="10319:[41133..41220).3" Label="if (!result.IsMultiViable)
            {
                return false;
            } 729762" />
<Node Id="10319:[41254..41268).2" Label="result.Symbols 729763" />
<Node Id="10354:[4525..4595).3" Label="get
            {
                return _symbolList;
            } 729764" />
<Node Id="10354:[4561..4580).3" Label="return _symbolList; 729765" />
<Node Id="10319:[41236..41680).5" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 729766" />
<Node Id="10319:[41302..41665).2" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 729767" />
<Node Id="10319:[41634..41646).3" Label="return true; 729768" />
<Node Id="10319:[44751..44765).2" Label="bool wasError; 729769" />
<Node Id="10319:[84201..84218).2" Label="param ResultSymbol(string simpleName) 729770" />
<Node Id="10319:[84233..84242).2" Label="param ResultSymbol(int arity) 729771" />
<Node Id="10319:[84257..84273).2" Label="param ResultSymbol(SyntaxNode where) 729772" />
<Node Id="10319:[84288..84313).2" Label="param ResultSymbol(DiagnosticBag diagnostics) 729773" />
<Node Id="10319:[84328..84359).2" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 729774" />
<Node Id="10319:[84374..84391).2" Label="param ResultSymbol(out bool wasError) 729775" />
<Node Id="10319:[84406..84447).2" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 729776" />
<Node Id="10319:[84462..84508).2" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 729777" />
<Node Id="10319:[84124..109887).2" Label="param ResultSymbol(this) 729778" />
<Node Id="10319:[85320..85348).5" Label="Debug.Assert(where != null); 729779" />
<Node Id="10319:[85320..85348).6" Label="Debug.Assert(where != null); 729780" />
<Node Id="10319:[85366..85400).5" Label="Debug.Assert(diagnostics != null); 729781" />
<Node Id="10319:[85366..85400).6" Label="Debug.Assert(diagnostics != null); 729782" />
<Node Id="10319:[85467..85484).3" Label="wasError = false; 729783" />
<Node Id="10319:[104078..104122).2" Label="var singleType = singleResult as TypeSymbol; 729784" />
<Node Id="10319:[104148..106735).7" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 729785" />
<Node Id="10319:[104148..106735).8" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 729786" />
<Node Id="10319:[104148..106735).9" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 729787" />
<Node Id="10319:[104874..105336).4" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 729788" />
<Node Id="10319:[104874..105336).5" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 729789" />
<Node Id="10319:[105368..106708).2" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 729790" />
<Node Id="10319:[105601..106708).3" Label="if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 729791" />
<Node Id="10319:[84691..84861).3" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 729792" />
<Node Id="10319:[84764..84846).7" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729793" />
<Node Id="10319:[84764..84846).8" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729794" />
<Node Id="10319:[84764..84846).10" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729795" />
<Node Id="10319:[84764..84846).11" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 729796" />
<Node Id="10319:[84764..84845).2" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 729797" />
<Node Id="10306:[358886..358901).2" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 729798" />
<Node Id="10306:[358903..358930).2" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 729799" />
<Node Id="10306:[358932..358945).2" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 729800" />
<Node Id="10306:[358947..358972).2" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 729801" />
<Node Id="10306:[358838..360009).2" Label="param CheckRuntimeSupportForSymbolAccess(this) 729802" />
<Node Id="10306:[358998..359998).7" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 729803" />
<Node Id="10306:[358998..359998).8" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 729804" />
<Node Id="10319:[44948..45377).3" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 729805" />
<Node Id="10354:[11428..11441).2" Label="this.Clear(); 729806" />
<Node Id="10319:[45408..45422).2" Label="result.Free(); 729807" />
<Node Id="10287:[2377..2471).3" Label="if (symbol is null)
                {
                    return default;
                } 729808" />
<Node Id="10287:[791..833).3" Label="Debug.Assert(typeWithAnnotations.HasType); 729809" />
<Node Id="10287:[912..927).2" Label="_symbol = null; 729810" />
<Node Id="10287:[912..919).2" Label="_symbol 729811" />
<Node Id="10287:[945..972).2" Label="_isNullableEnabled = false; 729812" />
<Node Id="10287:[945..963).2" Label="_isNullableEnabled 729813" />
<Node Id="10286:[21504..21529).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 729814" />
<Node Id="10286:[21546..21561).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 729815" />
<Node Id="10286:[21563..21583).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 729816" />
<Node Id="10286:[22044..22069).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 729817" />
<Node Id="10286:[22086..22108).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 729818" />
<Node Id="10286:[22110..22130).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 729819" />
<Node Id="10286:[22421..22557).13" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729820" />
<Node Id="10286:[22421..22557).14" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 729821" />
<Node Id="10286:[15616..15690).6" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 729822" />
<Node Id="10286:[15616..15690).7" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 729823" />
<Node Id="10286:[15715..15910).2" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 729824" />
<Node Id="10286:[23056..23081).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 729825" />
<Node Id="10286:[23124..23146).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 729826" />
<Node Id="10286:[23161..23181).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 729827" />
<Node Id="10286:[23281..23301).2" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 729828" />
<Node Id="10286:[23380..23684).8" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 729829" />
<Node Id="10286:[23893..24026).3" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 729830" />
<Node Id="10286:[24545..24641).3" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 729831" />
<Node Id="10286:[24655..25349).2" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 729832" />
<Node Id="10286:[26910..26935).2" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 729833" />
<Node Id="10286:[26952..26974).2" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 729834" />
<Node Id="10286:[27002..27022).2" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 729835" />
<Node Id="10286:[27048..27088).5" Label="RoslynDebug.Assert(diagnostics != null); 729836" />
<Node Id="10286:[27048..27088).6" Label="RoslynDebug.Assert(diagnostics != null); 729837" />
<Node Id="10286:[27208..27236).3" Label="DiagnosticInfo? info = null; 729838" />
<Node Id="10286:[27250..27722).2" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 729839" />
<Node Id="10286:[27738..27845).4" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 729840" />
<Node Id="10286:[27738..27845).5" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 729841" />
<Node Id="10286:[27861..27873).2" Label="return kind; 729842" />
<Node Id="10286:[26281..26812).2" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 729843" />
<Node Id="10286:[26450..26769).2" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 729844" />
<Node Id="10287:[1680..1716).2" Label="=$ _symbol?.Kind == SymbolKind.Alias 729845" />
<Node Id="10287:[1683..1690).2" Label="_symbol 729846" />
<Node Id="10287:[1683..1716).3" Label="_symbol?.Kind == SymbolKind.Alias 729847" />
<Node Id="10319:[51935..52244).3" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 729848" />
<Node Id="10076:[5223..5250).6" Label="Debug.Assert(node != null); 729849" />
<Node Id="10076:[5277..5448).6" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 729850" />
<Node Id="10077:[31258..31297).2" Label="NodeUsage extraInfo = NodeUsage.Normal; 729851" />
<Node Id="10077:[44231..44317).17" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 729852" />
<Node Id="10076:[1089..1109).1" Label="param Equals(BinderCacheKey other) 729853" />
<Node Id="10076:[1050..1225).1" Label="param Equals(this) 729854" />
<Node Id="10076:[1143..1210).1" Label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 729855" />
<Node Id="10286:[1688..1781).7" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 729856" />
<Node Id="10298:[471..492).23" Label="param Includes(this BinderFlags self) 729857" />
<Node Id="10286:[1820..1963).7" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 729858" />
<Node Id="10298:[471..492).24" Label="param Includes(this BinderFlags self) 729859" />
<Node Id="10319:[15146..15291).24" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 729860" />
<Node Id="10319:[20095..20126).3" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 729861" />
<Node Id="10319:[20508..20675).20" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 729862" />
<Node Id="10319:[41983..42014).3" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 729863" />
<Node Id="10319:[42478..42805).7" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 729864" />
<Node Id="10319:[42821..42938).17" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 729865" />
<Node Id="10319:[42839..42937).3" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 729866" />
<Node Id="10319:[63849..63870).3" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 729867" />
<Node Id="10319:[63885..63919).3" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 729868" />
<Node Id="10319:[63934..63945).3" Label="param CreateErrorIfLookupOnTypeParameter(string name) 729869" />
<Node Id="10319:[63960..63969).3" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 729870" />
<Node Id="10319:[63984..64009).3" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 729871" />
<Node Id="10319:[63768..64484).3" Label="param CreateErrorIfLookupOnTypeParameter(this) 729872" />
<Node Id="10319:[64035..64445).9" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 729873" />
<Node Id="10319:[64035..64445).10" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 729874" />
<Node Id="10319:[64461..64473).5" Label="return null; 729875" />
<Node Id="10319:[42821..42938).23" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 729876" />
<Node Id="10319:[42952..43079).7" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 729877" />
<Node Id="10319:[42952..43079).8" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 729878" />
<Node Id="10354:[11312..11328).3" Label="instance.IsClear 729879" />
<Node Id="10354:[3684..3818).15" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 729880" />
<Node Id="10354:[3720..3803).105" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729881" />
<Node Id="10354:[3720..3803).106" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729882" />
<Node Id="10354:[3720..3803).107" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729883" />
<Node Id="10354:[11299..11330).7" Label="Debug.Assert(instance.IsClear); 729884" />
<Node Id="10319:[50330..50355).3" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 729885" />
<Node Id="10312:[1222..1235).3" Label="param LookupSymbolsSimpleName(bool diagnose) 729886" />
<Node Id="10312:[5944..5957).3" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 729887" />
<Node Id="10312:[3805..3818).3" Label="param LookupSymbolsInternal(bool diagnose) 729888" />
<Node Id="10312:[3905..3919).3" Label="result.IsClear 729889" />
<Node Id="10354:[3684..3818).16" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 729890" />
<Node Id="10354:[3720..3803).113" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729891" />
<Node Id="10354:[3720..3803).114" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729892" />
<Node Id="10354:[3720..3803).115" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729893" />
<Node Id="10312:[3892..3921).7" Label="Debug.Assert(result.IsClear); 729894" />
<Node Id="10312:[3935..3968).9" Label="Debug.Assert(options.AreValid()); 729895" />
<Node Id="10312:[3948..3966).3" Label="options.AreValid() 729896" />
<Node Id="10353:[4698..4724).5" Label="param AreValid(this LookupOptions options) 729897" />
<Node Id="10353:[4750..4847).9" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 729898" />
<Node Id="10353:[4863..5000).17" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 729899" />
<Node Id="10353:[4863..5000).18" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 729900" />
<Node Id="10353:[5079..5183).9" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 729901" />
<Node Id="10353:[5197..5323).13" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 729902" />
<Node Id="10353:[5485..5759).25" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 729903" />
<Node Id="10353:[5485..5759).26" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 729904" />
<Node Id="10353:[5485..5759).27" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 729905" />
<Node Id="10353:[5775..5979).17" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 729906" />
<Node Id="10353:[5775..5979).19" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 729907" />
<Node Id="10353:[5995..6029).13" Label="return OnlyOneBitSet(onlyOptions); 729908" />
<Node Id="10353:[6002..6028).5" Label="OnlyOneBitSet(onlyOptions) 729909" />
<Node Id="10353:[6343..6358).5" Label="param OnlyOneBitSet(LookupOptions o) 729910" />
<Node Id="10353:[6384..6410).25" Label="return (o & (o - 1)) == 0; 729911" />
<Node Id="10353:[6384..6410).26" Label="return (o & (o - 1)) == 0; 729912" />
<Node Id="10312:[5188..5207).3" Label="param LookupSymbolsInSingleBinder(LookupResult result) 729913" />
<Node Id="10312:[5209..5220).3" Label="param LookupSymbolsInSingleBinder(string name) 729914" />
<Node Id="10312:[5222..5231).3" Label="param LookupSymbolsInSingleBinder(int arity) 729915" />
<Node Id="10312:[5233..5272).3" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 729916" />
<Node Id="10312:[5274..5295).3" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 729917" />
<Node Id="10312:[5297..5318).3" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 729918" />
<Node Id="10312:[5320..5333).3" Label="param LookupSymbolsInSingleBinder(bool diagnose) 729919" />
<Node Id="10312:[5124..5404).3" Label="param LookupSymbolsInSingleBinder(this) 729920" />
<Node Id="10312:[4685..4699).7" Label="result.IsClear 729921" />
<Node Id="10354:[3684..3818).17" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 729922" />
<Node Id="10354:[3720..3803).121" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729923" />
<Node Id="10354:[3720..3803).122" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729924" />
<Node Id="10354:[3720..3803).123" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729925" />
<Node Id="10312:[4680..4787).13" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 729926" />
<Node Id="10312:[4826..5058).31" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 729927" />
<Node Id="10312:[4826..5058).32" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 729928" />
<Node Id="10382:[1340..1359).3" Label="param LookupSymbolsInSingleBinder(LookupResult result) 729929" />
<Node Id="10382:[1374..1383).3" Label="param LookupSymbolsInSingleBinder(int arity) 729930" />
<Node Id="10382:[1385..1424).3" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 729931" />
<Node Id="10382:[1426..1447).3" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 729932" />
<Node Id="10382:[1449..1470).3" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 729933" />
<Node Id="10382:[1472..1485).3" Label="param LookupSymbolsInSingleBinder(bool diagnose) 729934" />
<Node Id="10382:[1572..1586).3" Label="result.IsClear 729935" />
<Node Id="10354:[3684..3818).18" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 729936" />
<Node Id="10354:[3720..3803).129" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729937" />
<Node Id="10354:[3720..3803).130" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729938" />
<Node Id="10354:[3720..3803).131" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729939" />
<Node Id="10382:[1559..1588).7" Label="Debug.Assert(result.IsClear); 729940" />
<Node Id="10382:[1619..1629).3" Label="LookupMask 729941" />
<Node Id="10382:[913..1046).3" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 729942" />
<Node Id="10382:[949..1031).5" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 729943" />
<Node Id="10382:[1604..1691).11" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 729944" />
<Node Id="10382:[1604..1691).12" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 729945" />
<Node Id="10382:[1604..1691).13" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 729946" />
<Node Id="10346:[10761..10774).3" Label="param LookupSymbolsInSingleBinder(bool diagnose) 729947" />
<Node Id="10346:[10861..10875).3" Label="result.IsClear 729948" />
<Node Id="10354:[3684..3818).20" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 729949" />
<Node Id="10354:[3720..3803).145" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729950" />
<Node Id="10354:[3720..3803).146" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729951" />
<Node Id="10354:[3720..3803).147" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 729952" />
<Node Id="10346:[10848..10877).7" Label="Debug.Assert(result.IsClear); 729953" />
<Node Id="10346:[10897..10914).3" Label="IsSubmissionClass 729954" />
<Node Id="10346:[7666..7775).3" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 729955" />
<Node Id="10346:[7672..7773).7" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 729956" />
<Node Id="10346:[10893..11127).5" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 729957" />
<Node Id="10346:[3525..3638).17" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 729958" />
<Node Id="10312:[7729..7768).3" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 729959" />
<Node Id="10312:[7816..7829).3" Label="param LookupMembersInternal(bool diagnose) 729960" />
<Node Id="10312:[7615..8420).3" Label="param LookupMembersInternal(this) 729961" />
<Node Id="10312:[7903..7936).9" Label="Debug.Assert(options.AreValid()); 729962" />
<Node Id="10312:[7916..7934).3" Label="options.AreValid() 729963" />
<Node Id="10353:[4698..4724).6" Label="param AreValid(this LookupOptions options) 729964" />
<Node Id="10353:[4750..4847).11" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 729965" />
<Node Id="10353:[4863..5000).21" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 729966" />
<Node Id="10353:[4863..5000).22" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 729967" />
<Node Id="10353:[5079..5183).11" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 729968" />
<Node Id="10353:[5197..5323).16" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 729969" />
<Node Id="10353:[5485..5759).31" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 729970" />
<Node Id="10353:[5485..5759).32" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 729971" />
<Node Id="10353:[5485..5759).33" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 729972" />
<Node Id="10353:[5775..5979).21" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 729973" />
<Node Id="10353:[5775..5979).23" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 729974" />
<Node Id="10353:[5995..6029).16" Label="return OnlyOneBitSet(onlyOptions); 729975" />
<Node Id="10353:[6002..6028).6" Label="OnlyOneBitSet(onlyOptions) 729976" />
<Node Id="10353:[6343..6358).6" Label="param OnlyOneBitSet(LookupOptions o) 729977" />
<Node Id="10353:[6384..6410).31" Label="return (o & (o - 1)) == 0; 729978" />
<Node Id="10353:[6384..6410).32" Label="return (o & (o - 1)) == 0; 729979" />
<Node Id="10312:[7952..7977).9" Label="Debug.Assert(arity $= 0); 729980" />
<Node Id="10312:[19087..19100).3" Label="param LookupMembersInNamespace(bool diagnose) 729981" />
<Node Id="10312:[61608..61629).3" Label="param GetCandidateMembers(Binder originalBinder) 729982" />
<Node Id="10312:[63439..63448).3" Label="param CheckViability(int arity) 729983" />
<Node Id="10312:[63473..63501).3" Label="param CheckViability(TypeSymbol accessThroughType) 729984" />
<Node Id="10312:[63503..63516).3" Label="param CheckViability(bool diagnose) 729985" />
<Node Id="10312:[63566..63612).3" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 729986" />
<Node Id="10312:[63638..63668).3" Label="bool inaccessibleViaQualifier; 729987" />
<Node Id="10312:[63682..63706).3" Label="DiagnosticInfo diagInfo; 729988" />
<Node Id="10312:[80978..80991).3" Label="param WrongArity(Symbol symbol) 729989" />
<Node Id="10312:[80993..81002).3" Label="param WrongArity(int arity) 729990" />
<Node Id="10312:[81004..81017).3" Label="param WrongArity(bool diagnose) 729991" />
<Node Id="10312:[81019..81040).3" Label="param WrongArity(LookupOptions options) 729992" />
<Node Id="10312:[81042..81069).3" Label="param WrongArity(out DiagnosticInfo diagInfo) 729993" />
<Node Id="10312:[81095..84034).3" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 729994" />
<Node Id="10312:[81196..82523).15" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 729995" />
<Node Id="10312:[81196..82523).16" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 729996" />
<Node Id="10312:[81196..82523).17" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 729997" />
<Node Id="10312:[81196..82523).20" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 729998" />
<Node Id="10312:[81319..81371).3" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 729999" />
<Node Id="10312:[81495..81570).11" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 730000" />
<Node Id="10312:[81495..81570).12" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 730001" />
<Node Id="10312:[81596..82500).13" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 730002" />
<Node Id="10312:[81596..82500).14" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 730003" />
<Node Id="10312:[81628..81659).3" Label="options.IsAttributeTypeLookup() 730004" />
<Node Id="10353:[7504..7530).6" Label="param IsAttributeTypeLookup(this LookupOptions options) 730005" />
<Node Id="10312:[81596..82500).17" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 730006" />
<Node Id="10312:[84050..84066).5" Label="diagInfo = null; 730007" />
<Node Id="10312:[66177..69285).28" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 730008" />
<Node Id="10312:[66291..66342).3" Label="RefineAccessThroughType(options, accessThroughType) 730009" />
<Node Id="10312:[75301..75322).3" Label="param RefineAccessThroughType(LookupOptions options) 730010" />
<Node Id="10312:[75324..75352).3" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 730011" />
<Node Id="10312:[75735..75866).11" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 730012" />
<Node Id="10312:[75735..75866).12" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 730013" />
<Node Id="10312:[75742..75804).3" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 730014" />
<Node Id="10312:[75735..75866).14" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 730015" />
<Node Id="10312:[66177..69285).31" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 730016" />
<Node Id="10312:[66177..69285).32" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 730017" />
<Node Id="10312:[66177..69285).33" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 730018" />
<Node Id="10312:[77543..77571).3" Label="param IsAccessible(TypeSymbol accessThroughType) 730019" />
<Node Id="10312:[77573..77604).3" Label="param IsAccessible(out bool failedThroughTypeCheck) 730020" />
<Node Id="10312:[77654..77700).3" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 730021" />
<Node Id="10312:[77501..78044).3" Label="param IsAccessible(this) 730022" />
<Node Id="10312:[77726..77892).9" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 730023" />
<Node Id="10312:[77726..77892).10" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 730024" />
<Node Id="10312:[77730..77782).3" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 730025" />
<Node Id="10298:[471..492).28" Label="param Includes(this BinderFlags self) 730026" />
<Node Id="10298:[494..511).28" Label="param Includes(BinderFlags other) 730027" />
<Node Id="10312:[78402..78430).3" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 730028" />
<Node Id="10312:[78432..78463).3" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 730029" />
<Node Id="10312:[78513..78552).3" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 730030" />
<Node Id="10312:[78346..78783).3" Label="param IsAccessibleHelper(this) 730031" />
<Node Id="10376:[1085..1113).3" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 730032" />
<Node Id="10376:[1115..1146).3" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 730033" />
<Node Id="10376:[1196..1235).3" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 730034" />
<Node Id="10376:[1028..1425).3" Label="param IsAccessibleHelper(this) 730035" />
<Node Id="10286:[30098..30120).3" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 730036" />
<Node Id="10286:[30135..30160).3" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 730037" />
<Node Id="10286:[30175..30206).3" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 730038" />
<Node Id="10286:[30283..30330).3" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 730039" />
<Node Id="10286:[30012..30691).3" Label="param IsSymbolAccessibleConditional(this) 730040" />
<Node Id="10286:[30356..30522).9" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 730041" />
<Node Id="10286:[30356..30522).10" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 730042" />
<Node Id="10286:[30360..30412).3" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 730043" />
<Node Id="10298:[471..492).29" Label="param Includes(this BinderFlags self) 730044" />
<Node Id="10298:[494..511).29" Label="param Includes(BinderFlags other) 730045" />
<Node Id="10060:[2136..2158).3" Label="param IsSymbolAccessible(NamedTypeSymbol within) 730046" />
<Node Id="10060:[2173..2198).3" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 730047" />
<Node Id="10060:[2213..2244).3" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 730048" />
<Node Id="10060:[2320..2366).3" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 730049" />
<Node Id="10060:[5621..5634).3" Label="param IsSymbolAccessibleCore(Symbol within) 730050" />
<Node Id="10060:[5691..5716).3" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 730051" />
<Node Id="10060:[5731..5762).3" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 730052" />
<Node Id="10060:[5777..5806).3" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 730053" />
<Node Id="10060:[5882..5928).3" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 730054" />
<Node Id="10060:[5954..5991).9" Label="Debug.Assert((object)symbol != null); 730055" />
<Node Id="10060:[6005..6042).9" Label="Debug.Assert((object)within != null); 730056" />
<Node Id="10060:[6005..6042).10" Label="Debug.Assert((object)within != null); 730057" />
<Node Id="10060:[6056..6090).5" Label="Debug.Assert(within.IsDefinition); 730058" />
<Node Id="10060:[6104..6172).7" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730059" />
<Node Id="10060:[6188..6219).5" Label="failedThroughTypeCheck = false; 730060" />
<Node Id="10060:[10202..10215).3" Label="param IsNamedTypeAccessible(Symbol within) 730061" />
<Node Id="10060:[10265..10311).3" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 730062" />
<Node Id="10060:[10337..10405).7" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730063" />
<Node Id="10060:[10419..10454).9" Label="Debug.Assert((object)type != null); 730064" />
<Node Id="10060:[10470..10516).3" Label="var compilation = within.DeclaringCompilation; 730065" />
<Node Id="10060:[10532..10544).3" Label="bool unused; 730066" />
<Node Id="10060:[10558..11295).3" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 730067" />
<Node Id="10060:[11990..12013).3" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 730068" />
<Node Id="10060:[12078..12091).3" Label="param IsNonNestedTypeAccessible(Symbol within) 730069" />
<Node Id="10060:[12117..12185).7" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730070" />
<Node Id="10060:[12199..12238).9" Label="Debug.Assert((object)assembly != null); 730071" />
<Node Id="10060:[12199..12238).10" Label="Debug.Assert((object)assembly != null); 730072" />
<Node Id="10346:[11710..11746).3" Label="originalBinder.IsSemanticModelBinder 730073" />
<Node Id="10286:[2155..2260).3" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 730074" />
<Node Id="10286:[2191..2245).9" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 730075" />
<Node Id="10286:[2191..2245).10" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 730076" />
<Node Id="10286:[2198..2244).3" Label="this.Flags.Includes(BinderFlags.SemanticModel) 730077" />
<Node Id="10298:[471..492).31" Label="param Includes(this BinderFlags self) 730078" />
<Node Id="10298:[494..511).31" Label="param Includes(BinderFlags other) 730079" />
<Node Id="10345:[28225..28251).3" Label="param IsUsingAlias(bool callerIsSemanticModel) 730080" />
<Node Id="10345:[28927..28940).5" Label="return false; 730081" />
<Node Id="10346:[12205..12212).3" Label="return; 730082" />
<Node Id="10354:[3720..3803).153" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730083" />
<Node Id="10312:[4680..4787).17" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 730084" />
<Node Id="10312:[4749..4764).3" Label="binder = scope; 730085" />
<Node Id="10312:[5087..5101).3" Label="return binder; 730086" />
<Node Id="10319:[43799..44676).13" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 730087" />
<Node Id="10319:[43853..43873).3" Label="IsViableType(result) 730088" />
<Node Id="10319:[41088..41107).3" Label="param IsViableType(LookupResult result) 730089" />
<Node Id="10319:[41138..41158).3" Label="result.IsMultiViable 730090" />
<Node Id="10354:[4919..5009).20" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 730091" />
<Node Id="10354:[4094..4107).26" Label="return _kind; 730092" />
<Node Id="10319:[41133..41220).5" Label="if (!result.IsMultiViable)
            {
                return false;
            } 730093" />
<Node Id="10319:[41254..41268).3" Label="result.Symbols 730094" />
<Node Id="10354:[4525..4595).5" Label="get
            {
                return _symbolList;
            } 730095" />
<Node Id="10354:[4561..4580).5" Label="return _symbolList; 730096" />
<Node Id="10319:[41236..41680).9" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 730097" />
<Node Id="10319:[41302..41665).3" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 730098" />
<Node Id="10319:[41634..41646).5" Label="return true; 730099" />
<Node Id="10319:[44751..44765).3" Label="bool wasError; 730100" />
<Node Id="10319:[84201..84218).3" Label="param ResultSymbol(string simpleName) 730101" />
<Node Id="10319:[84233..84242).3" Label="param ResultSymbol(int arity) 730102" />
<Node Id="10319:[84257..84273).3" Label="param ResultSymbol(SyntaxNode where) 730103" />
<Node Id="10319:[84288..84313).3" Label="param ResultSymbol(DiagnosticBag diagnostics) 730104" />
<Node Id="10319:[84328..84359).3" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 730105" />
<Node Id="10319:[84374..84391).3" Label="param ResultSymbol(out bool wasError) 730106" />
<Node Id="10319:[84406..84447).3" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 730107" />
<Node Id="10319:[84462..84508).3" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 730108" />
<Node Id="10319:[84124..109887).3" Label="param ResultSymbol(this) 730109" />
<Node Id="10319:[85320..85348).9" Label="Debug.Assert(where != null); 730110" />
<Node Id="10319:[85320..85348).10" Label="Debug.Assert(where != null); 730111" />
<Node Id="10319:[85366..85400).9" Label="Debug.Assert(diagnostics != null); 730112" />
<Node Id="10319:[85366..85400).10" Label="Debug.Assert(diagnostics != null); 730113" />
<Node Id="10319:[85467..85484).5" Label="wasError = false; 730114" />
<Node Id="10319:[104078..104122).3" Label="var singleType = singleResult as TypeSymbol; 730115" />
<Node Id="10319:[104148..106735).13" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 730116" />
<Node Id="10319:[104148..106735).14" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 730117" />
<Node Id="10319:[104148..106735).15" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 730118" />
<Node Id="10319:[104874..105336).7" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 730119" />
<Node Id="10319:[104874..105336).8" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 730120" />
<Node Id="10319:[105368..106708).3" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 730121" />
<Node Id="10319:[105465..105535).1" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730122" />
<Node Id="10319:[105465..105535).2" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730123" />
<Node Id="10319:[105465..105535).3" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730124" />
<Node Id="10319:[105476..105534).1" Label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 730125" />
<Node Id="10319:[76345..76358).1" Label="param ReportUseSiteDiagnostics(Symbol symbol) 730126" />
<Node Id="10319:[76360..76385).1" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 730127" />
<Node Id="10319:[76387..76402).1" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 730128" />
<Node Id="10319:[76428..76480).1" Label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 730129" />
<Node Id="10319:[76494..76582).1" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 730130" />
<Node Id="10319:[76494..76582).2" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 730131" />
<Node Id="10319:[84691..84861).5" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 730132" />
<Node Id="10319:[84764..84846).13" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730133" />
<Node Id="10319:[84764..84846).14" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730134" />
<Node Id="10319:[84764..84846).16" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730135" />
<Node Id="10319:[84764..84846).17" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730136" />
<Node Id="10319:[84764..84845).3" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 730137" />
<Node Id="10306:[358886..358901).3" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 730138" />
<Node Id="10306:[358903..358930).3" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 730139" />
<Node Id="10306:[358932..358945).3" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 730140" />
<Node Id="10306:[358947..358972).3" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 730141" />
<Node Id="10306:[358838..360009).3" Label="param CheckRuntimeSupportForSymbolAccess(this) 730142" />
<Node Id="10306:[358998..359998).13" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 730143" />
<Node Id="10306:[358998..359998).14" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 730144" />
<Node Id="10319:[44948..45377).5" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 730145" />
<Node Id="10354:[11428..11441).3" Label="this.Clear(); 730146" />
<Node Id="10319:[45408..45422).3" Label="result.Free(); 730147" />
<Node Id="10287:[2377..2471).5" Label="if (symbol is null)
                {
                    return default;
                } 730148" />
<Node Id="10287:[791..833).5" Label="Debug.Assert(typeWithAnnotations.HasType); 730149" />
<Node Id="10287:[912..927).3" Label="_symbol = null; 730150" />
<Node Id="10287:[912..919).3" Label="_symbol 730151" />
<Node Id="10287:[945..972).3" Label="_isNullableEnabled = false; 730152" />
<Node Id="10287:[945..963).3" Label="_isNullableEnabled 730153" />
<Node Id="10286:[21546..21561).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 730154" />
<Node Id="10286:[21563..21583).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730155" />
<Node Id="10286:[22044..22069).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 730156" />
<Node Id="10286:[22086..22108).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 730157" />
<Node Id="10286:[22110..22130).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730158" />
<Node Id="10286:[15616..15690).11" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 730159" />
<Node Id="10286:[15616..15690).12" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 730160" />
<Node Id="10286:[15715..15910).3" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 730161" />
<Node Id="10286:[23056..23081).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 730162" />
<Node Id="10286:[23124..23146).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 730163" />
<Node Id="10286:[23161..23181).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730164" />
<Node Id="10286:[23281..23301).3" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 730165" />
<Node Id="10286:[23380..23684).15" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 730166" />
<Node Id="10286:[23893..24026).5" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 730167" />
<Node Id="10286:[24545..24641).5" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 730168" />
<Node Id="10286:[24655..25349).3" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 730169" />
<Node Id="10286:[26910..26935).3" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 730170" />
<Node Id="10286:[26952..26974).3" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 730171" />
<Node Id="10286:[27002..27022).3" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 730172" />
<Node Id="10286:[27048..27088).9" Label="RoslynDebug.Assert(diagnostics != null); 730173" />
<Node Id="10286:[27048..27088).10" Label="RoslynDebug.Assert(diagnostics != null); 730174" />
<Node Id="10286:[27208..27236).5" Label="DiagnosticInfo? info = null; 730175" />
<Node Id="10286:[27250..27722).3" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 730176" />
<Node Id="10286:[27738..27845).7" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 730177" />
<Node Id="10286:[27738..27845).8" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 730178" />
<Node Id="10286:[27861..27873).3" Label="return kind; 730179" />
<Node Id="10286:[26281..26812).3" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 730180" />
<Node Id="10286:[26450..26769).3" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 730181" />
<Node Id="10287:[1680..1716).3" Label="=$ _symbol?.Kind == SymbolKind.Alias 730182" />
<Node Id="10287:[1683..1690).3" Label="_symbol 730183" />
<Node Id="10287:[1683..1716).5" Label="_symbol?.Kind == SymbolKind.Alias 730184" />
<Node Id="10319:[51935..52244).5" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 730185" />
<Node Id="10319:[42478..42805).10" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 730186" />
<Node Id="10319:[42821..42938).25" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 730187" />
<Node Id="10319:[42839..42937).4" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 730188" />
<Node Id="10319:[63849..63870).4" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 730189" />
<Node Id="10319:[63885..63919).4" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 730190" />
<Node Id="10319:[63934..63945).4" Label="param CreateErrorIfLookupOnTypeParameter(string name) 730191" />
<Node Id="10319:[63960..63969).4" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 730192" />
<Node Id="10319:[63984..64009).4" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 730193" />
<Node Id="10319:[63768..64484).4" Label="param CreateErrorIfLookupOnTypeParameter(this) 730194" />
<Node Id="10319:[64035..64445).13" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 730195" />
<Node Id="10319:[64035..64445).14" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 730196" />
<Node Id="10319:[64461..64473).7" Label="return null; 730197" />
<Node Id="10319:[42821..42938).31" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 730198" />
<Node Id="10319:[42952..43079).10" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 730199" />
<Node Id="10319:[42952..43079).11" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 730200" />
<Node Id="10354:[11312..11328).4" Label="instance.IsClear 730201" />
<Node Id="10354:[3684..3818).22" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730202" />
<Node Id="10354:[3720..3803).157" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730203" />
<Node Id="10354:[3720..3803).158" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730204" />
<Node Id="10354:[3720..3803).159" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730205" />
<Node Id="10354:[11299..11330).10" Label="Debug.Assert(instance.IsClear); 730206" />
<Node Id="10319:[50330..50355).4" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 730207" />
<Node Id="10312:[3905..3919).4" Label="result.IsClear 730208" />
<Node Id="10354:[3684..3818).23" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730209" />
<Node Id="10354:[3720..3803).165" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730210" />
<Node Id="10354:[3720..3803).166" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730211" />
<Node Id="10354:[3720..3803).167" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730212" />
<Node Id="10312:[3892..3921).10" Label="Debug.Assert(result.IsClear); 730213" />
<Node Id="10312:[3935..3968).13" Label="Debug.Assert(options.AreValid()); 730214" />
<Node Id="10312:[3948..3966).4" Label="options.AreValid() 730215" />
<Node Id="10353:[4698..4724).7" Label="param AreValid(this LookupOptions options) 730216" />
<Node Id="10353:[4750..4847).13" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 730217" />
<Node Id="10353:[4863..5000).25" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 730218" />
<Node Id="10353:[4863..5000).26" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 730219" />
<Node Id="10353:[5079..5183).13" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 730220" />
<Node Id="10353:[5197..5323).19" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 730221" />
<Node Id="10353:[5485..5759).37" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730222" />
<Node Id="10353:[5485..5759).38" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730223" />
<Node Id="10353:[5485..5759).39" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730224" />
<Node Id="10353:[5775..5979).25" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 730225" />
<Node Id="10353:[5775..5979).27" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 730226" />
<Node Id="10353:[5995..6029).19" Label="return OnlyOneBitSet(onlyOptions); 730227" />
<Node Id="10353:[6002..6028).7" Label="OnlyOneBitSet(onlyOptions) 730228" />
<Node Id="10353:[6343..6358).7" Label="param OnlyOneBitSet(LookupOptions o) 730229" />
<Node Id="10353:[6384..6410).37" Label="return (o & (o - 1)) == 0; 730230" />
<Node Id="10353:[6384..6410).38" Label="return (o & (o - 1)) == 0; 730231" />
<Node Id="10312:[5188..5207).4" Label="param LookupSymbolsInSingleBinder(LookupResult result) 730232" />
<Node Id="10312:[5209..5220).4" Label="param LookupSymbolsInSingleBinder(string name) 730233" />
<Node Id="10312:[5222..5231).4" Label="param LookupSymbolsInSingleBinder(int arity) 730234" />
<Node Id="10312:[5233..5272).4" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 730235" />
<Node Id="10312:[5274..5295).4" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 730236" />
<Node Id="10312:[5297..5318).4" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 730237" />
<Node Id="10312:[5320..5333).4" Label="param LookupSymbolsInSingleBinder(bool diagnose) 730238" />
<Node Id="10312:[5124..5404).4" Label="param LookupSymbolsInSingleBinder(this) 730239" />
<Node Id="10312:[4685..4699).10" Label="result.IsClear 730240" />
<Node Id="10354:[3684..3818).24" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730241" />
<Node Id="10354:[3720..3803).173" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730242" />
<Node Id="10354:[3720..3803).174" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730243" />
<Node Id="10354:[3720..3803).175" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730244" />
<Node Id="10312:[4680..4787).19" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 730245" />
<Node Id="10312:[4826..5058).46" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 730246" />
<Node Id="10312:[4826..5058).47" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 730247" />
<Node Id="10382:[1340..1359).4" Label="param LookupSymbolsInSingleBinder(LookupResult result) 730248" />
<Node Id="10382:[1374..1383).4" Label="param LookupSymbolsInSingleBinder(int arity) 730249" />
<Node Id="10382:[1385..1424).4" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 730250" />
<Node Id="10382:[1426..1447).4" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 730251" />
<Node Id="10382:[1449..1470).4" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 730252" />
<Node Id="10382:[1472..1485).4" Label="param LookupSymbolsInSingleBinder(bool diagnose) 730253" />
<Node Id="10382:[1572..1586).4" Label="result.IsClear 730254" />
<Node Id="10354:[3684..3818).25" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730255" />
<Node Id="10354:[3720..3803).181" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730256" />
<Node Id="10354:[3720..3803).182" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730257" />
<Node Id="10354:[3720..3803).183" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730258" />
<Node Id="10382:[1559..1588).10" Label="Debug.Assert(result.IsClear); 730259" />
<Node Id="10382:[1619..1629).4" Label="LookupMask 730260" />
<Node Id="10382:[913..1046).4" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 730261" />
<Node Id="10382:[949..1031).7" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 730262" />
<Node Id="10382:[1604..1691).16" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 730263" />
<Node Id="10382:[1604..1691).17" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 730264" />
<Node Id="10382:[1604..1691).18" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 730265" />
<Node Id="10346:[10861..10875).4" Label="result.IsClear 730266" />
<Node Id="10354:[3684..3818).27" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730267" />
<Node Id="10354:[3720..3803).197" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730268" />
<Node Id="10354:[3720..3803).198" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730269" />
<Node Id="10354:[3720..3803).199" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730270" />
<Node Id="10346:[10848..10877).10" Label="Debug.Assert(result.IsClear); 730271" />
<Node Id="10346:[10897..10914).4" Label="IsSubmissionClass 730272" />
<Node Id="10346:[7666..7775).4" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 730273" />
<Node Id="10346:[7672..7773).10" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 730274" />
<Node Id="10346:[10893..11127).7" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 730275" />
<Node Id="10346:[3525..3638).24" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 730276" />
<Node Id="10312:[7729..7768).4" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 730277" />
<Node Id="10312:[7615..8420).4" Label="param LookupMembersInternal(this) 730278" />
<Node Id="10312:[7903..7936).13" Label="Debug.Assert(options.AreValid()); 730279" />
<Node Id="10312:[7916..7934).4" Label="options.AreValid() 730280" />
<Node Id="10353:[4698..4724).8" Label="param AreValid(this LookupOptions options) 730281" />
<Node Id="10353:[4750..4847).15" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 730282" />
<Node Id="10353:[4863..5000).29" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 730283" />
<Node Id="10353:[4863..5000).30" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 730284" />
<Node Id="10353:[5079..5183).15" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 730285" />
<Node Id="10353:[5197..5323).22" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 730286" />
<Node Id="10353:[5485..5759).43" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730287" />
<Node Id="10353:[5485..5759).44" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730288" />
<Node Id="10353:[5485..5759).45" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730289" />
<Node Id="10353:[5775..5979).29" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 730290" />
<Node Id="10353:[5775..5979).31" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 730291" />
<Node Id="10353:[5995..6029).22" Label="return OnlyOneBitSet(onlyOptions); 730292" />
<Node Id="10353:[6002..6028).8" Label="OnlyOneBitSet(onlyOptions) 730293" />
<Node Id="10353:[6343..6358).8" Label="param OnlyOneBitSet(LookupOptions o) 730294" />
<Node Id="10353:[6384..6410).43" Label="return (o & (o - 1)) == 0; 730295" />
<Node Id="10353:[6384..6410).44" Label="return (o & (o - 1)) == 0; 730296" />
<Node Id="10312:[7952..7977).13" Label="Debug.Assert(arity $= 0); 730297" />
<Node Id="10312:[61608..61629).4" Label="param GetCandidateMembers(Binder originalBinder) 730298" />
<Node Id="10312:[63473..63501).4" Label="param CheckViability(TypeSymbol accessThroughType) 730299" />
<Node Id="10312:[63503..63516).4" Label="param CheckViability(bool diagnose) 730300" />
<Node Id="10312:[63566..63612).4" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 730301" />
<Node Id="10312:[63638..63668).4" Label="bool inaccessibleViaQualifier; 730302" />
<Node Id="10312:[63682..63706).4" Label="DiagnosticInfo diagInfo; 730303" />
<Node Id="10312:[80978..80991).4" Label="param WrongArity(Symbol symbol) 730304" />
<Node Id="10312:[80993..81002).4" Label="param WrongArity(int arity) 730305" />
<Node Id="10312:[81004..81017).4" Label="param WrongArity(bool diagnose) 730306" />
<Node Id="10312:[81019..81040).4" Label="param WrongArity(LookupOptions options) 730307" />
<Node Id="10312:[81042..81069).4" Label="param WrongArity(out DiagnosticInfo diagInfo) 730308" />
<Node Id="10312:[81095..84034).4" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 730309" />
<Node Id="10312:[81196..82523).22" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 730310" />
<Node Id="10312:[81196..82523).23" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 730311" />
<Node Id="10312:[81196..82523).24" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 730312" />
<Node Id="10312:[81196..82523).27" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 730313" />
<Node Id="10312:[81319..81371).4" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 730314" />
<Node Id="10312:[81495..81570).16" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 730315" />
<Node Id="10312:[81495..81570).17" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 730316" />
<Node Id="10312:[81596..82500).19" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 730317" />
<Node Id="10312:[81596..82500).20" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 730318" />
<Node Id="10312:[81628..81659).4" Label="options.IsAttributeTypeLookup() 730319" />
<Node Id="10353:[7504..7530).8" Label="param IsAttributeTypeLookup(this LookupOptions options) 730320" />
<Node Id="10312:[81596..82500).23" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 730321" />
<Node Id="10312:[84050..84066).7" Label="diagInfo = null; 730322" />
<Node Id="10312:[66177..69285).40" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 730323" />
<Node Id="10312:[66291..66342).4" Label="RefineAccessThroughType(options, accessThroughType) 730324" />
<Node Id="10312:[75301..75322).4" Label="param RefineAccessThroughType(LookupOptions options) 730325" />
<Node Id="10312:[75324..75352).4" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 730326" />
<Node Id="10312:[75735..75866).16" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 730327" />
<Node Id="10312:[75735..75866).17" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 730328" />
<Node Id="10312:[75742..75804).4" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 730329" />
<Node Id="10312:[75735..75866).19" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 730330" />
<Node Id="10312:[66177..69285).43" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 730331" />
<Node Id="10312:[66177..69285).45" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 730332" />
<Node Id="10312:[77543..77571).4" Label="param IsAccessible(TypeSymbol accessThroughType) 730333" />
<Node Id="10312:[77573..77604).4" Label="param IsAccessible(out bool failedThroughTypeCheck) 730334" />
<Node Id="10312:[77654..77700).4" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 730335" />
<Node Id="10312:[77501..78044).4" Label="param IsAccessible(this) 730336" />
<Node Id="10312:[77726..77892).13" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 730337" />
<Node Id="10312:[77726..77892).14" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 730338" />
<Node Id="10312:[77730..77782).4" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 730339" />
<Node Id="10298:[471..492).35" Label="param Includes(this BinderFlags self) 730340" />
<Node Id="10298:[494..511).35" Label="param Includes(BinderFlags other) 730341" />
<Node Id="10312:[78402..78430).4" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 730342" />
<Node Id="10312:[78432..78463).4" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 730343" />
<Node Id="10312:[78513..78552).4" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 730344" />
<Node Id="10312:[78346..78783).4" Label="param IsAccessibleHelper(this) 730345" />
<Node Id="10376:[1085..1113).4" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 730346" />
<Node Id="10376:[1115..1146).4" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 730347" />
<Node Id="10376:[1196..1235).4" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 730348" />
<Node Id="10376:[1028..1425).4" Label="param IsAccessibleHelper(this) 730349" />
<Node Id="10286:[30098..30120).4" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 730350" />
<Node Id="10286:[30135..30160).4" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 730351" />
<Node Id="10286:[30175..30206).4" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 730352" />
<Node Id="10286:[30283..30330).4" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 730353" />
<Node Id="10286:[30012..30691).4" Label="param IsSymbolAccessibleConditional(this) 730354" />
<Node Id="10286:[30356..30522).13" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 730355" />
<Node Id="10286:[30356..30522).14" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 730356" />
<Node Id="10286:[30360..30412).4" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 730357" />
<Node Id="10298:[471..492).36" Label="param Includes(this BinderFlags self) 730358" />
<Node Id="10298:[494..511).36" Label="param Includes(BinderFlags other) 730359" />
<Node Id="10060:[2136..2158).4" Label="param IsSymbolAccessible(NamedTypeSymbol within) 730360" />
<Node Id="10060:[2173..2198).4" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 730361" />
<Node Id="10060:[2213..2244).4" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 730362" />
<Node Id="10060:[2320..2366).4" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 730363" />
<Node Id="10060:[5621..5634).4" Label="param IsSymbolAccessibleCore(Symbol within) 730364" />
<Node Id="10060:[5691..5716).4" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 730365" />
<Node Id="10060:[5731..5762).4" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 730366" />
<Node Id="10060:[5777..5806).4" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 730367" />
<Node Id="10060:[5882..5928).4" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 730368" />
<Node Id="10060:[5954..5991).13" Label="Debug.Assert((object)symbol != null); 730369" />
<Node Id="10060:[6005..6042).13" Label="Debug.Assert((object)within != null); 730370" />
<Node Id="10060:[6005..6042).14" Label="Debug.Assert((object)within != null); 730371" />
<Node Id="10060:[6056..6090).7" Label="Debug.Assert(within.IsDefinition); 730372" />
<Node Id="10060:[6104..6172).10" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730373" />
<Node Id="10060:[6188..6219).7" Label="failedThroughTypeCheck = false; 730374" />
<Node Id="10060:[10202..10215).4" Label="param IsNamedTypeAccessible(Symbol within) 730375" />
<Node Id="10060:[10265..10311).4" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 730376" />
<Node Id="10060:[10337..10405).10" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730377" />
<Node Id="10060:[10419..10454).13" Label="Debug.Assert((object)type != null); 730378" />
<Node Id="10060:[10470..10516).4" Label="var compilation = within.DeclaringCompilation; 730379" />
<Node Id="10060:[10532..10544).4" Label="bool unused; 730380" />
<Node Id="10060:[10558..11295).4" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 730381" />
<Node Id="10060:[11990..12013).4" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 730382" />
<Node Id="10060:[12078..12091).4" Label="param IsNonNestedTypeAccessible(Symbol within) 730383" />
<Node Id="10060:[12117..12185).10" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730384" />
<Node Id="10060:[12199..12238).13" Label="Debug.Assert((object)assembly != null); 730385" />
<Node Id="10060:[12199..12238).14" Label="Debug.Assert((object)assembly != null); 730386" />
<Node Id="10346:[11710..11746).4" Label="originalBinder.IsSemanticModelBinder 730387" />
<Node Id="10286:[2155..2260).4" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 730388" />
<Node Id="10286:[2191..2245).13" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 730389" />
<Node Id="10286:[2191..2245).14" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 730390" />
<Node Id="10286:[2198..2244).4" Label="this.Flags.Includes(BinderFlags.SemanticModel) 730391" />
<Node Id="10298:[471..492).38" Label="param Includes(this BinderFlags self) 730392" />
<Node Id="10298:[494..511).38" Label="param Includes(BinderFlags other) 730393" />
<Node Id="10345:[28225..28251).4" Label="param IsUsingAlias(bool callerIsSemanticModel) 730394" />
<Node Id="10345:[28927..28940).7" Label="return false; 730395" />
<Node Id="10346:[12205..12212).4" Label="return; 730396" />
<Node Id="10354:[3720..3803).205" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730397" />
<Node Id="10312:[4680..4787).23" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 730398" />
<Node Id="10312:[4749..4764).4" Label="binder = scope; 730399" />
<Node Id="10312:[5087..5101).4" Label="return binder; 730400" />
<Node Id="10319:[43799..44676).19" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 730401" />
<Node Id="10319:[43853..43873).4" Label="IsViableType(result) 730402" />
<Node Id="10319:[41088..41107).4" Label="param IsViableType(LookupResult result) 730403" />
<Node Id="10319:[41138..41158).4" Label="result.IsMultiViable 730404" />
<Node Id="10354:[4919..5009).27" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 730405" />
<Node Id="10354:[4094..4107).35" Label="return _kind; 730406" />
<Node Id="10319:[41133..41220).7" Label="if (!result.IsMultiViable)
            {
                return false;
            } 730407" />
<Node Id="10319:[41254..41268).4" Label="result.Symbols 730408" />
<Node Id="10354:[4525..4595).7" Label="get
            {
                return _symbolList;
            } 730409" />
<Node Id="10354:[4561..4580).7" Label="return _symbolList; 730410" />
<Node Id="10319:[41236..41680).13" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 730411" />
<Node Id="10319:[41302..41665).4" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 730412" />
<Node Id="10319:[41634..41646).7" Label="return true; 730413" />
<Node Id="10319:[44751..44765).4" Label="bool wasError; 730414" />
<Node Id="10319:[84201..84218).4" Label="param ResultSymbol(string simpleName) 730415" />
<Node Id="10319:[84233..84242).4" Label="param ResultSymbol(int arity) 730416" />
<Node Id="10319:[84257..84273).4" Label="param ResultSymbol(SyntaxNode where) 730417" />
<Node Id="10319:[84288..84313).4" Label="param ResultSymbol(DiagnosticBag diagnostics) 730418" />
<Node Id="10319:[84374..84391).4" Label="param ResultSymbol(out bool wasError) 730419" />
<Node Id="10319:[84406..84447).4" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 730420" />
<Node Id="10319:[84462..84508).4" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 730421" />
<Node Id="10319:[84124..109887).4" Label="param ResultSymbol(this) 730422" />
<Node Id="10319:[85320..85348).13" Label="Debug.Assert(where != null); 730423" />
<Node Id="10319:[85320..85348).14" Label="Debug.Assert(where != null); 730424" />
<Node Id="10319:[85366..85400).13" Label="Debug.Assert(diagnostics != null); 730425" />
<Node Id="10319:[85366..85400).14" Label="Debug.Assert(diagnostics != null); 730426" />
<Node Id="10319:[85467..85484).7" Label="wasError = false; 730427" />
<Node Id="10319:[104874..105336).10" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 730428" />
<Node Id="10319:[104874..105336).11" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 730429" />
<Node Id="10319:[105368..106708).4" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 730430" />
<Node Id="10319:[105465..105535).7" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730431" />
<Node Id="10319:[105465..105535).8" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730432" />
<Node Id="10319:[76360..76385).2" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 730433" />
<Node Id="10319:[76387..76402).2" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 730434" />
<Node Id="10319:[76494..76582).5" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 730435" />
<Node Id="10319:[84691..84861).7" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 730436" />
<Node Id="10319:[84764..84846).19" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730437" />
<Node Id="10319:[84764..84846).20" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730438" />
<Node Id="10319:[84764..84846).22" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730439" />
<Node Id="10319:[84764..84846).23" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730440" />
<Node Id="10319:[84764..84845).4" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 730441" />
<Node Id="10306:[358886..358901).4" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 730442" />
<Node Id="10306:[358903..358930).4" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 730443" />
<Node Id="10306:[358932..358945).4" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 730444" />
<Node Id="10306:[358947..358972).4" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 730445" />
<Node Id="10306:[358838..360009).4" Label="param CheckRuntimeSupportForSymbolAccess(this) 730446" />
<Node Id="10306:[358998..359998).19" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 730447" />
<Node Id="10306:[358998..359998).20" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 730448" />
<Node Id="10319:[44948..45377).7" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 730449" />
<Node Id="10354:[11428..11441).4" Label="this.Clear(); 730450" />
<Node Id="10319:[45408..45422).4" Label="result.Free(); 730451" />
<Node Id="10287:[2377..2471).7" Label="if (symbol is null)
                {
                    return default;
                } 730452" />
<Node Id="10287:[791..833).7" Label="Debug.Assert(typeWithAnnotations.HasType); 730453" />
<Node Id="10287:[912..927).4" Label="_symbol = null; 730454" />
<Node Id="10287:[912..919).4" Label="_symbol 730455" />
<Node Id="10287:[945..972).4" Label="_isNullableEnabled = false; 730456" />
<Node Id="10287:[945..963).4" Label="_isNullableEnabled 730457" />
<Node Id="10286:[21546..21561).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 730458" />
<Node Id="10286:[21563..21583).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730459" />
<Node Id="10286:[22086..22108).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 730460" />
<Node Id="10286:[22110..22130).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730461" />
<Node Id="10286:[15616..15690).16" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 730462" />
<Node Id="10286:[15616..15690).17" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 730463" />
<Node Id="10286:[15715..15910).4" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 730464" />
<Node Id="10286:[23124..23146).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 730465" />
<Node Id="10286:[23161..23181).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730466" />
<Node Id="10286:[23281..23301).4" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 730467" />
<Node Id="10286:[23380..23684).22" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 730468" />
<Node Id="10286:[23893..24026).7" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 730469" />
<Node Id="10286:[24545..24641).7" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 730470" />
<Node Id="10286:[24655..25349).4" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 730471" />
<Node Id="10286:[26910..26935).4" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 730472" />
<Node Id="10286:[26952..26974).4" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 730473" />
<Node Id="10286:[27002..27022).4" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 730474" />
<Node Id="10286:[27048..27088).13" Label="RoslynDebug.Assert(diagnostics != null); 730475" />
<Node Id="10286:[27048..27088).14" Label="RoslynDebug.Assert(diagnostics != null); 730476" />
<Node Id="10286:[27208..27236).7" Label="DiagnosticInfo? info = null; 730477" />
<Node Id="10286:[27250..27722).4" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 730478" />
<Node Id="10286:[27738..27845).10" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 730479" />
<Node Id="10286:[27738..27845).11" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 730480" />
<Node Id="10286:[27861..27873).4" Label="return kind; 730481" />
<Node Id="10286:[26281..26812).4" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 730482" />
<Node Id="10286:[26450..26769).4" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 730483" />
<Node Id="10287:[1680..1716).4" Label="=$ _symbol?.Kind == SymbolKind.Alias 730484" />
<Node Id="10287:[1683..1690).4" Label="_symbol 730485" />
<Node Id="10287:[1683..1716).7" Label="_symbol?.Kind == SymbolKind.Alias 730486" />
<Node Id="10319:[51935..52244).7" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 730487" />
<Node Id="10845:[522..547).1" Label="param TypeConversions(AssemblySymbol corLibrary) 730488" />
<Node Id="10845:[549..580).1" Label="param TypeConversions(bool includeNullability = false) 730489" />
<Node Id="10845:[499..728).1" Label="param TypeConversions(this) 730490" />
<Node Id="10845:[602..612).1" Label="corLibrary 730491" />
<Node Id="10845:[637..638).1" Label="0 730492" />
<Node Id="10845:[660..678).1" Label="includeNullability 730493" />
<Node Id="10845:[701..705).1" Label="null 730494" />
<Node Id="10845:[499..728).2" Label="param TypeConversions(this) 730495" />
<Node Id="10845:[764..789).1" Label="param TypeConversions(AssemblySymbol corLibrary) 730496" />
<Node Id="10845:[791..816).1" Label="param TypeConversions(int currentRecursionDepth) 730497" />
<Node Id="10845:[818..841).1" Label="param TypeConversions(bool includeNullability) 730498" />
<Node Id="10845:[843..878).1" Label="param TypeConversions(TypeConversions otherNullabilityOpt) 730499" />
<Node Id="10845:[740..997).1" Label="param TypeConversions(this) 730500" />
<Node Id="10843:[685..687).1" Label="50 730501" />
<Node Id="10843:[661..687).1" Label="MaximumRecursionDepth = 50 730502" />
<Node Id="10843:[82075..82080).1" Label="false 730503" />
<Node Id="10843:[82071..82080).1" Label="F = false 730504" />
<Node Id="10843:[82114..82118).1" Label="true 730505" />
<Node Id="10843:[82110..82118).1" Label="T = true 730506" />
<Node Id="10843:[82447..82485).1" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 730507" />
<Node Id="10843:[82447..82485).2" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 730508" />
<Node Id="10843:[82447..82485).4" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 730509" />
<Node Id="10843:[82519..82557).1" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 730510" />
<Node Id="10843:[82519..82557).2" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 730511" />
<Node Id="10843:[82519..82557).4" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 730512" />
<Node Id="10843:[82591..82629).1" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 730513" />
<Node Id="10843:[82591..82629).2" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 730514" />
<Node Id="10843:[82591..82629).6" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 730515" />
<Node Id="10843:[82663..82701).1" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 730516" />
<Node Id="10843:[82663..82701).2" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 730517" />
<Node Id="10843:[82663..82701).6" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 730518" />
<Node Id="10843:[82735..82773).1" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 730519" />
<Node Id="10843:[82735..82773).2" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 730520" />
<Node Id="10843:[82735..82773).8" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 730521" />
<Node Id="10843:[82807..82845).1" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 730522" />
<Node Id="10843:[82807..82845).2" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 730523" />
<Node Id="10843:[82807..82845).8" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 730524" />
<Node Id="10843:[82879..82917).1" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 730525" />
<Node Id="10843:[82879..82917).2" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 730526" />
<Node Id="10843:[82879..82917).11" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 730527" />
<Node Id="10843:[82951..82989).1" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 730528" />
<Node Id="10843:[82951..82989).2" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 730529" />
<Node Id="10843:[82951..82989).11" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 730530" />
<Node Id="10843:[83023..83061).1" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 730531" />
<Node Id="10843:[83023..83061).2" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 730532" />
<Node Id="10843:[83023..83061).5" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 730533" />
<Node Id="10843:[83095..83133).1" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 730534" />
<Node Id="10843:[83095..83133).2" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 730535" />
<Node Id="10843:[83095..83133).12" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 730536" />
<Node Id="10843:[83167..83205).1" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 730537" />
<Node Id="10843:[83167..83205).2" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 730538" />
<Node Id="10843:[83239..83277).1" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 730539" />
<Node Id="10843:[83239..83277).2" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 730540" />
<Node Id="10843:[82333..83288).1" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730541" />
<Node Id="10843:[82333..83288).2" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730542" />
<Node Id="10843:[82333..83288).3" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730543" />
<Node Id="10843:[82333..83288).4" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730544" />
<Node Id="10843:[82333..83288).5" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730545" />
<Node Id="10843:[82333..83288).6" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730546" />
<Node Id="10843:[82333..83288).7" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730547" />
<Node Id="10843:[82333..83288).8" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730548" />
<Node Id="10843:[82333..83288).9" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730549" />
<Node Id="10843:[82333..83288).10" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730550" />
<Node Id="10843:[82333..83288).11" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730551" />
<Node Id="10843:[82333..83288).12" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730552" />
<Node Id="10843:[82333..83288).13" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730553" />
<Node Id="10843:[82293..83288).1" Label="s_implicitNumericConversions =
        {
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 730554" />
<Node Id="10843:[83487..83525).1" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 730555" />
<Node Id="10843:[83487..83525).2" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 730556" />
<Node Id="10843:[83487..83525).3" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 730557" />
<Node Id="10843:[83559..83597).1" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 730558" />
<Node Id="10843:[83559..83597).2" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 730559" />
<Node Id="10843:[83559..83597).3" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 730560" />
<Node Id="10843:[83631..83669).1" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 730561" />
<Node Id="10843:[83631..83669).2" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 730562" />
<Node Id="10843:[83631..83669).4" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 730563" />
<Node Id="10843:[83703..83741).1" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 730564" />
<Node Id="10843:[83703..83741).2" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 730565" />
<Node Id="10843:[83703..83741).5" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 730566" />
<Node Id="10843:[83775..83813).1" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 730567" />
<Node Id="10843:[83775..83813).2" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 730568" />
<Node Id="10843:[83775..83813).6" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 730569" />
<Node Id="10843:[83847..83885).1" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 730570" />
<Node Id="10843:[83847..83885).2" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 730571" />
<Node Id="10843:[83847..83885).7" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 730572" />
<Node Id="10843:[83919..83957).1" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 730573" />
<Node Id="10843:[83919..83957).2" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 730574" />
<Node Id="10843:[83919..83957).8" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 730575" />
<Node Id="10843:[83991..84029).1" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 730576" />
<Node Id="10843:[83991..84029).2" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 730577" />
<Node Id="10843:[83991..84029).9" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 730578" />
<Node Id="10843:[84063..84101).1" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 730579" />
<Node Id="10843:[84063..84101).2" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 730580" />
<Node Id="10843:[84063..84101).5" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 730581" />
<Node Id="10843:[84135..84173).1" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 730582" />
<Node Id="10843:[84135..84173).2" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 730583" />
<Node Id="10843:[84135..84173).11" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 730584" />
<Node Id="10843:[84207..84245).1" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 730585" />
<Node Id="10843:[84207..84245).2" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 730586" />
<Node Id="10843:[84207..84245).12" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 730587" />
<Node Id="10843:[84279..84317).1" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 730588" />
<Node Id="10843:[84279..84317).2" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 730589" />
<Node Id="10843:[84279..84317).13" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 730590" />
<Node Id="10843:[83373..84328).1" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730591" />
<Node Id="10843:[83373..84328).2" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730592" />
<Node Id="10843:[83373..84328).3" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730593" />
<Node Id="10843:[83373..84328).4" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730594" />
<Node Id="10843:[83373..84328).5" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730595" />
<Node Id="10843:[83373..84328).6" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730596" />
<Node Id="10843:[83373..84328).7" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730597" />
<Node Id="10843:[83373..84328).8" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730598" />
<Node Id="10843:[83373..84328).9" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730599" />
<Node Id="10843:[83373..84328).10" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730600" />
<Node Id="10843:[83373..84328).11" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730601" />
<Node Id="10843:[83373..84328).12" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730602" />
<Node Id="10843:[83373..84328).13" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730603" />
<Node Id="10843:[83333..84328).1" Label="s_explicitNumericConversions =
        {
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 730604" />
<Node Id="10845:[900..910).1" Label="corLibrary 730605" />
<Node Id="10845:[912..933).1" Label="currentRecursionDepth 730606" />
<Node Id="10845:[935..953).1" Label="includeNullability 730607" />
<Node Id="10845:[955..974).1" Label="otherNullabilityOpt 730608" />
<Node Id="10845:[740..997).2" Label="param TypeConversions(this) 730609" />
<Node Id="10843:[1173..1198).1" Label="param ConversionsBase(AssemblySymbol corLibrary) 730610" />
<Node Id="10843:[1200..1225).1" Label="param ConversionsBase(int currentRecursionDepth) 730611" />
<Node Id="10843:[1227..1250).1" Label="param ConversionsBase(bool includeNullability) 730612" />
<Node Id="10843:[1252..1287).1" Label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 730613" />
<Node Id="10843:[1147..1833).1" Label="param ConversionsBase(this) 730614" />
<Node Id="10843:[734..744).1" Label="corLibrary 730615" />
<Node Id="10843:[778..799).1" Label="currentRecursionDepth 730616" />
<Node Id="10843:[835..853).1" Label="IncludeNullability 730617" />
<Node Id="10843:[1113..1134).1" Label="_lazyOtherNullability 730618" />
<Node Id="10843:[1313..1354).1" Label="Debug.Assert((object)corLibrary != null); 730619" />
<Node Id="10843:[1313..1354).2" Label="Debug.Assert((object)corLibrary != null); 730620" />
<Node Id="10843:[1368..1474).1" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 730621" />
<Node Id="10843:[1368..1474).2" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 730622" />
<Node Id="10843:[1488..1600).1" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 730623" />
<Node Id="10843:[1488..1600).2" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 730624" />
<Node Id="10843:[1616..1631).1" Label="this.corLibrary 730625" />
<Node Id="10843:[1659..1685).1" Label="this.currentRecursionDepth 730626" />
<Node Id="10843:[1724..1742).1" Label="IncludeNullability 730627" />
<Node Id="10843:[1778..1799).1" Label="_lazyOtherNullability 730628" />
<Node Id="25002:[4395..4432).46" Label="var diagnostics = c.GetDiagnostics(); 730629" />
<Node Id="10076:[5223..5250).10" Label="Debug.Assert(node != null); 730630" />
<Node Id="10076:[5277..5448).10" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 730631" />
<Node Id="10077:[44231..44317).25" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 730632" />
<Node Id="10286:[1688..1781).13" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 730633" />
<Node Id="10298:[471..492).39" Label="param Includes(this BinderFlags self) 730634" />
<Node Id="10286:[1820..1963).13" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 730635" />
<Node Id="10298:[471..492).40" Label="param Includes(this BinderFlags self) 730636" />
<Node Id="10319:[42478..42805).13" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 730637" />
<Node Id="10319:[42821..42938).33" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 730638" />
<Node Id="10319:[42839..42937).5" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 730639" />
<Node Id="10319:[63849..63870).5" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 730640" />
<Node Id="10319:[63885..63919).5" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 730641" />
<Node Id="10319:[63934..63945).5" Label="param CreateErrorIfLookupOnTypeParameter(string name) 730642" />
<Node Id="10319:[63960..63969).5" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 730643" />
<Node Id="10319:[63984..64009).5" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 730644" />
<Node Id="10319:[63768..64484).5" Label="param CreateErrorIfLookupOnTypeParameter(this) 730645" />
<Node Id="10319:[64035..64445).17" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 730646" />
<Node Id="10319:[64035..64445).18" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 730647" />
<Node Id="10319:[64461..64473).9" Label="return null; 730648" />
<Node Id="10319:[42821..42938).39" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 730649" />
<Node Id="10319:[42952..43079).13" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 730650" />
<Node Id="10319:[42952..43079).14" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 730651" />
<Node Id="10354:[11312..11328).5" Label="instance.IsClear 730652" />
<Node Id="10354:[3684..3818).29" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730653" />
<Node Id="10354:[3720..3803).209" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730654" />
<Node Id="10354:[3720..3803).210" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730655" />
<Node Id="10354:[3720..3803).211" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730656" />
<Node Id="10354:[11299..11330).13" Label="Debug.Assert(instance.IsClear); 730657" />
<Node Id="10319:[50330..50355).5" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 730658" />
<Node Id="10312:[3905..3919).5" Label="result.IsClear 730659" />
<Node Id="10354:[3684..3818).30" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730660" />
<Node Id="10354:[3720..3803).217" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730661" />
<Node Id="10354:[3720..3803).218" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730662" />
<Node Id="10354:[3720..3803).219" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730663" />
<Node Id="10312:[3892..3921).13" Label="Debug.Assert(result.IsClear); 730664" />
<Node Id="10312:[3935..3968).17" Label="Debug.Assert(options.AreValid()); 730665" />
<Node Id="10312:[3948..3966).5" Label="options.AreValid() 730666" />
<Node Id="10353:[4698..4724).9" Label="param AreValid(this LookupOptions options) 730667" />
<Node Id="10353:[4750..4847).17" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 730668" />
<Node Id="10353:[4863..5000).33" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 730669" />
<Node Id="10353:[4863..5000).34" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 730670" />
<Node Id="10353:[5079..5183).17" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 730671" />
<Node Id="10353:[5197..5323).25" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 730672" />
<Node Id="10353:[5485..5759).49" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730673" />
<Node Id="10353:[5485..5759).50" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730674" />
<Node Id="10353:[5485..5759).51" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730675" />
<Node Id="10353:[5775..5979).33" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 730676" />
<Node Id="10353:[5775..5979).35" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 730677" />
<Node Id="10353:[5995..6029).25" Label="return OnlyOneBitSet(onlyOptions); 730678" />
<Node Id="10353:[6002..6028).9" Label="OnlyOneBitSet(onlyOptions) 730679" />
<Node Id="10353:[6343..6358).9" Label="param OnlyOneBitSet(LookupOptions o) 730680" />
<Node Id="10353:[6384..6410).49" Label="return (o & (o - 1)) == 0; 730681" />
<Node Id="10353:[6384..6410).50" Label="return (o & (o - 1)) == 0; 730682" />
<Node Id="10312:[5188..5207).5" Label="param LookupSymbolsInSingleBinder(LookupResult result) 730683" />
<Node Id="10312:[5209..5220).5" Label="param LookupSymbolsInSingleBinder(string name) 730684" />
<Node Id="10312:[5222..5231).5" Label="param LookupSymbolsInSingleBinder(int arity) 730685" />
<Node Id="10312:[5233..5272).5" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 730686" />
<Node Id="10312:[5274..5295).5" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 730687" />
<Node Id="10312:[5297..5318).5" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 730688" />
<Node Id="10312:[5320..5333).5" Label="param LookupSymbolsInSingleBinder(bool diagnose) 730689" />
<Node Id="10312:[5124..5404).5" Label="param LookupSymbolsInSingleBinder(this) 730690" />
<Node Id="10312:[4685..4699).13" Label="result.IsClear 730691" />
<Node Id="10354:[3684..3818).31" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730692" />
<Node Id="10354:[3720..3803).225" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730693" />
<Node Id="10354:[3720..3803).226" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730694" />
<Node Id="10354:[3720..3803).227" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730695" />
<Node Id="10312:[4680..4787).25" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 730696" />
<Node Id="10312:[4826..5058).61" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 730697" />
<Node Id="10312:[4826..5058).62" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 730698" />
<Node Id="10382:[1340..1359).5" Label="param LookupSymbolsInSingleBinder(LookupResult result) 730699" />
<Node Id="10382:[1374..1383).5" Label="param LookupSymbolsInSingleBinder(int arity) 730700" />
<Node Id="10382:[1385..1424).5" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 730701" />
<Node Id="10382:[1426..1447).5" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 730702" />
<Node Id="10382:[1449..1470).5" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 730703" />
<Node Id="10382:[1472..1485).5" Label="param LookupSymbolsInSingleBinder(bool diagnose) 730704" />
<Node Id="10382:[1572..1586).5" Label="result.IsClear 730705" />
<Node Id="10354:[3684..3818).32" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730706" />
<Node Id="10354:[3720..3803).233" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730707" />
<Node Id="10354:[3720..3803).234" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730708" />
<Node Id="10354:[3720..3803).235" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730709" />
<Node Id="10382:[1559..1588).13" Label="Debug.Assert(result.IsClear); 730710" />
<Node Id="10382:[1619..1629).5" Label="LookupMask 730711" />
<Node Id="10382:[913..1046).5" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 730712" />
<Node Id="10382:[949..1031).9" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 730713" />
<Node Id="10382:[1604..1691).21" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 730714" />
<Node Id="10382:[1604..1691).22" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 730715" />
<Node Id="10382:[1604..1691).23" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 730716" />
<Node Id="10346:[10861..10875).5" Label="result.IsClear 730717" />
<Node Id="10354:[3684..3818).34" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730718" />
<Node Id="10354:[3720..3803).249" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730719" />
<Node Id="10354:[3720..3803).250" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730720" />
<Node Id="10354:[3720..3803).251" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730721" />
<Node Id="10346:[10848..10877).13" Label="Debug.Assert(result.IsClear); 730722" />
<Node Id="10346:[10897..10914).5" Label="IsSubmissionClass 730723" />
<Node Id="10346:[7666..7775).5" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 730724" />
<Node Id="10346:[7672..7773).13" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 730725" />
<Node Id="10346:[10893..11127).9" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 730726" />
<Node Id="10346:[3525..3638).31" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 730727" />
<Node Id="10312:[7729..7768).5" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 730728" />
<Node Id="10312:[7615..8420).5" Label="param LookupMembersInternal(this) 730729" />
<Node Id="10312:[7903..7936).17" Label="Debug.Assert(options.AreValid()); 730730" />
<Node Id="10312:[7916..7934).5" Label="options.AreValid() 730731" />
<Node Id="10353:[4698..4724).10" Label="param AreValid(this LookupOptions options) 730732" />
<Node Id="10353:[4750..4847).19" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 730733" />
<Node Id="10353:[4863..5000).37" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 730734" />
<Node Id="10353:[4863..5000).38" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 730735" />
<Node Id="10353:[5079..5183).19" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 730736" />
<Node Id="10353:[5197..5323).28" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 730737" />
<Node Id="10353:[5485..5759).55" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730738" />
<Node Id="10353:[5485..5759).56" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730739" />
<Node Id="10353:[5485..5759).57" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730740" />
<Node Id="10353:[5775..5979).37" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 730741" />
<Node Id="10353:[5775..5979).39" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 730742" />
<Node Id="10353:[5995..6029).28" Label="return OnlyOneBitSet(onlyOptions); 730743" />
<Node Id="10353:[6002..6028).10" Label="OnlyOneBitSet(onlyOptions) 730744" />
<Node Id="10353:[6343..6358).10" Label="param OnlyOneBitSet(LookupOptions o) 730745" />
<Node Id="10353:[6384..6410).55" Label="return (o & (o - 1)) == 0; 730746" />
<Node Id="10353:[6384..6410).56" Label="return (o & (o - 1)) == 0; 730747" />
<Node Id="10312:[7952..7977).17" Label="Debug.Assert(arity $= 0); 730748" />
<Node Id="10312:[61608..61629).5" Label="param GetCandidateMembers(Binder originalBinder) 730749" />
<Node Id="10312:[63473..63501).5" Label="param CheckViability(TypeSymbol accessThroughType) 730750" />
<Node Id="10312:[63566..63612).5" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 730751" />
<Node Id="10312:[63638..63668).5" Label="bool inaccessibleViaQualifier; 730752" />
<Node Id="10312:[63682..63706).5" Label="DiagnosticInfo diagInfo; 730753" />
<Node Id="10312:[80978..80991).5" Label="param WrongArity(Symbol symbol) 730754" />
<Node Id="10312:[80993..81002).5" Label="param WrongArity(int arity) 730755" />
<Node Id="10312:[81004..81017).5" Label="param WrongArity(bool diagnose) 730756" />
<Node Id="10312:[81019..81040).5" Label="param WrongArity(LookupOptions options) 730757" />
<Node Id="10312:[81042..81069).5" Label="param WrongArity(out DiagnosticInfo diagInfo) 730758" />
<Node Id="10312:[81095..84034).5" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 730759" />
<Node Id="10312:[81196..82523).29" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 730760" />
<Node Id="10312:[81196..82523).30" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 730761" />
<Node Id="10312:[81196..82523).31" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 730762" />
<Node Id="10312:[81196..82523).34" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 730763" />
<Node Id="10312:[81319..81371).5" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 730764" />
<Node Id="10312:[81495..81570).21" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 730765" />
<Node Id="10312:[81495..81570).22" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 730766" />
<Node Id="10312:[81596..82500).25" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 730767" />
<Node Id="10312:[81596..82500).26" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 730768" />
<Node Id="10312:[81628..81659).5" Label="options.IsAttributeTypeLookup() 730769" />
<Node Id="10353:[7504..7530).10" Label="param IsAttributeTypeLookup(this LookupOptions options) 730770" />
<Node Id="10312:[81596..82500).29" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 730771" />
<Node Id="10312:[84050..84066).9" Label="diagInfo = null; 730772" />
<Node Id="10312:[66177..69285).52" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 730773" />
<Node Id="10312:[66291..66342).5" Label="RefineAccessThroughType(options, accessThroughType) 730774" />
<Node Id="10312:[75301..75322).5" Label="param RefineAccessThroughType(LookupOptions options) 730775" />
<Node Id="10312:[75324..75352).5" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 730776" />
<Node Id="10312:[75735..75866).21" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 730777" />
<Node Id="10312:[75735..75866).22" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 730778" />
<Node Id="10312:[75742..75804).5" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 730779" />
<Node Id="10312:[75735..75866).24" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 730780" />
<Node Id="10312:[66177..69285).55" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 730781" />
<Node Id="10312:[66177..69285).57" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 730782" />
<Node Id="10312:[77543..77571).5" Label="param IsAccessible(TypeSymbol accessThroughType) 730783" />
<Node Id="10312:[77573..77604).5" Label="param IsAccessible(out bool failedThroughTypeCheck) 730784" />
<Node Id="10312:[77654..77700).5" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 730785" />
<Node Id="10312:[77501..78044).5" Label="param IsAccessible(this) 730786" />
<Node Id="10312:[77726..77892).17" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 730787" />
<Node Id="10312:[77726..77892).18" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 730788" />
<Node Id="10312:[77730..77782).5" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 730789" />
<Node Id="10298:[471..492).44" Label="param Includes(this BinderFlags self) 730790" />
<Node Id="10298:[494..511).44" Label="param Includes(BinderFlags other) 730791" />
<Node Id="10312:[78402..78430).5" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 730792" />
<Node Id="10312:[78432..78463).5" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 730793" />
<Node Id="10312:[78513..78552).5" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 730794" />
<Node Id="10312:[78346..78783).5" Label="param IsAccessibleHelper(this) 730795" />
<Node Id="10376:[1085..1113).5" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 730796" />
<Node Id="10376:[1115..1146).5" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 730797" />
<Node Id="10376:[1196..1235).5" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 730798" />
<Node Id="10376:[1028..1425).5" Label="param IsAccessibleHelper(this) 730799" />
<Node Id="10286:[30098..30120).5" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 730800" />
<Node Id="10286:[30135..30160).5" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 730801" />
<Node Id="10286:[30175..30206).5" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 730802" />
<Node Id="10286:[30283..30330).5" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 730803" />
<Node Id="10286:[30012..30691).5" Label="param IsSymbolAccessibleConditional(this) 730804" />
<Node Id="10286:[30356..30522).17" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 730805" />
<Node Id="10286:[30356..30522).18" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 730806" />
<Node Id="10286:[30360..30412).5" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 730807" />
<Node Id="10298:[471..492).45" Label="param Includes(this BinderFlags self) 730808" />
<Node Id="10298:[494..511).45" Label="param Includes(BinderFlags other) 730809" />
<Node Id="10060:[2136..2158).5" Label="param IsSymbolAccessible(NamedTypeSymbol within) 730810" />
<Node Id="10060:[2173..2198).5" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 730811" />
<Node Id="10060:[2213..2244).5" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 730812" />
<Node Id="10060:[2320..2366).5" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 730813" />
<Node Id="10060:[5621..5634).5" Label="param IsSymbolAccessibleCore(Symbol within) 730814" />
<Node Id="10060:[5691..5716).5" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 730815" />
<Node Id="10060:[5731..5762).5" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 730816" />
<Node Id="10060:[5777..5806).5" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 730817" />
<Node Id="10060:[5882..5928).5" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 730818" />
<Node Id="10060:[5954..5991).17" Label="Debug.Assert((object)symbol != null); 730819" />
<Node Id="10060:[6005..6042).17" Label="Debug.Assert((object)within != null); 730820" />
<Node Id="10060:[6005..6042).18" Label="Debug.Assert((object)within != null); 730821" />
<Node Id="10060:[6056..6090).9" Label="Debug.Assert(within.IsDefinition); 730822" />
<Node Id="10060:[6104..6172).13" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730823" />
<Node Id="10060:[6188..6219).9" Label="failedThroughTypeCheck = false; 730824" />
<Node Id="10060:[10202..10215).5" Label="param IsNamedTypeAccessible(Symbol within) 730825" />
<Node Id="10060:[10265..10311).5" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 730826" />
<Node Id="10060:[10337..10405).13" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730827" />
<Node Id="10060:[10419..10454).17" Label="Debug.Assert((object)type != null); 730828" />
<Node Id="10060:[10470..10516).5" Label="var compilation = within.DeclaringCompilation; 730829" />
<Node Id="10060:[10532..10544).5" Label="bool unused; 730830" />
<Node Id="10060:[10558..11295).5" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 730831" />
<Node Id="10060:[11990..12013).5" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 730832" />
<Node Id="10060:[12078..12091).5" Label="param IsNonNestedTypeAccessible(Symbol within) 730833" />
<Node Id="10060:[12117..12185).13" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 730834" />
<Node Id="10060:[12199..12238).17" Label="Debug.Assert((object)assembly != null); 730835" />
<Node Id="10060:[12199..12238).18" Label="Debug.Assert((object)assembly != null); 730836" />
<Node Id="10346:[11710..11746).5" Label="originalBinder.IsSemanticModelBinder 730837" />
<Node Id="10286:[2155..2260).5" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 730838" />
<Node Id="10286:[2191..2245).17" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 730839" />
<Node Id="10286:[2191..2245).18" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 730840" />
<Node Id="10286:[2198..2244).5" Label="this.Flags.Includes(BinderFlags.SemanticModel) 730841" />
<Node Id="10298:[471..492).47" Label="param Includes(this BinderFlags self) 730842" />
<Node Id="10298:[494..511).47" Label="param Includes(BinderFlags other) 730843" />
<Node Id="10345:[28225..28251).5" Label="param IsUsingAlias(bool callerIsSemanticModel) 730844" />
<Node Id="10345:[28927..28940).9" Label="return false; 730845" />
<Node Id="10346:[12205..12212).5" Label="return; 730846" />
<Node Id="10354:[3720..3803).257" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730847" />
<Node Id="10312:[4680..4787).29" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 730848" />
<Node Id="10312:[4749..4764).5" Label="binder = scope; 730849" />
<Node Id="10312:[5087..5101).5" Label="return binder; 730850" />
<Node Id="10319:[43799..44676).25" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 730851" />
<Node Id="10319:[43853..43873).5" Label="IsViableType(result) 730852" />
<Node Id="10319:[41088..41107).5" Label="param IsViableType(LookupResult result) 730853" />
<Node Id="10319:[41138..41158).5" Label="result.IsMultiViable 730854" />
<Node Id="10354:[4919..5009).34" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 730855" />
<Node Id="10354:[4094..4107).44" Label="return _kind; 730856" />
<Node Id="10319:[41133..41220).9" Label="if (!result.IsMultiViable)
            {
                return false;
            } 730857" />
<Node Id="10319:[41254..41268).5" Label="result.Symbols 730858" />
<Node Id="10354:[4525..4595).9" Label="get
            {
                return _symbolList;
            } 730859" />
<Node Id="10354:[4561..4580).9" Label="return _symbolList; 730860" />
<Node Id="10319:[41236..41680).17" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 730861" />
<Node Id="10319:[41302..41665).5" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 730862" />
<Node Id="10319:[41634..41646).9" Label="return true; 730863" />
<Node Id="10319:[44751..44765).5" Label="bool wasError; 730864" />
<Node Id="10319:[84233..84242).5" Label="param ResultSymbol(int arity) 730865" />
<Node Id="10319:[84257..84273).5" Label="param ResultSymbol(SyntaxNode where) 730866" />
<Node Id="10319:[84288..84313).5" Label="param ResultSymbol(DiagnosticBag diagnostics) 730867" />
<Node Id="10319:[84374..84391).5" Label="param ResultSymbol(out bool wasError) 730868" />
<Node Id="10319:[84406..84447).5" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 730869" />
<Node Id="10319:[84462..84508).5" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 730870" />
<Node Id="10319:[84124..109887).5" Label="param ResultSymbol(this) 730871" />
<Node Id="10319:[85320..85348).17" Label="Debug.Assert(where != null); 730872" />
<Node Id="10319:[85320..85348).18" Label="Debug.Assert(where != null); 730873" />
<Node Id="10319:[85366..85400).17" Label="Debug.Assert(diagnostics != null); 730874" />
<Node Id="10319:[85366..85400).18" Label="Debug.Assert(diagnostics != null); 730875" />
<Node Id="10319:[85467..85484).9" Label="wasError = false; 730876" />
<Node Id="10319:[104874..105336).13" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 730877" />
<Node Id="10319:[104874..105336).14" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 730878" />
<Node Id="10319:[105368..106708).5" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 730879" />
<Node Id="10319:[105465..105535).12" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730880" />
<Node Id="10319:[105465..105535).13" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 730881" />
<Node Id="10319:[76360..76385).3" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 730882" />
<Node Id="10319:[76387..76402).3" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 730883" />
<Node Id="10319:[76494..76582).9" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 730884" />
<Node Id="10319:[84691..84861).9" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 730885" />
<Node Id="10319:[84764..84846).25" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730886" />
<Node Id="10319:[84764..84846).26" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730887" />
<Node Id="10319:[84764..84846).28" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730888" />
<Node Id="10319:[84764..84846).29" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 730889" />
<Node Id="10319:[84764..84845).5" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 730890" />
<Node Id="10306:[358886..358901).5" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 730891" />
<Node Id="10306:[358903..358930).5" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 730892" />
<Node Id="10306:[358932..358945).5" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 730893" />
<Node Id="10306:[358947..358972).5" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 730894" />
<Node Id="10306:[358838..360009).5" Label="param CheckRuntimeSupportForSymbolAccess(this) 730895" />
<Node Id="10306:[358998..359998).25" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 730896" />
<Node Id="10306:[358998..359998).26" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 730897" />
<Node Id="10319:[44948..45377).9" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 730898" />
<Node Id="10354:[11428..11441).5" Label="this.Clear(); 730899" />
<Node Id="10319:[45408..45422).5" Label="result.Free(); 730900" />
<Node Id="10287:[2377..2471).9" Label="if (symbol is null)
                {
                    return default;
                } 730901" />
<Node Id="10287:[791..833).9" Label="Debug.Assert(typeWithAnnotations.HasType); 730902" />
<Node Id="10287:[912..927).5" Label="_symbol = null; 730903" />
<Node Id="10287:[912..919).5" Label="_symbol 730904" />
<Node Id="10287:[945..972).5" Label="_isNullableEnabled = false; 730905" />
<Node Id="10287:[945..963).5" Label="_isNullableEnabled 730906" />
<Node Id="10286:[21546..21561).5" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 730907" />
<Node Id="10286:[21563..21583).5" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730908" />
<Node Id="10286:[22086..22108).5" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 730909" />
<Node Id="10286:[22110..22130).5" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730910" />
<Node Id="10286:[15616..15690).21" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 730911" />
<Node Id="10286:[15616..15690).22" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 730912" />
<Node Id="10286:[15715..15910).5" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 730913" />
<Node Id="10286:[23124..23146).5" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 730914" />
<Node Id="10286:[23161..23181).5" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 730915" />
<Node Id="10286:[23281..23301).5" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 730916" />
<Node Id="10286:[23380..23684).29" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 730917" />
<Node Id="10286:[23893..24026).9" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 730918" />
<Node Id="10286:[24545..24641).9" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 730919" />
<Node Id="10286:[24655..25349).5" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 730920" />
<Node Id="10286:[26910..26935).5" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 730921" />
<Node Id="10286:[26952..26974).5" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 730922" />
<Node Id="10286:[27002..27022).5" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 730923" />
<Node Id="10286:[27048..27088).17" Label="RoslynDebug.Assert(diagnostics != null); 730924" />
<Node Id="10286:[27048..27088).18" Label="RoslynDebug.Assert(diagnostics != null); 730925" />
<Node Id="10286:[27208..27236).9" Label="DiagnosticInfo? info = null; 730926" />
<Node Id="10286:[27250..27722).5" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 730927" />
<Node Id="10286:[27738..27845).13" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 730928" />
<Node Id="10286:[27738..27845).14" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 730929" />
<Node Id="10286:[27861..27873).5" Label="return kind; 730930" />
<Node Id="10286:[26281..26812).5" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 730931" />
<Node Id="10286:[26450..26769).5" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 730932" />
<Node Id="10287:[1680..1716).5" Label="=$ _symbol?.Kind == SymbolKind.Alias 730933" />
<Node Id="10287:[1683..1690).5" Label="_symbol 730934" />
<Node Id="10287:[1683..1716).9" Label="_symbol?.Kind == SymbolKind.Alias 730935" />
<Node Id="10319:[51935..52244).9" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 730936" />
<Node Id="10076:[5223..5250).14" Label="Debug.Assert(node != null); 730937" />
<Node Id="10076:[5277..5448).14" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 730938" />
<Node Id="10077:[44231..44317).33" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 730939" />
<Node Id="10286:[1688..1781).19" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 730940" />
<Node Id="10298:[471..492).48" Label="param Includes(this BinderFlags self) 730941" />
<Node Id="10286:[1820..1963).19" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 730942" />
<Node Id="10298:[471..492).49" Label="param Includes(this BinderFlags self) 730943" />
<Node Id="10319:[42478..42805).16" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 730944" />
<Node Id="10319:[42821..42938).41" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 730945" />
<Node Id="10319:[42839..42937).6" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 730946" />
<Node Id="10319:[63849..63870).6" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 730947" />
<Node Id="10319:[63885..63919).6" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 730948" />
<Node Id="10319:[63934..63945).6" Label="param CreateErrorIfLookupOnTypeParameter(string name) 730949" />
<Node Id="10319:[63960..63969).6" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 730950" />
<Node Id="10319:[63984..64009).6" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 730951" />
<Node Id="10319:[63768..64484).6" Label="param CreateErrorIfLookupOnTypeParameter(this) 730952" />
<Node Id="10319:[64035..64445).21" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 730953" />
<Node Id="10319:[64035..64445).22" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 730954" />
<Node Id="10319:[64461..64473).11" Label="return null; 730955" />
<Node Id="10319:[42821..42938).47" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 730956" />
<Node Id="10319:[42952..43079).16" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 730957" />
<Node Id="10319:[42952..43079).17" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 730958" />
<Node Id="10354:[11312..11328).6" Label="instance.IsClear 730959" />
<Node Id="10354:[3684..3818).36" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730960" />
<Node Id="10354:[3720..3803).261" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730961" />
<Node Id="10354:[3720..3803).262" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730962" />
<Node Id="10354:[3720..3803).263" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730963" />
<Node Id="10354:[11299..11330).16" Label="Debug.Assert(instance.IsClear); 730964" />
<Node Id="10319:[50330..50355).6" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 730965" />
<Node Id="10312:[3905..3919).6" Label="result.IsClear 730966" />
<Node Id="10354:[3684..3818).37" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730967" />
<Node Id="10354:[3720..3803).269" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730968" />
<Node Id="10354:[3720..3803).270" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730969" />
<Node Id="10354:[3720..3803).271" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 730970" />
<Node Id="10312:[3892..3921).16" Label="Debug.Assert(result.IsClear); 730971" />
<Node Id="10312:[3935..3968).21" Label="Debug.Assert(options.AreValid()); 730972" />
<Node Id="10312:[3948..3966).6" Label="options.AreValid() 730973" />
<Node Id="10353:[4698..4724).11" Label="param AreValid(this LookupOptions options) 730974" />
<Node Id="10353:[4750..4847).21" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 730975" />
<Node Id="10353:[4863..5000).41" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 730976" />
<Node Id="10353:[4863..5000).42" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 730977" />
<Node Id="10353:[5079..5183).21" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 730978" />
<Node Id="10353:[5197..5323).31" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 730979" />
<Node Id="10353:[5485..5759).61" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730980" />
<Node Id="10353:[5485..5759).62" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730981" />
<Node Id="10353:[5485..5759).63" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 730982" />
<Node Id="10353:[5775..5979).41" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 730983" />
<Node Id="10353:[5775..5979).43" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 730984" />
<Node Id="10353:[5995..6029).31" Label="return OnlyOneBitSet(onlyOptions); 730985" />
<Node Id="10353:[6002..6028).11" Label="OnlyOneBitSet(onlyOptions) 730986" />
<Node Id="10353:[6343..6358).11" Label="param OnlyOneBitSet(LookupOptions o) 730987" />
<Node Id="10353:[6384..6410).61" Label="return (o & (o - 1)) == 0; 730988" />
<Node Id="10353:[6384..6410).62" Label="return (o & (o - 1)) == 0; 730989" />
<Node Id="10312:[5188..5207).6" Label="param LookupSymbolsInSingleBinder(LookupResult result) 730990" />
<Node Id="10312:[5209..5220).6" Label="param LookupSymbolsInSingleBinder(string name) 730991" />
<Node Id="10312:[5222..5231).6" Label="param LookupSymbolsInSingleBinder(int arity) 730992" />
<Node Id="10312:[5233..5272).6" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 730993" />
<Node Id="10312:[5274..5295).6" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 730994" />
<Node Id="10312:[5297..5318).6" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 730995" />
<Node Id="10312:[5320..5333).6" Label="param LookupSymbolsInSingleBinder(bool diagnose) 730996" />
<Node Id="10312:[5124..5404).6" Label="param LookupSymbolsInSingleBinder(this) 730997" />
<Node Id="10312:[4685..4699).16" Label="result.IsClear 730998" />
<Node Id="10354:[3684..3818).38" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 730999" />
<Node Id="10354:[3720..3803).277" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731000" />
<Node Id="10354:[3720..3803).278" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731001" />
<Node Id="10354:[3720..3803).279" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731002" />
<Node Id="10312:[4680..4787).31" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 731003" />
<Node Id="10312:[4826..5058).76" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 731004" />
<Node Id="10312:[4826..5058).77" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 731005" />
<Node Id="10382:[1340..1359).6" Label="param LookupSymbolsInSingleBinder(LookupResult result) 731006" />
<Node Id="10382:[1374..1383).6" Label="param LookupSymbolsInSingleBinder(int arity) 731007" />
<Node Id="10382:[1385..1424).6" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 731008" />
<Node Id="10382:[1426..1447).6" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 731009" />
<Node Id="10382:[1449..1470).6" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731010" />
<Node Id="10382:[1472..1485).6" Label="param LookupSymbolsInSingleBinder(bool diagnose) 731011" />
<Node Id="10382:[1572..1586).6" Label="result.IsClear 731012" />
<Node Id="10354:[3684..3818).39" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731013" />
<Node Id="10354:[3720..3803).285" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731014" />
<Node Id="10354:[3720..3803).286" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731015" />
<Node Id="10354:[3720..3803).287" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731016" />
<Node Id="10382:[1559..1588).16" Label="Debug.Assert(result.IsClear); 731017" />
<Node Id="10382:[1619..1629).6" Label="LookupMask 731018" />
<Node Id="10382:[913..1046).6" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 731019" />
<Node Id="10382:[949..1031).11" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 731020" />
<Node Id="10382:[1604..1691).26" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 731021" />
<Node Id="10382:[1604..1691).27" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 731022" />
<Node Id="10382:[1604..1691).28" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 731023" />
<Node Id="10346:[10861..10875).6" Label="result.IsClear 731024" />
<Node Id="10354:[3684..3818).41" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731025" />
<Node Id="10354:[3720..3803).301" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731026" />
<Node Id="10354:[3720..3803).302" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731027" />
<Node Id="10354:[3720..3803).303" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731028" />
<Node Id="10346:[10848..10877).16" Label="Debug.Assert(result.IsClear); 731029" />
<Node Id="10346:[10897..10914).6" Label="IsSubmissionClass 731030" />
<Node Id="10346:[7666..7775).6" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 731031" />
<Node Id="10346:[7672..7773).16" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 731032" />
<Node Id="10346:[10893..11127).11" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 731033" />
<Node Id="10346:[3525..3638).38" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 731034" />
<Node Id="10312:[7729..7768).6" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 731035" />
<Node Id="10312:[7615..8420).6" Label="param LookupMembersInternal(this) 731036" />
<Node Id="10312:[7903..7936).21" Label="Debug.Assert(options.AreValid()); 731037" />
<Node Id="10312:[7916..7934).6" Label="options.AreValid() 731038" />
<Node Id="10353:[4698..4724).12" Label="param AreValid(this LookupOptions options) 731039" />
<Node Id="10353:[4750..4847).23" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 731040" />
<Node Id="10353:[4863..5000).45" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731041" />
<Node Id="10353:[4863..5000).46" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731042" />
<Node Id="10353:[5079..5183).23" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731043" />
<Node Id="10353:[5197..5323).34" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 731044" />
<Node Id="10353:[5485..5759).67" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731045" />
<Node Id="10353:[5485..5759).68" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731046" />
<Node Id="10353:[5485..5759).69" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731047" />
<Node Id="10353:[5775..5979).45" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731048" />
<Node Id="10353:[5775..5979).47" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731049" />
<Node Id="10353:[5995..6029).34" Label="return OnlyOneBitSet(onlyOptions); 731050" />
<Node Id="10353:[6002..6028).12" Label="OnlyOneBitSet(onlyOptions) 731051" />
<Node Id="10353:[6343..6358).12" Label="param OnlyOneBitSet(LookupOptions o) 731052" />
<Node Id="10353:[6384..6410).67" Label="return (o & (o - 1)) == 0; 731053" />
<Node Id="10353:[6384..6410).68" Label="return (o & (o - 1)) == 0; 731054" />
<Node Id="10312:[7952..7977).21" Label="Debug.Assert(arity $= 0); 731055" />
<Node Id="10312:[61608..61629).6" Label="param GetCandidateMembers(Binder originalBinder) 731056" />
<Node Id="10312:[63473..63501).6" Label="param CheckViability(TypeSymbol accessThroughType) 731057" />
<Node Id="10312:[63566..63612).6" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 731058" />
<Node Id="10312:[63638..63668).6" Label="bool inaccessibleViaQualifier; 731059" />
<Node Id="10312:[80978..80991).6" Label="param WrongArity(Symbol symbol) 731060" />
<Node Id="10312:[80993..81002).6" Label="param WrongArity(int arity) 731061" />
<Node Id="10312:[81004..81017).6" Label="param WrongArity(bool diagnose) 731062" />
<Node Id="10312:[81019..81040).6" Label="param WrongArity(LookupOptions options) 731063" />
<Node Id="10312:[81042..81069).6" Label="param WrongArity(out DiagnosticInfo diagInfo) 731064" />
<Node Id="10312:[81095..84034).6" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 731065" />
<Node Id="10312:[81196..82523).36" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731066" />
<Node Id="10312:[81196..82523).37" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731067" />
<Node Id="10312:[81196..82523).38" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731068" />
<Node Id="10312:[81196..82523).41" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731069" />
<Node Id="10312:[81319..81371).6" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 731070" />
<Node Id="10312:[81495..81570).26" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731071" />
<Node Id="10312:[81495..81570).27" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731072" />
<Node Id="10312:[81596..82500).31" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 731073" />
<Node Id="10312:[81596..82500).32" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 731074" />
<Node Id="10312:[81628..81659).6" Label="options.IsAttributeTypeLookup() 731075" />
<Node Id="10353:[7504..7530).12" Label="param IsAttributeTypeLookup(this LookupOptions options) 731076" />
<Node Id="10312:[81596..82500).35" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 731077" />
<Node Id="10312:[84050..84066).11" Label="diagInfo = null; 731078" />
<Node Id="10312:[66291..66342).6" Label="RefineAccessThroughType(options, accessThroughType) 731079" />
<Node Id="10312:[75301..75322).6" Label="param RefineAccessThroughType(LookupOptions options) 731080" />
<Node Id="10312:[75324..75352).6" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 731081" />
<Node Id="10312:[75735..75866).26" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 731082" />
<Node Id="10312:[75735..75866).27" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 731083" />
<Node Id="10312:[75742..75804).6" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 731084" />
<Node Id="10312:[75735..75866).29" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 731085" />
<Node Id="10312:[77543..77571).6" Label="param IsAccessible(TypeSymbol accessThroughType) 731086" />
<Node Id="10312:[77573..77604).6" Label="param IsAccessible(out bool failedThroughTypeCheck) 731087" />
<Node Id="10312:[77654..77700).6" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 731088" />
<Node Id="10312:[77501..78044).6" Label="param IsAccessible(this) 731089" />
<Node Id="10312:[77726..77892).21" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731090" />
<Node Id="10312:[77726..77892).22" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731091" />
<Node Id="10312:[77730..77782).6" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731092" />
<Node Id="10298:[471..492).53" Label="param Includes(this BinderFlags self) 731093" />
<Node Id="10298:[494..511).53" Label="param Includes(BinderFlags other) 731094" />
<Node Id="10312:[78402..78430).6" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731095" />
<Node Id="10312:[78432..78463).6" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 731096" />
<Node Id="10312:[78513..78552).6" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 731097" />
<Node Id="10312:[78346..78783).6" Label="param IsAccessibleHelper(this) 731098" />
<Node Id="10376:[1085..1113).6" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731099" />
<Node Id="10376:[1115..1146).6" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 731100" />
<Node Id="10376:[1196..1235).6" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 731101" />
<Node Id="10376:[1028..1425).6" Label="param IsAccessibleHelper(this) 731102" />
<Node Id="10286:[30098..30120).6" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 731103" />
<Node Id="10286:[30135..30160).6" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 731104" />
<Node Id="10286:[30175..30206).6" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 731105" />
<Node Id="10286:[30283..30330).6" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 731106" />
<Node Id="10286:[30012..30691).6" Label="param IsSymbolAccessibleConditional(this) 731107" />
<Node Id="10286:[30356..30522).21" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731108" />
<Node Id="10286:[30356..30522).22" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731109" />
<Node Id="10286:[30360..30412).6" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731110" />
<Node Id="10298:[471..492).54" Label="param Includes(this BinderFlags self) 731111" />
<Node Id="10298:[494..511).54" Label="param Includes(BinderFlags other) 731112" />
<Node Id="10060:[2136..2158).6" Label="param IsSymbolAccessible(NamedTypeSymbol within) 731113" />
<Node Id="10060:[2173..2198).6" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 731114" />
<Node Id="10060:[2213..2244).6" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 731115" />
<Node Id="10060:[2320..2366).6" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 731116" />
<Node Id="10060:[5621..5634).6" Label="param IsSymbolAccessibleCore(Symbol within) 731117" />
<Node Id="10060:[5691..5716).6" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 731118" />
<Node Id="10060:[5731..5762).6" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 731119" />
<Node Id="10060:[5777..5806).6" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 731120" />
<Node Id="10060:[5882..5928).6" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 731121" />
<Node Id="10060:[5954..5991).21" Label="Debug.Assert((object)symbol != null); 731122" />
<Node Id="10060:[6005..6042).21" Label="Debug.Assert((object)within != null); 731123" />
<Node Id="10060:[6005..6042).22" Label="Debug.Assert((object)within != null); 731124" />
<Node Id="10060:[6056..6090).11" Label="Debug.Assert(within.IsDefinition); 731125" />
<Node Id="10060:[6104..6172).16" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731126" />
<Node Id="10060:[6188..6219).11" Label="failedThroughTypeCheck = false; 731127" />
<Node Id="10060:[10202..10215).6" Label="param IsNamedTypeAccessible(Symbol within) 731128" />
<Node Id="10060:[10265..10311).6" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 731129" />
<Node Id="10060:[10337..10405).16" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731130" />
<Node Id="10060:[10419..10454).21" Label="Debug.Assert((object)type != null); 731131" />
<Node Id="10060:[10470..10516).6" Label="var compilation = within.DeclaringCompilation; 731132" />
<Node Id="10060:[10532..10544).6" Label="bool unused; 731133" />
<Node Id="10060:[10558..11295).6" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 731134" />
<Node Id="10060:[11990..12013).6" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 731135" />
<Node Id="10060:[12078..12091).6" Label="param IsNonNestedTypeAccessible(Symbol within) 731136" />
<Node Id="10060:[12117..12185).16" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731137" />
<Node Id="10060:[12199..12238).21" Label="Debug.Assert((object)assembly != null); 731138" />
<Node Id="10060:[12199..12238).22" Label="Debug.Assert((object)assembly != null); 731139" />
<Node Id="10346:[11710..11746).6" Label="originalBinder.IsSemanticModelBinder 731140" />
<Node Id="10286:[2155..2260).6" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 731141" />
<Node Id="10286:[2191..2245).21" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 731142" />
<Node Id="10286:[2191..2245).22" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 731143" />
<Node Id="10286:[2198..2244).6" Label="this.Flags.Includes(BinderFlags.SemanticModel) 731144" />
<Node Id="10298:[471..492).56" Label="param Includes(this BinderFlags self) 731145" />
<Node Id="10298:[494..511).56" Label="param Includes(BinderFlags other) 731146" />
<Node Id="10345:[28225..28251).6" Label="param IsUsingAlias(bool callerIsSemanticModel) 731147" />
<Node Id="10345:[28927..28940).11" Label="return false; 731148" />
<Node Id="10346:[12205..12212).6" Label="return; 731149" />
<Node Id="10354:[3720..3803).309" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731150" />
<Node Id="10312:[4680..4787).35" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 731151" />
<Node Id="10312:[4749..4764).6" Label="binder = scope; 731152" />
<Node Id="10312:[5087..5101).6" Label="return binder; 731153" />
<Node Id="10319:[43799..44676).31" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 731154" />
<Node Id="10319:[43853..43873).6" Label="IsViableType(result) 731155" />
<Node Id="10319:[41088..41107).6" Label="param IsViableType(LookupResult result) 731156" />
<Node Id="10319:[41138..41158).6" Label="result.IsMultiViable 731157" />
<Node Id="10354:[4919..5009).41" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 731158" />
<Node Id="10354:[4094..4107).53" Label="return _kind; 731159" />
<Node Id="10319:[41133..41220).11" Label="if (!result.IsMultiViable)
            {
                return false;
            } 731160" />
<Node Id="10319:[41254..41268).6" Label="result.Symbols 731161" />
<Node Id="10354:[4525..4595).11" Label="get
            {
                return _symbolList;
            } 731162" />
<Node Id="10354:[4561..4580).11" Label="return _symbolList; 731163" />
<Node Id="10319:[41236..41680).21" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 731164" />
<Node Id="10319:[41302..41665).6" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 731165" />
<Node Id="10319:[41634..41646).11" Label="return true; 731166" />
<Node Id="10319:[44751..44765).6" Label="bool wasError; 731167" />
<Node Id="10319:[84257..84273).6" Label="param ResultSymbol(SyntaxNode where) 731168" />
<Node Id="10319:[84288..84313).6" Label="param ResultSymbol(DiagnosticBag diagnostics) 731169" />
<Node Id="10319:[84374..84391).6" Label="param ResultSymbol(out bool wasError) 731170" />
<Node Id="10319:[84406..84447).6" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 731171" />
<Node Id="10319:[84462..84508).6" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 731172" />
<Node Id="10319:[84124..109887).6" Label="param ResultSymbol(this) 731173" />
<Node Id="10319:[85320..85348).21" Label="Debug.Assert(where != null); 731174" />
<Node Id="10319:[85320..85348).22" Label="Debug.Assert(where != null); 731175" />
<Node Id="10319:[85366..85400).21" Label="Debug.Assert(diagnostics != null); 731176" />
<Node Id="10319:[85366..85400).22" Label="Debug.Assert(diagnostics != null); 731177" />
<Node Id="10319:[85467..85484).11" Label="wasError = false; 731178" />
<Node Id="10319:[104874..105336).16" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 731179" />
<Node Id="10319:[104874..105336).17" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 731180" />
<Node Id="10319:[105368..106708).6" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 731181" />
<Node Id="10319:[105465..105535).17" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 731182" />
<Node Id="10319:[76360..76385).4" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 731183" />
<Node Id="10319:[76387..76402).4" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 731184" />
<Node Id="10319:[76494..76582).13" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 731185" />
<Node Id="10319:[84691..84861).11" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 731186" />
<Node Id="10319:[84764..84846).31" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731187" />
<Node Id="10319:[84764..84846).32" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731188" />
<Node Id="10319:[84764..84846).34" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731189" />
<Node Id="10319:[84764..84846).35" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731190" />
<Node Id="10319:[84764..84845).6" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 731191" />
<Node Id="10306:[358886..358901).6" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 731192" />
<Node Id="10306:[358903..358930).6" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 731193" />
<Node Id="10306:[358932..358945).6" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 731194" />
<Node Id="10306:[358947..358972).6" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 731195" />
<Node Id="10306:[358838..360009).6" Label="param CheckRuntimeSupportForSymbolAccess(this) 731196" />
<Node Id="10306:[358998..359998).31" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 731197" />
<Node Id="10306:[358998..359998).32" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 731198" />
<Node Id="10319:[44948..45377).11" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 731199" />
<Node Id="10354:[11428..11441).6" Label="this.Clear(); 731200" />
<Node Id="10319:[45408..45422).6" Label="result.Free(); 731201" />
<Node Id="10287:[2377..2471).11" Label="if (symbol is null)
                {
                    return default;
                } 731202" />
<Node Id="10287:[791..833).11" Label="Debug.Assert(typeWithAnnotations.HasType); 731203" />
<Node Id="10287:[912..927).6" Label="_symbol = null; 731204" />
<Node Id="10287:[912..919).6" Label="_symbol 731205" />
<Node Id="10287:[945..972).6" Label="_isNullableEnabled = false; 731206" />
<Node Id="10287:[945..963).6" Label="_isNullableEnabled 731207" />
<Node Id="10286:[21546..21561).6" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 731208" />
<Node Id="10286:[21563..21583).6" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731209" />
<Node Id="10286:[22086..22108).6" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 731210" />
<Node Id="10286:[22110..22130).6" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731211" />
<Node Id="10286:[15616..15690).26" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 731212" />
<Node Id="10286:[15616..15690).27" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 731213" />
<Node Id="10286:[15715..15910).6" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 731214" />
<Node Id="10286:[23124..23146).6" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 731215" />
<Node Id="10286:[23161..23181).6" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731216" />
<Node Id="10286:[23281..23301).6" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 731217" />
<Node Id="10286:[23380..23684).36" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 731218" />
<Node Id="10286:[23893..24026).11" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 731219" />
<Node Id="10286:[24545..24641).11" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 731220" />
<Node Id="10286:[24655..25349).6" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 731221" />
<Node Id="10286:[26910..26935).6" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 731222" />
<Node Id="10286:[26952..26974).6" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 731223" />
<Node Id="10286:[27002..27022).6" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 731224" />
<Node Id="10286:[27048..27088).21" Label="RoslynDebug.Assert(diagnostics != null); 731225" />
<Node Id="10286:[27048..27088).22" Label="RoslynDebug.Assert(diagnostics != null); 731226" />
<Node Id="10286:[27208..27236).11" Label="DiagnosticInfo? info = null; 731227" />
<Node Id="10286:[27250..27722).6" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 731228" />
<Node Id="10286:[27738..27845).16" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 731229" />
<Node Id="10286:[27738..27845).17" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 731230" />
<Node Id="10286:[27861..27873).6" Label="return kind; 731231" />
<Node Id="10286:[26281..26812).6" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 731232" />
<Node Id="10286:[26450..26769).6" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 731233" />
<Node Id="10287:[1680..1716).6" Label="=$ _symbol?.Kind == SymbolKind.Alias 731234" />
<Node Id="10287:[1683..1690).6" Label="_symbol 731235" />
<Node Id="10287:[1683..1716).11" Label="_symbol?.Kind == SymbolKind.Alias 731236" />
<Node Id="10319:[51935..52244).11" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 731237" />
<Node Id="10076:[5223..5250).18" Label="Debug.Assert(node != null); 731238" />
<Node Id="10076:[5277..5448).18" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 731239" />
<Node Id="10077:[44231..44317).41" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 731240" />
<Node Id="10286:[1688..1781).25" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 731241" />
<Node Id="10298:[471..492).57" Label="param Includes(this BinderFlags self) 731242" />
<Node Id="10286:[1820..1963).25" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 731243" />
<Node Id="10298:[471..492).58" Label="param Includes(this BinderFlags self) 731244" />
<Node Id="10319:[42478..42805).19" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 731245" />
<Node Id="10319:[42821..42938).49" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 731246" />
<Node Id="10319:[42839..42937).7" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 731247" />
<Node Id="10319:[63849..63870).7" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 731248" />
<Node Id="10319:[63885..63919).7" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 731249" />
<Node Id="10319:[63934..63945).7" Label="param CreateErrorIfLookupOnTypeParameter(string name) 731250" />
<Node Id="10319:[63960..63969).7" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 731251" />
<Node Id="10319:[63984..64009).7" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 731252" />
<Node Id="10319:[63768..64484).7" Label="param CreateErrorIfLookupOnTypeParameter(this) 731253" />
<Node Id="10319:[64035..64445).25" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 731254" />
<Node Id="10319:[64035..64445).26" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 731255" />
<Node Id="10319:[64461..64473).13" Label="return null; 731256" />
<Node Id="10319:[42821..42938).55" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 731257" />
<Node Id="10319:[42952..43079).19" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 731258" />
<Node Id="10319:[42952..43079).20" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 731259" />
<Node Id="10354:[11312..11328).7" Label="instance.IsClear 731260" />
<Node Id="10354:[3684..3818).43" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731261" />
<Node Id="10354:[3720..3803).313" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731262" />
<Node Id="10354:[3720..3803).314" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731263" />
<Node Id="10354:[3720..3803).315" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731264" />
<Node Id="10354:[11299..11330).19" Label="Debug.Assert(instance.IsClear); 731265" />
<Node Id="10319:[50330..50355).7" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 731266" />
<Node Id="10312:[3905..3919).7" Label="result.IsClear 731267" />
<Node Id="10354:[3684..3818).44" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731268" />
<Node Id="10354:[3720..3803).321" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731269" />
<Node Id="10354:[3720..3803).322" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731270" />
<Node Id="10354:[3720..3803).323" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731271" />
<Node Id="10312:[3892..3921).19" Label="Debug.Assert(result.IsClear); 731272" />
<Node Id="10312:[3935..3968).25" Label="Debug.Assert(options.AreValid()); 731273" />
<Node Id="10312:[3948..3966).7" Label="options.AreValid() 731274" />
<Node Id="10353:[4698..4724).13" Label="param AreValid(this LookupOptions options) 731275" />
<Node Id="10353:[4750..4847).25" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 731276" />
<Node Id="10353:[4863..5000).49" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731277" />
<Node Id="10353:[4863..5000).50" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731278" />
<Node Id="10353:[5079..5183).25" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731279" />
<Node Id="10353:[5197..5323).37" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 731280" />
<Node Id="10353:[5485..5759).73" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731281" />
<Node Id="10353:[5485..5759).74" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731282" />
<Node Id="10353:[5485..5759).75" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731283" />
<Node Id="10353:[5775..5979).49" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731284" />
<Node Id="10353:[5775..5979).51" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731285" />
<Node Id="10353:[5995..6029).37" Label="return OnlyOneBitSet(onlyOptions); 731286" />
<Node Id="10353:[6002..6028).13" Label="OnlyOneBitSet(onlyOptions) 731287" />
<Node Id="10353:[6343..6358).13" Label="param OnlyOneBitSet(LookupOptions o) 731288" />
<Node Id="10353:[6384..6410).73" Label="return (o & (o - 1)) == 0; 731289" />
<Node Id="10353:[6384..6410).74" Label="return (o & (o - 1)) == 0; 731290" />
<Node Id="10312:[5188..5207).7" Label="param LookupSymbolsInSingleBinder(LookupResult result) 731291" />
<Node Id="10312:[5209..5220).7" Label="param LookupSymbolsInSingleBinder(string name) 731292" />
<Node Id="10312:[5222..5231).7" Label="param LookupSymbolsInSingleBinder(int arity) 731293" />
<Node Id="10312:[5233..5272).7" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 731294" />
<Node Id="10312:[5274..5295).7" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 731295" />
<Node Id="10312:[5297..5318).7" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731296" />
<Node Id="10312:[5320..5333).7" Label="param LookupSymbolsInSingleBinder(bool diagnose) 731297" />
<Node Id="10312:[5124..5404).7" Label="param LookupSymbolsInSingleBinder(this) 731298" />
<Node Id="10312:[4685..4699).19" Label="result.IsClear 731299" />
<Node Id="10354:[3684..3818).45" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731300" />
<Node Id="10354:[3720..3803).329" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731301" />
<Node Id="10354:[3720..3803).330" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731302" />
<Node Id="10354:[3720..3803).331" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731303" />
<Node Id="10312:[4680..4787).37" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 731304" />
<Node Id="10312:[4826..5058).91" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 731305" />
<Node Id="10312:[4826..5058).92" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 731306" />
<Node Id="10382:[1340..1359).7" Label="param LookupSymbolsInSingleBinder(LookupResult result) 731307" />
<Node Id="10382:[1374..1383).7" Label="param LookupSymbolsInSingleBinder(int arity) 731308" />
<Node Id="10382:[1385..1424).7" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 731309" />
<Node Id="10382:[1426..1447).7" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 731310" />
<Node Id="10382:[1449..1470).7" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731311" />
<Node Id="10382:[1472..1485).7" Label="param LookupSymbolsInSingleBinder(bool diagnose) 731312" />
<Node Id="10382:[1572..1586).7" Label="result.IsClear 731313" />
<Node Id="10354:[3684..3818).46" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731314" />
<Node Id="10354:[3720..3803).337" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731315" />
<Node Id="10354:[3720..3803).338" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731316" />
<Node Id="10354:[3720..3803).339" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731317" />
<Node Id="10382:[1559..1588).19" Label="Debug.Assert(result.IsClear); 731318" />
<Node Id="10382:[1619..1629).7" Label="LookupMask 731319" />
<Node Id="10382:[913..1046).7" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 731320" />
<Node Id="10382:[949..1031).13" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 731321" />
<Node Id="10382:[1604..1691).31" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 731322" />
<Node Id="10382:[1604..1691).32" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 731323" />
<Node Id="10382:[1604..1691).33" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 731324" />
<Node Id="10346:[10861..10875).7" Label="result.IsClear 731325" />
<Node Id="10354:[3684..3818).48" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731326" />
<Node Id="10354:[3720..3803).353" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731327" />
<Node Id="10354:[3720..3803).354" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731328" />
<Node Id="10354:[3720..3803).355" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731329" />
<Node Id="10346:[10848..10877).19" Label="Debug.Assert(result.IsClear); 731330" />
<Node Id="10346:[10897..10914).7" Label="IsSubmissionClass 731331" />
<Node Id="10346:[7666..7775).7" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 731332" />
<Node Id="10346:[7672..7773).19" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 731333" />
<Node Id="10346:[10893..11127).13" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 731334" />
<Node Id="10346:[3525..3638).45" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 731335" />
<Node Id="10312:[7729..7768).7" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 731336" />
<Node Id="10312:[7615..8420).7" Label="param LookupMembersInternal(this) 731337" />
<Node Id="10312:[7903..7936).25" Label="Debug.Assert(options.AreValid()); 731338" />
<Node Id="10312:[7916..7934).7" Label="options.AreValid() 731339" />
<Node Id="10353:[4698..4724).14" Label="param AreValid(this LookupOptions options) 731340" />
<Node Id="10353:[4750..4847).27" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 731341" />
<Node Id="10353:[4863..5000).53" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731342" />
<Node Id="10353:[4863..5000).54" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731343" />
<Node Id="10353:[5079..5183).27" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731344" />
<Node Id="10353:[5197..5323).40" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 731345" />
<Node Id="10353:[5485..5759).79" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731346" />
<Node Id="10353:[5485..5759).80" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731347" />
<Node Id="10353:[5485..5759).81" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731348" />
<Node Id="10353:[5775..5979).53" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731349" />
<Node Id="10353:[5775..5979).55" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731350" />
<Node Id="10353:[5995..6029).40" Label="return OnlyOneBitSet(onlyOptions); 731351" />
<Node Id="10353:[6002..6028).14" Label="OnlyOneBitSet(onlyOptions) 731352" />
<Node Id="10353:[6343..6358).14" Label="param OnlyOneBitSet(LookupOptions o) 731353" />
<Node Id="10353:[6384..6410).79" Label="return (o & (o - 1)) == 0; 731354" />
<Node Id="10353:[6384..6410).80" Label="return (o & (o - 1)) == 0; 731355" />
<Node Id="10312:[7952..7977).25" Label="Debug.Assert(arity $= 0); 731356" />
<Node Id="10312:[61608..61629).7" Label="param GetCandidateMembers(Binder originalBinder) 731357" />
<Node Id="10312:[63566..63612).7" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 731358" />
<Node Id="10312:[63638..63668).7" Label="bool inaccessibleViaQualifier; 731359" />
<Node Id="10312:[80978..80991).7" Label="param WrongArity(Symbol symbol) 731360" />
<Node Id="10312:[80993..81002).7" Label="param WrongArity(int arity) 731361" />
<Node Id="10312:[81004..81017).7" Label="param WrongArity(bool diagnose) 731362" />
<Node Id="10312:[81019..81040).7" Label="param WrongArity(LookupOptions options) 731363" />
<Node Id="10312:[81042..81069).7" Label="param WrongArity(out DiagnosticInfo diagInfo) 731364" />
<Node Id="10312:[81095..84034).7" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 731365" />
<Node Id="10312:[81196..82523).43" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731366" />
<Node Id="10312:[81196..82523).44" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731367" />
<Node Id="10312:[81196..82523).45" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731368" />
<Node Id="10312:[81196..82523).48" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731369" />
<Node Id="10312:[81319..81371).7" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 731370" />
<Node Id="10312:[81495..81570).31" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731371" />
<Node Id="10312:[81495..81570).32" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731372" />
<Node Id="10312:[81596..82500).37" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 731373" />
<Node Id="10312:[81596..82500).38" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 731374" />
<Node Id="10312:[81628..81659).7" Label="options.IsAttributeTypeLookup() 731375" />
<Node Id="10353:[7504..7530).14" Label="param IsAttributeTypeLookup(this LookupOptions options) 731376" />
<Node Id="10312:[81596..82500).41" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 731377" />
<Node Id="10312:[84050..84066).13" Label="diagInfo = null; 731378" />
<Node Id="10312:[66291..66342).7" Label="RefineAccessThroughType(options, accessThroughType) 731379" />
<Node Id="10312:[75301..75322).7" Label="param RefineAccessThroughType(LookupOptions options) 731380" />
<Node Id="10312:[75324..75352).7" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 731381" />
<Node Id="10312:[75735..75866).31" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 731382" />
<Node Id="10312:[75735..75866).32" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 731383" />
<Node Id="10312:[75742..75804).7" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 731384" />
<Node Id="10312:[75735..75866).34" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 731385" />
<Node Id="10312:[77543..77571).7" Label="param IsAccessible(TypeSymbol accessThroughType) 731386" />
<Node Id="10312:[77573..77604).7" Label="param IsAccessible(out bool failedThroughTypeCheck) 731387" />
<Node Id="10312:[77654..77700).7" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 731388" />
<Node Id="10312:[77501..78044).7" Label="param IsAccessible(this) 731389" />
<Node Id="10312:[77726..77892).25" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731390" />
<Node Id="10312:[77726..77892).26" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731391" />
<Node Id="10312:[77730..77782).7" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731392" />
<Node Id="10298:[471..492).62" Label="param Includes(this BinderFlags self) 731393" />
<Node Id="10298:[494..511).62" Label="param Includes(BinderFlags other) 731394" />
<Node Id="10312:[78402..78430).7" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731395" />
<Node Id="10312:[78432..78463).7" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 731396" />
<Node Id="10312:[78513..78552).7" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 731397" />
<Node Id="10312:[78346..78783).7" Label="param IsAccessibleHelper(this) 731398" />
<Node Id="10376:[1085..1113).7" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731399" />
<Node Id="10376:[1115..1146).7" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 731400" />
<Node Id="10376:[1196..1235).7" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 731401" />
<Node Id="10376:[1028..1425).7" Label="param IsAccessibleHelper(this) 731402" />
<Node Id="10286:[30098..30120).7" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 731403" />
<Node Id="10286:[30135..30160).7" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 731404" />
<Node Id="10286:[30175..30206).7" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 731405" />
<Node Id="10286:[30283..30330).7" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 731406" />
<Node Id="10286:[30012..30691).7" Label="param IsSymbolAccessibleConditional(this) 731407" />
<Node Id="10286:[30356..30522).25" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731408" />
<Node Id="10286:[30356..30522).26" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731409" />
<Node Id="10286:[30360..30412).7" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731410" />
<Node Id="10298:[471..492).63" Label="param Includes(this BinderFlags self) 731411" />
<Node Id="10298:[494..511).63" Label="param Includes(BinderFlags other) 731412" />
<Node Id="10060:[2136..2158).7" Label="param IsSymbolAccessible(NamedTypeSymbol within) 731413" />
<Node Id="10060:[2173..2198).7" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 731414" />
<Node Id="10060:[2213..2244).7" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 731415" />
<Node Id="10060:[2320..2366).7" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 731416" />
<Node Id="10060:[5621..5634).7" Label="param IsSymbolAccessibleCore(Symbol within) 731417" />
<Node Id="10060:[5691..5716).7" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 731418" />
<Node Id="10060:[5731..5762).7" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 731419" />
<Node Id="10060:[5777..5806).7" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 731420" />
<Node Id="10060:[5882..5928).7" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 731421" />
<Node Id="10060:[5954..5991).25" Label="Debug.Assert((object)symbol != null); 731422" />
<Node Id="10060:[6005..6042).25" Label="Debug.Assert((object)within != null); 731423" />
<Node Id="10060:[6005..6042).26" Label="Debug.Assert((object)within != null); 731424" />
<Node Id="10060:[6056..6090).13" Label="Debug.Assert(within.IsDefinition); 731425" />
<Node Id="10060:[6104..6172).19" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731426" />
<Node Id="10060:[6188..6219).13" Label="failedThroughTypeCheck = false; 731427" />
<Node Id="10060:[10202..10215).7" Label="param IsNamedTypeAccessible(Symbol within) 731428" />
<Node Id="10060:[10265..10311).7" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 731429" />
<Node Id="10060:[10337..10405).19" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731430" />
<Node Id="10060:[10419..10454).25" Label="Debug.Assert((object)type != null); 731431" />
<Node Id="10060:[10470..10516).7" Label="var compilation = within.DeclaringCompilation; 731432" />
<Node Id="10060:[10532..10544).7" Label="bool unused; 731433" />
<Node Id="10060:[10558..11295).7" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 731434" />
<Node Id="10060:[11990..12013).7" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 731435" />
<Node Id="10060:[12078..12091).7" Label="param IsNonNestedTypeAccessible(Symbol within) 731436" />
<Node Id="10060:[12117..12185).19" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731437" />
<Node Id="10060:[12199..12238).25" Label="Debug.Assert((object)assembly != null); 731438" />
<Node Id="10060:[12199..12238).26" Label="Debug.Assert((object)assembly != null); 731439" />
<Node Id="10346:[11710..11746).7" Label="originalBinder.IsSemanticModelBinder 731440" />
<Node Id="10286:[2155..2260).7" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 731441" />
<Node Id="10286:[2191..2245).25" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 731442" />
<Node Id="10286:[2191..2245).26" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 731443" />
<Node Id="10286:[2198..2244).7" Label="this.Flags.Includes(BinderFlags.SemanticModel) 731444" />
<Node Id="10298:[471..492).65" Label="param Includes(this BinderFlags self) 731445" />
<Node Id="10298:[494..511).65" Label="param Includes(BinderFlags other) 731446" />
<Node Id="10345:[28225..28251).7" Label="param IsUsingAlias(bool callerIsSemanticModel) 731447" />
<Node Id="10345:[28927..28940).13" Label="return false; 731448" />
<Node Id="10346:[12205..12212).7" Label="return; 731449" />
<Node Id="10354:[3720..3803).361" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731450" />
<Node Id="10312:[4680..4787).41" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 731451" />
<Node Id="10312:[4749..4764).7" Label="binder = scope; 731452" />
<Node Id="10312:[5087..5101).7" Label="return binder; 731453" />
<Node Id="10319:[43799..44676).37" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 731454" />
<Node Id="10319:[43853..43873).7" Label="IsViableType(result) 731455" />
<Node Id="10319:[41088..41107).7" Label="param IsViableType(LookupResult result) 731456" />
<Node Id="10319:[41138..41158).7" Label="result.IsMultiViable 731457" />
<Node Id="10354:[4919..5009).48" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 731458" />
<Node Id="10354:[4094..4107).62" Label="return _kind; 731459" />
<Node Id="10319:[41133..41220).13" Label="if (!result.IsMultiViable)
            {
                return false;
            } 731460" />
<Node Id="10319:[41254..41268).7" Label="result.Symbols 731461" />
<Node Id="10354:[4525..4595).13" Label="get
            {
                return _symbolList;
            } 731462" />
<Node Id="10354:[4561..4580).13" Label="return _symbolList; 731463" />
<Node Id="10319:[41236..41680).25" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 731464" />
<Node Id="10319:[41302..41665).7" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 731465" />
<Node Id="10319:[41634..41646).13" Label="return true; 731466" />
<Node Id="10319:[44751..44765).7" Label="bool wasError; 731467" />
<Node Id="10319:[84288..84313).7" Label="param ResultSymbol(DiagnosticBag diagnostics) 731468" />
<Node Id="10319:[84374..84391).7" Label="param ResultSymbol(out bool wasError) 731469" />
<Node Id="10319:[84406..84447).7" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 731470" />
<Node Id="10319:[84462..84508).7" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 731471" />
<Node Id="10319:[84124..109887).7" Label="param ResultSymbol(this) 731472" />
<Node Id="10319:[85320..85348).25" Label="Debug.Assert(where != null); 731473" />
<Node Id="10319:[85366..85400).25" Label="Debug.Assert(diagnostics != null); 731474" />
<Node Id="10319:[85366..85400).26" Label="Debug.Assert(diagnostics != null); 731475" />
<Node Id="10319:[85467..85484).13" Label="wasError = false; 731476" />
<Node Id="10319:[104874..105336).19" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 731477" />
<Node Id="10319:[104874..105336).20" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 731478" />
<Node Id="10319:[105368..106708).7" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 731479" />
<Node Id="10319:[76360..76385).5" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 731480" />
<Node Id="10319:[76387..76402).5" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 731481" />
<Node Id="10319:[76494..76582).17" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 731482" />
<Node Id="10319:[84691..84861).13" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 731483" />
<Node Id="10319:[84764..84846).37" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731484" />
<Node Id="10319:[84764..84846).38" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731485" />
<Node Id="10319:[84764..84846).40" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731486" />
<Node Id="10319:[84764..84846).41" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731487" />
<Node Id="10319:[84764..84845).7" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 731488" />
<Node Id="10306:[358886..358901).7" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 731489" />
<Node Id="10306:[358903..358930).7" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 731490" />
<Node Id="10306:[358932..358945).7" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 731491" />
<Node Id="10306:[358947..358972).7" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 731492" />
<Node Id="10306:[358838..360009).7" Label="param CheckRuntimeSupportForSymbolAccess(this) 731493" />
<Node Id="10306:[358998..359998).37" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 731494" />
<Node Id="10306:[358998..359998).38" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 731495" />
<Node Id="10319:[44948..45377).13" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 731496" />
<Node Id="10354:[11428..11441).7" Label="this.Clear(); 731497" />
<Node Id="10319:[45408..45422).7" Label="result.Free(); 731498" />
<Node Id="10287:[2377..2471).13" Label="if (symbol is null)
                {
                    return default;
                } 731499" />
<Node Id="10287:[791..833).13" Label="Debug.Assert(typeWithAnnotations.HasType); 731500" />
<Node Id="10287:[912..927).7" Label="_symbol = null; 731501" />
<Node Id="10287:[912..919).7" Label="_symbol 731502" />
<Node Id="10287:[945..972).7" Label="_isNullableEnabled = false; 731503" />
<Node Id="10287:[945..963).7" Label="_isNullableEnabled 731504" />
<Node Id="10286:[21546..21561).7" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 731505" />
<Node Id="10286:[21563..21583).7" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731506" />
<Node Id="10286:[22086..22108).7" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 731507" />
<Node Id="10286:[22110..22130).7" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731508" />
<Node Id="10286:[15616..15690).31" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 731509" />
<Node Id="10286:[15616..15690).32" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 731510" />
<Node Id="10286:[15715..15910).7" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 731511" />
<Node Id="10286:[23124..23146).7" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 731512" />
<Node Id="10286:[23161..23181).7" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731513" />
<Node Id="10286:[23281..23301).7" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 731514" />
<Node Id="10286:[23380..23684).43" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 731515" />
<Node Id="10286:[23893..24026).13" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 731516" />
<Node Id="10286:[24545..24641).13" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 731517" />
<Node Id="10286:[24655..25349).7" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 731518" />
<Node Id="10286:[26910..26935).7" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 731519" />
<Node Id="10286:[26952..26974).7" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 731520" />
<Node Id="10286:[27002..27022).7" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 731521" />
<Node Id="10286:[27048..27088).25" Label="RoslynDebug.Assert(diagnostics != null); 731522" />
<Node Id="10286:[27048..27088).26" Label="RoslynDebug.Assert(diagnostics != null); 731523" />
<Node Id="10286:[27208..27236).13" Label="DiagnosticInfo? info = null; 731524" />
<Node Id="10286:[27250..27722).7" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 731525" />
<Node Id="10286:[27738..27845).19" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 731526" />
<Node Id="10286:[27738..27845).20" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 731527" />
<Node Id="10286:[27861..27873).7" Label="return kind; 731528" />
<Node Id="10286:[26281..26812).7" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 731529" />
<Node Id="10286:[26450..26769).7" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 731530" />
<Node Id="10287:[1680..1716).7" Label="=$ _symbol?.Kind == SymbolKind.Alias 731531" />
<Node Id="10287:[1683..1690).7" Label="_symbol 731532" />
<Node Id="10287:[1683..1716).13" Label="_symbol?.Kind == SymbolKind.Alias 731533" />
<Node Id="10319:[51935..52244).13" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 731534" />
<Node Id="10319:[42478..42805).22" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 731535" />
<Node Id="10319:[42821..42938).57" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 731536" />
<Node Id="10319:[42839..42937).8" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 731537" />
<Node Id="10319:[63849..63870).8" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 731538" />
<Node Id="10319:[63885..63919).8" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 731539" />
<Node Id="10319:[63934..63945).8" Label="param CreateErrorIfLookupOnTypeParameter(string name) 731540" />
<Node Id="10319:[63960..63969).8" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 731541" />
<Node Id="10319:[63984..64009).8" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 731542" />
<Node Id="10319:[63768..64484).8" Label="param CreateErrorIfLookupOnTypeParameter(this) 731543" />
<Node Id="10319:[64035..64445).29" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 731544" />
<Node Id="10319:[64035..64445).30" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 731545" />
<Node Id="10319:[64461..64473).15" Label="return null; 731546" />
<Node Id="10319:[42821..42938).63" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 731547" />
<Node Id="10319:[42952..43079).22" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 731548" />
<Node Id="10319:[42952..43079).23" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 731549" />
<Node Id="10354:[11312..11328).8" Label="instance.IsClear 731550" />
<Node Id="10354:[3684..3818).50" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731551" />
<Node Id="10354:[3720..3803).365" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731552" />
<Node Id="10354:[3720..3803).366" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731553" />
<Node Id="10354:[3720..3803).367" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731554" />
<Node Id="10354:[11299..11330).22" Label="Debug.Assert(instance.IsClear); 731555" />
<Node Id="10319:[50330..50355).8" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 731556" />
<Node Id="10312:[3905..3919).8" Label="result.IsClear 731557" />
<Node Id="10354:[3684..3818).51" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731558" />
<Node Id="10354:[3720..3803).373" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731559" />
<Node Id="10354:[3720..3803).374" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731560" />
<Node Id="10354:[3720..3803).375" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731561" />
<Node Id="10312:[3892..3921).22" Label="Debug.Assert(result.IsClear); 731562" />
<Node Id="10312:[3935..3968).29" Label="Debug.Assert(options.AreValid()); 731563" />
<Node Id="10312:[3948..3966).8" Label="options.AreValid() 731564" />
<Node Id="10353:[4698..4724).15" Label="param AreValid(this LookupOptions options) 731565" />
<Node Id="10353:[4750..4847).29" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 731566" />
<Node Id="10353:[4863..5000).57" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731567" />
<Node Id="10353:[4863..5000).58" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731568" />
<Node Id="10353:[5079..5183).29" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731569" />
<Node Id="10353:[5197..5323).43" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 731570" />
<Node Id="10353:[5485..5759).85" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731571" />
<Node Id="10353:[5485..5759).86" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731572" />
<Node Id="10353:[5485..5759).87" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731573" />
<Node Id="10353:[5775..5979).57" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731574" />
<Node Id="10353:[5775..5979).59" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731575" />
<Node Id="10353:[5995..6029).43" Label="return OnlyOneBitSet(onlyOptions); 731576" />
<Node Id="10353:[6002..6028).15" Label="OnlyOneBitSet(onlyOptions) 731577" />
<Node Id="10353:[6343..6358).15" Label="param OnlyOneBitSet(LookupOptions o) 731578" />
<Node Id="10353:[6384..6410).85" Label="return (o & (o - 1)) == 0; 731579" />
<Node Id="10353:[6384..6410).86" Label="return (o & (o - 1)) == 0; 731580" />
<Node Id="10312:[5188..5207).8" Label="param LookupSymbolsInSingleBinder(LookupResult result) 731581" />
<Node Id="10312:[5209..5220).8" Label="param LookupSymbolsInSingleBinder(string name) 731582" />
<Node Id="10312:[5222..5231).8" Label="param LookupSymbolsInSingleBinder(int arity) 731583" />
<Node Id="10312:[5233..5272).8" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 731584" />
<Node Id="10312:[5274..5295).8" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 731585" />
<Node Id="10312:[5297..5318).8" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731586" />
<Node Id="10312:[5320..5333).8" Label="param LookupSymbolsInSingleBinder(bool diagnose) 731587" />
<Node Id="10312:[5124..5404).8" Label="param LookupSymbolsInSingleBinder(this) 731588" />
<Node Id="10312:[4685..4699).22" Label="result.IsClear 731589" />
<Node Id="10354:[3684..3818).52" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731590" />
<Node Id="10354:[3720..3803).381" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731591" />
<Node Id="10354:[3720..3803).382" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731592" />
<Node Id="10354:[3720..3803).383" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731593" />
<Node Id="10312:[4680..4787).43" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 731594" />
<Node Id="10312:[4826..5058).106" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 731595" />
<Node Id="10312:[4826..5058).107" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 731596" />
<Node Id="10382:[1340..1359).8" Label="param LookupSymbolsInSingleBinder(LookupResult result) 731597" />
<Node Id="10382:[1374..1383).8" Label="param LookupSymbolsInSingleBinder(int arity) 731598" />
<Node Id="10382:[1385..1424).8" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 731599" />
<Node Id="10382:[1426..1447).8" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 731600" />
<Node Id="10382:[1449..1470).8" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731601" />
<Node Id="10382:[1472..1485).8" Label="param LookupSymbolsInSingleBinder(bool diagnose) 731602" />
<Node Id="10382:[1572..1586).8" Label="result.IsClear 731603" />
<Node Id="10354:[3684..3818).53" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731604" />
<Node Id="10354:[3720..3803).389" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731605" />
<Node Id="10354:[3720..3803).390" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731606" />
<Node Id="10354:[3720..3803).391" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731607" />
<Node Id="10382:[1559..1588).22" Label="Debug.Assert(result.IsClear); 731608" />
<Node Id="10382:[1619..1629).8" Label="LookupMask 731609" />
<Node Id="10382:[913..1046).8" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 731610" />
<Node Id="10382:[949..1031).15" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 731611" />
<Node Id="10382:[1604..1691).36" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 731612" />
<Node Id="10382:[1604..1691).37" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 731613" />
<Node Id="10382:[1604..1691).38" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 731614" />
<Node Id="10346:[10861..10875).8" Label="result.IsClear 731615" />
<Node Id="10354:[3684..3818).55" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731616" />
<Node Id="10354:[3720..3803).405" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731617" />
<Node Id="10354:[3720..3803).406" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731618" />
<Node Id="10354:[3720..3803).407" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731619" />
<Node Id="10346:[10848..10877).22" Label="Debug.Assert(result.IsClear); 731620" />
<Node Id="10346:[10897..10914).8" Label="IsSubmissionClass 731621" />
<Node Id="10346:[7666..7775).8" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 731622" />
<Node Id="10346:[7672..7773).22" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 731623" />
<Node Id="10346:[10893..11127).15" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 731624" />
<Node Id="10346:[3525..3638).52" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 731625" />
<Node Id="10312:[7729..7768).8" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 731626" />
<Node Id="10312:[7615..8420).8" Label="param LookupMembersInternal(this) 731627" />
<Node Id="10312:[7903..7936).29" Label="Debug.Assert(options.AreValid()); 731628" />
<Node Id="10312:[7916..7934).8" Label="options.AreValid() 731629" />
<Node Id="10353:[4698..4724).16" Label="param AreValid(this LookupOptions options) 731630" />
<Node Id="10353:[4750..4847).31" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 731631" />
<Node Id="10353:[4863..5000).61" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731632" />
<Node Id="10353:[4863..5000).62" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731633" />
<Node Id="10353:[5079..5183).31" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731634" />
<Node Id="10353:[5197..5323).46" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 731635" />
<Node Id="10353:[5485..5759).91" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731636" />
<Node Id="10353:[5485..5759).92" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731637" />
<Node Id="10353:[5485..5759).93" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731638" />
<Node Id="10353:[5775..5979).61" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731639" />
<Node Id="10353:[5775..5979).63" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731640" />
<Node Id="10353:[5995..6029).46" Label="return OnlyOneBitSet(onlyOptions); 731641" />
<Node Id="10353:[6002..6028).16" Label="OnlyOneBitSet(onlyOptions) 731642" />
<Node Id="10353:[6343..6358).16" Label="param OnlyOneBitSet(LookupOptions o) 731643" />
<Node Id="10353:[6384..6410).91" Label="return (o & (o - 1)) == 0; 731644" />
<Node Id="10353:[6384..6410).92" Label="return (o & (o - 1)) == 0; 731645" />
<Node Id="10312:[7952..7977).29" Label="Debug.Assert(arity $= 0); 731646" />
<Node Id="10312:[61608..61629).8" Label="param GetCandidateMembers(Binder originalBinder) 731647" />
<Node Id="10312:[63566..63612).8" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 731648" />
<Node Id="10312:[80978..80991).8" Label="param WrongArity(Symbol symbol) 731649" />
<Node Id="10312:[80993..81002).8" Label="param WrongArity(int arity) 731650" />
<Node Id="10312:[81004..81017).8" Label="param WrongArity(bool diagnose) 731651" />
<Node Id="10312:[81019..81040).8" Label="param WrongArity(LookupOptions options) 731652" />
<Node Id="10312:[81042..81069).8" Label="param WrongArity(out DiagnosticInfo diagInfo) 731653" />
<Node Id="10312:[81095..84034).8" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 731654" />
<Node Id="10312:[81196..82523).50" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731655" />
<Node Id="10312:[81196..82523).51" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731656" />
<Node Id="10312:[81196..82523).52" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731657" />
<Node Id="10312:[81196..82523).55" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731658" />
<Node Id="10312:[81319..81371).8" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 731659" />
<Node Id="10312:[81495..81570).36" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731660" />
<Node Id="10312:[81495..81570).37" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731661" />
<Node Id="10312:[81596..82500).43" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 731662" />
<Node Id="10312:[81596..82500).44" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 731663" />
<Node Id="10312:[81628..81659).8" Label="options.IsAttributeTypeLookup() 731664" />
<Node Id="10353:[7504..7530).16" Label="param IsAttributeTypeLookup(this LookupOptions options) 731665" />
<Node Id="10312:[81596..82500).47" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 731666" />
<Node Id="10312:[84050..84066).15" Label="diagInfo = null; 731667" />
<Node Id="10312:[66291..66342).8" Label="RefineAccessThroughType(options, accessThroughType) 731668" />
<Node Id="10312:[75301..75322).8" Label="param RefineAccessThroughType(LookupOptions options) 731669" />
<Node Id="10312:[75324..75352).8" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 731670" />
<Node Id="10312:[75735..75866).36" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 731671" />
<Node Id="10312:[75735..75866).37" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 731672" />
<Node Id="10312:[75742..75804).8" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 731673" />
<Node Id="10312:[75735..75866).39" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 731674" />
<Node Id="10312:[77543..77571).8" Label="param IsAccessible(TypeSymbol accessThroughType) 731675" />
<Node Id="10312:[77654..77700).8" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 731676" />
<Node Id="10312:[77501..78044).8" Label="param IsAccessible(this) 731677" />
<Node Id="10312:[77726..77892).29" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731678" />
<Node Id="10312:[77726..77892).30" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731679" />
<Node Id="10312:[77730..77782).8" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731680" />
<Node Id="10298:[471..492).69" Label="param Includes(this BinderFlags self) 731681" />
<Node Id="10298:[494..511).69" Label="param Includes(BinderFlags other) 731682" />
<Node Id="10312:[78402..78430).8" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731683" />
<Node Id="10312:[78513..78552).8" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 731684" />
<Node Id="10312:[78346..78783).8" Label="param IsAccessibleHelper(this) 731685" />
<Node Id="10376:[1085..1113).8" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731686" />
<Node Id="10376:[1196..1235).8" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 731687" />
<Node Id="10376:[1028..1425).8" Label="param IsAccessibleHelper(this) 731688" />
<Node Id="10286:[30098..30120).8" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 731689" />
<Node Id="10286:[30135..30160).8" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 731690" />
<Node Id="10286:[30283..30330).8" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 731691" />
<Node Id="10286:[30012..30691).8" Label="param IsSymbolAccessibleConditional(this) 731692" />
<Node Id="10286:[30356..30522).29" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731693" />
<Node Id="10286:[30356..30522).30" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731694" />
<Node Id="10286:[30360..30412).8" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731695" />
<Node Id="10298:[471..492).70" Label="param Includes(this BinderFlags self) 731696" />
<Node Id="10298:[494..511).70" Label="param Includes(BinderFlags other) 731697" />
<Node Id="10060:[2136..2158).8" Label="param IsSymbolAccessible(NamedTypeSymbol within) 731698" />
<Node Id="10060:[2173..2198).8" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 731699" />
<Node Id="10060:[2320..2366).8" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 731700" />
<Node Id="10060:[5621..5634).8" Label="param IsSymbolAccessibleCore(Symbol within) 731701" />
<Node Id="10060:[5691..5716).8" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 731702" />
<Node Id="10060:[5731..5762).8" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 731703" />
<Node Id="10060:[5777..5806).8" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 731704" />
<Node Id="10060:[5882..5928).8" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 731705" />
<Node Id="10060:[5954..5991).29" Label="Debug.Assert((object)symbol != null); 731706" />
<Node Id="10060:[6005..6042).29" Label="Debug.Assert((object)within != null); 731707" />
<Node Id="10060:[6005..6042).30" Label="Debug.Assert((object)within != null); 731708" />
<Node Id="10060:[6056..6090).15" Label="Debug.Assert(within.IsDefinition); 731709" />
<Node Id="10060:[6104..6172).22" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731710" />
<Node Id="10060:[6188..6219).15" Label="failedThroughTypeCheck = false; 731711" />
<Node Id="10060:[10202..10215).8" Label="param IsNamedTypeAccessible(Symbol within) 731712" />
<Node Id="10060:[10265..10311).8" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 731713" />
<Node Id="10060:[10337..10405).22" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731714" />
<Node Id="10060:[10419..10454).29" Label="Debug.Assert((object)type != null); 731715" />
<Node Id="10060:[10470..10516).8" Label="var compilation = within.DeclaringCompilation; 731716" />
<Node Id="10060:[10532..10544).8" Label="bool unused; 731717" />
<Node Id="10060:[10558..11295).8" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 731718" />
<Node Id="10060:[11990..12013).8" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 731719" />
<Node Id="10060:[12078..12091).8" Label="param IsNonNestedTypeAccessible(Symbol within) 731720" />
<Node Id="10060:[12117..12185).22" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731721" />
<Node Id="10060:[12199..12238).29" Label="Debug.Assert((object)assembly != null); 731722" />
<Node Id="10060:[12199..12238).30" Label="Debug.Assert((object)assembly != null); 731723" />
<Node Id="10346:[11710..11746).8" Label="originalBinder.IsSemanticModelBinder 731724" />
<Node Id="10286:[2155..2260).8" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 731725" />
<Node Id="10286:[2191..2245).29" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 731726" />
<Node Id="10286:[2191..2245).30" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 731727" />
<Node Id="10286:[2198..2244).8" Label="this.Flags.Includes(BinderFlags.SemanticModel) 731728" />
<Node Id="10298:[471..492).72" Label="param Includes(this BinderFlags self) 731729" />
<Node Id="10298:[494..511).72" Label="param Includes(BinderFlags other) 731730" />
<Node Id="10345:[28225..28251).8" Label="param IsUsingAlias(bool callerIsSemanticModel) 731731" />
<Node Id="10345:[28927..28940).15" Label="return false; 731732" />
<Node Id="10346:[12205..12212).8" Label="return; 731733" />
<Node Id="10354:[3720..3803).413" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731734" />
<Node Id="10312:[4680..4787).47" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 731735" />
<Node Id="10312:[4749..4764).8" Label="binder = scope; 731736" />
<Node Id="10312:[5087..5101).8" Label="return binder; 731737" />
<Node Id="10319:[43799..44676).43" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 731738" />
<Node Id="10319:[43853..43873).8" Label="IsViableType(result) 731739" />
<Node Id="10319:[41088..41107).8" Label="param IsViableType(LookupResult result) 731740" />
<Node Id="10319:[41138..41158).8" Label="result.IsMultiViable 731741" />
<Node Id="10354:[4919..5009).55" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 731742" />
<Node Id="10354:[4094..4107).71" Label="return _kind; 731743" />
<Node Id="10319:[41133..41220).15" Label="if (!result.IsMultiViable)
            {
                return false;
            } 731744" />
<Node Id="10319:[41254..41268).8" Label="result.Symbols 731745" />
<Node Id="10354:[4525..4595).15" Label="get
            {
                return _symbolList;
            } 731746" />
<Node Id="10354:[4561..4580).15" Label="return _symbolList; 731747" />
<Node Id="10319:[41236..41680).29" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 731748" />
<Node Id="10319:[41302..41665).8" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 731749" />
<Node Id="10319:[41634..41646).15" Label="return true; 731750" />
<Node Id="10319:[44751..44765).8" Label="bool wasError; 731751" />
<Node Id="10319:[84374..84391).8" Label="param ResultSymbol(out bool wasError) 731752" />
<Node Id="10319:[84406..84447).8" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 731753" />
<Node Id="10319:[84462..84508).8" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 731754" />
<Node Id="10319:[84124..109887).8" Label="param ResultSymbol(this) 731755" />
<Node Id="10319:[85320..85348).29" Label="Debug.Assert(where != null); 731756" />
<Node Id="10319:[85366..85400).29" Label="Debug.Assert(diagnostics != null); 731757" />
<Node Id="10319:[85467..85484).15" Label="wasError = false; 731758" />
<Node Id="10319:[104874..105336).22" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 731759" />
<Node Id="10319:[104874..105336).23" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 731760" />
<Node Id="10319:[76360..76385).6" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 731761" />
<Node Id="10319:[76387..76402).6" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 731762" />
<Node Id="10319:[76494..76582).21" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 731763" />
<Node Id="10319:[84691..84861).15" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 731764" />
<Node Id="10319:[84764..84846).43" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731765" />
<Node Id="10319:[84764..84846).44" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731766" />
<Node Id="10319:[84764..84846).46" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 731767" />
<Node Id="10319:[84764..84845).8" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 731768" />
<Node Id="10306:[358886..358901).8" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 731769" />
<Node Id="10306:[358903..358930).8" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 731770" />
<Node Id="10306:[358932..358945).8" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 731771" />
<Node Id="10306:[358947..358972).8" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 731772" />
<Node Id="10306:[358838..360009).8" Label="param CheckRuntimeSupportForSymbolAccess(this) 731773" />
<Node Id="10306:[358998..359998).43" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 731774" />
<Node Id="10306:[358998..359998).44" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 731775" />
<Node Id="10319:[44948..45377).15" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 731776" />
<Node Id="10354:[11428..11441).8" Label="this.Clear(); 731777" />
<Node Id="10319:[45408..45422).8" Label="result.Free(); 731778" />
<Node Id="10287:[2377..2471).15" Label="if (symbol is null)
                {
                    return default;
                } 731779" />
<Node Id="10287:[791..833).15" Label="Debug.Assert(typeWithAnnotations.HasType); 731780" />
<Node Id="10287:[912..927).8" Label="_symbol = null; 731781" />
<Node Id="10287:[912..919).8" Label="_symbol 731782" />
<Node Id="10287:[945..972).8" Label="_isNullableEnabled = false; 731783" />
<Node Id="10287:[945..963).8" Label="_isNullableEnabled 731784" />
<Node Id="10286:[21546..21561).8" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 731785" />
<Node Id="10286:[21563..21583).8" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731786" />
<Node Id="10286:[22086..22108).8" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 731787" />
<Node Id="10286:[22110..22130).8" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731788" />
<Node Id="10286:[15616..15690).36" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 731789" />
<Node Id="10286:[15616..15690).37" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 731790" />
<Node Id="10286:[15715..15910).8" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 731791" />
<Node Id="10286:[23124..23146).8" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 731792" />
<Node Id="10286:[23161..23181).8" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 731793" />
<Node Id="10286:[23281..23301).8" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 731794" />
<Node Id="10286:[23380..23684).50" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 731795" />
<Node Id="10286:[23893..24026).15" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 731796" />
<Node Id="10286:[24545..24641).15" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 731797" />
<Node Id="10286:[24655..25349).8" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 731798" />
<Node Id="10286:[26910..26935).8" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 731799" />
<Node Id="10286:[26952..26974).8" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 731800" />
<Node Id="10286:[27002..27022).8" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 731801" />
<Node Id="10286:[27048..27088).29" Label="RoslynDebug.Assert(diagnostics != null); 731802" />
<Node Id="10286:[27048..27088).30" Label="RoslynDebug.Assert(diagnostics != null); 731803" />
<Node Id="10286:[27208..27236).15" Label="DiagnosticInfo? info = null; 731804" />
<Node Id="10286:[27250..27722).8" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 731805" />
<Node Id="10286:[27738..27845).22" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 731806" />
<Node Id="10286:[27738..27845).23" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 731807" />
<Node Id="10286:[27861..27873).8" Label="return kind; 731808" />
<Node Id="10286:[26281..26812).8" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 731809" />
<Node Id="10286:[26450..26769).8" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 731810" />
<Node Id="10287:[1680..1716).8" Label="=$ _symbol?.Kind == SymbolKind.Alias 731811" />
<Node Id="10287:[1683..1690).8" Label="_symbol 731812" />
<Node Id="10287:[1683..1716).15" Label="_symbol?.Kind == SymbolKind.Alias 731813" />
<Node Id="10319:[51935..52244).15" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 731814" />
<Node Id="10076:[5223..5250).22" Label="Debug.Assert(node != null); 731815" />
<Node Id="10076:[5277..5448).22" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 731816" />
<Node Id="10077:[44231..44317).49" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 731817" />
<Node Id="10286:[1688..1781).31" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 731818" />
<Node Id="10298:[471..492).73" Label="param Includes(this BinderFlags self) 731819" />
<Node Id="10286:[1820..1963).31" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 731820" />
<Node Id="10298:[471..492).74" Label="param Includes(this BinderFlags self) 731821" />
<Node Id="10319:[42478..42805).25" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 731822" />
<Node Id="10319:[42821..42938).65" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 731823" />
<Node Id="10319:[42839..42937).9" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 731824" />
<Node Id="10319:[63849..63870).9" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 731825" />
<Node Id="10319:[63885..63919).9" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 731826" />
<Node Id="10319:[63934..63945).9" Label="param CreateErrorIfLookupOnTypeParameter(string name) 731827" />
<Node Id="10319:[63960..63969).9" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 731828" />
<Node Id="10319:[63984..64009).9" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 731829" />
<Node Id="10319:[63768..64484).9" Label="param CreateErrorIfLookupOnTypeParameter(this) 731830" />
<Node Id="10319:[64035..64445).33" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 731831" />
<Node Id="10319:[64035..64445).34" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 731832" />
<Node Id="10319:[64461..64473).17" Label="return null; 731833" />
<Node Id="10319:[42821..42938).71" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 731834" />
<Node Id="10319:[42952..43079).25" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 731835" />
<Node Id="10319:[42952..43079).26" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 731836" />
<Node Id="10354:[11312..11328).9" Label="instance.IsClear 731837" />
<Node Id="10354:[3684..3818).57" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731838" />
<Node Id="10354:[3720..3803).417" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731839" />
<Node Id="10354:[3720..3803).418" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731840" />
<Node Id="10354:[3720..3803).419" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731841" />
<Node Id="10354:[11299..11330).25" Label="Debug.Assert(instance.IsClear); 731842" />
<Node Id="10319:[50330..50355).9" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 731843" />
<Node Id="10312:[3905..3919).9" Label="result.IsClear 731844" />
<Node Id="10354:[3684..3818).58" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731845" />
<Node Id="10354:[3720..3803).425" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731846" />
<Node Id="10354:[3720..3803).426" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731847" />
<Node Id="10354:[3720..3803).427" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731848" />
<Node Id="10312:[3892..3921).25" Label="Debug.Assert(result.IsClear); 731849" />
<Node Id="10312:[3935..3968).33" Label="Debug.Assert(options.AreValid()); 731850" />
<Node Id="10312:[3948..3966).9" Label="options.AreValid() 731851" />
<Node Id="10353:[4698..4724).17" Label="param AreValid(this LookupOptions options) 731852" />
<Node Id="10353:[4750..4847).33" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 731853" />
<Node Id="10353:[4863..5000).65" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731854" />
<Node Id="10353:[4863..5000).66" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731855" />
<Node Id="10353:[5079..5183).33" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731856" />
<Node Id="10353:[5197..5323).49" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 731857" />
<Node Id="10353:[5485..5759).97" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731858" />
<Node Id="10353:[5485..5759).98" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731859" />
<Node Id="10353:[5485..5759).99" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731860" />
<Node Id="10353:[5775..5979).65" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731861" />
<Node Id="10353:[5775..5979).67" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731862" />
<Node Id="10353:[5995..6029).49" Label="return OnlyOneBitSet(onlyOptions); 731863" />
<Node Id="10353:[6002..6028).17" Label="OnlyOneBitSet(onlyOptions) 731864" />
<Node Id="10353:[6343..6358).17" Label="param OnlyOneBitSet(LookupOptions o) 731865" />
<Node Id="10353:[6384..6410).97" Label="return (o & (o - 1)) == 0; 731866" />
<Node Id="10353:[6384..6410).98" Label="return (o & (o - 1)) == 0; 731867" />
<Node Id="10312:[5188..5207).9" Label="param LookupSymbolsInSingleBinder(LookupResult result) 731868" />
<Node Id="10312:[5209..5220).9" Label="param LookupSymbolsInSingleBinder(string name) 731869" />
<Node Id="10312:[5222..5231).9" Label="param LookupSymbolsInSingleBinder(int arity) 731870" />
<Node Id="10312:[5233..5272).9" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 731871" />
<Node Id="10312:[5274..5295).9" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 731872" />
<Node Id="10312:[5297..5318).9" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731873" />
<Node Id="10312:[5320..5333).9" Label="param LookupSymbolsInSingleBinder(bool diagnose) 731874" />
<Node Id="10312:[5124..5404).9" Label="param LookupSymbolsInSingleBinder(this) 731875" />
<Node Id="10312:[4685..4699).25" Label="result.IsClear 731876" />
<Node Id="10354:[3684..3818).59" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731877" />
<Node Id="10354:[3720..3803).433" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731878" />
<Node Id="10354:[3720..3803).434" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731879" />
<Node Id="10354:[3720..3803).435" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731880" />
<Node Id="10312:[4680..4787).49" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 731881" />
<Node Id="10312:[4826..5058).121" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 731882" />
<Node Id="10312:[4826..5058).122" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 731883" />
<Node Id="10382:[1340..1359).9" Label="param LookupSymbolsInSingleBinder(LookupResult result) 731884" />
<Node Id="10382:[1374..1383).9" Label="param LookupSymbolsInSingleBinder(int arity) 731885" />
<Node Id="10382:[1385..1424).9" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 731886" />
<Node Id="10382:[1426..1447).9" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 731887" />
<Node Id="10382:[1449..1470).9" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 731888" />
<Node Id="10382:[1472..1485).9" Label="param LookupSymbolsInSingleBinder(bool diagnose) 731889" />
<Node Id="10382:[1572..1586).9" Label="result.IsClear 731890" />
<Node Id="10354:[3684..3818).60" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731891" />
<Node Id="10354:[3720..3803).441" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731892" />
<Node Id="10354:[3720..3803).442" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731893" />
<Node Id="10354:[3720..3803).443" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731894" />
<Node Id="10382:[1559..1588).25" Label="Debug.Assert(result.IsClear); 731895" />
<Node Id="10382:[1619..1629).9" Label="LookupMask 731896" />
<Node Id="10382:[913..1046).9" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 731897" />
<Node Id="10382:[949..1031).17" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 731898" />
<Node Id="10382:[1604..1691).41" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 731899" />
<Node Id="10382:[1604..1691).42" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 731900" />
<Node Id="10382:[1604..1691).43" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 731901" />
<Node Id="10346:[10861..10875).9" Label="result.IsClear 731902" />
<Node Id="10354:[3684..3818).62" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 731903" />
<Node Id="10354:[3720..3803).457" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731904" />
<Node Id="10354:[3720..3803).458" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731905" />
<Node Id="10354:[3720..3803).459" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 731906" />
<Node Id="10346:[10848..10877).25" Label="Debug.Assert(result.IsClear); 731907" />
<Node Id="10346:[10897..10914).9" Label="IsSubmissionClass 731908" />
<Node Id="10346:[7666..7775).9" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 731909" />
<Node Id="10346:[7672..7773).25" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 731910" />
<Node Id="10346:[10893..11127).17" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 731911" />
<Node Id="10346:[3525..3638).59" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 731912" />
<Node Id="10312:[7729..7768).9" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 731913" />
<Node Id="10312:[7615..8420).9" Label="param LookupMembersInternal(this) 731914" />
<Node Id="10312:[7903..7936).33" Label="Debug.Assert(options.AreValid()); 731915" />
<Node Id="10312:[7916..7934).9" Label="options.AreValid() 731916" />
<Node Id="10353:[4698..4724).18" Label="param AreValid(this LookupOptions options) 731917" />
<Node Id="10353:[4750..4847).35" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 731918" />
<Node Id="10353:[4863..5000).69" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731919" />
<Node Id="10353:[4863..5000).70" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 731920" />
<Node Id="10353:[5079..5183).35" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 731921" />
<Node Id="10353:[5197..5323).52" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 731922" />
<Node Id="10353:[5485..5759).103" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731923" />
<Node Id="10353:[5485..5759).104" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731924" />
<Node Id="10353:[5485..5759).105" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 731925" />
<Node Id="10353:[5775..5979).69" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731926" />
<Node Id="10353:[5775..5979).71" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 731927" />
<Node Id="10353:[5995..6029).52" Label="return OnlyOneBitSet(onlyOptions); 731928" />
<Node Id="10353:[6002..6028).18" Label="OnlyOneBitSet(onlyOptions) 731929" />
<Node Id="10353:[6343..6358).18" Label="param OnlyOneBitSet(LookupOptions o) 731930" />
<Node Id="10353:[6384..6410).103" Label="return (o & (o - 1)) == 0; 731931" />
<Node Id="10353:[6384..6410).104" Label="return (o & (o - 1)) == 0; 731932" />
<Node Id="10312:[7952..7977).33" Label="Debug.Assert(arity $= 0); 731933" />
<Node Id="10312:[61608..61629).9" Label="param GetCandidateMembers(Binder originalBinder) 731934" />
<Node Id="10312:[80978..80991).9" Label="param WrongArity(Symbol symbol) 731935" />
<Node Id="10312:[80993..81002).9" Label="param WrongArity(int arity) 731936" />
<Node Id="10312:[81004..81017).9" Label="param WrongArity(bool diagnose) 731937" />
<Node Id="10312:[81019..81040).9" Label="param WrongArity(LookupOptions options) 731938" />
<Node Id="10312:[81042..81069).9" Label="param WrongArity(out DiagnosticInfo diagInfo) 731939" />
<Node Id="10312:[81095..84034).9" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 731940" />
<Node Id="10312:[81196..82523).57" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731941" />
<Node Id="10312:[81196..82523).58" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731942" />
<Node Id="10312:[81196..82523).59" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731943" />
<Node Id="10312:[81196..82523).62" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 731944" />
<Node Id="10312:[81319..81371).9" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 731945" />
<Node Id="10312:[81495..81570).41" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731946" />
<Node Id="10312:[81495..81570).42" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 731947" />
<Node Id="10312:[81596..82500).49" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 731948" />
<Node Id="10312:[81596..82500).50" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 731949" />
<Node Id="10312:[81628..81659).9" Label="options.IsAttributeTypeLookup() 731950" />
<Node Id="10353:[7504..7530).18" Label="param IsAttributeTypeLookup(this LookupOptions options) 731951" />
<Node Id="10312:[81596..82500).53" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 731952" />
<Node Id="10312:[84050..84066).17" Label="diagInfo = null; 731953" />
<Node Id="10312:[66291..66342).9" Label="RefineAccessThroughType(options, accessThroughType) 731954" />
<Node Id="10312:[75301..75322).9" Label="param RefineAccessThroughType(LookupOptions options) 731955" />
<Node Id="10312:[75324..75352).9" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 731956" />
<Node Id="10312:[75735..75866).41" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 731957" />
<Node Id="10312:[75735..75866).42" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 731958" />
<Node Id="10312:[75742..75804).9" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 731959" />
<Node Id="10312:[75735..75866).44" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 731960" />
<Node Id="10312:[77543..77571).9" Label="param IsAccessible(TypeSymbol accessThroughType) 731961" />
<Node Id="10312:[77654..77700).9" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 731962" />
<Node Id="10312:[77501..78044).9" Label="param IsAccessible(this) 731963" />
<Node Id="10312:[77726..77892).33" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731964" />
<Node Id="10312:[77726..77892).34" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731965" />
<Node Id="10312:[77730..77782).9" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731966" />
<Node Id="10298:[471..492).78" Label="param Includes(this BinderFlags self) 731967" />
<Node Id="10298:[494..511).78" Label="param Includes(BinderFlags other) 731968" />
<Node Id="10312:[78402..78430).9" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731969" />
<Node Id="10312:[78513..78552).9" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 731970" />
<Node Id="10312:[78346..78783).9" Label="param IsAccessibleHelper(this) 731971" />
<Node Id="10376:[1085..1113).9" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 731972" />
<Node Id="10376:[1196..1235).9" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 731973" />
<Node Id="10376:[1028..1425).9" Label="param IsAccessibleHelper(this) 731974" />
<Node Id="10286:[30098..30120).9" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 731975" />
<Node Id="10286:[30135..30160).9" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 731976" />
<Node Id="10286:[30283..30330).9" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 731977" />
<Node Id="10286:[30012..30691).9" Label="param IsSymbolAccessibleConditional(this) 731978" />
<Node Id="10286:[30356..30522).33" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731979" />
<Node Id="10286:[30356..30522).34" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 731980" />
<Node Id="10286:[30360..30412).9" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 731981" />
<Node Id="10298:[471..492).79" Label="param Includes(this BinderFlags self) 731982" />
<Node Id="10298:[494..511).79" Label="param Includes(BinderFlags other) 731983" />
<Node Id="10060:[2136..2158).9" Label="param IsSymbolAccessible(NamedTypeSymbol within) 731984" />
<Node Id="10060:[2173..2198).9" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 731985" />
<Node Id="10060:[2320..2366).9" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 731986" />
<Node Id="10060:[5621..5634).9" Label="param IsSymbolAccessibleCore(Symbol within) 731987" />
<Node Id="10060:[5691..5716).9" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 731988" />
<Node Id="10060:[5731..5762).9" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 731989" />
<Node Id="10060:[5777..5806).9" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 731990" />
<Node Id="10060:[5882..5928).9" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 731991" />
<Node Id="10060:[5954..5991).33" Label="Debug.Assert((object)symbol != null); 731992" />
<Node Id="10060:[6005..6042).33" Label="Debug.Assert((object)within != null); 731993" />
<Node Id="10060:[6005..6042).34" Label="Debug.Assert((object)within != null); 731994" />
<Node Id="10060:[6056..6090).17" Label="Debug.Assert(within.IsDefinition); 731995" />
<Node Id="10060:[6104..6172).25" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 731996" />
<Node Id="10060:[6188..6219).17" Label="failedThroughTypeCheck = false; 731997" />
<Node Id="10060:[10202..10215).9" Label="param IsNamedTypeAccessible(Symbol within) 731998" />
<Node Id="10060:[10265..10311).9" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 731999" />
<Node Id="10060:[10337..10405).25" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 732000" />
<Node Id="10060:[10419..10454).33" Label="Debug.Assert((object)type != null); 732001" />
<Node Id="10060:[10470..10516).9" Label="var compilation = within.DeclaringCompilation; 732002" />
<Node Id="10060:[10532..10544).9" Label="bool unused; 732003" />
<Node Id="10060:[10558..11295).9" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 732004" />
<Node Id="10060:[11990..12013).9" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 732005" />
<Node Id="10060:[12078..12091).9" Label="param IsNonNestedTypeAccessible(Symbol within) 732006" />
<Node Id="10060:[12117..12185).25" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 732007" />
<Node Id="10060:[12199..12238).33" Label="Debug.Assert((object)assembly != null); 732008" />
<Node Id="10060:[12199..12238).34" Label="Debug.Assert((object)assembly != null); 732009" />
<Node Id="10346:[11710..11746).9" Label="originalBinder.IsSemanticModelBinder 732010" />
<Node Id="10286:[2155..2260).9" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 732011" />
<Node Id="10286:[2191..2245).33" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 732012" />
<Node Id="10286:[2191..2245).34" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 732013" />
<Node Id="10286:[2198..2244).9" Label="this.Flags.Includes(BinderFlags.SemanticModel) 732014" />
<Node Id="10298:[471..492).81" Label="param Includes(this BinderFlags self) 732015" />
<Node Id="10298:[494..511).81" Label="param Includes(BinderFlags other) 732016" />
<Node Id="10345:[28225..28251).9" Label="param IsUsingAlias(bool callerIsSemanticModel) 732017" />
<Node Id="10345:[28927..28940).17" Label="return false; 732018" />
<Node Id="10346:[12205..12212).9" Label="return; 732019" />
<Node Id="10354:[3720..3803).465" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732020" />
<Node Id="10312:[4680..4787).53" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 732021" />
<Node Id="10312:[4749..4764).9" Label="binder = scope; 732022" />
<Node Id="10312:[5087..5101).9" Label="return binder; 732023" />
<Node Id="10319:[43799..44676).49" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 732024" />
<Node Id="10319:[43853..43873).9" Label="IsViableType(result) 732025" />
<Node Id="10319:[41088..41107).9" Label="param IsViableType(LookupResult result) 732026" />
<Node Id="10319:[41138..41158).9" Label="result.IsMultiViable 732027" />
<Node Id="10354:[4919..5009).62" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 732028" />
<Node Id="10354:[4094..4107).80" Label="return _kind; 732029" />
<Node Id="10319:[41133..41220).17" Label="if (!result.IsMultiViable)
            {
                return false;
            } 732030" />
<Node Id="10319:[41254..41268).9" Label="result.Symbols 732031" />
<Node Id="10354:[4525..4595).17" Label="get
            {
                return _symbolList;
            } 732032" />
<Node Id="10354:[4561..4580).17" Label="return _symbolList; 732033" />
<Node Id="10319:[41236..41680).33" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 732034" />
<Node Id="10319:[41302..41665).9" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 732035" />
<Node Id="10319:[41634..41646).17" Label="return true; 732036" />
<Node Id="10319:[44751..44765).9" Label="bool wasError; 732037" />
<Node Id="10319:[84374..84391).9" Label="param ResultSymbol(out bool wasError) 732038" />
<Node Id="10319:[84406..84447).9" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 732039" />
<Node Id="10319:[84462..84508).9" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 732040" />
<Node Id="10319:[84124..109887).9" Label="param ResultSymbol(this) 732041" />
<Node Id="10319:[85320..85348).33" Label="Debug.Assert(where != null); 732042" />
<Node Id="10319:[85366..85400).33" Label="Debug.Assert(diagnostics != null); 732043" />
<Node Id="10319:[85467..85484).17" Label="wasError = false; 732044" />
<Node Id="10319:[104874..105336).25" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 732045" />
<Node Id="10319:[104874..105336).26" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 732046" />
<Node Id="10319:[76360..76385).7" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 732047" />
<Node Id="10319:[76387..76402).7" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 732048" />
<Node Id="10319:[76494..76582).25" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 732049" />
<Node Id="10319:[84691..84861).17" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 732050" />
<Node Id="10319:[84764..84846).49" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 732051" />
<Node Id="10319:[84764..84846).50" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 732052" />
<Node Id="10319:[84764..84846).52" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 732053" />
<Node Id="10319:[84764..84845).9" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 732054" />
<Node Id="10306:[358886..358901).9" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 732055" />
<Node Id="10306:[358903..358930).9" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 732056" />
<Node Id="10306:[358932..358945).9" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 732057" />
<Node Id="10306:[358947..358972).9" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 732058" />
<Node Id="10306:[358838..360009).9" Label="param CheckRuntimeSupportForSymbolAccess(this) 732059" />
<Node Id="10306:[358998..359998).49" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 732060" />
<Node Id="10306:[358998..359998).50" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 732061" />
<Node Id="10319:[44948..45377).17" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 732062" />
<Node Id="10354:[11428..11441).9" Label="this.Clear(); 732063" />
<Node Id="10319:[45408..45422).9" Label="result.Free(); 732064" />
<Node Id="10287:[2377..2471).17" Label="if (symbol is null)
                {
                    return default;
                } 732065" />
<Node Id="10287:[791..833).17" Label="Debug.Assert(typeWithAnnotations.HasType); 732066" />
<Node Id="10287:[912..927).9" Label="_symbol = null; 732067" />
<Node Id="10287:[912..919).9" Label="_symbol 732068" />
<Node Id="10287:[945..972).9" Label="_isNullableEnabled = false; 732069" />
<Node Id="10287:[945..963).9" Label="_isNullableEnabled 732070" />
<Node Id="10286:[21546..21561).9" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 732071" />
<Node Id="10286:[21563..21583).9" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 732072" />
<Node Id="10286:[22086..22108).9" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 732073" />
<Node Id="10286:[22110..22130).9" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 732074" />
<Node Id="10286:[15616..15690).41" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 732075" />
<Node Id="10286:[15616..15690).42" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 732076" />
<Node Id="10286:[15715..15910).9" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 732077" />
<Node Id="10286:[23124..23146).9" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 732078" />
<Node Id="10286:[23161..23181).9" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 732079" />
<Node Id="10286:[23281..23301).9" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 732080" />
<Node Id="10286:[23380..23684).57" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 732081" />
<Node Id="10286:[23893..24026).17" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 732082" />
<Node Id="10286:[24545..24641).17" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 732083" />
<Node Id="10286:[24655..25349).9" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 732084" />
<Node Id="10286:[26910..26935).9" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 732085" />
<Node Id="10286:[26952..26974).9" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 732086" />
<Node Id="10286:[27002..27022).9" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 732087" />
<Node Id="10286:[27048..27088).33" Label="RoslynDebug.Assert(diagnostics != null); 732088" />
<Node Id="10286:[27048..27088).34" Label="RoslynDebug.Assert(diagnostics != null); 732089" />
<Node Id="10286:[27208..27236).17" Label="DiagnosticInfo? info = null; 732090" />
<Node Id="10286:[27250..27722).9" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 732091" />
<Node Id="10286:[27738..27845).25" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 732092" />
<Node Id="10286:[27738..27845).26" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 732093" />
<Node Id="10286:[27861..27873).9" Label="return kind; 732094" />
<Node Id="10286:[26281..26812).9" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 732095" />
<Node Id="10286:[26450..26769).9" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 732096" />
<Node Id="10287:[1680..1716).9" Label="=$ _symbol?.Kind == SymbolKind.Alias 732097" />
<Node Id="10287:[1683..1690).9" Label="_symbol 732098" />
<Node Id="10287:[1683..1716).17" Label="_symbol?.Kind == SymbolKind.Alias 732099" />
<Node Id="10319:[51935..52244).17" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 732100" />
<Node Id="10319:[42478..42805).28" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 732101" />
<Node Id="10319:[42821..42938).73" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 732102" />
<Node Id="10319:[42839..42937).10" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 732103" />
<Node Id="10319:[63849..63870).10" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 732104" />
<Node Id="10319:[63885..63919).10" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 732105" />
<Node Id="10319:[63934..63945).10" Label="param CreateErrorIfLookupOnTypeParameter(string name) 732106" />
<Node Id="10319:[63960..63969).10" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 732107" />
<Node Id="10319:[63984..64009).10" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 732108" />
<Node Id="10319:[63768..64484).10" Label="param CreateErrorIfLookupOnTypeParameter(this) 732109" />
<Node Id="10319:[64035..64445).37" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 732110" />
<Node Id="10319:[64035..64445).38" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 732111" />
<Node Id="10319:[64461..64473).19" Label="return null; 732112" />
<Node Id="10319:[42821..42938).79" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 732113" />
<Node Id="10319:[42952..43079).28" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 732114" />
<Node Id="10319:[42952..43079).29" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 732115" />
<Node Id="10354:[11312..11328).10" Label="instance.IsClear 732116" />
<Node Id="10354:[3684..3818).64" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 732117" />
<Node Id="10354:[3720..3803).469" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732118" />
<Node Id="10354:[3720..3803).470" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732119" />
<Node Id="10354:[3720..3803).471" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732120" />
<Node Id="10354:[11299..11330).28" Label="Debug.Assert(instance.IsClear); 732121" />
<Node Id="10319:[50330..50355).10" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 732122" />
<Node Id="10312:[3905..3919).10" Label="result.IsClear 732123" />
<Node Id="10354:[3684..3818).65" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 732124" />
<Node Id="10354:[3720..3803).477" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732125" />
<Node Id="10354:[3720..3803).478" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732126" />
<Node Id="10354:[3720..3803).479" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732127" />
<Node Id="10312:[3892..3921).28" Label="Debug.Assert(result.IsClear); 732128" />
<Node Id="10312:[3935..3968).37" Label="Debug.Assert(options.AreValid()); 732129" />
<Node Id="10312:[3948..3966).10" Label="options.AreValid() 732130" />
<Node Id="10353:[4698..4724).19" Label="param AreValid(this LookupOptions options) 732131" />
<Node Id="10353:[4750..4847).37" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 732132" />
<Node Id="10353:[4863..5000).73" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 732133" />
<Node Id="10353:[4863..5000).74" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 732134" />
<Node Id="10353:[5079..5183).37" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 732135" />
<Node Id="10353:[5197..5323).55" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 732136" />
<Node Id="10353:[5485..5759).109" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 732137" />
<Node Id="10353:[5485..5759).110" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 732138" />
<Node Id="10353:[5485..5759).111" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 732139" />
<Node Id="10353:[5775..5979).73" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 732140" />
<Node Id="10353:[5775..5979).75" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 732141" />
<Node Id="10353:[5995..6029).55" Label="return OnlyOneBitSet(onlyOptions); 732142" />
<Node Id="10353:[6002..6028).19" Label="OnlyOneBitSet(onlyOptions) 732143" />
<Node Id="10353:[6343..6358).19" Label="param OnlyOneBitSet(LookupOptions o) 732144" />
<Node Id="10353:[6384..6410).109" Label="return (o & (o - 1)) == 0; 732145" />
<Node Id="10353:[6384..6410).110" Label="return (o & (o - 1)) == 0; 732146" />
<Node Id="10312:[5188..5207).10" Label="param LookupSymbolsInSingleBinder(LookupResult result) 732147" />
<Node Id="10312:[5209..5220).10" Label="param LookupSymbolsInSingleBinder(string name) 732148" />
<Node Id="10312:[5222..5231).10" Label="param LookupSymbolsInSingleBinder(int arity) 732149" />
<Node Id="10312:[5233..5272).10" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 732150" />
<Node Id="10312:[5274..5295).10" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 732151" />
<Node Id="10312:[5297..5318).10" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 732152" />
<Node Id="10312:[5320..5333).10" Label="param LookupSymbolsInSingleBinder(bool diagnose) 732153" />
<Node Id="10312:[5124..5404).10" Label="param LookupSymbolsInSingleBinder(this) 732154" />
<Node Id="10312:[4685..4699).28" Label="result.IsClear 732155" />
<Node Id="10354:[3684..3818).66" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 732156" />
<Node Id="10354:[3720..3803).485" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732157" />
<Node Id="10354:[3720..3803).486" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732158" />
<Node Id="10354:[3720..3803).487" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732159" />
<Node Id="10312:[4680..4787).55" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 732160" />
<Node Id="10312:[4826..5058).136" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 732161" />
<Node Id="10312:[4826..5058).137" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 732162" />
<Node Id="10382:[1340..1359).10" Label="param LookupSymbolsInSingleBinder(LookupResult result) 732163" />
<Node Id="10382:[1374..1383).10" Label="param LookupSymbolsInSingleBinder(int arity) 732164" />
<Node Id="10382:[1385..1424).10" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 732165" />
<Node Id="10382:[1426..1447).10" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 732166" />
<Node Id="10382:[1449..1470).10" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 732167" />
<Node Id="10382:[1472..1485).10" Label="param LookupSymbolsInSingleBinder(bool diagnose) 732168" />
<Node Id="10382:[1572..1586).10" Label="result.IsClear 732169" />
<Node Id="10354:[3684..3818).67" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 732170" />
<Node Id="10354:[3720..3803).493" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732171" />
<Node Id="10354:[3720..3803).494" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732172" />
<Node Id="10354:[3720..3803).495" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732173" />
<Node Id="10382:[1559..1588).28" Label="Debug.Assert(result.IsClear); 732174" />
<Node Id="10382:[1619..1629).10" Label="LookupMask 732175" />
<Node Id="10382:[913..1046).10" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 732176" />
<Node Id="10382:[949..1031).19" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 732177" />
<Node Id="10382:[1604..1691).46" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 732178" />
<Node Id="10382:[1604..1691).47" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 732179" />
<Node Id="10382:[1604..1691).48" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 732180" />
<Node Id="10346:[10861..10875).10" Label="result.IsClear 732181" />
<Node Id="10354:[3684..3818).69" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 732182" />
<Node Id="10354:[3720..3803).509" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732183" />
<Node Id="10354:[3720..3803).510" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732184" />
<Node Id="10354:[3720..3803).511" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732185" />
<Node Id="10346:[10848..10877).28" Label="Debug.Assert(result.IsClear); 732186" />
<Node Id="10346:[10897..10914).10" Label="IsSubmissionClass 732187" />
<Node Id="10346:[7666..7775).10" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 732188" />
<Node Id="10346:[7672..7773).28" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 732189" />
<Node Id="10346:[10893..11127).19" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 732190" />
<Node Id="10346:[3525..3638).66" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 732191" />
<Node Id="10312:[7729..7768).10" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 732192" />
<Node Id="10312:[7615..8420).10" Label="param LookupMembersInternal(this) 732193" />
<Node Id="10312:[7903..7936).37" Label="Debug.Assert(options.AreValid()); 732194" />
<Node Id="10312:[7916..7934).10" Label="options.AreValid() 732195" />
<Node Id="10353:[4698..4724).20" Label="param AreValid(this LookupOptions options) 732196" />
<Node Id="10353:[4750..4847).39" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 732197" />
<Node Id="10353:[4863..5000).77" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 732198" />
<Node Id="10353:[4863..5000).78" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 732199" />
<Node Id="10353:[5079..5183).39" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 732200" />
<Node Id="10353:[5197..5323).58" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 732201" />
<Node Id="10353:[5485..5759).115" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 732202" />
<Node Id="10353:[5485..5759).116" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 732203" />
<Node Id="10353:[5485..5759).117" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 732204" />
<Node Id="10353:[5775..5979).77" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 732205" />
<Node Id="10353:[5775..5979).79" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 732206" />
<Node Id="10353:[5995..6029).58" Label="return OnlyOneBitSet(onlyOptions); 732207" />
<Node Id="10353:[6002..6028).20" Label="OnlyOneBitSet(onlyOptions) 732208" />
<Node Id="10353:[6343..6358).20" Label="param OnlyOneBitSet(LookupOptions o) 732209" />
<Node Id="10353:[6384..6410).115" Label="return (o & (o - 1)) == 0; 732210" />
<Node Id="10353:[6384..6410).116" Label="return (o & (o - 1)) == 0; 732211" />
<Node Id="10312:[7952..7977).37" Label="Debug.Assert(arity $= 0); 732212" />
<Node Id="10312:[61608..61629).10" Label="param GetCandidateMembers(Binder originalBinder) 732213" />
<Node Id="10312:[80978..80991).10" Label="param WrongArity(Symbol symbol) 732214" />
<Node Id="10312:[80993..81002).10" Label="param WrongArity(int arity) 732215" />
<Node Id="10312:[81004..81017).10" Label="param WrongArity(bool diagnose) 732216" />
<Node Id="10312:[81019..81040).10" Label="param WrongArity(LookupOptions options) 732217" />
<Node Id="10312:[81042..81069).10" Label="param WrongArity(out DiagnosticInfo diagInfo) 732218" />
<Node Id="10312:[81095..84034).10" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 732219" />
<Node Id="10312:[81196..82523).64" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 732220" />
<Node Id="10312:[81196..82523).65" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 732221" />
<Node Id="10312:[81196..82523).66" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 732222" />
<Node Id="10312:[81196..82523).69" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 732223" />
<Node Id="10312:[81319..81371).10" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 732224" />
<Node Id="10312:[81495..81570).46" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 732225" />
<Node Id="10312:[81495..81570).47" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 732226" />
<Node Id="10312:[81596..82500).55" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 732227" />
<Node Id="10312:[81596..82500).56" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 732228" />
<Node Id="10312:[81628..81659).10" Label="options.IsAttributeTypeLookup() 732229" />
<Node Id="10353:[7504..7530).20" Label="param IsAttributeTypeLookup(this LookupOptions options) 732230" />
<Node Id="10312:[81596..82500).59" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 732231" />
<Node Id="10312:[84050..84066).19" Label="diagInfo = null; 732232" />
<Node Id="10312:[66291..66342).10" Label="RefineAccessThroughType(options, accessThroughType) 732233" />
<Node Id="10312:[75301..75322).10" Label="param RefineAccessThroughType(LookupOptions options) 732234" />
<Node Id="10312:[75324..75352).10" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 732235" />
<Node Id="10312:[75735..75866).46" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 732236" />
<Node Id="10312:[75735..75866).47" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 732237" />
<Node Id="10312:[75742..75804).10" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 732238" />
<Node Id="10312:[75735..75866).49" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 732239" />
<Node Id="10312:[77543..77571).10" Label="param IsAccessible(TypeSymbol accessThroughType) 732240" />
<Node Id="10312:[77501..78044).10" Label="param IsAccessible(this) 732241" />
<Node Id="10312:[77726..77892).37" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 732242" />
<Node Id="10312:[77726..77892).38" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 732243" />
<Node Id="10312:[77730..77782).10" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 732244" />
<Node Id="10298:[471..492).85" Label="param Includes(this BinderFlags self) 732245" />
<Node Id="10298:[494..511).85" Label="param Includes(BinderFlags other) 732246" />
<Node Id="10312:[78402..78430).10" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 732247" />
<Node Id="10312:[78513..78552).10" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 732248" />
<Node Id="10312:[78346..78783).10" Label="param IsAccessibleHelper(this) 732249" />
<Node Id="10376:[1085..1113).10" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 732250" />
<Node Id="10376:[1196..1235).10" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 732251" />
<Node Id="10376:[1028..1425).10" Label="param IsAccessibleHelper(this) 732252" />
<Node Id="10286:[30098..30120).10" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 732253" />
<Node Id="10286:[30135..30160).10" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 732254" />
<Node Id="10286:[30283..30330).10" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 732255" />
<Node Id="10286:[30012..30691).10" Label="param IsSymbolAccessibleConditional(this) 732256" />
<Node Id="10286:[30356..30522).37" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 732257" />
<Node Id="10286:[30356..30522).38" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 732258" />
<Node Id="10286:[30360..30412).10" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 732259" />
<Node Id="10298:[471..492).86" Label="param Includes(this BinderFlags self) 732260" />
<Node Id="10298:[494..511).86" Label="param Includes(BinderFlags other) 732261" />
<Node Id="10060:[2136..2158).10" Label="param IsSymbolAccessible(NamedTypeSymbol within) 732262" />
<Node Id="10060:[2173..2198).10" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 732263" />
<Node Id="10060:[2320..2366).10" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 732264" />
<Node Id="10060:[5621..5634).10" Label="param IsSymbolAccessibleCore(Symbol within) 732265" />
<Node Id="10060:[5691..5716).10" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 732266" />
<Node Id="10060:[5731..5762).10" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 732267" />
<Node Id="10060:[5777..5806).10" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 732268" />
<Node Id="10060:[5882..5928).10" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 732269" />
<Node Id="10060:[5954..5991).37" Label="Debug.Assert((object)symbol != null); 732270" />
<Node Id="10060:[6005..6042).37" Label="Debug.Assert((object)within != null); 732271" />
<Node Id="10060:[6005..6042).38" Label="Debug.Assert((object)within != null); 732272" />
<Node Id="10060:[6056..6090).19" Label="Debug.Assert(within.IsDefinition); 732273" />
<Node Id="10060:[6104..6172).28" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 732274" />
<Node Id="10060:[6188..6219).19" Label="failedThroughTypeCheck = false; 732275" />
<Node Id="10060:[10202..10215).10" Label="param IsNamedTypeAccessible(Symbol within) 732276" />
<Node Id="10060:[10265..10311).10" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 732277" />
<Node Id="10060:[10337..10405).28" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 732278" />
<Node Id="10060:[10419..10454).37" Label="Debug.Assert((object)type != null); 732279" />
<Node Id="10060:[10470..10516).10" Label="var compilation = within.DeclaringCompilation; 732280" />
<Node Id="10060:[10532..10544).10" Label="bool unused; 732281" />
<Node Id="10060:[10558..11295).10" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 732282" />
<Node Id="10060:[11990..12013).10" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 732283" />
<Node Id="10060:[12078..12091).10" Label="param IsNonNestedTypeAccessible(Symbol within) 732284" />
<Node Id="10060:[12117..12185).28" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 732285" />
<Node Id="10060:[12199..12238).37" Label="Debug.Assert((object)assembly != null); 732286" />
<Node Id="10060:[12199..12238).38" Label="Debug.Assert((object)assembly != null); 732287" />
<Node Id="10346:[11710..11746).10" Label="originalBinder.IsSemanticModelBinder 732288" />
<Node Id="10286:[2155..2260).10" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 732289" />
<Node Id="10286:[2191..2245).37" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 732290" />
<Node Id="10286:[2191..2245).38" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 732291" />
<Node Id="10286:[2198..2244).10" Label="this.Flags.Includes(BinderFlags.SemanticModel) 732292" />
<Node Id="10298:[471..492).88" Label="param Includes(this BinderFlags self) 732293" />
<Node Id="10298:[494..511).88" Label="param Includes(BinderFlags other) 732294" />
<Node Id="10345:[28225..28251).10" Label="param IsUsingAlias(bool callerIsSemanticModel) 732295" />
<Node Id="10345:[28927..28940).19" Label="return false; 732296" />
<Node Id="10346:[12205..12212).10" Label="return; 732297" />
<Node Id="10354:[3720..3803).517" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 732298" />
<Node Id="10312:[4680..4787).59" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 732299" />
<Node Id="10312:[4749..4764).10" Label="binder = scope; 732300" />
<Node Id="10312:[5087..5101).10" Label="return binder; 732301" />
<Node Id="10319:[43799..44676).55" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 732302" />
<Node Id="10319:[43853..43873).10" Label="IsViableType(result) 732303" />
<Node Id="10319:[41088..41107).10" Label="param IsViableType(LookupResult result) 732304" />
<Node Id="10319:[41138..41158).10" Label="result.IsMultiViable 732305" />
<Node Id="10354:[4919..5009).69" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 732306" />
<Node Id="10354:[4094..4107).89" Label="return _kind; 732307" />
<Node Id="10319:[41133..41220).19" Label="if (!result.IsMultiViable)
            {
                return false;
            } 732308" />
<Node Id="10319:[41254..41268).10" Label="result.Symbols 732309" />
<Node Id="10354:[4525..4595).19" Label="get
            {
                return _symbolList;
            } 732310" />
<Node Id="10354:[4561..4580).19" Label="return _symbolList; 732311" />
<Node Id="10319:[41236..41680).37" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 732312" />
<Node Id="10319:[41302..41665).10" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 732313" />
<Node Id="10319:[41634..41646).19" Label="return true; 732314" />
<Node Id="10319:[44751..44765).10" Label="bool wasError; 732315" />
<Node Id="10319:[84374..84391).10" Label="param ResultSymbol(out bool wasError) 732316" />
<Node Id="10319:[84406..84447).10" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 732317" />
<Node Id="10319:[84462..84508).10" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 732318" />
<Node Id="10319:[84124..109887).10" Label="param ResultSymbol(this) 732319" />
<Node Id="10319:[85320..85348).37" Label="Debug.Assert(where != null); 732320" />
<Node Id="10319:[85366..85400).37" Label="Debug.Assert(diagnostics != null); 732321" />
<Node Id="10319:[85467..85484).19" Label="wasError = false; 732322" />
<Node Id="10319:[104874..105336).28" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 732323" />
<Node Id="10319:[104874..105336).29" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 732324" />
<Node Id="10319:[76360..76385).8" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 732325" />
<Node Id="10319:[76387..76402).8" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 732326" />
<Node Id="10319:[76494..76582).29" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 732327" />
<Node Id="10319:[84691..84861).19" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 732328" />
<Node Id="10319:[84764..84846).55" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 732329" />
<Node Id="10319:[84764..84846).56" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 732330" />
<Node Id="10319:[84764..84846).58" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 732331" />
<Node Id="10319:[84764..84845).10" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 732332" />
<Node Id="10306:[358886..358901).10" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 732333" />
<Node Id="10306:[358903..358930).10" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 732334" />
<Node Id="10306:[358932..358945).10" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 732335" />
<Node Id="10306:[358947..358972).10" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 732336" />
<Node Id="10306:[358838..360009).10" Label="param CheckRuntimeSupportForSymbolAccess(this) 732337" />
<Node Id="10306:[358998..359998).55" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 732338" />
<Node Id="10306:[358998..359998).56" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 732339" />
<Node Id="10319:[44948..45377).19" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 732340" />
<Node Id="10354:[11428..11441).10" Label="this.Clear(); 732341" />
<Node Id="10319:[45408..45422).10" Label="result.Free(); 732342" />
<Node Id="10287:[2377..2471).19" Label="if (symbol is null)
                {
                    return default;
                } 732343" />
<Node Id="10287:[791..833).19" Label="Debug.Assert(typeWithAnnotations.HasType); 732344" />
<Node Id="10287:[912..927).10" Label="_symbol = null; 732345" />
<Node Id="10287:[912..919).10" Label="_symbol 732346" />
<Node Id="10287:[945..972).10" Label="_isNullableEnabled = false; 732347" />
<Node Id="10287:[945..963).10" Label="_isNullableEnabled 732348" />
<Node Id="10286:[21546..21561).10" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 732349" />
<Node Id="10286:[21563..21583).10" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 732350" />
<Node Id="10286:[22086..22108).10" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 732351" />
<Node Id="10286:[22110..22130).10" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 732352" />
<Node Id="10286:[15616..15690).46" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 732353" />
<Node Id="10286:[15616..15690).47" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 732354" />
<Node Id="10286:[15715..15910).10" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 732355" />
<Node Id="10286:[23124..23146).10" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 732356" />
<Node Id="10286:[23161..23181).10" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 732357" />
<Node Id="10286:[23281..23301).10" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 732358" />
<Node Id="10286:[23380..23684).64" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 732359" />
<Node Id="10286:[23893..24026).19" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 732360" />
<Node Id="10286:[24545..24641).19" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 732361" />
<Node Id="10286:[24655..25349).10" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 732362" />
<Node Id="10286:[26910..26935).10" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 732363" />
<Node Id="10286:[26952..26974).10" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 732364" />
<Node Id="10286:[27002..27022).10" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 732365" />
<Node Id="10286:[27048..27088).37" Label="RoslynDebug.Assert(diagnostics != null); 732366" />
<Node Id="10286:[27048..27088).38" Label="RoslynDebug.Assert(diagnostics != null); 732367" />
<Node Id="10286:[27208..27236).19" Label="DiagnosticInfo? info = null; 732368" />
<Node Id="10286:[27250..27722).10" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 732369" />
<Node Id="10286:[27738..27845).28" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 732370" />
<Node Id="10286:[27738..27845).29" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 732371" />
<Node Id="10286:[27861..27873).10" Label="return kind; 732372" />
<Node Id="10286:[26281..26812).10" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 732373" />
<Node Id="10286:[26450..26769).10" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 732374" />
<Node Id="10287:[1680..1716).10" Label="=$ _symbol?.Kind == SymbolKind.Alias 732375" />
<Node Id="10287:[1683..1690).10" Label="_symbol 732376" />
<Node Id="10287:[1683..1716).19" Label="_symbol?.Kind == SymbolKind.Alias 732377" />
<Node Id="10319:[51935..52244).19" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 732378" />
<Node Id="25002:[4446..4475).1" Label="diagnostics.Verify(expected); 732379" />
<Node Id="25002:[4446..4475).2" Label="diagnostics.Verify(expected); 732380" />
<Node Id="25002:[4446..4474).1" Label="diagnostics.Verify(expected) 732381" />
<Node Id="25002:[2296..2334).1" Label="param Verify(this ImmutableArray$Diagnostic$ actual) 732382" />
<Node Id="25002:[2336..2375).1" Label="param Verify(params DiagnosticDescription[] expected) 732383" />
<Node Id="25002:[2401..2451).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 732384" />
<Node Id="25002:[2401..2451).2" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 732385" />
<Node Id="25002:[2401..2450).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected) 732386" />
<Node Id="25002:[1554..1589).1" Label="param Verify(this IEnumerable$Diagnostic$ actual) 732387" />
<Node Id="25002:[1591..1630).1" Label="param Verify(params DiagnosticDescription[] expected) 732388" />
<Node Id="25002:[1656..1703).1" Label="Verify(actual, expected, errorCodeOnly: false); 732389" />
<Node Id="25002:[1656..1703).2" Label="Verify(actual, expected, errorCodeOnly: false); 732390" />
<Node Id="25002:[1656..1703).3" Label="Verify(actual, expected, errorCodeOnly: false); 732391" />
<Node Id="25002:[1656..1702).1" Label="Verify(actual, expected, errorCodeOnly: false) 732392" />
<Node Id="25002:[2501..2531).1" Label="param Verify(IEnumerable$Diagnostic$ actual) 732393" />
<Node Id="25002:[2533..2565).1" Label="param Verify(DiagnosticDescription[] expected) 732394" />
<Node Id="25002:[2567..2585).1" Label="param Verify(bool errorCodeOnly) 732395" />
<Node Id="25002:[2611..2759).1" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 732396" />
<Node Id="25002:[2611..2759).2" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 732397" />
<Node Id="25002:[2775..2867).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 732398" />
<Node Id="25002:[2775..2867).2" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 732399" />
<Node Id="25002:[2775..2867).4" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 732400" />
<Node Id="25002:[2775..2867).6" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 732401" />
<Node Id="25003:[10448..10470).1" Label="=$ _defaultSeverityOpt 732402" />
<Node Id="25003:[10451..10470).1" Label="_defaultSeverityOpt 732403" />
<Node Id="25002:[2881..2977).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 732404" />
<Node Id="25002:[2881..2977).2" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 732405" />
<Node Id="25002:[2881..2977).4" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 732406" />
<Node Id="25002:[2881..2977).6" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 732407" />
<Node Id="25003:[10526..10550).1" Label="=$ _effectiveSeverityOpt 732408" />
<Node Id="25003:[10529..10550).1" Label="_effectiveSeverityOpt 732409" />
<Node Id="25002:[2991..3166).1" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 732410" />
<Node Id="25002:[2991..3166).2" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 732411" />
<Node Id="25002:[2991..3166).4" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 732412" />
<Node Id="25002:[2991..3166).8" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 732413" />
<Node Id="25003:[4933..4945).1" Label="param DiagnosticDescription(Diagnostic d) 732414" />
<Node Id="25003:[4947..4965).1" Label="param DiagnosticDescription(bool errorCodeOnly) 732415" />
<Node Id="25003:[4967..5002).1" Label="param DiagnosticDescription(bool includeDefaultSeverity = false) 732416" />
<Node Id="25003:[5004..5041).1" Label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 732417" />
<Node Id="25003:[4904..7352).1" Label="param DiagnosticDescription(this) 732418" />
<Node Id="25003:[912..917).7" Label="_code 732419" />
<Node Id="25003:[950..967).7" Label="_isWarningAsError 732420" />
<Node Id="25003:[1000..1013).7" Label="_isSuppressed 732421" />
<Node Id="25003:[1048..1062).7" Label="_squiggledText 732422" />
<Node Id="25003:[1099..1109).7" Label="_arguments 732423" />
<Node Id="25003:[1151..1165).19" Label="_startPosition 732424" />
<Node Id="25003:[1276..1303).7" Label="_argumentOrderDoesNotMatter 732425" />
<Node Id="25003:[1336..1350).7" Label="_errorCodeType 732426" />
<Node Id="25003:[1460..1479).7" Label="_defaultSeverityOpt 732427" />
<Node Id="25003:[1527..1548).7" Label="_effectiveSeverityOpt 732428" />
<Node Id="25003:[1673..1689).7" Label="_syntaxPredicate 732429" />
<Node Id="25003:[5067..5072).1" Label="_code 732430" />
<Node Id="25003:[5096..5113).1" Label="_isWarningAsError 732431" />
<Node Id="25003:[5149..5162).1" Label="_isSuppressed 732432" />
<Node Id="25003:[5194..5203).1" Label="_location 732433" />
<Node Id="25003:[5253..5275).1" Label="includeDefaultSeverity 732434" />
<Node Id="25003:[5231..5324).1" Label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 732435" />
<Node Id="25003:[5231..5250).1" Label="_defaultSeverityOpt 732436" />
<Node Id="25003:[5362..5386).1" Label="includeEffectiveSeverity 732437" />
<Node Id="25003:[5338..5428).1" Label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 732438" />
<Node Id="25003:[5338..5359).1" Label="_effectiveSeverityOpt 732439" />
<Node Id="25003:[5444..5476).1" Label="DiagnosticWithInfo dinfo = null; 732440" />
<Node Id="25003:[5490..6130).1" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 732441" />
<Node Id="25003:[5490..6130).2" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 732442" />
<Node Id="25003:[5490..6130).3" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 732443" />
<Node Id="25003:[5490..6130).4" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 732444" />
<Node Id="25003:[5744..5776).1" Label="dinfo = d as DiagnosticWithInfo; 732445" />
<Node Id="25003:[5794..6115).1" Label="if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                } 732446" />
<Node Id="25003:[5794..6115).2" Label="if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                } 732447" />
<Node Id="25003:[6001..6015).1" Label="_errorCodeType 732448" />
<Node Id="25003:[6081..6086).1" Label="_code 732449" />
<Node Id="25003:[6146..6175).1" Label="_ignoreArgumentsWhenComparing 732450" />
<Node Id="25003:[6208..7260).1" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_location.IsInSource)
                {
                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API
                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);
                }

                if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                }

                if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                }
            } 732451" />
<Node Id="25003:[6276..6580).1" Label="if (_location.IsInSource)
                {
                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API
                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);
                } 732452" />
<Node Id="25003:[6482..6561).1" Label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 732453" />
<Node Id="25003:[6482..6496).1" Label="_squiggledText 732454" />
<Node Id="25003:[6600..7098).1" Label="if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                } 732455" />
<Node Id="25003:[6600..7098).2" Label="if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                } 732456" />
<Node Id="25003:[6659..6669).1" Label="_arguments 732457" />
<Node Id="25003:[7118..7245).1" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 732458" />
<Node Id="25003:[7118..7245).2" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 732459" />
<Node Id="25003:[7118..7245).4" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 732460" />
<Node Id="25003:[7276..7341).1" Label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 732461" />
<Node Id="25003:[7276..7290).1" Label="_startPosition 732462" />
<Node Id="25002:[2991..3166).9" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 732463" />
<Node Id="25003:[5067..5072).2" Label="_code 732464" />
<Node Id="25003:[7118..7245).8" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 732465" />
<Node Id="25002:[3341..3730).1" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 732466" />
<Node Id="25002:[3341..3730).2" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 732467" />
<Node Id="25002:[3401..3434).1" Label="int index = unmatched.IndexOf(d); 732468" />
<Node Id="25002:[3401..3434).2" Label="int index = unmatched.IndexOf(d); 732469" />
<Node Id="25003:[10591..10601).1" Label="param Equals(object obj) 732470" />
<Node Id="25003:[10563..13732).1" Label="param Equals(this) 732471" />
<Node Id="25003:[10627..10664).1" Label="var d = obj as DiagnosticDescription; 732472" />
<Node Id="25003:[10680..10725).1" Label="if (d == null)
                return false; 732473" />
<Node Id="25003:[10680..10725).2" Label="if (d == null)
                return false; 732474" />
<Node Id="25003:[10741..10799).1" Label="if (!_code.Equals(d._code))
                return false; 732475" />
<Node Id="25003:[10741..10799).2" Label="if (!_code.Equals(d._code))
                return false; 732476" />
<Node Id="25003:[10815..10891).1" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 732477" />
<Node Id="25003:[10907..10975).1" Label="if (_isSuppressed != d._isSuppressed)
                return false; 732478" />
<Node Id="25003:[10991..11148).1" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 732479" />
<Node Id="25003:[11059..11133).1" Label="if (_squiggledText != d._squiggledText)
                    return false; 732480" />
<Node Id="25003:[11164..11464).1" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 732481" />
<Node Id="25003:[11164..11464).2" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 732482" />
<Node Id="25003:[11224..11449).1" Label="if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                } 732483" />
<Node Id="25003:[11294..11430).1" Label="if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    } 732484" />
<Node Id="25003:[11480..11903).1" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 732485" />
<Node Id="25003:[11480..11903).2" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 732486" />
<Node Id="25003:[11917..12344).1" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 732487" />
<Node Id="25003:[11917..12344).2" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 732488" />
<Node Id="25003:[12436..12535).1" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 732489" />
<Node Id="25003:[12651..13498).1" Label="if (_arguments == null)
            {
                if (d._arguments != null)
                    return false;
            }
            else // _arguments != null
            {
                if (d._arguments == null)
                    return false;

                // we'll compare the arguments as strings
                var args1 = GetArgumentsAsStrings();
                var args2 = d.GetArgumentsAsStrings();
                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                }
            } 732490" />
<Node Id="25003:[12651..13498).2" Label="if (_arguments == null)
            {
                if (d._arguments != null)
                    return false;
            }
            else // _arguments != null
            {
                if (d._arguments == null)
                    return false;

                // we'll compare the arguments as strings
                var args1 = GetArgumentsAsStrings();
                var args2 = d.GetArgumentsAsStrings();
                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                }
            } 732491" />
<Node Id="25003:[12855..12915).1" Label="if (d._arguments == null)
                    return false; 732492" />
<Node Id="25003:[13006..13029).1" Label="GetArgumentsAsStrings() 732493" />
<Node Id="25003:[1971..2761).1" Label="param GetArgumentsAsStrings(this) 732494" />
<Node Id="25003:[2047..2709).1" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 732495" />
<Node Id="25003:[2047..2709).2" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 732496" />
<Node Id="25003:[2321..2694).1" Label="_argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                }); 732497" />
<Node Id="25003:[2321..2694).2" Label="_argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                }); 732498" />
<Node Id="25003:[2321..2340).1" Label="_argumentsAsStrings 732499" />
<Node Id="25003:[2723..2750).1" Label="return _argumentsAsStrings; 732500" />
<Node Id="25003:[12994..13030).1" Label="var args1 = GetArgumentsAsStrings(); 732501" />
<Node Id="25003:[13060..13085).1" Label="d.GetArgumentsAsStrings() 732502" />
<Node Id="25003:[1971..2761).2" Label="param GetArgumentsAsStrings(this) 732503" />
<Node Id="25003:[2047..2709).4" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 732504" />
<Node Id="25003:[2047..2709).5" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 732505" />
<Node Id="25003:[2723..2750).2" Label="return _argumentsAsStrings; 732506" />
<Node Id="25003:[13048..13086).1" Label="var args2 = d.GetArgumentsAsStrings(); 732507" />
<Node Id="25003:[13104..13483).1" Label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                } 732508" />
<Node Id="25003:[13393..13464).1" Label="if (!args1.SequenceEqual(args2))
                        return false; 732509" />
<Node Id="25003:[13393..13464).2" Label="if (!args1.SequenceEqual(args2))
                        return false; 732510" />
<Node Id="25003:[13393..13464).3" Label="if (!args1.SequenceEqual(args2))
                        return false; 732511" />
<Node Id="25003:[13514..13693).1" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 732512" />
<Node Id="25003:[13709..13721).1" Label="return true; 732513" />
<Node Id="25002:[3401..3434).5" Label="int index = unmatched.IndexOf(d); 732514" />
<Node Id="25002:[3452..3715).1" Label="if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                } 732515" />
<Node Id="25002:[3452..3715).2" Label="if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                } 732516" />
<Node Id="25002:[3508..3534).1" Label="unmatched.RemoveAt(index); 732517" />
<Node Id="25003:[10680..10725).4" Label="if (d == null)
                return false; 732518" />
<Node Id="25003:[10815..10891).3" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 732519" />
<Node Id="25003:[10907..10975).3" Label="if (_isSuppressed != d._isSuppressed)
                return false; 732520" />
<Node Id="25003:[10991..11148).2" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 732521" />
<Node Id="25003:[11059..11133).3" Label="if (_squiggledText != d._squiggledText)
                    return false; 732522" />
<Node Id="25003:[11164..11464).4" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 732523" />
<Node Id="25003:[11224..11449).4" Label="if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                } 732524" />
<Node Id="25003:[11294..11430).3" Label="if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    } 732525" />
<Node Id="25003:[11480..11903).4" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 732526" />
<Node Id="25003:[11917..12344).4" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 732527" />
<Node Id="25003:[12436..12535).3" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 732528" />
<Node Id="25003:[12855..12915).4" Label="if (d._arguments == null)
                    return false; 732529" />
<Node Id="25003:[13514..13693).5" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 732530" />
<Node Id="25002:[3840..3992).1" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 732531" />
<Node Id="25002:[3840..3992).2" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 732532" />
<Node Id="25002:[4102..4181).1" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 732533" />
<Node Id="25002:[4102..4181).3" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 732534" />
<Node Id="25002:[4102..4181).4" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 732535" />
<Node Id="25002:[4126..4179).1" Label="DiagnosticDescription.GetAssertText(expected, actual) 732536" />
<Node Id="25003:[17577..17609).1" Label="param GetAssertText(DiagnosticDescription[] expected) 732537" />
<Node Id="25003:[17611..17641).1" Label="param GetAssertText(IEnumerable$Diagnostic$ actual) 732538" />
<Node Id="25003:[17667..17688).1" Label="const int CSharp = 1; 732539" />
<Node Id="25003:[17702..17728).1" Label="const int VisualBasic = 2; 732540" />
<Node Id="25003:[17742..17827).1" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 732541" />
<Node Id="25003:[17742..17827).2" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 732542" />
<Node Id="25003:[17742..17827).4" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 732543" />
<Node Id="25003:[17757..17803).1" Label="actual.Any() && actual.First() is CSDiagnostic 732544" />
<Node Id="25003:[17742..17827).6" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 732545" />
<Node Id="25003:[17841..17904).1" Label="var includeDiagnosticMessagesAsComments = (language == CSharp); 732546" />
<Node Id="25003:[17918..17965).1" Label="int indentDepth = (language == CSharp) ? 4 : 1; 732547" />
<Node Id="25003:[17936..17956).1" Label="(language == CSharp) 732548" />
<Node Id="25003:[17979..18071).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 732549" />
<Node Id="25003:[17979..18071).2" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 732550" />
<Node Id="25003:[17979..18071).4" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 732551" />
<Node Id="25003:[17979..18071).6" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 732552" />
<Node Id="25003:[18085..18181).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 732553" />
<Node Id="25003:[18085..18181).2" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 732554" />
<Node Id="25003:[18085..18181).4" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 732555" />
<Node Id="25003:[18085..18181).6" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 732556" />
<Node Id="25003:[18197..18490).1" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 732557" />
<Node Id="25003:[18201..18226).1" Label="IsSortedOrEmpty(expected) 732558" />
<Node Id="25003:[21605..21640).1" Label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 732559" />
<Node Id="25003:[23096..23122).1" Label="new LinePositionComparer() 732560" />
<Node Id="25003:[22962..23812).1" Label="param LinePositionComparer(this) 732561" />
<Node Id="25003:[23085..23122).1" Label="Instance = new LinePositionComparer() 732562" />
<Node Id="25003:[21666..21711).1" Label="var comparer = LinePositionComparer.Instance; 732563" />
<Node Id="25003:[21725..21759).1" Label="DiagnosticDescription last = null; 732564" />
<Node Id="25003:[21773..22187).1" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 732565" />
<Node Id="25003:[21773..22187).2" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 732566" />
<Node Id="25003:[21845..21956).1" Label="if (diagnostic._startPosition == null)
                {
                    return false;
                } 732567" />
<Node Id="25003:[21974..22136).1" Label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                } 732568" />
<Node Id="25003:[21974..22136).2" Label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                } 732569" />
<Node Id="25003:[22154..22172).1" Label="last = diagnostic; 732570" />
<Node Id="25003:[21974..22136).6" Label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                } 732571" />
<Node Id="25003:[21974..22136).7" Label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                } 732572" />
<Node Id="25003:[21974..22136).8" Label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                } 732573" />
<Node Id="25003:[21994..22058).1" Label="comparer.Compare(last._startPosition, diagnostic._startPosition) 732574" />
<Node Id="25003:[23158..23173).1" Label="param Compare(LinePosition? x) 732575" />
<Node Id="25003:[23175..23190).1" Label="param Compare(LinePosition? y) 732576" />
<Node Id="25003:[23139..23801).1" Label="param Compare(this) 732577" />
<Node Id="25003:[23224..23425).1" Label="if (x == null)
                {
                    if (y == null)
                    {
                        return 0;
                    }
                    return -1;
                } 732578" />
<Node Id="25003:[23224..23425).2" Label="if (x == null)
                {
                    if (y == null)
                    {
                        return 0;
                    }
                    return -1;
                } 732579" />
<Node Id="25003:[23445..23528).1" Label="if (y == null)
                {
                    return 1;
                } 732580" />
<Node Id="25003:[23445..23528).2" Label="if (y == null)
                {
                    return 1;
                } 732581" />
<Node Id="25003:[23548..23600).1" Label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 732582" />
<Node Id="25003:[23548..23600).2" Label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 732583" />
<Node Id="25003:[23618..23712).1" Label="if (lineDiff != 0)
                {
                    return lineDiff;
                } 732584" />
<Node Id="25003:[23618..23712).2" Label="if (lineDiff != 0)
                {
                    return lineDiff;
                } 732585" />
<Node Id="25003:[23677..23693).1" Label="return lineDiff; 732586" />
<Node Id="25003:[22201..22213).1" Label="return true; 732587" />
<Node Id="25003:[18197..18490).2" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 732588" />
<Node Id="25003:[18453..18475).1" Label="actual = Sort(actual); 732589" />
<Node Id="25003:[18462..18474).1" Label="Sort(actual) 732590" />
<Node Id="25003:[21372..21407).1" Label="param Sort(IEnumerable$Diagnostic$ diagnostics) 732591" />
<Node Id="25003:[21433..21546).1" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 732592" />
<Node Id="25003:[21433..21546).2" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 732593" />
<Node Id="25003:[21433..21546).4" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 732594" />
<Node Id="25003:[21433..21546).5" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 732595" />
<Node Id="25003:[18506..18543).1" Label="var assertText = new StringBuilder(); 732596" />
<Node Id="25003:[18557..18581).1" Label="assertText.AppendLine(); 732597" />
<Node Id="25003:[18658..18664).1" Label="int i; 732598" />
<Node Id="25003:[18678..18713).1" Label="assertText.AppendLine('Expected:'); 732599" />
<Node Id="25003:[18678..18713).3" Label="assertText.AppendLine('Expected:'); 732600" />
<Node Id="25003:[18727..18781).1" Label="var expectedText = ArrayBuilder$string$.GetInstance(); 732601" />
<Node Id="25003:[18795..18929).1" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 732602" />
<Node Id="25003:[18795..18929).2" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 732603" />
<Node Id="25003:[18855..18914).1" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 732604" />
<Node Id="25003:[18855..18914).2" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 732605" />
<Node Id="25003:[18872..18912).1" Label="GetDiagnosticDescription(d, indentDepth) 732606" />
<Node Id="25003:[22283..22306).1" Label="param GetDiagnosticDescription(DiagnosticDescription d) 732607" />
<Node Id="25003:[22308..22323).1" Label="param GetDiagnosticDescription(int indentDepth) 732608" />
<Node Id="25003:[22349..22404).1" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732609" />
<Node Id="25003:[22349..22404).4" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732610" />
<Node Id="25003:[22391..22403).1" Label="d.ToString() 732611" />
<Node Id="25003:[14779..17530).1" Label="param ToString(this) 732612" />
<Node Id="25003:[14837..14866).1" Label="var sb = new StringBuilder(); 732613" />
<Node Id="25003:[14882..14907).1" Label="sb.Append('Diagnostic('); 732614" />
<Node Id="25003:[14882..14907).3" Label="sb.Append('Diagnostic('); 732615" />
<Node Id="25003:[14921..15244).1" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 732616" />
<Node Id="25003:[14921..15244).2" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 732617" />
<Node Id="25003:[15100..15131).1" Label="sb.Append(_errorCodeType.Name); 732618" />
<Node Id="25003:[15100..15131).2" Label="sb.Append(_errorCodeType.Name); 732619" />
<Node Id="25003:[15149..15164).1" Label="sb.Append('.'); 732620" />
<Node Id="25003:[15149..15164).3" Label="sb.Append('.'); 732621" />
<Node Id="25003:[15182..15229).1" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732622" />
<Node Id="25003:[15182..15229).5" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732623" />
<Node Id="25003:[15260..15767).1" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 732624" />
<Node Id="25003:[15260..15767).2" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 732625" />
<Node Id="25003:[15320..15717).1" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 732626" />
<Node Id="25003:[15632..15650).1" Label="sb.Append(', \''); 732627" />
<Node Id="25003:[15632..15650).3" Label="sb.Append(', \''); 732628" />
<Node Id="25003:[15672..15698).1" Label="sb.Append(_squiggledText); 732629" />
<Node Id="25003:[15672..15698).2" Label="sb.Append(_squiggledText); 732630" />
<Node Id="25003:[15737..15752).1" Label="sb.Append('''); 732631" />
<Node Id="25003:[15737..15752).3" Label="sb.Append('''); 732632" />
<Node Id="25003:[15783..15883).1" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 732633" />
<Node Id="25003:[15899..15914).1" Label="sb.Append(')'); 732634" />
<Node Id="25003:[15899..15914).3" Label="sb.Append(')'); 732635" />
<Node Id="25003:[15930..16520).1" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 732636" />
<Node Id="25003:[15930..16520).2" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 732637" />
<Node Id="25003:[15986..16015).1" Label="sb.Append('.WithArguments('); 732638" />
<Node Id="25003:[15986..16015).3" Label="sb.Append('.WithArguments('); 732639" />
<Node Id="25003:[16055..16078).1" Label="GetArgumentsAsStrings() 732640" />
<Node Id="25003:[16033..16095).1" Label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 732641" />
<Node Id="25003:[16113..16472).1" Label="for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                } 732642" />
<Node Id="25003:[16113..16472).3" Label="for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                } 732643" />
<Node Id="25003:[16202..16218).1" Label="sb.Append('\''); 732644" />
<Node Id="25003:[16202..16218).3" Label="sb.Append('\''); 732645" />
<Node Id="25003:[16240..16275).1" Label="sb.Append(argumentStrings.Current); 732646" />
<Node Id="25003:[16240..16275).2" Label="sb.Append(argumentStrings.Current); 732647" />
<Node Id="25003:[16297..16313).1" Label="sb.Append('\''); 732648" />
<Node Id="25003:[16297..16313).3" Label="sb.Append('\''); 732649" />
<Node Id="25003:[16335..16453).1" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 732650" />
<Node Id="25003:[16414..16430).1" Label="sb.Append(', '); 732651" />
<Node Id="25003:[16414..16430).3" Label="sb.Append(', '); 732652" />
<Node Id="25003:[16490..16505).1" Label="sb.Append(')'); 732653" />
<Node Id="25003:[16490..16505).3" Label="sb.Append(')'); 732654" />
<Node Id="25003:[16536..16829).1" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 732655" />
<Node Id="25003:[16536..16829).2" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 732656" />
<Node Id="25003:[16596..16624).1" Label="sb.Append('.WithLocation('); 732657" />
<Node Id="25003:[16596..16624).3" Label="sb.Append('.WithLocation('); 732658" />
<Node Id="25003:[16642..16683).1" Label="sb.Append(_startPosition.Value.Line + 1); 732659" />
<Node Id="25003:[16642..16683).4" Label="sb.Append(_startPosition.Value.Line + 1); 732660" />
<Node Id="25003:[16701..16717).1" Label="sb.Append(', '); 732661" />
<Node Id="25003:[16701..16717).3" Label="sb.Append(', '); 732662" />
<Node Id="25003:[16735..16781).1" Label="sb.Append(_startPosition.Value.Character + 1); 732663" />
<Node Id="25003:[16735..16781).4" Label="sb.Append(_startPosition.Value.Character + 1); 732664" />
<Node Id="25003:[16799..16814).1" Label="sb.Append(')'); 732665" />
<Node Id="25003:[16799..16814).3" Label="sb.Append(')'); 732666" />
<Node Id="25003:[16845..16954).1" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 732667" />
<Node Id="25003:[16970..17144).1" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 732668" />
<Node Id="25003:[16970..17144).2" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 732669" />
<Node Id="25003:[17160..17340).1" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 732670" />
<Node Id="25003:[17160..17340).2" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 732671" />
<Node Id="25003:[17356..17482).1" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 732672" />
<Node Id="25003:[17356..17482).2" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 732673" />
<Node Id="25003:[17498..17519).1" Label="return sb.ToString(); 732674" />
<Node Id="25003:[22349..22404).7" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732675" />
<Node Id="25003:[22349..22404).8" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732676" />
<Node Id="25003:[18855..18914).5" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 732677" />
<Node Id="25003:[18855..18914).7" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 732678" />
<Node Id="25003:[22308..22323).2" Label="param GetDiagnosticDescription(int indentDepth) 732679" />
<Node Id="25003:[22349..22404).10" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732680" />
<Node Id="25003:[22349..22404).13" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732681" />
<Node Id="25003:[14837..14866).3" Label="var sb = new StringBuilder(); 732682" />
<Node Id="25003:[14882..14907).4" Label="sb.Append('Diagnostic('); 732683" />
<Node Id="25003:[14882..14907).6" Label="sb.Append('Diagnostic('); 732684" />
<Node Id="25003:[14921..15244).4" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 732685" />
<Node Id="25003:[15100..15131).3" Label="sb.Append(_errorCodeType.Name); 732686" />
<Node Id="25003:[15100..15131).4" Label="sb.Append(_errorCodeType.Name); 732687" />
<Node Id="25003:[15149..15164).4" Label="sb.Append('.'); 732688" />
<Node Id="25003:[15149..15164).6" Label="sb.Append('.'); 732689" />
<Node Id="25003:[15182..15229).6" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732690" />
<Node Id="25003:[15182..15229).10" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732691" />
<Node Id="25003:[15260..15767).4" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 732692" />
<Node Id="25003:[15320..15717).13" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 732693" />
<Node Id="25003:[15632..15650).4" Label="sb.Append(', \''); 732694" />
<Node Id="25003:[15632..15650).6" Label="sb.Append(', \''); 732695" />
<Node Id="25003:[15672..15698).3" Label="sb.Append(_squiggledText); 732696" />
<Node Id="25003:[15672..15698).4" Label="sb.Append(_squiggledText); 732697" />
<Node Id="25003:[15737..15752).4" Label="sb.Append('''); 732698" />
<Node Id="25003:[15737..15752).6" Label="sb.Append('''); 732699" />
<Node Id="25003:[15783..15883).2" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 732700" />
<Node Id="25003:[15899..15914).4" Label="sb.Append(')'); 732701" />
<Node Id="25003:[15899..15914).6" Label="sb.Append(')'); 732702" />
<Node Id="25003:[15986..16015).4" Label="sb.Append('.WithArguments('); 732703" />
<Node Id="25003:[15986..16015).6" Label="sb.Append('.WithArguments('); 732704" />
<Node Id="25003:[16202..16218).9" Label="sb.Append('\''); 732705" />
<Node Id="25003:[16240..16275).5" Label="sb.Append(argumentStrings.Current); 732706" />
<Node Id="25003:[16240..16275).6" Label="sb.Append(argumentStrings.Current); 732707" />
<Node Id="25003:[16297..16313).9" Label="sb.Append('\''); 732708" />
<Node Id="25003:[16414..16430).6" Label="sb.Append(', '); 732709" />
<Node Id="25003:[16490..16505).4" Label="sb.Append(')'); 732710" />
<Node Id="25003:[16490..16505).6" Label="sb.Append(')'); 732711" />
<Node Id="25003:[16536..16829).4" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 732712" />
<Node Id="25003:[16596..16624).4" Label="sb.Append('.WithLocation('); 732713" />
<Node Id="25003:[16596..16624).6" Label="sb.Append('.WithLocation('); 732714" />
<Node Id="25003:[16642..16683).5" Label="sb.Append(_startPosition.Value.Line + 1); 732715" />
<Node Id="25003:[16642..16683).8" Label="sb.Append(_startPosition.Value.Line + 1); 732716" />
<Node Id="25003:[16701..16717).4" Label="sb.Append(', '); 732717" />
<Node Id="25003:[16701..16717).6" Label="sb.Append(', '); 732718" />
<Node Id="25003:[16735..16781).5" Label="sb.Append(_startPosition.Value.Character + 1); 732719" />
<Node Id="25003:[16735..16781).8" Label="sb.Append(_startPosition.Value.Character + 1); 732720" />
<Node Id="25003:[16799..16814).4" Label="sb.Append(')'); 732721" />
<Node Id="25003:[16799..16814).6" Label="sb.Append(')'); 732722" />
<Node Id="25003:[16845..16954).2" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 732723" />
<Node Id="25003:[16970..17144).4" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 732724" />
<Node Id="25003:[17160..17340).4" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 732725" />
<Node Id="25003:[17356..17482).5" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 732726" />
<Node Id="25003:[17498..17519).3" Label="return sb.ToString(); 732727" />
<Node Id="25003:[22349..22404).16" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732728" />
<Node Id="25003:[22349..22404).17" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732729" />
<Node Id="25003:[18943..18992).1" Label="GetCommaSeparatedLines(assertText, expectedText); 732730" />
<Node Id="25003:[18943..18992).2" Label="GetCommaSeparatedLines(assertText, expectedText); 732731" />
<Node Id="25003:[18943..18991).1" Label="GetCommaSeparatedLines(assertText, expectedText) 732732" />
<Node Id="25003:[22599..22615).1" Label="param GetCommaSeparatedLines(StringBuilder sb) 732733" />
<Node Id="25003:[22617..22643).1" Label="param GetCommaSeparatedLines(ArrayBuilder$string$ lines) 732734" />
<Node Id="25003:[22669..22689).1" Label="int n = lines.Count; 732735" />
<Node Id="25003:[22703..22939).1" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 732736" />
<Node Id="25003:[22703..22939).3" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 732737" />
<Node Id="25003:[22763..22783).1" Label="sb.Append(lines[i]); 732738" />
<Node Id="25003:[22763..22783).3" Label="sb.Append(lines[i]); 732739" />
<Node Id="25003:[22801..22890).1" Label="if (i $ n - 1)
                {
                    sb.Append(',');
                } 732740" />
<Node Id="25003:[22856..22871).1" Label="sb.Append(','); 732741" />
<Node Id="25003:[22856..22871).3" Label="sb.Append(','); 732742" />
<Node Id="25003:[22908..22924).1" Label="sb.AppendLine(); 732743" />
<Node Id="25003:[18943..18992).3" Label="GetCommaSeparatedLines(assertText, expectedText); 732744" />
<Node Id="25003:[19106..19139).1" Label="assertText.AppendLine('Actual:'); 732745" />
<Node Id="25003:[19106..19139).3" Label="assertText.AppendLine('Actual:'); 732746" />
<Node Id="25003:[19153..19205).1" Label="var actualText = ArrayBuilder$string$.GetInstance(); 732747" />
<Node Id="25003:[19219..19250).1" Label="var e = actual.GetEnumerator(); 732748" />
<Node Id="25003:[19264..20938).1" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 732749" />
<Node Id="25003:[19264..20938).3" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 732750" />
<Node Id="25003:[23158..23173).2" Label="param Compare(LinePosition? x) 732751" />
<Node Id="25003:[23175..23190).2" Label="param Compare(LinePosition? y) 732752" />
<Node Id="25003:[23139..23801).2" Label="param Compare(this) 732753" />
<Node Id="25003:[23224..23425).4" Label="if (x == null)
                {
                    if (y == null)
                    {
                        return 0;
                    }
                    return -1;
                } 732754" />
<Node Id="25003:[23224..23425).5" Label="if (x == null)
                {
                    if (y == null)
                    {
                        return 0;
                    }
                    return -1;
                } 732755" />
<Node Id="25003:[23445..23528).4" Label="if (y == null)
                {
                    return 1;
                } 732756" />
<Node Id="25003:[23445..23528).5" Label="if (y == null)
                {
                    return 1;
                } 732757" />
<Node Id="25003:[23548..23600).4" Label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 732758" />
<Node Id="25003:[23548..23600).5" Label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 732759" />
<Node Id="25003:[23618..23712).4" Label="if (lineDiff != 0)
                {
                    return lineDiff;
                } 732760" />
<Node Id="25003:[23618..23712).5" Label="if (lineDiff != 0)
                {
                    return lineDiff;
                } 732761" />
<Node Id="25003:[23732..23786).1" Label="return x.Value.Character.CompareTo(y.Value.Character); 732762" />
<Node Id="25003:[23732..23786).2" Label="return x.Value.Character.CompareTo(y.Value.Character); 732763" />
<Node Id="25003:[23548..23600).7" Label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 732764" />
<Node Id="25003:[23618..23712).8" Label="if (lineDiff != 0)
                {
                    return lineDiff;
                } 732765" />
<Node Id="25003:[23677..23693).2" Label="return lineDiff; 732766" />
<Node Id="25003:[19327..19352).1" Label="Diagnostic d = e.Current; 732767" />
<Node Id="25003:[19370..19400).1" Label="string message = d.ToString(); 732768" />
<Node Id="25003:[19418..19628).1" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 732769" />
<Node Id="25003:[19418..19628).2" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 732770" />
<Node Id="25003:[19648..19745).1" Label="if (i $ 0)
                {
                    assertText.AppendLine(',');
                } 732771" />
<Node Id="25003:[19765..20366).1" Label="if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                } 732772" />
<Node Id="25003:[19846..19878).1" Label="Indent(assertText, indentDepth); 732773" />
<Node Id="25003:[19846..19878).2" Label="Indent(assertText, indentDepth); 732774" />
<Node Id="25003:[19846..19877).1" Label="Indent(assertText, indentDepth) 732775" />
<Node Id="25003:[22454..22470).1" Label="param Indent(StringBuilder sb) 732776" />
<Node Id="25003:[22472..22481).1" Label="param Indent(int count) 732777" />
<Node Id="25003:[22507..22533).1" Label="sb.Append(' ', 4 * count); 732778" />
<Node Id="25003:[22507..22533).4" Label="sb.Append(' ', 4 * count); 732779" />
<Node Id="25003:[22507..22533).6" Label="sb.Append(' ', 4 * count); 732780" />
<Node Id="25003:[19846..19878).3" Label="Indent(assertText, indentDepth); 732781" />
<Node Id="25003:[19900..19925).1" Label="assertText.Append('// '); 732782" />
<Node Id="25003:[19900..19925).3" Label="assertText.Append('// '); 732783" />
<Node Id="25003:[19947..19983).1" Label="assertText.AppendLine(d.ToString()); 732784" />
<Node Id="25003:[19947..19983).3" Label="assertText.AppendLine(d.ToString()); 732785" />
<Node Id="25003:[20005..20024).1" Label="var l = d.Location; 732786" />
<Node Id="25003:[20046..20347).1" Label="if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    } 732787" />
<Node Id="25003:[20112..20144).1" Label="Indent(assertText, indentDepth); 732788" />
<Node Id="25003:[20112..20144).2" Label="Indent(assertText, indentDepth); 732789" />
<Node Id="25003:[20112..20143).1" Label="Indent(assertText, indentDepth) 732790" />
<Node Id="25003:[22454..22470).2" Label="param Indent(StringBuilder sb) 732791" />
<Node Id="25003:[22472..22481).2" Label="param Indent(int count) 732792" />
<Node Id="25003:[22507..22533).7" Label="sb.Append(' ', 4 * count); 732793" />
<Node Id="25003:[22507..22533).10" Label="sb.Append(' ', 4 * count); 732794" />
<Node Id="25003:[22507..22533).12" Label="sb.Append(' ', 4 * count); 732795" />
<Node Id="25003:[20112..20144).3" Label="Indent(assertText, indentDepth); 732796" />
<Node Id="25003:[20170..20195).1" Label="assertText.Append('// '); 732797" />
<Node Id="25003:[20170..20195).3" Label="assertText.Append('// '); 732798" />
<Node Id="25003:[20221..20324).1" Label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 732799" />
<Node Id="25003:[20221..20324).8" Label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 732800" />
<Node Id="25003:[20386..20505).1" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 732801" />
<Node Id="25003:[20386..20505).2" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 732802" />
<Node Id="25003:[20386..20505).4" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 732803" />
<Node Id="25003:[20386..20505).5" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 732804" />
<Node Id="25003:[20404..20504).1" Label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 732805" />
<Node Id="25003:[4933..4945).3" Label="param DiagnosticDescription(Diagnostic d) 732806" />
<Node Id="25003:[4947..4965).3" Label="param DiagnosticDescription(bool errorCodeOnly) 732807" />
<Node Id="25003:[4967..5002).3" Label="param DiagnosticDescription(bool includeDefaultSeverity = false) 732808" />
<Node Id="25003:[5004..5041).3" Label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 732809" />
<Node Id="25003:[4904..7352).3" Label="param DiagnosticDescription(this) 732810" />
<Node Id="25003:[912..917).9" Label="_code 732811" />
<Node Id="25003:[950..967).9" Label="_isWarningAsError 732812" />
<Node Id="25003:[1000..1013).9" Label="_isSuppressed 732813" />
<Node Id="25003:[1048..1062).9" Label="_squiggledText 732814" />
<Node Id="25003:[1099..1109).9" Label="_arguments 732815" />
<Node Id="25003:[1151..1165).25" Label="_startPosition 732816" />
<Node Id="25003:[1336..1350).9" Label="_errorCodeType 732817" />
<Node Id="25003:[1460..1479).9" Label="_defaultSeverityOpt 732818" />
<Node Id="25003:[1527..1548).9" Label="_effectiveSeverityOpt 732819" />
<Node Id="25003:[5067..5072).3" Label="_code 732820" />
<Node Id="25003:[5096..5113).3" Label="_isWarningAsError 732821" />
<Node Id="25003:[5149..5162).3" Label="_isSuppressed 732822" />
<Node Id="25003:[5194..5203).3" Label="_location 732823" />
<Node Id="25003:[5444..5476).5" Label="DiagnosticWithInfo dinfo = null; 732824" />
<Node Id="25003:[5490..6130).16" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 732825" />
<Node Id="25003:[7118..7245).13" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 732826" />
<Node Id="25003:[7118..7245).14" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 732827" />
<Node Id="25003:[7118..7245).16" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 732828" />
<Node Id="25003:[20523..20557).1" Label="var diffDescription = description; 732829" />
<Node Id="25003:[20575..20622).1" Label="var idx = Array.IndexOf(expected, description); 732830" />
<Node Id="25003:[20575..20622).2" Label="var idx = Array.IndexOf(expected, description); 732831" />
<Node Id="25003:[20575..20622).3" Label="var idx = Array.IndexOf(expected, description); 732832" />
<Node Id="25003:[20575..20622).4" Label="var idx = Array.IndexOf(expected, description); 732833" />
<Node Id="25003:[10680..10725).7" Label="if (d == null)
                return false; 732834" />
<Node Id="25003:[10680..10725).8" Label="if (d == null)
                return false; 732835" />
<Node Id="25003:[10815..10891).5" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 732836" />
<Node Id="25003:[10907..10975).5" Label="if (_isSuppressed != d._isSuppressed)
                return false; 732837" />
<Node Id="25003:[10991..11148).3" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 732838" />
<Node Id="25003:[11059..11133).5" Label="if (_squiggledText != d._squiggledText)
                    return false; 732839" />
<Node Id="25003:[11164..11464).7" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 732840" />
<Node Id="25003:[11164..11464).8" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 732841" />
<Node Id="25003:[11224..11449).7" Label="if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                } 732842" />
<Node Id="25003:[11294..11430).5" Label="if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    } 732843" />
<Node Id="25003:[11480..11903).7" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 732844" />
<Node Id="25003:[11480..11903).8" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 732845" />
<Node Id="25003:[11917..12344).7" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 732846" />
<Node Id="25003:[11917..12344).8" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 732847" />
<Node Id="25003:[12436..12535).5" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 732848" />
<Node Id="25003:[12855..12915).7" Label="if (d._arguments == null)
                    return false; 732849" />
<Node Id="25003:[13514..13693).9" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 732850" />
<Node Id="25003:[20640..20746).1" Label="if (idx != -1)
                {
                    diffDescription = expected[idx];
                } 732851" />
<Node Id="25003:[20640..20746).2" Label="if (idx != -1)
                {
                    diffDescription = expected[idx];
                } 732852" />
<Node Id="25003:[20695..20727).1" Label="diffDescription = expected[idx]; 732853" />
<Node Id="25003:[20764..20834).1" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 732854" />
<Node Id="25003:[20764..20834).2" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 732855" />
<Node Id="25003:[20782..20832).1" Label="GetDiagnosticDescription(description, indentDepth) 732856" />
<Node Id="25003:[22283..22306).3" Label="param GetDiagnosticDescription(DiagnosticDescription d) 732857" />
<Node Id="25003:[22308..22323).3" Label="param GetDiagnosticDescription(int indentDepth) 732858" />
<Node Id="25003:[22349..22404).19" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732859" />
<Node Id="25003:[22349..22404).22" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732860" />
<Node Id="25003:[14837..14866).5" Label="var sb = new StringBuilder(); 732861" />
<Node Id="25003:[14882..14907).7" Label="sb.Append('Diagnostic('); 732862" />
<Node Id="25003:[14882..14907).9" Label="sb.Append('Diagnostic('); 732863" />
<Node Id="25003:[14921..15244).7" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 732864" />
<Node Id="25003:[14921..15244).8" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 732865" />
<Node Id="25003:[15100..15131).5" Label="sb.Append(_errorCodeType.Name); 732866" />
<Node Id="25003:[15100..15131).6" Label="sb.Append(_errorCodeType.Name); 732867" />
<Node Id="25003:[15149..15164).7" Label="sb.Append('.'); 732868" />
<Node Id="25003:[15149..15164).9" Label="sb.Append('.'); 732869" />
<Node Id="25003:[15182..15229).11" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732870" />
<Node Id="25003:[15182..15229).15" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732871" />
<Node Id="25003:[15260..15767).7" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 732872" />
<Node Id="25003:[15260..15767).8" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 732873" />
<Node Id="25003:[15320..15717).25" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 732874" />
<Node Id="25003:[15632..15650).7" Label="sb.Append(', \''); 732875" />
<Node Id="25003:[15632..15650).9" Label="sb.Append(', \''); 732876" />
<Node Id="25003:[15672..15698).5" Label="sb.Append(_squiggledText); 732877" />
<Node Id="25003:[15672..15698).6" Label="sb.Append(_squiggledText); 732878" />
<Node Id="25003:[15737..15752).7" Label="sb.Append('''); 732879" />
<Node Id="25003:[15737..15752).9" Label="sb.Append('''); 732880" />
<Node Id="25003:[15783..15883).3" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 732881" />
<Node Id="25003:[15899..15914).7" Label="sb.Append(')'); 732882" />
<Node Id="25003:[15899..15914).9" Label="sb.Append(')'); 732883" />
<Node Id="25003:[15930..16520).8" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 732884" />
<Node Id="25003:[15986..16015).7" Label="sb.Append('.WithArguments('); 732885" />
<Node Id="25003:[15986..16015).9" Label="sb.Append('.WithArguments('); 732886" />
<Node Id="25003:[16202..16218).13" Label="sb.Append('\''); 732887" />
<Node Id="25003:[16202..16218).15" Label="sb.Append('\''); 732888" />
<Node Id="25003:[16240..16275).9" Label="sb.Append(argumentStrings.Current); 732889" />
<Node Id="25003:[16240..16275).10" Label="sb.Append(argumentStrings.Current); 732890" />
<Node Id="25003:[16297..16313).13" Label="sb.Append('\''); 732891" />
<Node Id="25003:[16297..16313).15" Label="sb.Append('\''); 732892" />
<Node Id="25003:[16335..16453).17" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 732893" />
<Node Id="25003:[16414..16430).7" Label="sb.Append(', '); 732894" />
<Node Id="25003:[16414..16430).9" Label="sb.Append(', '); 732895" />
<Node Id="25003:[16490..16505).7" Label="sb.Append(')'); 732896" />
<Node Id="25003:[16490..16505).9" Label="sb.Append(')'); 732897" />
<Node Id="25003:[16536..16829).7" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 732898" />
<Node Id="25003:[16536..16829).8" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 732899" />
<Node Id="25003:[16596..16624).7" Label="sb.Append('.WithLocation('); 732900" />
<Node Id="25003:[16596..16624).9" Label="sb.Append('.WithLocation('); 732901" />
<Node Id="25003:[16642..16683).9" Label="sb.Append(_startPosition.Value.Line + 1); 732902" />
<Node Id="25003:[16642..16683).12" Label="sb.Append(_startPosition.Value.Line + 1); 732903" />
<Node Id="25003:[16701..16717).7" Label="sb.Append(', '); 732904" />
<Node Id="25003:[16701..16717).9" Label="sb.Append(', '); 732905" />
<Node Id="25003:[16735..16781).9" Label="sb.Append(_startPosition.Value.Character + 1); 732906" />
<Node Id="25003:[16735..16781).12" Label="sb.Append(_startPosition.Value.Character + 1); 732907" />
<Node Id="25003:[16799..16814).7" Label="sb.Append(')'); 732908" />
<Node Id="25003:[16799..16814).9" Label="sb.Append(')'); 732909" />
<Node Id="25003:[16845..16954).3" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 732910" />
<Node Id="25003:[16970..17144).7" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 732911" />
<Node Id="25003:[16970..17144).8" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 732912" />
<Node Id="25003:[17160..17340).7" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 732913" />
<Node Id="25003:[17160..17340).8" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 732914" />
<Node Id="25003:[17356..17482).9" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 732915" />
<Node Id="25003:[17356..17482).10" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 732916" />
<Node Id="25003:[17498..17519).5" Label="return sb.ToString(); 732917" />
<Node Id="25003:[22349..22404).25" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732918" />
<Node Id="25003:[22349..22404).26" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732919" />
<Node Id="25003:[20764..20834).5" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 732920" />
<Node Id="25003:[20852..20923).1" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 732921" />
<Node Id="25003:[20852..20923).2" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 732922" />
<Node Id="25003:[20867..20921).1" Label="GetDiagnosticDescription(diffDescription, indentDepth) 732923" />
<Node Id="25003:[22283..22306).4" Label="param GetDiagnosticDescription(DiagnosticDescription d) 732924" />
<Node Id="25003:[22308..22323).4" Label="param GetDiagnosticDescription(int indentDepth) 732925" />
<Node Id="25003:[22349..22404).28" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732926" />
<Node Id="25003:[22349..22404).31" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732927" />
<Node Id="25003:[14837..14866).7" Label="var sb = new StringBuilder(); 732928" />
<Node Id="25003:[14882..14907).10" Label="sb.Append('Diagnostic('); 732929" />
<Node Id="25003:[14882..14907).12" Label="sb.Append('Diagnostic('); 732930" />
<Node Id="25003:[14921..15244).10" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 732931" />
<Node Id="25003:[14921..15244).11" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 732932" />
<Node Id="25003:[15100..15131).7" Label="sb.Append(_errorCodeType.Name); 732933" />
<Node Id="25003:[15100..15131).8" Label="sb.Append(_errorCodeType.Name); 732934" />
<Node Id="25003:[15149..15164).10" Label="sb.Append('.'); 732935" />
<Node Id="25003:[15149..15164).12" Label="sb.Append('.'); 732936" />
<Node Id="25003:[15182..15229).16" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732937" />
<Node Id="25003:[15182..15229).20" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 732938" />
<Node Id="25003:[15260..15767).10" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 732939" />
<Node Id="25003:[15260..15767).11" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 732940" />
<Node Id="25003:[15320..15717).37" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 732941" />
<Node Id="25003:[15632..15650).10" Label="sb.Append(', \''); 732942" />
<Node Id="25003:[15632..15650).12" Label="sb.Append(', \''); 732943" />
<Node Id="25003:[15672..15698).7" Label="sb.Append(_squiggledText); 732944" />
<Node Id="25003:[15672..15698).8" Label="sb.Append(_squiggledText); 732945" />
<Node Id="25003:[15737..15752).10" Label="sb.Append('''); 732946" />
<Node Id="25003:[15737..15752).12" Label="sb.Append('''); 732947" />
<Node Id="25003:[15783..15883).4" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 732948" />
<Node Id="25003:[15899..15914).10" Label="sb.Append(')'); 732949" />
<Node Id="25003:[15899..15914).12" Label="sb.Append(')'); 732950" />
<Node Id="25003:[15930..16520).11" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 732951" />
<Node Id="25003:[15986..16015).10" Label="sb.Append('.WithArguments('); 732952" />
<Node Id="25003:[15986..16015).12" Label="sb.Append('.WithArguments('); 732953" />
<Node Id="25003:[16202..16218).19" Label="sb.Append('\''); 732954" />
<Node Id="25003:[16202..16218).21" Label="sb.Append('\''); 732955" />
<Node Id="25003:[16240..16275).13" Label="sb.Append(argumentStrings.Current); 732956" />
<Node Id="25003:[16240..16275).14" Label="sb.Append(argumentStrings.Current); 732957" />
<Node Id="25003:[16297..16313).19" Label="sb.Append('\''); 732958" />
<Node Id="25003:[16297..16313).21" Label="sb.Append('\''); 732959" />
<Node Id="25003:[16335..16453).25" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 732960" />
<Node Id="25003:[16414..16430).10" Label="sb.Append(', '); 732961" />
<Node Id="25003:[16414..16430).12" Label="sb.Append(', '); 732962" />
<Node Id="25003:[16490..16505).10" Label="sb.Append(')'); 732963" />
<Node Id="25003:[16490..16505).12" Label="sb.Append(')'); 732964" />
<Node Id="25003:[16536..16829).10" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 732965" />
<Node Id="25003:[16536..16829).11" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 732966" />
<Node Id="25003:[16596..16624).10" Label="sb.Append('.WithLocation('); 732967" />
<Node Id="25003:[16596..16624).12" Label="sb.Append('.WithLocation('); 732968" />
<Node Id="25003:[16642..16683).13" Label="sb.Append(_startPosition.Value.Line + 1); 732969" />
<Node Id="25003:[16642..16683).16" Label="sb.Append(_startPosition.Value.Line + 1); 732970" />
<Node Id="25003:[16701..16717).10" Label="sb.Append(', '); 732971" />
<Node Id="25003:[16701..16717).12" Label="sb.Append(', '); 732972" />
<Node Id="25003:[16735..16781).13" Label="sb.Append(_startPosition.Value.Character + 1); 732973" />
<Node Id="25003:[16735..16781).16" Label="sb.Append(_startPosition.Value.Character + 1); 732974" />
<Node Id="25003:[16799..16814).10" Label="sb.Append(')'); 732975" />
<Node Id="25003:[16799..16814).12" Label="sb.Append(')'); 732976" />
<Node Id="25003:[16845..16954).4" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 732977" />
<Node Id="25003:[16970..17144).10" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 732978" />
<Node Id="25003:[16970..17144).11" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 732979" />
<Node Id="25003:[17160..17340).10" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 732980" />
<Node Id="25003:[17160..17340).11" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 732981" />
<Node Id="25003:[17356..17482).13" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 732982" />
<Node Id="25003:[17356..17482).14" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 732983" />
<Node Id="25003:[17498..17519).7" Label="return sb.ToString(); 732984" />
<Node Id="25003:[22349..22404).34" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732985" />
<Node Id="25003:[22349..22404).35" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 732986" />
<Node Id="25003:[20852..20923).5" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 732987" />
<Node Id="25003:[19418..19628).6" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 732988" />
<Node Id="25003:[19648..19745).4" Label="if (i $ 0)
                {
                    assertText.AppendLine(',');
                } 732989" />
<Node Id="25003:[19699..19726).1" Label="assertText.AppendLine(','); 732990" />
<Node Id="25003:[19699..19726).3" Label="assertText.AppendLine(','); 732991" />
<Node Id="25003:[19846..19878).4" Label="Indent(assertText, indentDepth); 732992" />
<Node Id="25003:[19846..19878).5" Label="Indent(assertText, indentDepth); 732993" />
<Node Id="25003:[19846..19877).2" Label="Indent(assertText, indentDepth) 732994" />
<Node Id="25003:[22454..22470).3" Label="param Indent(StringBuilder sb) 732995" />
<Node Id="25003:[22472..22481).3" Label="param Indent(int count) 732996" />
<Node Id="25003:[22507..22533).13" Label="sb.Append(' ', 4 * count); 732997" />
<Node Id="25003:[22507..22533).16" Label="sb.Append(' ', 4 * count); 732998" />
<Node Id="25003:[19846..19878).6" Label="Indent(assertText, indentDepth); 732999" />
<Node Id="25003:[19900..19925).4" Label="assertText.Append('// '); 733000" />
<Node Id="25003:[20112..20144).4" Label="Indent(assertText, indentDepth); 733001" />
<Node Id="25003:[20112..20144).5" Label="Indent(assertText, indentDepth); 733002" />
<Node Id="25003:[20112..20143).2" Label="Indent(assertText, indentDepth) 733003" />
<Node Id="25003:[22454..22470).4" Label="param Indent(StringBuilder sb) 733004" />
<Node Id="25003:[22472..22481).4" Label="param Indent(int count) 733005" />
<Node Id="25003:[22507..22533).19" Label="sb.Append(' ', 4 * count); 733006" />
<Node Id="25003:[22507..22533).22" Label="sb.Append(' ', 4 * count); 733007" />
<Node Id="25003:[20112..20144).6" Label="Indent(assertText, indentDepth); 733008" />
<Node Id="25003:[20170..20195).4" Label="assertText.Append('// '); 733009" />
<Node Id="25003:[912..917).10" Label="_code 733010" />
<Node Id="25003:[950..967).10" Label="_isWarningAsError 733011" />
<Node Id="25003:[1000..1013).10" Label="_isSuppressed 733012" />
<Node Id="25003:[1048..1062).10" Label="_squiggledText 733013" />
<Node Id="25003:[1099..1109).10" Label="_arguments 733014" />
<Node Id="25003:[1151..1165).28" Label="_startPosition 733015" />
<Node Id="25003:[1336..1350).10" Label="_errorCodeType 733016" />
<Node Id="25003:[1460..1479).10" Label="_defaultSeverityOpt 733017" />
<Node Id="25003:[1527..1548).10" Label="_effectiveSeverityOpt 733018" />
<Node Id="25003:[5067..5072).4" Label="_code 733019" />
<Node Id="25003:[5444..5476).7" Label="DiagnosticWithInfo dinfo = null; 733020" />
<Node Id="25003:[7118..7245).19" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 733021" />
<Node Id="25003:[20523..20557).2" Label="var diffDescription = description; 733022" />
<Node Id="25003:[10680..10725).10" Label="if (d == null)
                return false; 733023" />
<Node Id="25003:[10815..10891).7" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 733024" />
<Node Id="25003:[10907..10975).7" Label="if (_isSuppressed != d._isSuppressed)
                return false; 733025" />
<Node Id="25003:[10991..11148).4" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 733026" />
<Node Id="25003:[11059..11133).7" Label="if (_squiggledText != d._squiggledText)
                    return false; 733027" />
<Node Id="25003:[11120..11133).1" Label="return false; 733028" />
<Node Id="25003:[10815..10891).9" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 733029" />
<Node Id="25003:[10907..10975).9" Label="if (_isSuppressed != d._isSuppressed)
                return false; 733030" />
<Node Id="25003:[11164..11464).10" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 733031" />
<Node Id="25003:[11164..11464).11" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 733032" />
<Node Id="25003:[11224..11449).10" Label="if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                } 733033" />
<Node Id="25003:[11294..11430).7" Label="if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    } 733034" />
<Node Id="25003:[11480..11903).10" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 733035" />
<Node Id="25003:[11480..11903).11" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 733036" />
<Node Id="25003:[11917..12344).10" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 733037" />
<Node Id="25003:[11917..12344).11" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 733038" />
<Node Id="25003:[12436..12535).7" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 733039" />
<Node Id="25003:[12855..12915).10" Label="if (d._arguments == null)
                    return false; 733040" />
<Node Id="25003:[13514..13693).13" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 733041" />
<Node Id="25003:[20764..20834).7" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 733042" />
<Node Id="25003:[22308..22323).5" Label="param GetDiagnosticDescription(int indentDepth) 733043" />
<Node Id="25003:[22349..22404).37" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 733044" />
<Node Id="25003:[22349..22404).40" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 733045" />
<Node Id="25003:[14837..14866).9" Label="var sb = new StringBuilder(); 733046" />
<Node Id="25003:[14882..14907).13" Label="sb.Append('Diagnostic('); 733047" />
<Node Id="25003:[14882..14907).15" Label="sb.Append('Diagnostic('); 733048" />
<Node Id="25003:[14921..15244).13" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 733049" />
<Node Id="25003:[14921..15244).14" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 733050" />
<Node Id="25003:[15100..15131).9" Label="sb.Append(_errorCodeType.Name); 733051" />
<Node Id="25003:[15100..15131).10" Label="sb.Append(_errorCodeType.Name); 733052" />
<Node Id="25003:[15149..15164).13" Label="sb.Append('.'); 733053" />
<Node Id="25003:[15149..15164).15" Label="sb.Append('.'); 733054" />
<Node Id="25003:[15182..15229).21" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 733055" />
<Node Id="25003:[15182..15229).25" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 733056" />
<Node Id="25003:[15260..15767).13" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 733057" />
<Node Id="25003:[15260..15767).14" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 733058" />
<Node Id="25003:[15320..15717).49" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 733059" />
<Node Id="25003:[15632..15650).13" Label="sb.Append(', \''); 733060" />
<Node Id="25003:[15632..15650).15" Label="sb.Append(', \''); 733061" />
<Node Id="25003:[15672..15698).9" Label="sb.Append(_squiggledText); 733062" />
<Node Id="25003:[15672..15698).10" Label="sb.Append(_squiggledText); 733063" />
<Node Id="25003:[15737..15752).13" Label="sb.Append('''); 733064" />
<Node Id="25003:[15737..15752).15" Label="sb.Append('''); 733065" />
<Node Id="25003:[15783..15883).5" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 733066" />
<Node Id="25003:[15899..15914).13" Label="sb.Append(')'); 733067" />
<Node Id="25003:[15899..15914).15" Label="sb.Append(')'); 733068" />
<Node Id="25003:[15986..16015).13" Label="sb.Append('.WithArguments('); 733069" />
<Node Id="25003:[15986..16015).15" Label="sb.Append('.WithArguments('); 733070" />
<Node Id="25003:[16202..16218).25" Label="sb.Append('\''); 733071" />
<Node Id="25003:[16202..16218).27" Label="sb.Append('\''); 733072" />
<Node Id="25003:[16240..16275).17" Label="sb.Append(argumentStrings.Current); 733073" />
<Node Id="25003:[16240..16275).18" Label="sb.Append(argumentStrings.Current); 733074" />
<Node Id="25003:[16297..16313).25" Label="sb.Append('\''); 733075" />
<Node Id="25003:[16297..16313).27" Label="sb.Append('\''); 733076" />
<Node Id="25003:[16335..16453).33" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 733077" />
<Node Id="25003:[16414..16430).13" Label="sb.Append(', '); 733078" />
<Node Id="25003:[16414..16430).15" Label="sb.Append(', '); 733079" />
<Node Id="25003:[16490..16505).13" Label="sb.Append(')'); 733080" />
<Node Id="25003:[16490..16505).15" Label="sb.Append(')'); 733081" />
<Node Id="25003:[16536..16829).13" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 733082" />
<Node Id="25003:[16536..16829).14" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 733083" />
<Node Id="25003:[16596..16624).13" Label="sb.Append('.WithLocation('); 733084" />
<Node Id="25003:[16596..16624).15" Label="sb.Append('.WithLocation('); 733085" />
<Node Id="25003:[16642..16683).17" Label="sb.Append(_startPosition.Value.Line + 1); 733086" />
<Node Id="25003:[16642..16683).20" Label="sb.Append(_startPosition.Value.Line + 1); 733087" />
<Node Id="25003:[16701..16717).13" Label="sb.Append(', '); 733088" />
<Node Id="25003:[16701..16717).15" Label="sb.Append(', '); 733089" />
<Node Id="25003:[16735..16781).17" Label="sb.Append(_startPosition.Value.Character + 1); 733090" />
<Node Id="25003:[16735..16781).20" Label="sb.Append(_startPosition.Value.Character + 1); 733091" />
<Node Id="25003:[16799..16814).13" Label="sb.Append(')'); 733092" />
<Node Id="25003:[16799..16814).15" Label="sb.Append(')'); 733093" />
<Node Id="25003:[16845..16954).5" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 733094" />
<Node Id="25003:[16970..17144).13" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 733095" />
<Node Id="25003:[16970..17144).14" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 733096" />
<Node Id="25003:[17160..17340).13" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 733097" />
<Node Id="25003:[17160..17340).14" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 733098" />
<Node Id="25003:[17356..17482).17" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 733099" />
<Node Id="25003:[17356..17482).18" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 733100" />
<Node Id="25003:[17498..17519).9" Label="return sb.ToString(); 733101" />
<Node Id="25003:[22349..22404).43" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 733102" />
<Node Id="25003:[22349..22404).44" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 733103" />
<Node Id="25003:[20764..20834).10" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 733104" />
<Node Id="25003:[20852..20923).7" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 733105" />
<Node Id="25003:[22308..22323).6" Label="param GetDiagnosticDescription(int indentDepth) 733106" />
<Node Id="25003:[22349..22404).49" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 733107" />
<Node Id="25003:[15100..15131).11" Label="sb.Append(_errorCodeType.Name); 733108" />
<Node Id="25003:[15100..15131).12" Label="sb.Append(_errorCodeType.Name); 733109" />
<Node Id="25003:[15149..15164).18" Label="sb.Append('.'); 733110" />
<Node Id="25003:[15182..15229).26" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 733111" />
<Node Id="25003:[15182..15229).30" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 733112" />
<Node Id="25003:[15632..15650).18" Label="sb.Append(', \''); 733113" />
<Node Id="25003:[15672..15698).11" Label="sb.Append(_squiggledText); 733114" />
<Node Id="25003:[15672..15698).12" Label="sb.Append(_squiggledText); 733115" />
<Node Id="25003:[15737..15752).18" Label="sb.Append('''); 733116" />
<Node Id="25003:[15899..15914).18" Label="sb.Append(')'); 733117" />
<Node Id="25003:[15986..16015).18" Label="sb.Append('.WithArguments('); 733118" />
<Node Id="25003:[16202..16218).33" Label="sb.Append('\''); 733119" />
<Node Id="25003:[16240..16275).22" Label="sb.Append(argumentStrings.Current); 733120" />
<Node Id="25003:[16297..16313).33" Label="sb.Append('\''); 733121" />
<Node Id="25003:[16414..16430).18" Label="sb.Append(', '); 733122" />
<Node Id="25003:[16490..16505).18" Label="sb.Append(')'); 733123" />
<Node Id="25003:[16596..16624).18" Label="sb.Append('.WithLocation('); 733124" />
<Node Id="25003:[16642..16683).24" Label="sb.Append(_startPosition.Value.Line + 1); 733125" />
<Node Id="25003:[16701..16717).18" Label="sb.Append(', '); 733126" />
<Node Id="25003:[16735..16781).24" Label="sb.Append(_startPosition.Value.Character + 1); 733127" />
<Node Id="25003:[16799..16814).18" Label="sb.Append(')'); 733128" />
<Node Id="25003:[17498..17519).11" Label="return sb.ToString(); 733129" />
<Node Id="25003:[22349..22404).52" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 733130" />
<Node Id="25003:[22349..22404).53" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 733131" />
<Node Id="25003:[20852..20923).10" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 733132" />
<Node Id="25003:[20952..21034).1" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 733133" />
<Node Id="25003:[20952..21034).2" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 733134" />
<Node Id="25003:[20995..21019).1" Label="assertText.AppendLine(); 733135" />
<Node Id="25003:[21050..21081).1" Label="assertText.AppendLine('Diff:'); 733136" />
<Node Id="25003:[21050..21081).3" Label="assertText.AppendLine('Diff:'); 733137" />
<Node Id="25003:[21095..21192).1" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 733138" />
<Node Id="25003:[21095..21192).2" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 733139" />
<Node Id="25012:[3121..3141).1" Label="new[] { '\r', '\n' } 733140" />
<Node Id="25012:[3129..3133).1" Label="'\r' 733141" />
<Node Id="25012:[3135..3139).1" Label="'\n' 733142" />
<Node Id="25012:[3121..3141).4" Label="new[] { '\r', '\n' } 733143" />
<Node Id="25012:[3121..3141).5" Label="new[] { '\r', '\n' } 733144" />
<Node Id="25012:[3102..3141).1" Label="s_lineSplitChars = new[] { '\r', '\n' } 733145" />
<Node Id="25003:[21095..21192).3" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 733146" />
<Node Id="25003:[21095..21192).4" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 733147" />
<Node Id="25003:[21113..21190).1" Label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 733148" />
<Node Id="25012:[2473..2496).1" Label="param DiffReport(IEnumerable$T$ expected) 733149" />
<Node Id="25012:[2498..2519).1" Label="param DiffReport(IEnumerable$T$ actual) 733150" />
<Node Id="25012:[2521..2537).1" Label="param DiffReport(string separator) 733151" />
<Node Id="25012:[2539..2575).1" Label="param DiffReport(IEqualityComparer$T$ comparer = null) 733152" />
<Node Id="25012:[2577..2608).1" Label="param DiffReport(Func$T, string$ toString = null) 733153" />
<Node Id="25012:[2634..2703).1" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 733154" />
<Node Id="25012:[2634..2703).2" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 733155" />
<Node Id="25012:[2644..2662).1" Label="(comparer != null) 733156" />
<Node Id="25012:[1074..1101).1" Label="EqualityComparer$T$.Default 733157" />
<Node Id="25012:[1063..1102).1" Label="new LCS$T$(EqualityComparer$T$.Default) 733158" />
<Node Id="25012:[1194..1223).1" Label="param LCS(IEqualityComparer$T$ comparer) 733159" />
<Node Id="25012:[1183..1293).1" Label="param LCS(this) 733160" />
<Node Id="25012:[4230..4231).1" Label="1 733161" />
<Node Id="25012:[4217..4231).1" Label="DeleteCost = 1 733162" />
<Node Id="25012:[4277..4278).1" Label="1 733163" />
<Node Id="25012:[4264..4278).1" Label="InsertCost = 1 733164" />
<Node Id="25012:[4324..4325).1" Label="2 733165" />
<Node Id="25012:[4311..4325).1" Label="UpdateCost = 2 733166" />
<Node Id="25012:[3676..10647).1" Label="param LongestCommonSubsequence(this) 733167" />
<Node Id="25012:[1157..1166).1" Label="_comparer 733168" />
<Node Id="25012:[1257..1266).1" Label="_comparer 733169" />
<Node Id="25012:[1053..1102).1" Label="Default = new LCS$T$(EqualityComparer$T$.Default) 733170" />
<Node Id="25012:[2717..2783).1" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 733171" />
<Node Id="25012:[2717..2783).3" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 733172" />
<Node Id="25012:[2799..2869).1" Label="IList$T$ expectedList = expected as IList$T$ ?? new List$T$(expected); 733173" />
<Node Id="25012:[2883..2947).1" Label="IList$T$ actualList = actual as IList$T$ ?? new List$T$(actual); 733174" />
<Node Id="25012:[2963..3048).1" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 733175" />
<Node Id="25012:[2963..3048).2" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 733176" />
<Node Id="25012:[2963..3048).3" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 733177" />
<Node Id="25012:[2963..3048).4" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 733178" />
<Node Id="25012:[2993..3046).1" Label="lcs.CalculateDiff(expectedList, actualList, toString) 733179" />
<Node Id="25012:[1574..1592).1" Label="param CalculateDiff(IList$T$ sequenceA) 733180" />
<Node Id="25012:[1594..1612).1" Label="param CalculateDiff(IList$T$ sequenceB) 733181" />
<Node Id="25012:[1614..1638).1" Label="param CalculateDiff(Func$T, string$ toString) 733182" />
<Node Id="25012:[1533..2415).1" Label="param CalculateDiff(this) 733183" />
<Node Id="25012:[1672..2400).1" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 733184" />
<Node Id="25012:[1672..2400).2" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 733185" />
<Node Id="25012:[1672..2400).3" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 733186" />
<Node Id="25012:[1672..2400).4" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 733187" />
<Node Id="25012:[1693..1757).1" Label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 733188" />
<Node Id="25012:[5394..5413).1" Label="param GetEdits(TSequence sequenceA) 733189" />
<Node Id="25012:[5415..5426).1" Label="param GetEdits(int lengthA) 733190" />
<Node Id="25012:[5428..5447).1" Label="param GetEdits(TSequence sequenceB) 733191" />
<Node Id="25012:[5449..5460).1" Label="param GetEdits(int lengthB) 733192" />
<Node Id="25012:[5357..6686).1" Label="param GetEdits(this) 733193" />
<Node Id="25012:[5494..5563).1" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 733194" />
<Node Id="25012:[5494..5563).2" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 733195" />
<Node Id="25012:[5494..5563).3" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 733196" />
<Node Id="25012:[5494..5563).4" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 733197" />
<Node Id="25012:[5505..5562).1" Label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 733198" />
<Node Id="25012:[9402..9421).1" Label="param ComputeCostMatrix(TSequence sequenceA) 733199" />
<Node Id="25012:[9423..9434).1" Label="param ComputeCostMatrix(int lengthA) 733200" />
<Node Id="25012:[9436..9455).1" Label="param ComputeCostMatrix(TSequence sequenceB) 733201" />
<Node Id="25012:[9457..9468).1" Label="param ComputeCostMatrix(int lengthB) 733202" />
<Node Id="25012:[9369..10636).1" Label="param ComputeCostMatrix(this) 733203" />
<Node Id="25012:[9502..9523).1" Label="var la = lengthA + 1; 733204" />
<Node Id="25012:[9502..9523).2" Label="var la = lengthA + 1; 733205" />
<Node Id="25012:[9541..9562).1" Label="var lb = lengthB + 1; 733206" />
<Node Id="25012:[9541..9562).2" Label="var lb = lengthB + 1; 733207" />
<Node Id="25012:[9740..9764).1" Label="var d = new int[la, lb]; 733208" />
<Node Id="25012:[9784..9796).1" Label="d[0, 0] = 0; 733209" />
<Node Id="25012:[9784..9791).1" Label="d[0, 0] 733210" />
<Node Id="25012:[9814..9943).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 733211" />
<Node Id="25012:[9814..9943).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 733212" />
<Node Id="25012:[9889..9924).1" Label="d[i, 0] = d[i - 1, 0] + DeleteCost; 733213" />
<Node Id="25012:[9889..9924).5" Label="d[i, 0] = d[i - 1, 0] + DeleteCost; 733214" />
<Node Id="25012:[9889..9896).1" Label="d[i, 0] 733215" />
<Node Id="25012:[9963..10092).1" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 733216" />
<Node Id="25012:[9963..10092).3" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 733217" />
<Node Id="25012:[10038..10073).1" Label="d[0, j] = d[0, j - 1] + InsertCost; 733218" />
<Node Id="25012:[10038..10073).5" Label="d[0, j] = d[0, j - 1] + InsertCost; 733219" />
<Node Id="25012:[10038..10045).1" Label="d[0, j] 733220" />
<Node Id="25012:[10112..10592).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 733221" />
<Node Id="25012:[10112..10592).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 733222" />
<Node Id="25012:[10187..10573).1" Label="for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    } 733223" />
<Node Id="25012:[10187..10573).3" Label="for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    } 733224" />
<Node Id="25012:[10270..10363).1" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 733225" />
<Node Id="25012:[10270..10363).5" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 733226" />
<Node Id="25012:[10270..10363).6" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 733227" />
<Node Id="25012:[10270..10363).10" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 733228" />
<Node Id="25012:[10298..10344).1" Label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 733229" />
<Node Id="25012:[1344..1362).1" Label="param ItemsEqual(IList$T$ sequenceA) 733230" />
<Node Id="25012:[1364..1374).1" Label="param ItemsEqual(int indexA) 733231" />
<Node Id="25012:[1376..1394).1" Label="param ItemsEqual(IList$T$ sequenceB) 733232" />
<Node Id="25012:[1396..1406).1" Label="param ItemsEqual(int indexB) 733233" />
<Node Id="25012:[1309..1517).1" Label="param ItemsEqual(this) 733234" />
<Node Id="25012:[1440..1502).1" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 733235" />
<Node Id="25012:[1440..1502).3" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 733236" />
<Node Id="25012:[1440..1502).5" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 733237" />
<Node Id="25012:[10270..10363).17" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 733238" />
<Node Id="25012:[10389..10423).1" Label="int m2 = d[i - 1, j] + DeleteCost; 733239" />
<Node Id="25012:[10389..10423).3" Label="int m2 = d[i - 1, j] + DeleteCost; 733240" />
<Node Id="25012:[10449..10483).1" Label="int m3 = d[i, j - 1] + InsertCost; 733241" />
<Node Id="25012:[10449..10483).3" Label="int m3 = d[i, j - 1] + InsertCost; 733242" />
<Node Id="25012:[10509..10550).1" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 733243" />
<Node Id="25012:[10509..10550).2" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 733244" />
<Node Id="25012:[10509..10550).3" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 733245" />
<Node Id="25012:[10509..10550).5" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 733246" />
<Node Id="25012:[10509..10550).6" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 733247" />
<Node Id="25012:[10509..10516).1" Label="d[i, j] 733248" />
<Node Id="25012:[10612..10621).1" Label="return d; 733249" />
<Node Id="25012:[5581..5597).1" Label="int i = lengthA; 733250" />
<Node Id="25012:[5615..5631).1" Label="int j = lengthB; 733251" />
<Node Id="25012:[5651..6341).1" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 733252" />
<Node Id="25012:[5651..6341).2" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 733253" />
<Node Id="25012:[5651..6341).4" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 733254" />
<Node Id="25012:[5651..6341).5" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 733255" />
<Node Id="25012:[5716..6322).1" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 733256" />
<Node Id="25012:[5716..6322).2" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 733257" />
<Node Id="25012:[5716..6322).4" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 733258" />
<Node Id="25012:[5931..6322).1" Label="if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 733259" />
<Node Id="25012:[5931..6322).2" Label="if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 733260" />
<Node Id="25012:[6194..6198).1" Label="i--; 733261" />
<Node Id="25012:[6224..6228).1" Label="j--; 733262" />
<Node Id="25012:[6254..6299).1" Label="yield return new Edit(EditKind.Update, i, j); 733263" />
<Node Id="25012:[6254..6299).2" Label="yield return new Edit(EditKind.Update, i, j); 733264" />
<Node Id="25012:[6254..6299).3" Label="yield return new Edit(EditKind.Update, i, j); 733265" />
<Node Id="25012:[6254..6299).4" Label="yield return new Edit(EditKind.Update, i, j); 733266" />
<Node Id="25012:[6267..6298).1" Label="new Edit(EditKind.Update, i, j) 733267" />
<Node Id="25012:[3967..3980).1" Label="param Edit(EditKind kind) 733268" />
<Node Id="25012:[3982..3992).1" Label="param Edit(int indexA) 733269" />
<Node Id="25012:[3994..4004).1" Label="param Edit(int indexB) 733270" />
<Node Id="25012:[3953..4168).1" Label="param Edit(this) 733271" />
<Node Id="25012:[4046..4055).1" Label="this.Kind 733272" />
<Node Id="25012:[4085..4096).1" Label="this.IndexA 733273" />
<Node Id="25012:[4128..4139).1" Label="this.IndexB 733274" />
<Node Id="25012:[5651..6341).11" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 733275" />
<Node Id="25012:[6254..6299).7" Label="yield return new Edit(EditKind.Update, i, j); 733276" />
<Node Id="25012:[6254..6299).8" Label="yield return new Edit(EditKind.Update, i, j); 733277" />
<Node Id="25012:[6267..6298).2" Label="new Edit(EditKind.Update, i, j) 733278" />
<Node Id="25012:[3967..3980).2" Label="param Edit(EditKind kind) 733279" />
<Node Id="25012:[3982..3992).2" Label="param Edit(int indexA) 733280" />
<Node Id="25012:[3994..4004).2" Label="param Edit(int indexB) 733281" />
<Node Id="25012:[3953..4168).2" Label="param Edit(this) 733282" />
<Node Id="25012:[4046..4055).2" Label="this.Kind 733283" />
<Node Id="25012:[4085..4096).2" Label="this.IndexA 733284" />
<Node Id="25012:[4128..4139).2" Label="this.IndexB 733285" />
<Node Id="25012:[6361..6506).1" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 733286" />
<Node Id="25012:[6361..6506).2" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 733287" />
<Node Id="25012:[6526..6671).1" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 733288" />
<Node Id="25012:[6526..6671).2" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 733289" />
<Node Id="25012:[1672..2400).7" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 733290" />
<Node Id="25012:[1809..2381).1" Label="switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    } 733291" />
<Node Id="25012:[2267..2322).1" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 733292" />
<Node Id="25012:[2267..2322).3" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 733293" />
<Node Id="25012:[2267..2322).5" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 733294" />
<Node Id="25012:[2963..3048).7" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 733295" />
<Node Id="25003:[21095..21192).10" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 733296" />
<Node Id="25003:[21208..21226).1" Label="actualText.Free(); 733297" />
<Node Id="25003:[21240..21260).1" Label="expectedText.Free(); 733298" />
<Node Id="25003:[21276..21305).1" Label="return assertText.ToString(); 733299" />
<Node Id="25002:[2401..2451).3" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 733300" />
<Node Id="25002:[4446..4475).3" Label="diagnostics.Verify(expected); 733301" />
<Node Id="25002:[4489..4523).1" Label="VerifyAssemblyIds(c, diagnostics); 733302" />
<Node Id="25002:[4489..4523).2" Label="VerifyAssemblyIds(c, diagnostics); 733303" />
<Node Id="25002:[4489..4522).1" Label="VerifyAssemblyIds(c, diagnostics) 733304" />
<Node Id="25002:[4637..4651).1" Label="param VerifyAssemblyIds(TCompilation c) 733305" />
<Node Id="25002:[4653..4691).1" Label="param VerifyAssemblyIds(ImmutableArray$Diagnostic$ diagnostics) 733306" />
<Node Id="25002:[4750..5836).1" Label="foreach (var diagnostic in diagnostics)
            {
                // If this is a diagnostic about a missing assembly, make sure that we can get back
                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about
                // a missing assembly, make sure we get no results back.
                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                }
            } 733307" />
<Node Id="25002:[5097..5821).1" Label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                } 733308" />
<Node Id="25002:[5097..5821).2" Label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                } 733309" />
<Node Id="25002:[5675..5741).1" Label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 733310" />
<Node Id="25002:[5763..5802).1" Label="CustomAssert.True(assemblyIds.IsEmpty); 733311" />
<Node Id="25002:[5763..5802).3" Label="CustomAssert.True(assemblyIds.IsEmpty); 733312" />
<Node Id="25002:[4489..4523).3" Label="VerifyAssemblyIds(c, diagnostics); 733313" />
<Node Id="25002:[4539..4548).1" Label="return c; 733314" />
</Nodes>
<Links>
<Link Source="25014:[390..448).1" Target="EXTERNAL" />
<Link Source="25014:[390..448).1" Target="25014:[387..448).1" />
<Link Source="28001:[588..156578).1" Target="25014:[387..448).1" />
<Link Source="21002:[772..793).1" Target="21002:[790..793).1" />
<Link Source="21002:[825..848).1" Target="21002:[845..848).1" />
<Link Source="21002:[3098..25375).1" Target="21002:[3243..25375).1" />
<Link Source="21002:[678..25421).1" Target="28001:[588..156578).1" />
<Link Source="21003:[1308..2835).1" Target="21003:[1338..2835).1" />
<Link Source="21003:[2871..3440).1" Target="21003:[2908..3440).1" />
<Link Source="21003:[3476..3915).1" Target="21003:[3516..3915).1" />
<Link Source="21003:[4192..4448).1" Target="21003:[4223..4448).1" />
<Link Source="21003:[4484..4746).1" Target="21003:[4518..4746).1" />
<Link Source="21003:[4782..5071).1" Target="21003:[4813..5071).1" />
<Link Source="21003:[5107..5397).1" Target="21003:[5142..5397).1" />
<Link Source="21003:[5433..5718).1" Target="21003:[5462..5718).1" />
<Link Source="21003:[5754..6038).1" Target="21003:[5787..6038).1" />
<Link Source="21003:[6074..6460).1" Target="21003:[6109..6460).1" />
<Link Source="21003:[6496..6920).1" Target="21003:[6535..6920).1" />
<Link Source="21003:[6956..7250).1" Target="21003:[6993..7250).1" />
<Link Source="21003:[7286..7557).1" Target="21003:[7321..7557).1" />
<Link Source="21003:[7593..7980).1" Target="21003:[7631..7980).1" />
<Link Source="21003:[8016..8155).1" Target="21003:[8047..8155).1" />
<Link Source="21003:[8191..8359).1" Target="21003:[8220..8359).1" />
<Link Source="21003:[8395..20279).1" Target="21003:[8415..20279).1" />
<Link Source="21003:[20315..20617).1" Target="21003:[20353..20617).1" />
<Link Source="21003:[20653..21473).1" Target="21003:[20689..21473).1" />
<Link Source="25004:[2227..2317).1" Target="EXTERNAL" />
<Link Source="25004:[2332..2368).1" Target="EXTERNAL" />
<Link Source="25004:[2183..2369).1" Target="25004:[2227..2317).1" />
<Link Source="25004:[2183..2369).1" Target="25004:[2332..2368).1" />
<Link Source="25004:[2183..2369).1" Target="EXTERNAL" />
<Link Source="25004:[2155..2369).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2602..2696).1" Target="EXTERNAL" />
<Link Source="25004:[2711..2747).1" Target="EXTERNAL" />
<Link Source="25004:[2558..2748).1" Target="25004:[2602..2696).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2711..2747).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2531..2748).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[2914..2947).1" Target="EXTERNAL" />
<Link Source="25004:[3094..3171).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[3094..3171).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[2894..3172).1" Target="25004:[3077..3172).1" />
<Link Source="25004:[5182..5218).1" Target="EXTERNAL" />
<Link Source="25004:[3446..5219).1" Target="25004:[3490..5167).1" />
<Link Source="25004:[3446..5219).1" Target="25004:[5182..5218).1" />
<Link Source="25004:[3432..5219).1" Target="25004:[3446..5219).1" />
<Link Source="25004:[5576..5645).1" Target="EXTERNAL" />
<Link Source="25004:[5660..5696).1" Target="EXTERNAL" />
<Link Source="25004:[5532..5697).1" Target="25004:[5576..5645).1" />
<Link Source="25004:[5532..5697).1" Target="25004:[5660..5696).1" />
<Link Source="25004:[5532..5697).1" Target="EXTERNAL" />
<Link Source="25004:[5508..5697).1" Target="25004:[5532..5697).1" />
<Link Source="25004:[6321..6439).1" Target="EXTERNAL" />
<Link Source="25004:[6458..6494).1" Target="EXTERNAL" />
<Link Source="25004:[6275..6495).1" Target="25004:[6321..6439).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[6458..6494).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[6244..6495).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6714..6838).1" Target="EXTERNAL" />
<Link Source="25004:[6853..6889).1" Target="EXTERNAL" />
<Link Source="25004:[6672..6890).1" Target="25004:[6714..6838).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6853..6889).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6637..6890).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7130..7249).1" Target="EXTERNAL" />
<Link Source="25004:[7264..7300).1" Target="EXTERNAL" />
<Link Source="25004:[7088..7301).1" Target="25004:[7130..7249).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[7264..7300).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7066..7301).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[7532..7667).1" Target="EXTERNAL" />
<Link Source="25004:[7682..7718).1" Target="EXTERNAL" />
<Link Source="25004:[7490..7719).1" Target="25004:[7532..7667).1" />
<Link Source="25004:[7490..7719).1" Target="25004:[7682..7718).1" />
<Link Source="25004:[7490..7719).1" Target="EXTERNAL" />
<Link Source="25004:[7464..7719).1" Target="25004:[7490..7719).1" />
<Link Source="25004:[7940..8064).1" Target="EXTERNAL" />
<Link Source="25004:[8079..8115).1" Target="EXTERNAL" />
<Link Source="25004:[7898..8116).1" Target="25004:[7940..8064).1" />
<Link Source="25004:[7898..8116).1" Target="25004:[8079..8115).1" />
<Link Source="25004:[7898..8116).1" Target="EXTERNAL" />
<Link Source="25004:[7877..8116).1" Target="25004:[7898..8116).1" />
<Link Source="25004:[8324..8442).1" Target="EXTERNAL" />
<Link Source="25004:[8457..8493).1" Target="EXTERNAL" />
<Link Source="25004:[8282..8494).1" Target="25004:[8324..8442).1" />
<Link Source="25004:[8282..8494).1" Target="25004:[8457..8493).1" />
<Link Source="25004:[8282..8494).1" Target="EXTERNAL" />
<Link Source="25004:[8264..8494).1" Target="25004:[8282..8494).1" />
<Link Source="25004:[8694..8807).1" Target="EXTERNAL" />
<Link Source="25004:[8822..8858).1" Target="EXTERNAL" />
<Link Source="25004:[8652..8859).1" Target="25004:[8694..8807).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[8822..8858).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[8636..8859).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[9063..9214).1" Target="EXTERNAL" />
<Link Source="25004:[9229..9265).1" Target="EXTERNAL" />
<Link Source="25004:[9021..9266).1" Target="25004:[9063..9214).1" />
<Link Source="25004:[9021..9266).1" Target="25004:[9229..9265).1" />
<Link Source="25004:[9021..9266).1" Target="EXTERNAL" />
<Link Source="25004:[8997..9266).1" Target="25004:[9021..9266).1" />
<Link Source="25004:[10404..10440).1" Target="EXTERNAL" />
<Link Source="25004:[9436..10441).1" Target="25004:[9478..10389).1" />
<Link Source="25004:[9436..10441).1" Target="25004:[10404..10440).1" />
<Link Source="25004:[9420..10441).1" Target="25004:[9436..10441).1" />
<Link Source="25004:[10811..10967).1" Target="EXTERNAL" />
<Link Source="25004:[10982..11018).1" Target="EXTERNAL" />
<Link Source="25004:[10769..11019).1" Target="25004:[10811..10967).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[10982..11018).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[10749..11019).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[11415..11589).1" Target="EXTERNAL" />
<Link Source="25004:[11604..11640).1" Target="EXTERNAL" />
<Link Source="25004:[11373..11641).1" Target="25004:[11415..11589).1" />
<Link Source="25004:[11373..11641).1" Target="25004:[11604..11640).1" />
<Link Source="25004:[11373..11641).1" Target="EXTERNAL" />
<Link Source="25004:[11345..11641).1" Target="25004:[11373..11641).1" />
<Link Source="25004:[12432..12560).1" Target="EXTERNAL" />
<Link Source="25004:[12575..12611).1" Target="EXTERNAL" />
<Link Source="25004:[12390..12612).1" Target="25004:[12432..12560).1" />
<Link Source="25004:[12390..12612).1" Target="25004:[12575..12611).1" />
<Link Source="25004:[12390..12612).1" Target="EXTERNAL" />
<Link Source="25004:[12369..12612).1" Target="25004:[12390..12612).1" />
<Link Source="25004:[12815..12944).1" Target="EXTERNAL" />
<Link Source="25004:[12959..12995).1" Target="EXTERNAL" />
<Link Source="25004:[12773..12996).1" Target="25004:[12815..12944).1" />
<Link Source="25004:[12773..12996).1" Target="25004:[12959..12995).1" />
<Link Source="25004:[12773..12996).1" Target="EXTERNAL" />
<Link Source="25004:[12760..12996).1" Target="25004:[12773..12996).1" />
<Link Source="25004:[13204..13343).1" Target="EXTERNAL" />
<Link Source="25004:[13358..13394).1" Target="EXTERNAL" />
<Link Source="25004:[13162..13395).1" Target="25004:[13204..13343).1" />
<Link Source="25004:[13162..13395).1" Target="25004:[13358..13394).1" />
<Link Source="25004:[13162..13395).1" Target="EXTERNAL" />
<Link Source="25004:[13138..13395).1" Target="25004:[13162..13395).1" />
<Link Source="25004:[13621..13796).1" Target="EXTERNAL" />
<Link Source="25004:[13811..13847).1" Target="EXTERNAL" />
<Link Source="25004:[13579..13848).1" Target="25004:[13621..13796).1" />
<Link Source="25004:[13579..13848).1" Target="25004:[13811..13847).1" />
<Link Source="25004:[13579..13848).1" Target="EXTERNAL" />
<Link Source="25004:[13551..13848).1" Target="25004:[13579..13848).1" />
<Link Source="25004:[14066..14175).1" Target="EXTERNAL" />
<Link Source="25004:[14190..14226).1" Target="EXTERNAL" />
<Link Source="25004:[14024..14227).1" Target="25004:[14066..14175).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[14190..14226).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[14010..14227).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14421..14531).1" Target="EXTERNAL" />
<Link Source="25004:[14546..14582).1" Target="EXTERNAL" />
<Link Source="25004:[14379..14583).1" Target="25004:[14421..14531).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14546..14582).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14361..14583).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14798..14913).1" Target="EXTERNAL" />
<Link Source="25004:[14928..14964).1" Target="EXTERNAL" />
<Link Source="25004:[14756..14965).1" Target="25004:[14798..14913).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14928..14964).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14725..14965).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15193..15301).1" Target="EXTERNAL" />
<Link Source="25004:[15316..15352).1" Target="EXTERNAL" />
<Link Source="25004:[15151..15353).1" Target="25004:[15193..15301).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[15316..15352).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15133..15353).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[15554..15670).1" Target="EXTERNAL" />
<Link Source="25004:[15685..15721).1" Target="EXTERNAL" />
<Link Source="25004:[15512..15722).1" Target="25004:[15554..15670).1" />
<Link Source="25004:[15512..15722).1" Target="25004:[15685..15721).1" />
<Link Source="25004:[15512..15722).1" Target="EXTERNAL" />
<Link Source="25004:[15495..15722).1" Target="25004:[15512..15722).1" />
<Link Source="25004:[15925..16050).1" Target="EXTERNAL" />
<Link Source="25004:[16065..16101).1" Target="EXTERNAL" />
<Link Source="25004:[15883..16102).1" Target="25004:[15925..16050).1" />
<Link Source="25004:[15883..16102).1" Target="25004:[16065..16101).1" />
<Link Source="25004:[15883..16102).1" Target="EXTERNAL" />
<Link Source="25004:[15862..16102).1" Target="25004:[15883..16102).1" />
<Link Source="25004:[16314..16416).1" Target="EXTERNAL" />
<Link Source="25004:[16431..16467).1" Target="EXTERNAL" />
<Link Source="25004:[16272..16468).1" Target="25004:[16314..16416).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[16431..16467).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[16250..16468).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[16687..16800).1" Target="EXTERNAL" />
<Link Source="25004:[16815..16851).1" Target="EXTERNAL" />
<Link Source="25004:[16645..16852).1" Target="25004:[16687..16800).1" />
<Link Source="25004:[16645..16852).1" Target="25004:[16815..16851).1" />
<Link Source="25004:[16645..16852).1" Target="EXTERNAL" />
<Link Source="25004:[16618..16852).1" Target="25004:[16645..16852).1" />
<Link Source="25004:[17083..17200).1" Target="EXTERNAL" />
<Link Source="25004:[17215..17251).1" Target="EXTERNAL" />
<Link Source="25004:[17041..17252).1" Target="25004:[17083..17200).1" />
<Link Source="25004:[17041..17252).1" Target="25004:[17215..17251).1" />
<Link Source="25004:[17041..17252).1" Target="EXTERNAL" />
<Link Source="25004:[17012..17252).1" Target="25004:[17041..17252).1" />
<Link Source="25004:[17497..17625).1" Target="EXTERNAL" />
<Link Source="25004:[17640..17676).1" Target="EXTERNAL" />
<Link Source="25004:[17455..17677).1" Target="25004:[17497..17625).1" />
<Link Source="25004:[17455..17677).1" Target="25004:[17640..17676).1" />
<Link Source="25004:[17455..17677).1" Target="EXTERNAL" />
<Link Source="25004:[17421..17677).1" Target="25004:[17455..17677).1" />
<Link Source="25004:[17911..18059).1" Target="EXTERNAL" />
<Link Source="25004:[18074..18110).1" Target="EXTERNAL" />
<Link Source="25004:[17869..18111).1" Target="25004:[17911..18059).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[18074..18110).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[17850..18111).1" Target="25004:[17869..18111).1" />
<Link Source="25004:[18321..18481).1" Target="EXTERNAL" />
<Link Source="25004:[18496..18532).1" Target="EXTERNAL" />
<Link Source="25004:[18279..18533).1" Target="25004:[18321..18481).1" />
<Link Source="25004:[18279..18533).1" Target="25004:[18496..18532).1" />
<Link Source="25004:[18279..18533).1" Target="EXTERNAL" />
<Link Source="25004:[18255..18533).1" Target="25004:[18279..18533).1" />
<Link Source="25004:[18754..18880).1" Target="EXTERNAL" />
<Link Source="25004:[18895..18931).1" Target="EXTERNAL" />
<Link Source="25004:[18712..18932).1" Target="25004:[18754..18880).1" />
<Link Source="25004:[18712..18932).1" Target="25004:[18895..18931).1" />
<Link Source="25004:[18712..18932).1" Target="EXTERNAL" />
<Link Source="25004:[18687..18932).1" Target="25004:[18712..18932).1" />
<Link Source="25004:[19120..19147).1" Target="25004:[19130..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19120..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19094..19148).1" />
<Link Source="25004:[19081..19148).1" Target="25004:[19094..19148).5" />
<Link Source="25004:[10673..10688).1" Target="EXTERNAL" />
<Link Source="25004:[10673..10688).1" Target="21003:[51329..51357).1" />
<Link Source="21003:[51307..51358).1" Target="25004:[10673..10688).1" />
<Link Source="21003:[51307..51358).1" Target="EXTERNAL" />
<Link Source="21003:[51292..51358).1" Target="21003:[51307..51358).1" />
<Link Source="21003:[56524..56550).1" Target="21003:[56538..56550).1" />
<Link Source="21003:[56584..56609).1" Target="21003:[56596..56609).1" />
<Link Source="21003:[92381..99056).1" Target="21003:[92394..99056).1" />
<Link Source="21003:[101743..102290).1" Target="21003:[101764..102290).1" />
<Link Source="21003:[1215..102298).1" Target="21002:[678..25421).1" />
<Link Source="25015:[917..26825).1" Target="21003:[1215..102298).1" />
<Link Source="25004:[926..968).1" Target="25015:[917..26825).1" />
<Link Source="25004:[908..913).1" Target="25004:[926..968).1" />
<Link Source="25004:[908..913).1" Target="25015:[917..26825).1" />
<Link Source="25014:[387..448).372" Target="25014:[387..448).1" />
<Link Source="25014:[387..448).372" Target="25014:[390..448).1" />
<Link Source="25014:[387..448).372" Target="25004:[908..913).1" />
<Link Source="28001:[39812..41079).1" Target="25014:[387..448).1" />
<Link Source="28001:[40132..40347).1" Target="25014:[387..448).1" />
<Link Source="28001:[40361..40412).1" Target="28001:[40132..40347).1" />
<Link Source="28001:[40361..40412).1" Target="25014:[387..448).1" />
<Link Source="28001:[40398..40410).1" Target="25014:[387..448).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[40361..40412).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[40398..40410).1" />
<Link Source="21004:[2290..2296).1" Target="21004:[2251..2264).1" />
<Link Source="21004:[2290..2296).1" Target="28001:[40398..40410).1" />
<Link Source="21004:[2269..2297).1" Target="28001:[40398..40410).1" />
<Link Source="21004:[839..851).1" Target="21004:[2290..2296).1" />
<Link Source="21004:[839..851).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[814..902).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[877..882).1" Target="21004:[839..851).1" />
<Link Source="21004:[877..882).1" Target="21004:[814..902).1" />
<Link Source="21004:[877..882).1" Target="21004:[2269..2297).1" />
<Link Source="28001:[40361..40412).2" Target="21004:[2269..2297).1" />
<Link Source="28001:[40361..40412).2" Target="25014:[387..448).1" />
<Link Source="28001:[40361..40412).4" Target="25014:[387..448).1" />
<Link Source="28001:[40380..40411).1" Target="25014:[387..448).1" />
<Link Source="21003:[44736..44759).1" Target="28001:[40361..40412).2" />
<Link Source="21003:[44736..44759).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[44774..44822).1" Target="28001:[40361..40412).4" />
<Link Source="21003:[44774..44822).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[44837..44876).1" Target="28001:[40361..40412).4" />
<Link Source="21003:[44837..44876).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[44891..44929).1" Target="28001:[40361..40412).4" />
<Link Source="21003:[44891..44929).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[44944..45002).1" Target="28001:[40361..40412).4" />
<Link Source="21003:[44944..45002).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45017..45041).1" Target="28001:[40361..40412).4" />
<Link Source="21003:[45017..45041).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45056..45082).1" Target="28001:[40361..40412).4" />
<Link Source="21003:[45056..45082).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45097..45128).1" Target="28001:[40361..40412).4" />
<Link Source="21003:[45097..45128).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45156..45162).1" Target="21003:[44736..44759).1" />
<Link Source="21003:[45156..45162).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45198..45213).1" Target="21003:[44944..45002).1" />
<Link Source="21003:[45198..45213).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45215..45225).1" Target="21003:[44774..44822).1" />
<Link Source="21003:[45215..45225).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45164..45226).1" Target="28001:[40380..40411).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45198..45213).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45215..45225).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9697..9732).1" Target="25005:[9600..9618).1" />
<Link Source="25005:[9697..9732).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9714..9731).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9697..9732).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[7569..7600).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[8889..8907).1" Target="25005:[7605..9525).1" />
<Link Source="25005:[6208..6241).1" Target="EXTERNAL" />
<Link Source="25005:[6208..6241).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[6270..6298).1" Target="25005:[6208..6241).1" />
<Link Source="25005:[4543..4693).1" Target="25005:[6270..6298).1" />
<Link Source="25005:[4648..4670).1" Target="25005:[6270..6298).1" />
<Link Source="25004:[12011..12051).1" Target="EXTERNAL" />
<Link Source="25004:[12011..12051).1" Target="25005:[4648..4670).1" />
<Link Source="25005:[4543..4693).7" Target="25004:[12011..12051).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[4543..4693).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[6270..6298).1" />
<Link Source="25005:[6208..6298).1" Target="25005:[4543..4693).7" />
<Link Source="25005:[6208..6298).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[9746..9845).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9620..9671).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9746..9845).1" />
<Link Source="25005:[9746..9845).2" Target="21003:[45164..45226).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[6208..6298).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[9746..9845).2" />
<Link Source="21003:[45228..45235).1" Target="21003:[44837..44876).1" />
<Link Source="21003:[45228..45235).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45237..45249).1" Target="21003:[44891..44929).1" />
<Link Source="21003:[45237..45249).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45251..45263).1" Target="21003:[45017..45041).1" />
<Link Source="21003:[45251..45263).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45265..45279).1" Target="21003:[45056..45082).1" />
<Link Source="21003:[45265..45279).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45281..45299).1" Target="21003:[45097..45128).1" />
<Link Source="21003:[45281..45299).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45133..45300).1" Target="28001:[40380..40411).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45156..45162).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45420..45468).1" Target="25005:[9812..9830).1" />
<Link Source="21003:[45420..45468).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45228..45235).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45237..45249).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45251..45263).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45265..45279).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45281..45299).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45382..45405).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45420..45468).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45483..45522).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45537..45575).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45590..45614).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45629..45655).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45670..45701).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45842..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45842..45846).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45706..45847).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45728..45734).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45736..45746).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45748..45755).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45757..45769).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45771..45783).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45785..45799).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45801..45819).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45821..45846).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[46070..46101).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[46150..46171).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46298..46349).1" Target="21003:[45706..45847).1" />
<Link Source="21004:[949..980).1" Target="21003:[46280..46350).1" />
<Link Source="21004:[949..980).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[982..1008).1" Target="21003:[46280..46350).2" />
<Link Source="21004:[982..1008).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[914..2190).1" Target="21003:[45929..45952).1" />
<Link Source="21004:[914..2190).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[914..2190).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[877..882).1" />
<Link Source="21004:[1034..2179).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1122..1208).1" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[982..1008).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[949..980).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[1034..2179).1" />
<Link Source="21004:[1137..1205).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34091..34111).1" Target="21004:[1122..1208).3" />
<Link Source="21003:[34091..34111).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34113..34146).1" Target="21004:[1122..1208).4" />
<Link Source="21003:[34113..34146).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34113..34146).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34198..34304).1" />
<Link Source="21003:[34198..34304).2" Target="21004:[1137..1205).1" />
<Link Source="21010:[590..618).1" Target="EXTERNAL" />
<Link Source="21010:[620..662).1" Target="EXTERNAL" />
<Link Source="21010:[567..663).5" Target="21010:[590..618).1" />
<Link Source="21010:[567..663).5" Target="21010:[620..662).1" />
<Link Source="21010:[567..663).5" Target="21010:[567..663).1" />
<Link Source="21010:[557..663).1" Target="21010:[567..663).5" />
<Link Source="21010:[742..763).1" Target="EXTERNAL" />
<Link Source="21010:[725..764).1" Target="21010:[557..663).1" />
<Link Source="21010:[725..764).1" Target="21010:[567..663).5" />
<Link Source="21010:[725..764).1" Target="21010:[742..763).1" />
<Link Source="21010:[716..764).1" Target="21010:[725..764).1" />
<Link Source="21010:[856..879).1" Target="EXTERNAL" />
<Link Source="21010:[828..880).1" Target="21010:[557..663).1" />
<Link Source="21010:[828..880).1" Target="21010:[567..663).5" />
<Link Source="21010:[828..880).1" Target="21010:[856..879).1" />
<Link Source="21010:[817..880).1" Target="21010:[828..880).1" />
<Link Source="21010:[972..995).1" Target="EXTERNAL" />
<Link Source="21010:[944..996).1" Target="21010:[557..663).1" />
<Link Source="21010:[944..996).1" Target="21010:[567..663).5" />
<Link Source="21010:[944..996).1" Target="21010:[972..995).1" />
<Link Source="21010:[933..996).1" Target="21010:[944..996).1" />
<Link Source="21010:[1090..1115).1" Target="EXTERNAL" />
<Link Source="21010:[1062..1116).1" Target="21010:[557..663).1" />
<Link Source="21010:[1062..1116).1" Target="21010:[567..663).5" />
<Link Source="21010:[1062..1116).1" Target="21010:[1090..1115).1" />
<Link Source="21010:[1049..1116).1" Target="21010:[1062..1116).1" />
<Link Source="21010:[1210..1235).1" Target="EXTERNAL" />
<Link Source="21010:[1182..1236).1" Target="21010:[557..663).1" />
<Link Source="21010:[1182..1236).1" Target="21010:[567..663).5" />
<Link Source="21010:[1182..1236).1" Target="21010:[1210..1235).1" />
<Link Source="21010:[1169..1236).1" Target="21010:[1182..1236).1" />
<Link Source="21010:[1330..1355).1" Target="EXTERNAL" />
<Link Source="21010:[1302..1356).1" Target="21010:[557..663).1" />
<Link Source="21010:[1302..1356).1" Target="21010:[567..663).5" />
<Link Source="21010:[1302..1356).1" Target="21010:[1330..1355).1" />
<Link Source="21010:[1289..1356).1" Target="21010:[1302..1356).1" />
<Link Source="21010:[1454..1477).1" Target="EXTERNAL" />
<Link Source="21010:[1426..1478).1" Target="21010:[557..663).1" />
<Link Source="21010:[1426..1478).1" Target="21010:[567..663).5" />
<Link Source="21010:[1426..1478).1" Target="21010:[1454..1477).1" />
<Link Source="21010:[1409..1478).1" Target="21010:[1426..1478).1" />
<Link Source="21010:[1576..1599).1" Target="EXTERNAL" />
<Link Source="21010:[1548..1600).1" Target="21010:[557..663).1" />
<Link Source="21010:[1548..1600).1" Target="21010:[567..663).5" />
<Link Source="21010:[1548..1600).1" Target="21010:[1576..1599).1" />
<Link Source="21010:[1531..1600).1" Target="21010:[1548..1600).1" />
<Link Source="21010:[1692..1715).1" Target="EXTERNAL" />
<Link Source="21010:[1664..1716).1" Target="21010:[557..663).1" />
<Link Source="21010:[1664..1716).1" Target="21010:[567..663).5" />
<Link Source="21010:[1664..1716).1" Target="21010:[1692..1715).1" />
<Link Source="21010:[1653..1716).1" Target="21010:[1664..1716).1" />
<Link Source="21010:[1808..1831).1" Target="EXTERNAL" />
<Link Source="21010:[1780..1832).1" Target="21010:[557..663).1" />
<Link Source="21010:[1780..1832).1" Target="21010:[567..663).5" />
<Link Source="21010:[1780..1832).1" Target="21010:[1808..1831).1" />
<Link Source="21010:[1769..1832).1" Target="21010:[1780..1832).1" />
<Link Source="21010:[1950..1976).1" Target="EXTERNAL" />
<Link Source="21010:[1920..1977).1" Target="21010:[557..663).1" />
<Link Source="21010:[1920..1977).1" Target="21010:[567..663).5" />
<Link Source="21010:[1920..1977).1" Target="21010:[1950..1976).1" />
<Link Source="21010:[1885..1977).1" Target="21010:[1920..1977).1" />
<Link Source="21010:[2060..2067).1" Target="21010:[557..663).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2067).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2080..2109).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7832..7853).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[7783..7814).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).2" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[7816..7830).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[7832..7853).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).3" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).4" />
<Link Source="21010:[7879..7992).5" Target="21010:[2060..2110).1" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).5" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).2" />
<Link Source="21010:[7931..7989).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).2" />
<Link Source="21010:[7879..7992).9" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[7931..7989).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[2060..2110).1" />
<Link Source="21010:[2030..2110).1" Target="21010:[7879..7992).9" />
<Link Source="21010:[2227..2274).1" Target="EXTERNAL" />
<Link Source="21010:[2227..2292).1" Target="21010:[2227..2274).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2227..2292).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2295..2296).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[557..663).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[567..663).5" />
<Link Source="21010:[2199..2297).1" Target="21010:[2227..2296).1" />
<Link Source="21010:[2163..2297).1" Target="21010:[2199..2297).1" />
<Link Source="21010:[2401..2450).1" Target="EXTERNAL" />
<Link Source="21010:[2401..2468).1" Target="21010:[2401..2450).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[557..663).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[567..663).5" />
<Link Source="21010:[2373..2469).1" Target="21010:[2401..2468).1" />
<Link Source="21010:[2350..2469).1" Target="21010:[2373..2469).1" />
<Link Source="21010:[2576..2599).1" Target="EXTERNAL" />
<Link Source="21010:[2548..2600).1" Target="21010:[557..663).1" />
<Link Source="21010:[2548..2600).1" Target="21010:[567..663).5" />
<Link Source="21010:[2548..2600).1" Target="21010:[2576..2599).1" />
<Link Source="21010:[2522..2600).1" Target="21010:[2548..2600).1" />
<Link Source="21010:[2655..2705).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[2774..2838).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2954..2982).1" Target="EXTERNAL" />
<Link Source="21010:[2984..3025).1" Target="EXTERNAL" />
<Link Source="21010:[3027..3067).1" Target="EXTERNAL" />
<Link Source="21010:[2931..3068).3" Target="21010:[2954..2982).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2984..3025).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[3027..3067).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2931..3068).1" />
<Link Source="21010:[3082..3104).1" Target="21010:[2774..2838).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2931..3068).3" />
<Link Source="21010:[2931..3105).1" Target="21010:[3082..3104).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2891..3105).1" Target="21010:[2931..3105).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3487..3556).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3524..3544).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3546..3552).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[817..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[567..663).5" />
<Link Source="21010:[3465..3557).1" Target="21010:[828..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).2" />
<Link Source="21010:[3436..3557).1" Target="21010:[3465..3557).1" />
<Link Source="21010:[3612..3656).1" Target="21010:[1289..1356).1" />
<Link Source="21010:[3709..3748).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3801..3844).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3897..3943).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[4035..4070).1" Target="EXTERNAL" />
<Link Source="21010:[4072..4097).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).1" Target="21010:[4035..4070).1" />
<Link Source="21010:[10204..10225).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4072..4097).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10264..10288).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[10204..10225).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[10227..10262).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10385..10425).1" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[10264..10288).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10335..10345).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10347..10383).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10385..10425).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10427..10451).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10306..10452).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[4017..4098).1" />
<Link Source="21010:[4004..4098).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4188..4217).1" Target="EXTERNAL" />
<Link Source="21010:[4219..4244).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).2" Target="21010:[4188..4217).1" />
<Link Source="21010:[10204..10225).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4219..4244).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10264..10288).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10335..10345).2" Target="21010:[10204..10225).2" />
<Link Source="21010:[10335..10345).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10347..10383).2" Target="21010:[10227..10262).2" />
<Link Source="21010:[10347..10383).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10385..10425).2" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10427..10451).2" Target="21010:[10264..10288).2" />
<Link Source="21010:[10427..10451).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).49" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).95" Target="21010:[10335..10345).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10347..10383).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10385..10425).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10427..10451).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10306..10452).49" />
<Link Source="21010:[10306..10452).95" Target="21010:[4170..4245).1" />
<Link Source="21010:[4157..4245).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4324..4358).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[4324..4358).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4324..4358).1" Target="21010:[4353..4357).1" />
<Link Source="21010:[4306..4358).1" Target="21010:[4324..4358).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4437..4471).1" Target="21010:[4466..4470).1" />
<Link Source="21010:[4419..4471).1" Target="21010:[4437..4471).1" />
<Link Source="21010:[4561..4596).1" Target="EXTERNAL" />
<Link Source="21010:[4598..4621).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).3" Target="21010:[4561..4596).1" />
<Link Source="21010:[10204..10225).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4598..4621).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10264..10288).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10335..10345).3" Target="21010:[10204..10225).3" />
<Link Source="21010:[10335..10345).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10347..10383).3" Target="21010:[10227..10262).3" />
<Link Source="21010:[10347..10383).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10385..10425).3" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10427..10451).3" Target="21010:[10264..10288).3" />
<Link Source="21010:[10427..10451).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).97" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).143" Target="21010:[10335..10345).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10347..10383).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10385..10425).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10427..10451).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10306..10452).97" />
<Link Source="21010:[10306..10452).143" Target="21010:[4543..4622).1" />
<Link Source="21010:[4532..4622).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[4710..4739).1" Target="EXTERNAL" />
<Link Source="21010:[4741..4764).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).4" Target="21010:[4710..4739).1" />
<Link Source="21010:[10204..10225).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4741..4764).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10264..10288).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10335..10345).4" Target="21010:[10204..10225).4" />
<Link Source="21010:[10335..10345).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10347..10383).4" Target="21010:[10227..10262).4" />
<Link Source="21010:[10347..10383).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10385..10425).4" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10427..10451).4" Target="21010:[10264..10288).4" />
<Link Source="21010:[10427..10451).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).145" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).191" Target="21010:[10335..10345).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10347..10383).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10385..10425).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10427..10451).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10306..10452).145" />
<Link Source="21010:[10306..10452).191" Target="21010:[4692..4765).1" />
<Link Source="21010:[4681..4765).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[4859..4892).1" Target="EXTERNAL" />
<Link Source="21010:[4894..4919).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).5" Target="21010:[4859..4892).1" />
<Link Source="21010:[10204..10225).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4894..4919).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10264..10288).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10335..10345).5" Target="21010:[10204..10225).5" />
<Link Source="21010:[10335..10345).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10347..10383).5" Target="21010:[10227..10262).5" />
<Link Source="21010:[10347..10383).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10385..10425).5" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10427..10451).5" Target="21010:[10264..10288).5" />
<Link Source="21010:[10427..10451).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).193" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).239" Target="21010:[10335..10345).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10347..10383).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10385..10425).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10427..10451).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10306..10452).193" />
<Link Source="21010:[10306..10452).239" Target="21010:[4841..4920).1" />
<Link Source="21010:[4826..4920).1" Target="21010:[10306..10452).239" />
<Link Source="21010:[5010..5043).1" Target="EXTERNAL" />
<Link Source="21010:[5045..5068).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).6" Target="21010:[5010..5043).1" />
<Link Source="21010:[10204..10225).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[5045..5068).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10264..10288).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10335..10345).6" Target="21010:[10204..10225).6" />
<Link Source="21010:[10335..10345).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10347..10383).6" Target="21010:[10227..10262).6" />
<Link Source="21010:[10347..10383).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10385..10425).6" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10427..10451).6" Target="21010:[10264..10288).6" />
<Link Source="21010:[10427..10451).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).241" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).287" Target="21010:[10335..10345).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10347..10383).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10385..10425).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10427..10451).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10306..10452).241" />
<Link Source="21010:[10306..10452).287" Target="21010:[4992..5069).1" />
<Link Source="21010:[4979..5069).1" Target="21010:[10306..10452).287" />
<Link Source="21010:[5164..5184).1" Target="EXTERNAL" />
<Link Source="21010:[5186..5211).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).7" Target="21010:[5164..5184).1" />
<Link Source="21010:[10204..10225).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5186..5211).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10264..10288).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10335..10345).7" Target="21010:[10204..10225).7" />
<Link Source="21010:[10335..10345).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10347..10383).7" Target="21010:[10227..10262).7" />
<Link Source="21010:[10347..10383).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10385..10425).7" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10427..10451).7" Target="21010:[10264..10288).7" />
<Link Source="21010:[10427..10451).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).289" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).335" Target="21010:[10335..10345).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10347..10383).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10385..10425).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10427..10451).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10306..10452).289" />
<Link Source="21010:[10306..10452).335" Target="21010:[5146..5212).1" />
<Link Source="21010:[5130..5212).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[5303..5323).1" Target="EXTERNAL" />
<Link Source="21010:[5325..5348).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).8" Target="21010:[5303..5323).1" />
<Link Source="21010:[10204..10225).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5325..5348).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10264..10288).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10335..10345).8" Target="21010:[10204..10225).8" />
<Link Source="21010:[10335..10345).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10347..10383).8" Target="21010:[10227..10262).8" />
<Link Source="21010:[10347..10383).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10385..10425).8" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10427..10451).8" Target="21010:[10264..10288).8" />
<Link Source="21010:[10427..10451).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).337" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).383" Target="21010:[10335..10345).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10347..10383).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10385..10425).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10427..10451).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10306..10452).337" />
<Link Source="21010:[10306..10452).383" Target="21010:[5285..5349).1" />
<Link Source="21010:[5271..5349).1" Target="21010:[10306..10452).383" />
<Link Source="21010:[5429..5461).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5429..5461).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5429..5461).1" Target="21010:[5456..5460).1" />
<Link Source="21010:[5410..5461).1" Target="21010:[5429..5461).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[5539..5571).1" Target="21010:[5566..5570).1" />
<Link Source="21010:[5520..5571).1" Target="21010:[5539..5571).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[5649..5679).1" Target="21010:[5674..5678).1" />
<Link Source="21010:[5632..5679).1" Target="21010:[5649..5679).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[4681..4765).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[5755..5785).1" Target="21010:[5780..5784).1" />
<Link Source="21010:[5738..5785).1" Target="21010:[5755..5785).1" />
<Link Source="21010:[5900..5951).1" Target="EXTERNAL" />
<Link Source="21010:[5866..5952).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5866..5952).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5866..5952).1" Target="21010:[5900..5951).1" />
<Link Source="21010:[5866..5952).1" Target="EXTERNAL" />
<Link Source="21010:[5846..5952).1" Target="21010:[5866..5952).1" />
<Link Source="21010:[6065..6116).1" Target="EXTERNAL" />
<Link Source="21010:[6031..6117).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[6031..6117).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[6031..6117).1" Target="21010:[6065..6116).1" />
<Link Source="21010:[6031..6117).1" Target="EXTERNAL" />
<Link Source="21010:[6011..6117).1" Target="21010:[6031..6117).1" />
<Link Source="21010:[6236..6287).1" Target="EXTERNAL" />
<Link Source="21010:[6199..6288).1" Target="21010:[5130..5212).1" />
<Link Source="21010:[6199..6288).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[6199..6288).1" Target="21010:[6236..6287).1" />
<Link Source="21010:[6199..6288).1" Target="EXTERNAL" />
<Link Source="21010:[6176..6288).1" Target="21010:[6199..6288).1" />
<Link Source="21010:[6397..6448).1" Target="EXTERNAL" />
<Link Source="21010:[6365..6449).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[6365..6449).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[6365..6449).1" Target="21010:[6397..6448).1" />
<Link Source="21010:[6365..6449).1" Target="EXTERNAL" />
<Link Source="21010:[6347..6449).1" Target="21010:[6365..6449).1" />
<Link Source="21010:[6560..6586).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="21010:[6560..6586).1" />
<Link Source="21010:[6497..6587).1" Target="21010:[6513..6587).1" />
<Link Source="21003:[34259..34289).1" Target="21010:[557..663).1" />
<Link Source="21003:[34259..34289).1" Target="21003:[34198..34304).2" />
<Link Source="21003:[34320..34386).1" Target="21003:[34078..34089).1" />
<Link Source="21003:[34320..34386).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).2" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).3" Target="21003:[34320..34386).2" />
<Link Source="21003:[34320..34386).3" Target="21003:[34148..34172).1" />
<Link Source="21003:[34320..34386).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).5" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).3" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).5" />
<Link Source="21003:[34320..34386).7" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).7" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).1" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).2" Target="21003:[34259..34289).1" />
<Link Source="21003:[34400..34487).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).3" Target="21003:[34091..34111).1" />
<Link Source="21003:[34400..34487).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).4" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).2" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).3" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).4" />
<Link Source="21003:[34400..34487).6" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).6" Target="21010:[567..663).5" />
<Link Source="21003:[34400..34487).6" Target="21004:[1137..1205).1" />
<Link Source="21003:[34407..34486).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34554..34569).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[34554..34569).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34595..34627).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34554..34569).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34400..34487).6" />
<Link Source="21003:[34641..34667).3" Target="21003:[34641..34667).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).3" />
<Link Source="21003:[34681..34706).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).2" />
<Link Source="21003:[34681..34706).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34740).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34720..34740).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).2" />
<Link Source="21003:[34754..34818).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34720..34735).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34554..34569).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34407..34486).1" />
<Link Source="21004:[1129..1207).1" Target="21003:[34832..34844).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1122..1208).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[46280..46350).3" Target="21004:[1122..1208).1" />
<Link Source="21003:[46280..46350).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46023..46055).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46366..46650).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46419..46533).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[46419..46533).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).2" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).2" />
<Link Source="21003:[46419..46533).4" Target="21004:[1122..1208).1" />
<Link Source="21003:[46419..46533).4" Target="21004:[1129..1207).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[46419..46533).4" Target="21003:[46366..46650).2" />
<Link Source="21003:[46563..46584).1" Target="21003:[46419..46533).4" />
<Link Source="21003:[46563..46584).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46553..46635).1" Target="21010:[4004..4098).1" />
<Link Source="21003:[46553..46635).1" Target="21003:[46563..46584).1" />
<Link Source="21003:[46755..46872).1" Target="EXTERNAL" />
<Link Source="21003:[46755..46872).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[46224..46254).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46116..46135).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[47082..47319).1" Target="21003:[45967..46008).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46553..46635).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47399).1" Target="21003:[45706..45847).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47400).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11613..11696).1" Target="EXTERNAL" />
<Link Source="25006:[11613..11696).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11674..11681).1" Target="25006:[11613..11696).1" />
<Link Source="21003:[47333..47400).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1129..1207).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).7" />
<Link Source="21003:[47414..47458).1" Target="EXTERNAL" />
<Link Source="21003:[47414..47458).1" Target="21010:[10306..10452).47" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).2" Target="21003:[45706..45847).1" />
<Link Source="25004:[1041..1077).1" Target="21003:[47414..47458).2" />
<Link Source="21003:[47414..47458).4" Target="21003:[47414..47458).1" />
<Link Source="21003:[47414..47458).4" Target="25004:[1041..1077).1" />
<Link Source="21003:[47414..47458).4" Target="21003:[45706..45847).1" />
<Link Source="21003:[47689..47930).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47689..47930).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47717..47747).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47689..47930).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[48025..48054).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48175..48211).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[48175..48211).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48225..48313).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48175..48211).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48327..48378).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[47414..47458).4" />
<Link Source="21003:[48327..48378).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).1" Target="EXTERNAL" />
<Link Source="21003:[48392..48469).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[48327..48378).2" />
<Link Source="21003:[48392..48469).2" Target="21003:[48392..48469).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[46186..46209).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[48392..48469).2" />
<Link Source="21003:[47689..47930).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[47944..47963).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47944..47963).1" Target="21003:[45706..45847).1" />
<Link Source="28001:[40426..41068).1" Target="21003:[47944..47963).1" />
<Link Source="28001:[40426..41068).1" Target="25014:[387..448).1" />
<Link Source="28001:[40426..41068).2" Target="25014:[387..448).1" />
<Link Source="28001:[40426..41068).3" Target="EXTERNAL" />
<Link Source="28001:[40426..41068).3" Target="25014:[387..448).1" />
<Link Source="28001:[40624..40696).1" Target="25014:[387..448).1" />
<Link Source="25004:[19277..19288).1" Target="28001:[40426..41068).3" />
<Link Source="25004:[19277..19288).1" Target="28001:[40624..40696).1" />
<Link Source="25004:[19303..19330).1" Target="28001:[40426..41068).2" />
<Link Source="25004:[19303..19330).1" Target="28001:[40624..40696).1" />
<Link Source="25004:[19345..19370).1" Target="28001:[40426..41068).2" />
<Link Source="25004:[19345..19370).1" Target="28001:[40624..40696).1" />
<Link Source="25004:[19385..19419).1" Target="28001:[40426..41068).2" />
<Link Source="25004:[19385..19419).1" Target="28001:[40624..40696).1" />
<Link Source="25004:[19434..19483).1" Target="28001:[40426..41068).2" />
<Link Source="25004:[19434..19483).1" Target="28001:[40624..40696).1" />
<Link Source="25004:[19498..19537).1" Target="28001:[40426..41068).2" />
<Link Source="25004:[19498..19537).1" Target="28001:[40624..40696).1" />
<Link Source="25004:[19552..19577).1" Target="28001:[40426..41068).2" />
<Link Source="25004:[19552..19577).1" Target="28001:[40624..40696).1" />
<Link Source="25004:[19603..19877).1" Target="25004:[19277..19288).1" />
<Link Source="25004:[19603..19877).1" Target="28001:[40624..40696).1" />
<Link Source="25004:[19603..19877).2" Target="25004:[19303..19330).1" />
<Link Source="25004:[19603..19877).2" Target="28001:[40624..40696).1" />
<Link Source="25004:[19603..19877).3" Target="25004:[19345..19370).1" />
<Link Source="25004:[19603..19877).3" Target="28001:[40624..40696).1" />
<Link Source="25004:[19603..19877).4" Target="25004:[19385..19419).1" />
<Link Source="25004:[19603..19877).4" Target="28001:[40624..40696).1" />
<Link Source="25004:[19603..19877).5" Target="25004:[19434..19483).1" />
<Link Source="25004:[19603..19877).5" Target="28001:[40624..40696).1" />
<Link Source="25004:[19603..19877).6" Target="25004:[19498..19537).1" />
<Link Source="25004:[19603..19877).6" Target="28001:[40624..40696).1" />
<Link Source="25004:[19603..19877).7" Target="25004:[19552..19577).1" />
<Link Source="25004:[19603..19877).7" Target="28001:[40624..40696).1" />
<Link Source="25004:[19610..19876).1" Target="28001:[40624..40696).1" />
<Link Source="25007:[3334..3345).1" Target="25004:[19603..19877).1" />
<Link Source="25007:[3334..3345).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3360..3387).1" Target="25004:[19603..19877).2" />
<Link Source="25007:[3360..3387).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3402..3427).1" Target="25004:[19603..19877).3" />
<Link Source="25007:[3402..3427).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3442..3476).1" Target="25004:[19603..19877).4" />
<Link Source="25007:[3442..3476).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3491..3540).1" Target="25004:[19603..19877).5" />
<Link Source="25007:[3491..3540).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3555..3594).1" Target="25004:[19603..19877).6" />
<Link Source="25007:[3555..3594).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3609..3634).1" Target="25004:[19603..19877).7" />
<Link Source="25007:[3609..3634).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3660..3885).1" Target="25007:[3334..3345).1" />
<Link Source="25007:[3660..3885).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).1" Target="25007:[3334..3345).1" />
<Link Source="25007:[3901..4266).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).4" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).6" Target="25007:[3360..3387).1" />
<Link Source="25007:[3901..4266).6" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).7" Target="25007:[3402..3427).1" />
<Link Source="25007:[3901..4266).7" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).8" Target="25007:[3442..3476).1" />
<Link Source="25007:[3901..4266).8" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).9" Target="25007:[3491..3540).1" />
<Link Source="25007:[3901..4266).9" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).10" Target="25007:[3555..3594).1" />
<Link Source="25007:[3901..4266).10" Target="25004:[19610..19876).1" />
<Link Source="25003:[740..750).1" Target="25003:[747..750).1" />
<Link Source="25003:[808..818).1" Target="25003:[814..818).1" />
<Link Source="25007:[3901..4266).13" Target="25007:[3609..3634).1" />
<Link Source="25007:[3901..4266).13" Target="25004:[19610..19876).1" />
<Link Source="25007:[3908..4265).1" Target="25004:[19610..19876).1" />
<Link Source="25003:[2816..2827).1" Target="25007:[3901..4266).1" />
<Link Source="25003:[2816..2827).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2842..2863).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[2842..2863).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2878..2898).1" Target="25007:[3901..4266).6" />
<Link Source="25003:[2878..2898).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2913..2931).1" Target="25007:[3901..4266).7" />
<Link Source="25003:[2913..2931).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2946..2973).1" Target="25007:[3901..4266).8" />
<Link Source="25003:[2946..2973).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2988..3030).1" Target="25007:[3901..4266).9" />
<Link Source="25003:[2988..3030).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3045..3076).1" Target="25007:[3901..4266).10" />
<Link Source="25003:[3045..3076).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3091..3116).1" Target="25007:[3901..4266).1" />
<Link Source="25003:[3091..3116).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3131..3176).1" Target="25007:[3901..4266).13" />
<Link Source="25003:[3131..3176).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3191..3238).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[3191..3238).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3253..3278).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[3253..3278).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2773..3850).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[2773..3850).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[912..917).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[912..917).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[950..967).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[950..967).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1000..1013).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1000..1013).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1048..1062).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1048..1062).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1099..1109).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1099..1109).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1151..1165).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1151..1165).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1276..1303).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1276..1303).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1336..1350).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1336..1350).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1383..1412).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1383..1412).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1460..1479).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1460..1479).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1527..1548).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1527..1548).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1673..1689).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1673..1689).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1713..1727).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1713..1727).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1891..1900).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1891..1900).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1941..1960).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1941..1960).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3304..3309).1" Target="25003:[2816..2827).1" />
<Link Source="25003:[3304..3309).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3304..3309).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3331..3348).1" Target="25003:[2842..2863).1" />
<Link Source="25003:[3331..3348).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3331..3348).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3382..3396).1" Target="25003:[2878..2898).1" />
<Link Source="25003:[3382..3396).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3382..3396).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3427..3437).1" Target="25003:[2913..2931).1" />
<Link Source="25003:[3427..3437).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3427..3437).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3464..3478).1" Target="25003:[2946..2973).1" />
<Link Source="25003:[3464..3478).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3464..3478).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3509..3525).1" Target="25003:[2988..3030).1" />
<Link Source="25003:[3509..3525).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3509..3525).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3562..3589).1" Target="25003:[3045..3076).1" />
<Link Source="25003:[3562..3589).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3562..3589).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3633..3682).1" Target="25003:[3091..3116).1" />
<Link Source="25003:[3633..3682).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3633..3647).1" Target="25003:[3633..3682).1" />
<Link Source="25003:[3633..3647).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3633..3647).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3696..3715).1" Target="25003:[3131..3176).1" />
<Link Source="25003:[3696..3715).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3696..3715).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3751..3772).1" Target="25003:[3191..3238).1" />
<Link Source="25003:[3751..3772).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3751..3772).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3810..3823).1" Target="25003:[3253..3278).1" />
<Link Source="25003:[3810..3823).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3810..3823).1" Target="25007:[3908..4265).1" />
<Link Source="25004:[19603..19877).8" Target="25007:[3901..4266).4" />
<Link Source="25004:[19603..19877).8" Target="28001:[40624..40696).1" />
<Link Source="28001:[40426..41068).16" Target="25004:[19603..19877).8" />
<Link Source="28001:[40426..41068).16" Target="25014:[387..448).1" />
<Link Source="28001:[40624..40741).1" Target="28001:[40426..41068).2" />
<Link Source="28001:[40624..40741).1" Target="25014:[387..448).1" />
<Link Source="28001:[40624..40741).3" Target="25014:[387..448).1" />
<Link Source="25003:[7407..7432).1" Target="28001:[40426..41068).2" />
<Link Source="25003:[7407..7432).1" Target="28001:[40624..40741).3" />
<Link Source="25003:[7364..7671).1" Target="28001:[40426..41068).16" />
<Link Source="25003:[7364..7671).1" Target="28001:[40624..40741).3" />
<Link Source="25003:[7458..7660).1" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).1" Target="25003:[3304..3309).1" />
<Link Source="25003:[7458..7660).1" Target="28001:[40624..40741).3" />
<Link Source="25003:[7458..7660).2" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).2" Target="25003:[3331..3348).1" />
<Link Source="25003:[7458..7660).2" Target="28001:[40624..40741).3" />
<Link Source="25003:[7458..7660).3" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).3" Target="25003:[3382..3396).1" />
<Link Source="25003:[7458..7660).3" Target="28001:[40624..40741).3" />
<Link Source="25003:[7458..7660).4" Target="25003:[7407..7432).1" />
<Link Source="25003:[7458..7660).4" Target="28001:[40624..40741).3" />
<Link Source="25003:[7458..7660).5" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).5" Target="25003:[3464..3478).1" />
<Link Source="25003:[7458..7660).5" Target="28001:[40624..40741).3" />
<Link Source="25003:[7458..7660).6" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).6" Target="25003:[3509..3525).1" />
<Link Source="25003:[7458..7660).6" Target="28001:[40624..40741).3" />
<Link Source="25003:[7458..7660).7" Target="28001:[40624..40741).3" />
<Link Source="25003:[7458..7660).9" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).9" Target="25003:[3633..3647).1" />
<Link Source="25003:[7458..7660).9" Target="28001:[40624..40741).3" />
<Link Source="25003:[7458..7660).10" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).10" Target="25003:[3696..3715).1" />
<Link Source="25003:[7458..7660).10" Target="28001:[40624..40741).3" />
<Link Source="25003:[7458..7660).11" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).11" Target="25003:[3751..3772).1" />
<Link Source="25003:[7458..7660).11" Target="28001:[40624..40741).3" />
<Link Source="25003:[7458..7660).12" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).12" Target="25003:[3810..3823).1" />
<Link Source="25003:[7458..7660).12" Target="28001:[40624..40741).3" />
<Link Source="25003:[7465..7659).1" Target="28001:[40624..40741).3" />
<Link Source="25003:[2816..2827).2" Target="25003:[7458..7660).1" />
<Link Source="25003:[2816..2827).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2842..2863).2" Target="25003:[7458..7660).2" />
<Link Source="25003:[2842..2863).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2878..2898).2" Target="25003:[7458..7660).3" />
<Link Source="25003:[2878..2898).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2913..2931).2" Target="25003:[7458..7660).4" />
<Link Source="25003:[2913..2931).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2946..2973).2" Target="25003:[7458..7660).5" />
<Link Source="25003:[2946..2973).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2988..3030).2" Target="25003:[7458..7660).6" />
<Link Source="25003:[2988..3030).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3045..3076).2" Target="25003:[7458..7660).7" />
<Link Source="25003:[3045..3076).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3091..3116).2" Target="25003:[7458..7660).9" />
<Link Source="25003:[3091..3116).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3131..3176).2" Target="25003:[7458..7660).10" />
<Link Source="25003:[3131..3176).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3191..3238).2" Target="25003:[7458..7660).11" />
<Link Source="25003:[3191..3238).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3253..3278).2" Target="25003:[7458..7660).12" />
<Link Source="25003:[3253..3278).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2773..3850).2" Target="25003:[7458..7660).7" />
<Link Source="25003:[2773..3850).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[912..917).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[912..917).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[950..967).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[950..967).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1000..1013).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1000..1013).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1048..1062).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1048..1062).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1099..1109).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1099..1109).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1151..1165).4" Target="25003:[2773..3850).2" />
<Link Source="25003:[1151..1165).4" Target="25003:[7465..7659).1" />
<Link Source="25003:[1276..1303).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1276..1303).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1336..1350).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1336..1350).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1383..1412).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1383..1412).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1460..1479).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1460..1479).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1527..1548).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1527..1548).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1673..1689).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1673..1689).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1713..1727).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1713..1727).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1891..1900).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1891..1900).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1941..1960).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1941..1960).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3427..3437).2" Target="25003:[2913..2931).2" />
<Link Source="25003:[3427..3437).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[3427..3437).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3562..3589).2" Target="25003:[3045..3076).2" />
<Link Source="25003:[3562..3589).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[3562..3589).2" Target="25003:[7465..7659).1" />
<Link Source="28001:[40426..41068).23" Target="25003:[7458..7660).7" />
<Link Source="28001:[40426..41068).23" Target="25014:[387..448).1" />
<Link Source="28001:[40624..40760).1" Target="25014:[387..448).1" />
<Link Source="25003:[9181..9189).1" Target="28001:[40426..41068).2" />
<Link Source="25003:[9181..9189).1" Target="28001:[40624..40760).1" />
<Link Source="25003:[9191..9201).1" Target="28001:[40426..41068).2" />
<Link Source="25003:[9191..9201).1" Target="28001:[40624..40760).1" />
<Link Source="25003:[9139..9487).1" Target="28001:[40426..41068).23" />
<Link Source="25003:[9139..9487).1" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).1" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).1" Target="25003:[2816..2827).2" />
<Link Source="25003:[9227..9476).1" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).2" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).2" Target="25003:[2842..2863).2" />
<Link Source="25003:[9227..9476).2" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).3" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).3" Target="25003:[2878..2898).2" />
<Link Source="25003:[9227..9476).3" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).4" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).4" Target="25003:[3427..3437).2" />
<Link Source="25003:[9227..9476).4" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).5" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).6" Target="25003:[9181..9189).1" />
<Link Source="25003:[9227..9476).6" Target="25003:[9227..9476).5" />
<Link Source="25003:[9227..9476).6" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).9" Target="25003:[9191..9201).1" />
<Link Source="25003:[9227..9476).9" Target="25003:[9227..9476).5" />
<Link Source="25003:[9227..9476).9" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).11" Target="25003:[9227..9476).6" />
<Link Source="25003:[9227..9476).11" Target="25003:[9227..9476).9" />
<Link Source="25003:[9227..9476).11" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).13" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).13" Target="25003:[2988..3030).2" />
<Link Source="25003:[9227..9476).13" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).14" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).14" Target="25003:[3562..3589).2" />
<Link Source="25003:[9227..9476).14" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).15" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).15" Target="25003:[3091..3116).2" />
<Link Source="25003:[9227..9476).15" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).16" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).16" Target="25003:[3131..3176).2" />
<Link Source="25003:[9227..9476).16" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).17" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).17" Target="25003:[3191..3238).2" />
<Link Source="25003:[9227..9476).17" Target="28001:[40624..40760).1" />
<Link Source="25003:[9227..9476).18" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).18" Target="25003:[3253..3278).2" />
<Link Source="25003:[9227..9476).18" Target="28001:[40624..40760).1" />
<Link Source="25003:[9234..9475).1" Target="28001:[40624..40760).1" />
<Link Source="25003:[2816..2827).3" Target="25003:[9227..9476).1" />
<Link Source="25003:[2816..2827).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2842..2863).3" Target="25003:[9227..9476).2" />
<Link Source="25003:[2842..2863).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2878..2898).3" Target="25003:[9227..9476).3" />
<Link Source="25003:[2878..2898).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2913..2931).3" Target="25003:[9227..9476).4" />
<Link Source="25003:[2913..2931).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2946..2973).3" Target="25003:[9227..9476).11" />
<Link Source="25003:[2946..2973).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2988..3030).3" Target="25003:[9227..9476).13" />
<Link Source="25003:[2988..3030).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3045..3076).3" Target="25003:[9227..9476).14" />
<Link Source="25003:[3045..3076).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3091..3116).3" Target="25003:[9227..9476).15" />
<Link Source="25003:[3091..3116).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3131..3176).3" Target="25003:[9227..9476).16" />
<Link Source="25003:[3131..3176).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3191..3238).3" Target="25003:[9227..9476).17" />
<Link Source="25003:[3191..3238).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3253..3278).3" Target="25003:[9227..9476).18" />
<Link Source="25003:[3253..3278).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2773..3850).3" Target="25003:[9227..9476).5" />
<Link Source="25003:[2773..3850).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[912..917).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[912..917).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[950..967).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[950..967).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1000..1013).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1000..1013).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1048..1062).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1048..1062).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1099..1109).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1099..1109).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1151..1165).7" Target="25003:[2773..3850).3" />
<Link Source="25003:[1151..1165).7" Target="25003:[9234..9475).1" />
<Link Source="25003:[1276..1303).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1276..1303).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1336..1350).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1336..1350).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1383..1412).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1383..1412).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1460..1479).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1460..1479).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1527..1548).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1527..1548).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1673..1689).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1673..1689).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1713..1727).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1713..1727).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1891..1900).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1891..1900).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1941..1960).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1941..1960).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3464..3478).3" Target="25003:[2946..2973).3" />
<Link Source="25003:[3464..3478).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3464..3478).3" Target="25003:[9234..9475).1" />
<Link Source="28001:[40426..41068).28" Target="25003:[9227..9476).5" />
<Link Source="28001:[40426..41068).28" Target="25014:[387..448).1" />
<Link Source="28001:[40928..41001).1" Target="25014:[387..448).1" />
<Link Source="25004:[19277..19288).2" Target="28001:[40426..41068).3" />
<Link Source="25004:[19277..19288).2" Target="28001:[40928..41001).1" />
<Link Source="25004:[19303..19330).2" Target="28001:[40426..41068).2" />
<Link Source="25004:[19303..19330).2" Target="28001:[40928..41001).1" />
<Link Source="25004:[19345..19370).2" Target="28001:[40426..41068).2" />
<Link Source="25004:[19345..19370).2" Target="28001:[40928..41001).1" />
<Link Source="25004:[19385..19419).2" Target="28001:[40426..41068).2" />
<Link Source="25004:[19385..19419).2" Target="28001:[40928..41001).1" />
<Link Source="25004:[19434..19483).2" Target="28001:[40426..41068).2" />
<Link Source="25004:[19434..19483).2" Target="28001:[40928..41001).1" />
<Link Source="25004:[19498..19537).2" Target="28001:[40426..41068).2" />
<Link Source="25004:[19498..19537).2" Target="28001:[40928..41001).1" />
<Link Source="25004:[19552..19577).2" Target="28001:[40426..41068).2" />
<Link Source="25004:[19552..19577).2" Target="28001:[40928..41001).1" />
<Link Source="25004:[19603..19877).10" Target="25004:[19277..19288).2" />
<Link Source="25004:[19603..19877).10" Target="28001:[40928..41001).1" />
<Link Source="25004:[19603..19877).11" Target="25004:[19303..19330).2" />
<Link Source="25004:[19603..19877).11" Target="28001:[40928..41001).1" />
<Link Source="25004:[19603..19877).12" Target="25004:[19345..19370).2" />
<Link Source="25004:[19603..19877).12" Target="28001:[40928..41001).1" />
<Link Source="25004:[19603..19877).13" Target="25004:[19385..19419).2" />
<Link Source="25004:[19603..19877).13" Target="28001:[40928..41001).1" />
<Link Source="25004:[19603..19877).14" Target="25004:[19434..19483).2" />
<Link Source="25004:[19603..19877).14" Target="28001:[40928..41001).1" />
<Link Source="25004:[19603..19877).15" Target="25004:[19498..19537).2" />
<Link Source="25004:[19603..19877).15" Target="28001:[40928..41001).1" />
<Link Source="25004:[19603..19877).16" Target="25004:[19552..19577).2" />
<Link Source="25004:[19603..19877).16" Target="28001:[40928..41001).1" />
<Link Source="25004:[19610..19876).2" Target="28001:[40928..41001).1" />
<Link Source="25007:[3334..3345).2" Target="25004:[19603..19877).10" />
<Link Source="25007:[3334..3345).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3360..3387).2" Target="25004:[19603..19877).11" />
<Link Source="25007:[3360..3387).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3402..3427).2" Target="25004:[19603..19877).12" />
<Link Source="25007:[3402..3427).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3442..3476).2" Target="25004:[19603..19877).13" />
<Link Source="25007:[3442..3476).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3491..3540).2" Target="25004:[19603..19877).14" />
<Link Source="25007:[3491..3540).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3555..3594).2" Target="25004:[19603..19877).15" />
<Link Source="25007:[3555..3594).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3609..3634).2" Target="25004:[19603..19877).16" />
<Link Source="25007:[3609..3634).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3660..3885).6" Target="25007:[3334..3345).2" />
<Link Source="25007:[3660..3885).6" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).20" Target="25007:[3334..3345).2" />
<Link Source="25007:[3901..4266).20" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).23" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).25" Target="25007:[3360..3387).2" />
<Link Source="25007:[3901..4266).25" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).26" Target="25007:[3402..3427).2" />
<Link Source="25007:[3901..4266).26" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).27" Target="25007:[3442..3476).2" />
<Link Source="25007:[3901..4266).27" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).28" Target="25007:[3491..3540).2" />
<Link Source="25007:[3901..4266).28" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).29" Target="25007:[3555..3594).2" />
<Link Source="25007:[3901..4266).29" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).32" Target="25007:[3609..3634).2" />
<Link Source="25007:[3901..4266).32" Target="25004:[19610..19876).2" />
<Link Source="25007:[3908..4265).2" Target="25004:[19610..19876).2" />
<Link Source="25003:[2816..2827).4" Target="25007:[3901..4266).20" />
<Link Source="25003:[2816..2827).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[2842..2863).4" Target="25007:[3901..4266).23" />
<Link Source="25003:[2842..2863).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[2878..2898).4" Target="25007:[3901..4266).25" />
<Link Source="25003:[2878..2898).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[2913..2931).4" Target="25007:[3901..4266).26" />
<Link Source="25003:[2913..2931).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[2946..2973).4" Target="25007:[3901..4266).27" />
<Link Source="25003:[2946..2973).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[2988..3030).4" Target="25007:[3901..4266).28" />
<Link Source="25003:[2988..3030).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3045..3076).4" Target="25007:[3901..4266).29" />
<Link Source="25003:[3045..3076).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3091..3116).4" Target="25007:[3901..4266).20" />
<Link Source="25003:[3091..3116).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3131..3176).4" Target="25007:[3901..4266).32" />
<Link Source="25003:[3131..3176).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3191..3238).4" Target="25007:[3901..4266).23" />
<Link Source="25003:[3191..3238).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3253..3278).4" Target="25007:[3901..4266).23" />
<Link Source="25003:[3253..3278).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[2773..3850).4" Target="25007:[3901..4266).23" />
<Link Source="25003:[2773..3850).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[912..917).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[912..917).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[950..967).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[950..967).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[1000..1013).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1000..1013).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[1048..1062).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1048..1062).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[1099..1109).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1099..1109).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[1151..1165).10" Target="25003:[2773..3850).4" />
<Link Source="25003:[1151..1165).10" Target="25007:[3908..4265).2" />
<Link Source="25003:[1276..1303).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1276..1303).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[1336..1350).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1336..1350).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[1383..1412).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1383..1412).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[1460..1479).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1460..1479).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[1527..1548).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1527..1548).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[1673..1689).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1673..1689).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[1713..1727).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1713..1727).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[1891..1900).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1891..1900).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[1941..1960).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1941..1960).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3304..3309).4" Target="25003:[2816..2827).4" />
<Link Source="25003:[3304..3309).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3304..3309).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3331..3348).4" Target="25003:[2842..2863).4" />
<Link Source="25003:[3331..3348).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3331..3348).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3382..3396).4" Target="25003:[2878..2898).4" />
<Link Source="25003:[3382..3396).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3382..3396).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3427..3437).4" Target="25003:[2913..2931).4" />
<Link Source="25003:[3427..3437).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3427..3437).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3464..3478).4" Target="25003:[2946..2973).4" />
<Link Source="25003:[3464..3478).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3464..3478).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3509..3525).4" Target="25003:[2988..3030).4" />
<Link Source="25003:[3509..3525).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3509..3525).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3562..3589).4" Target="25003:[3045..3076).4" />
<Link Source="25003:[3562..3589).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3562..3589).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3633..3682).4" Target="25003:[3091..3116).4" />
<Link Source="25003:[3633..3682).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3633..3647).4" Target="25003:[3633..3682).4" />
<Link Source="25003:[3633..3647).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3633..3647).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3696..3715).4" Target="25003:[3131..3176).4" />
<Link Source="25003:[3696..3715).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3696..3715).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3751..3772).4" Target="25003:[3191..3238).4" />
<Link Source="25003:[3751..3772).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3751..3772).4" Target="25007:[3908..4265).2" />
<Link Source="25003:[3810..3823).4" Target="25003:[3253..3278).4" />
<Link Source="25003:[3810..3823).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3810..3823).4" Target="25007:[3908..4265).2" />
<Link Source="25004:[19603..19877).17" Target="25007:[3901..4266).23" />
<Link Source="25004:[19603..19877).17" Target="28001:[40928..41001).1" />
<Link Source="28001:[40426..41068).42" Target="25004:[19603..19877).17" />
<Link Source="28001:[40426..41068).42" Target="25014:[387..448).1" />
<Link Source="28001:[40928..41047).1" Target="28001:[40426..41068).2" />
<Link Source="28001:[40928..41047).1" Target="25014:[387..448).1" />
<Link Source="28001:[40928..41047).3" Target="25014:[387..448).1" />
<Link Source="25003:[7407..7432).2" Target="28001:[40426..41068).2" />
<Link Source="25003:[7407..7432).2" Target="28001:[40928..41047).3" />
<Link Source="25003:[7364..7671).2" Target="28001:[40426..41068).42" />
<Link Source="25003:[7364..7671).2" Target="28001:[40928..41047).3" />
<Link Source="25003:[7458..7660).15" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).15" Target="25003:[3304..3309).4" />
<Link Source="25003:[7458..7660).15" Target="28001:[40928..41047).3" />
<Link Source="25003:[7458..7660).16" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).16" Target="25003:[3331..3348).4" />
<Link Source="25003:[7458..7660).16" Target="28001:[40928..41047).3" />
<Link Source="25003:[7458..7660).17" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).17" Target="25003:[3382..3396).4" />
<Link Source="25003:[7458..7660).17" Target="28001:[40928..41047).3" />
<Link Source="25003:[7458..7660).18" Target="25003:[7407..7432).2" />
<Link Source="25003:[7458..7660).18" Target="28001:[40928..41047).3" />
<Link Source="25003:[7458..7660).19" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).19" Target="25003:[3464..3478).4" />
<Link Source="25003:[7458..7660).19" Target="28001:[40928..41047).3" />
<Link Source="25003:[7458..7660).20" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).20" Target="25003:[3509..3525).4" />
<Link Source="25003:[7458..7660).20" Target="28001:[40928..41047).3" />
<Link Source="25003:[7458..7660).21" Target="28001:[40928..41047).3" />
<Link Source="25003:[7458..7660).23" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).23" Target="25003:[3633..3647).4" />
<Link Source="25003:[7458..7660).23" Target="28001:[40928..41047).3" />
<Link Source="25003:[7458..7660).24" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).24" Target="25003:[3696..3715).4" />
<Link Source="25003:[7458..7660).24" Target="28001:[40928..41047).3" />
<Link Source="25003:[7458..7660).25" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).25" Target="25003:[3751..3772).4" />
<Link Source="25003:[7458..7660).25" Target="28001:[40928..41047).3" />
<Link Source="25003:[7458..7660).26" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).26" Target="25003:[3810..3823).4" />
<Link Source="25003:[7458..7660).26" Target="28001:[40928..41047).3" />
<Link Source="25003:[7465..7659).2" Target="28001:[40928..41047).3" />
<Link Source="25003:[2816..2827).5" Target="25003:[7458..7660).15" />
<Link Source="25003:[2816..2827).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[2842..2863).5" Target="25003:[7458..7660).16" />
<Link Source="25003:[2842..2863).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[2878..2898).5" Target="25003:[7458..7660).17" />
<Link Source="25003:[2878..2898).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[2913..2931).5" Target="25003:[7458..7660).18" />
<Link Source="25003:[2913..2931).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[2946..2973).5" Target="25003:[7458..7660).19" />
<Link Source="25003:[2946..2973).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[2988..3030).5" Target="25003:[7458..7660).20" />
<Link Source="25003:[2988..3030).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[3045..3076).5" Target="25003:[7458..7660).21" />
<Link Source="25003:[3045..3076).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[3091..3116).5" Target="25003:[7458..7660).23" />
<Link Source="25003:[3091..3116).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[3131..3176).5" Target="25003:[7458..7660).24" />
<Link Source="25003:[3131..3176).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[3191..3238).5" Target="25003:[7458..7660).25" />
<Link Source="25003:[3191..3238).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[3253..3278).5" Target="25003:[7458..7660).26" />
<Link Source="25003:[3253..3278).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[2773..3850).5" Target="25003:[7458..7660).21" />
<Link Source="25003:[2773..3850).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[912..917).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[912..917).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[950..967).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[950..967).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[1000..1013).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1000..1013).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[1048..1062).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1048..1062).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[1099..1109).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1099..1109).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[1151..1165).13" Target="25003:[2773..3850).5" />
<Link Source="25003:[1151..1165).13" Target="25003:[7465..7659).2" />
<Link Source="25003:[1276..1303).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1276..1303).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[1336..1350).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1336..1350).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[1383..1412).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1383..1412).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[1460..1479).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1460..1479).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[1527..1548).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1527..1548).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[1673..1689).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1673..1689).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[1713..1727).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1713..1727).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[1891..1900).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1891..1900).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[1941..1960).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1941..1960).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[3427..3437).5" Target="25003:[2913..2931).5" />
<Link Source="25003:[3427..3437).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3427..3437).5" Target="25003:[7465..7659).2" />
<Link Source="25003:[3562..3589).5" Target="25003:[3045..3076).5" />
<Link Source="25003:[3562..3589).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3562..3589).5" Target="25003:[7465..7659).2" />
<Link Source="28001:[40426..41068).49" Target="25003:[7458..7660).21" />
<Link Source="28001:[40426..41068).49" Target="25014:[387..448).1" />
<Link Source="28001:[40928..41066).1" Target="25014:[387..448).1" />
<Link Source="25003:[9181..9189).2" Target="28001:[40426..41068).2" />
<Link Source="25003:[9181..9189).2" Target="28001:[40928..41066).1" />
<Link Source="25003:[9191..9201).2" Target="28001:[40426..41068).2" />
<Link Source="25003:[9191..9201).2" Target="28001:[40928..41066).1" />
<Link Source="25003:[9139..9487).2" Target="28001:[40426..41068).49" />
<Link Source="25003:[9139..9487).2" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).21" Target="25003:[9139..9487).2" />
<Link Source="25003:[9227..9476).21" Target="25003:[2816..2827).5" />
<Link Source="25003:[9227..9476).21" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).22" Target="25003:[9139..9487).2" />
<Link Source="25003:[9227..9476).22" Target="25003:[2842..2863).5" />
<Link Source="25003:[9227..9476).22" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).23" Target="25003:[9139..9487).2" />
<Link Source="25003:[9227..9476).23" Target="25003:[2878..2898).5" />
<Link Source="25003:[9227..9476).23" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).24" Target="25003:[9139..9487).2" />
<Link Source="25003:[9227..9476).24" Target="25003:[3427..3437).5" />
<Link Source="25003:[9227..9476).24" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).25" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).26" Target="25003:[9181..9189).2" />
<Link Source="25003:[9227..9476).26" Target="25003:[9227..9476).25" />
<Link Source="25003:[9227..9476).26" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).29" Target="25003:[9191..9201).2" />
<Link Source="25003:[9227..9476).29" Target="25003:[9227..9476).25" />
<Link Source="25003:[9227..9476).29" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).31" Target="25003:[9227..9476).26" />
<Link Source="25003:[9227..9476).31" Target="25003:[9227..9476).29" />
<Link Source="25003:[9227..9476).31" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).33" Target="25003:[9139..9487).2" />
<Link Source="25003:[9227..9476).33" Target="25003:[2988..3030).5" />
<Link Source="25003:[9227..9476).33" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).34" Target="25003:[9139..9487).2" />
<Link Source="25003:[9227..9476).34" Target="25003:[3562..3589).5" />
<Link Source="25003:[9227..9476).34" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).35" Target="25003:[9139..9487).2" />
<Link Source="25003:[9227..9476).35" Target="25003:[3091..3116).5" />
<Link Source="25003:[9227..9476).35" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).36" Target="25003:[9139..9487).2" />
<Link Source="25003:[9227..9476).36" Target="25003:[3131..3176).5" />
<Link Source="25003:[9227..9476).36" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).37" Target="25003:[9139..9487).2" />
<Link Source="25003:[9227..9476).37" Target="25003:[3191..3238).5" />
<Link Source="25003:[9227..9476).37" Target="28001:[40928..41066).1" />
<Link Source="25003:[9227..9476).38" Target="25003:[9139..9487).2" />
<Link Source="25003:[9227..9476).38" Target="25003:[3253..3278).5" />
<Link Source="25003:[9227..9476).38" Target="28001:[40928..41066).1" />
<Link Source="25003:[9234..9475).2" Target="28001:[40928..41066).1" />
<Link Source="25003:[2816..2827).6" Target="25003:[9227..9476).21" />
<Link Source="25003:[2816..2827).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[2842..2863).6" Target="25003:[9227..9476).22" />
<Link Source="25003:[2842..2863).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[2878..2898).6" Target="25003:[9227..9476).23" />
<Link Source="25003:[2878..2898).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[2913..2931).6" Target="25003:[9227..9476).24" />
<Link Source="25003:[2913..2931).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[2946..2973).6" Target="25003:[9227..9476).31" />
<Link Source="25003:[2946..2973).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[2988..3030).6" Target="25003:[9227..9476).33" />
<Link Source="25003:[2988..3030).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[3045..3076).6" Target="25003:[9227..9476).34" />
<Link Source="25003:[3045..3076).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[3091..3116).6" Target="25003:[9227..9476).35" />
<Link Source="25003:[3091..3116).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[3131..3176).6" Target="25003:[9227..9476).36" />
<Link Source="25003:[3131..3176).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[3191..3238).6" Target="25003:[9227..9476).37" />
<Link Source="25003:[3191..3238).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[3253..3278).6" Target="25003:[9227..9476).38" />
<Link Source="25003:[3253..3278).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[2773..3850).6" Target="25003:[9227..9476).25" />
<Link Source="25003:[2773..3850).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[912..917).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[912..917).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[950..967).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[950..967).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[1000..1013).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1000..1013).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[1048..1062).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1048..1062).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[1099..1109).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1099..1109).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[1151..1165).16" Target="25003:[2773..3850).6" />
<Link Source="25003:[1151..1165).16" Target="25003:[9234..9475).2" />
<Link Source="25003:[1276..1303).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1276..1303).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[1336..1350).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1336..1350).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[1383..1412).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1383..1412).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[1460..1479).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1460..1479).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[1527..1548).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1527..1548).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[1673..1689).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1673..1689).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[1713..1727).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1713..1727).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[1891..1900).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1891..1900).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[1941..1960).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1941..1960).6" Target="25003:[9234..9475).2" />
<Link Source="25003:[3464..3478).6" Target="25003:[2946..2973).6" />
<Link Source="25003:[3464..3478).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[3464..3478).6" Target="25003:[9234..9475).2" />
<Link Source="28001:[40426..41068).54" Target="25003:[9227..9476).25" />
<Link Source="28001:[40426..41068).54" Target="25014:[387..448).1" />
<Link Source="28001:[40426..41067).1" Target="28001:[40426..41068).28" />
<Link Source="28001:[40426..41067).1" Target="28001:[40426..41068).2" />
<Link Source="28001:[40426..41067).1" Target="25014:[387..448).1" />
<Link Source="28001:[40426..41067).2" Target="28001:[40426..41068).54" />
<Link Source="28001:[40426..41067).2" Target="28001:[40426..41068).2" />
<Link Source="28001:[40426..41067).2" Target="25014:[387..448).1" />
<Link Source="28001:[40426..41067).3" Target="25014:[387..448).1" />
<Link Source="25002:[4263..4282).1" Target="28001:[40426..41068).1" />
<Link Source="25002:[4263..4282).1" Target="28001:[40426..41067).3" />
<Link Source="25002:[4284..4323).1" Target="28001:[40426..41068).2" />
<Link Source="25002:[4284..4323).1" Target="28001:[40426..41067).3" />
<Link Source="25002:[4395..4432).1" Target="28001:[40426..41067).3" />
<Link Source="10345:[975..1032).1" Target="EXTERNAL" />
<Link Source="10345:[1047..1101).1" Target="EXTERNAL" />
<Link Source="10345:[1116..1166).1" Target="EXTERNAL" />
<Link Source="10345:[1753..1782).1" Target="10345:[956..960).1" />
<Link Source="10345:[1753..1782).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[975..1032).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[1047..1101).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[1116..1166).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[1181..1185).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1723..2412).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[1797..1861).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[2064..2099).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[930..1186).1" />
<Link Source="10345:[2113..2145).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2113..2145).1" Target="EXTERNAL" />
<Link Source="10345:[2113..2145).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2159..2192).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2159..2192).1" Target="EXTERNAL" />
<Link Source="10345:[2159..2192).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1753..1782).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1797..1861).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[2013..2038).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[930..1186).1" />
<Link Source="10345:[922..1186).1" Target="10345:[930..1186).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4263..4282).1" />
<Link Source="25002:[4395..4432).3" Target="21003:[48392..48469).2" />
<Link Source="25002:[4395..4432).3" Target="28001:[40426..41067).3" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13144..13184).1" Target="10345:[13089..13118).1" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).2" Target="10345:[13144..13184).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).2" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).4" Target="10345:[13089..13118).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).4" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[922..1186).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[13200..13326).2" />
<Link Source="25002:[4395..4432).6" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).6" Target="10345:[13298..13311).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2208..2220).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2331..2343).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2249..2266).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2296..2307).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2372..2390).1" />
<Link Source="25002:[4395..4432).6" Target="EXTERNAL" />
<Link Source="25002:[4395..4432).6" Target="28001:[40426..41067).3" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24591..26243).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24636..24685).1" Target="10345:[24530..24565).1" />
<Link Source="10345:[24636..24685).1" Target="25002:[4395..4432).6" />
<Link Source="10345:[24636..24685).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24636..24685).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26025..26098).1" Target="EXTERNAL" />
<Link Source="10345:[26025..26098).1" Target="10345:[24768..26149).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24530..24565).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[24507..26254).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26025..26098).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).2" />
<Link Source="10345:[26169..26228).3" Target="10345:[24591..26243).1" />
<Link Source="10345:[24932..25204).1" Target="EXTERNAL" />
<Link Source="10345:[24932..25204).1" Target="10345:[26169..26228).3" />
<Link Source="10345:[25064..25074).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[26266..28173).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[922..1186).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26365..26372).1" Target="10345:[26314..26387).1" />
<Link Source="10345:[25064..25075).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25109..25173).1" Target="EXTERNAL" />
<Link Source="10345:[25109..25173).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25858..25865).1" Target="10345:[25109..25173).1" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[537..568).1" Target="10298:[471..492).1" />
<Link Source="10298:[537..568).1" Target="10298:[494..511).1" />
<Link Source="10298:[537..568).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).10" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).10" Target="10298:[537..568).1" />
<Link Source="25002:[4395..4432).10" Target="10345:[25109..25173).1" />
<Link Source="25002:[4395..4432).10" Target="28001:[40426..41067).3" />
<Link Source="10292:[1704..1721).1" Target="10292:[1720..1721).1" />
<Link Source="10292:[1752..1769).1" Target="10292:[1768..1769).1" />
<Link Source="10292:[1963..1993).1" Target="10292:[1992..1993).1" />
<Link Source="10306:[388923..389344).1" Target="10306:[388969..389344).1" />
<Link Source="10306:[389480..389543).1" Target="EXTERNAL" />
<Link Source="10306:[389562..389646).1" Target="EXTERNAL" />
<Link Source="10306:[389708..389839).1" Target="EXTERNAL" />
<Link Source="10306:[389665..389839).1" Target="10306:[389708..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389480..389543).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389562..389646).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389665..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389438..389840).1" />
<Link Source="10306:[389401..389840).1" Target="10306:[389438..389840).17" />
<Link Source="10310:[84458..84496).1" Target="10310:[84494..84496).1" />
<Link Source="10316:[772..830).1" Target="10316:[802..830).1" />
<Link Source="10319:[69620..69663).1" Target="10319:[69643..69663).1" />
<Link Source="10319:[69727..69774).1" Target="10319:[69752..69774).1" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31055..31080).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31095..31126).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).2" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).4" />
<Link Source="10286:[31152..31210).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31515..31598).1" Target="10286:[30969..31000).1" />
<Link Source="10286:[31515..31598).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).1" Target="10286:[30925..30954).1" />
<Link Source="10286:[31614..31710).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).2" Target="10286:[30969..31000).1" />
<Link Source="10286:[31614..31710).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).3" Target="10286:[31015..31040).1" />
<Link Source="10286:[31614..31710).3" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).4" Target="10286:[31055..31080).1" />
<Link Source="10286:[31614..31710).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).5" Target="10286:[31095..31126).1" />
<Link Source="10286:[31614..31710).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).6" Target="10286:[31515..31598).1" />
<Link Source="10286:[31614..31710).6" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31709).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31710).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31710).2" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31710).3" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31710).4" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31710).5" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31710).6" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80188..80212).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80162..80186).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).2" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).4" />
<Link Source="10319:[80263..80315).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80331..80364).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).1" Target="10319:[80080..80109).1" />
<Link Source="10319:[80378..80479).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).2" Target="10319:[80111..80133).1" />
<Link Source="10319:[80378..80479).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).3" Target="10319:[80331..80364).1" />
<Link Source="10319:[80378..80479).3" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).4" Target="10319:[80214..80237).1" />
<Link Source="10319:[80378..80479).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80400..80478).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80378..80479).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80874..80896).1" Target="10319:[80378..80479).2" />
<Link Source="10319:[80874..80896).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80898..80931).1" Target="10319:[80378..80479).3" />
<Link Source="10319:[80898..80931).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80933..80956).1" Target="10319:[80378..80479).4" />
<Link Source="10319:[80933..80956).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80874..80896).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).2" Target="25002:[4395..4432).10" />
<Link Source="10319:[80982..81047).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).3" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2901..2932).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3483..3502).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).1" Target="10060:[4243..4274).1" />
<Link Source="10060:[3518..4328).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4344..4356).1" Target="10319:[80982..81047).3" />
<Link Source="10319:[80982..81047).8" Target="10060:[3483..3502).1" />
<Link Source="10319:[80982..81047).8" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).8" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2841..2854).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2856..2875).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).3" Target="10060:[2841..2854).2" />
<Link Source="10060:[2901..2932).3" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[2948..3467).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[3553..4223).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[4243..4274).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).2" Target="10060:[4243..4274).2" />
<Link Source="10060:[3518..4328).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).3" Target="10060:[4243..4274).2" />
<Link Source="10060:[3553..4223).3" Target="10060:[3518..4328).2" />
<Link Source="10319:[80982..81047).15" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).2" />
<Link Source="10319:[80982..81047).15" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80982..81047).15" />
<Link Source="10319:[81063..82500).2" Target="10319:[81063..82500).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[81129..81207).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[81129..81207).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81129..81207).2" Target="10319:[81063..82500).2" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).7" Target="10060:[2841..2854).4" />
<Link Source="10060:[2901..2932).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).4" Target="10060:[2841..2854).4" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[3483..3502).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).6" Target="10060:[4243..4274).6" />
<Link Source="10060:[3518..4328).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2841..2854).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).9" Target="10060:[2841..2854).5" />
<Link Source="10060:[2901..2932).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).5" Target="10060:[2841..2854).5" />
<Link Source="10060:[2948..3467).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[3553..4223).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[4243..4274).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).7" Target="10060:[4243..4274).7" />
<Link Source="10060:[3518..4328).7" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81225..82039).1" />
<Link Source="10319:[81225..82039).2" Target="10319:[81063..82500).2" />
<Link Source="10319:[82516..82536).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[82516..82536).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80495..80738).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[80495..80738).2" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).1" Target="10319:[82516..82536).1" />
<Link Source="10319:[80754..80774).1" Target="10286:[31614..31709).1" />
<Link Source="10060:[2841..2854).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).17" Target="10060:[2841..2854).9" />
<Link Source="10060:[2901..2932).17" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).9" Target="10060:[2841..2854).9" />
<Link Source="10060:[2948..3467).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[3553..4223).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[4243..4274).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).11" Target="10060:[4243..4274).11" />
<Link Source="10060:[3518..4328).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[2841..2854).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2901..2932).19" Target="10060:[2841..2854).10" />
<Link Source="10060:[2901..2932).19" Target="10060:[3483..3502).7" />
<Link Source="10060:[2948..3467).10" Target="10060:[2841..2854).10" />
<Link Source="10060:[2948..3467).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[3553..4223).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[3553..4223).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[4243..4274).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[4243..4274).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[3518..4328).12" Target="10060:[4243..4274).12" />
<Link Source="10060:[3518..4328).12" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).4" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).5" Target="10319:[81225..82039).4" />
<Link Source="10319:[81225..82039).5" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[80495..80738).5" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).2" Target="10319:[82516..82536).2" />
<Link Source="10319:[80754..80774).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[81225..82039).7" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10319:[80400..80478).1" />
<Link Source="10319:[80754..80774).3" Target="10319:[82516..82536).3" />
<Link Source="10319:[80754..80774).3" Target="10286:[31614..31709).1" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1715..1727).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1715..1727).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1773..1785).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1773..1785).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1824..1835).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1824..1835).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1883..1903).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1883..1903).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1936..1956).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1936..1956).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2247..2272).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2247..2272).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2412..2424).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2339..2360).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2453..2464).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2362..2386).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2492..2512).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2658).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).3" />
<Link Source="10076:[2551..2658).5" Target="10076:[1715..1727).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2412..2424).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2453..2464).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[1883..1903).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2492..2512).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2247..2272).1" />
<Link Source="10076:[2551..2658).5" Target="10060:[3483..3502).7" />
<Link Source="10076:[2551..2658).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2576).1" Target="10076:[2551..2658).5" />
<Link Source="10076:[2551..2576).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2576).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3299).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[3236..3299).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3236..3248).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[3315..3375).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[3338..3374).1" Target="25002:[4395..4432).1" />
<Link Source="10325:[645..674).1" Target="10076:[3315..3375).1" />
<Link Source="10325:[645..674).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).1" Target="10076:[3315..3375).2" />
<Link Source="10325:[616..730).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[696..707).1" Target="10325:[645..674).1" />
<Link Source="10325:[696..707).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).2" Target="10076:[3338..3374).1" />
<Link Source="10286:[939..968).1" Target="10325:[696..707).1" />
<Link Source="10286:[939..968).1" Target="10325:[616..730).2" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).1" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).2" />
<Link Source="10286:[726..773).1" Target="10286:[923..1219).1" />
<Link Source="10286:[726..773).1" Target="10325:[616..730).2" />
<Link Source="10286:[815..820).1" Target="10286:[923..1219).1" />
<Link Source="10286:[815..820).1" Target="10325:[616..730).2" />
<Link Source="10286:[2975..3015).1" Target="10286:[923..1219).1" />
<Link Source="10286:[2975..3015).1" Target="10325:[616..730).2" />
<Link Source="10286:[17802..17818).1" Target="10286:[923..1219).1" />
<Link Source="10286:[17802..17818).1" Target="10325:[616..730).2" />
<Link Source="10286:[18200..18223).1" Target="10286:[923..1219).1" />
<Link Source="10286:[18200..18223).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).2" Target="10286:[939..968).1" />
<Link Source="10286:[994..1034).2" Target="10286:[994..1034).1" />
<Link Source="10286:[994..1034).2" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1048..1096).1" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).2" Target="10286:[1048..1096).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[726..773).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[815..820).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[2975..3015).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[17802..17818).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[18200..18223).1" />
<Link Source="10286:[1048..1096).2" Target="10325:[616..730).2" />
<Link Source="10286:[1110..1120).1" Target="10286:[939..968).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2658).5" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2576).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[3236..3248).1" />
<Link Source="10286:[1110..1120).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1110..1120).1" Target="10325:[616..730).2" />
<Link Source="10286:[1177..1193).1" Target="10286:[939..968).1" />
<Link Source="10286:[1177..1193).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1177..1193).1" Target="10325:[616..730).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[3315..3375).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3315..3335).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).19" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).19" Target="10076:[2551..2658).5" />
<Link Source="25002:[4395..4432).19" Target="10076:[2551..2576).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3236..3248).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3315..3335).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3236..3299).1" />
<Link Source="25002:[4395..4432).19" Target="10286:[1048..1096).2" />
<Link Source="25002:[4395..4432).19" Target="10286:[1110..1120).1" />
<Link Source="25002:[4395..4432).19" Target="10286:[1177..1193).1" />
<Link Source="25002:[4395..4432).19" Target="28001:[40426..41067).3" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4549..4579).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4549..4579).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[4549..4579).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4821..4829).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[4821..4829).1" />
<Link Source="10076:[3628..3685).1" Target="10076:[3592..3700).1" />
<Link Source="10076:[3628..3685).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[3628..3685).1" Target="EXTERNAL" />
<Link Source="10076:[3628..3685).1" Target="10076:[4821..4829).1" />
<Link Source="10076:[4815..4966).1" Target="10076:[3628..3685).1" />
<Link Source="10076:[4815..4966).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).4" Target="10076:[4437..4452).1" />
<Link Source="10076:[4815..4966).4" Target="25002:[4395..4432).19" />
<Link Source="10076:[4815..4966).4" Target="10076:[4815..4966).3" />
<Link Source="10076:[4815..4966).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).4" />
<Link Source="10076:[4815..4966).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[4932..4951).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4932..4951).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[4932..4951).1" Target="10076:[4815..4966).5" />
<Link Source="10076:[4982..5048).1" Target="10076:[4932..4951).1" />
<Link Source="10076:[4982..5048).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).2" Target="10076:[4549..4579).1" />
<Link Source="10076:[4982..5048).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).3" Target="10076:[4454..4498).1" />
<Link Source="10076:[4982..5048).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).4" Target="10076:[4500..4523).1" />
<Link Source="10076:[4982..5048).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4989..5047).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4982..5048).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5114..5126).1" Target="10076:[4982..5048).2" />
<Link Source="10076:[5114..5126).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5128..5172).1" Target="10076:[4982..5048).3" />
<Link Source="10076:[5128..5172).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5174..5197).1" Target="10076:[4982..5048).4" />
<Link Source="10076:[5174..5197).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5097..5112).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).2" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).2" Target="25002:[4395..4432).19" />
<Link Source="10076:[5277..5448).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).1" Target="10076:[5071..5759).1" />
<Link Source="10076:[5470..5538).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[5470..5538).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).3" Target="10076:[4989..5047).1" />
<Link Source="10077:[909..930).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[909..930).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[879..998).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[879..998).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[879..998).2" Target="10076:[5470..5538).3" />
<Link Source="10077:[698..707).1" Target="10077:[879..998).2" />
<Link Source="10077:[698..707).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[747..768).1" Target="10077:[879..998).2" />
<Link Source="10077:[747..768).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[798..808).1" Target="10077:[879..998).2" />
<Link Source="10077:[798..808).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[854..862).1" Target="10077:[879..998).2" />
<Link Source="10077:[854..862).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[964..972).1" Target="10077:[909..930).1" />
<Link Source="10077:[964..972).1" Target="10077:[879..998).2" />
<Link Source="10077:[964..972).1" Target="10076:[5470..5538).3" />
<Link Source="10076:[5470..5538).4" Target="10076:[5470..5538).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[879..998).2" />
<Link Source="10076:[5470..5538).4" Target="10077:[698..707).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[747..768).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[798..808).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[854..862).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[964..972).1" />
<Link Source="10076:[5470..5538).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[5114..5126).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[5128..5172).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[5174..5197).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5613).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[5552..5614).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1053..1090).1" Target="10076:[5552..5614).2" />
<Link Source="10077:[1053..1090).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1092..1108).1" Target="10076:[5552..5614).3" />
<Link Source="10077:[1092..1108).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1014..1370).1" Target="10076:[5470..5538).4" />
<Link Source="10077:[1014..1370).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1053..1090).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1092..1108).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).4" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).2" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).4" />
<Link Source="10077:[1142..1210).5" Target="10076:[5552..5613).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1039..1051).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1230..1239).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1053..1090).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1269..1290).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1092..1108).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1332..1342).1" Target="10076:[5552..5613).1" />
<Link Source="10076:[5552..5614).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[5097..5112).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5644..5663).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5628..5664).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2664..2780).1" Target="10076:[5470..5538).4" />
<Link Source="10077:[2664..2780).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2742..2765).1" Target="10077:[2693..2708).1" />
<Link Source="10077:[2742..2765).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2749..2764).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2742..2765).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2664..2780).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2852..2986).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2926..2971).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2877..2892).1" />
<Link Source="10077:[2926..2971).2" Target="10076:[5470..5538).4" />
<Link Source="10077:[2926..2971).2" Target="10077:[1230..1239).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1269..1290).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1332..1342).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).3" Target="10077:[2749..2764).1" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34678..34716).1" Target="10077:[34617..34644).1" />
<Link Source="10077:[34678..34716).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34685..34715).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[31025..31053).1" Target="10077:[34678..34716).1" />
<Link Source="10077:[31025..31053).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34572..34731).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[31087..31238).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[2926..2971).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[34685..34715).1" />
<Link Source="10077:[31258..31297).1" Target="EXTERNAL" />
<Link Source="10077:[31258..31297).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).2" Target="10077:[31490..32331).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[30985..32417).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).6" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).7" Target="10077:[34685..34715).1" />
<Link Source="10077:[31936..32331).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[31936..32331).1" Target="10077:[31490..32331).6" />
<Link Source="10077:[31936..32331).1" Target="10077:[31490..32331).2" />
<Link Source="10077:[31936..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31936..32331).2" Target="10077:[31490..32331).2" />
<Link Source="10077:[32131..32331).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[32131..32331).1" Target="10077:[31936..32331).1" />
<Link Source="10077:[32131..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[32131..32331).2" Target="10077:[31936..32331).1" />
<Link Source="10077:[32257..32312).1" Target="EXTERNAL" />
<Link Source="10077:[32257..32312).1" Target="10077:[32131..32331).1" />
<Link Source="10077:[32351..32402).1" Target="10077:[31025..31053).1" />
<Link Source="10077:[32351..32402).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[32257..32312).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[32358..32401).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32351..32402).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32504..32523).1" Target="10077:[32351..32402).2" />
<Link Source="10077:[32504..32523).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32504..32523).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32567..32606).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[32557..32607).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44182..44197).1" Target="10077:[32557..32607).2" />
<Link Source="10077:[44182..44197).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[44182..44197).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).3" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[44159..44180).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[44182..44197).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).3" Target="10077:[32567..32606).1" />
<Link Source="10077:[44342..44373).1" Target="10077:[32567..32606).1" />
<Link Source="10076:[875..902).1" Target="10077:[44335..44374).1" />
<Link Source="10076:[875..902).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[904..919).1" Target="10077:[44335..44374).2" />
<Link Source="10076:[904..919).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[853..1034).1" Target="10077:[44335..44374).3" />
<Link Source="10076:[853..1034).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[953..968).1" Target="10076:[875..902).1" />
<Link Source="10076:[953..968).1" Target="10076:[853..1034).1" />
<Link Source="10076:[953..968).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[904..919).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[853..1034).1" />
<Link Source="10076:[1000..1010).1" Target="10077:[44342..44373).1" />
<Link Source="10077:[32557..32607).3" Target="10077:[44335..44374).3" />
<Link Source="10077:[32557..32607).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32627..32647).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32670..32681).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[32433..34556).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[32670..32681).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[2066..2158).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[32131..32331).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[32670..32681).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[2110..2139).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[32665..34501).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32627..32647).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).2" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).3" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).1" />
<Link Source="10077:[32665..34501).4" Target="10076:[953..968).1" />
<Link Source="10077:[32665..34501).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32131..32331).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).5" Target="10077:[32358..32401).1" />
<Link Source="10076:[1241..1380).1" Target="10077:[32665..34501).4" />
<Link Source="10076:[1241..1380).1" Target="10077:[32665..34501).5" />
<Link Source="10076:[1307..1365).1" Target="10076:[1241..1380).1" />
<Link Source="10076:[1307..1365).1" Target="10077:[32665..34501).4" />
<Link Source="10076:[1307..1365).1" Target="10077:[32665..34501).5" />
<Link Source="10077:[33226..33266).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[33226..33266).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[33241..33265).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2877..2892).2" Target="10077:[33226..33266).1" />
<Link Source="10077:[2877..2892).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[39020..39048).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[39020..39048).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[38976..39245).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[38976..39245).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[39020..39048).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39170..39187).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[39082..39230).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[44888..44934).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44954..44972).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[44954..44972).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[44990..45616).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44888..44934).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[45553..45597).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[45331..45616).1" />
<Link Source="10077:[45553..45597).2" Target="10077:[45331..45616).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[45553..45597).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45678..46310).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[44823..44854).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[39170..39187).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46088..46248).2" Target="EXTERNAL" />
<Link Source="10077:[46088..46248).2" Target="10077:[45678..46310).2" />
<Link Source="10077:[46272..46291).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[46088..46248).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46328..46341).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[46328..46341).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[33241..33265).1" />
<Link Source="10077:[39220..39228).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[39220..39228).1" />
<Link Source="10077:[2294..2311).1" Target="10077:[39220..39228).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[2243..2331).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[46272..46291).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[2294..2311).1" />
<Link Source="10077:[2287..2312).1" Target="10076:[3592..3700).2" />
<Link Source="10077:[2287..2312).1" Target="10077:[39220..39228).1" />
<Link Source="10077:[39089..39229).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39298..39335).1" Target="10077:[39082..39230).1" />
<Link Source="10077:[39298..39335).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39337..39349).1" Target="10077:[39082..39230).3" />
<Link Source="10077:[39337..39349).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39351..39364).1" Target="10077:[2287..2312).1" />
<Link Source="10077:[39351..39364).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39261..44091).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[39261..44091).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39421..39431).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[1641..1732).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[46272..46291).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[1685..1713).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39298..39335).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39398..39590).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39089..39229).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39337..39349).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39626..39633).1" />
<Link Source="10077:[39610..39829).1" Target="EXTERNAL" />
<Link Source="10077:[39610..39829).1" Target="10077:[39766..39774).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39298..39335).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39610..39829).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39887..39935).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[39877..39936).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[39887..39935).1" />
<Link Source="10077:[44182..44197).2" Target="10077:[39877..39936).2" />
<Link Source="10077:[44182..44197).2" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).9" Target="10077:[44182..44197).2" />
<Link Source="10077:[44231..44317).9" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).11" Target="10077:[39887..39935).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[39089..39229).1" />
<Link Source="10077:[39956..39970).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39993..40004).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[2066..2158).2" Target="10077:[39261..44091).1" />
<Link Source="10077:[2066..2158).2" Target="10077:[39993..40004).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[2066..2158).2" />
<Link Source="10077:[2110..2139).2" Target="10077:[46272..46291).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[39993..40004).1" />
<Link Source="10077:[39988..44042).1" Target="10077:[2110..2139).2" />
<Link Source="10077:[39988..44042).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[39988..44042).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39956..39970).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).3" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[46272..46291).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).5" Target="10077:[39089..39229).1" />
<Link Source="10077:[40084..40108).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1843..1943).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1843..1943).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[1843..1943).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1887..1924).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[1887..1924).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[40133..43967).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[40133..43967).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[43302..43313).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[1456..1548).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1500..1529).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[1500..1529).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40075..40109).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[39298..39335).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[39337..39349).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).6" Target="10077:[40133..43967).1" />
<Link Source="10077:[43280..43373).1" Target="10077:[40133..43967).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43271..43374).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1459..1470).1" Target="10077:[43271..43374).3" />
<Link Source="10346:[1459..1470).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1472..1506).1" Target="10077:[43271..43374).4" />
<Link Source="10346:[1472..1506).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1508..1520).1" Target="10077:[43271..43374).5" />
<Link Source="10346:[1508..1520).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).1" Target="10077:[43271..43374).6" />
<Link Source="10346:[1399..2435).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1542..1546).1" Target="10346:[1459..1470).1" />
<Link Source="10346:[1542..1546).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).2" Target="10077:[43280..43373).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1542..1546).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).1" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1260..1291).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).2" Target="10286:[1247..1258).1" />
<Link Source="10286:[1317..1350).2" Target="10286:[1317..1350).1" />
<Link Source="10286:[1317..1350).2" Target="10346:[1399..2435).2" />
<Link Source="10286:[1364..1368).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1364..1368).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1364..1368).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1390..1400).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1390..1400).1" Target="10077:[39988..44042).4" />
<Link Source="10286:[1390..1400).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1390..1400).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1428..1444).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1428..1444).1" Target="10077:[39988..44042).4" />
<Link Source="10286:[1428..1444).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1428..1444).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1478..1494).1" Target="10286:[1260..1291).1" />
<Link Source="10286:[1478..1494).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1478..1494).1" Target="10346:[1399..2435).2" />
<Link Source="10346:[858..868).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[858..868).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[932..947).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[932..947).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[974..986).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[974..986).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1017..1033).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1017..1033).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1074..1100).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1074..1100).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1426..1457).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1572..1612).1" />
<Link Source="10346:[1572..1612).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1472..1506).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1626..1666).1" />
<Link Source="10346:[1626..1666).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1426..1457).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1682..1692).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1719..1832).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1719..1832).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1734).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1848..2424).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1848..2424).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1894..2409).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1894..2409).1" Target="10077:[39988..44042).4" />
<Link Source="10346:[1894..2409).1" Target="10346:[1848..2424).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1994..2057).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1399..2435).1" />
<Link Source="10077:[43503..43514).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[1456..1548).2" />
<Link Source="10077:[1500..1529).2" Target="10346:[1894..2409).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[43402..43944).1" Target="10077:[1500..1529).2" />
<Link Source="10077:[43402..43944).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[39298..39335).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43991..44002).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[2110..2139).3" Target="10077:[43991..44002).1" />
<Link Source="10077:[2110..2139).3" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).1" Target="10077:[2110..2139).3" />
<Link Source="10077:[43991..44023).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[43991..44023).2" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).3" Target="10077:[43271..43374).6" />
<Link Source="10077:[43991..44023).3" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).2" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).3" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[43991..44023).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[43991..44023).4" Target="10286:[1428..1444).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1390..1400).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1364..1368).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1478..1494).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1231..1520).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1682..1692).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1734).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[974..986).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1017..1033).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1074..1100).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[2079..2092).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1832).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1894..2409).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).5" Target="10077:[39988..44042).4" />
<Link Source="10077:[44062..44076).1" Target="10077:[43271..43374).6" />
<Link Source="10077:[44062..44076).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[2926..2971).8" Target="10077:[2877..2892).2" />
<Link Source="10077:[2926..2971).8" Target="10077:[44062..44076).1" />
<Link Source="10077:[2926..2971).8" Target="10077:[43991..44023).4" />
<Link Source="10077:[2926..2971).8" Target="10077:[33241..33265).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[39610..39829).1" />
<Link Source="10077:[33290..34322).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[33414..33451).1" Target="10077:[33290..34322).1" />
<Link Source="10346:[7369..7588).1" Target="10077:[2926..2971).8" />
<Link Source="10346:[7369..7588).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7405..7454).1" Target="10346:[7369..7588).1" />
<Link Source="10346:[7405..7454).1" Target="10077:[2926..2971).8" />
<Link Source="10346:[7405..7454).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7405..7454).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7472..7573).1" />
<Link Source="10346:[7472..7573).2" Target="10077:[33414..33451).1" />
<Link Source="10346:[7479..7503).1" Target="10346:[7472..7573).2" />
<Link Source="10346:[7479..7503).1" Target="10077:[33414..33451).1" />
<Link Source="10077:[33373..33481).1" Target="10346:[7479..7503).1" />
<Link Source="10077:[33373..33481).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[33290..34322).1" />
<Link Source="10077:[33509..34299).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33509..34299).1" Target="EXTERNAL" />
<Link Source="10077:[33509..34299).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33780..33855).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[33780..33855).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[33780..33855).2" Target="10077:[2926..2971).8" />
<Link Source="10077:[33780..33855).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[33780..33855).3" Target="10077:[33509..34299).1" />
<Link Source="10077:[33795..33854).1" Target="10077:[33509..34299).1" />
<Link Source="10376:[838..863).1" Target="10077:[33780..33855).1" />
<Link Source="10376:[838..863).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[865..876).1" Target="10077:[33780..33855).2" />
<Link Source="10376:[865..876).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[799..1016).1" Target="10077:[33780..33855).3" />
<Link Source="10376:[799..1016).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[898..902).1" Target="10376:[865..876).1" />
<Link Source="10376:[898..902).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[799..1016).2" Target="10077:[33795..33854).1" />
<Link Source="10382:[520..531).1" Target="10376:[898..902).1" />
<Link Source="10382:[520..531).1" Target="10376:[799..1016).2" />
<Link Source="10382:[486..580).1" Target="10376:[799..1016).1" />
<Link Source="10382:[486..580).1" Target="10376:[799..1016).2" />
<Link Source="10382:[553..557).1" Target="10382:[520..531).1" />
<Link Source="10382:[553..557).1" Target="10376:[799..1016).2" />
<Link Source="10382:[486..580).2" Target="10376:[799..1016).2" />
<Link Source="10286:[1247..1258).2" Target="10382:[553..557).1" />
<Link Source="10286:[1247..1258).2" Target="10382:[486..580).2" />
<Link Source="10286:[1231..1520).2" Target="10382:[486..580).1" />
<Link Source="10286:[1231..1520).2" Target="10382:[486..580).2" />
<Link Source="10286:[1260..1291).2" Target="10382:[486..580).2" />
<Link Source="10286:[1317..1350).5" Target="10382:[486..580).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1247..1258).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1317..1350).5" />
<Link Source="10286:[1317..1350).6" Target="10382:[486..580).2" />
<Link Source="10286:[1390..1400).2" Target="10286:[1247..1258).2" />
<Link Source="10286:[1390..1400).2" Target="10077:[33373..33481).1" />
<Link Source="10286:[1390..1400).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1390..1400).2" Target="10382:[486..580).2" />
<Link Source="10286:[1428..1444).2" Target="10286:[1247..1258).2" />
<Link Source="10286:[1428..1444).2" Target="10077:[33373..33481).1" />
<Link Source="10286:[1428..1444).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1428..1444).2" Target="10382:[486..580).2" />
<Link Source="10286:[1478..1494).2" Target="10286:[1260..1291).2" />
<Link Source="10286:[1478..1494).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1478..1494).2" Target="10382:[486..580).2" />
<Link Source="10376:[691..701).1" Target="10376:[799..1016).1" />
<Link Source="10376:[691..701).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[765..786).1" Target="10376:[799..1016).1" />
<Link Source="10376:[765..786).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[928..968).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[928..968).2" Target="10376:[838..863).1" />
<Link Source="10376:[928..968).2" Target="10376:[928..968).1" />
<Link Source="10376:[928..968).2" Target="10077:[33795..33854).1" />
<Link Source="10376:[982..992).1" Target="10376:[838..863).1" />
<Link Source="10376:[982..992).1" Target="10376:[799..1016).1" />
<Link Source="10376:[982..992).1" Target="10077:[33795..33854).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[34346..34420).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[34361..34419).1" Target="10076:[1307..1365).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34346..34420).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3452..3756).1" Target="10077:[33780..33855).3" />
<Link Source="10307:[3452..3756).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).1" Target="10307:[3452..3756).1" />
<Link Source="10307:[3547..3745).1" Target="10286:[1390..1400).2" />
<Link Source="10307:[3547..3745).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).2" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).2" Target="10077:[34361..34419).1" />
<Link Source="10307:[3555..3600).1" Target="10077:[34361..34419).1" />
<Link Source="10298:[471..492).6" Target="10307:[3547..3745).1" />
<Link Source="10298:[471..492).6" Target="10307:[3555..3600).1" />
<Link Source="10298:[494..511).6" Target="10307:[3547..3745).2" />
<Link Source="10298:[494..511).6" Target="10307:[3555..3600).1" />
<Link Source="10307:[3547..3745).4" Target="10307:[3496..3521).1" />
<Link Source="10307:[3547..3745).4" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).7" Target="10298:[471..492).6" />
<Link Source="10307:[3547..3745).7" Target="10307:[3547..3745).4" />
<Link Source="10307:[3547..3745).7" Target="10077:[34361..34419).1" />
<Link Source="10307:[3554..3645).1" Target="10307:[3547..3745).7" />
<Link Source="10307:[3554..3645).1" Target="10077:[34361..34419).1" />
<Link Source="10077:[34444..34455).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2110..2139).4" Target="10077:[34444..34455).1" />
<Link Source="10077:[2110..2139).4" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).1" Target="10077:[2110..2139).4" />
<Link Source="10077:[34444..34482).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[34444..34482).2" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).3" Target="10307:[3554..3645).1" />
<Link Source="10077:[34444..34482).3" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).2" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).3" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).1" />
<Link Source="10077:[34444..34482).4" Target="10076:[953..968).1" />
<Link Source="10077:[34444..34482).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[34444..34482).4" Target="10286:[1428..1444).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1390..1400).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1247..1258).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1478..1494).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1231..1520).2" />
<Link Source="10077:[34444..34482).4" Target="10376:[982..992).1" />
<Link Source="10077:[34444..34482).4" Target="10376:[765..786).1" />
<Link Source="10077:[34444..34482).4" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).4" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).5" Target="10076:[1307..1365).1" />
<Link Source="10077:[34521..34541).1" Target="10307:[3554..3645).1" />
<Link Source="10077:[34521..34541).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2926..2971).12" Target="10077:[2926..2971).2" />
<Link Source="10077:[2926..2971).12" Target="10077:[34521..34541).1" />
<Link Source="10077:[2926..2971).12" Target="10077:[34444..34482).4" />
<Link Source="10077:[2926..2971).12" Target="10077:[2749..2764).1" />
<Link Source="10076:[5678..5718).1" Target="10076:[5470..5538).4" />
<Link Source="10076:[5678..5718).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5678..5718).2" Target="10076:[5071..5759).1" />
<Link Source="10076:[5678..5718).2" Target="10077:[2926..2971).12" />
<Link Source="10076:[5678..5718).2" Target="10076:[5678..5718).1" />
<Link Source="10076:[5678..5718).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5734..5748).1" Target="10077:[2926..2971).12" />
<Link Source="10076:[5734..5748).1" Target="10076:[4989..5047).1" />
<Link Source="25002:[4395..4432).22" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).22" Target="10076:[5734..5748).1" />
<Link Source="25002:[4395..4432).22" Target="10076:[5678..5718).2" />
<Link Source="25002:[4395..4432).22" Target="28001:[40426..41067).3" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3247..3264).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3290..3331).1" />
<Link Source="10307:[3290..3331).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).1" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).2" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).2" Target="25002:[4395..4432).22" />
<Link Source="10307:[3345..3429).2" Target="10307:[3228..3245).1" />
<Link Source="10307:[3345..3429).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).4" Target="10307:[3247..3264).1" />
<Link Source="10307:[3345..3429).4" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).5" Target="25002:[4395..4432).1" />
<Link Source="10307:[3352..3428).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3345..3429).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1085..1102).1" Target="10307:[3345..3429).2" />
<Link Source="10307:[1085..1102).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1104..1135).1" Target="10307:[3345..3429).4" />
<Link Source="10307:[1104..1135).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).1" Target="10307:[3345..3429).5" />
<Link Source="10307:[1028..1341).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[1072..1083).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[1085..1102).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).2" Target="10307:[3352..3428).1" />
<Link Source="10286:[1549..1560).1" Target="10307:[1161..1165).1" />
<Link Source="10286:[1549..1560).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1562..1579).1" Target="10307:[1167..1172).1" />
<Link Source="10286:[1562..1579).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1532..2083).1" Target="10307:[1028..1341).1" />
<Link Source="10286:[1532..2083).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[726..773).4" Target="10286:[1532..2083).1" />
<Link Source="10286:[726..773).4" Target="10307:[1028..1341).2" />
<Link Source="10286:[815..820).4" Target="10286:[1532..2083).1" />
<Link Source="10286:[815..820).4" Target="10307:[1028..1341).2" />
<Link Source="10286:[2975..3015).4" Target="10286:[1532..2083).1" />
<Link Source="10286:[2975..3015).4" Target="10307:[1028..1341).2" />
<Link Source="10286:[17802..17818).4" Target="10286:[1532..2083).1" />
<Link Source="10286:[17802..17818).4" Target="10307:[1028..1341).2" />
<Link Source="10286:[18200..18223).4" Target="10286:[1532..2083).1" />
<Link Source="10286:[18200..18223).4" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).2" Target="10286:[1549..1560).1" />
<Link Source="10286:[1605..1638).2" Target="10286:[1605..1638).1" />
<Link Source="10286:[1605..1638).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1688..1781).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).2" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1708..1779).1" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).7" Target="10286:[1688..1781).1" />
<Link Source="10298:[471..492).7" Target="10286:[1708..1779).1" />
<Link Source="10298:[494..511).7" Target="10286:[1688..1781).2" />
<Link Source="10298:[494..511).7" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1820..1963).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1820..1963).2" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1840..1888).1" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).8" Target="10286:[1820..1963).1" />
<Link Source="10298:[471..492).8" Target="10286:[1840..1888).1" />
<Link Source="10298:[494..511).8" Target="10286:[1820..1963).2" />
<Link Source="10298:[494..511).8" Target="10286:[1840..1888).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[1977..1981).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[2003..2013).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[2003..2013).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2003..2013).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[2036..2052).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[2036..2052).1" Target="25002:[4395..4432).22" />
<Link Source="10286:[2036..2052).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2036..2052).1" Target="10307:[1028..1341).2" />
<Link Source="10307:[683..708).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[683..708).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1104..1135).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1206..1253).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[3352..3428).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1104..1135).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[3352..3428).1" />
<Link Source="25002:[4395..4432).25" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).25" Target="10307:[3345..3429).5" />
<Link Source="25002:[4395..4432).25" Target="25002:[4395..4432).22" />
<Link Source="25002:[4395..4432).25" Target="10286:[2036..2052).1" />
<Link Source="25002:[4395..4432).25" Target="10286:[2003..2013).1" />
<Link Source="25002:[4395..4432).25" Target="10286:[1977..1981).1" />
<Link Source="25002:[4395..4432).25" Target="10286:[17802..17818).4" />
<Link Source="25002:[4395..4432).25" Target="10286:[18200..18223).4" />
<Link Source="25002:[4395..4432).25" Target="10307:[1273..1298).1" />
<Link Source="25002:[4395..4432).25" Target="28001:[40426..41067).3" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).1" Target="10319:[13685..13708).1" />
<Link Source="10319:[13850..13948).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13850..13948).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).3" Target="10319:[13737..13783).1" />
<Link Source="10319:[13850..13948).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).4" Target="10319:[13785..13824).1" />
<Link Source="10319:[13850..13948).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13863..13947).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13850..13948).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14956..14981).1" Target="10319:[13850..13948).2" />
<Link Source="10319:[14956..14981).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14983..15029).1" Target="10319:[13850..13948).3" />
<Link Source="10319:[14983..15029).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15031..15070).1" Target="10319:[13850..13948).4" />
<Link Source="10319:[15031..15070).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[15096..15130).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[14931..14954).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).4" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[15146..15291).4" />
<Link Source="10319:[15146..15291).5" Target="10319:[13863..13947).1" />
<Link Source="10319:[15159..15290).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[15146..15291).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20027..20052).1" Target="10319:[15146..15291).2" />
<Link Source="10319:[20027..20052).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20054..20093).1" Target="10319:[15146..15291).3" />
<Link Source="10319:[20054..20093).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20095..20126).1" Target="10319:[15146..15291).5" />
<Link Source="10319:[20095..20126).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[14862..16302).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20152..24647).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20152..24647).1" Target="25002:[4395..4432).25" />
<Link Source="10319:[20152..24647).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).2" Target="10319:[20027..20052).1" />
<Link Source="10319:[20508..20675).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).3" Target="10319:[20054..20093).1" />
<Link Source="10319:[20508..20675).3" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).4" Target="10319:[20095..20126).1" />
<Link Source="10319:[20508..20675).4" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).5" Target="10319:[20152..24647).1" />
<Link Source="10319:[20515..20674).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20508..20675).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41889..41914).1" Target="10319:[20508..20675).2" />
<Link Source="10319:[41889..41914).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41929..41968).1" Target="10319:[20508..20675).3" />
<Link Source="10319:[41929..41968).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41983..42014).1" Target="10319:[20508..20675).4" />
<Link Source="10319:[41983..42014).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42029..42063).1" Target="10319:[20508..20675).5" />
<Link Source="10319:[42029..42063).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[19916..30085).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[42089..42141).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[42839..42937).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42821..42938).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63885..63919).1" Target="10319:[42821..42938).2" />
<Link Source="10319:[63885..63919).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63934..63945).1" Target="10319:[42821..42938).3" />
<Link Source="10319:[63934..63945).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63960..63969).1" Target="10319:[42821..42938).4" />
<Link Source="10319:[63960..63969).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63984..64009).1" Target="10319:[42821..42938).6" />
<Link Source="10319:[63984..64009).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[63885..63919).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[64035..64445).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[42839..42937).1" />
<Link Source="10319:[64461..64473).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[64461..64473).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[42821..42938).7" />
<Link Source="10319:[42952..43079).2" Target="10319:[42952..43079).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[20515..20674).1" />
<Link Source="10354:[10975..11012).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10975..11012).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).3" Target="10354:[10826..10838).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[11026..11097).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[10809..10838).1" Target="10354:[11142..11154).1" />
<Link Source="10319:[43108..43134).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11244..11285).1" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[11026..11097).1" />
<Link Source="10354:[11244..11285).2" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).3" Target="10319:[43108..43134).1" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).2" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).1" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3068..3073).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3068..3073).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3200..3211).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3200..3211).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3319..3325).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3319..3325).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3380..3385).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3380..3385).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3474..3479).1" Target="10354:[3419..3448).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3501..3506).1" Target="EXTERNAL" />
<Link Source="10354:[3501..3506).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3501..3506).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3587).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3557).1" Target="10354:[3546..3587).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3615).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3607).1" Target="10354:[3601..3615).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).2" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3501..3506).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3557).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3601..3607).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3474..3479).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3587).1" />
<Link Source="10354:[11244..11285).4" Target="10319:[43108..43134).1" />
<Link Source="10354:[11312..11328).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[3684..3818).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3684..3818).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).1" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).2" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).3" Target="10354:[3720..3803).2" />
<Link Source="10354:[3720..3803).3" Target="10354:[11312..11328).1" />
<Link Source="10354:[11299..11330).1" Target="10354:[3720..3803).1" />
<Link Source="10354:[11299..11330).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11344..11360).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[11344..11360).1" Target="10319:[43108..43134).1" />
<Link Source="10319:[43095..43135).1" Target="10354:[11344..11360).1" />
<Link Source="10319:[43095..43135).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43173..43245).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43149..43246).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50330..50355).1" Target="10319:[43149..43246).2" />
<Link Source="10319:[50330..50355).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[50313..50328).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[51282..51325).1" Target="EXTERNAL" />
<Link Source="10319:[51282..51325).1" Target="10319:[50381..51340).1" />
<Link Source="10319:[43262..43312).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[41929..41968).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[51282..51325).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[43262..43312).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43489).1" Target="10319:[20515..20674).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43490).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43490).2" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43490).3" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43490).6" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43490).7" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43490).10" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[942..1750).1" Target="10319:[41732..45579).1" />
<Link Source="10312:[942..1750).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1322..1739).1" Target="10312:[1186..1207).1" />
<Link Source="10312:[1322..1739).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1326..1357).1" Target="10319:[43326..43489).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1322..1739).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1326..1357).1" />
<Link Source="10353:[7556..7642).1" Target="10353:[7504..7530).1" />
<Link Source="10353:[7556..7642).1" Target="EXTERNAL" />
<Link Source="10353:[7556..7642).1" Target="10312:[1326..1357).1" />
<Link Source="10312:[1585..1724).1" Target="10312:[994..1013).1" />
<Link Source="10312:[1585..1724).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).2" Target="10312:[1028..1062).1" />
<Link Source="10312:[1585..1724).2" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).3" Target="10312:[1077..1093).1" />
<Link Source="10312:[1585..1724).3" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).4" Target="10312:[1108..1117).1" />
<Link Source="10312:[1585..1724).4" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).5" Target="10312:[1132..1171).1" />
<Link Source="10312:[1585..1724).5" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).6" Target="10312:[1186..1207).1" />
<Link Source="10312:[1585..1724).6" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).7" Target="10312:[1222..1235).1" />
<Link Source="10312:[1585..1724).7" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).8" Target="10312:[1250..1296).1" />
<Link Source="10312:[1585..1724).8" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1723).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1724).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1724).2" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1724).3" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1724).4" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1724).5" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1724).6" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1724).7" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1724).8" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[942..1750).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[5755..5789).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[6044..6433).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[1585..1723).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[5721..5740).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).2" Target="10312:[5804..5815).1" />
<Link Source="10312:[6110..6221).2" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).3" Target="10312:[5830..5839).1" />
<Link Source="10312:[6110..6221).3" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).4" Target="10312:[5854..5893).1" />
<Link Source="10312:[6110..6221).4" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).5" Target="10312:[5908..5929).1" />
<Link Source="10312:[6110..6221).5" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).6" Target="10312:[5944..5957).1" />
<Link Source="10312:[6110..6221).6" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).7" Target="10312:[5972..6018).1" />
<Link Source="10312:[6110..6221).7" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6220).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6221).1" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6221).2" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6221).3" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6221).4" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6221).5" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6221).6" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6221).7" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[5663..6444).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3905..3919).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).9" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).9" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).9" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).9" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).10" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).11" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).11" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).11" Target="10354:[3720..3803).10" />
<Link Source="10354:[3720..3803).11" Target="10312:[3905..3919).1" />
<Link Source="10312:[3892..3921).1" Target="10354:[3720..3803).9" />
<Link Source="10312:[3892..3921).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3948..3966).1" Target="10312:[6110..6220).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3935..3968).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4750..4847).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4750..4847).1" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4863..5000).1" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5079..5183).1" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[5079..5183).1" />
<Link Source="10353:[5197..5323).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).1" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[4698..4724).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[5485..5759).1" />
<Link Source="10353:[5485..5759).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).1" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[4698..4724).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[5775..5979).1" />
<Link Source="10353:[5775..5979).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5995..6029).1" Target="10353:[5775..5979).3" />
<Link Source="10353:[5995..6029).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6002..6028).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[5995..6029).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6343..6358).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6384..6410).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6002..6028).1" />
<Link Source="10312:[3984..4005).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[3645..5112).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).2" Target="10312:[6110..6220).1" />
<Link Source="10312:[4060..4080).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[3696..3715).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4962..4966).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4919..5009).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[4058..4122).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[4094..4107).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4955..4994).1" Target="10354:[4094..4107).1" />
<Link Source="10354:[4955..4994).1" Target="10312:[4060..4080).1" />
<Link Source="10312:[4019..5073).4" Target="10354:[4955..4994).1" />
<Link Source="10312:[4019..5073).4" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).4" />
<Link Source="10312:[4019..5073).5" Target="10312:[6110..6220).1" />
<Link Source="10312:[4134..4806).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4134..4806).2" Target="10312:[3984..4005).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4134..4806).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4019..5073).5" />
<Link Source="10312:[4534..4658).1" Target="10312:[3696..3715).1" />
<Link Source="10312:[4534..4658).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).2" Target="10312:[3717..3728).1" />
<Link Source="10312:[4534..4658).2" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).3" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).4" Target="10312:[3741..3780).1" />
<Link Source="10312:[4534..4658).4" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).5" Target="10312:[3782..3803).1" />
<Link Source="10312:[4534..4658).5" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).6" Target="10312:[3645..5112).1" />
<Link Source="10312:[4534..4658).6" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).7" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).7" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).8" Target="10312:[3820..3866).1" />
<Link Source="10312:[4534..4658).8" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4657).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4658).1" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4658).2" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4658).3" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4658).4" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4658).5" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4658).6" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4658).7" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4658).8" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4019..5073).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[4534..4658).9" Target="10312:[4134..4806).2" />
<Link Source="10312:[4685..4699).1" Target="10312:[4134..4806).2" />
<Link Source="10354:[3684..3818).3" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).3" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).17" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).17" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).17" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).17" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).18" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).19" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).19" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).19" Target="10354:[3720..3803).18" />
<Link Source="10354:[3720..3803).19" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).1" Target="10354:[3720..3803).17" />
<Link Source="10312:[4680..4787).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4826..5058).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).1" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4826..5058).2" Target="10312:[4019..5073).5" />
<Link Source="10382:[1340..1359).1" Target="10312:[4534..4658).1" />
<Link Source="10382:[1340..1359).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1361..1372).1" Target="10312:[4534..4658).2" />
<Link Source="10382:[1361..1372).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1374..1383).1" Target="10312:[4534..4658).3" />
<Link Source="10382:[1374..1383).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1385..1424).1" Target="10312:[4534..4658).4" />
<Link Source="10382:[1385..1424).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1426..1447).1" Target="10312:[4534..4658).5" />
<Link Source="10382:[1426..1447).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1449..1470).1" Target="10312:[4534..4658).6" />
<Link Source="10382:[1449..1470).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1472..1485).1" Target="10312:[4534..4658).7" />
<Link Source="10382:[1472..1485).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1487..1533).1" Target="10312:[5335..5381).1" />
<Link Source="10382:[1487..1533).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1275..1939).1" Target="10312:[4019..5073).5" />
<Link Source="10382:[1275..1939).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1572..1586).1" Target="10312:[4534..4657).1" />
<Link Source="10354:[3684..3818).4" Target="10382:[1340..1359).1" />
<Link Source="10354:[3684..3818).4" Target="10382:[1572..1586).1" />
<Link Source="10354:[3720..3803).25" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).25" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).25" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).25" Target="10382:[1572..1586).1" />
<Link Source="10354:[3720..3803).26" Target="10382:[1572..1586).1" />
<Link Source="10354:[3720..3803).27" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[3720..3803).26" />
<Link Source="10354:[3720..3803).27" Target="10382:[1572..1586).1" />
<Link Source="10382:[1559..1588).1" Target="10354:[3720..3803).25" />
<Link Source="10382:[1559..1588).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1619..1629).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[913..1046).1" Target="10382:[1275..1939).1" />
<Link Source="10382:[913..1046).1" Target="10382:[1619..1629).1" />
<Link Source="10382:[949..1031).1" Target="EXTERNAL" />
<Link Source="10382:[949..1031).1" Target="10382:[1619..1629).1" />
<Link Source="10382:[1604..1691).1" Target="10382:[949..1031).1" />
<Link Source="10382:[1604..1691).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1604..1691).2" Target="10382:[1426..1447).1" />
<Link Source="10382:[1604..1691).2" Target="10382:[1604..1691).1" />
<Link Source="10382:[1604..1691).2" Target="10312:[4534..4657).1" />
<Link Source="10382:[1604..1691).3" Target="10312:[4534..4657).1" />
<Link Source="10382:[1737..1753).1" Target="10312:[4534..4657).1" />
<Link Source="10376:[1542..2071).1" Target="10382:[1275..1939).1" />
<Link Source="10376:[1542..2071).1" Target="10382:[1737..1753).1" />
<Link Source="10376:[1578..2009).1" Target="10382:[1737..1753).1" />
<Link Source="10376:[1578..2009).2" Target="10376:[1542..2071).1" />
<Link Source="10376:[1578..2009).2" Target="10319:[50381..51340).1" />
<Link Source="10376:[1578..2009).2" Target="10376:[1578..2009).1" />
<Link Source="10376:[1578..2009).2" Target="10382:[1737..1753).1" />
<Link Source="10376:[1653..1717).1" Target="10376:[1578..2009).2" />
<Link Source="10376:[1739..1899).1" Target="10376:[1542..2071).1" />
<Link Source="10376:[1739..1899).1" Target="10319:[50381..51340).1" />
<Link Source="10376:[1739..1899).1" Target="10376:[1578..2009).2" />
<Link Source="10376:[1921..1990).1" Target="10376:[1542..2071).1" />
<Link Source="10376:[1921..1990).1" Target="10319:[50381..51340).1" />
<Link Source="10376:[1921..1990).1" Target="10376:[1578..2009).2" />
<Link Source="10376:[1921..1990).2" Target="10376:[1653..1717).1" />
<Link Source="10376:[1921..1990).2" Target="10376:[1578..2009).2" />
<Link Source="10376:[1921..1990).3" Target="10376:[1578..2009).2" />
<Link Source="10376:[2027..2056).1" Target="10376:[1542..2071).1" />
<Link Source="10376:[2027..2056).1" Target="10376:[1921..1990).2" />
<Link Source="10376:[2027..2056).1" Target="10382:[1737..1753).1" />
<Link Source="10382:[1707..1928).1" Target="10376:[2027..2056).1" />
<Link Source="10382:[1707..1928).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1707..1928).2" Target="10382:[1707..1928).1" />
<Link Source="10382:[1707..1928).2" Target="10382:[1361..1372).1" />
<Link Source="10382:[1707..1928).2" Target="10376:[1921..1990).2" />
<Link Source="10382:[1707..1928).2" Target="10312:[4534..4657).1" />
<Link Source="10312:[4534..4658).21" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).21" Target="10382:[1707..1928).2" />
<Link Source="10312:[4534..4658).22" Target="10312:[3741..3780).1" />
<Link Source="10312:[4534..4658).22" Target="10382:[1707..1928).2" />
<Link Source="10312:[4534..4658).23" Target="10312:[3782..3803).1" />
<Link Source="10312:[4534..4658).23" Target="10382:[1707..1928).2" />
<Link Source="10312:[4534..4658).25" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).25" Target="10382:[1707..1928).2" />
<Link Source="10312:[4534..4658).26" Target="10382:[1487..1533).1" />
<Link Source="10312:[4534..4658).26" Target="10382:[1707..1928).2" />
<Link Source="10346:[10629..10648).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10650..10661).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10663..10672).1" Target="10312:[4534..4658).21" />
<Link Source="10346:[10663..10672).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10674..10713).1" Target="10312:[4534..4658).22" />
<Link Source="10346:[10674..10713).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10715..10736).1" Target="10312:[4534..4658).23" />
<Link Source="10346:[10715..10736).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10738..10759).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10761..10774).1" Target="10312:[4534..4658).25" />
<Link Source="10346:[10761..10774).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10776..10822).1" Target="10312:[4534..4658).26" />
<Link Source="10346:[10776..10822).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10564..12467).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10861..10875).1" Target="10382:[1707..1928).2" />
<Link Source="10354:[3684..3818).6" Target="10346:[10629..10648).1" />
<Link Source="10354:[3684..3818).6" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).41" Target="10354:[3684..3818).6" />
<Link Source="10354:[3720..3803).41" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).41" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).41" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).42" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).43" Target="10354:[3684..3818).6" />
<Link Source="10354:[3720..3803).43" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).43" Target="10354:[3720..3803).42" />
<Link Source="10354:[3720..3803).43" Target="10346:[10861..10875).1" />
<Link Source="10346:[10848..10877).1" Target="10354:[3720..3803).41" />
<Link Source="10346:[10848..10877).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10897..10914).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[7666..7775).1" Target="10346:[10564..12467).1" />
<Link Source="10346:[7666..7775).1" Target="10346:[10897..10914).1" />
<Link Source="10346:[7672..7773).1" Target="10346:[7666..7775).1" />
<Link Source="10346:[7672..7773).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[7672..7773).1" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).1" Target="10346:[10897..10914).1" />
<Link Source="10346:[10893..11127).1" Target="10346:[7672..7773).1" />
<Link Source="10346:[10893..11127).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[11143..11188).1" Target="10346:[10674..10713).1" />
<Link Source="10346:[11143..11188).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[11157..11187).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[3460..3499).1" Target="10346:[11143..11188).1" />
<Link Source="10346:[3460..3499).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3423..3863).1" Target="10346:[10564..12467).1" />
<Link Source="10346:[3423..3863).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3525..3638).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3525..3638).2" Target="10346:[3423..3863).1" />
<Link Source="10346:[3525..3638).2" Target="10382:[1707..1928).2" />
<Link Source="10346:[3525..3638).2" Target="10346:[3525..3638).1" />
<Link Source="10346:[3525..3638).2" Target="10346:[11157..11187).1" />
<Link Source="10346:[3654..3816).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3654..3816).2" Target="10346:[3423..3863).1" />
<Link Source="10346:[3654..3816).2" Target="10382:[1707..1928).2" />
<Link Source="10346:[3654..3816).2" Target="10346:[3654..3816).1" />
<Link Source="10346:[3654..3816).2" Target="10346:[11157..11187).1" />
<Link Source="10346:[3712..3801).1" Target="10346:[3423..3863).1" />
<Link Source="10346:[3712..3801).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[3712..3801).1" Target="10346:[3654..3816).2" />
<Link Source="10346:[3712..3801).2" Target="10346:[3460..3499).1" />
<Link Source="10346:[3712..3801).2" Target="10346:[3654..3816).2" />
<Link Source="10346:[3712..3801).4" Target="10346:[3654..3816).2" />
<Link Source="10345:[2889..2923).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2889..2923).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[2938..2962).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2938..2962).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[2977..3016).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2977..3016).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3031..3043).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[3031..3043).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3069..3118).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3102..3117).1" Target="10345:[3069..3118).1" />
<Link Source="10345:[3102..3117).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3132..3193).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3171..3192).1" Target="10345:[3132..3193).1" />
<Link Source="10345:[3171..3192).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3207..4163).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[3207..4163).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[3207..4163).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3299..3362).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[3299..3362).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3476..3483).1" Target="10345:[3031..3043).1" />
<Link Source="10345:[3476..3483).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3476..3483).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3530..3552).1" />
<Link Source="10345:[3571..3619).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3571..3619).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).2" Target="10345:[3458..3553).1" />
<Link Source="10345:[4179..4307).2" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).2" Target="10345:[4179..4307).1" />
<Link Source="10345:[4179..4307).2" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).4" Target="10345:[3571..3619).1" />
<Link Source="10345:[4179..4307).4" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).4" Target="10345:[4179..4307).1" />
<Link Source="10345:[4179..4307).4" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).5" Target="10345:[4179..4307).2" />
<Link Source="10345:[4179..4307).5" Target="10345:[4179..4307).4" />
<Link Source="10345:[4179..4307).5" Target="10346:[3712..3801).4" />
<Link Source="10345:[4279..4292).1" Target="10345:[922..1186).1" />
<Link Source="10345:[4279..4292).1" Target="10345:[4179..4307).5" />
<Link Source="10346:[3832..3852).1" Target="10346:[3423..3863).1" />
<Link Source="10346:[3832..3852).1" Target="10345:[4279..4292).1" />
<Link Source="10346:[3832..3852).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[11258..12246).1" Target="10346:[10715..10736).1" />
<Link Source="10346:[11258..12246).1" Target="EXTERNAL" />
<Link Source="10346:[11258..12246).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[11258..12246).2" Target="10382:[1707..1928).2" />
<Link Source="10346:[11258..12246).5" Target="10346:[10564..12467).1" />
<Link Source="10346:[11258..12246).5" Target="10345:[4279..4292).1" />
<Link Source="10346:[11258..12246).5" Target="10346:[11258..12246).2" />
<Link Source="10346:[11258..12246).5" Target="10382:[1707..1928).2" />
<Link Source="10346:[11258..12246).6" Target="10346:[11258..12246).1" />
<Link Source="10346:[11258..12246).6" Target="10346:[11258..12246).5" />
<Link Source="10346:[11258..12246).6" Target="10382:[1707..1928).2" />
<Link Source="10346:[11369..11508).1" Target="10346:[10629..10648).1" />
<Link Source="10346:[11369..11508).1" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).2" Target="10346:[10564..12467).1" />
<Link Source="10346:[11369..11508).2" Target="10345:[4279..4292).1" />
<Link Source="10346:[11369..11508).2" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).3" Target="10346:[10650..10661).1" />
<Link Source="10346:[11369..11508).3" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).4" Target="10346:[10663..10672).1" />
<Link Source="10346:[11369..11508).4" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).5" Target="10346:[10674..10713).1" />
<Link Source="10346:[11369..11508).5" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).6" Target="10346:[10715..10736).1" />
<Link Source="10346:[11369..11508).6" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).7" Target="10346:[10738..10759).1" />
<Link Source="10346:[11369..11508).7" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).8" Target="10346:[10761..10774).1" />
<Link Source="10346:[11369..11508).8" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).9" Target="10346:[10776..10822).1" />
<Link Source="10346:[11369..11508).9" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11507).1" Target="10346:[11258..12246).6" />
<Link Source="10312:[7652..7671).1" Target="10346:[11369..11508).1" />
<Link Source="10312:[7652..7671).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7673..7703).1" Target="10346:[11369..11508).2" />
<Link Source="10312:[7673..7703).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7705..7716).1" Target="10346:[11369..11508).3" />
<Link Source="10312:[7705..7716).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7718..7727).1" Target="10346:[11369..11508).4" />
<Link Source="10312:[7718..7727).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7729..7768).1" Target="10346:[11369..11508).5" />
<Link Source="10312:[7729..7768).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7770..7791).1" Target="10346:[11369..11508).6" />
<Link Source="10312:[7770..7791).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7793..7814).1" Target="10346:[11369..11508).7" />
<Link Source="10312:[7793..7814).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7816..7829).1" Target="10346:[11369..11508).8" />
<Link Source="10312:[7816..7829).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7831..7877).1" Target="10346:[11369..11508).9" />
<Link Source="10312:[7831..7877).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7615..8420).1" Target="10346:[10564..12467).1" />
<Link Source="10312:[7615..8420).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7903..7936).1" Target="10312:[7770..7791).1" />
<Link Source="10312:[7903..7936).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7916..7934).1" Target="10346:[11369..11507).1" />
<Link Source="10353:[4698..4724).2" Target="10312:[7903..7936).1" />
<Link Source="10353:[4698..4724).2" Target="10312:[7916..7934).1" />
<Link Source="10353:[4750..4847).3" Target="10353:[4698..4724).2" />
<Link Source="10353:[4750..4847).3" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).3" Target="10312:[7916..7934).1" />
<Link Source="10353:[4863..5000).5" Target="10353:[4698..4724).2" />
<Link Source="10353:[4863..5000).5" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).5" Target="10312:[7916..7934).1" />
<Link Source="10353:[4863..5000).6" Target="10312:[7916..7934).1" />
<Link Source="10353:[5079..5183).3" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).3" Target="10312:[7916..7934).1" />
<Link Source="10353:[5197..5323).4" Target="10353:[4698..4724).2" />
<Link Source="10353:[5197..5323).4" Target="10353:[5079..5183).3" />
<Link Source="10353:[5197..5323).4" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).7" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).7" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).8" Target="10353:[4698..4724).2" />
<Link Source="10353:[5485..5759).8" Target="10353:[5485..5759).7" />
<Link Source="10353:[5485..5759).8" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).9" Target="10312:[7916..7934).1" />
<Link Source="10353:[5775..5979).5" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).5" Target="10312:[7916..7934).1" />
<Link Source="10353:[5775..5979).7" Target="10353:[4698..4724).2" />
<Link Source="10353:[5775..5979).7" Target="10353:[5775..5979).5" />
<Link Source="10353:[5775..5979).7" Target="10312:[7916..7934).1" />
<Link Source="10353:[5995..6029).4" Target="10353:[5775..5979).7" />
<Link Source="10353:[5995..6029).4" Target="10312:[7916..7934).1" />
<Link Source="10353:[6002..6028).2" Target="10312:[7916..7934).1" />
<Link Source="10353:[6343..6358).2" Target="10353:[5995..6029).4" />
<Link Source="10353:[6343..6358).2" Target="10353:[6002..6028).2" />
<Link Source="10353:[6384..6410).7" Target="10353:[6002..6028).2" />
<Link Source="10353:[6384..6410).8" Target="10353:[6343..6358).2" />
<Link Source="10353:[6384..6410).8" Target="10353:[6384..6410).7" />
<Link Source="10353:[6384..6410).8" Target="10353:[6002..6028).2" />
<Link Source="10312:[7952..7977).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7952..7977).2" Target="10312:[7718..7727).1" />
<Link Source="10312:[7952..7977).2" Target="10312:[7952..7977).1" />
<Link Source="10312:[7952..7977).2" Target="10346:[11369..11507).1" />
<Link Source="10312:[7991..8409).1" Target="10312:[7673..7703).1" />
<Link Source="10312:[7991..8409).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[7991..8409).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[8049..8181).1" Target="10312:[7652..7671).1" />
<Link Source="10312:[8049..8181).1" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).2" Target="10312:[7673..7703).1" />
<Link Source="10312:[8049..8181).2" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).3" Target="10312:[7705..7716).1" />
<Link Source="10312:[8049..8181).3" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).4" Target="10312:[7718..7727).1" />
<Link Source="10312:[8049..8181).4" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).5" Target="10312:[7770..7791).1" />
<Link Source="10312:[8049..8181).5" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).6" Target="10312:[7793..7814).1" />
<Link Source="10312:[8049..8181).6" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).7" Target="10312:[7816..7829).1" />
<Link Source="10312:[8049..8181).7" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).8" Target="10312:[7831..7877).1" />
<Link Source="10312:[8049..8181).8" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8180).1" Target="10312:[7991..8409).1" />
<Link Source="10312:[18976..18995).1" Target="10312:[8049..8181).1" />
<Link Source="10312:[18976..18995).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[18997..19015).1" Target="10312:[8049..8181).2" />
<Link Source="10312:[18997..19015).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19017..19028).1" Target="10312:[8049..8181).3" />
<Link Source="10312:[19017..19028).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19030..19039).1" Target="10312:[8049..8181).4" />
<Link Source="10312:[19030..19039).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19041..19062).1" Target="10312:[8049..8181).5" />
<Link Source="10312:[19041..19062).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19064..19085).1" Target="10312:[8049..8181).6" />
<Link Source="10312:[19064..19085).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19087..19100).1" Target="10312:[8049..8181).7" />
<Link Source="10312:[19087..19100).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19102..19148).1" Target="10312:[8049..8181).8" />
<Link Source="10312:[19102..19148).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).1" Target="10312:[18997..19015).1" />
<Link Source="10312:[19174..19243).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).2" Target="10312:[19017..19028).1" />
<Link Source="10312:[19174..19243).2" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).3" Target="10312:[19041..19062).1" />
<Link Source="10312:[19174..19243).3" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).4" Target="10312:[19064..19085).1" />
<Link Source="10312:[19174..19243).4" Target="10312:[8049..8180).1" />
<Link Source="10312:[19188..19242).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[61540..61570).1" Target="10312:[19174..19243).1" />
<Link Source="10312:[61540..61570).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61572..61583).1" Target="10312:[19174..19243).2" />
<Link Source="10312:[61572..61583).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61585..61606).1" Target="10312:[19174..19243).3" />
<Link Source="10312:[61585..61606).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61608..61629).1" Target="10312:[19174..19243).4" />
<Link Source="10312:[61608..61629).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).1" Target="10312:[61585..61606).1" />
<Link Source="10312:[61655..62327).1" Target="EXTERNAL" />
<Link Source="10312:[61655..62327).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).2" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[61655..62327).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[61540..61570).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[19188..19242).1" />
<Link Source="10312:[61874..62327).1" Target="10312:[61540..61570).1" />
<Link Source="10312:[61874..62327).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[61874..62327).1" Target="EXTERNAL" />
<Link Source="10312:[61874..62327).1" Target="10312:[61655..62327).4" />
<Link Source="10312:[62098..62327).1" Target="10312:[61585..61606).1" />
<Link Source="10312:[62098..62327).1" Target="EXTERNAL" />
<Link Source="10312:[62098..62327).1" Target="10312:[61874..62327).1" />
<Link Source="10312:[62098..62327).2" Target="10312:[61874..62327).1" />
<Link Source="10312:[62279..62312).1" Target="10312:[61572..61583).1" />
<Link Source="10312:[62279..62312).1" Target="10312:[62098..62327).1" />
<Link Source="10312:[19259..19531).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[19259..19531).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19326..19460).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).2" Target="10312:[19030..19039).1" />
<Link Source="10312:[19326..19460).2" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).3" Target="10312:[19041..19062).1" />
<Link Source="10312:[19326..19460).3" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).6" Target="10312:[19087..19100).1" />
<Link Source="10312:[19326..19460).6" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).7" Target="10312:[19102..19148).1" />
<Link Source="10312:[19326..19460).7" Target="10312:[19259..19531).1" />
<Link Source="10312:[19366..19459).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[63424..63437).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63424..63437).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63439..63448).1" Target="10312:[19326..19460).2" />
<Link Source="10312:[63439..63448).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63450..63471).1" Target="10312:[19326..19460).3" />
<Link Source="10312:[63450..63471).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63473..63501).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63473..63501).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63503..63516).1" Target="10312:[19326..19460).6" />
<Link Source="10312:[63503..63516).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63518..63564).1" Target="10312:[19326..19460).7" />
<Link Source="10312:[63518..63564).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63566..63612).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63566..63612).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63381..70761).1" Target="10312:[19064..19085).1" />
<Link Source="10312:[63381..70761).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63638..63668).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63682..63706).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[63424..63437).1" />
<Link Source="10312:[63859..64015).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[63859..64015).1" Target="EXTERNAL" />
<Link Source="10312:[63859..64015).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[63859..64015).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64121..69285).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[63381..70761).1" />
<Link Source="10312:[64121..69285).2" Target="10345:[4279..4292).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[64121..69285).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[62279..62312).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[19366..19459).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).2" Target="10312:[63439..63448).1" />
<Link Source="10312:[64353..69285).2" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).3" Target="10312:[63503..63516).1" />
<Link Source="10312:[64353..69285).3" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).4" Target="10312:[63450..63471).1" />
<Link Source="10312:[64353..69285).4" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).5" Target="10312:[63682..63706).1" />
<Link Source="10312:[64353..69285).5" Target="10312:[64121..69285).2" />
<Link Source="10312:[64357..64415).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[80978..80991).1" Target="10312:[64353..69285).1" />
<Link Source="10312:[80978..80991).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[80993..81002).1" Target="10312:[64353..69285).2" />
<Link Source="10312:[80993..81002).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81004..81017).1" Target="10312:[64353..69285).3" />
<Link Source="10312:[81004..81017).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81019..81040).1" Target="10312:[64353..69285).4" />
<Link Source="10312:[81019..81040).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81042..81069).1" Target="10312:[64353..69285).5" />
<Link Source="10312:[81042..81069).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[80978..80991).1" />
<Link Source="10312:[81095..84034).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81095..84034).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81196..82523).1" Target="10312:[81095..84034).1" />
<Link Source="10312:[81196..82523).2" Target="10312:[80993..81002).1" />
<Link Source="10312:[81196..82523).2" Target="10312:[81196..82523).1" />
<Link Source="10312:[81196..82523).2" Target="10312:[81095..84034).1" />
<Link Source="10312:[81196..82523).3" Target="10312:[81019..81040).1" />
<Link Source="10312:[81196..82523).3" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).3" Target="10312:[81095..84034).1" />
<Link Source="10312:[81196..82523).6" Target="10312:[81196..82523).2" />
<Link Source="10312:[81196..82523).6" Target="10312:[81196..82523).3" />
<Link Source="10312:[81196..82523).6" Target="10312:[81095..84034).1" />
<Link Source="10312:[81319..81371).1" Target="10312:[80978..80991).1" />
<Link Source="10312:[81319..81371).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81495..81570).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[81495..81570).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[81495..81570).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81495..81570).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[81495..81570).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81495..81570).2" Target="10312:[81319..81371).1" />
<Link Source="10312:[81495..81570).2" Target="10312:[81196..82523).6" />
<Link Source="10312:[81596..82500).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[81596..82500).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[81596..82500).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81596..82500).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[81596..82500).1" Target="10312:[80993..81002).1" />
<Link Source="10312:[81596..82500).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81596..82500).2" Target="10312:[81019..81040).1" />
<Link Source="10312:[81596..82500).2" Target="10312:[81196..82523).6" />
<Link Source="10312:[81628..81659).1" Target="10312:[81196..82523).6" />
<Link Source="10353:[7504..7530).2" Target="10312:[81596..82500).2" />
<Link Source="10353:[7504..7530).2" Target="10312:[81628..81659).1" />
<Link Source="10312:[81596..82500).5" Target="10312:[81596..82500).1" />
<Link Source="10312:[81596..82500).5" Target="10353:[7504..7530).2" />
<Link Source="10312:[81596..82500).5" Target="10312:[81196..82523).6" />
<Link Source="10312:[84050..84066).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[84080..84093).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[84080..84093).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[64121..69285).2" />
<Link Source="10312:[64537..64543).1" Target="10312:[64353..69285).6" />
<Link Source="10306:[3196..3249).1" Target="10312:[63381..70761).1" />
<Link Source="10306:[3196..3249).1" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).1" Target="10306:[3196..3249).1" />
<Link Source="10306:[3202..3247).1" Target="10312:[64121..69285).2" />
<Link Source="10306:[3202..3247).1" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).2" Target="EXTERNAL" />
<Link Source="10306:[3202..3247).2" Target="10312:[64537..64543).1" />
<Link Source="10306:[3209..3246).1" Target="10312:[64537..64543).1" />
<Link Source="10298:[471..492).9" Target="10306:[3202..3247).1" />
<Link Source="10298:[471..492).9" Target="10306:[3209..3246).1" />
<Link Source="10298:[494..511).9" Target="10306:[3202..3247).2" />
<Link Source="10298:[494..511).9" Target="10306:[3209..3246).1" />
<Link Source="10312:[64532..69285).1" Target="10298:[471..492).9" />
<Link Source="10312:[64532..69285).1" Target="10312:[64353..69285).6" />
<Link Source="10312:[65229..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65229..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65229..69285).1" Target="10312:[64532..69285).1" />
<Link Source="10312:[65229..69285).2" Target="10312:[64532..69285).1" />
<Link Source="10312:[65474..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65474..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65474..69285).1" Target="10312:[65229..69285).1" />
<Link Source="10312:[65474..69285).2" Target="10312:[65229..69285).1" />
<Link Source="10312:[65730..65736).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65730..65736).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[66182..66188).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[66182..66188).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[63450..63471).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[63473..63501).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[65726..69285).1" />
<Link Source="10312:[66291..66342).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[75301..75322).1" Target="10312:[66177..69285).3" />
<Link Source="10312:[75301..75322).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75324..75352).1" Target="10312:[66177..69285).4" />
<Link Source="10312:[75324..75352).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).1" Target="10312:[75301..75322).1" />
<Link Source="10312:[75735..75866).1" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).2" Target="10312:[66291..66342).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[75735..75866).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75324..75352).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75742..75804).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[63638..63668).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[63518..63564).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[63566..63612).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[65726..69285).1" />
<Link Source="10312:[66215..66540).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[77528..77541).1" Target="10312:[66177..69285).2" />
<Link Source="10312:[77528..77541).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77543..77571).1" Target="10312:[75735..75866).4" />
<Link Source="10312:[77543..77571).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77573..77604).1" Target="10312:[66177..69285).7" />
<Link Source="10312:[77573..77604).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77606..77652).1" Target="10312:[66177..69285).8" />
<Link Source="10312:[77606..77652).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77654..77700).1" Target="10312:[66177..69285).9" />
<Link Source="10312:[77654..77700).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[63381..70761).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[77726..77892).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).2" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77730..77782).1" Target="10312:[66215..66540).1" />
<Link Source="10298:[471..492).12" Target="10312:[77726..77892).1" />
<Link Source="10298:[471..492).12" Target="10312:[77730..77782).1" />
<Link Source="10298:[494..511).12" Target="10312:[77726..77892).2" />
<Link Source="10298:[494..511).12" Target="10312:[77730..77782).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[77528..77541).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[77543..77571).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[77573..77604).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[77606..77652).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[77654..77700).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[66215..66540).1" />
<Link Source="10312:[77915..78032).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77908..78033).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78402..78430).1" Target="10312:[77908..78033).2" />
<Link Source="10312:[78402..78430).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78432..78463).1" Target="10312:[77908..78033).3" />
<Link Source="10312:[78432..78463).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78465..78511).1" Target="10312:[77908..78033).4" />
<Link Source="10312:[78465..78511).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78513..78552).1" Target="10312:[77908..78033).5" />
<Link Source="10312:[78513..78552).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[78387..78400).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[78402..78430).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[78432..78463).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[78465..78511).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[78513..78552).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[77915..78032).1" />
<Link Source="10312:[78649..78771).1" Target="10312:[77915..78032).1" />
<Link Source="10376:[1070..1083).1" Target="10312:[78642..78772).1" />
<Link Source="10376:[1070..1083).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1085..1113).1" Target="10312:[78642..78772).2" />
<Link Source="10376:[1085..1113).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1115..1146).1" Target="10312:[78642..78772).3" />
<Link Source="10376:[1115..1146).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1148..1194).1" Target="10312:[78642..78772).4" />
<Link Source="10376:[1148..1194).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1196..1235).1" Target="10312:[78642..78772).5" />
<Link Source="10376:[1196..1235).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1028..1425).1" Target="10312:[78346..78783).1" />
<Link Source="10376:[1028..1425).1" Target="10312:[64121..69285).2" />
<Link Source="10376:[1028..1425).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).1" Target="10376:[1070..1083).1" />
<Link Source="10376:[1261..1414).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).2" Target="10376:[1028..1425).1" />
<Link Source="10376:[1261..1414).2" Target="10312:[64121..69285).2" />
<Link Source="10376:[1261..1414).2" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).3" Target="10376:[1085..1113).1" />
<Link Source="10376:[1261..1414).3" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).4" Target="10376:[1115..1146).1" />
<Link Source="10376:[1261..1414).4" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).5" Target="10376:[1148..1194).1" />
<Link Source="10376:[1261..1414).5" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).6" Target="10376:[1196..1235).1" />
<Link Source="10376:[1261..1414).6" Target="10312:[78649..78771).1" />
<Link Source="10376:[1268..1413).1" Target="10312:[78649..78771).1" />
<Link Source="10286:[30070..30083).1" Target="10376:[1261..1414).1" />
<Link Source="10286:[30070..30083).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30098..30120).1" Target="10376:[1261..1414).2" />
<Link Source="10286:[30098..30120).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30135..30160).1" Target="10376:[1261..1414).3" />
<Link Source="10286:[30135..30160).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30175..30206).1" Target="10376:[1261..1414).4" />
<Link Source="10286:[30175..30206).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30221..30268).1" Target="10376:[1261..1414).5" />
<Link Source="10286:[30221..30268).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30283..30330).1" Target="10376:[1261..1414).6" />
<Link Source="10286:[30283..30330).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30012..30691).1" Target="10376:[1028..1425).1" />
<Link Source="10286:[30012..30691).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30356..30522).1" Target="10286:[30012..30691).1" />
<Link Source="10286:[30356..30522).1" Target="10312:[64121..69285).2" />
<Link Source="10286:[30356..30522).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30356..30522).2" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).2" Target="10376:[1268..1413).1" />
<Link Source="10286:[30360..30412).1" Target="10376:[1268..1413).1" />
<Link Source="10298:[471..492).13" Target="10286:[30356..30522).1" />
<Link Source="10298:[471..492).13" Target="10286:[30360..30412).1" />
<Link Source="10298:[494..511).13" Target="10286:[30356..30522).2" />
<Link Source="10298:[494..511).13" Target="10286:[30360..30412).1" />
<Link Source="10286:[30538..30680).1" Target="10286:[30070..30083).1" />
<Link Source="10286:[30538..30680).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).2" Target="10286:[30098..30120).1" />
<Link Source="10286:[30538..30680).2" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).3" Target="10286:[30135..30160).1" />
<Link Source="10286:[30538..30680).3" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).4" Target="10286:[30175..30206).1" />
<Link Source="10286:[30538..30680).4" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).5" Target="10286:[30221..30268).1" />
<Link Source="10286:[30538..30680).5" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).6" Target="10286:[30283..30330).1" />
<Link Source="10286:[30538..30680).6" Target="10376:[1268..1413).1" />
<Link Source="10286:[30545..30679).1" Target="10376:[1268..1413).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30538..30680).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2136..2158).1" Target="10286:[30538..30680).2" />
<Link Source="10060:[2136..2158).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2173..2198).1" Target="10286:[30538..30680).3" />
<Link Source="10060:[2173..2198).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2213..2244).1" Target="10286:[30538..30680).4" />
<Link Source="10060:[2213..2244).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2259..2305).1" Target="10286:[30538..30680).5" />
<Link Source="10060:[2259..2305).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2320..2366).1" Target="10286:[30538..30680).6" />
<Link Source="10060:[2320..2366).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).1" Target="10060:[2108..2121).1" />
<Link Source="10060:[2392..2555).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).2" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).2" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).3" Target="10060:[2173..2198).1" />
<Link Source="10060:[2392..2555).3" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).4" Target="10060:[2213..2244).1" />
<Link Source="10060:[2392..2555).4" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).5" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).5" Target="10312:[64121..69285).2" />
<Link Source="10060:[2392..2555).5" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).6" Target="10060:[2259..2305).1" />
<Link Source="10060:[2392..2555).6" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).7" Target="10060:[2320..2366).1" />
<Link Source="10060:[2392..2555).7" Target="10286:[30545..30679).1" />
<Link Source="10060:[2399..2554).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[2392..2555).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5621..5634).1" Target="10060:[2392..2555).2" />
<Link Source="10060:[5621..5634).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5691..5716).1" Target="10060:[2392..2555).3" />
<Link Source="10060:[5691..5716).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5731..5762).1" Target="10060:[2392..2555).4" />
<Link Source="10060:[5731..5762).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5777..5806).1" Target="10060:[2392..2555).5" />
<Link Source="10060:[5777..5806).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5821..5867).1" Target="10060:[2392..2555).6" />
<Link Source="10060:[5821..5867).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5882..5928).1" Target="10060:[2392..2555).7" />
<Link Source="10060:[5882..5928).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5593..5606).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5954..5991).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[5621..5634).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[6005..6042).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[6056..6090).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6056..6090).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6056..6090).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6188..6219).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6235..9907).1" Target="10060:[5593..5606).1" />
<Link Source="10060:[6235..9907).1" Target="10345:[4279..4292).1" />
<Link Source="10060:[6235..9907).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6235..9907).1" Target="10312:[62279..62312).1" />
<Link Source="10060:[6235..9907).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6814..6920).1" Target="10060:[5593..5606).1" />
<Link Source="10060:[6814..6920).1" Target="10060:[6235..9907).1" />
<Link Source="10060:[6814..6920).2" Target="10060:[5621..5634).1" />
<Link Source="10060:[6814..6920).2" Target="10060:[6235..9907).1" />
<Link Source="10060:[6814..6920).3" Target="10060:[5821..5867).1" />
<Link Source="10060:[6814..6920).3" Target="10060:[6235..9907).1" />
<Link Source="10060:[6814..6920).4" Target="10060:[5882..5928).1" />
<Link Source="10060:[6814..6920).4" Target="10060:[6235..9907).1" />
<Link Source="10060:[6821..6919).1" Target="10060:[6235..9907).1" />
<Link Source="10060:[10180..10200).1" Target="10060:[6814..6920).1" />
<Link Source="10060:[10180..10200).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10202..10215).1" Target="10060:[6814..6920).2" />
<Link Source="10060:[10202..10215).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10217..10263).1" Target="10060:[6814..6920).3" />
<Link Source="10060:[10217..10263).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10265..10311).1" Target="10060:[6814..6920).4" />
<Link Source="10060:[10265..10311).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10337..10405).1" Target="10060:[10202..10215).1" />
<Link Source="10060:[10337..10405).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10419..10454).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[10180..10200).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[10419..10454).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[6821..6919).1" />
<Link Source="10060:[10470..10516).1" Target="10060:[10202..10215).1" />
<Link Source="10060:[10470..10516).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[10470..10516).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10532..10544).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10558..11295).1" Target="10060:[10180..10200).1" />
<Link Source="10060:[10558..11295).1" Target="10345:[4279..4292).1" />
<Link Source="10060:[10558..11295).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[10558..11295).1" Target="10312:[62279..62312).1" />
<Link Source="10060:[10558..11295).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11311..11352).1" Target="10060:[10180..10200).1" />
<Link Source="10060:[11311..11352).1" Target="10345:[4279..4292).1" />
<Link Source="10060:[11311..11352).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[11311..11352).1" Target="10312:[62279..62312).1" />
<Link Source="10060:[11311..11352).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[11311..11352).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[11366..11675).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[6821..6919).1" />
<Link Source="10060:[11373..11403).1" Target="10060:[11366..11675).2" />
<Link Source="10060:[11373..11403).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).5" Target="10060:[10202..10215).1" />
<Link Source="10060:[11366..11675).5" Target="10060:[11373..11403).1" />
<Link Source="10060:[11423..11509).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[11990..12013).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[11990..12013).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12028..12063).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[12028..12063).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12078..12091).1" Target="10060:[11366..11675).5" />
<Link Source="10060:[12078..12091).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12117..12185).1" Target="10060:[12078..12091).1" />
<Link Source="10060:[12117..12185).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12199..12238).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[11990..12013).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[12199..12238).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[11423..11509).1" />
<Link Source="10060:[12254..13527).1" Target="10060:[12028..12063).1" />
<Link Source="10060:[12254..13527).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12494..12506).1" Target="10060:[12254..13527).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[66177..69285).1" />
<Link Source="10312:[66177..69285).11" Target="10060:[12494..12506).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[65726..69285).1" />
<Link Source="10312:[67587..67593).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).1" Target="10312:[67587..67593).1" />
<Link Source="10312:[67582..69285).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[67582..69285).2" Target="10312:[66177..69285).11" />
<Link Source="10312:[67858..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[67858..69285).1" Target="EXTERNAL" />
<Link Source="10312:[67858..69285).1" Target="10312:[67582..69285).1" />
<Link Source="10312:[67858..69285).2" Target="10312:[67582..69285).1" />
<Link Source="10312:[68183..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68183..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68183..69285).1" Target="10312:[67858..69285).1" />
<Link Source="10312:[68183..69285).2" Target="10312:[67858..69285).1" />
<Link Source="10312:[68512..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68512..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68512..69285).1" Target="10312:[68183..69285).1" />
<Link Source="10312:[68512..69285).2" Target="10312:[68183..69285).1" />
<Link Source="10312:[68882..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68882..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68882..69285).1" Target="10312:[68512..69285).1" />
<Link Source="10312:[68882..69285).2" Target="10312:[68512..69285).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[68882..69285).1" />
<Link Source="10312:[69244..69269).1" Target="10312:[68882..69285).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69237..69270).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).1" Target="EXTERNAL" />
<Link Source="10354:[5439..5508).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).2" Target="10354:[5400..5413).1" />
<Link Source="10354:[5439..5508).2" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).3" Target="10312:[69244..69269).1" />
<Link Source="10354:[5446..5507).1" Target="10312:[69244..69269).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5439..5508).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1099..1112).1" Target="10354:[5439..5508).2" />
<Link Source="10368:[1099..1112).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1114..1134).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1114..1134).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1048..1256).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1048..1256).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1076..1097).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1160..1169).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1099..1112).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1191..1202).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1114..1134).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1226..1236).1" Target="10354:[5446..5507).1" />
<Link Source="10312:[69237..69270).2" Target="10354:[5439..5508).3" />
<Link Source="10312:[69237..69270).2" Target="10312:[68882..69285).1" />
<Link Source="10312:[19478..19516).1" Target="10312:[69237..69270).2" />
<Link Source="10312:[19478..19516).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[19478..19515).1" Target="10312:[19259..19531).1" />
<Link Source="10354:[10217..10242).1" Target="10312:[19478..19516).1" />
<Link Source="10354:[10217..10242).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10192..10676).1" Target="10312:[18976..18995).1" />
<Link Source="10354:[10192..10676).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10272..10276).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[4058..4122).4" Target="10354:[10192..10676).1" />
<Link Source="10354:[4058..4122).4" Target="10354:[10272..10276).1" />
<Link Source="10354:[10268..10665).1" Target="10354:[4058..4122).4" />
<Link Source="10354:[10268..10665).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10268..10665).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10217..10242).1" />
<Link Source="10354:[10268..10665).2" Target="10368:[1160..1169).1" />
<Link Source="10354:[10268..10665).2" Target="10312:[19478..19515).1" />
<Link Source="10354:[10404..10408).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10386..10665).1" Target="10354:[10404..10408).1" />
<Link Source="10354:[10386..10665).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10442..10463).1" Target="10354:[10217..10242).1" />
<Link Source="10354:[10442..10463).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[10442..10462).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10463).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10192..10676).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8181..8186).1" Target="10368:[1160..1169).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[8214..8234).1" Target="10354:[8181..8186).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8248..8278).1" Target="10368:[1191..1202).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8109..8324).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8214..8234).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8248..8278).1" />
<Link Source="10354:[8248..8278).2" Target="10312:[67582..69285).2" />
<Link Source="10354:[8248..8278).2" Target="10354:[10442..10462).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8292..8298).1" Target="10368:[1226..1236).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[10442..10463).2" Target="10354:[10386..10665).1" />
<Link Source="10312:[19478..19516).2" Target="10312:[19259..19531).1" />
<Link Source="10312:[19259..19531).4" Target="10312:[19259..19531).1" />
<Link Source="10312:[19259..19531).4" Target="10354:[8248..8278).2" />
<Link Source="10312:[19259..19531).4" Target="10354:[8292..8298).1" />
<Link Source="10312:[19259..19531).4" Target="10312:[8049..8180).1" />
<Link Source="10312:[8049..8181).9" Target="10312:[7991..8409).1" />
<Link Source="10346:[11369..11508).10" Target="10346:[11258..12246).6" />
<Link Source="10346:[11532..11552).1" Target="10346:[11258..12246).6" />
<Link Source="10354:[4919..5009).4" Target="10346:[10629..10648).1" />
<Link Source="10354:[4919..5009).4" Target="10346:[11532..11552).1" />
<Link Source="10354:[4094..4107).6" Target="10354:[4919..5009).4" />
<Link Source="10354:[4094..4107).6" Target="10354:[8248..8278).2" />
<Link Source="10354:[4094..4107).6" Target="10346:[11532..11552).1" />
<Link Source="10346:[11528..12231).1" Target="10354:[4094..4107).6" />
<Link Source="10346:[11528..12231).1" Target="10346:[11258..12246).6" />
<Link Source="10346:[11665..12181).1" Target="10346:[11528..12231).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[10663..10672).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[11665..12181).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[11528..12231).1" />
<Link Source="10346:[11665..12181).3" Target="10346:[10650..10661).1" />
<Link Source="10346:[11665..12181).3" Target="10346:[11528..12231).1" />
<Link Source="10346:[11710..11746).1" Target="10346:[11528..12231).1" />
<Link Source="10286:[2155..2260).1" Target="10346:[10738..10759).1" />
<Link Source="10286:[2155..2260).1" Target="10346:[11710..11746).1" />
<Link Source="10286:[2191..2245).1" Target="10286:[2155..2260).1" />
<Link Source="10286:[2191..2245).1" Target="10354:[8248..8278).2" />
<Link Source="10286:[2191..2245).1" Target="10346:[11710..11746).1" />
<Link Source="10286:[2191..2245).2" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).2" Target="10346:[11710..11746).1" />
<Link Source="10286:[2198..2244).1" Target="10346:[11710..11746).1" />
<Link Source="10298:[471..492).15" Target="10286:[2191..2245).1" />
<Link Source="10298:[471..492).15" Target="10286:[2198..2244).1" />
<Link Source="10298:[494..511).15" Target="10286:[2191..2245).2" />
<Link Source="10298:[494..511).15" Target="10286:[2198..2244).1" />
<Link Source="10346:[11665..12181).4" Target="10298:[471..492).15" />
<Link Source="10346:[11665..12181).4" Target="10346:[11528..12231).1" />
<Link Source="10346:[11683..11747).1" Target="10346:[11528..12231).1" />
<Link Source="10345:[28212..28223).1" Target="10346:[11665..12181).3" />
<Link Source="10345:[28212..28223).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28225..28251).1" Target="10346:[11665..12181).4" />
<Link Source="10345:[28225..28251).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28185..28951).1" Target="10346:[3832..3852).1" />
<Link Source="10345:[28185..28951).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28277..28305).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28300..28304).1" Target="10345:[28277..28305).1" />
<Link Source="10345:[28300..28304).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).1" Target="10345:[28212..28223).1" />
<Link Source="10345:[28319..28911).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).2" Target="10345:[28277..28305).1" />
<Link Source="10345:[28319..28911).2" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28185..28951).1" />
<Link Source="10345:[28319..28911).3" Target="10354:[8248..8278).2" />
<Link Source="10345:[28319..28911).3" Target="10345:[28319..28911).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28319..28911).2" />
<Link Source="10345:[28319..28911).3" Target="10354:[8292..8298).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28300..28304).1" />
<Link Source="10345:[28319..28911).3" Target="10346:[11683..11747).1" />
<Link Source="10345:[28927..28940).1" Target="10346:[11683..11747).1" />
<Link Source="10346:[11665..12181).6" Target="10345:[28927..28940).1" />
<Link Source="10346:[11665..12181).6" Target="10346:[11528..12231).1" />
<Link Source="10346:[11665..12181).7" Target="10346:[11665..12181).2" />
<Link Source="10346:[11665..12181).7" Target="10346:[11665..12181).6" />
<Link Source="10346:[11665..12181).7" Target="10346:[11528..12231).1" />
<Link Source="10346:[12205..12212).1" Target="10346:[11528..12231).1" />
<Link Source="10312:[4685..4699).3" Target="10382:[1707..1928).2" />
<Link Source="10354:[3684..3818).7" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).7" Target="10312:[4685..4699).3" />
<Link Source="10354:[3720..3803).49" Target="10354:[3684..3818).7" />
<Link Source="10354:[3720..3803).49" Target="10345:[28319..28911).3" />
<Link Source="10354:[3720..3803).49" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).49" Target="10312:[4685..4699).3" />
<Link Source="10312:[4680..4787).5" Target="10354:[3720..3803).49" />
<Link Source="10312:[4680..4787).5" Target="10382:[1707..1928).2" />
<Link Source="10312:[4749..4764).1" Target="10382:[1707..1928).2" />
<Link Source="10312:[4749..4764).1" Target="10312:[4680..4787).5" />
<Link Source="10312:[4826..5058).11" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).11" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).11" Target="10382:[1707..1928).2" />
<Link Source="10312:[4826..5058).12" Target="10382:[1707..1928).2" />
<Link Source="10312:[5087..5101).1" Target="10312:[4749..4764).1" />
<Link Source="10312:[5087..5101).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[1585..1724).9" Target="10353:[7556..7642).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[41889..41914).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).3" Target="10060:[10217..10263).1" />
<Link Source="10319:[43504..43546).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).2" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).3" />
<Link Source="10319:[43504..43546).4" Target="10345:[28319..28911).3" />
<Link Source="10319:[43504..43546).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43562..43590).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[43799..44676).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[43095..43135).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43853..43873).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41088..41107).1" Target="10319:[43799..44676).3" />
<Link Source="10319:[41088..41107).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41138..41158).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4919..5009).6" Target="10319:[41088..41107).1" />
<Link Source="10354:[4919..5009).6" Target="10319:[41138..41158).1" />
<Link Source="10354:[4962..4966).6" Target="10319:[41138..41158).1" />
<Link Source="10354:[4058..4122).8" Target="10354:[4919..5009).6" />
<Link Source="10354:[4058..4122).8" Target="10354:[4962..4966).6" />
<Link Source="10354:[4094..4107).8" Target="10354:[4058..4122).8" />
<Link Source="10354:[4094..4107).8" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).8" Target="10354:[4962..4966).6" />
<Link Source="10319:[41133..41220).1" Target="10354:[4094..4107).8" />
<Link Source="10319:[41133..41220).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41254..41268).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41088..41107).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41254..41268).1" />
<Link Source="10354:[4561..4580).1" Target="10354:[4525..4595).1" />
<Link Source="10354:[4561..4580).1" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).1" Target="10319:[41254..41268).1" />
<Link Source="10319:[41236..41680).1" Target="10354:[4561..4580).1" />
<Link Source="10319:[41236..41680).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[41236..41680).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[43504..43546).4" />
<Link Source="10319:[41634..41646).1" Target="10319:[41302..41665).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[43562..43590).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[44751..44765).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[42089..42141).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).3" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[41849..41874).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[41983..42014).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44751..44765).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[42029..42063).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[51282..51325).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[44692..45392).1" />
<Link Source="10319:[44801..44929).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44785..44930).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84201..84218).1" Target="10319:[44785..44930).2" />
<Link Source="10319:[84201..84218).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84233..84242).1" Target="10319:[44785..44930).3" />
<Link Source="10319:[84233..84242).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84257..84273).1" Target="10319:[44785..44930).5" />
<Link Source="10319:[84257..84273).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84288..84313).1" Target="10319:[44785..44930).6" />
<Link Source="10319:[84288..84313).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84328..84359).1" Target="10319:[44785..44930).7" />
<Link Source="10319:[84328..84359).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84374..84391).1" Target="10319:[44785..44930).8" />
<Link Source="10319:[84374..84391).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84406..84447).1" Target="10319:[44785..44930).9" />
<Link Source="10319:[84406..84447).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84462..84508).1" Target="10319:[44785..44930).10" />
<Link Source="10319:[84462..84508).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[84167..84186).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[84201..84218).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[84233..84242).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[84257..84273).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[84288..84313).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[84328..84359).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[84374..84391).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[84406..84447).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[84462..84508).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[44801..44929).1" />
<Link Source="10319:[84550..84674).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84534..84675).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).2" Target="10319:[84534..84675).2" />
<Link Source="10319:[84907..109876).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).3" Target="10319:[84534..84675).3" />
<Link Source="10319:[84907..109876).3" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).4" Target="10319:[84534..84675).4" />
<Link Source="10319:[84907..109876).4" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).5" Target="10319:[84534..84675).5" />
<Link Source="10319:[84907..109876).5" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).6" Target="10319:[84534..84675).6" />
<Link Source="10319:[84907..109876).6" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).7" Target="10319:[84534..84675).7" />
<Link Source="10319:[84907..109876).7" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).8" Target="10319:[84534..84675).8" />
<Link Source="10319:[84907..109876).8" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).9" Target="10319:[84534..84675).9" />
<Link Source="10319:[84907..109876).9" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84124..109887).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84907..109876).4" />
<Link Source="10319:[85320..85348).2" Target="10319:[85320..85348).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[85366..85400).2" Target="10319:[85366..85400).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85434..85448).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[84907..109876).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[85434..85448).1" />
<Link Source="10354:[4561..4580).2" Target="10354:[4525..4595).2" />
<Link Source="10354:[4561..4580).2" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).2" Target="10319:[85434..85448).1" />
<Link Source="10319:[85420..85449).1" Target="10354:[4561..4580).2" />
<Link Source="10319:[85420..85449).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85467..85484).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85508..85528).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4919..5009).7" Target="10319:[84907..109876).1" />
<Link Source="10354:[4919..5009).7" Target="10319:[85508..85528).1" />
<Link Source="10354:[4962..4966).7" Target="10319:[85508..85528).1" />
<Link Source="10354:[4058..4122).9" Target="10354:[4919..5009).7" />
<Link Source="10354:[4058..4122).9" Target="10354:[4962..4966).7" />
<Link Source="10354:[4094..4107).9" Target="10354:[4058..4122).9" />
<Link Source="10354:[4094..4107).9" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).9" Target="10354:[4962..4966).7" />
<Link Source="10319:[85504..106825).1" Target="10354:[4094..4107).9" />
<Link Source="10319:[85504..106825).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85570..106806).1" Target="10319:[85504..106825).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85420..85449).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[43504..43546).4" />
<Link Source="10319:[85570..106806).2" Target="10319:[85570..106806).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85504..106825).1" />
<Link Source="10319:[103953..103983).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104078..104122).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104078..104122).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).2" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[104148..106735).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).3" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).3" Target="10319:[103953..103983).1" />
<Link Source="10319:[104148..106735).3" Target="EXTERNAL" />
<Link Source="10319:[104148..106735).3" Target="10319:[85570..106806).2" />
<Link Source="10319:[104874..105336).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104874..105336).1" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[104874..105336).2" Target="10319:[104874..105336).1" />
<Link Source="10319:[104874..105336).2" Target="10319:[84907..109876).10" />
<Link Source="10319:[104874..105336).2" Target="10319:[103953..103983).1" />
<Link Source="10319:[104874..105336).2" Target="10319:[104148..106735).2" />
<Link Source="10319:[105368..106708).1" Target="10319:[84907..109876).6" />
<Link Source="10319:[105368..106708).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105601..106708).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[105601..106708).1" Target="EXTERNAL" />
<Link Source="10319:[105601..106708).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[84691..84861).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84691..84861).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[84691..84861).1" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84764..84846).1" Target="10319:[84257..84273).1" />
<Link Source="10319:[84764..84846).1" Target="10319:[84691..84861).1" />
<Link Source="10319:[84764..84846).2" Target="10319:[84691..84861).1" />
<Link Source="10319:[84764..84846).4" Target="10319:[106763..106783).1" />
<Link Source="10319:[84764..84846).4" Target="10319:[84691..84861).1" />
<Link Source="10319:[84764..84846).5" Target="10319:[84288..84313).1" />
<Link Source="10319:[84764..84846).5" Target="10319:[84691..84861).1" />
<Link Source="10319:[84764..84845).1" Target="10319:[84691..84861).1" />
<Link Source="10306:[358886..358901).1" Target="10319:[84764..84846).1" />
<Link Source="10306:[358886..358901).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358903..358930).1" Target="10319:[84764..84846).2" />
<Link Source="10306:[358903..358930).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358932..358945).1" Target="10319:[84764..84846).4" />
<Link Source="10306:[358932..358945).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358947..358972).1" Target="10319:[84764..84846).5" />
<Link Source="10306:[358947..358972).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358838..360009).1" Target="10319:[84124..109887).1" />
<Link Source="10306:[358838..360009).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358998..359998).1" Target="10306:[358932..358945).1" />
<Link Source="10306:[358998..359998).1" Target="10319:[103953..103983).1" />
<Link Source="10306:[358998..359998).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358998..359998).2" Target="10319:[84764..84845).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[84877..84891).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[44948..45377).1" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[45408..45421).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11383..11549).1" Target="10319:[43095..43135).1" />
<Link Source="10354:[11383..11549).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11428..11440).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[3841..3991).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[3841..3991).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3887..3892).1" Target="EXTERNAL" />
<Link Source="10354:[3887..3892).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3887..3892).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3932..3952).1" Target="10319:[103953..103983).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3887..3892).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3980).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3966..3980).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[11428..11441).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[3932..3952).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11455..11538).1" />
<Link Source="10354:[11455..11538).2" Target="10319:[45408..45421).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11455..11538).2" />
<Link Source="10354:[11506..11523).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[3932..3952).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[11506..11523).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[3966..3972).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[11455..11538).2" />
<Link Source="10319:[45408..45422).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45436..45568).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[45436..45568).1" Target="10354:[11506..11523).2" />
<Link Source="10319:[45436..45568).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45505..45551).1" Target="10319:[20515..20674).1" />
<Link Source="10286:[10010..10027).1" Target="10319:[45436..45568).1" />
<Link Source="10286:[10010..10027).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[9966..10197).1" Target="10319:[41732..45579).1" />
<Link Source="10286:[9966..10197).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10053..10100).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10053..10100).1" Target="10354:[11506..11523).2" />
<Link Source="10286:[10053..10100).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10114..10186).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10114..10186).1" Target="10354:[11506..11523).2" />
<Link Source="10286:[10114..10186).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10121..10185).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[9966..10197).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[9073..9094).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[9096..9108).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9134..9189).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9203..9282).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10053..10100).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10121..10185).1" />
<Link Source="10286:[9305..9942).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9305..9942).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9298..9943).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[9298..9943).2" Target="EXTERNAL" />
<Link Source="10286:[9298..9943).2" Target="10286:[9305..9942).1" />
<Link Source="10286:[9798..9837).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[10465..10663).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9298..9943).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10607..10651).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10465..10663).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10551..10586).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10607..10651).1" />
<Link Source="10325:[4462..4594).1" Target="10286:[10465..10663).2" />
<Link Source="10325:[4462..4594).1" Target="10286:[10607..10651).1" />
<Link Source="10325:[4556..4582).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4462..4594).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10675..11259).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10465..10663).2" />
<Link Source="10286:[10741..11248).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[11085..11098).1" Target="10286:[10741..11248).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[11085..11098).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10600..10652).1" Target="10325:[4549..4583).1" />
<Link Source="10286:[10600..10652).1" Target="10286:[10607..10651).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[84877..84891).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[45443..45567).1" Target="10319:[20515..20674).1" />
<Link Source="10287:[2306..2328).1" Target="10286:[10600..10652).1" />
<Link Source="10287:[2306..2328).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2330..2343).1" Target="10319:[45436..45568).4" />
<Link Source="10287:[2330..2343).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2377..2471).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2377..2471).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2489..2521).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2489..2521).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).1" Target="10287:[2489..2521).1" />
<Link Source="10287:[2539..2781).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2546..2558).1" Target="10287:[2539..2781).1" />
<Link Source="10287:[2546..2558).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).2" Target="10287:[2306..2328).1" />
<Link Source="10287:[2539..2781).2" Target="10287:[2546..2558).1" />
<Link Source="10287:[2680..2780).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[718..757).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[718..757).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[666..1076).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[666..1076).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[791..833).1" Target="10287:[718..757).1" />
<Link Source="10287:[791..833).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[791..833).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[851..871).1" Target="10287:[718..757).1" />
<Link Source="10287:[851..871).1" Target="10287:[666..1076).1" />
<Link Source="10287:[851..871).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..927).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..919).1" Target="10287:[912..927).1" />
<Link Source="10287:[912..919).1" Target="10287:[666..1076).1" />
<Link Source="10287:[912..919).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..972).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..963).1" Target="10287:[945..972).1" />
<Link Source="10287:[945..963).1" Target="10287:[666..1076).1" />
<Link Source="10287:[945..963).1" Target="10287:[2680..2780).1" />
<Link Source="10319:[15383..15396).1" Target="10319:[13863..13947).1" />
<Link Source="10287:[1609..1643).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1609..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[1609..1643).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[851..871).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[1612..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10319:[15379..15933).1" Target="10287:[1612..1643).1" />
<Link Source="10319:[15379..15933).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15548..15561).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15548..15561).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15783..15809).1" Target="10319:[15544..15884).1" />
<Link Source="10287:[1474..1497).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1474..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[1474..1497).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[851..871).1" />
<Link Source="10287:[1477..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10319:[15783..15865).1" Target="10287:[1477..1497).1" />
<Link Source="10319:[15783..15865).1" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[14862..16302).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[14931..14954).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[14956..14981).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).6" Target="10319:[15544..15884).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21531..21544).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21531..21544).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21546..21561).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21546..21561).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21563..21583).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21563..21583).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21462..21711).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21462..21711).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).1" Target="10286:[21504..21529).1" />
<Link Source="10286:[21609..21700).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).2" Target="10286:[21531..21544).1" />
<Link Source="10286:[21609..21700).2" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).3" Target="10286:[21546..21561).1" />
<Link Source="10286:[21609..21700).3" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).4" Target="10286:[21563..21583).1" />
<Link Source="10286:[21609..21700).4" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21699).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21700).1" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21700).2" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21700).3" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21700).4" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21462..21711).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[22071..22084).1" />
<Link Source="10286:[22156..22600).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22421..22557).1" Target="10286:[22044..22069).1" />
<Link Source="10286:[22421..22557).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).2" Target="10286:[22071..22084).1" />
<Link Source="10286:[22421..22557).2" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).3" Target="10286:[22086..22108).1" />
<Link Source="10286:[22421..22557).3" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).4" Target="10286:[22110..22130).1" />
<Link Source="10286:[22421..22557).4" Target="10286:[22156..22600).1" />
<Link Source="10286:[22493..22522).1" Target="10286:[22156..22600).1" />
<Link Source="10307:[1439..1480).1" Target="10286:[22002..22611).1" />
<Link Source="10307:[1439..1480).1" Target="10286:[22493..22522).1" />
<Link Source="10307:[1445..1478).1" Target="10307:[1439..1480).1" />
<Link Source="10307:[1445..1478).1" Target="10319:[15783..15865).1" />
<Link Source="10307:[1445..1478).1" Target="10286:[22493..22522).1" />
<Link Source="10286:[22421..22557).5" Target="10307:[1445..1478).1" />
<Link Source="10286:[22421..22557).5" Target="10286:[22156..22600).1" />
<Link Source="10286:[22524..22543).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[15519..15926).1" Target="10286:[22002..22611).1" />
<Link Source="10286:[15519..15926).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15568..15597).1" Target="10286:[22524..22543).1" />
<Link Source="10307:[1439..1480).2" Target="10286:[15519..15926).1" />
<Link Source="10307:[1439..1480).2" Target="10286:[15568..15597).1" />
<Link Source="10307:[1445..1478).2" Target="10307:[1439..1480).2" />
<Link Source="10307:[1445..1478).2" Target="10319:[15783..15865).1" />
<Link Source="10307:[1445..1478).2" Target="10286:[15568..15597).1" />
<Link Source="10286:[15555..15598).1" Target="10307:[1445..1478).2" />
<Link Source="10286:[15555..15598).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15616..15690).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15616..15690).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15616..15690).2" Target="10286:[15555..15598).1" />
<Link Source="10286:[15616..15690).2" Target="10319:[15783..15865).1" />
<Link Source="10286:[15616..15690).2" Target="EXTERNAL" />
<Link Source="10286:[15616..15690).2" Target="10286:[22524..22543).1" />
<Link Source="10286:[15715..15910).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15715..15910).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15708..15911).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15708..15911).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[22421..22557).7" Target="10286:[15708..15911).1" />
<Link Source="10286:[22421..22557).7" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).9" Target="10286:[22002..22611).1" />
<Link Source="10286:[22421..22557).9" Target="10319:[15783..15865).1" />
<Link Source="10286:[22421..22557).9" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22556).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[23056..23081).1" Target="10286:[22421..22557).1" />
<Link Source="10286:[23056..23081).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23096..23109).1" Target="10286:[22421..22557).2" />
<Link Source="10286:[23096..23109).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23124..23146).1" Target="10286:[22421..22557).3" />
<Link Source="10286:[23124..23146).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23161..23181).1" Target="10286:[22421..22557).4" />
<Link Source="10286:[23161..23181).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23196..23220).1" Target="10286:[22421..22557).5" />
<Link Source="10286:[23196..23220).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23235..23266).1" Target="10286:[22421..22557).7" />
<Link Source="10286:[23235..23266).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23281..23301).1" Target="10286:[22421..22557).9" />
<Link Source="10286:[23281..23301).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23327..23364).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23327..23364).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23380..23684).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23380..23684).1" Target="10286:[23327..23364).1" />
<Link Source="10286:[23380..23684).1" Target="EXTERNAL" />
<Link Source="10286:[23380..23684).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23893..24026).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23893..24026).1" Target="10286:[23327..23364).1" />
<Link Source="10286:[23893..24026).1" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[24450..24529).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).2" Target="10286:[23235..23266).1" />
<Link Source="10286:[24450..24529).2" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[24450..24529).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[24450..24529).2" />
<Link Source="10286:[24450..24529).3" Target="10286:[23327..23364).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[22421..22556).1" />
<Link Source="10286:[24545..24641).1" Target="10286:[23161..23181).1" />
<Link Source="10286:[24545..24641).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24655..25349).1" Target="10286:[24545..24641).1" />
<Link Source="10286:[24655..25349).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).1" Target="10286:[23056..23081).1" />
<Link Source="10286:[25365..25492).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).2" Target="10286:[24450..24529).3" />
<Link Source="10286:[25365..25492).2" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).3" Target="10286:[23124..23146).1" />
<Link Source="10286:[25365..25492).3" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).4" Target="10286:[23196..23220).1" />
<Link Source="10286:[25365..25492).4" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).5" Target="10286:[23281..23301).1" />
<Link Source="10286:[25365..25492).5" Target="10286:[22421..22556).1" />
<Link Source="10286:[25386..25491).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[26910..26935).1" Target="10286:[25365..25492).1" />
<Link Source="10286:[26910..26935).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26937..26950).1" Target="10286:[25365..25492).2" />
<Link Source="10286:[26937..26950).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26952..26974).1" Target="10286:[25365..25492).3" />
<Link Source="10286:[26952..26974).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26976..27000).1" Target="10286:[25365..25492).4" />
<Link Source="10286:[26976..27000).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27002..27022).1" Target="10286:[25365..25492).5" />
<Link Source="10286:[27002..27022).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27048..27088).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[26910..26935).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[27048..27088).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).1" Target="10286:[26937..26950).1" />
<Link Source="10286:[27104..27192).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).2" Target="10286:[26976..27000).1" />
<Link Source="10286:[27104..27192).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).3" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).1" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).2" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).3" />
<Link Source="10286:[27104..27192).5" Target="10286:[24450..24529).3" />
<Link Source="10286:[27104..27192).5" Target="10286:[25386..25491).1" />
<Link Source="10286:[27208..27236).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27250..27722).1" Target="10286:[27104..27192).5" />
<Link Source="10286:[27250..27722).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27738..27845).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[27208..27236).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[27738..27845).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27861..27873).1" Target="10286:[27104..27192).5" />
<Link Source="10286:[27861..27873).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26281..26812).1" Target="10286:[27861..27873).1" />
<Link Source="10286:[26281..26812).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[26450..26769).1" Target="10286:[24545..24641).1" />
<Link Source="10286:[26450..26769).1" Target="10286:[26281..26812).1" />
<Link Source="10286:[22421..22557).10" Target="10286:[22156..22600).1" />
<Link Source="10286:[21609..21700).5" Target="10319:[15783..15865).6" />
<Link Source="10319:[15904..15918).1" Target="10287:[2546..2558).1" />
<Link Source="10319:[15904..15918).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[13962..14050).1" Target="10319:[15904..15918).1" />
<Link Source="10319:[13962..14050).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13962..14050).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).3" Target="10319:[13685..13708).1" />
<Link Source="10319:[13962..14050).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).4" Target="10319:[13737..13783).1" />
<Link Source="10319:[13962..14050).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13969..14029).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[13962..14050).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51817..51842).1" Target="10319:[13962..14050).2" />
<Link Source="10319:[51817..51842).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51844..51861).1" Target="10319:[13962..14050).3" />
<Link Source="10319:[51844..51861).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51863..51909).1" Target="10319:[13962..14050).4" />
<Link Source="10319:[51863..51909).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51939..51953).1" Target="10319:[13969..14029).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51762..51815).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).1" Target="10287:[1680..1716).1" />
<Link Source="10287:[1683..1690).1" Target="10287:[912..919).1" />
<Link Source="10287:[1683..1690).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).1" Target="10287:[1683..1690).1" />
<Link Source="10287:[1683..1716).1" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).1" Target="10287:[1683..1716).1" />
<Link Source="10319:[51935..52244).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[51762..51815).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[13969..14049).1" Target="25002:[4395..4432).1" />
<Link Source="10287:[1474..1497).2" Target="10319:[52260..52274).1" />
<Link Source="10287:[1474..1497).2" Target="10319:[13969..14049).1" />
<Link Source="10287:[1477..1497).2" Target="10287:[1474..1497).2" />
<Link Source="10287:[1477..1497).2" Target="10287:[851..871).1" />
<Link Source="10287:[1477..1497).2" Target="10319:[13969..14049).1" />
<Link Source="25002:[4395..4432).28" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).28" Target="10287:[1477..1497).2" />
<Link Source="25002:[4395..4432).28" Target="10286:[27104..27192).5" />
<Link Source="25002:[4395..4432).28" Target="10287:[2539..2781).2" />
<Link Source="25002:[4395..4432).28" Target="28001:[40426..41067).3" />
<Link Source="10319:[20508..20675).12" Target="10319:[20095..20126).1" />
<Link Source="10319:[20508..20675).12" Target="25002:[4395..4432).28" />
<Link Source="10319:[41983..42014).2" Target="10319:[20508..20675).12" />
<Link Source="10319:[41983..42014).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[42478..42805).4" Target="25002:[4395..4432).28" />
<Link Source="10319:[42821..42938).9" Target="25002:[4395..4432).28" />
<Link Source="10319:[42839..42937).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[63849..63870).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63849..63870).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63885..63919).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63885..63919).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63934..63945).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63934..63945).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63960..63969).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63960..63969).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63984..64009).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63984..64009).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63768..64484).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[63768..64484).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[64035..64445).5" Target="10319:[42839..42937).2" />
<Link Source="10319:[64035..64445).6" Target="10319:[63885..63919).2" />
<Link Source="10319:[64035..64445).6" Target="10319:[64035..64445).5" />
<Link Source="10319:[64035..64445).6" Target="10319:[42839..42937).2" />
<Link Source="10319:[64461..64473).3" Target="10319:[42839..42937).2" />
<Link Source="10319:[42821..42938).15" Target="10319:[64461..64473).3" />
<Link Source="10319:[42821..42938).15" Target="25002:[4395..4432).28" />
<Link Source="10319:[42952..43079).4" Target="25002:[4395..4432).28" />
<Link Source="10319:[42952..43079).5" Target="10319:[42821..42938).15" />
<Link Source="10319:[42952..43079).5" Target="10319:[42952..43079).4" />
<Link Source="10319:[42952..43079).5" Target="25002:[4395..4432).28" />
<Link Source="10354:[11312..11328).2" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).8" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).8" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).53" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).53" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).53" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).53" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).54" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).55" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).55" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).55" Target="10354:[3720..3803).54" />
<Link Source="10354:[3720..3803).55" Target="10354:[11312..11328).2" />
<Link Source="10354:[11299..11330).4" Target="10354:[3720..3803).53" />
<Link Source="10354:[11299..11330).4" Target="25002:[4395..4432).28" />
<Link Source="10319:[50330..50355).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[1108..1117).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[1222..1235).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5830..5839).2" Target="10312:[1108..1117).2" />
<Link Source="10312:[5830..5839).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5944..5957).2" Target="10312:[1222..1235).2" />
<Link Source="10312:[5944..5957).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[3730..3739).2" Target="10312:[5830..5839).2" />
<Link Source="10312:[3730..3739).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[3805..3818).2" Target="10312:[5944..5957).2" />
<Link Source="10312:[3805..3818).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[3905..3919).2" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).9" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).9" Target="10312:[3905..3919).2" />
<Link Source="10354:[3720..3803).61" Target="10354:[3684..3818).9" />
<Link Source="10354:[3720..3803).61" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).61" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).61" Target="10312:[3905..3919).2" />
<Link Source="10354:[3720..3803).62" Target="10312:[3905..3919).2" />
<Link Source="10354:[3720..3803).63" Target="10354:[3684..3818).9" />
<Link Source="10354:[3720..3803).63" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).63" Target="10354:[3720..3803).62" />
<Link Source="10354:[3720..3803).63" Target="10312:[3905..3919).2" />
<Link Source="10312:[3892..3921).4" Target="10354:[3720..3803).61" />
<Link Source="10312:[3892..3921).4" Target="25002:[4395..4432).28" />
<Link Source="10312:[3935..3968).5" Target="10312:[5830..5839).2" />
<Link Source="10312:[3935..3968).5" Target="25002:[4395..4432).28" />
<Link Source="10312:[3948..3966).2" Target="25002:[4395..4432).28" />
<Link Source="10353:[4698..4724).3" Target="10312:[3935..3968).5" />
<Link Source="10353:[4698..4724).3" Target="10312:[3948..3966).2" />
<Link Source="10353:[4750..4847).5" Target="10353:[4698..4724).3" />
<Link Source="10353:[4750..4847).5" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).5" Target="10312:[3948..3966).2" />
<Link Source="10353:[4863..5000).9" Target="10353:[4698..4724).3" />
<Link Source="10353:[4863..5000).9" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).9" Target="10312:[3948..3966).2" />
<Link Source="10353:[4863..5000).10" Target="10312:[3948..3966).2" />
<Link Source="10353:[5079..5183).5" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).5" Target="10312:[3948..3966).2" />
<Link Source="10353:[5197..5323).7" Target="10353:[4698..4724).3" />
<Link Source="10353:[5197..5323).7" Target="10353:[5079..5183).5" />
<Link Source="10353:[5197..5323).7" Target="10312:[3948..3966).2" />
<Link Source="10353:[5485..5759).13" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).13" Target="10312:[3948..3966).2" />
<Link Source="10353:[5485..5759).14" Target="10353:[4698..4724).3" />
<Link Source="10353:[5485..5759).14" Target="10353:[5485..5759).13" />
<Link Source="10353:[5485..5759).14" Target="10312:[3948..3966).2" />
<Link Source="10353:[5485..5759).15" Target="10312:[3948..3966).2" />
<Link Source="10353:[5775..5979).9" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).9" Target="10312:[3948..3966).2" />
<Link Source="10353:[5775..5979).11" Target="10353:[4698..4724).3" />
<Link Source="10353:[5775..5979).11" Target="10353:[5775..5979).9" />
<Link Source="10353:[5775..5979).11" Target="10312:[3948..3966).2" />
<Link Source="10353:[5995..6029).7" Target="10353:[5775..5979).11" />
<Link Source="10353:[5995..6029).7" Target="10312:[3948..3966).2" />
<Link Source="10353:[6002..6028).3" Target="10312:[3948..3966).2" />
<Link Source="10353:[6343..6358).3" Target="10353:[5995..6029).7" />
<Link Source="10353:[6343..6358).3" Target="10353:[6002..6028).3" />
<Link Source="10353:[6384..6410).13" Target="10353:[6002..6028).3" />
<Link Source="10353:[6384..6410).14" Target="10353:[6343..6358).3" />
<Link Source="10353:[6384..6410).14" Target="10353:[6384..6410).13" />
<Link Source="10353:[6384..6410).14" Target="10353:[6002..6028).3" />
<Link Source="10312:[5188..5207).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5209..5220).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5222..5231).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[5222..5231).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5233..5272).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[5233..5272).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5274..5295).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[5274..5295).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5297..5318).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5320..5333).2" Target="10312:[3805..3818).2" />
<Link Source="10312:[5320..5333).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5124..5404).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[4685..4699).4" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).10" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).10" Target="10312:[4685..4699).4" />
<Link Source="10354:[3720..3803).69" Target="10354:[3684..3818).10" />
<Link Source="10354:[3720..3803).69" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).69" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).69" Target="10312:[4685..4699).4" />
<Link Source="10354:[3720..3803).70" Target="10312:[4685..4699).4" />
<Link Source="10354:[3720..3803).71" Target="10354:[3684..3818).10" />
<Link Source="10354:[3720..3803).71" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).71" Target="10354:[3720..3803).70" />
<Link Source="10354:[3720..3803).71" Target="10312:[4685..4699).4" />
<Link Source="10312:[4680..4787).7" Target="10354:[3720..3803).69" />
<Link Source="10312:[4680..4787).7" Target="25002:[4395..4432).28" />
<Link Source="10312:[4826..5058).16" Target="10312:[5830..5839).2" />
<Link Source="10312:[4826..5058).16" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).16" Target="25002:[4395..4432).28" />
<Link Source="10312:[4826..5058).17" Target="25002:[4395..4432).28" />
<Link Source="10382:[1340..1359).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[1374..1383).2" Target="10312:[3730..3739).2" />
<Link Source="10382:[1374..1383).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[1385..1424).2" Target="10312:[3730..3739).2" />
<Link Source="10382:[1385..1424).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[1426..1447).2" Target="10312:[3730..3739).2" />
<Link Source="10382:[1426..1447).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[1449..1470).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[1472..1485).2" Target="10312:[3805..3818).2" />
<Link Source="10382:[1472..1485).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[1572..1586).2" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).11" Target="10382:[1340..1359).2" />
<Link Source="10354:[3684..3818).11" Target="10382:[1572..1586).2" />
<Link Source="10354:[3720..3803).77" Target="10354:[3684..3818).11" />
<Link Source="10354:[3720..3803).77" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).77" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).77" Target="10382:[1572..1586).2" />
<Link Source="10354:[3720..3803).78" Target="10382:[1572..1586).2" />
<Link Source="10354:[3720..3803).79" Target="10354:[3684..3818).11" />
<Link Source="10354:[3720..3803).79" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).79" Target="10354:[3720..3803).78" />
<Link Source="10354:[3720..3803).79" Target="10382:[1572..1586).2" />
<Link Source="10382:[1559..1588).4" Target="10354:[3720..3803).77" />
<Link Source="10382:[1559..1588).4" Target="25002:[4395..4432).28" />
<Link Source="10382:[1619..1629).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[913..1046).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[913..1046).2" Target="10382:[1619..1629).2" />
<Link Source="10382:[949..1031).3" Target="EXTERNAL" />
<Link Source="10382:[949..1031).3" Target="10382:[1619..1629).2" />
<Link Source="10382:[1604..1691).6" Target="10382:[949..1031).3" />
<Link Source="10382:[1604..1691).6" Target="25002:[4395..4432).28" />
<Link Source="10382:[1604..1691).7" Target="10382:[1426..1447).2" />
<Link Source="10382:[1604..1691).7" Target="10382:[1604..1691).6" />
<Link Source="10382:[1604..1691).7" Target="25002:[4395..4432).28" />
<Link Source="10382:[1604..1691).8" Target="25002:[4395..4432).28" />
<Link Source="10346:[10663..10672).2" Target="10312:[3730..3739).2" />
<Link Source="10346:[10663..10672).2" Target="25002:[4395..4432).28" />
<Link Source="10346:[10761..10774).2" Target="10312:[3805..3818).2" />
<Link Source="10346:[10761..10774).2" Target="25002:[4395..4432).28" />
<Link Source="10346:[10861..10875).2" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).13" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).13" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).93" Target="10354:[3684..3818).13" />
<Link Source="10354:[3720..3803).93" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).93" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).93" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).94" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).95" Target="10354:[3684..3818).13" />
<Link Source="10354:[3720..3803).95" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).95" Target="10354:[3720..3803).94" />
<Link Source="10354:[3720..3803).95" Target="10346:[10861..10875).2" />
<Link Source="10346:[10848..10877).4" Target="10354:[3720..3803).93" />
<Link Source="10346:[10848..10877).4" Target="25002:[4395..4432).28" />
<Link Source="10346:[10897..10914).2" Target="25002:[4395..4432).28" />
<Link Source="10346:[7666..7775).2" Target="25002:[4395..4432).28" />
<Link Source="10346:[7666..7775).2" Target="10346:[10897..10914).2" />
<Link Source="10346:[7672..7773).4" Target="10346:[7666..7775).2" />
<Link Source="10346:[7672..7773).4" Target="25002:[4395..4432).28" />
<Link Source="10346:[7672..7773).4" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).4" Target="10346:[10897..10914).2" />
<Link Source="10346:[10893..11127).3" Target="10346:[7672..7773).4" />
<Link Source="10346:[10893..11127).3" Target="25002:[4395..4432).28" />
<Link Source="10346:[3525..3638).10" Target="25002:[4395..4432).28" />
<Link Source="10346:[11369..11508).18" Target="10346:[10761..10774).2" />
<Link Source="10346:[11369..11508).18" Target="10312:[3730..3739).2" />
<Link Source="10312:[7718..7727).2" Target="10346:[10663..10672).2" />
<Link Source="10312:[7718..7727).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[7729..7768).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[7816..7829).2" Target="10346:[11369..11508).18" />
<Link Source="10312:[7816..7829).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[7615..8420).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[7615..8420).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[7903..7936).5" Target="10312:[3730..3739).2" />
<Link Source="10312:[7916..7934).2" Target="10312:[3730..3739).2" />
<Link Source="10353:[4698..4724).4" Target="10312:[7903..7936).5" />
<Link Source="10353:[4698..4724).4" Target="10312:[7916..7934).2" />
<Link Source="10353:[4750..4847).7" Target="10353:[4698..4724).4" />
<Link Source="10353:[4750..4847).7" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).7" Target="10312:[7916..7934).2" />
<Link Source="10353:[4863..5000).13" Target="10353:[4698..4724).4" />
<Link Source="10353:[4863..5000).13" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).13" Target="10312:[7916..7934).2" />
<Link Source="10353:[4863..5000).14" Target="10312:[7916..7934).2" />
<Link Source="10353:[5079..5183).7" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).7" Target="10312:[7916..7934).2" />
<Link Source="10353:[5197..5323).10" Target="10353:[4698..4724).4" />
<Link Source="10353:[5197..5323).10" Target="10353:[5079..5183).7" />
<Link Source="10353:[5197..5323).10" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).19" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).19" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).20" Target="10353:[4698..4724).4" />
<Link Source="10353:[5485..5759).20" Target="10353:[5485..5759).19" />
<Link Source="10353:[5485..5759).20" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).21" Target="10312:[7916..7934).2" />
<Link Source="10353:[5775..5979).13" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).13" Target="10312:[7916..7934).2" />
<Link Source="10353:[5775..5979).15" Target="10353:[4698..4724).4" />
<Link Source="10353:[5775..5979).15" Target="10353:[5775..5979).13" />
<Link Source="10353:[5775..5979).15" Target="10312:[7916..7934).2" />
<Link Source="10353:[5995..6029).10" Target="10353:[5775..5979).15" />
<Link Source="10353:[5995..6029).10" Target="10312:[7916..7934).2" />
<Link Source="10353:[6002..6028).4" Target="10312:[7916..7934).2" />
<Link Source="10353:[6343..6358).4" Target="10353:[5995..6029).10" />
<Link Source="10353:[6343..6358).4" Target="10353:[6002..6028).4" />
<Link Source="10353:[6384..6410).19" Target="10353:[6002..6028).4" />
<Link Source="10353:[6384..6410).20" Target="10353:[6343..6358).4" />
<Link Source="10353:[6384..6410).20" Target="10353:[6384..6410).19" />
<Link Source="10353:[6384..6410).20" Target="10353:[6002..6028).4" />
<Link Source="10312:[7952..7977).5" Target="10312:[3730..3739).2" />
<Link Source="10312:[7952..7977).6" Target="10312:[7718..7727).2" />
<Link Source="10312:[7952..7977).6" Target="10312:[7952..7977).5" />
<Link Source="10312:[7952..7977).6" Target="10312:[3730..3739).2" />
<Link Source="10312:[19030..19039).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[19030..19039).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[19087..19100).2" Target="10312:[7816..7829).2" />
<Link Source="10312:[19087..19100).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[61608..61629).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[61608..61629).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[63439..63448).2" Target="10312:[19030..19039).2" />
<Link Source="10312:[63439..63448).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[63473..63501).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[63503..63516).2" Target="10312:[19087..19100).2" />
<Link Source="10312:[63503..63516).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[63566..63612).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[63638..63668).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[63682..63706).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[64353..69285).10" Target="10312:[63503..63516).2" />
<Link Source="10312:[64353..69285).10" Target="10312:[7718..7727).2" />
<Link Source="10312:[64353..69285).12" Target="10312:[63682..63706).2" />
<Link Source="10312:[64353..69285).12" Target="10312:[7718..7727).2" />
<Link Source="10312:[80978..80991).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[80993..81002).2" Target="10312:[63439..63448).2" />
<Link Source="10312:[80993..81002).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[81004..81017).2" Target="10312:[64353..69285).10" />
<Link Source="10312:[81004..81017).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[81019..81040).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[81042..81069).2" Target="10312:[64353..69285).12" />
<Link Source="10312:[81042..81069).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[81095..84034).2" Target="10312:[80978..80991).2" />
<Link Source="10312:[81095..84034).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[81095..84034).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[81095..84034).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[81196..82523).8" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).9" Target="10312:[80993..81002).2" />
<Link Source="10312:[81196..82523).9" Target="10312:[81196..82523).8" />
<Link Source="10312:[81196..82523).9" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).10" Target="10312:[81019..81040).2" />
<Link Source="10312:[81196..82523).10" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).10" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).13" Target="10312:[81196..82523).9" />
<Link Source="10312:[81196..82523).13" Target="10312:[81196..82523).10" />
<Link Source="10312:[81196..82523).13" Target="10312:[81095..84034).2" />
<Link Source="10312:[81319..81371).2" Target="10312:[80978..80991).2" />
<Link Source="10312:[81319..81371).2" Target="10312:[81196..82523).13" />
<Link Source="10312:[81495..81570).6" Target="10312:[81319..81371).2" />
<Link Source="10312:[81495..81570).6" Target="25002:[4395..4432).28" />
<Link Source="10312:[81495..81570).6" Target="10312:[7718..7727).2" />
<Link Source="10312:[81495..81570).6" Target="10312:[3730..3739).2" />
<Link Source="10312:[81495..81570).6" Target="10312:[81196..82523).13" />
<Link Source="10312:[81495..81570).7" Target="10312:[81319..81371).2" />
<Link Source="10312:[81495..81570).7" Target="10312:[81196..82523).13" />
<Link Source="10312:[81596..82500).7" Target="10312:[81319..81371).2" />
<Link Source="10312:[81596..82500).7" Target="25002:[4395..4432).28" />
<Link Source="10312:[81596..82500).7" Target="10312:[7718..7727).2" />
<Link Source="10312:[81596..82500).7" Target="10312:[3730..3739).2" />
<Link Source="10312:[81596..82500).7" Target="10312:[80993..81002).2" />
<Link Source="10312:[81596..82500).7" Target="10312:[81196..82523).13" />
<Link Source="10312:[81596..82500).8" Target="10312:[81019..81040).2" />
<Link Source="10312:[81596..82500).8" Target="10312:[81196..82523).13" />
<Link Source="10312:[81628..81659).2" Target="10312:[81196..82523).13" />
<Link Source="10353:[7504..7530).4" Target="10312:[81596..82500).8" />
<Link Source="10353:[7504..7530).4" Target="10312:[81628..81659).2" />
<Link Source="10312:[81596..82500).11" Target="10312:[81596..82500).7" />
<Link Source="10312:[81596..82500).11" Target="10353:[7504..7530).4" />
<Link Source="10312:[81596..82500).11" Target="10312:[81196..82523).13" />
<Link Source="10312:[84050..84066).3" Target="10312:[7718..7727).2" />
<Link Source="10312:[66177..69285).16" Target="10312:[63473..63501).2" />
<Link Source="10312:[66177..69285).16" Target="10312:[7718..7727).2" />
<Link Source="10312:[66291..66342).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[75301..75322).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[75301..75322).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75324..75352).2" Target="10312:[66177..69285).16" />
<Link Source="10312:[75324..75352).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).6" Target="10312:[75301..75322).2" />
<Link Source="10312:[75735..75866).6" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).6" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).7" Target="10312:[66291..66342).2" />
<Link Source="10312:[75742..75804).2" Target="10312:[75735..75866).6" />
<Link Source="10312:[75742..75804).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).9" Target="10312:[75324..75352).2" />
<Link Source="10312:[75735..75866).9" Target="10312:[75742..75804).2" />
<Link Source="10312:[66177..69285).19" Target="10312:[63638..63668).2" />
<Link Source="10312:[66177..69285).19" Target="10312:[7718..7727).2" />
<Link Source="10312:[66177..69285).21" Target="10312:[63566..63612).2" />
<Link Source="10312:[66177..69285).21" Target="10312:[7718..7727).2" />
<Link Source="10312:[77543..77571).2" Target="10312:[75735..75866).9" />
<Link Source="10312:[77543..77571).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[77573..77604).2" Target="10312:[66177..69285).19" />
<Link Source="10312:[77573..77604).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[77654..77700).2" Target="10312:[66177..69285).21" />
<Link Source="10312:[77654..77700).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[77501..78044).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[77726..77892).5" Target="10312:[77501..78044).2" />
<Link Source="10312:[77726..77892).5" Target="10312:[7718..7727).2" />
<Link Source="10312:[77726..77892).6" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).6" Target="10312:[7718..7727).2" />
<Link Source="10312:[77730..77782).2" Target="10312:[7718..7727).2" />
<Link Source="10298:[471..492).19" Target="10312:[77726..77892).5" />
<Link Source="10298:[471..492).19" Target="10312:[77730..77782).2" />
<Link Source="10298:[494..511).19" Target="10312:[77726..77892).6" />
<Link Source="10298:[494..511).19" Target="10312:[77730..77782).2" />
<Link Source="10312:[78402..78430).2" Target="10312:[77543..77571).2" />
<Link Source="10312:[78402..78430).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[78432..78463).2" Target="10312:[77573..77604).2" />
<Link Source="10312:[78432..78463).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[78513..78552).2" Target="10312:[77654..77700).2" />
<Link Source="10312:[78513..78552).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[78346..78783).2" Target="10312:[77501..78044).2" />
<Link Source="10312:[78346..78783).2" Target="10312:[7718..7727).2" />
<Link Source="10376:[1085..1113).2" Target="10312:[78402..78430).2" />
<Link Source="10376:[1085..1113).2" Target="10312:[7718..7727).2" />
<Link Source="10376:[1115..1146).2" Target="10312:[78432..78463).2" />
<Link Source="10376:[1115..1146).2" Target="10312:[7718..7727).2" />
<Link Source="10376:[1196..1235).2" Target="10312:[78513..78552).2" />
<Link Source="10376:[1196..1235).2" Target="10312:[7718..7727).2" />
<Link Source="10376:[1028..1425).2" Target="10312:[78346..78783).2" />
<Link Source="10376:[1028..1425).2" Target="10312:[7718..7727).2" />
<Link Source="10286:[30098..30120).2" Target="10376:[1028..1425).2" />
<Link Source="10286:[30098..30120).2" Target="10312:[7718..7727).2" />
<Link Source="10286:[30135..30160).2" Target="10376:[1085..1113).2" />
<Link Source="10286:[30135..30160).2" Target="10312:[7718..7727).2" />
<Link Source="10286:[30175..30206).2" Target="10376:[1115..1146).2" />
<Link Source="10286:[30175..30206).2" Target="10312:[7718..7727).2" />
<Link Source="10286:[30283..30330).2" Target="10376:[1196..1235).2" />
<Link Source="10286:[30283..30330).2" Target="10312:[7718..7727).2" />
<Link Source="10286:[30012..30691).2" Target="10376:[1028..1425).2" />
<Link Source="10286:[30012..30691).2" Target="10312:[7718..7727).2" />
<Link Source="10286:[30356..30522).5" Target="10286:[30012..30691).2" />
<Link Source="10286:[30356..30522).5" Target="10312:[7718..7727).2" />
<Link Source="10286:[30356..30522).6" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).6" Target="10312:[7718..7727).2" />
<Link Source="10286:[30360..30412).2" Target="10312:[7718..7727).2" />
<Link Source="10298:[471..492).20" Target="10286:[30356..30522).5" />
<Link Source="10298:[471..492).20" Target="10286:[30360..30412).2" />
<Link Source="10298:[494..511).20" Target="10286:[30356..30522).6" />
<Link Source="10298:[494..511).20" Target="10286:[30360..30412).2" />
<Link Source="10060:[2136..2158).2" Target="10286:[30098..30120).2" />
<Link Source="10060:[2136..2158).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[2173..2198).2" Target="10286:[30135..30160).2" />
<Link Source="10060:[2173..2198).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[2213..2244).2" Target="10286:[30175..30206).2" />
<Link Source="10060:[2213..2244).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[2320..2366).2" Target="10286:[30283..30330).2" />
<Link Source="10060:[2320..2366).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[5621..5634).2" Target="10060:[2136..2158).2" />
<Link Source="10060:[5621..5634).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[5691..5716).2" Target="10060:[2173..2198).2" />
<Link Source="10060:[5691..5716).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[5731..5762).2" Target="10060:[2213..2244).2" />
<Link Source="10060:[5731..5762).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[5777..5806).2" Target="10060:[2136..2158).2" />
<Link Source="10060:[5777..5806).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[5882..5928).2" Target="10060:[2320..2366).2" />
<Link Source="10060:[5882..5928).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[5954..5991).5" Target="10312:[7718..7727).2" />
<Link Source="10060:[6005..6042).5" Target="10312:[7718..7727).2" />
<Link Source="10060:[6005..6042).6" Target="10060:[5621..5634).2" />
<Link Source="10060:[6005..6042).6" Target="10060:[6005..6042).5" />
<Link Source="10060:[6005..6042).6" Target="10312:[7718..7727).2" />
<Link Source="10060:[6056..6090).3" Target="10060:[5621..5634).2" />
<Link Source="10060:[6056..6090).3" Target="10312:[7718..7727).2" />
<Link Source="10060:[6104..6172).4" Target="10060:[5621..5634).2" />
<Link Source="10060:[6104..6172).4" Target="10312:[7718..7727).2" />
<Link Source="10060:[6188..6219).3" Target="10312:[7718..7727).2" />
<Link Source="10060:[10202..10215).2" Target="10060:[5621..5634).2" />
<Link Source="10060:[10202..10215).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[10265..10311).2" Target="10060:[5882..5928).2" />
<Link Source="10060:[10265..10311).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[10337..10405).4" Target="10060:[10202..10215).2" />
<Link Source="10060:[10337..10405).4" Target="10312:[7718..7727).2" />
<Link Source="10060:[10419..10454).5" Target="10312:[7718..7727).2" />
<Link Source="10060:[10470..10516).2" Target="10060:[10202..10215).2" />
<Link Source="10060:[10470..10516).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[10532..10544).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[10558..11295).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[10558..11295).2" Target="25002:[4395..4432).28" />
<Link Source="10060:[10558..11295).2" Target="10312:[3730..3739).2" />
<Link Source="10060:[11990..12013).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[12078..12091).2" Target="10060:[10202..10215).2" />
<Link Source="10060:[12078..12091).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[12117..12185).4" Target="10060:[12078..12091).2" />
<Link Source="10060:[12117..12185).4" Target="10312:[7718..7727).2" />
<Link Source="10060:[12199..12238).5" Target="10312:[7718..7727).2" />
<Link Source="10060:[12199..12238).6" Target="10060:[11990..12013).2" />
<Link Source="10060:[12199..12238).6" Target="10060:[12199..12238).5" />
<Link Source="10060:[12199..12238).6" Target="10312:[7718..7727).2" />
<Link Source="10346:[11710..11746).2" Target="10312:[19030..19039).2" />
<Link Source="10286:[2155..2260).2" Target="25002:[4395..4432).28" />
<Link Source="10286:[2155..2260).2" Target="10346:[11710..11746).2" />
<Link Source="10286:[2191..2245).5" Target="10286:[2155..2260).2" />
<Link Source="10286:[2191..2245).5" Target="10312:[19030..19039).2" />
<Link Source="10286:[2191..2245).5" Target="10346:[11710..11746).2" />
<Link Source="10286:[2191..2245).6" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).6" Target="10346:[11710..11746).2" />
<Link Source="10286:[2198..2244).2" Target="10346:[11710..11746).2" />
<Link Source="10298:[471..492).22" Target="10286:[2191..2245).5" />
<Link Source="10298:[471..492).22" Target="10286:[2198..2244).2" />
<Link Source="10298:[494..511).22" Target="10286:[2191..2245).6" />
<Link Source="10298:[494..511).22" Target="10286:[2198..2244).2" />
<Link Source="10345:[28225..28251).2" Target="10298:[471..492).22" />
<Link Source="10345:[28225..28251).2" Target="10312:[19030..19039).2" />
<Link Source="10345:[28927..28940).3" Target="10312:[19030..19039).2" />
<Link Source="10346:[12205..12212).2" Target="10312:[19030..19039).2" />
<Link Source="10354:[3720..3803).101" Target="10354:[3684..3818).10" />
<Link Source="10354:[3720..3803).101" Target="10312:[19030..19039).2" />
<Link Source="10354:[3720..3803).101" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).101" Target="10312:[4685..4699).4" />
<Link Source="10312:[4680..4787).11" Target="10354:[3720..3803).101" />
<Link Source="10312:[4680..4787).11" Target="25002:[4395..4432).28" />
<Link Source="10312:[4749..4764).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[4749..4764).2" Target="10312:[4680..4787).11" />
<Link Source="10312:[5087..5101).2" Target="10312:[4749..4764).2" />
<Link Source="10312:[5087..5101).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[43799..44676).7" Target="25002:[4395..4432).28" />
<Link Source="10319:[43853..43873).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[41088..41107).2" Target="10319:[43799..44676).7" />
<Link Source="10319:[41088..41107).2" Target="10319:[43853..43873).2" />
<Link Source="10319:[41138..41158).2" Target="10319:[43853..43873).2" />
<Link Source="10354:[4919..5009).13" Target="10319:[41088..41107).2" />
<Link Source="10354:[4919..5009).13" Target="10319:[41138..41158).2" />
<Link Source="10354:[4094..4107).17" Target="10354:[4919..5009).13" />
<Link Source="10354:[4094..4107).17" Target="10312:[19030..19039).2" />
<Link Source="10354:[4094..4107).17" Target="10319:[41138..41158).2" />
<Link Source="10319:[41133..41220).3" Target="10354:[4094..4107).17" />
<Link Source="10319:[41133..41220).3" Target="10319:[43853..43873).2" />
<Link Source="10319:[41254..41268).2" Target="10319:[43853..43873).2" />
<Link Source="10354:[4525..4595).3" Target="10319:[41088..41107).2" />
<Link Source="10354:[4525..4595).3" Target="10319:[41254..41268).2" />
<Link Source="10354:[4561..4580).3" Target="10354:[4525..4595).3" />
<Link Source="10354:[4561..4580).3" Target="10312:[19030..19039).2" />
<Link Source="10354:[4561..4580).3" Target="10319:[41254..41268).2" />
<Link Source="10319:[41236..41680).5" Target="10354:[4561..4580).3" />
<Link Source="10319:[41236..41680).5" Target="10319:[43853..43873).2" />
<Link Source="10319:[41302..41665).2" Target="10319:[41236..41680).5" />
<Link Source="10319:[41302..41665).2" Target="10312:[19030..19039).2" />
<Link Source="10319:[41634..41646).3" Target="10319:[41302..41665).2" />
<Link Source="10319:[44751..44765).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84201..84218).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84233..84242).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84257..84273).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84288..84313).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84328..84359).2" Target="10319:[41983..42014).2" />
<Link Source="10319:[84328..84359).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84374..84391).2" Target="10319:[44751..44765).2" />
<Link Source="10319:[84374..84391).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84406..84447).2" Target="10319:[44751..44765).2" />
<Link Source="10319:[84406..84447).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84462..84508).2" Target="10319:[44751..44765).2" />
<Link Source="10319:[84462..84508).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84124..109887).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[85320..85348).5" Target="25002:[4395..4432).28" />
<Link Source="10319:[85320..85348).6" Target="10319:[84257..84273).2" />
<Link Source="10319:[85320..85348).6" Target="10319:[85320..85348).5" />
<Link Source="10319:[85320..85348).6" Target="25002:[4395..4432).28" />
<Link Source="10319:[85366..85400).5" Target="25002:[4395..4432).28" />
<Link Source="10319:[85366..85400).6" Target="10319:[84288..84313).2" />
<Link Source="10319:[85366..85400).6" Target="10319:[85366..85400).5" />
<Link Source="10319:[85366..85400).6" Target="25002:[4395..4432).28" />
<Link Source="10319:[85467..85484).3" Target="25002:[4395..4432).28" />
<Link Source="10319:[104078..104122).2" Target="10312:[19030..19039).2" />
<Link Source="10319:[104148..106735).7" Target="10312:[19030..19039).2" />
<Link Source="10319:[104148..106735).8" Target="10319:[104078..104122).2" />
<Link Source="10319:[104148..106735).8" Target="10319:[104148..106735).7" />
<Link Source="10319:[104148..106735).8" Target="10312:[19030..19039).2" />
<Link Source="10319:[104148..106735).9" Target="10319:[104078..104122).2" />
<Link Source="10319:[104148..106735).9" Target="10312:[19030..19039).2" />
<Link Source="10319:[104148..106735).9" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).4" Target="10312:[19030..19039).2" />
<Link Source="10319:[104874..105336).4" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).4" Target="10319:[104148..106735).8" />
<Link Source="10319:[104874..105336).5" Target="10319:[104874..105336).4" />
<Link Source="10319:[104874..105336).5" Target="10319:[84124..109887).2" />
<Link Source="10319:[104874..105336).5" Target="10312:[19030..19039).2" />
<Link Source="10319:[104874..105336).5" Target="10319:[104148..106735).8" />
<Link Source="10319:[105368..106708).2" Target="10319:[84328..84359).2" />
<Link Source="10319:[105368..106708).2" Target="10319:[104148..106735).8" />
<Link Source="10319:[105601..106708).3" Target="10312:[19030..19039).2" />
<Link Source="10319:[105601..106708).3" Target="EXTERNAL" />
<Link Source="10319:[105601..106708).3" Target="10319:[105368..106708).2" />
<Link Source="10319:[84691..84861).3" Target="10312:[19030..19039).2" />
<Link Source="10319:[84691..84861).3" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).3" Target="25002:[4395..4432).28" />
<Link Source="10319:[84764..84846).7" Target="10319:[84257..84273).2" />
<Link Source="10319:[84764..84846).7" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).8" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).10" Target="10312:[19030..19039).2" />
<Link Source="10319:[84764..84846).10" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).11" Target="10319:[84288..84313).2" />
<Link Source="10319:[84764..84846).11" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84845).2" Target="10319:[84691..84861).3" />
<Link Source="10306:[358886..358901).2" Target="10319:[84764..84846).7" />
<Link Source="10306:[358886..358901).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358903..358930).2" Target="10319:[84764..84846).8" />
<Link Source="10306:[358903..358930).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358932..358945).2" Target="10319:[84764..84846).10" />
<Link Source="10306:[358932..358945).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358947..358972).2" Target="10319:[84764..84846).11" />
<Link Source="10306:[358947..358972).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358838..360009).2" Target="10319:[84124..109887).2" />
<Link Source="10306:[358838..360009).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358998..359998).7" Target="10306:[358932..358945).2" />
<Link Source="10306:[358998..359998).7" Target="10312:[19030..19039).2" />
<Link Source="10306:[358998..359998).7" Target="10319:[84764..84845).2" />
<Link Source="10306:[358998..359998).8" Target="10319:[84764..84845).2" />
<Link Source="10319:[44948..45377).3" Target="10312:[19030..19039).2" />
<Link Source="10319:[44948..45377).3" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).3" Target="25002:[4395..4432).28" />
<Link Source="10354:[11428..11441).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[45408..45422).2" Target="25002:[4395..4432).28" />
<Link Source="10287:[2377..2471).3" Target="10312:[19030..19039).2" />
<Link Source="10287:[2377..2471).3" Target="25002:[4395..4432).28" />
<Link Source="10287:[791..833).3" Target="10312:[19030..19039).2" />
<Link Source="10287:[912..927).2" Target="10312:[19030..19039).2" />
<Link Source="10287:[912..919).2" Target="10287:[912..927).2" />
<Link Source="10287:[912..919).2" Target="10312:[19030..19039).2" />
<Link Source="10287:[945..972).2" Target="10312:[19030..19039).2" />
<Link Source="10287:[945..963).2" Target="10287:[945..972).2" />
<Link Source="10287:[945..963).2" Target="10312:[19030..19039).2" />
<Link Source="10286:[21504..21529).2" Target="10312:[19030..19039).2" />
<Link Source="10286:[21546..21561).2" Target="10312:[19030..19039).2" />
<Link Source="10286:[21563..21583).2" Target="10312:[19030..19039).2" />
<Link Source="10286:[22044..22069).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[22044..22069).2" Target="10312:[19030..19039).2" />
<Link Source="10286:[22086..22108).2" Target="10286:[21546..21561).2" />
<Link Source="10286:[22086..22108).2" Target="10312:[19030..19039).2" />
<Link Source="10286:[22110..22130).2" Target="10286:[21563..21583).2" />
<Link Source="10286:[22110..22130).2" Target="10312:[19030..19039).2" />
<Link Source="10286:[22421..22557).13" Target="10286:[22086..22108).2" />
<Link Source="10286:[22421..22557).13" Target="10286:[21504..21529).2" />
<Link Source="10286:[22421..22557).14" Target="10286:[22110..22130).2" />
<Link Source="10286:[22421..22557).14" Target="10286:[21504..21529).2" />
<Link Source="10286:[15616..15690).6" Target="10286:[21504..21529).2" />
<Link Source="10286:[15616..15690).7" Target="10286:[21504..21529).2" />
<Link Source="10286:[15616..15690).7" Target="10312:[19030..19039).2" />
<Link Source="10286:[15616..15690).7" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23056..23081).2" Target="10286:[22044..22069).2" />
<Link Source="10286:[23056..23081).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23124..23146).2" Target="10286:[22421..22557).13" />
<Link Source="10286:[23124..23146).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23161..23181).2" Target="10286:[22421..22557).14" />
<Link Source="10286:[23161..23181).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23281..23301).2" Target="10286:[22044..22069).2" />
<Link Source="10286:[23281..23301).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23380..23684).8" Target="10286:[21504..21529).2" />
<Link Source="10286:[23380..23684).8" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).3" Target="10286:[21504..21529).2" />
<Link Source="10286:[23893..24026).3" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).3" Target="10286:[23161..23181).2" />
<Link Source="10286:[24545..24641).3" Target="10286:[21504..21529).2" />
<Link Source="10286:[24655..25349).2" Target="10286:[24545..24641).3" />
<Link Source="10286:[24655..25349).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26910..26935).2" Target="10286:[23056..23081).2" />
<Link Source="10286:[26910..26935).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26952..26974).2" Target="10286:[23124..23146).2" />
<Link Source="10286:[26952..26974).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[27002..27022).2" Target="10286:[23281..23301).2" />
<Link Source="10286:[27002..27022).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[27048..27088).5" Target="10286:[21504..21529).2" />
<Link Source="10286:[27048..27088).6" Target="10286:[26910..26935).2" />
<Link Source="10286:[27048..27088).6" Target="10286:[27048..27088).5" />
<Link Source="10286:[27048..27088).6" Target="10286:[21504..21529).2" />
<Link Source="10286:[27208..27236).3" Target="10286:[21504..21529).2" />
<Link Source="10286:[27250..27722).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[27738..27845).4" Target="10286:[21504..21529).2" />
<Link Source="10286:[27738..27845).5" Target="10286:[27208..27236).3" />
<Link Source="10286:[27738..27845).5" Target="10286:[27738..27845).4" />
<Link Source="10286:[27738..27845).5" Target="10286:[21504..21529).2" />
<Link Source="10286:[27861..27873).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26281..26812).2" Target="10286:[27861..27873).2" />
<Link Source="10286:[26281..26812).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26450..26769).2" Target="10286:[24545..24641).3" />
<Link Source="10286:[26450..26769).2" Target="10286:[26281..26812).2" />
<Link Source="10287:[1680..1716).2" Target="10312:[19030..19039).2" />
<Link Source="10287:[1680..1716).2" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).2" Target="10287:[1680..1716).2" />
<Link Source="10287:[1683..1690).2" Target="10287:[912..919).2" />
<Link Source="10287:[1683..1690).2" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).3" Target="10287:[1683..1690).2" />
<Link Source="10287:[1683..1716).3" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).3" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).3" Target="10287:[1683..1716).3" />
<Link Source="10319:[51935..52244).3" Target="10319:[13969..14029).1" />
<Link Source="10076:[5223..5250).6" Target="10286:[21504..21529).2" />
<Link Source="10076:[5223..5250).6" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).6" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).6" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).6" Target="10286:[21504..21529).2" />
<Link Source="10076:[5277..5448).6" Target="10076:[4989..5047).1" />
<Link Source="10077:[31258..31297).2" Target="10077:[39610..39829).1" />
<Link Source="10077:[31258..31297).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[44231..44317).17" Target="10286:[21504..21529).2" />
<Link Source="10077:[44231..44317).17" Target="10077:[32567..32606).1" />
<Link Source="10076:[1089..1109).1" Target="10286:[21504..21529).2" />
<Link Source="10076:[1089..1109).1" Target="10077:[32665..34501).5" />
<Link Source="10076:[1050..1225).1" Target="10286:[21504..21529).2" />
<Link Source="10076:[1050..1225).1" Target="10077:[32665..34501).5" />
<Link Source="10076:[1143..1210).1" Target="10076:[1050..1225).1" />
<Link Source="10076:[1143..1210).1" Target="10286:[21504..21529).2" />
<Link Source="10076:[1143..1210).1" Target="10076:[1089..1109).1" />
<Link Source="10076:[1143..1210).1" Target="10077:[32665..34501).5" />
<Link Source="10286:[1688..1781).7" Target="10076:[1143..1210).1" />
<Link Source="10286:[1688..1781).7" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).23" Target="10286:[1688..1781).7" />
<Link Source="10298:[471..492).23" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).7" Target="10076:[1143..1210).1" />
<Link Source="10286:[1820..1963).7" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).24" Target="10286:[1820..1963).7" />
<Link Source="10298:[471..492).24" Target="10286:[1840..1888).1" />
<Link Source="10319:[15146..15291).24" Target="10319:[15146..15291).5" />
<Link Source="10319:[15146..15291).24" Target="10319:[15031..15070).1" />
<Link Source="10319:[15146..15291).24" Target="10319:[13863..13947).1" />
<Link Source="10319:[20095..20126).3" Target="10319:[15146..15291).24" />
<Link Source="10319:[20095..20126).3" Target="10319:[15159..15290).1" />
<Link Source="10319:[20508..20675).20" Target="10319:[20095..20126).3" />
<Link Source="10319:[20508..20675).20" Target="10076:[1143..1210).1" />
<Link Source="10319:[41983..42014).3" Target="10319:[20508..20675).20" />
<Link Source="10319:[41983..42014).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[42478..42805).7" Target="10076:[1143..1210).1" />
<Link Source="10319:[42821..42938).17" Target="10076:[1143..1210).1" />
<Link Source="10319:[42839..42937).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[63849..63870).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63849..63870).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63885..63919).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63885..63919).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63934..63945).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63934..63945).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63960..63969).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63960..63969).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63984..64009).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63984..64009).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63768..64484).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[63768..64484).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[64035..64445).9" Target="10319:[42839..42937).3" />
<Link Source="10319:[64035..64445).10" Target="10319:[63885..63919).3" />
<Link Source="10319:[64035..64445).10" Target="10319:[64035..64445).9" />
<Link Source="10319:[64035..64445).10" Target="10319:[42839..42937).3" />
<Link Source="10319:[64461..64473).5" Target="10319:[42839..42937).3" />
<Link Source="10319:[42821..42938).23" Target="10319:[64461..64473).5" />
<Link Source="10319:[42821..42938).23" Target="10076:[1143..1210).1" />
<Link Source="10319:[42952..43079).7" Target="10076:[1143..1210).1" />
<Link Source="10319:[42952..43079).8" Target="10319:[42821..42938).23" />
<Link Source="10319:[42952..43079).8" Target="10319:[42952..43079).7" />
<Link Source="10319:[42952..43079).8" Target="10076:[1143..1210).1" />
<Link Source="10354:[11312..11328).3" Target="10076:[1143..1210).1" />
<Link Source="10354:[3684..3818).15" Target="10076:[1143..1210).1" />
<Link Source="10354:[3684..3818).15" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).105" Target="10354:[3684..3818).15" />
<Link Source="10354:[3720..3803).105" Target="10076:[1143..1210).1" />
<Link Source="10354:[3720..3803).105" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).105" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).106" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).107" Target="10354:[3684..3818).15" />
<Link Source="10354:[3720..3803).107" Target="10076:[1143..1210).1" />
<Link Source="10354:[3720..3803).107" Target="10354:[3720..3803).106" />
<Link Source="10354:[3720..3803).107" Target="10354:[11312..11328).3" />
<Link Source="10354:[11299..11330).7" Target="10354:[3720..3803).105" />
<Link Source="10354:[11299..11330).7" Target="10076:[1143..1210).1" />
<Link Source="10319:[50330..50355).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[1222..1235).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[5944..5957).3" Target="10312:[1222..1235).3" />
<Link Source="10312:[5944..5957).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[3805..3818).3" Target="10312:[5944..5957).3" />
<Link Source="10312:[3805..3818).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[3905..3919).3" Target="10076:[1143..1210).1" />
<Link Source="10354:[3684..3818).16" Target="10076:[1143..1210).1" />
<Link Source="10354:[3684..3818).16" Target="10312:[3905..3919).3" />
<Link Source="10354:[3720..3803).113" Target="10354:[3684..3818).16" />
<Link Source="10354:[3720..3803).113" Target="10076:[1143..1210).1" />
<Link Source="10354:[3720..3803).113" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).113" Target="10312:[3905..3919).3" />
<Link Source="10354:[3720..3803).114" Target="10312:[3905..3919).3" />
<Link Source="10354:[3720..3803).115" Target="10354:[3684..3818).16" />
<Link Source="10354:[3720..3803).115" Target="10076:[1143..1210).1" />
<Link Source="10354:[3720..3803).115" Target="10354:[3720..3803).114" />
<Link Source="10354:[3720..3803).115" Target="10312:[3905..3919).3" />
<Link Source="10312:[3892..3921).7" Target="10354:[3720..3803).113" />
<Link Source="10312:[3892..3921).7" Target="10076:[1143..1210).1" />
<Link Source="10312:[3935..3968).9" Target="10076:[1143..1210).1" />
<Link Source="10312:[3948..3966).3" Target="10076:[1143..1210).1" />
<Link Source="10353:[4698..4724).5" Target="10312:[3935..3968).9" />
<Link Source="10353:[4698..4724).5" Target="10312:[3948..3966).3" />
<Link Source="10353:[4750..4847).9" Target="10353:[4698..4724).5" />
<Link Source="10353:[4750..4847).9" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).9" Target="10312:[3948..3966).3" />
<Link Source="10353:[4863..5000).17" Target="10353:[4698..4724).5" />
<Link Source="10353:[4863..5000).17" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).17" Target="10312:[3948..3966).3" />
<Link Source="10353:[4863..5000).18" Target="10312:[3948..3966).3" />
<Link Source="10353:[5079..5183).9" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).9" Target="10312:[3948..3966).3" />
<Link Source="10353:[5197..5323).13" Target="10353:[4698..4724).5" />
<Link Source="10353:[5197..5323).13" Target="10353:[5079..5183).9" />
<Link Source="10353:[5197..5323).13" Target="10312:[3948..3966).3" />
<Link Source="10353:[5485..5759).25" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).25" Target="10312:[3948..3966).3" />
<Link Source="10353:[5485..5759).26" Target="10353:[4698..4724).5" />
<Link Source="10353:[5485..5759).26" Target="10353:[5485..5759).25" />
<Link Source="10353:[5485..5759).26" Target="10312:[3948..3966).3" />
<Link Source="10353:[5485..5759).27" Target="10312:[3948..3966).3" />
<Link Source="10353:[5775..5979).17" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).17" Target="10312:[3948..3966).3" />
<Link Source="10353:[5775..5979).19" Target="10353:[4698..4724).5" />
<Link Source="10353:[5775..5979).19" Target="10353:[5775..5979).17" />
<Link Source="10353:[5775..5979).19" Target="10312:[3948..3966).3" />
<Link Source="10353:[5995..6029).13" Target="10353:[5775..5979).19" />
<Link Source="10353:[5995..6029).13" Target="10312:[3948..3966).3" />
<Link Source="10353:[6002..6028).5" Target="10312:[3948..3966).3" />
<Link Source="10353:[6343..6358).5" Target="10353:[5995..6029).13" />
<Link Source="10353:[6343..6358).5" Target="10353:[6002..6028).5" />
<Link Source="10353:[6384..6410).25" Target="10353:[6002..6028).5" />
<Link Source="10353:[6384..6410).26" Target="10353:[6343..6358).5" />
<Link Source="10353:[6384..6410).26" Target="10353:[6384..6410).25" />
<Link Source="10353:[6384..6410).26" Target="10353:[6002..6028).5" />
<Link Source="10312:[5188..5207).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[5209..5220).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[5222..5231).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[5233..5272).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[5274..5295).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[5297..5318).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[5320..5333).3" Target="10312:[3805..3818).3" />
<Link Source="10312:[5320..5333).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[5124..5404).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[4685..4699).7" Target="10076:[1143..1210).1" />
<Link Source="10354:[3684..3818).17" Target="10076:[1143..1210).1" />
<Link Source="10354:[3684..3818).17" Target="10312:[4685..4699).7" />
<Link Source="10354:[3720..3803).121" Target="10354:[3684..3818).17" />
<Link Source="10354:[3720..3803).121" Target="10076:[1143..1210).1" />
<Link Source="10354:[3720..3803).121" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).121" Target="10312:[4685..4699).7" />
<Link Source="10354:[3720..3803).122" Target="10312:[4685..4699).7" />
<Link Source="10354:[3720..3803).123" Target="10354:[3684..3818).17" />
<Link Source="10354:[3720..3803).123" Target="10076:[1143..1210).1" />
<Link Source="10354:[3720..3803).123" Target="10354:[3720..3803).122" />
<Link Source="10354:[3720..3803).123" Target="10312:[4685..4699).7" />
<Link Source="10312:[4680..4787).13" Target="10354:[3720..3803).121" />
<Link Source="10312:[4680..4787).13" Target="10076:[1143..1210).1" />
<Link Source="10312:[4826..5058).31" Target="10076:[1143..1210).1" />
<Link Source="10312:[4826..5058).31" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).32" Target="10076:[1143..1210).1" />
<Link Source="10382:[1340..1359).3" Target="10076:[1143..1210).1" />
<Link Source="10382:[1374..1383).3" Target="10076:[1143..1210).1" />
<Link Source="10382:[1385..1424).3" Target="10076:[1143..1210).1" />
<Link Source="10382:[1426..1447).3" Target="10076:[1143..1210).1" />
<Link Source="10382:[1449..1470).3" Target="10076:[1143..1210).1" />
<Link Source="10382:[1472..1485).3" Target="10312:[3805..3818).3" />
<Link Source="10382:[1472..1485).3" Target="10076:[1143..1210).1" />
<Link Source="10382:[1572..1586).3" Target="10076:[1143..1210).1" />
<Link Source="10354:[3684..3818).18" Target="10382:[1340..1359).3" />
<Link Source="10354:[3684..3818).18" Target="10382:[1572..1586).3" />
<Link Source="10354:[3720..3803).129" Target="10354:[3684..3818).18" />
<Link Source="10354:[3720..3803).129" Target="10076:[1143..1210).1" />
<Link Source="10354:[3720..3803).129" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).129" Target="10382:[1572..1586).3" />
<Link Source="10354:[3720..3803).130" Target="10382:[1572..1586).3" />
<Link Source="10354:[3720..3803).131" Target="10354:[3684..3818).18" />
<Link Source="10354:[3720..3803).131" Target="10076:[1143..1210).1" />
<Link Source="10354:[3720..3803).131" Target="10354:[3720..3803).130" />
<Link Source="10354:[3720..3803).131" Target="10382:[1572..1586).3" />
<Link Source="10382:[1559..1588).7" Target="10354:[3720..3803).129" />
<Link Source="10382:[1559..1588).7" Target="10076:[1143..1210).1" />
<Link Source="10382:[1619..1629).3" Target="10076:[1143..1210).1" />
<Link Source="10382:[913..1046).3" Target="10076:[1143..1210).1" />
<Link Source="10382:[913..1046).3" Target="10382:[1619..1629).3" />
<Link Source="10382:[949..1031).5" Target="EXTERNAL" />
<Link Source="10382:[949..1031).5" Target="10382:[1619..1629).3" />
<Link Source="10382:[1604..1691).11" Target="10382:[949..1031).5" />
<Link Source="10382:[1604..1691).11" Target="10076:[1143..1210).1" />
<Link Source="10382:[1604..1691).12" Target="10382:[1426..1447).3" />
<Link Source="10382:[1604..1691).12" Target="10382:[1604..1691).11" />
<Link Source="10382:[1604..1691).12" Target="10076:[1143..1210).1" />
<Link Source="10382:[1604..1691).13" Target="10076:[1143..1210).1" />
<Link Source="10346:[10761..10774).3" Target="10312:[3805..3818).3" />
<Link Source="10346:[10761..10774).3" Target="10076:[1143..1210).1" />
<Link Source="10346:[10861..10875).3" Target="10076:[1143..1210).1" />
<Link Source="10354:[3684..3818).20" Target="10076:[1143..1210).1" />
<Link Source="10354:[3684..3818).20" Target="10346:[10861..10875).3" />
<Link Source="10354:[3720..3803).145" Target="10354:[3684..3818).20" />
<Link Source="10354:[3720..3803).145" Target="10076:[1143..1210).1" />
<Link Source="10354:[3720..3803).145" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).145" Target="10346:[10861..10875).3" />
<Link Source="10354:[3720..3803).146" Target="10346:[10861..10875).3" />
<Link Source="10354:[3720..3803).147" Target="10354:[3684..3818).20" />
<Link Source="10354:[3720..3803).147" Target="10076:[1143..1210).1" />
<Link Source="10354:[3720..3803).147" Target="10354:[3720..3803).146" />
<Link Source="10354:[3720..3803).147" Target="10346:[10861..10875).3" />
<Link Source="10346:[10848..10877).7" Target="10354:[3720..3803).145" />
<Link Source="10346:[10848..10877).7" Target="10076:[1143..1210).1" />
<Link Source="10346:[10897..10914).3" Target="10076:[1143..1210).1" />
<Link Source="10346:[7666..7775).3" Target="10076:[1143..1210).1" />
<Link Source="10346:[7666..7775).3" Target="10346:[10897..10914).3" />
<Link Source="10346:[7672..7773).7" Target="10346:[7666..7775).3" />
<Link Source="10346:[7672..7773).7" Target="10076:[1143..1210).1" />
<Link Source="10346:[7672..7773).7" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).7" Target="10346:[10897..10914).3" />
<Link Source="10346:[10893..11127).5" Target="10346:[7672..7773).7" />
<Link Source="10346:[10893..11127).5" Target="10076:[1143..1210).1" />
<Link Source="10346:[3525..3638).17" Target="10076:[1143..1210).1" />
<Link Source="10312:[7729..7768).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[7816..7829).3" Target="10346:[10761..10774).3" />
<Link Source="10312:[7816..7829).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[7615..8420).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[7903..7936).9" Target="10076:[1143..1210).1" />
<Link Source="10312:[7916..7934).3" Target="10076:[1143..1210).1" />
<Link Source="10353:[4698..4724).6" Target="10312:[7903..7936).9" />
<Link Source="10353:[4698..4724).6" Target="10312:[7916..7934).3" />
<Link Source="10353:[4750..4847).11" Target="10353:[4698..4724).6" />
<Link Source="10353:[4750..4847).11" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).11" Target="10312:[7916..7934).3" />
<Link Source="10353:[4863..5000).21" Target="10353:[4698..4724).6" />
<Link Source="10353:[4863..5000).21" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).21" Target="10312:[7916..7934).3" />
<Link Source="10353:[4863..5000).22" Target="10312:[7916..7934).3" />
<Link Source="10353:[5079..5183).11" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).11" Target="10312:[7916..7934).3" />
<Link Source="10353:[5197..5323).16" Target="10353:[4698..4724).6" />
<Link Source="10353:[5197..5323).16" Target="10353:[5079..5183).11" />
<Link Source="10353:[5197..5323).16" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).31" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).31" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).32" Target="10353:[4698..4724).6" />
<Link Source="10353:[5485..5759).32" Target="10353:[5485..5759).31" />
<Link Source="10353:[5485..5759).32" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).33" Target="10312:[7916..7934).3" />
<Link Source="10353:[5775..5979).21" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).21" Target="10312:[7916..7934).3" />
<Link Source="10353:[5775..5979).23" Target="10353:[4698..4724).6" />
<Link Source="10353:[5775..5979).23" Target="10353:[5775..5979).21" />
<Link Source="10353:[5775..5979).23" Target="10312:[7916..7934).3" />
<Link Source="10353:[5995..6029).16" Target="10353:[5775..5979).23" />
<Link Source="10353:[5995..6029).16" Target="10312:[7916..7934).3" />
<Link Source="10353:[6002..6028).6" Target="10312:[7916..7934).3" />
<Link Source="10353:[6343..6358).6" Target="10353:[5995..6029).16" />
<Link Source="10353:[6343..6358).6" Target="10353:[6002..6028).6" />
<Link Source="10353:[6384..6410).31" Target="10353:[6002..6028).6" />
<Link Source="10353:[6384..6410).32" Target="10353:[6343..6358).6" />
<Link Source="10353:[6384..6410).32" Target="10353:[6384..6410).31" />
<Link Source="10353:[6384..6410).32" Target="10353:[6002..6028).6" />
<Link Source="10312:[7952..7977).9" Target="10076:[1143..1210).1" />
<Link Source="10312:[19087..19100).3" Target="10312:[7816..7829).3" />
<Link Source="10312:[19087..19100).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[61608..61629).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[63439..63448).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[63473..63501).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[63503..63516).3" Target="10312:[19087..19100).3" />
<Link Source="10312:[63503..63516).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[63566..63612).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[63638..63668).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[63682..63706).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[80978..80991).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[80993..81002).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[80993..81002).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[81004..81017).3" Target="10312:[63503..63516).3" />
<Link Source="10312:[81004..81017).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[81019..81040).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[81019..81040).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[81042..81069).3" Target="10312:[63682..63706).3" />
<Link Source="10312:[81042..81069).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[81095..84034).3" Target="10312:[80978..80991).3" />
<Link Source="10312:[81095..84034).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[81196..82523).15" Target="10312:[81095..84034).3" />
<Link Source="10312:[81196..82523).16" Target="10312:[80993..81002).3" />
<Link Source="10312:[81196..82523).16" Target="10312:[81196..82523).15" />
<Link Source="10312:[81196..82523).16" Target="10312:[81095..84034).3" />
<Link Source="10312:[81196..82523).17" Target="10312:[81019..81040).3" />
<Link Source="10312:[81196..82523).17" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).17" Target="10312:[81095..84034).3" />
<Link Source="10312:[81196..82523).20" Target="10312:[81196..82523).16" />
<Link Source="10312:[81196..82523).20" Target="10312:[81196..82523).17" />
<Link Source="10312:[81196..82523).20" Target="10312:[81095..84034).3" />
<Link Source="10312:[81319..81371).3" Target="10312:[80978..80991).3" />
<Link Source="10312:[81319..81371).3" Target="10312:[81196..82523).20" />
<Link Source="10312:[81495..81570).11" Target="10312:[81319..81371).3" />
<Link Source="10312:[81495..81570).11" Target="10076:[1143..1210).1" />
<Link Source="10312:[81495..81570).11" Target="10312:[81196..82523).20" />
<Link Source="10312:[81495..81570).12" Target="10312:[81319..81371).3" />
<Link Source="10312:[81495..81570).12" Target="10312:[81196..82523).20" />
<Link Source="10312:[81596..82500).13" Target="10312:[81319..81371).3" />
<Link Source="10312:[81596..82500).13" Target="10076:[1143..1210).1" />
<Link Source="10312:[81596..82500).13" Target="10312:[80993..81002).3" />
<Link Source="10312:[81596..82500).13" Target="10312:[81196..82523).20" />
<Link Source="10312:[81596..82500).14" Target="10312:[81019..81040).3" />
<Link Source="10312:[81596..82500).14" Target="10312:[81196..82523).20" />
<Link Source="10312:[81628..81659).3" Target="10312:[81196..82523).20" />
<Link Source="10353:[7504..7530).6" Target="10312:[81596..82500).14" />
<Link Source="10353:[7504..7530).6" Target="10312:[81628..81659).3" />
<Link Source="10312:[81596..82500).17" Target="10312:[81596..82500).13" />
<Link Source="10312:[81596..82500).17" Target="10353:[7504..7530).6" />
<Link Source="10312:[81596..82500).17" Target="10312:[81196..82523).20" />
<Link Source="10312:[84050..84066).5" Target="10076:[1143..1210).1" />
<Link Source="10312:[66177..69285).28" Target="10312:[63473..63501).3" />
<Link Source="10312:[66177..69285).28" Target="10312:[63439..63448).3" />
<Link Source="10312:[66291..66342).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[75301..75322).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[75301..75322).3" Target="10312:[66291..66342).3" />
<Link Source="10312:[75324..75352).3" Target="10312:[66177..69285).28" />
<Link Source="10312:[75324..75352).3" Target="10312:[66291..66342).3" />
<Link Source="10312:[75735..75866).11" Target="10312:[75301..75322).3" />
<Link Source="10312:[75735..75866).11" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).11" Target="10312:[66291..66342).3" />
<Link Source="10312:[75735..75866).12" Target="10312:[66291..66342).3" />
<Link Source="10312:[75742..75804).3" Target="10312:[75735..75866).11" />
<Link Source="10312:[75742..75804).3" Target="10312:[66291..66342).3" />
<Link Source="10312:[75735..75866).14" Target="10312:[75324..75352).3" />
<Link Source="10312:[75735..75866).14" Target="10312:[75742..75804).3" />
<Link Source="10312:[66177..69285).31" Target="10312:[63638..63668).3" />
<Link Source="10312:[66177..69285).31" Target="10312:[63439..63448).3" />
<Link Source="10312:[66177..69285).32" Target="10312:[19087..19100).3" />
<Link Source="10312:[66177..69285).32" Target="10312:[63439..63448).3" />
<Link Source="10312:[66177..69285).33" Target="10312:[63566..63612).3" />
<Link Source="10312:[66177..69285).33" Target="10312:[63439..63448).3" />
<Link Source="10312:[77543..77571).3" Target="10312:[75735..75866).14" />
<Link Source="10312:[77543..77571).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[77573..77604).3" Target="10312:[66177..69285).31" />
<Link Source="10312:[77573..77604).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[77654..77700).3" Target="10312:[66177..69285).33" />
<Link Source="10312:[77654..77700).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[77501..78044).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[77501..78044).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[77726..77892).9" Target="10312:[77501..78044).3" />
<Link Source="10312:[77726..77892).9" Target="10076:[1143..1210).1" />
<Link Source="10312:[77726..77892).9" Target="10312:[63439..63448).3" />
<Link Source="10312:[77726..77892).10" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).10" Target="10312:[63439..63448).3" />
<Link Source="10312:[77730..77782).3" Target="10312:[63439..63448).3" />
<Link Source="10298:[471..492).28" Target="10312:[77726..77892).9" />
<Link Source="10298:[471..492).28" Target="10312:[77730..77782).3" />
<Link Source="10298:[494..511).28" Target="10312:[77726..77892).10" />
<Link Source="10298:[494..511).28" Target="10312:[77730..77782).3" />
<Link Source="10312:[78402..78430).3" Target="10312:[77543..77571).3" />
<Link Source="10312:[78402..78430).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[78432..78463).3" Target="10312:[77573..77604).3" />
<Link Source="10312:[78432..78463).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[78513..78552).3" Target="10312:[77654..77700).3" />
<Link Source="10312:[78513..78552).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[78346..78783).3" Target="10312:[77501..78044).3" />
<Link Source="10312:[78346..78783).3" Target="10312:[63439..63448).3" />
<Link Source="10376:[1085..1113).3" Target="10312:[78402..78430).3" />
<Link Source="10376:[1085..1113).3" Target="10312:[63439..63448).3" />
<Link Source="10376:[1115..1146).3" Target="10312:[78432..78463).3" />
<Link Source="10376:[1115..1146).3" Target="10312:[63439..63448).3" />
<Link Source="10376:[1196..1235).3" Target="10312:[78513..78552).3" />
<Link Source="10376:[1196..1235).3" Target="10312:[63439..63448).3" />
<Link Source="10376:[1028..1425).3" Target="10312:[78346..78783).3" />
<Link Source="10376:[1028..1425).3" Target="10076:[1143..1210).1" />
<Link Source="10376:[1028..1425).3" Target="10312:[63439..63448).3" />
<Link Source="10286:[30098..30120).3" Target="10376:[1028..1425).3" />
<Link Source="10286:[30098..30120).3" Target="10312:[63439..63448).3" />
<Link Source="10286:[30135..30160).3" Target="10376:[1085..1113).3" />
<Link Source="10286:[30135..30160).3" Target="10312:[63439..63448).3" />
<Link Source="10286:[30175..30206).3" Target="10376:[1115..1146).3" />
<Link Source="10286:[30175..30206).3" Target="10312:[63439..63448).3" />
<Link Source="10286:[30283..30330).3" Target="10376:[1196..1235).3" />
<Link Source="10286:[30283..30330).3" Target="10312:[63439..63448).3" />
<Link Source="10286:[30012..30691).3" Target="10376:[1028..1425).3" />
<Link Source="10286:[30012..30691).3" Target="10312:[63439..63448).3" />
<Link Source="10286:[30356..30522).9" Target="10286:[30012..30691).3" />
<Link Source="10286:[30356..30522).9" Target="10076:[1143..1210).1" />
<Link Source="10286:[30356..30522).9" Target="10312:[63439..63448).3" />
<Link Source="10286:[30356..30522).10" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).10" Target="10312:[63439..63448).3" />
<Link Source="10286:[30360..30412).3" Target="10312:[63439..63448).3" />
<Link Source="10298:[471..492).29" Target="10286:[30356..30522).9" />
<Link Source="10298:[471..492).29" Target="10286:[30360..30412).3" />
<Link Source="10298:[494..511).29" Target="10286:[30356..30522).10" />
<Link Source="10298:[494..511).29" Target="10286:[30360..30412).3" />
<Link Source="10060:[2136..2158).3" Target="10286:[30098..30120).3" />
<Link Source="10060:[2136..2158).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[2173..2198).3" Target="10286:[30135..30160).3" />
<Link Source="10060:[2173..2198).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[2213..2244).3" Target="10286:[30175..30206).3" />
<Link Source="10060:[2213..2244).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[2320..2366).3" Target="10286:[30283..30330).3" />
<Link Source="10060:[2320..2366).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[5621..5634).3" Target="10060:[2136..2158).3" />
<Link Source="10060:[5621..5634).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[5691..5716).3" Target="10060:[2173..2198).3" />
<Link Source="10060:[5691..5716).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[5731..5762).3" Target="10060:[2213..2244).3" />
<Link Source="10060:[5731..5762).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[5777..5806).3" Target="10060:[2136..2158).3" />
<Link Source="10060:[5777..5806).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[5882..5928).3" Target="10060:[2320..2366).3" />
<Link Source="10060:[5882..5928).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[5954..5991).9" Target="10312:[63439..63448).3" />
<Link Source="10060:[6005..6042).9" Target="10312:[63439..63448).3" />
<Link Source="10060:[6005..6042).10" Target="10060:[5621..5634).3" />
<Link Source="10060:[6005..6042).10" Target="10060:[6005..6042).9" />
<Link Source="10060:[6005..6042).10" Target="10312:[63439..63448).3" />
<Link Source="10060:[6056..6090).5" Target="10060:[5621..5634).3" />
<Link Source="10060:[6056..6090).5" Target="10076:[1143..1210).1" />
<Link Source="10060:[6056..6090).5" Target="10312:[63439..63448).3" />
<Link Source="10060:[6104..6172).7" Target="10060:[5621..5634).3" />
<Link Source="10060:[6104..6172).7" Target="10312:[63439..63448).3" />
<Link Source="10060:[6188..6219).5" Target="10312:[63439..63448).3" />
<Link Source="10060:[10202..10215).3" Target="10060:[5621..5634).3" />
<Link Source="10060:[10202..10215).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[10265..10311).3" Target="10060:[5882..5928).3" />
<Link Source="10060:[10265..10311).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[10337..10405).7" Target="10060:[10202..10215).3" />
<Link Source="10060:[10337..10405).7" Target="10312:[63439..63448).3" />
<Link Source="10060:[10419..10454).9" Target="10312:[63439..63448).3" />
<Link Source="10060:[10470..10516).3" Target="10060:[10202..10215).3" />
<Link Source="10060:[10470..10516).3" Target="10076:[1143..1210).1" />
<Link Source="10060:[10470..10516).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[10532..10544).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[10558..11295).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[10558..11295).3" Target="10076:[1143..1210).1" />
<Link Source="10060:[11990..12013).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[12078..12091).3" Target="10060:[10202..10215).3" />
<Link Source="10060:[12078..12091).3" Target="10312:[63439..63448).3" />
<Link Source="10060:[12117..12185).7" Target="10060:[12078..12091).3" />
<Link Source="10060:[12117..12185).7" Target="10312:[63439..63448).3" />
<Link Source="10060:[12199..12238).9" Target="10312:[63439..63448).3" />
<Link Source="10060:[12199..12238).10" Target="10060:[11990..12013).3" />
<Link Source="10060:[12199..12238).10" Target="10060:[12199..12238).9" />
<Link Source="10060:[12199..12238).10" Target="10312:[63439..63448).3" />
<Link Source="10346:[11710..11746).3" Target="10312:[63439..63448).3" />
<Link Source="10286:[2155..2260).3" Target="10076:[1143..1210).1" />
<Link Source="10286:[2155..2260).3" Target="10346:[11710..11746).3" />
<Link Source="10286:[2191..2245).9" Target="10286:[2155..2260).3" />
<Link Source="10286:[2191..2245).9" Target="10312:[63439..63448).3" />
<Link Source="10286:[2191..2245).9" Target="10346:[11710..11746).3" />
<Link Source="10286:[2191..2245).10" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).10" Target="10346:[11710..11746).3" />
<Link Source="10286:[2198..2244).3" Target="10346:[11710..11746).3" />
<Link Source="10298:[471..492).31" Target="10286:[2191..2245).9" />
<Link Source="10298:[471..492).31" Target="10286:[2198..2244).3" />
<Link Source="10298:[494..511).31" Target="10286:[2191..2245).10" />
<Link Source="10298:[494..511).31" Target="10286:[2198..2244).3" />
<Link Source="10345:[28225..28251).3" Target="10298:[471..492).31" />
<Link Source="10345:[28225..28251).3" Target="10312:[63439..63448).3" />
<Link Source="10345:[28927..28940).5" Target="10312:[63439..63448).3" />
<Link Source="10346:[12205..12212).3" Target="10312:[63439..63448).3" />
<Link Source="10354:[3720..3803).153" Target="10354:[3684..3818).17" />
<Link Source="10354:[3720..3803).153" Target="10312:[63439..63448).3" />
<Link Source="10354:[3720..3803).153" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).153" Target="10312:[4685..4699).7" />
<Link Source="10312:[4680..4787).17" Target="10354:[3720..3803).153" />
<Link Source="10312:[4680..4787).17" Target="10076:[1143..1210).1" />
<Link Source="10312:[4749..4764).3" Target="10076:[1143..1210).1" />
<Link Source="10312:[4749..4764).3" Target="10312:[4680..4787).17" />
<Link Source="10312:[5087..5101).3" Target="10312:[4749..4764).3" />
<Link Source="10312:[5087..5101).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[43799..44676).13" Target="10076:[1143..1210).1" />
<Link Source="10319:[43853..43873).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[41088..41107).3" Target="10319:[43799..44676).13" />
<Link Source="10319:[41088..41107).3" Target="10319:[43853..43873).3" />
<Link Source="10319:[41138..41158).3" Target="10319:[43853..43873).3" />
<Link Source="10354:[4919..5009).20" Target="10319:[41088..41107).3" />
<Link Source="10354:[4919..5009).20" Target="10319:[41138..41158).3" />
<Link Source="10354:[4094..4107).26" Target="10354:[4919..5009).20" />
<Link Source="10354:[4094..4107).26" Target="10312:[66177..69285).32" />
<Link Source="10354:[4094..4107).26" Target="10319:[41138..41158).3" />
<Link Source="10319:[41133..41220).5" Target="10354:[4094..4107).26" />
<Link Source="10319:[41133..41220).5" Target="10319:[43853..43873).3" />
<Link Source="10319:[41254..41268).3" Target="10319:[43853..43873).3" />
<Link Source="10354:[4525..4595).5" Target="10319:[41088..41107).3" />
<Link Source="10354:[4525..4595).5" Target="10319:[41254..41268).3" />
<Link Source="10354:[4561..4580).5" Target="10354:[4525..4595).5" />
<Link Source="10354:[4561..4580).5" Target="10312:[66177..69285).32" />
<Link Source="10354:[4561..4580).5" Target="10319:[41254..41268).3" />
<Link Source="10319:[41236..41680).9" Target="10354:[4561..4580).5" />
<Link Source="10319:[41236..41680).9" Target="10319:[43853..43873).3" />
<Link Source="10319:[41302..41665).3" Target="10319:[41236..41680).9" />
<Link Source="10319:[41302..41665).3" Target="10312:[66177..69285).32" />
<Link Source="10319:[41634..41646).5" Target="10319:[41302..41665).3" />
<Link Source="10319:[44751..44765).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[84201..84218).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[84233..84242).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[84257..84273).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[84288..84313).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[84328..84359).3" Target="10319:[41983..42014).3" />
<Link Source="10319:[84328..84359).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[84374..84391).3" Target="10319:[44751..44765).3" />
<Link Source="10319:[84374..84391).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[84406..84447).3" Target="10319:[44751..44765).3" />
<Link Source="10319:[84406..84447).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[84462..84508).3" Target="10319:[44751..44765).3" />
<Link Source="10319:[84462..84508).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[84124..109887).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[85320..85348).9" Target="10076:[1143..1210).1" />
<Link Source="10319:[85320..85348).10" Target="10319:[84257..84273).3" />
<Link Source="10319:[85320..85348).10" Target="10319:[85320..85348).9" />
<Link Source="10319:[85320..85348).10" Target="10076:[1143..1210).1" />
<Link Source="10319:[85366..85400).9" Target="10076:[1143..1210).1" />
<Link Source="10319:[85366..85400).10" Target="10319:[84288..84313).3" />
<Link Source="10319:[85366..85400).10" Target="10319:[85366..85400).9" />
<Link Source="10319:[85366..85400).10" Target="10076:[1143..1210).1" />
<Link Source="10319:[85467..85484).5" Target="10076:[1143..1210).1" />
<Link Source="10319:[104078..104122).3" Target="10312:[66177..69285).32" />
<Link Source="10319:[104148..106735).13" Target="10312:[66177..69285).32" />
<Link Source="10319:[104148..106735).14" Target="10319:[104078..104122).3" />
<Link Source="10319:[104148..106735).14" Target="10319:[104148..106735).13" />
<Link Source="10319:[104148..106735).14" Target="10312:[66177..69285).32" />
<Link Source="10319:[104148..106735).15" Target="10319:[104078..104122).3" />
<Link Source="10319:[104148..106735).15" Target="10312:[66177..69285).32" />
<Link Source="10319:[104148..106735).15" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).7" Target="10312:[66177..69285).32" />
<Link Source="10319:[104874..105336).7" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).7" Target="10319:[104148..106735).14" />
<Link Source="10319:[104874..105336).8" Target="10319:[104874..105336).7" />
<Link Source="10319:[104874..105336).8" Target="10319:[84124..109887).3" />
<Link Source="10319:[104874..105336).8" Target="10312:[66177..69285).32" />
<Link Source="10319:[104874..105336).8" Target="10319:[104148..106735).14" />
<Link Source="10319:[105368..106708).3" Target="10319:[84328..84359).3" />
<Link Source="10319:[105368..106708).3" Target="10319:[104148..106735).14" />
<Link Source="10319:[105465..105535).1" Target="10312:[66177..69285).32" />
<Link Source="10319:[105465..105535).1" Target="10319:[105368..106708).3" />
<Link Source="10319:[105465..105535).2" Target="10319:[84288..84313).3" />
<Link Source="10319:[105465..105535).2" Target="10319:[105368..106708).3" />
<Link Source="10319:[105465..105535).3" Target="10319:[84257..84273).3" />
<Link Source="10319:[105465..105535).3" Target="10319:[105368..106708).3" />
<Link Source="10319:[105476..105534).1" Target="10319:[105368..106708).3" />
<Link Source="10319:[76345..76358).1" Target="10319:[105465..105535).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76360..76385).1" Target="10319:[105465..105535).2" />
<Link Source="10319:[76360..76385).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76387..76402).1" Target="10319:[105465..105535).3" />
<Link Source="10319:[76387..76402).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[76345..76358).1" />
<Link Source="10319:[76428..76480).1" Target="10312:[66177..69285).32" />
<Link Source="10319:[76428..76480).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76428..76480).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76494..76582).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[105476..105534).1" />
<Link Source="10319:[84691..84861).5" Target="10312:[66177..69285).32" />
<Link Source="10319:[84691..84861).5" Target="10319:[76428..76480).1" />
<Link Source="10319:[84691..84861).5" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).5" Target="10076:[1143..1210).1" />
<Link Source="10319:[84764..84846).13" Target="10319:[84257..84273).3" />
<Link Source="10319:[84764..84846).13" Target="10319:[84691..84861).5" />
<Link Source="10319:[84764..84846).14" Target="10319:[84691..84861).5" />
<Link Source="10319:[84764..84846).16" Target="10312:[66177..69285).32" />
<Link Source="10319:[84764..84846).16" Target="10319:[84691..84861).5" />
<Link Source="10319:[84764..84846).17" Target="10319:[84288..84313).3" />
<Link Source="10319:[84764..84846).17" Target="10319:[84691..84861).5" />
<Link Source="10319:[84764..84845).3" Target="10319:[84691..84861).5" />
<Link Source="10306:[358886..358901).3" Target="10319:[84764..84846).13" />
<Link Source="10306:[358886..358901).3" Target="10319:[84764..84845).3" />
<Link Source="10306:[358903..358930).3" Target="10319:[84764..84846).14" />
<Link Source="10306:[358903..358930).3" Target="10319:[84764..84845).3" />
<Link Source="10306:[358932..358945).3" Target="10319:[84764..84846).16" />
<Link Source="10306:[358932..358945).3" Target="10319:[84764..84845).3" />
<Link Source="10306:[358947..358972).3" Target="10319:[84764..84846).17" />
<Link Source="10306:[358947..358972).3" Target="10319:[84764..84845).3" />
<Link Source="10306:[358838..360009).3" Target="10319:[84124..109887).3" />
<Link Source="10306:[358838..360009).3" Target="10319:[84764..84845).3" />
<Link Source="10306:[358998..359998).13" Target="10306:[358932..358945).3" />
<Link Source="10306:[358998..359998).13" Target="10319:[76428..76480).1" />
<Link Source="10306:[358998..359998).13" Target="10319:[84764..84845).3" />
<Link Source="10306:[358998..359998).14" Target="10319:[84764..84845).3" />
<Link Source="10319:[44948..45377).5" Target="10312:[66177..69285).32" />
<Link Source="10319:[44948..45377).5" Target="10319:[76428..76480).1" />
<Link Source="10319:[44948..45377).5" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).5" Target="10076:[1143..1210).1" />
<Link Source="10354:[11428..11441).3" Target="10076:[1143..1210).1" />
<Link Source="10319:[45408..45422).3" Target="10076:[1143..1210).1" />
<Link Source="10287:[2377..2471).5" Target="10312:[66177..69285).32" />
<Link Source="10287:[2377..2471).5" Target="10076:[1143..1210).1" />
<Link Source="10287:[791..833).5" Target="10319:[76428..76480).1" />
<Link Source="10287:[791..833).5" Target="10312:[66177..69285).32" />
<Link Source="10287:[912..927).3" Target="10312:[66177..69285).32" />
<Link Source="10287:[912..919).3" Target="10287:[912..927).3" />
<Link Source="10287:[912..919).3" Target="10312:[66177..69285).32" />
<Link Source="10287:[945..972).3" Target="10312:[66177..69285).32" />
<Link Source="10287:[945..963).3" Target="10287:[945..972).3" />
<Link Source="10287:[945..963).3" Target="10312:[66177..69285).32" />
<Link Source="10286:[21546..21561).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[21563..21583).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[22044..22069).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[22086..22108).3" Target="10286:[21546..21561).3" />
<Link Source="10286:[22086..22108).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[22110..22130).3" Target="10286:[21563..21583).3" />
<Link Source="10286:[22110..22130).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[15616..15690).11" Target="10319:[76428..76480).1" />
<Link Source="10286:[15616..15690).12" Target="10319:[76428..76480).1" />
<Link Source="10286:[15616..15690).12" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[23056..23081).3" Target="10286:[22044..22069).3" />
<Link Source="10286:[23056..23081).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[23124..23146).3" Target="10286:[22086..22108).3" />
<Link Source="10286:[23124..23146).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[23161..23181).3" Target="10286:[22110..22130).3" />
<Link Source="10286:[23161..23181).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[23281..23301).3" Target="10286:[22044..22069).3" />
<Link Source="10286:[23281..23301).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[23380..23684).15" Target="10286:[22044..22069).3" />
<Link Source="10286:[23380..23684).15" Target="EXTERNAL" />
<Link Source="10286:[23380..23684).15" Target="10319:[76428..76480).1" />
<Link Source="10286:[23893..24026).5" Target="10286:[22044..22069).3" />
<Link Source="10286:[23893..24026).5" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).5" Target="10319:[76428..76480).1" />
<Link Source="10286:[24545..24641).5" Target="10286:[23161..23181).3" />
<Link Source="10286:[24545..24641).5" Target="10319:[76428..76480).1" />
<Link Source="10286:[24655..25349).3" Target="10286:[24545..24641).5" />
<Link Source="10286:[24655..25349).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[26910..26935).3" Target="10286:[23056..23081).3" />
<Link Source="10286:[26910..26935).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[26952..26974).3" Target="10286:[23124..23146).3" />
<Link Source="10286:[26952..26974).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[27002..27022).3" Target="10286:[23281..23301).3" />
<Link Source="10286:[27002..27022).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[27048..27088).9" Target="10319:[76428..76480).1" />
<Link Source="10286:[27048..27088).10" Target="10286:[26910..26935).3" />
<Link Source="10286:[27048..27088).10" Target="10286:[27048..27088).9" />
<Link Source="10286:[27048..27088).10" Target="10319:[76428..76480).1" />
<Link Source="10286:[27208..27236).5" Target="10319:[76428..76480).1" />
<Link Source="10286:[27250..27722).3" Target="10286:[23056..23081).3" />
<Link Source="10286:[27250..27722).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[27738..27845).7" Target="10319:[76428..76480).1" />
<Link Source="10286:[27738..27845).8" Target="10286:[27208..27236).5" />
<Link Source="10286:[27738..27845).8" Target="10286:[27738..27845).7" />
<Link Source="10286:[27738..27845).8" Target="10319:[76428..76480).1" />
<Link Source="10286:[27861..27873).3" Target="10286:[23056..23081).3" />
<Link Source="10286:[27861..27873).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[26281..26812).3" Target="10286:[27861..27873).3" />
<Link Source="10286:[26281..26812).3" Target="10319:[76428..76480).1" />
<Link Source="10286:[26450..26769).3" Target="10286:[24545..24641).5" />
<Link Source="10286:[26450..26769).3" Target="10286:[26281..26812).3" />
<Link Source="10287:[1680..1716).3" Target="10319:[76428..76480).1" />
<Link Source="10287:[1680..1716).3" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).3" Target="10287:[1680..1716).3" />
<Link Source="10287:[1683..1690).3" Target="10287:[912..919).3" />
<Link Source="10287:[1683..1690).3" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).5" Target="10287:[1683..1690).3" />
<Link Source="10287:[1683..1716).5" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).5" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).5" Target="10287:[1683..1716).5" />
<Link Source="10319:[51935..52244).5" Target="10319:[13969..14029).1" />
<Link Source="10319:[42478..42805).10" Target="10286:[23056..23081).3" />
<Link Source="10319:[42821..42938).25" Target="10286:[23056..23081).3" />
<Link Source="10319:[42839..42937).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[63849..63870).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63849..63870).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63885..63919).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63885..63919).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63934..63945).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63934..63945).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63960..63969).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63960..63969).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63984..64009).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63984..64009).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63768..64484).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[63768..64484).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[64035..64445).13" Target="10319:[42839..42937).4" />
<Link Source="10319:[64035..64445).14" Target="10319:[63885..63919).4" />
<Link Source="10319:[64035..64445).14" Target="10319:[64035..64445).13" />
<Link Source="10319:[64035..64445).14" Target="10319:[42839..42937).4" />
<Link Source="10319:[64461..64473).7" Target="10319:[42839..42937).4" />
<Link Source="10319:[42821..42938).31" Target="10319:[64461..64473).7" />
<Link Source="10319:[42821..42938).31" Target="10286:[23056..23081).3" />
<Link Source="10319:[42952..43079).10" Target="10286:[23056..23081).3" />
<Link Source="10319:[42952..43079).11" Target="10319:[42821..42938).31" />
<Link Source="10319:[42952..43079).11" Target="10319:[42952..43079).10" />
<Link Source="10319:[42952..43079).11" Target="10286:[23056..23081).3" />
<Link Source="10354:[11312..11328).4" Target="10286:[23056..23081).3" />
<Link Source="10354:[3684..3818).22" Target="10286:[23056..23081).3" />
<Link Source="10354:[3684..3818).22" Target="10354:[11312..11328).4" />
<Link Source="10354:[3720..3803).157" Target="10354:[3684..3818).22" />
<Link Source="10354:[3720..3803).157" Target="10286:[23056..23081).3" />
<Link Source="10354:[3720..3803).157" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).157" Target="10354:[11312..11328).4" />
<Link Source="10354:[3720..3803).158" Target="10354:[11312..11328).4" />
<Link Source="10354:[3720..3803).159" Target="10354:[3684..3818).22" />
<Link Source="10354:[3720..3803).159" Target="10286:[23056..23081).3" />
<Link Source="10354:[3720..3803).159" Target="10354:[3720..3803).158" />
<Link Source="10354:[3720..3803).159" Target="10354:[11312..11328).4" />
<Link Source="10354:[11299..11330).10" Target="10354:[3720..3803).157" />
<Link Source="10354:[11299..11330).10" Target="10286:[23056..23081).3" />
<Link Source="10319:[50330..50355).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[3905..3919).4" Target="10286:[23056..23081).3" />
<Link Source="10354:[3684..3818).23" Target="10286:[23056..23081).3" />
<Link Source="10354:[3684..3818).23" Target="10312:[3905..3919).4" />
<Link Source="10354:[3720..3803).165" Target="10354:[3684..3818).23" />
<Link Source="10354:[3720..3803).165" Target="10286:[23056..23081).3" />
<Link Source="10354:[3720..3803).165" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).165" Target="10312:[3905..3919).4" />
<Link Source="10354:[3720..3803).166" Target="10312:[3905..3919).4" />
<Link Source="10354:[3720..3803).167" Target="10354:[3684..3818).23" />
<Link Source="10354:[3720..3803).167" Target="10286:[23056..23081).3" />
<Link Source="10354:[3720..3803).167" Target="10354:[3720..3803).166" />
<Link Source="10354:[3720..3803).167" Target="10312:[3905..3919).4" />
<Link Source="10312:[3892..3921).10" Target="10354:[3720..3803).165" />
<Link Source="10312:[3892..3921).10" Target="10286:[23056..23081).3" />
<Link Source="10312:[3935..3968).13" Target="10286:[23056..23081).3" />
<Link Source="10312:[3948..3966).4" Target="10286:[23056..23081).3" />
<Link Source="10353:[4698..4724).7" Target="10312:[3935..3968).13" />
<Link Source="10353:[4698..4724).7" Target="10312:[3948..3966).4" />
<Link Source="10353:[4750..4847).13" Target="10353:[4698..4724).7" />
<Link Source="10353:[4750..4847).13" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).13" Target="10312:[3948..3966).4" />
<Link Source="10353:[4863..5000).25" Target="10353:[4698..4724).7" />
<Link Source="10353:[4863..5000).25" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).25" Target="10312:[3948..3966).4" />
<Link Source="10353:[4863..5000).26" Target="10312:[3948..3966).4" />
<Link Source="10353:[5079..5183).13" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).13" Target="10312:[3948..3966).4" />
<Link Source="10353:[5197..5323).19" Target="10353:[4698..4724).7" />
<Link Source="10353:[5197..5323).19" Target="10353:[5079..5183).13" />
<Link Source="10353:[5197..5323).19" Target="10312:[3948..3966).4" />
<Link Source="10353:[5485..5759).37" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).37" Target="10312:[3948..3966).4" />
<Link Source="10353:[5485..5759).38" Target="10353:[4698..4724).7" />
<Link Source="10353:[5485..5759).38" Target="10353:[5485..5759).37" />
<Link Source="10353:[5485..5759).38" Target="10312:[3948..3966).4" />
<Link Source="10353:[5485..5759).39" Target="10312:[3948..3966).4" />
<Link Source="10353:[5775..5979).25" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).25" Target="10312:[3948..3966).4" />
<Link Source="10353:[5775..5979).27" Target="10353:[4698..4724).7" />
<Link Source="10353:[5775..5979).27" Target="10353:[5775..5979).25" />
<Link Source="10353:[5775..5979).27" Target="10312:[3948..3966).4" />
<Link Source="10353:[5995..6029).19" Target="10353:[5775..5979).27" />
<Link Source="10353:[5995..6029).19" Target="10312:[3948..3966).4" />
<Link Source="10353:[6002..6028).7" Target="10312:[3948..3966).4" />
<Link Source="10353:[6343..6358).7" Target="10353:[5995..6029).19" />
<Link Source="10353:[6343..6358).7" Target="10353:[6002..6028).7" />
<Link Source="10353:[6384..6410).37" Target="10353:[6002..6028).7" />
<Link Source="10353:[6384..6410).38" Target="10353:[6343..6358).7" />
<Link Source="10353:[6384..6410).38" Target="10353:[6384..6410).37" />
<Link Source="10353:[6384..6410).38" Target="10353:[6002..6028).7" />
<Link Source="10312:[5188..5207).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[5209..5220).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[5222..5231).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[5233..5272).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[5274..5295).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[5297..5318).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[5320..5333).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[5124..5404).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[4685..4699).10" Target="10286:[23056..23081).3" />
<Link Source="10354:[3684..3818).24" Target="10286:[23056..23081).3" />
<Link Source="10354:[3684..3818).24" Target="10312:[4685..4699).10" />
<Link Source="10354:[3720..3803).173" Target="10354:[3684..3818).24" />
<Link Source="10354:[3720..3803).173" Target="10286:[23056..23081).3" />
<Link Source="10354:[3720..3803).173" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).173" Target="10312:[4685..4699).10" />
<Link Source="10354:[3720..3803).174" Target="10312:[4685..4699).10" />
<Link Source="10354:[3720..3803).175" Target="10354:[3684..3818).24" />
<Link Source="10354:[3720..3803).175" Target="10286:[23056..23081).3" />
<Link Source="10354:[3720..3803).175" Target="10354:[3720..3803).174" />
<Link Source="10354:[3720..3803).175" Target="10312:[4685..4699).10" />
<Link Source="10312:[4680..4787).19" Target="10354:[3720..3803).173" />
<Link Source="10312:[4680..4787).19" Target="10286:[23056..23081).3" />
<Link Source="10312:[4826..5058).46" Target="10286:[23056..23081).3" />
<Link Source="10312:[4826..5058).46" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).47" Target="10286:[23056..23081).3" />
<Link Source="10382:[1340..1359).4" Target="10286:[23056..23081).3" />
<Link Source="10382:[1374..1383).4" Target="10286:[23056..23081).3" />
<Link Source="10382:[1385..1424).4" Target="10286:[23056..23081).3" />
<Link Source="10382:[1426..1447).4" Target="10286:[23056..23081).3" />
<Link Source="10382:[1449..1470).4" Target="10286:[23056..23081).3" />
<Link Source="10382:[1472..1485).4" Target="10286:[23056..23081).3" />
<Link Source="10382:[1572..1586).4" Target="10286:[23056..23081).3" />
<Link Source="10354:[3684..3818).25" Target="10382:[1340..1359).4" />
<Link Source="10354:[3684..3818).25" Target="10382:[1572..1586).4" />
<Link Source="10354:[3720..3803).181" Target="10354:[3684..3818).25" />
<Link Source="10354:[3720..3803).181" Target="10286:[23056..23081).3" />
<Link Source="10354:[3720..3803).181" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).181" Target="10382:[1572..1586).4" />
<Link Source="10354:[3720..3803).182" Target="10382:[1572..1586).4" />
<Link Source="10354:[3720..3803).183" Target="10354:[3684..3818).25" />
<Link Source="10354:[3720..3803).183" Target="10286:[23056..23081).3" />
<Link Source="10354:[3720..3803).183" Target="10354:[3720..3803).182" />
<Link Source="10354:[3720..3803).183" Target="10382:[1572..1586).4" />
<Link Source="10382:[1559..1588).10" Target="10354:[3720..3803).181" />
<Link Source="10382:[1559..1588).10" Target="10286:[23056..23081).3" />
<Link Source="10382:[1619..1629).4" Target="10286:[23056..23081).3" />
<Link Source="10382:[913..1046).4" Target="10286:[23056..23081).3" />
<Link Source="10382:[913..1046).4" Target="10382:[1619..1629).4" />
<Link Source="10382:[949..1031).7" Target="EXTERNAL" />
<Link Source="10382:[949..1031).7" Target="10382:[1619..1629).4" />
<Link Source="10382:[1604..1691).16" Target="10382:[949..1031).7" />
<Link Source="10382:[1604..1691).16" Target="10286:[23056..23081).3" />
<Link Source="10382:[1604..1691).17" Target="10382:[1426..1447).4" />
<Link Source="10382:[1604..1691).17" Target="10382:[1604..1691).16" />
<Link Source="10382:[1604..1691).17" Target="10286:[23056..23081).3" />
<Link Source="10382:[1604..1691).18" Target="10286:[23056..23081).3" />
<Link Source="10346:[10861..10875).4" Target="10286:[23056..23081).3" />
<Link Source="10354:[3684..3818).27" Target="10286:[23056..23081).3" />
<Link Source="10354:[3684..3818).27" Target="10346:[10861..10875).4" />
<Link Source="10354:[3720..3803).197" Target="10354:[3684..3818).27" />
<Link Source="10354:[3720..3803).197" Target="10286:[23056..23081).3" />
<Link Source="10354:[3720..3803).197" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).197" Target="10346:[10861..10875).4" />
<Link Source="10354:[3720..3803).198" Target="10346:[10861..10875).4" />
<Link Source="10354:[3720..3803).199" Target="10354:[3684..3818).27" />
<Link Source="10354:[3720..3803).199" Target="10286:[23056..23081).3" />
<Link Source="10354:[3720..3803).199" Target="10354:[3720..3803).198" />
<Link Source="10354:[3720..3803).199" Target="10346:[10861..10875).4" />
<Link Source="10346:[10848..10877).10" Target="10354:[3720..3803).197" />
<Link Source="10346:[10848..10877).10" Target="10286:[23056..23081).3" />
<Link Source="10346:[10897..10914).4" Target="10286:[23056..23081).3" />
<Link Source="10346:[7666..7775).4" Target="10286:[23056..23081).3" />
<Link Source="10346:[7666..7775).4" Target="10346:[10897..10914).4" />
<Link Source="10346:[7672..7773).10" Target="10346:[7666..7775).4" />
<Link Source="10346:[7672..7773).10" Target="10286:[23056..23081).3" />
<Link Source="10346:[7672..7773).10" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).10" Target="10346:[10897..10914).4" />
<Link Source="10346:[10893..11127).7" Target="10346:[7672..7773).10" />
<Link Source="10346:[10893..11127).7" Target="10286:[23056..23081).3" />
<Link Source="10346:[3525..3638).24" Target="10286:[23056..23081).3" />
<Link Source="10312:[7729..7768).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[7615..8420).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[7903..7936).13" Target="10286:[23056..23081).3" />
<Link Source="10312:[7916..7934).4" Target="10286:[23056..23081).3" />
<Link Source="10353:[4698..4724).8" Target="10312:[7903..7936).13" />
<Link Source="10353:[4698..4724).8" Target="10312:[7916..7934).4" />
<Link Source="10353:[4750..4847).15" Target="10353:[4698..4724).8" />
<Link Source="10353:[4750..4847).15" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).15" Target="10312:[7916..7934).4" />
<Link Source="10353:[4863..5000).29" Target="10353:[4698..4724).8" />
<Link Source="10353:[4863..5000).29" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).29" Target="10312:[7916..7934).4" />
<Link Source="10353:[4863..5000).30" Target="10312:[7916..7934).4" />
<Link Source="10353:[5079..5183).15" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).15" Target="10312:[7916..7934).4" />
<Link Source="10353:[5197..5323).22" Target="10353:[4698..4724).8" />
<Link Source="10353:[5197..5323).22" Target="10353:[5079..5183).15" />
<Link Source="10353:[5197..5323).22" Target="10312:[7916..7934).4" />
<Link Source="10353:[5485..5759).43" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).43" Target="10312:[7916..7934).4" />
<Link Source="10353:[5485..5759).44" Target="10353:[4698..4724).8" />
<Link Source="10353:[5485..5759).44" Target="10353:[5485..5759).43" />
<Link Source="10353:[5485..5759).44" Target="10312:[7916..7934).4" />
<Link Source="10353:[5485..5759).45" Target="10312:[7916..7934).4" />
<Link Source="10353:[5775..5979).29" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).29" Target="10312:[7916..7934).4" />
<Link Source="10353:[5775..5979).31" Target="10353:[4698..4724).8" />
<Link Source="10353:[5775..5979).31" Target="10353:[5775..5979).29" />
<Link Source="10353:[5775..5979).31" Target="10312:[7916..7934).4" />
<Link Source="10353:[5995..6029).22" Target="10353:[5775..5979).31" />
<Link Source="10353:[5995..6029).22" Target="10312:[7916..7934).4" />
<Link Source="10353:[6002..6028).8" Target="10312:[7916..7934).4" />
<Link Source="10353:[6343..6358).8" Target="10353:[5995..6029).22" />
<Link Source="10353:[6343..6358).8" Target="10353:[6002..6028).8" />
<Link Source="10353:[6384..6410).43" Target="10353:[6002..6028).8" />
<Link Source="10353:[6384..6410).44" Target="10353:[6343..6358).8" />
<Link Source="10353:[6384..6410).44" Target="10353:[6384..6410).43" />
<Link Source="10353:[6384..6410).44" Target="10353:[6002..6028).8" />
<Link Source="10312:[7952..7977).13" Target="10286:[23056..23081).3" />
<Link Source="10312:[61608..61629).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[63473..63501).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[63503..63516).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[63566..63612).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[63638..63668).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[63682..63706).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[80978..80991).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[80993..81002).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[81004..81017).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[81004..81017).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[81019..81040).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[81019..81040).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[81042..81069).4" Target="10312:[63682..63706).4" />
<Link Source="10312:[81042..81069).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[81095..84034).4" Target="10312:[80978..80991).4" />
<Link Source="10312:[81095..84034).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[81196..82523).22" Target="10312:[81095..84034).4" />
<Link Source="10312:[81196..82523).23" Target="10312:[80993..81002).4" />
<Link Source="10312:[81196..82523).23" Target="10312:[81196..82523).22" />
<Link Source="10312:[81196..82523).23" Target="10312:[81095..84034).4" />
<Link Source="10312:[81196..82523).24" Target="10312:[81019..81040).4" />
<Link Source="10312:[81196..82523).24" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).24" Target="10312:[81095..84034).4" />
<Link Source="10312:[81196..82523).27" Target="10312:[81196..82523).23" />
<Link Source="10312:[81196..82523).27" Target="10312:[81196..82523).24" />
<Link Source="10312:[81196..82523).27" Target="10312:[81095..84034).4" />
<Link Source="10312:[81319..81371).4" Target="10312:[80978..80991).4" />
<Link Source="10312:[81319..81371).4" Target="10312:[81196..82523).27" />
<Link Source="10312:[81495..81570).16" Target="10312:[81319..81371).4" />
<Link Source="10312:[81495..81570).16" Target="10286:[23056..23081).3" />
<Link Source="10312:[81495..81570).16" Target="10312:[81196..82523).27" />
<Link Source="10312:[81495..81570).17" Target="10312:[81319..81371).4" />
<Link Source="10312:[81495..81570).17" Target="10312:[81196..82523).27" />
<Link Source="10312:[81596..82500).19" Target="10312:[81319..81371).4" />
<Link Source="10312:[81596..82500).19" Target="10286:[23056..23081).3" />
<Link Source="10312:[81596..82500).19" Target="10312:[80993..81002).4" />
<Link Source="10312:[81596..82500).19" Target="10312:[81196..82523).27" />
<Link Source="10312:[81596..82500).20" Target="10312:[81019..81040).4" />
<Link Source="10312:[81596..82500).20" Target="10312:[81196..82523).27" />
<Link Source="10312:[81628..81659).4" Target="10312:[81196..82523).27" />
<Link Source="10353:[7504..7530).8" Target="10312:[81596..82500).20" />
<Link Source="10353:[7504..7530).8" Target="10312:[81628..81659).4" />
<Link Source="10312:[81596..82500).23" Target="10312:[81596..82500).19" />
<Link Source="10312:[81596..82500).23" Target="10353:[7504..7530).8" />
<Link Source="10312:[81596..82500).23" Target="10312:[81196..82523).27" />
<Link Source="10312:[84050..84066).7" Target="10286:[23056..23081).3" />
<Link Source="10312:[66177..69285).40" Target="10312:[63473..63501).4" />
<Link Source="10312:[66177..69285).40" Target="10312:[63503..63516).4" />
<Link Source="10312:[66291..66342).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[75301..75322).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[75301..75322).4" Target="10312:[66291..66342).4" />
<Link Source="10312:[75324..75352).4" Target="10312:[66177..69285).40" />
<Link Source="10312:[75324..75352).4" Target="10312:[66291..66342).4" />
<Link Source="10312:[75735..75866).16" Target="10312:[75301..75322).4" />
<Link Source="10312:[75735..75866).16" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).16" Target="10312:[66291..66342).4" />
<Link Source="10312:[75735..75866).17" Target="10312:[66291..66342).4" />
<Link Source="10312:[75742..75804).4" Target="10312:[75735..75866).16" />
<Link Source="10312:[75742..75804).4" Target="10312:[66291..66342).4" />
<Link Source="10312:[75735..75866).19" Target="10312:[75324..75352).4" />
<Link Source="10312:[75735..75866).19" Target="10312:[75742..75804).4" />
<Link Source="10312:[66177..69285).43" Target="10312:[63638..63668).4" />
<Link Source="10312:[66177..69285).43" Target="10312:[63503..63516).4" />
<Link Source="10312:[66177..69285).45" Target="10312:[63566..63612).4" />
<Link Source="10312:[66177..69285).45" Target="10312:[63503..63516).4" />
<Link Source="10312:[77543..77571).4" Target="10312:[75735..75866).19" />
<Link Source="10312:[77543..77571).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[77573..77604).4" Target="10312:[66177..69285).43" />
<Link Source="10312:[77573..77604).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[77654..77700).4" Target="10312:[66177..69285).45" />
<Link Source="10312:[77654..77700).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[77501..78044).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[77501..78044).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[77726..77892).13" Target="10312:[77501..78044).4" />
<Link Source="10312:[77726..77892).13" Target="10286:[23056..23081).3" />
<Link Source="10312:[77726..77892).13" Target="10312:[63503..63516).4" />
<Link Source="10312:[77726..77892).14" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).14" Target="10312:[63503..63516).4" />
<Link Source="10312:[77730..77782).4" Target="10312:[63503..63516).4" />
<Link Source="10298:[471..492).35" Target="10312:[77726..77892).13" />
<Link Source="10298:[471..492).35" Target="10312:[77730..77782).4" />
<Link Source="10298:[494..511).35" Target="10312:[77726..77892).14" />
<Link Source="10298:[494..511).35" Target="10312:[77730..77782).4" />
<Link Source="10312:[78402..78430).4" Target="10312:[77543..77571).4" />
<Link Source="10312:[78402..78430).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[78432..78463).4" Target="10312:[77573..77604).4" />
<Link Source="10312:[78432..78463).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[78513..78552).4" Target="10312:[77654..77700).4" />
<Link Source="10312:[78513..78552).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[78346..78783).4" Target="10312:[77501..78044).4" />
<Link Source="10312:[78346..78783).4" Target="10312:[63503..63516).4" />
<Link Source="10376:[1085..1113).4" Target="10312:[78402..78430).4" />
<Link Source="10376:[1085..1113).4" Target="10312:[63503..63516).4" />
<Link Source="10376:[1115..1146).4" Target="10312:[78432..78463).4" />
<Link Source="10376:[1115..1146).4" Target="10312:[63503..63516).4" />
<Link Source="10376:[1196..1235).4" Target="10312:[78513..78552).4" />
<Link Source="10376:[1196..1235).4" Target="10312:[63503..63516).4" />
<Link Source="10376:[1028..1425).4" Target="10312:[78346..78783).4" />
<Link Source="10376:[1028..1425).4" Target="10286:[23056..23081).3" />
<Link Source="10376:[1028..1425).4" Target="10312:[63503..63516).4" />
<Link Source="10286:[30098..30120).4" Target="10376:[1028..1425).4" />
<Link Source="10286:[30098..30120).4" Target="10312:[63503..63516).4" />
<Link Source="10286:[30135..30160).4" Target="10376:[1085..1113).4" />
<Link Source="10286:[30135..30160).4" Target="10312:[63503..63516).4" />
<Link Source="10286:[30175..30206).4" Target="10376:[1115..1146).4" />
<Link Source="10286:[30175..30206).4" Target="10312:[63503..63516).4" />
<Link Source="10286:[30283..30330).4" Target="10376:[1196..1235).4" />
<Link Source="10286:[30283..30330).4" Target="10312:[63503..63516).4" />
<Link Source="10286:[30012..30691).4" Target="10376:[1028..1425).4" />
<Link Source="10286:[30012..30691).4" Target="10312:[63503..63516).4" />
<Link Source="10286:[30356..30522).13" Target="10286:[30012..30691).4" />
<Link Source="10286:[30356..30522).13" Target="10286:[23056..23081).3" />
<Link Source="10286:[30356..30522).13" Target="10312:[63503..63516).4" />
<Link Source="10286:[30356..30522).14" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).14" Target="10312:[63503..63516).4" />
<Link Source="10286:[30360..30412).4" Target="10312:[63503..63516).4" />
<Link Source="10298:[471..492).36" Target="10286:[30356..30522).13" />
<Link Source="10298:[471..492).36" Target="10286:[30360..30412).4" />
<Link Source="10298:[494..511).36" Target="10286:[30356..30522).14" />
<Link Source="10298:[494..511).36" Target="10286:[30360..30412).4" />
<Link Source="10060:[2136..2158).4" Target="10286:[30098..30120).4" />
<Link Source="10060:[2136..2158).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[2173..2198).4" Target="10286:[30135..30160).4" />
<Link Source="10060:[2173..2198).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[2213..2244).4" Target="10286:[30175..30206).4" />
<Link Source="10060:[2213..2244).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[2320..2366).4" Target="10286:[30283..30330).4" />
<Link Source="10060:[2320..2366).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[5621..5634).4" Target="10060:[2136..2158).4" />
<Link Source="10060:[5621..5634).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[5691..5716).4" Target="10060:[2173..2198).4" />
<Link Source="10060:[5691..5716).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[5731..5762).4" Target="10060:[2213..2244).4" />
<Link Source="10060:[5731..5762).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[5777..5806).4" Target="10060:[2136..2158).4" />
<Link Source="10060:[5777..5806).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[5882..5928).4" Target="10060:[2320..2366).4" />
<Link Source="10060:[5882..5928).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[5954..5991).13" Target="10312:[63503..63516).4" />
<Link Source="10060:[6005..6042).13" Target="10312:[63503..63516).4" />
<Link Source="10060:[6005..6042).14" Target="10060:[5621..5634).4" />
<Link Source="10060:[6005..6042).14" Target="10060:[6005..6042).13" />
<Link Source="10060:[6005..6042).14" Target="10312:[63503..63516).4" />
<Link Source="10060:[6056..6090).7" Target="10060:[5621..5634).4" />
<Link Source="10060:[6056..6090).7" Target="10286:[23056..23081).3" />
<Link Source="10060:[6056..6090).7" Target="10312:[63503..63516).4" />
<Link Source="10060:[6104..6172).10" Target="10060:[5621..5634).4" />
<Link Source="10060:[6104..6172).10" Target="10312:[63503..63516).4" />
<Link Source="10060:[6188..6219).7" Target="10312:[63503..63516).4" />
<Link Source="10060:[10202..10215).4" Target="10060:[5621..5634).4" />
<Link Source="10060:[10202..10215).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[10265..10311).4" Target="10060:[5882..5928).4" />
<Link Source="10060:[10265..10311).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[10337..10405).10" Target="10060:[10202..10215).4" />
<Link Source="10060:[10337..10405).10" Target="10312:[63503..63516).4" />
<Link Source="10060:[10419..10454).13" Target="10312:[63503..63516).4" />
<Link Source="10060:[10470..10516).4" Target="10060:[10202..10215).4" />
<Link Source="10060:[10470..10516).4" Target="10286:[23056..23081).3" />
<Link Source="10060:[10470..10516).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[10532..10544).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[10558..11295).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[10558..11295).4" Target="10286:[23056..23081).3" />
<Link Source="10060:[11990..12013).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[12078..12091).4" Target="10060:[10202..10215).4" />
<Link Source="10060:[12078..12091).4" Target="10312:[63503..63516).4" />
<Link Source="10060:[12117..12185).10" Target="10060:[12078..12091).4" />
<Link Source="10060:[12117..12185).10" Target="10312:[63503..63516).4" />
<Link Source="10060:[12199..12238).13" Target="10312:[63503..63516).4" />
<Link Source="10060:[12199..12238).14" Target="10060:[11990..12013).4" />
<Link Source="10060:[12199..12238).14" Target="10060:[12199..12238).13" />
<Link Source="10060:[12199..12238).14" Target="10312:[63503..63516).4" />
<Link Source="10346:[11710..11746).4" Target="10312:[63503..63516).4" />
<Link Source="10286:[2155..2260).4" Target="10286:[23056..23081).3" />
<Link Source="10286:[2155..2260).4" Target="10346:[11710..11746).4" />
<Link Source="10286:[2191..2245).13" Target="10286:[2155..2260).4" />
<Link Source="10286:[2191..2245).13" Target="10312:[63503..63516).4" />
<Link Source="10286:[2191..2245).13" Target="10346:[11710..11746).4" />
<Link Source="10286:[2191..2245).14" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).14" Target="10346:[11710..11746).4" />
<Link Source="10286:[2198..2244).4" Target="10346:[11710..11746).4" />
<Link Source="10298:[471..492).38" Target="10286:[2191..2245).13" />
<Link Source="10298:[471..492).38" Target="10286:[2198..2244).4" />
<Link Source="10298:[494..511).38" Target="10286:[2191..2245).14" />
<Link Source="10298:[494..511).38" Target="10286:[2198..2244).4" />
<Link Source="10345:[28225..28251).4" Target="10298:[471..492).38" />
<Link Source="10345:[28225..28251).4" Target="10312:[63503..63516).4" />
<Link Source="10345:[28927..28940).7" Target="10312:[63503..63516).4" />
<Link Source="10346:[12205..12212).4" Target="10312:[63503..63516).4" />
<Link Source="10354:[3720..3803).205" Target="10354:[3684..3818).24" />
<Link Source="10354:[3720..3803).205" Target="10312:[63503..63516).4" />
<Link Source="10354:[3720..3803).205" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).205" Target="10312:[4685..4699).10" />
<Link Source="10312:[4680..4787).23" Target="10354:[3720..3803).205" />
<Link Source="10312:[4680..4787).23" Target="10286:[23056..23081).3" />
<Link Source="10312:[4749..4764).4" Target="10286:[23056..23081).3" />
<Link Source="10312:[4749..4764).4" Target="10312:[4680..4787).23" />
<Link Source="10312:[5087..5101).4" Target="10312:[4749..4764).4" />
<Link Source="10312:[5087..5101).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[43799..44676).19" Target="10286:[23056..23081).3" />
<Link Source="10319:[43853..43873).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[41088..41107).4" Target="10319:[43799..44676).19" />
<Link Source="10319:[41088..41107).4" Target="10319:[43853..43873).4" />
<Link Source="10319:[41138..41158).4" Target="10319:[43853..43873).4" />
<Link Source="10354:[4919..5009).27" Target="10319:[41088..41107).4" />
<Link Source="10354:[4919..5009).27" Target="10319:[41138..41158).4" />
<Link Source="10354:[4094..4107).35" Target="10354:[4919..5009).27" />
<Link Source="10354:[4094..4107).35" Target="10312:[63503..63516).4" />
<Link Source="10354:[4094..4107).35" Target="10319:[41138..41158).4" />
<Link Source="10319:[41133..41220).7" Target="10354:[4094..4107).35" />
<Link Source="10319:[41133..41220).7" Target="10319:[43853..43873).4" />
<Link Source="10319:[41254..41268).4" Target="10319:[43853..43873).4" />
<Link Source="10354:[4525..4595).7" Target="10319:[41088..41107).4" />
<Link Source="10354:[4525..4595).7" Target="10319:[41254..41268).4" />
<Link Source="10354:[4561..4580).7" Target="10354:[4525..4595).7" />
<Link Source="10354:[4561..4580).7" Target="10312:[63503..63516).4" />
<Link Source="10354:[4561..4580).7" Target="10319:[41254..41268).4" />
<Link Source="10319:[41236..41680).13" Target="10354:[4561..4580).7" />
<Link Source="10319:[41236..41680).13" Target="10319:[43853..43873).4" />
<Link Source="10319:[41302..41665).4" Target="10319:[41236..41680).13" />
<Link Source="10319:[41302..41665).4" Target="10312:[63503..63516).4" />
<Link Source="10319:[41634..41646).7" Target="10319:[41302..41665).4" />
<Link Source="10319:[44751..44765).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[84201..84218).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[84233..84242).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[84257..84273).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[84288..84313).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[84374..84391).4" Target="10319:[44751..44765).4" />
<Link Source="10319:[84374..84391).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[84406..84447).4" Target="10319:[44751..44765).4" />
<Link Source="10319:[84406..84447).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[84462..84508).4" Target="10319:[44751..44765).4" />
<Link Source="10319:[84462..84508).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[84124..109887).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[85320..85348).13" Target="10286:[23056..23081).3" />
<Link Source="10319:[85320..85348).14" Target="10319:[84257..84273).4" />
<Link Source="10319:[85320..85348).14" Target="10319:[85320..85348).13" />
<Link Source="10319:[85320..85348).14" Target="10286:[23056..23081).3" />
<Link Source="10319:[85366..85400).13" Target="10286:[23056..23081).3" />
<Link Source="10319:[85366..85400).14" Target="10319:[84288..84313).4" />
<Link Source="10319:[85366..85400).14" Target="10319:[85366..85400).13" />
<Link Source="10319:[85366..85400).14" Target="10286:[23056..23081).3" />
<Link Source="10319:[85467..85484).7" Target="10286:[23056..23081).3" />
<Link Source="10319:[104874..105336).10" Target="10312:[63503..63516).4" />
<Link Source="10319:[104874..105336).10" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).11" Target="10319:[104874..105336).10" />
<Link Source="10319:[104874..105336).11" Target="10319:[84124..109887).4" />
<Link Source="10319:[104874..105336).11" Target="10312:[63503..63516).4" />
<Link Source="10319:[105368..106708).4" Target="10319:[84201..84218).4" />
<Link Source="10319:[105368..106708).4" Target="10312:[63503..63516).4" />
<Link Source="10319:[105465..105535).7" Target="10319:[84288..84313).4" />
<Link Source="10319:[105465..105535).7" Target="10319:[105368..106708).4" />
<Link Source="10319:[105465..105535).8" Target="10319:[84257..84273).4" />
<Link Source="10319:[105465..105535).8" Target="10319:[105368..106708).4" />
<Link Source="10319:[76360..76385).2" Target="10319:[105465..105535).7" />
<Link Source="10319:[76360..76385).2" Target="10319:[105368..106708).4" />
<Link Source="10319:[76387..76402).2" Target="10319:[105465..105535).8" />
<Link Source="10319:[76387..76402).2" Target="10319:[105368..106708).4" />
<Link Source="10319:[76494..76582).5" Target="10319:[105368..106708).4" />
<Link Source="10319:[84691..84861).7" Target="10312:[63503..63516).4" />
<Link Source="10319:[84691..84861).7" Target="10319:[105368..106708).4" />
<Link Source="10319:[84691..84861).7" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).7" Target="10286:[23056..23081).3" />
<Link Source="10319:[84764..84846).19" Target="10319:[84257..84273).4" />
<Link Source="10319:[84764..84846).19" Target="10319:[84691..84861).7" />
<Link Source="10319:[84764..84846).20" Target="10319:[84691..84861).7" />
<Link Source="10319:[84764..84846).22" Target="10312:[63503..63516).4" />
<Link Source="10319:[84764..84846).22" Target="10319:[84691..84861).7" />
<Link Source="10319:[84764..84846).23" Target="10319:[84288..84313).4" />
<Link Source="10319:[84764..84846).23" Target="10319:[84691..84861).7" />
<Link Source="10319:[84764..84845).4" Target="10319:[84691..84861).7" />
<Link Source="10306:[358886..358901).4" Target="10319:[84764..84846).19" />
<Link Source="10306:[358886..358901).4" Target="10319:[84764..84845).4" />
<Link Source="10306:[358903..358930).4" Target="10319:[84764..84846).20" />
<Link Source="10306:[358903..358930).4" Target="10319:[84764..84845).4" />
<Link Source="10306:[358932..358945).4" Target="10319:[84764..84846).22" />
<Link Source="10306:[358932..358945).4" Target="10319:[84764..84845).4" />
<Link Source="10306:[358947..358972).4" Target="10319:[84764..84846).23" />
<Link Source="10306:[358947..358972).4" Target="10319:[84764..84845).4" />
<Link Source="10306:[358838..360009).4" Target="10319:[84124..109887).4" />
<Link Source="10306:[358838..360009).4" Target="10319:[84764..84845).4" />
<Link Source="10306:[358998..359998).19" Target="10306:[358932..358945).4" />
<Link Source="10306:[358998..359998).19" Target="10319:[105368..106708).4" />
<Link Source="10306:[358998..359998).19" Target="10319:[84764..84845).4" />
<Link Source="10306:[358998..359998).20" Target="10319:[84764..84845).4" />
<Link Source="10319:[44948..45377).7" Target="10312:[63503..63516).4" />
<Link Source="10319:[44948..45377).7" Target="10319:[105368..106708).4" />
<Link Source="10319:[44948..45377).7" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).7" Target="10286:[23056..23081).3" />
<Link Source="10354:[11428..11441).4" Target="10286:[23056..23081).3" />
<Link Source="10319:[45408..45422).4" Target="10286:[23056..23081).3" />
<Link Source="10287:[2377..2471).7" Target="10312:[63503..63516).4" />
<Link Source="10287:[2377..2471).7" Target="10286:[23056..23081).3" />
<Link Source="10287:[791..833).7" Target="10319:[105368..106708).4" />
<Link Source="10287:[791..833).7" Target="10312:[63503..63516).4" />
<Link Source="10287:[912..927).4" Target="10312:[63503..63516).4" />
<Link Source="10287:[912..919).4" Target="10287:[912..927).4" />
<Link Source="10287:[912..919).4" Target="10312:[63503..63516).4" />
<Link Source="10287:[945..972).4" Target="10312:[63503..63516).4" />
<Link Source="10287:[945..963).4" Target="10287:[945..972).4" />
<Link Source="10287:[945..963).4" Target="10312:[63503..63516).4" />
<Link Source="10286:[21546..21561).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[21563..21583).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[22086..22108).4" Target="10286:[21546..21561).4" />
<Link Source="10286:[22086..22108).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[22110..22130).4" Target="10286:[21563..21583).4" />
<Link Source="10286:[22110..22130).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[15616..15690).16" Target="10319:[105368..106708).4" />
<Link Source="10286:[15616..15690).17" Target="10319:[105368..106708).4" />
<Link Source="10286:[15616..15690).17" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23124..23146).4" Target="10286:[22086..22108).4" />
<Link Source="10286:[23124..23146).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23161..23181).4" Target="10286:[22110..22130).4" />
<Link Source="10286:[23161..23181).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23281..23301).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23380..23684).22" Target="10319:[105368..106708).4" />
<Link Source="10286:[23380..23684).22" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).7" Target="10319:[105368..106708).4" />
<Link Source="10286:[23893..24026).7" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).7" Target="10286:[23161..23181).4" />
<Link Source="10286:[24545..24641).7" Target="10319:[105368..106708).4" />
<Link Source="10286:[24655..25349).4" Target="10286:[24545..24641).7" />
<Link Source="10286:[24655..25349).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[26910..26935).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[26952..26974).4" Target="10286:[23124..23146).4" />
<Link Source="10286:[26952..26974).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[27002..27022).4" Target="10286:[23281..23301).4" />
<Link Source="10286:[27002..27022).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[27048..27088).13" Target="10319:[105368..106708).4" />
<Link Source="10286:[27048..27088).14" Target="10286:[26910..26935).4" />
<Link Source="10286:[27048..27088).14" Target="10286:[27048..27088).13" />
<Link Source="10286:[27048..27088).14" Target="10319:[105368..106708).4" />
<Link Source="10286:[27208..27236).7" Target="10319:[105368..106708).4" />
<Link Source="10286:[27250..27722).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[27738..27845).10" Target="10319:[105368..106708).4" />
<Link Source="10286:[27738..27845).11" Target="10286:[27208..27236).7" />
<Link Source="10286:[27738..27845).11" Target="10286:[27738..27845).10" />
<Link Source="10286:[27738..27845).11" Target="10319:[105368..106708).4" />
<Link Source="10286:[27861..27873).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[26281..26812).4" Target="10286:[27861..27873).4" />
<Link Source="10286:[26281..26812).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[26450..26769).4" Target="10286:[24545..24641).7" />
<Link Source="10286:[26450..26769).4" Target="10286:[26281..26812).4" />
<Link Source="10287:[1680..1716).4" Target="10319:[105368..106708).4" />
<Link Source="10287:[1680..1716).4" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).4" Target="10287:[1680..1716).4" />
<Link Source="10287:[1683..1690).4" Target="10287:[912..919).4" />
<Link Source="10287:[1683..1690).4" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).7" Target="10287:[1683..1690).4" />
<Link Source="10287:[1683..1716).7" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).7" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).7" Target="10287:[1683..1716).7" />
<Link Source="10319:[51935..52244).7" Target="10319:[13969..14029).1" />
<Link Source="10845:[522..547).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[522..547).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[549..580).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[549..580).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[499..728).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[602..612).1" Target="10845:[522..547).1" />
<Link Source="10845:[602..612).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[637..638).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[660..678).1" Target="10845:[549..580).1" />
<Link Source="10845:[660..678).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[701..705).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).2" Target="25002:[4395..4432).1" />
<Link Source="10845:[764..789).1" Target="10845:[602..612).1" />
<Link Source="10845:[764..789).1" Target="10845:[499..728).2" />
<Link Source="10845:[791..816).1" Target="10845:[637..638).1" />
<Link Source="10845:[791..816).1" Target="10845:[499..728).2" />
<Link Source="10845:[818..841).1" Target="10845:[660..678).1" />
<Link Source="10845:[818..841).1" Target="10845:[499..728).2" />
<Link Source="10845:[843..878).1" Target="10845:[701..705).1" />
<Link Source="10845:[843..878).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).1" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).2" />
<Link Source="10843:[661..687).1" Target="10843:[685..687).1" />
<Link Source="10843:[82071..82080).1" Target="10843:[82075..82080).1" />
<Link Source="10843:[82110..82118).1" Target="10843:[82114..82118).1" />
<Link Source="10843:[82447..82485).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82447..82485).2" Target="10843:[82447..82485).1" />
<Link Source="10843:[82447..82485).4" Target="10843:[82110..82118).1" />
<Link Source="10843:[82447..82485).4" Target="10843:[82447..82485).1" />
<Link Source="10843:[82519..82557).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82519..82557).2" Target="10843:[82519..82557).1" />
<Link Source="10843:[82519..82557).4" Target="10843:[82110..82118).1" />
<Link Source="10843:[82519..82557).4" Target="10843:[82519..82557).1" />
<Link Source="10843:[82591..82629).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82591..82629).2" Target="10843:[82591..82629).1" />
<Link Source="10843:[82591..82629).6" Target="10843:[82110..82118).1" />
<Link Source="10843:[82591..82629).6" Target="10843:[82591..82629).1" />
<Link Source="10843:[82663..82701).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82663..82701).2" Target="10843:[82663..82701).1" />
<Link Source="10843:[82663..82701).6" Target="10843:[82110..82118).1" />
<Link Source="10843:[82663..82701).6" Target="10843:[82663..82701).1" />
<Link Source="10843:[82735..82773).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82735..82773).2" Target="10843:[82735..82773).1" />
<Link Source="10843:[82735..82773).8" Target="10843:[82110..82118).1" />
<Link Source="10843:[82735..82773).8" Target="10843:[82735..82773).1" />
<Link Source="10843:[82807..82845).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82807..82845).2" Target="10843:[82807..82845).1" />
<Link Source="10843:[82807..82845).8" Target="10843:[82110..82118).1" />
<Link Source="10843:[82807..82845).8" Target="10843:[82807..82845).1" />
<Link Source="10843:[82879..82917).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82879..82917).2" Target="10843:[82879..82917).1" />
<Link Source="10843:[82879..82917).11" Target="10843:[82110..82118).1" />
<Link Source="10843:[82879..82917).11" Target="10843:[82879..82917).1" />
<Link Source="10843:[82951..82989).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82951..82989).2" Target="10843:[82951..82989).1" />
<Link Source="10843:[82951..82989).11" Target="10843:[82110..82118).1" />
<Link Source="10843:[82951..82989).11" Target="10843:[82951..82989).1" />
<Link Source="10843:[83023..83061).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83023..83061).2" Target="10843:[83023..83061).1" />
<Link Source="10843:[83023..83061).5" Target="10843:[82110..82118).1" />
<Link Source="10843:[83023..83061).5" Target="10843:[83023..83061).1" />
<Link Source="10843:[83095..83133).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83095..83133).2" Target="10843:[83095..83133).1" />
<Link Source="10843:[83095..83133).12" Target="10843:[82110..82118).1" />
<Link Source="10843:[83095..83133).12" Target="10843:[83095..83133).1" />
<Link Source="10843:[83167..83205).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83167..83205).2" Target="10843:[83167..83205).1" />
<Link Source="10843:[83239..83277).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83239..83277).2" Target="10843:[83239..83277).1" />
<Link Source="10843:[82333..83288).2" Target="10843:[82447..82485).1" />
<Link Source="10843:[82333..83288).2" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).3" Target="10843:[82519..82557).1" />
<Link Source="10843:[82333..83288).3" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).4" Target="10843:[82591..82629).1" />
<Link Source="10843:[82333..83288).4" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).5" Target="10843:[82663..82701).1" />
<Link Source="10843:[82333..83288).5" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).6" Target="10843:[82735..82773).1" />
<Link Source="10843:[82333..83288).6" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).7" Target="10843:[82807..82845).1" />
<Link Source="10843:[82333..83288).7" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).8" Target="10843:[82879..82917).1" />
<Link Source="10843:[82333..83288).8" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).9" Target="10843:[82951..82989).1" />
<Link Source="10843:[82333..83288).9" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).10" Target="10843:[83023..83061).1" />
<Link Source="10843:[82333..83288).10" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).11" Target="10843:[83095..83133).1" />
<Link Source="10843:[82333..83288).11" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).12" Target="10843:[83167..83205).1" />
<Link Source="10843:[82333..83288).12" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).13" Target="10843:[83239..83277).1" />
<Link Source="10843:[82333..83288).13" Target="10843:[82333..83288).1" />
<Link Source="10843:[82293..83288).1" Target="10843:[82333..83288).1" />
<Link Source="10843:[83487..83525).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83487..83525).2" Target="10843:[83487..83525).1" />
<Link Source="10843:[83487..83525).3" Target="10843:[82110..82118).1" />
<Link Source="10843:[83487..83525).3" Target="10843:[83487..83525).1" />
<Link Source="10843:[83559..83597).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83559..83597).2" Target="10843:[83559..83597).1" />
<Link Source="10843:[83559..83597).3" Target="10843:[82071..82080).1" />
<Link Source="10843:[83559..83597).3" Target="10843:[83559..83597).1" />
<Link Source="10843:[83631..83669).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83631..83669).2" Target="10843:[83631..83669).1" />
<Link Source="10843:[83631..83669).4" Target="10843:[82071..82080).1" />
<Link Source="10843:[83631..83669).4" Target="10843:[83631..83669).1" />
<Link Source="10843:[83703..83741).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83703..83741).2" Target="10843:[83703..83741).1" />
<Link Source="10843:[83703..83741).5" Target="10843:[82071..82080).1" />
<Link Source="10843:[83703..83741).5" Target="10843:[83703..83741).1" />
<Link Source="10843:[83775..83813).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83775..83813).2" Target="10843:[83775..83813).1" />
<Link Source="10843:[83775..83813).6" Target="10843:[82071..82080).1" />
<Link Source="10843:[83775..83813).6" Target="10843:[83775..83813).1" />
<Link Source="10843:[83847..83885).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83847..83885).2" Target="10843:[83847..83885).1" />
<Link Source="10843:[83847..83885).7" Target="10843:[82071..82080).1" />
<Link Source="10843:[83847..83885).7" Target="10843:[83847..83885).1" />
<Link Source="10843:[83919..83957).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83919..83957).2" Target="10843:[83919..83957).1" />
<Link Source="10843:[83919..83957).8" Target="10843:[82071..82080).1" />
<Link Source="10843:[83919..83957).8" Target="10843:[83919..83957).1" />
<Link Source="10843:[83991..84029).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83991..84029).2" Target="10843:[83991..84029).1" />
<Link Source="10843:[83991..84029).9" Target="10843:[82071..82080).1" />
<Link Source="10843:[83991..84029).9" Target="10843:[83991..84029).1" />
<Link Source="10843:[84063..84101).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84063..84101).2" Target="10843:[84063..84101).1" />
<Link Source="10843:[84063..84101).5" Target="10843:[82071..82080).1" />
<Link Source="10843:[84063..84101).5" Target="10843:[84063..84101).1" />
<Link Source="10843:[84135..84173).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84135..84173).2" Target="10843:[84135..84173).1" />
<Link Source="10843:[84135..84173).11" Target="10843:[82071..82080).1" />
<Link Source="10843:[84135..84173).11" Target="10843:[84135..84173).1" />
<Link Source="10843:[84207..84245).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84207..84245).2" Target="10843:[84207..84245).1" />
<Link Source="10843:[84207..84245).12" Target="10843:[82071..82080).1" />
<Link Source="10843:[84207..84245).12" Target="10843:[84207..84245).1" />
<Link Source="10843:[84279..84317).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84279..84317).2" Target="10843:[84279..84317).1" />
<Link Source="10843:[84279..84317).13" Target="10843:[82071..82080).1" />
<Link Source="10843:[84279..84317).13" Target="10843:[84279..84317).1" />
<Link Source="10843:[83373..84328).2" Target="10843:[83487..83525).1" />
<Link Source="10843:[83373..84328).2" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).3" Target="10843:[83559..83597).1" />
<Link Source="10843:[83373..84328).3" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).4" Target="10843:[83631..83669).1" />
<Link Source="10843:[83373..84328).4" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).5" Target="10843:[83703..83741).1" />
<Link Source="10843:[83373..84328).5" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).6" Target="10843:[83775..83813).1" />
<Link Source="10843:[83373..84328).6" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).7" Target="10843:[83847..83885).1" />
<Link Source="10843:[83373..84328).7" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).8" Target="10843:[83919..83957).1" />
<Link Source="10843:[83373..84328).8" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).9" Target="10843:[83991..84029).1" />
<Link Source="10843:[83373..84328).9" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).10" Target="10843:[84063..84101).1" />
<Link Source="10843:[83373..84328).10" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).11" Target="10843:[84135..84173).1" />
<Link Source="10843:[83373..84328).11" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).12" Target="10843:[84207..84245).1" />
<Link Source="10843:[83373..84328).12" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).13" Target="10843:[84279..84317).1" />
<Link Source="10843:[83373..84328).13" Target="10843:[83373..84328).1" />
<Link Source="10843:[83333..84328).1" Target="10843:[83373..84328).1" />
<Link Source="10845:[900..910).1" Target="10845:[764..789).1" />
<Link Source="10845:[900..910).1" Target="10845:[499..728).2" />
<Link Source="10845:[912..933).1" Target="10845:[791..816).1" />
<Link Source="10845:[912..933).1" Target="10845:[499..728).2" />
<Link Source="10845:[935..953).1" Target="10845:[818..841).1" />
<Link Source="10845:[935..953).1" Target="10845:[499..728).2" />
<Link Source="10845:[955..974).1" Target="10845:[843..878).1" />
<Link Source="10845:[955..974).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).2" Target="10845:[499..728).2" />
<Link Source="10843:[1173..1198).1" Target="10845:[900..910).1" />
<Link Source="10843:[1173..1198).1" Target="10845:[740..997).2" />
<Link Source="10843:[1200..1225).1" Target="10845:[912..933).1" />
<Link Source="10843:[1200..1225).1" Target="10845:[740..997).2" />
<Link Source="10843:[1227..1250).1" Target="10845:[935..953).1" />
<Link Source="10843:[1227..1250).1" Target="10845:[740..997).2" />
<Link Source="10843:[1252..1287).1" Target="10845:[955..974).1" />
<Link Source="10843:[1252..1287).1" Target="10845:[740..997).2" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).1" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).2" />
<Link Source="10843:[734..744).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[734..744).1" Target="10845:[740..997).2" />
<Link Source="10843:[778..799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[778..799).1" Target="10845:[740..997).2" />
<Link Source="10843:[835..853).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[835..853).1" Target="10845:[740..997).2" />
<Link Source="10843:[1113..1134).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1113..1134).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).2" Target="10843:[1173..1198).1" />
<Link Source="10843:[1313..1354).2" Target="10843:[1313..1354).1" />
<Link Source="10843:[1313..1354).2" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).1" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1368..1474).2" Target="10843:[1368..1474).1" />
<Link Source="10843:[1368..1474).2" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).1" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1488..1600).2" Target="10843:[1488..1600).1" />
<Link Source="10843:[1488..1600).2" Target="10845:[740..997).2" />
<Link Source="10843:[1616..1631).1" Target="10843:[1173..1198).1" />
<Link Source="10843:[1616..1631).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1616..1631).1" Target="10845:[740..997).2" />
<Link Source="10843:[1659..1685).1" Target="10843:[1200..1225).1" />
<Link Source="10843:[1659..1685).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1659..1685).1" Target="10845:[740..997).2" />
<Link Source="10843:[1724..1742).1" Target="10843:[1227..1250).1" />
<Link Source="10843:[1724..1742).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1724..1742).1" Target="10845:[740..997).2" />
<Link Source="10843:[1778..1799).1" Target="10843:[1252..1287).1" />
<Link Source="10843:[1778..1799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1778..1799).1" Target="10845:[740..997).2" />
<Link Source="25002:[4395..4432).46" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).46" Target="10319:[105368..106708).4" />
<Link Source="25002:[4395..4432).46" Target="10843:[1616..1631).1" />
<Link Source="25002:[4395..4432).46" Target="10843:[1659..1685).1" />
<Link Source="25002:[4395..4432).46" Target="10843:[1724..1742).1" />
<Link Source="25002:[4395..4432).46" Target="10843:[1778..1799).1" />
<Link Source="25002:[4395..4432).46" Target="28001:[40426..41067).3" />
<Link Source="10076:[5223..5250).10" Target="25002:[4395..4432).46" />
<Link Source="10076:[5223..5250).10" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).10" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).10" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).10" Target="25002:[4395..4432).46" />
<Link Source="10076:[5277..5448).10" Target="10076:[4989..5047).1" />
<Link Source="10077:[44231..44317).25" Target="25002:[4395..4432).46" />
<Link Source="10077:[44231..44317).25" Target="10077:[32567..32606).1" />
<Link Source="10286:[1688..1781).13" Target="25002:[4395..4432).46" />
<Link Source="10286:[1688..1781).13" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).39" Target="10286:[1688..1781).13" />
<Link Source="10298:[471..492).39" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).13" Target="25002:[4395..4432).46" />
<Link Source="10286:[1820..1963).13" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).40" Target="10286:[1820..1963).13" />
<Link Source="10298:[471..492).40" Target="10286:[1840..1888).1" />
<Link Source="10319:[42478..42805).13" Target="25002:[4395..4432).46" />
<Link Source="10319:[42821..42938).33" Target="25002:[4395..4432).46" />
<Link Source="10319:[42839..42937).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[63849..63870).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63849..63870).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63885..63919).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63885..63919).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63934..63945).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63934..63945).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63960..63969).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63960..63969).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63984..64009).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63984..64009).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63768..64484).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[63768..64484).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[64035..64445).17" Target="10319:[42839..42937).5" />
<Link Source="10319:[64035..64445).18" Target="10319:[63885..63919).5" />
<Link Source="10319:[64035..64445).18" Target="10319:[64035..64445).17" />
<Link Source="10319:[64035..64445).18" Target="10319:[42839..42937).5" />
<Link Source="10319:[64461..64473).9" Target="10319:[42839..42937).5" />
<Link Source="10319:[42821..42938).39" Target="10319:[64461..64473).9" />
<Link Source="10319:[42821..42938).39" Target="25002:[4395..4432).46" />
<Link Source="10319:[42952..43079).13" Target="25002:[4395..4432).46" />
<Link Source="10319:[42952..43079).14" Target="10319:[42821..42938).39" />
<Link Source="10319:[42952..43079).14" Target="10319:[42952..43079).13" />
<Link Source="10319:[42952..43079).14" Target="25002:[4395..4432).46" />
<Link Source="10354:[11312..11328).5" Target="25002:[4395..4432).46" />
<Link Source="10354:[3684..3818).29" Target="25002:[4395..4432).46" />
<Link Source="10354:[3684..3818).29" Target="10354:[11312..11328).5" />
<Link Source="10354:[3720..3803).209" Target="10354:[3684..3818).29" />
<Link Source="10354:[3720..3803).209" Target="25002:[4395..4432).46" />
<Link Source="10354:[3720..3803).209" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).209" Target="10354:[11312..11328).5" />
<Link Source="10354:[3720..3803).210" Target="10354:[11312..11328).5" />
<Link Source="10354:[3720..3803).211" Target="10354:[3684..3818).29" />
<Link Source="10354:[3720..3803).211" Target="25002:[4395..4432).46" />
<Link Source="10354:[3720..3803).211" Target="10354:[3720..3803).210" />
<Link Source="10354:[3720..3803).211" Target="10354:[11312..11328).5" />
<Link Source="10354:[11299..11330).13" Target="10354:[3720..3803).209" />
<Link Source="10354:[11299..11330).13" Target="25002:[4395..4432).46" />
<Link Source="10319:[50330..50355).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[3905..3919).5" Target="25002:[4395..4432).46" />
<Link Source="10354:[3684..3818).30" Target="25002:[4395..4432).46" />
<Link Source="10354:[3684..3818).30" Target="10312:[3905..3919).5" />
<Link Source="10354:[3720..3803).217" Target="10354:[3684..3818).30" />
<Link Source="10354:[3720..3803).217" Target="25002:[4395..4432).46" />
<Link Source="10354:[3720..3803).217" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).217" Target="10312:[3905..3919).5" />
<Link Source="10354:[3720..3803).218" Target="10312:[3905..3919).5" />
<Link Source="10354:[3720..3803).219" Target="10354:[3684..3818).30" />
<Link Source="10354:[3720..3803).219" Target="25002:[4395..4432).46" />
<Link Source="10354:[3720..3803).219" Target="10354:[3720..3803).218" />
<Link Source="10354:[3720..3803).219" Target="10312:[3905..3919).5" />
<Link Source="10312:[3892..3921).13" Target="10354:[3720..3803).217" />
<Link Source="10312:[3892..3921).13" Target="25002:[4395..4432).46" />
<Link Source="10312:[3935..3968).17" Target="25002:[4395..4432).46" />
<Link Source="10312:[3948..3966).5" Target="25002:[4395..4432).46" />
<Link Source="10353:[4698..4724).9" Target="10312:[3935..3968).17" />
<Link Source="10353:[4698..4724).9" Target="10312:[3948..3966).5" />
<Link Source="10353:[4750..4847).17" Target="10353:[4698..4724).9" />
<Link Source="10353:[4750..4847).17" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).17" Target="10312:[3948..3966).5" />
<Link Source="10353:[4863..5000).33" Target="10353:[4698..4724).9" />
<Link Source="10353:[4863..5000).33" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).33" Target="10312:[3948..3966).5" />
<Link Source="10353:[4863..5000).34" Target="10312:[3948..3966).5" />
<Link Source="10353:[5079..5183).17" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).17" Target="10312:[3948..3966).5" />
<Link Source="10353:[5197..5323).25" Target="10353:[4698..4724).9" />
<Link Source="10353:[5197..5323).25" Target="10353:[5079..5183).17" />
<Link Source="10353:[5197..5323).25" Target="10312:[3948..3966).5" />
<Link Source="10353:[5485..5759).49" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).49" Target="10312:[3948..3966).5" />
<Link Source="10353:[5485..5759).50" Target="10353:[4698..4724).9" />
<Link Source="10353:[5485..5759).50" Target="10353:[5485..5759).49" />
<Link Source="10353:[5485..5759).50" Target="10312:[3948..3966).5" />
<Link Source="10353:[5485..5759).51" Target="10312:[3948..3966).5" />
<Link Source="10353:[5775..5979).33" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).33" Target="10312:[3948..3966).5" />
<Link Source="10353:[5775..5979).35" Target="10353:[4698..4724).9" />
<Link Source="10353:[5775..5979).35" Target="10353:[5775..5979).33" />
<Link Source="10353:[5775..5979).35" Target="10312:[3948..3966).5" />
<Link Source="10353:[5995..6029).25" Target="10353:[5775..5979).35" />
<Link Source="10353:[5995..6029).25" Target="10312:[3948..3966).5" />
<Link Source="10353:[6002..6028).9" Target="10312:[3948..3966).5" />
<Link Source="10353:[6343..6358).9" Target="10353:[5995..6029).25" />
<Link Source="10353:[6343..6358).9" Target="10353:[6002..6028).9" />
<Link Source="10353:[6384..6410).49" Target="10353:[6002..6028).9" />
<Link Source="10353:[6384..6410).50" Target="10353:[6343..6358).9" />
<Link Source="10353:[6384..6410).50" Target="10353:[6384..6410).49" />
<Link Source="10353:[6384..6410).50" Target="10353:[6002..6028).9" />
<Link Source="10312:[5188..5207).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[5209..5220).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[5222..5231).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[5233..5272).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[5274..5295).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[5297..5318).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[5320..5333).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[5124..5404).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[4685..4699).13" Target="25002:[4395..4432).46" />
<Link Source="10354:[3684..3818).31" Target="25002:[4395..4432).46" />
<Link Source="10354:[3684..3818).31" Target="10312:[4685..4699).13" />
<Link Source="10354:[3720..3803).225" Target="10354:[3684..3818).31" />
<Link Source="10354:[3720..3803).225" Target="25002:[4395..4432).46" />
<Link Source="10354:[3720..3803).225" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).225" Target="10312:[4685..4699).13" />
<Link Source="10354:[3720..3803).226" Target="10312:[4685..4699).13" />
<Link Source="10354:[3720..3803).227" Target="10354:[3684..3818).31" />
<Link Source="10354:[3720..3803).227" Target="25002:[4395..4432).46" />
<Link Source="10354:[3720..3803).227" Target="10354:[3720..3803).226" />
<Link Source="10354:[3720..3803).227" Target="10312:[4685..4699).13" />
<Link Source="10312:[4680..4787).25" Target="10354:[3720..3803).225" />
<Link Source="10312:[4680..4787).25" Target="25002:[4395..4432).46" />
<Link Source="10312:[4826..5058).61" Target="25002:[4395..4432).46" />
<Link Source="10312:[4826..5058).61" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).62" Target="25002:[4395..4432).46" />
<Link Source="10382:[1340..1359).5" Target="25002:[4395..4432).46" />
<Link Source="10382:[1374..1383).5" Target="25002:[4395..4432).46" />
<Link Source="10382:[1385..1424).5" Target="25002:[4395..4432).46" />
<Link Source="10382:[1426..1447).5" Target="25002:[4395..4432).46" />
<Link Source="10382:[1449..1470).5" Target="25002:[4395..4432).46" />
<Link Source="10382:[1472..1485).5" Target="25002:[4395..4432).46" />
<Link Source="10382:[1572..1586).5" Target="25002:[4395..4432).46" />
<Link Source="10354:[3684..3818).32" Target="10382:[1340..1359).5" />
<Link Source="10354:[3684..3818).32" Target="10382:[1572..1586).5" />
<Link Source="10354:[3720..3803).233" Target="10354:[3684..3818).32" />
<Link Source="10354:[3720..3803).233" Target="25002:[4395..4432).46" />
<Link Source="10354:[3720..3803).233" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).233" Target="10382:[1572..1586).5" />
<Link Source="10354:[3720..3803).234" Target="10382:[1572..1586).5" />
<Link Source="10354:[3720..3803).235" Target="10354:[3684..3818).32" />
<Link Source="10354:[3720..3803).235" Target="25002:[4395..4432).46" />
<Link Source="10354:[3720..3803).235" Target="10354:[3720..3803).234" />
<Link Source="10354:[3720..3803).235" Target="10382:[1572..1586).5" />
<Link Source="10382:[1559..1588).13" Target="10354:[3720..3803).233" />
<Link Source="10382:[1559..1588).13" Target="25002:[4395..4432).46" />
<Link Source="10382:[1619..1629).5" Target="25002:[4395..4432).46" />
<Link Source="10382:[913..1046).5" Target="25002:[4395..4432).46" />
<Link Source="10382:[913..1046).5" Target="10382:[1619..1629).5" />
<Link Source="10382:[949..1031).9" Target="EXTERNAL" />
<Link Source="10382:[949..1031).9" Target="10382:[1619..1629).5" />
<Link Source="10382:[1604..1691).21" Target="10382:[949..1031).9" />
<Link Source="10382:[1604..1691).21" Target="25002:[4395..4432).46" />
<Link Source="10382:[1604..1691).22" Target="10382:[1426..1447).5" />
<Link Source="10382:[1604..1691).22" Target="10382:[1604..1691).21" />
<Link Source="10382:[1604..1691).22" Target="25002:[4395..4432).46" />
<Link Source="10382:[1604..1691).23" Target="25002:[4395..4432).46" />
<Link Source="10346:[10861..10875).5" Target="25002:[4395..4432).46" />
<Link Source="10354:[3684..3818).34" Target="25002:[4395..4432).46" />
<Link Source="10354:[3684..3818).34" Target="10346:[10861..10875).5" />
<Link Source="10354:[3720..3803).249" Target="10354:[3684..3818).34" />
<Link Source="10354:[3720..3803).249" Target="25002:[4395..4432).46" />
<Link Source="10354:[3720..3803).249" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).249" Target="10346:[10861..10875).5" />
<Link Source="10354:[3720..3803).250" Target="10346:[10861..10875).5" />
<Link Source="10354:[3720..3803).251" Target="10354:[3684..3818).34" />
<Link Source="10354:[3720..3803).251" Target="25002:[4395..4432).46" />
<Link Source="10354:[3720..3803).251" Target="10354:[3720..3803).250" />
<Link Source="10354:[3720..3803).251" Target="10346:[10861..10875).5" />
<Link Source="10346:[10848..10877).13" Target="10354:[3720..3803).249" />
<Link Source="10346:[10848..10877).13" Target="25002:[4395..4432).46" />
<Link Source="10346:[10897..10914).5" Target="25002:[4395..4432).46" />
<Link Source="10346:[7666..7775).5" Target="25002:[4395..4432).46" />
<Link Source="10346:[7666..7775).5" Target="10346:[10897..10914).5" />
<Link Source="10346:[7672..7773).13" Target="10346:[7666..7775).5" />
<Link Source="10346:[7672..7773).13" Target="25002:[4395..4432).46" />
<Link Source="10346:[7672..7773).13" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).13" Target="10346:[10897..10914).5" />
<Link Source="10346:[10893..11127).9" Target="10346:[7672..7773).13" />
<Link Source="10346:[10893..11127).9" Target="25002:[4395..4432).46" />
<Link Source="10346:[3525..3638).31" Target="25002:[4395..4432).46" />
<Link Source="10312:[7729..7768).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[7615..8420).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[7903..7936).17" Target="25002:[4395..4432).46" />
<Link Source="10312:[7916..7934).5" Target="25002:[4395..4432).46" />
<Link Source="10353:[4698..4724).10" Target="10312:[7903..7936).17" />
<Link Source="10353:[4698..4724).10" Target="10312:[7916..7934).5" />
<Link Source="10353:[4750..4847).19" Target="10353:[4698..4724).10" />
<Link Source="10353:[4750..4847).19" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).19" Target="10312:[7916..7934).5" />
<Link Source="10353:[4863..5000).37" Target="10353:[4698..4724).10" />
<Link Source="10353:[4863..5000).37" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).37" Target="10312:[7916..7934).5" />
<Link Source="10353:[4863..5000).38" Target="10312:[7916..7934).5" />
<Link Source="10353:[5079..5183).19" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).19" Target="10312:[7916..7934).5" />
<Link Source="10353:[5197..5323).28" Target="10353:[4698..4724).10" />
<Link Source="10353:[5197..5323).28" Target="10353:[5079..5183).19" />
<Link Source="10353:[5197..5323).28" Target="10312:[7916..7934).5" />
<Link Source="10353:[5485..5759).55" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).55" Target="10312:[7916..7934).5" />
<Link Source="10353:[5485..5759).56" Target="10353:[4698..4724).10" />
<Link Source="10353:[5485..5759).56" Target="10353:[5485..5759).55" />
<Link Source="10353:[5485..5759).56" Target="10312:[7916..7934).5" />
<Link Source="10353:[5485..5759).57" Target="10312:[7916..7934).5" />
<Link Source="10353:[5775..5979).37" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).37" Target="10312:[7916..7934).5" />
<Link Source="10353:[5775..5979).39" Target="10353:[4698..4724).10" />
<Link Source="10353:[5775..5979).39" Target="10353:[5775..5979).37" />
<Link Source="10353:[5775..5979).39" Target="10312:[7916..7934).5" />
<Link Source="10353:[5995..6029).28" Target="10353:[5775..5979).39" />
<Link Source="10353:[5995..6029).28" Target="10312:[7916..7934).5" />
<Link Source="10353:[6002..6028).10" Target="10312:[7916..7934).5" />
<Link Source="10353:[6343..6358).10" Target="10353:[5995..6029).28" />
<Link Source="10353:[6343..6358).10" Target="10353:[6002..6028).10" />
<Link Source="10353:[6384..6410).55" Target="10353:[6002..6028).10" />
<Link Source="10353:[6384..6410).56" Target="10353:[6343..6358).10" />
<Link Source="10353:[6384..6410).56" Target="10353:[6384..6410).55" />
<Link Source="10353:[6384..6410).56" Target="10353:[6002..6028).10" />
<Link Source="10312:[7952..7977).17" Target="25002:[4395..4432).46" />
<Link Source="10312:[61608..61629).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[63473..63501).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[63566..63612).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[63638..63668).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[63682..63706).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[80978..80991).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[80993..81002).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[81004..81017).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[81019..81040).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[81042..81069).5" Target="10312:[63682..63706).5" />
<Link Source="10312:[81042..81069).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[81095..84034).5" Target="10312:[80978..80991).5" />
<Link Source="10312:[81095..84034).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[81196..82523).29" Target="10312:[81095..84034).5" />
<Link Source="10312:[81196..82523).30" Target="10312:[80993..81002).5" />
<Link Source="10312:[81196..82523).30" Target="10312:[81196..82523).29" />
<Link Source="10312:[81196..82523).30" Target="10312:[81095..84034).5" />
<Link Source="10312:[81196..82523).31" Target="10312:[81019..81040).5" />
<Link Source="10312:[81196..82523).31" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).31" Target="10312:[81095..84034).5" />
<Link Source="10312:[81196..82523).34" Target="10312:[81196..82523).30" />
<Link Source="10312:[81196..82523).34" Target="10312:[81196..82523).31" />
<Link Source="10312:[81196..82523).34" Target="10312:[81095..84034).5" />
<Link Source="10312:[81319..81371).5" Target="10312:[80978..80991).5" />
<Link Source="10312:[81319..81371).5" Target="10312:[81196..82523).34" />
<Link Source="10312:[81495..81570).21" Target="10312:[81319..81371).5" />
<Link Source="10312:[81495..81570).21" Target="25002:[4395..4432).46" />
<Link Source="10312:[81495..81570).21" Target="10312:[81196..82523).34" />
<Link Source="10312:[81495..81570).22" Target="10312:[81319..81371).5" />
<Link Source="10312:[81495..81570).22" Target="10312:[81196..82523).34" />
<Link Source="10312:[81596..82500).25" Target="10312:[81319..81371).5" />
<Link Source="10312:[81596..82500).25" Target="25002:[4395..4432).46" />
<Link Source="10312:[81596..82500).25" Target="10312:[80993..81002).5" />
<Link Source="10312:[81596..82500).25" Target="10312:[81196..82523).34" />
<Link Source="10312:[81596..82500).26" Target="10312:[81019..81040).5" />
<Link Source="10312:[81596..82500).26" Target="10312:[81196..82523).34" />
<Link Source="10312:[81628..81659).5" Target="10312:[81196..82523).34" />
<Link Source="10353:[7504..7530).10" Target="10312:[81596..82500).26" />
<Link Source="10353:[7504..7530).10" Target="10312:[81628..81659).5" />
<Link Source="10312:[81596..82500).29" Target="10312:[81596..82500).25" />
<Link Source="10312:[81596..82500).29" Target="10353:[7504..7530).10" />
<Link Source="10312:[81596..82500).29" Target="10312:[81196..82523).34" />
<Link Source="10312:[84050..84066).9" Target="25002:[4395..4432).46" />
<Link Source="10312:[66177..69285).52" Target="10312:[63473..63501).5" />
<Link Source="10312:[66177..69285).52" Target="10312:[63682..63706).5" />
<Link Source="10312:[66291..66342).5" Target="10312:[63682..63706).5" />
<Link Source="10312:[75301..75322).5" Target="10312:[63682..63706).5" />
<Link Source="10312:[75301..75322).5" Target="10312:[66291..66342).5" />
<Link Source="10312:[75324..75352).5" Target="10312:[66177..69285).52" />
<Link Source="10312:[75324..75352).5" Target="10312:[66291..66342).5" />
<Link Source="10312:[75735..75866).21" Target="10312:[75301..75322).5" />
<Link Source="10312:[75735..75866).21" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).21" Target="10312:[66291..66342).5" />
<Link Source="10312:[75735..75866).22" Target="10312:[66291..66342).5" />
<Link Source="10312:[75742..75804).5" Target="10312:[75735..75866).21" />
<Link Source="10312:[75742..75804).5" Target="10312:[66291..66342).5" />
<Link Source="10312:[75735..75866).24" Target="10312:[75324..75352).5" />
<Link Source="10312:[75735..75866).24" Target="10312:[75742..75804).5" />
<Link Source="10312:[66177..69285).55" Target="10312:[63638..63668).5" />
<Link Source="10312:[66177..69285).55" Target="10312:[63682..63706).5" />
<Link Source="10312:[66177..69285).57" Target="10312:[63566..63612).5" />
<Link Source="10312:[66177..69285).57" Target="10312:[63682..63706).5" />
<Link Source="10312:[77543..77571).5" Target="10312:[75735..75866).24" />
<Link Source="10312:[77543..77571).5" Target="10312:[63682..63706).5" />
<Link Source="10312:[77573..77604).5" Target="10312:[66177..69285).55" />
<Link Source="10312:[77573..77604).5" Target="10312:[63682..63706).5" />
<Link Source="10312:[77654..77700).5" Target="10312:[66177..69285).57" />
<Link Source="10312:[77654..77700).5" Target="10312:[63682..63706).5" />
<Link Source="10312:[77501..78044).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[77501..78044).5" Target="10312:[63682..63706).5" />
<Link Source="10312:[77726..77892).17" Target="10312:[77501..78044).5" />
<Link Source="10312:[77726..77892).17" Target="25002:[4395..4432).46" />
<Link Source="10312:[77726..77892).17" Target="10312:[63682..63706).5" />
<Link Source="10312:[77726..77892).18" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).18" Target="10312:[63682..63706).5" />
<Link Source="10312:[77730..77782).5" Target="10312:[63682..63706).5" />
<Link Source="10298:[471..492).44" Target="10312:[77726..77892).17" />
<Link Source="10298:[471..492).44" Target="10312:[77730..77782).5" />
<Link Source="10298:[494..511).44" Target="10312:[77726..77892).18" />
<Link Source="10298:[494..511).44" Target="10312:[77730..77782).5" />
<Link Source="10312:[78402..78430).5" Target="10312:[77543..77571).5" />
<Link Source="10312:[78402..78430).5" Target="10312:[63682..63706).5" />
<Link Source="10312:[78432..78463).5" Target="10312:[77573..77604).5" />
<Link Source="10312:[78432..78463).5" Target="10312:[63682..63706).5" />
<Link Source="10312:[78513..78552).5" Target="10312:[77654..77700).5" />
<Link Source="10312:[78513..78552).5" Target="10312:[63682..63706).5" />
<Link Source="10312:[78346..78783).5" Target="10312:[77501..78044).5" />
<Link Source="10312:[78346..78783).5" Target="10312:[63682..63706).5" />
<Link Source="10376:[1085..1113).5" Target="10312:[78402..78430).5" />
<Link Source="10376:[1085..1113).5" Target="10312:[63682..63706).5" />
<Link Source="10376:[1115..1146).5" Target="10312:[78432..78463).5" />
<Link Source="10376:[1115..1146).5" Target="10312:[63682..63706).5" />
<Link Source="10376:[1196..1235).5" Target="10312:[78513..78552).5" />
<Link Source="10376:[1196..1235).5" Target="10312:[63682..63706).5" />
<Link Source="10376:[1028..1425).5" Target="10312:[78346..78783).5" />
<Link Source="10376:[1028..1425).5" Target="25002:[4395..4432).46" />
<Link Source="10376:[1028..1425).5" Target="10312:[63682..63706).5" />
<Link Source="10286:[30098..30120).5" Target="10376:[1028..1425).5" />
<Link Source="10286:[30098..30120).5" Target="10312:[63682..63706).5" />
<Link Source="10286:[30135..30160).5" Target="10376:[1085..1113).5" />
<Link Source="10286:[30135..30160).5" Target="10312:[63682..63706).5" />
<Link Source="10286:[30175..30206).5" Target="10376:[1115..1146).5" />
<Link Source="10286:[30175..30206).5" Target="10312:[63682..63706).5" />
<Link Source="10286:[30283..30330).5" Target="10376:[1196..1235).5" />
<Link Source="10286:[30283..30330).5" Target="10312:[63682..63706).5" />
<Link Source="10286:[30012..30691).5" Target="10376:[1028..1425).5" />
<Link Source="10286:[30012..30691).5" Target="10312:[63682..63706).5" />
<Link Source="10286:[30356..30522).17" Target="10286:[30012..30691).5" />
<Link Source="10286:[30356..30522).17" Target="25002:[4395..4432).46" />
<Link Source="10286:[30356..30522).17" Target="10312:[63682..63706).5" />
<Link Source="10286:[30356..30522).18" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).18" Target="10312:[63682..63706).5" />
<Link Source="10286:[30360..30412).5" Target="10312:[63682..63706).5" />
<Link Source="10298:[471..492).45" Target="10286:[30356..30522).17" />
<Link Source="10298:[471..492).45" Target="10286:[30360..30412).5" />
<Link Source="10298:[494..511).45" Target="10286:[30356..30522).18" />
<Link Source="10298:[494..511).45" Target="10286:[30360..30412).5" />
<Link Source="10060:[2136..2158).5" Target="10286:[30098..30120).5" />
<Link Source="10060:[2136..2158).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[2173..2198).5" Target="10286:[30135..30160).5" />
<Link Source="10060:[2173..2198).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[2213..2244).5" Target="10286:[30175..30206).5" />
<Link Source="10060:[2213..2244).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[2320..2366).5" Target="10286:[30283..30330).5" />
<Link Source="10060:[2320..2366).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[5621..5634).5" Target="10060:[2136..2158).5" />
<Link Source="10060:[5621..5634).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[5691..5716).5" Target="10060:[2173..2198).5" />
<Link Source="10060:[5691..5716).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[5731..5762).5" Target="10060:[2213..2244).5" />
<Link Source="10060:[5731..5762).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[5777..5806).5" Target="10060:[2136..2158).5" />
<Link Source="10060:[5777..5806).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[5882..5928).5" Target="10060:[2320..2366).5" />
<Link Source="10060:[5882..5928).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[5954..5991).17" Target="10312:[63682..63706).5" />
<Link Source="10060:[6005..6042).17" Target="10312:[63682..63706).5" />
<Link Source="10060:[6005..6042).18" Target="10060:[5621..5634).5" />
<Link Source="10060:[6005..6042).18" Target="10060:[6005..6042).17" />
<Link Source="10060:[6005..6042).18" Target="10312:[63682..63706).5" />
<Link Source="10060:[6056..6090).9" Target="10060:[5621..5634).5" />
<Link Source="10060:[6056..6090).9" Target="25002:[4395..4432).46" />
<Link Source="10060:[6056..6090).9" Target="10312:[63682..63706).5" />
<Link Source="10060:[6104..6172).13" Target="10060:[5621..5634).5" />
<Link Source="10060:[6104..6172).13" Target="10312:[63682..63706).5" />
<Link Source="10060:[6188..6219).9" Target="10312:[63682..63706).5" />
<Link Source="10060:[10202..10215).5" Target="10060:[5621..5634).5" />
<Link Source="10060:[10202..10215).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[10265..10311).5" Target="10060:[5882..5928).5" />
<Link Source="10060:[10265..10311).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[10337..10405).13" Target="10060:[10202..10215).5" />
<Link Source="10060:[10337..10405).13" Target="10312:[63682..63706).5" />
<Link Source="10060:[10419..10454).17" Target="10312:[63682..63706).5" />
<Link Source="10060:[10470..10516).5" Target="10060:[10202..10215).5" />
<Link Source="10060:[10470..10516).5" Target="25002:[4395..4432).46" />
<Link Source="10060:[10470..10516).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[10532..10544).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[10558..11295).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[10558..11295).5" Target="25002:[4395..4432).46" />
<Link Source="10060:[11990..12013).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[12078..12091).5" Target="10060:[10202..10215).5" />
<Link Source="10060:[12078..12091).5" Target="10312:[63682..63706).5" />
<Link Source="10060:[12117..12185).13" Target="10060:[12078..12091).5" />
<Link Source="10060:[12117..12185).13" Target="10312:[63682..63706).5" />
<Link Source="10060:[12199..12238).17" Target="10312:[63682..63706).5" />
<Link Source="10060:[12199..12238).18" Target="10060:[11990..12013).5" />
<Link Source="10060:[12199..12238).18" Target="10060:[12199..12238).17" />
<Link Source="10060:[12199..12238).18" Target="10312:[63682..63706).5" />
<Link Source="10346:[11710..11746).5" Target="10312:[63682..63706).5" />
<Link Source="10286:[2155..2260).5" Target="25002:[4395..4432).46" />
<Link Source="10286:[2155..2260).5" Target="10346:[11710..11746).5" />
<Link Source="10286:[2191..2245).17" Target="10286:[2155..2260).5" />
<Link Source="10286:[2191..2245).17" Target="10312:[63682..63706).5" />
<Link Source="10286:[2191..2245).17" Target="10346:[11710..11746).5" />
<Link Source="10286:[2191..2245).18" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).18" Target="10346:[11710..11746).5" />
<Link Source="10286:[2198..2244).5" Target="10346:[11710..11746).5" />
<Link Source="10298:[471..492).47" Target="10286:[2191..2245).17" />
<Link Source="10298:[471..492).47" Target="10286:[2198..2244).5" />
<Link Source="10298:[494..511).47" Target="10286:[2191..2245).18" />
<Link Source="10298:[494..511).47" Target="10286:[2198..2244).5" />
<Link Source="10345:[28225..28251).5" Target="10298:[471..492).47" />
<Link Source="10345:[28225..28251).5" Target="10312:[63682..63706).5" />
<Link Source="10345:[28927..28940).9" Target="10312:[63682..63706).5" />
<Link Source="10346:[12205..12212).5" Target="10312:[63682..63706).5" />
<Link Source="10354:[3720..3803).257" Target="10354:[3684..3818).31" />
<Link Source="10354:[3720..3803).257" Target="10312:[63682..63706).5" />
<Link Source="10354:[3720..3803).257" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).257" Target="10312:[4685..4699).13" />
<Link Source="10312:[4680..4787).29" Target="10354:[3720..3803).257" />
<Link Source="10312:[4680..4787).29" Target="25002:[4395..4432).46" />
<Link Source="10312:[4749..4764).5" Target="25002:[4395..4432).46" />
<Link Source="10312:[4749..4764).5" Target="10312:[4680..4787).29" />
<Link Source="10312:[5087..5101).5" Target="10312:[4749..4764).5" />
<Link Source="10312:[5087..5101).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[43799..44676).25" Target="25002:[4395..4432).46" />
<Link Source="10319:[43853..43873).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[41088..41107).5" Target="10319:[43799..44676).25" />
<Link Source="10319:[41088..41107).5" Target="10319:[43853..43873).5" />
<Link Source="10319:[41138..41158).5" Target="10319:[43853..43873).5" />
<Link Source="10354:[4919..5009).34" Target="10319:[41088..41107).5" />
<Link Source="10354:[4919..5009).34" Target="10319:[41138..41158).5" />
<Link Source="10354:[4094..4107).44" Target="10354:[4919..5009).34" />
<Link Source="10354:[4094..4107).44" Target="10312:[63682..63706).5" />
<Link Source="10354:[4094..4107).44" Target="10319:[41138..41158).5" />
<Link Source="10319:[41133..41220).9" Target="10354:[4094..4107).44" />
<Link Source="10319:[41133..41220).9" Target="10319:[43853..43873).5" />
<Link Source="10319:[41254..41268).5" Target="10319:[43853..43873).5" />
<Link Source="10354:[4525..4595).9" Target="10319:[41088..41107).5" />
<Link Source="10354:[4525..4595).9" Target="10319:[41254..41268).5" />
<Link Source="10354:[4561..4580).9" Target="10354:[4525..4595).9" />
<Link Source="10354:[4561..4580).9" Target="10312:[63682..63706).5" />
<Link Source="10354:[4561..4580).9" Target="10319:[41254..41268).5" />
<Link Source="10319:[41236..41680).17" Target="10354:[4561..4580).9" />
<Link Source="10319:[41236..41680).17" Target="10319:[43853..43873).5" />
<Link Source="10319:[41302..41665).5" Target="10319:[41236..41680).17" />
<Link Source="10319:[41302..41665).5" Target="10312:[63682..63706).5" />
<Link Source="10319:[41634..41646).9" Target="10319:[41302..41665).5" />
<Link Source="10319:[44751..44765).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[84233..84242).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[84257..84273).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[84288..84313).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[84374..84391).5" Target="10319:[44751..44765).5" />
<Link Source="10319:[84374..84391).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[84406..84447).5" Target="10319:[44751..44765).5" />
<Link Source="10319:[84406..84447).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[84462..84508).5" Target="10319:[44751..44765).5" />
<Link Source="10319:[84462..84508).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[84124..109887).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[85320..85348).17" Target="25002:[4395..4432).46" />
<Link Source="10319:[85320..85348).18" Target="10319:[84257..84273).5" />
<Link Source="10319:[85320..85348).18" Target="10319:[85320..85348).17" />
<Link Source="10319:[85320..85348).18" Target="25002:[4395..4432).46" />
<Link Source="10319:[85366..85400).17" Target="25002:[4395..4432).46" />
<Link Source="10319:[85366..85400).18" Target="10319:[84288..84313).5" />
<Link Source="10319:[85366..85400).18" Target="10319:[85366..85400).17" />
<Link Source="10319:[85366..85400).18" Target="25002:[4395..4432).46" />
<Link Source="10319:[85467..85484).9" Target="25002:[4395..4432).46" />
<Link Source="10319:[104874..105336).13" Target="10312:[63682..63706).5" />
<Link Source="10319:[104874..105336).13" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).14" Target="10319:[104874..105336).13" />
<Link Source="10319:[104874..105336).14" Target="10319:[84124..109887).5" />
<Link Source="10319:[104874..105336).14" Target="10312:[63682..63706).5" />
<Link Source="10319:[105368..106708).5" Target="10319:[84233..84242).5" />
<Link Source="10319:[105368..106708).5" Target="10312:[63682..63706).5" />
<Link Source="10319:[105465..105535).12" Target="10319:[84288..84313).5" />
<Link Source="10319:[105465..105535).12" Target="10319:[105368..106708).5" />
<Link Source="10319:[105465..105535).13" Target="10319:[84257..84273).5" />
<Link Source="10319:[105465..105535).13" Target="10319:[105368..106708).5" />
<Link Source="10319:[76360..76385).3" Target="10319:[105465..105535).12" />
<Link Source="10319:[76360..76385).3" Target="10319:[105368..106708).5" />
<Link Source="10319:[76387..76402).3" Target="10319:[105465..105535).13" />
<Link Source="10319:[76387..76402).3" Target="10319:[105368..106708).5" />
<Link Source="10319:[76494..76582).9" Target="10319:[105368..106708).5" />
<Link Source="10319:[84691..84861).9" Target="10312:[63682..63706).5" />
<Link Source="10319:[84691..84861).9" Target="10319:[105368..106708).5" />
<Link Source="10319:[84691..84861).9" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).9" Target="25002:[4395..4432).46" />
<Link Source="10319:[84764..84846).25" Target="10319:[84257..84273).5" />
<Link Source="10319:[84764..84846).25" Target="10319:[84691..84861).9" />
<Link Source="10319:[84764..84846).26" Target="10319:[84691..84861).9" />
<Link Source="10319:[84764..84846).28" Target="10312:[63682..63706).5" />
<Link Source="10319:[84764..84846).28" Target="10319:[84691..84861).9" />
<Link Source="10319:[84764..84846).29" Target="10319:[84288..84313).5" />
<Link Source="10319:[84764..84846).29" Target="10319:[84691..84861).9" />
<Link Source="10319:[84764..84845).5" Target="10319:[84691..84861).9" />
<Link Source="10306:[358886..358901).5" Target="10319:[84764..84846).25" />
<Link Source="10306:[358886..358901).5" Target="10319:[84764..84845).5" />
<Link Source="10306:[358903..358930).5" Target="10319:[84764..84846).26" />
<Link Source="10306:[358903..358930).5" Target="10319:[84764..84845).5" />
<Link Source="10306:[358932..358945).5" Target="10319:[84764..84846).28" />
<Link Source="10306:[358932..358945).5" Target="10319:[84764..84845).5" />
<Link Source="10306:[358947..358972).5" Target="10319:[84764..84846).29" />
<Link Source="10306:[358947..358972).5" Target="10319:[84764..84845).5" />
<Link Source="10306:[358838..360009).5" Target="10319:[84124..109887).5" />
<Link Source="10306:[358838..360009).5" Target="10319:[84764..84845).5" />
<Link Source="10306:[358998..359998).25" Target="10306:[358932..358945).5" />
<Link Source="10306:[358998..359998).25" Target="10319:[105368..106708).5" />
<Link Source="10306:[358998..359998).25" Target="10319:[84764..84845).5" />
<Link Source="10306:[358998..359998).26" Target="10319:[84764..84845).5" />
<Link Source="10319:[44948..45377).9" Target="10312:[63682..63706).5" />
<Link Source="10319:[44948..45377).9" Target="10319:[105368..106708).5" />
<Link Source="10319:[44948..45377).9" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).9" Target="25002:[4395..4432).46" />
<Link Source="10354:[11428..11441).5" Target="25002:[4395..4432).46" />
<Link Source="10319:[45408..45422).5" Target="25002:[4395..4432).46" />
<Link Source="10287:[2377..2471).9" Target="10312:[63682..63706).5" />
<Link Source="10287:[2377..2471).9" Target="25002:[4395..4432).46" />
<Link Source="10287:[791..833).9" Target="10319:[105368..106708).5" />
<Link Source="10287:[791..833).9" Target="10312:[63682..63706).5" />
<Link Source="10287:[912..927).5" Target="10312:[63682..63706).5" />
<Link Source="10287:[912..919).5" Target="10287:[912..927).5" />
<Link Source="10287:[912..919).5" Target="10312:[63682..63706).5" />
<Link Source="10287:[945..972).5" Target="10312:[63682..63706).5" />
<Link Source="10287:[945..963).5" Target="10287:[945..972).5" />
<Link Source="10287:[945..963).5" Target="10312:[63682..63706).5" />
<Link Source="10286:[21546..21561).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[21563..21583).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[22086..22108).5" Target="10286:[21546..21561).5" />
<Link Source="10286:[22086..22108).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[22110..22130).5" Target="10286:[21563..21583).5" />
<Link Source="10286:[22110..22130).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[15616..15690).21" Target="10319:[105368..106708).5" />
<Link Source="10286:[15616..15690).22" Target="10319:[105368..106708).5" />
<Link Source="10286:[15616..15690).22" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[23124..23146).5" Target="10286:[22086..22108).5" />
<Link Source="10286:[23124..23146).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[23161..23181).5" Target="10286:[22110..22130).5" />
<Link Source="10286:[23161..23181).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[23281..23301).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[23380..23684).29" Target="10319:[105368..106708).5" />
<Link Source="10286:[23380..23684).29" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).9" Target="10319:[105368..106708).5" />
<Link Source="10286:[23893..24026).9" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).9" Target="10286:[23161..23181).5" />
<Link Source="10286:[24545..24641).9" Target="10319:[105368..106708).5" />
<Link Source="10286:[24655..25349).5" Target="10286:[24545..24641).9" />
<Link Source="10286:[24655..25349).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[26910..26935).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[26952..26974).5" Target="10286:[23124..23146).5" />
<Link Source="10286:[26952..26974).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[27002..27022).5" Target="10286:[23281..23301).5" />
<Link Source="10286:[27002..27022).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[27048..27088).17" Target="10319:[105368..106708).5" />
<Link Source="10286:[27048..27088).18" Target="10286:[26910..26935).5" />
<Link Source="10286:[27048..27088).18" Target="10286:[27048..27088).17" />
<Link Source="10286:[27048..27088).18" Target="10319:[105368..106708).5" />
<Link Source="10286:[27208..27236).9" Target="10319:[105368..106708).5" />
<Link Source="10286:[27250..27722).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[27738..27845).13" Target="10319:[105368..106708).5" />
<Link Source="10286:[27738..27845).14" Target="10286:[27208..27236).9" />
<Link Source="10286:[27738..27845).14" Target="10286:[27738..27845).13" />
<Link Source="10286:[27738..27845).14" Target="10319:[105368..106708).5" />
<Link Source="10286:[27861..27873).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[26281..26812).5" Target="10286:[27861..27873).5" />
<Link Source="10286:[26281..26812).5" Target="10319:[105368..106708).5" />
<Link Source="10286:[26450..26769).5" Target="10286:[24545..24641).9" />
<Link Source="10286:[26450..26769).5" Target="10286:[26281..26812).5" />
<Link Source="10287:[1680..1716).5" Target="10319:[105368..106708).5" />
<Link Source="10287:[1680..1716).5" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).5" Target="10287:[1680..1716).5" />
<Link Source="10287:[1683..1690).5" Target="10287:[912..919).5" />
<Link Source="10287:[1683..1690).5" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).9" Target="10287:[1683..1690).5" />
<Link Source="10287:[1683..1716).9" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).9" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).9" Target="10287:[1683..1716).9" />
<Link Source="10319:[51935..52244).9" Target="10319:[13969..14029).1" />
<Link Source="10076:[5223..5250).14" Target="10319:[105368..106708).5" />
<Link Source="10076:[5223..5250).14" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).14" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).14" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).14" Target="10319:[105368..106708).5" />
<Link Source="10076:[5277..5448).14" Target="10076:[4989..5047).1" />
<Link Source="10077:[44231..44317).33" Target="10319:[105368..106708).5" />
<Link Source="10077:[44231..44317).33" Target="10077:[32567..32606).1" />
<Link Source="10286:[1688..1781).19" Target="10319:[105368..106708).5" />
<Link Source="10286:[1688..1781).19" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).48" Target="10286:[1688..1781).19" />
<Link Source="10298:[471..492).48" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).19" Target="10319:[105368..106708).5" />
<Link Source="10286:[1820..1963).19" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).49" Target="10286:[1820..1963).19" />
<Link Source="10298:[471..492).49" Target="10286:[1840..1888).1" />
<Link Source="10319:[42478..42805).16" Target="10319:[105368..106708).5" />
<Link Source="10319:[42821..42938).41" Target="10319:[105368..106708).5" />
<Link Source="10319:[42839..42937).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[63849..63870).6" Target="10319:[42821..42938).41" />
<Link Source="10319:[63849..63870).6" Target="10319:[42839..42937).6" />
<Link Source="10319:[63885..63919).6" Target="10319:[42821..42938).41" />
<Link Source="10319:[63885..63919).6" Target="10319:[42839..42937).6" />
<Link Source="10319:[63934..63945).6" Target="10319:[42821..42938).41" />
<Link Source="10319:[63934..63945).6" Target="10319:[42839..42937).6" />
<Link Source="10319:[63960..63969).6" Target="10319:[42821..42938).41" />
<Link Source="10319:[63960..63969).6" Target="10319:[42839..42937).6" />
<Link Source="10319:[63984..64009).6" Target="10319:[42821..42938).41" />
<Link Source="10319:[63984..64009).6" Target="10319:[42839..42937).6" />
<Link Source="10319:[63768..64484).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[63768..64484).6" Target="10319:[42839..42937).6" />
<Link Source="10319:[64035..64445).21" Target="10319:[42839..42937).6" />
<Link Source="10319:[64035..64445).22" Target="10319:[63885..63919).6" />
<Link Source="10319:[64035..64445).22" Target="10319:[64035..64445).21" />
<Link Source="10319:[64035..64445).22" Target="10319:[42839..42937).6" />
<Link Source="10319:[64461..64473).11" Target="10319:[42839..42937).6" />
<Link Source="10319:[42821..42938).47" Target="10319:[64461..64473).11" />
<Link Source="10319:[42821..42938).47" Target="10319:[105368..106708).5" />
<Link Source="10319:[42952..43079).16" Target="10319:[105368..106708).5" />
<Link Source="10319:[42952..43079).17" Target="10319:[42821..42938).47" />
<Link Source="10319:[42952..43079).17" Target="10319:[42952..43079).16" />
<Link Source="10319:[42952..43079).17" Target="10319:[105368..106708).5" />
<Link Source="10354:[11312..11328).6" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).36" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).36" Target="10354:[11312..11328).6" />
<Link Source="10354:[3720..3803).261" Target="10354:[3684..3818).36" />
<Link Source="10354:[3720..3803).261" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).261" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).261" Target="10354:[11312..11328).6" />
<Link Source="10354:[3720..3803).262" Target="10354:[11312..11328).6" />
<Link Source="10354:[3720..3803).263" Target="10354:[3684..3818).36" />
<Link Source="10354:[3720..3803).263" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).263" Target="10354:[3720..3803).262" />
<Link Source="10354:[3720..3803).263" Target="10354:[11312..11328).6" />
<Link Source="10354:[11299..11330).16" Target="10354:[3720..3803).261" />
<Link Source="10354:[11299..11330).16" Target="10319:[105368..106708).5" />
<Link Source="10319:[50330..50355).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[3905..3919).6" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).37" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).37" Target="10312:[3905..3919).6" />
<Link Source="10354:[3720..3803).269" Target="10354:[3684..3818).37" />
<Link Source="10354:[3720..3803).269" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).269" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).269" Target="10312:[3905..3919).6" />
<Link Source="10354:[3720..3803).270" Target="10312:[3905..3919).6" />
<Link Source="10354:[3720..3803).271" Target="10354:[3684..3818).37" />
<Link Source="10354:[3720..3803).271" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).271" Target="10354:[3720..3803).270" />
<Link Source="10354:[3720..3803).271" Target="10312:[3905..3919).6" />
<Link Source="10312:[3892..3921).16" Target="10354:[3720..3803).269" />
<Link Source="10312:[3892..3921).16" Target="10319:[105368..106708).5" />
<Link Source="10312:[3935..3968).21" Target="10319:[105368..106708).5" />
<Link Source="10312:[3948..3966).6" Target="10319:[105368..106708).5" />
<Link Source="10353:[4698..4724).11" Target="10312:[3935..3968).21" />
<Link Source="10353:[4698..4724).11" Target="10312:[3948..3966).6" />
<Link Source="10353:[4750..4847).21" Target="10353:[4698..4724).11" />
<Link Source="10353:[4750..4847).21" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).21" Target="10312:[3948..3966).6" />
<Link Source="10353:[4863..5000).41" Target="10353:[4698..4724).11" />
<Link Source="10353:[4863..5000).41" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).41" Target="10312:[3948..3966).6" />
<Link Source="10353:[4863..5000).42" Target="10312:[3948..3966).6" />
<Link Source="10353:[5079..5183).21" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).21" Target="10312:[3948..3966).6" />
<Link Source="10353:[5197..5323).31" Target="10353:[4698..4724).11" />
<Link Source="10353:[5197..5323).31" Target="10353:[5079..5183).21" />
<Link Source="10353:[5197..5323).31" Target="10312:[3948..3966).6" />
<Link Source="10353:[5485..5759).61" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).61" Target="10312:[3948..3966).6" />
<Link Source="10353:[5485..5759).62" Target="10353:[4698..4724).11" />
<Link Source="10353:[5485..5759).62" Target="10353:[5485..5759).61" />
<Link Source="10353:[5485..5759).62" Target="10312:[3948..3966).6" />
<Link Source="10353:[5485..5759).63" Target="10312:[3948..3966).6" />
<Link Source="10353:[5775..5979).41" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).41" Target="10312:[3948..3966).6" />
<Link Source="10353:[5775..5979).43" Target="10353:[4698..4724).11" />
<Link Source="10353:[5775..5979).43" Target="10353:[5775..5979).41" />
<Link Source="10353:[5775..5979).43" Target="10312:[3948..3966).6" />
<Link Source="10353:[5995..6029).31" Target="10353:[5775..5979).43" />
<Link Source="10353:[5995..6029).31" Target="10312:[3948..3966).6" />
<Link Source="10353:[6002..6028).11" Target="10312:[3948..3966).6" />
<Link Source="10353:[6343..6358).11" Target="10353:[5995..6029).31" />
<Link Source="10353:[6343..6358).11" Target="10353:[6002..6028).11" />
<Link Source="10353:[6384..6410).61" Target="10353:[6002..6028).11" />
<Link Source="10353:[6384..6410).62" Target="10353:[6343..6358).11" />
<Link Source="10353:[6384..6410).62" Target="10353:[6384..6410).61" />
<Link Source="10353:[6384..6410).62" Target="10353:[6002..6028).11" />
<Link Source="10312:[5188..5207).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5209..5220).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5222..5231).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5233..5272).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5274..5295).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5297..5318).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5320..5333).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5124..5404).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[4685..4699).16" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).38" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).38" Target="10312:[4685..4699).16" />
<Link Source="10354:[3720..3803).277" Target="10354:[3684..3818).38" />
<Link Source="10354:[3720..3803).277" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).277" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).277" Target="10312:[4685..4699).16" />
<Link Source="10354:[3720..3803).278" Target="10312:[4685..4699).16" />
<Link Source="10354:[3720..3803).279" Target="10354:[3684..3818).38" />
<Link Source="10354:[3720..3803).279" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).279" Target="10354:[3720..3803).278" />
<Link Source="10354:[3720..3803).279" Target="10312:[4685..4699).16" />
<Link Source="10312:[4680..4787).31" Target="10354:[3720..3803).277" />
<Link Source="10312:[4680..4787).31" Target="10319:[105368..106708).5" />
<Link Source="10312:[4826..5058).76" Target="10319:[105368..106708).5" />
<Link Source="10312:[4826..5058).76" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).77" Target="10319:[105368..106708).5" />
<Link Source="10382:[1340..1359).6" Target="10319:[105368..106708).5" />
<Link Source="10382:[1374..1383).6" Target="10319:[105368..106708).5" />
<Link Source="10382:[1385..1424).6" Target="10319:[105368..106708).5" />
<Link Source="10382:[1426..1447).6" Target="10319:[105368..106708).5" />
<Link Source="10382:[1449..1470).6" Target="10319:[105368..106708).5" />
<Link Source="10382:[1472..1485).6" Target="10319:[105368..106708).5" />
<Link Source="10382:[1572..1586).6" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).39" Target="10382:[1340..1359).6" />
<Link Source="10354:[3684..3818).39" Target="10382:[1572..1586).6" />
<Link Source="10354:[3720..3803).285" Target="10354:[3684..3818).39" />
<Link Source="10354:[3720..3803).285" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).285" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).285" Target="10382:[1572..1586).6" />
<Link Source="10354:[3720..3803).286" Target="10382:[1572..1586).6" />
<Link Source="10354:[3720..3803).287" Target="10354:[3684..3818).39" />
<Link Source="10354:[3720..3803).287" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).287" Target="10354:[3720..3803).286" />
<Link Source="10354:[3720..3803).287" Target="10382:[1572..1586).6" />
<Link Source="10382:[1559..1588).16" Target="10354:[3720..3803).285" />
<Link Source="10382:[1559..1588).16" Target="10319:[105368..106708).5" />
<Link Source="10382:[1619..1629).6" Target="10319:[105368..106708).5" />
<Link Source="10382:[913..1046).6" Target="10319:[105368..106708).5" />
<Link Source="10382:[913..1046).6" Target="10382:[1619..1629).6" />
<Link Source="10382:[949..1031).11" Target="EXTERNAL" />
<Link Source="10382:[949..1031).11" Target="10382:[1619..1629).6" />
<Link Source="10382:[1604..1691).26" Target="10382:[949..1031).11" />
<Link Source="10382:[1604..1691).26" Target="10319:[105368..106708).5" />
<Link Source="10382:[1604..1691).27" Target="10382:[1426..1447).6" />
<Link Source="10382:[1604..1691).27" Target="10382:[1604..1691).26" />
<Link Source="10382:[1604..1691).27" Target="10319:[105368..106708).5" />
<Link Source="10382:[1604..1691).28" Target="10319:[105368..106708).5" />
<Link Source="10346:[10861..10875).6" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).41" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).41" Target="10346:[10861..10875).6" />
<Link Source="10354:[3720..3803).301" Target="10354:[3684..3818).41" />
<Link Source="10354:[3720..3803).301" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).301" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).301" Target="10346:[10861..10875).6" />
<Link Source="10354:[3720..3803).302" Target="10346:[10861..10875).6" />
<Link Source="10354:[3720..3803).303" Target="10354:[3684..3818).41" />
<Link Source="10354:[3720..3803).303" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).303" Target="10354:[3720..3803).302" />
<Link Source="10354:[3720..3803).303" Target="10346:[10861..10875).6" />
<Link Source="10346:[10848..10877).16" Target="10354:[3720..3803).301" />
<Link Source="10346:[10848..10877).16" Target="10319:[105368..106708).5" />
<Link Source="10346:[10897..10914).6" Target="10319:[105368..106708).5" />
<Link Source="10346:[7666..7775).6" Target="10319:[105368..106708).5" />
<Link Source="10346:[7666..7775).6" Target="10346:[10897..10914).6" />
<Link Source="10346:[7672..7773).16" Target="10346:[7666..7775).6" />
<Link Source="10346:[7672..7773).16" Target="10319:[105368..106708).5" />
<Link Source="10346:[7672..7773).16" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).16" Target="10346:[10897..10914).6" />
<Link Source="10346:[10893..11127).11" Target="10346:[7672..7773).16" />
<Link Source="10346:[10893..11127).11" Target="10319:[105368..106708).5" />
<Link Source="10346:[3525..3638).38" Target="10319:[105368..106708).5" />
<Link Source="10312:[7729..7768).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[7615..8420).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[7903..7936).21" Target="10319:[105368..106708).5" />
<Link Source="10312:[7916..7934).6" Target="10319:[105368..106708).5" />
<Link Source="10353:[4698..4724).12" Target="10312:[7903..7936).21" />
<Link Source="10353:[4698..4724).12" Target="10312:[7916..7934).6" />
<Link Source="10353:[4750..4847).23" Target="10353:[4698..4724).12" />
<Link Source="10353:[4750..4847).23" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).23" Target="10312:[7916..7934).6" />
<Link Source="10353:[4863..5000).45" Target="10353:[4698..4724).12" />
<Link Source="10353:[4863..5000).45" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).45" Target="10312:[7916..7934).6" />
<Link Source="10353:[4863..5000).46" Target="10312:[7916..7934).6" />
<Link Source="10353:[5079..5183).23" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).23" Target="10312:[7916..7934).6" />
<Link Source="10353:[5197..5323).34" Target="10353:[4698..4724).12" />
<Link Source="10353:[5197..5323).34" Target="10353:[5079..5183).23" />
<Link Source="10353:[5197..5323).34" Target="10312:[7916..7934).6" />
<Link Source="10353:[5485..5759).67" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).67" Target="10312:[7916..7934).6" />
<Link Source="10353:[5485..5759).68" Target="10353:[4698..4724).12" />
<Link Source="10353:[5485..5759).68" Target="10353:[5485..5759).67" />
<Link Source="10353:[5485..5759).68" Target="10312:[7916..7934).6" />
<Link Source="10353:[5485..5759).69" Target="10312:[7916..7934).6" />
<Link Source="10353:[5775..5979).45" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).45" Target="10312:[7916..7934).6" />
<Link Source="10353:[5775..5979).47" Target="10353:[4698..4724).12" />
<Link Source="10353:[5775..5979).47" Target="10353:[5775..5979).45" />
<Link Source="10353:[5775..5979).47" Target="10312:[7916..7934).6" />
<Link Source="10353:[5995..6029).34" Target="10353:[5775..5979).47" />
<Link Source="10353:[5995..6029).34" Target="10312:[7916..7934).6" />
<Link Source="10353:[6002..6028).12" Target="10312:[7916..7934).6" />
<Link Source="10353:[6343..6358).12" Target="10353:[5995..6029).34" />
<Link Source="10353:[6343..6358).12" Target="10353:[6002..6028).12" />
<Link Source="10353:[6384..6410).67" Target="10353:[6002..6028).12" />
<Link Source="10353:[6384..6410).68" Target="10353:[6343..6358).12" />
<Link Source="10353:[6384..6410).68" Target="10353:[6384..6410).67" />
<Link Source="10353:[6384..6410).68" Target="10353:[6002..6028).12" />
<Link Source="10312:[7952..7977).21" Target="10319:[105368..106708).5" />
<Link Source="10312:[61608..61629).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[63473..63501).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[63566..63612).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[63638..63668).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[80978..80991).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[80993..81002).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[81004..81017).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[81019..81040).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[81042..81069).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[81095..84034).6" Target="10312:[80978..80991).6" />
<Link Source="10312:[81095..84034).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[81196..82523).36" Target="10312:[81095..84034).6" />
<Link Source="10312:[81196..82523).37" Target="10312:[80993..81002).6" />
<Link Source="10312:[81196..82523).37" Target="10312:[81196..82523).36" />
<Link Source="10312:[81196..82523).37" Target="10312:[81095..84034).6" />
<Link Source="10312:[81196..82523).38" Target="10312:[81019..81040).6" />
<Link Source="10312:[81196..82523).38" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).38" Target="10312:[81095..84034).6" />
<Link Source="10312:[81196..82523).41" Target="10312:[81196..82523).37" />
<Link Source="10312:[81196..82523).41" Target="10312:[81196..82523).38" />
<Link Source="10312:[81196..82523).41" Target="10312:[81095..84034).6" />
<Link Source="10312:[81319..81371).6" Target="10312:[80978..80991).6" />
<Link Source="10312:[81319..81371).6" Target="10312:[81196..82523).41" />
<Link Source="10312:[81495..81570).26" Target="10312:[81319..81371).6" />
<Link Source="10312:[81495..81570).26" Target="10319:[105368..106708).5" />
<Link Source="10312:[81495..81570).26" Target="10312:[81196..82523).41" />
<Link Source="10312:[81495..81570).27" Target="10312:[81319..81371).6" />
<Link Source="10312:[81495..81570).27" Target="10312:[81196..82523).41" />
<Link Source="10312:[81596..82500).31" Target="10312:[81319..81371).6" />
<Link Source="10312:[81596..82500).31" Target="10319:[105368..106708).5" />
<Link Source="10312:[81596..82500).31" Target="10312:[80993..81002).6" />
<Link Source="10312:[81596..82500).31" Target="10312:[81196..82523).41" />
<Link Source="10312:[81596..82500).32" Target="10312:[81019..81040).6" />
<Link Source="10312:[81596..82500).32" Target="10312:[81196..82523).41" />
<Link Source="10312:[81628..81659).6" Target="10312:[81196..82523).41" />
<Link Source="10353:[7504..7530).12" Target="10312:[81596..82500).32" />
<Link Source="10353:[7504..7530).12" Target="10312:[81628..81659).6" />
<Link Source="10312:[81596..82500).35" Target="10312:[81596..82500).31" />
<Link Source="10312:[81596..82500).35" Target="10353:[7504..7530).12" />
<Link Source="10312:[81596..82500).35" Target="10312:[81196..82523).41" />
<Link Source="10312:[84050..84066).11" Target="10319:[105368..106708).5" />
<Link Source="10312:[66291..66342).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[75301..75322).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[75301..75322).6" Target="10312:[66291..66342).6" />
<Link Source="10312:[75324..75352).6" Target="10312:[63473..63501).6" />
<Link Source="10312:[75324..75352).6" Target="10312:[66291..66342).6" />
<Link Source="10312:[75735..75866).26" Target="10312:[75301..75322).6" />
<Link Source="10312:[75735..75866).26" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).26" Target="10312:[66291..66342).6" />
<Link Source="10312:[75735..75866).27" Target="10312:[66291..66342).6" />
<Link Source="10312:[75742..75804).6" Target="10312:[75735..75866).26" />
<Link Source="10312:[75742..75804).6" Target="10312:[66291..66342).6" />
<Link Source="10312:[75735..75866).29" Target="10312:[75324..75352).6" />
<Link Source="10312:[75735..75866).29" Target="10312:[75742..75804).6" />
<Link Source="10312:[77543..77571).6" Target="10312:[75735..75866).29" />
<Link Source="10312:[77543..77571).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[77573..77604).6" Target="10312:[63638..63668).6" />
<Link Source="10312:[77573..77604).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[77654..77700).6" Target="10312:[63566..63612).6" />
<Link Source="10312:[77654..77700).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[77501..78044).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[77726..77892).21" Target="10312:[77501..78044).6" />
<Link Source="10312:[77726..77892).21" Target="10319:[105368..106708).5" />
<Link Source="10312:[77726..77892).22" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).22" Target="10319:[105368..106708).5" />
<Link Source="10312:[77730..77782).6" Target="10319:[105368..106708).5" />
<Link Source="10298:[471..492).53" Target="10312:[77726..77892).21" />
<Link Source="10298:[471..492).53" Target="10312:[77730..77782).6" />
<Link Source="10298:[494..511).53" Target="10312:[77726..77892).22" />
<Link Source="10298:[494..511).53" Target="10312:[77730..77782).6" />
<Link Source="10312:[78402..78430).6" Target="10312:[77543..77571).6" />
<Link Source="10312:[78402..78430).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[78432..78463).6" Target="10312:[77573..77604).6" />
<Link Source="10312:[78432..78463).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[78513..78552).6" Target="10312:[77654..77700).6" />
<Link Source="10312:[78513..78552).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[78346..78783).6" Target="10312:[77501..78044).6" />
<Link Source="10312:[78346..78783).6" Target="10319:[105368..106708).5" />
<Link Source="10376:[1085..1113).6" Target="10312:[78402..78430).6" />
<Link Source="10376:[1085..1113).6" Target="10319:[105368..106708).5" />
<Link Source="10376:[1115..1146).6" Target="10312:[78432..78463).6" />
<Link Source="10376:[1115..1146).6" Target="10319:[105368..106708).5" />
<Link Source="10376:[1196..1235).6" Target="10312:[78513..78552).6" />
<Link Source="10376:[1196..1235).6" Target="10319:[105368..106708).5" />
<Link Source="10376:[1028..1425).6" Target="10312:[78346..78783).6" />
<Link Source="10376:[1028..1425).6" Target="10319:[105368..106708).5" />
<Link Source="10286:[30098..30120).6" Target="10376:[1028..1425).6" />
<Link Source="10286:[30098..30120).6" Target="10319:[105368..106708).5" />
<Link Source="10286:[30135..30160).6" Target="10376:[1085..1113).6" />
<Link Source="10286:[30135..30160).6" Target="10319:[105368..106708).5" />
<Link Source="10286:[30175..30206).6" Target="10376:[1115..1146).6" />
<Link Source="10286:[30175..30206).6" Target="10319:[105368..106708).5" />
<Link Source="10286:[30283..30330).6" Target="10376:[1196..1235).6" />
<Link Source="10286:[30283..30330).6" Target="10319:[105368..106708).5" />
<Link Source="10286:[30012..30691).6" Target="10376:[1028..1425).6" />
<Link Source="10286:[30012..30691).6" Target="10319:[105368..106708).5" />
<Link Source="10286:[30356..30522).21" Target="10286:[30012..30691).6" />
<Link Source="10286:[30356..30522).21" Target="10319:[105368..106708).5" />
<Link Source="10286:[30356..30522).22" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).22" Target="10319:[105368..106708).5" />
<Link Source="10286:[30360..30412).6" Target="10319:[105368..106708).5" />
<Link Source="10298:[471..492).54" Target="10286:[30356..30522).21" />
<Link Source="10298:[471..492).54" Target="10286:[30360..30412).6" />
<Link Source="10298:[494..511).54" Target="10286:[30356..30522).22" />
<Link Source="10298:[494..511).54" Target="10286:[30360..30412).6" />
<Link Source="10060:[2136..2158).6" Target="10286:[30098..30120).6" />
<Link Source="10060:[2136..2158).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[2173..2198).6" Target="10286:[30135..30160).6" />
<Link Source="10060:[2173..2198).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[2213..2244).6" Target="10286:[30175..30206).6" />
<Link Source="10060:[2213..2244).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[2320..2366).6" Target="10286:[30283..30330).6" />
<Link Source="10060:[2320..2366).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[5621..5634).6" Target="10060:[2136..2158).6" />
<Link Source="10060:[5621..5634).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[5691..5716).6" Target="10060:[2173..2198).6" />
<Link Source="10060:[5691..5716).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[5731..5762).6" Target="10060:[2213..2244).6" />
<Link Source="10060:[5731..5762).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[5777..5806).6" Target="10060:[2136..2158).6" />
<Link Source="10060:[5777..5806).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[5882..5928).6" Target="10060:[2320..2366).6" />
<Link Source="10060:[5882..5928).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[5954..5991).21" Target="10319:[105368..106708).5" />
<Link Source="10060:[6005..6042).21" Target="10319:[105368..106708).5" />
<Link Source="10060:[6005..6042).22" Target="10060:[5621..5634).6" />
<Link Source="10060:[6005..6042).22" Target="10060:[6005..6042).21" />
<Link Source="10060:[6005..6042).22" Target="10319:[105368..106708).5" />
<Link Source="10060:[6056..6090).11" Target="10060:[5621..5634).6" />
<Link Source="10060:[6056..6090).11" Target="10319:[105368..106708).5" />
<Link Source="10060:[6104..6172).16" Target="10060:[5621..5634).6" />
<Link Source="10060:[6104..6172).16" Target="10319:[105368..106708).5" />
<Link Source="10060:[6188..6219).11" Target="10319:[105368..106708).5" />
<Link Source="10060:[10202..10215).6" Target="10060:[5621..5634).6" />
<Link Source="10060:[10202..10215).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[10265..10311).6" Target="10060:[5882..5928).6" />
<Link Source="10060:[10265..10311).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[10337..10405).16" Target="10060:[10202..10215).6" />
<Link Source="10060:[10337..10405).16" Target="10319:[105368..106708).5" />
<Link Source="10060:[10419..10454).21" Target="10319:[105368..106708).5" />
<Link Source="10060:[10470..10516).6" Target="10060:[10202..10215).6" />
<Link Source="10060:[10470..10516).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[10532..10544).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[10558..11295).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[11990..12013).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[12078..12091).6" Target="10060:[10202..10215).6" />
<Link Source="10060:[12078..12091).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[12117..12185).16" Target="10060:[12078..12091).6" />
<Link Source="10060:[12117..12185).16" Target="10319:[105368..106708).5" />
<Link Source="10060:[12199..12238).21" Target="10319:[105368..106708).5" />
<Link Source="10060:[12199..12238).22" Target="10060:[11990..12013).6" />
<Link Source="10060:[12199..12238).22" Target="10060:[12199..12238).21" />
<Link Source="10060:[12199..12238).22" Target="10319:[105368..106708).5" />
<Link Source="10346:[11710..11746).6" Target="10312:[63473..63501).6" />
<Link Source="10286:[2155..2260).6" Target="10319:[105368..106708).5" />
<Link Source="10286:[2155..2260).6" Target="10346:[11710..11746).6" />
<Link Source="10286:[2191..2245).21" Target="10286:[2155..2260).6" />
<Link Source="10286:[2191..2245).21" Target="10312:[63473..63501).6" />
<Link Source="10286:[2191..2245).21" Target="10346:[11710..11746).6" />
<Link Source="10286:[2191..2245).22" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).22" Target="10346:[11710..11746).6" />
<Link Source="10286:[2198..2244).6" Target="10346:[11710..11746).6" />
<Link Source="10298:[471..492).56" Target="10286:[2191..2245).21" />
<Link Source="10298:[471..492).56" Target="10286:[2198..2244).6" />
<Link Source="10298:[494..511).56" Target="10286:[2191..2245).22" />
<Link Source="10298:[494..511).56" Target="10286:[2198..2244).6" />
<Link Source="10345:[28225..28251).6" Target="10298:[471..492).56" />
<Link Source="10345:[28225..28251).6" Target="10312:[63473..63501).6" />
<Link Source="10345:[28927..28940).11" Target="10312:[63473..63501).6" />
<Link Source="10346:[12205..12212).6" Target="10312:[63473..63501).6" />
<Link Source="10354:[3720..3803).309" Target="10354:[3684..3818).38" />
<Link Source="10354:[3720..3803).309" Target="10312:[63473..63501).6" />
<Link Source="10354:[3720..3803).309" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).309" Target="10312:[4685..4699).16" />
<Link Source="10312:[4680..4787).35" Target="10354:[3720..3803).309" />
<Link Source="10312:[4680..4787).35" Target="10319:[105368..106708).5" />
<Link Source="10312:[4749..4764).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[4749..4764).6" Target="10312:[4680..4787).35" />
<Link Source="10312:[5087..5101).6" Target="10312:[4749..4764).6" />
<Link Source="10312:[5087..5101).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[43799..44676).31" Target="10319:[105368..106708).5" />
<Link Source="10319:[43853..43873).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[41088..41107).6" Target="10319:[43799..44676).31" />
<Link Source="10319:[41088..41107).6" Target="10319:[43853..43873).6" />
<Link Source="10319:[41138..41158).6" Target="10319:[43853..43873).6" />
<Link Source="10354:[4919..5009).41" Target="10319:[41088..41107).6" />
<Link Source="10354:[4919..5009).41" Target="10319:[41138..41158).6" />
<Link Source="10354:[4094..4107).53" Target="10354:[4919..5009).41" />
<Link Source="10354:[4094..4107).53" Target="10312:[63473..63501).6" />
<Link Source="10354:[4094..4107).53" Target="10319:[41138..41158).6" />
<Link Source="10319:[41133..41220).11" Target="10354:[4094..4107).53" />
<Link Source="10319:[41133..41220).11" Target="10319:[43853..43873).6" />
<Link Source="10319:[41254..41268).6" Target="10319:[43853..43873).6" />
<Link Source="10354:[4525..4595).11" Target="10319:[41088..41107).6" />
<Link Source="10354:[4525..4595).11" Target="10319:[41254..41268).6" />
<Link Source="10354:[4561..4580).11" Target="10354:[4525..4595).11" />
<Link Source="10354:[4561..4580).11" Target="10312:[63473..63501).6" />
<Link Source="10354:[4561..4580).11" Target="10319:[41254..41268).6" />
<Link Source="10319:[41236..41680).21" Target="10354:[4561..4580).11" />
<Link Source="10319:[41236..41680).21" Target="10319:[43853..43873).6" />
<Link Source="10319:[41302..41665).6" Target="10319:[41236..41680).21" />
<Link Source="10319:[41302..41665).6" Target="10312:[63473..63501).6" />
<Link Source="10319:[41634..41646).11" Target="10319:[41302..41665).6" />
<Link Source="10319:[44751..44765).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[84257..84273).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[84288..84313).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[84374..84391).6" Target="10319:[44751..44765).6" />
<Link Source="10319:[84374..84391).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[84406..84447).6" Target="10319:[44751..44765).6" />
<Link Source="10319:[84406..84447).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[84462..84508).6" Target="10319:[44751..44765).6" />
<Link Source="10319:[84462..84508).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[84124..109887).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[85320..85348).21" Target="10319:[105368..106708).5" />
<Link Source="10319:[85320..85348).22" Target="10319:[84257..84273).6" />
<Link Source="10319:[85320..85348).22" Target="10319:[85320..85348).21" />
<Link Source="10319:[85320..85348).22" Target="10319:[105368..106708).5" />
<Link Source="10319:[85366..85400).21" Target="10319:[105368..106708).5" />
<Link Source="10319:[85366..85400).22" Target="10319:[84288..84313).6" />
<Link Source="10319:[85366..85400).22" Target="10319:[85366..85400).21" />
<Link Source="10319:[85366..85400).22" Target="10319:[105368..106708).5" />
<Link Source="10319:[85467..85484).11" Target="10319:[105368..106708).5" />
<Link Source="10319:[104874..105336).16" Target="10312:[63473..63501).6" />
<Link Source="10319:[104874..105336).16" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).17" Target="10319:[104874..105336).16" />
<Link Source="10319:[104874..105336).17" Target="10319:[84124..109887).6" />
<Link Source="10319:[104874..105336).17" Target="10312:[63473..63501).6" />
<Link Source="10319:[105368..106708).6" Target="10319:[84257..84273).6" />
<Link Source="10319:[105368..106708).6" Target="10312:[63473..63501).6" />
<Link Source="10319:[105465..105535).17" Target="10319:[84288..84313).6" />
<Link Source="10319:[105465..105535).17" Target="10319:[105368..106708).6" />
<Link Source="10319:[76360..76385).4" Target="10319:[105465..105535).17" />
<Link Source="10319:[76360..76385).4" Target="10319:[105368..106708).6" />
<Link Source="10319:[76387..76402).4" Target="10319:[105368..106708).6" />
<Link Source="10319:[76494..76582).13" Target="10319:[105368..106708).6" />
<Link Source="10319:[84691..84861).11" Target="10312:[63473..63501).6" />
<Link Source="10319:[84691..84861).11" Target="10319:[105368..106708).6" />
<Link Source="10319:[84691..84861).11" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).11" Target="10319:[105368..106708).5" />
<Link Source="10319:[84764..84846).31" Target="10319:[84257..84273).6" />
<Link Source="10319:[84764..84846).31" Target="10319:[84691..84861).11" />
<Link Source="10319:[84764..84846).32" Target="10319:[84691..84861).11" />
<Link Source="10319:[84764..84846).34" Target="10312:[63473..63501).6" />
<Link Source="10319:[84764..84846).34" Target="10319:[84691..84861).11" />
<Link Source="10319:[84764..84846).35" Target="10319:[84288..84313).6" />
<Link Source="10319:[84764..84846).35" Target="10319:[84691..84861).11" />
<Link Source="10319:[84764..84845).6" Target="10319:[84691..84861).11" />
<Link Source="10306:[358886..358901).6" Target="10319:[84764..84846).31" />
<Link Source="10306:[358886..358901).6" Target="10319:[84764..84845).6" />
<Link Source="10306:[358903..358930).6" Target="10319:[84764..84846).32" />
<Link Source="10306:[358903..358930).6" Target="10319:[84764..84845).6" />
<Link Source="10306:[358932..358945).6" Target="10319:[84764..84846).34" />
<Link Source="10306:[358932..358945).6" Target="10319:[84764..84845).6" />
<Link Source="10306:[358947..358972).6" Target="10319:[84764..84846).35" />
<Link Source="10306:[358947..358972).6" Target="10319:[84764..84845).6" />
<Link Source="10306:[358838..360009).6" Target="10319:[84124..109887).6" />
<Link Source="10306:[358838..360009).6" Target="10319:[84764..84845).6" />
<Link Source="10306:[358998..359998).31" Target="10306:[358932..358945).6" />
<Link Source="10306:[358998..359998).31" Target="10319:[105368..106708).6" />
<Link Source="10306:[358998..359998).31" Target="10319:[84764..84845).6" />
<Link Source="10306:[358998..359998).32" Target="10319:[84764..84845).6" />
<Link Source="10319:[44948..45377).11" Target="10312:[63473..63501).6" />
<Link Source="10319:[44948..45377).11" Target="10319:[105368..106708).6" />
<Link Source="10319:[44948..45377).11" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).11" Target="10319:[105368..106708).5" />
<Link Source="10354:[11428..11441).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[45408..45422).6" Target="10319:[105368..106708).5" />
<Link Source="10287:[2377..2471).11" Target="10312:[63473..63501).6" />
<Link Source="10287:[2377..2471).11" Target="10319:[105368..106708).5" />
<Link Source="10287:[791..833).11" Target="10319:[105368..106708).6" />
<Link Source="10287:[791..833).11" Target="10312:[63473..63501).6" />
<Link Source="10287:[912..927).6" Target="10312:[63473..63501).6" />
<Link Source="10287:[912..919).6" Target="10287:[912..927).6" />
<Link Source="10287:[912..919).6" Target="10312:[63473..63501).6" />
<Link Source="10287:[945..972).6" Target="10312:[63473..63501).6" />
<Link Source="10287:[945..963).6" Target="10287:[945..972).6" />
<Link Source="10287:[945..963).6" Target="10312:[63473..63501).6" />
<Link Source="10286:[21546..21561).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[21563..21583).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[22086..22108).6" Target="10286:[21546..21561).6" />
<Link Source="10286:[22086..22108).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[22110..22130).6" Target="10286:[21563..21583).6" />
<Link Source="10286:[22110..22130).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[15616..15690).26" Target="10319:[105368..106708).6" />
<Link Source="10286:[15616..15690).27" Target="10319:[105368..106708).6" />
<Link Source="10286:[15616..15690).27" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[23124..23146).6" Target="10286:[22086..22108).6" />
<Link Source="10286:[23124..23146).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[23161..23181).6" Target="10286:[22110..22130).6" />
<Link Source="10286:[23161..23181).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[23281..23301).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[23380..23684).36" Target="10319:[105368..106708).6" />
<Link Source="10286:[23380..23684).36" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).11" Target="10319:[105368..106708).6" />
<Link Source="10286:[23893..24026).11" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).11" Target="10286:[23161..23181).6" />
<Link Source="10286:[24545..24641).11" Target="10319:[105368..106708).6" />
<Link Source="10286:[24655..25349).6" Target="10286:[24545..24641).11" />
<Link Source="10286:[24655..25349).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[26910..26935).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[26952..26974).6" Target="10286:[23124..23146).6" />
<Link Source="10286:[26952..26974).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[27002..27022).6" Target="10286:[23281..23301).6" />
<Link Source="10286:[27002..27022).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[27048..27088).21" Target="10319:[105368..106708).6" />
<Link Source="10286:[27048..27088).22" Target="10286:[26910..26935).6" />
<Link Source="10286:[27048..27088).22" Target="10286:[27048..27088).21" />
<Link Source="10286:[27048..27088).22" Target="10319:[105368..106708).6" />
<Link Source="10286:[27208..27236).11" Target="10319:[105368..106708).6" />
<Link Source="10286:[27250..27722).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[27738..27845).16" Target="10319:[105368..106708).6" />
<Link Source="10286:[27738..27845).17" Target="10286:[27208..27236).11" />
<Link Source="10286:[27738..27845).17" Target="10286:[27738..27845).16" />
<Link Source="10286:[27738..27845).17" Target="10319:[105368..106708).6" />
<Link Source="10286:[27861..27873).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[26281..26812).6" Target="10286:[27861..27873).6" />
<Link Source="10286:[26281..26812).6" Target="10319:[105368..106708).6" />
<Link Source="10286:[26450..26769).6" Target="10286:[24545..24641).11" />
<Link Source="10286:[26450..26769).6" Target="10286:[26281..26812).6" />
<Link Source="10287:[1680..1716).6" Target="10319:[105368..106708).6" />
<Link Source="10287:[1680..1716).6" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).6" Target="10287:[1680..1716).6" />
<Link Source="10287:[1683..1690).6" Target="10287:[912..919).6" />
<Link Source="10287:[1683..1690).6" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).11" Target="10287:[1683..1690).6" />
<Link Source="10287:[1683..1716).11" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).11" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).11" Target="10287:[1683..1716).11" />
<Link Source="10319:[51935..52244).11" Target="10319:[13969..14029).1" />
<Link Source="10076:[5223..5250).18" Target="10319:[105368..106708).6" />
<Link Source="10076:[5223..5250).18" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).18" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).18" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).18" Target="10319:[105368..106708).6" />
<Link Source="10076:[5277..5448).18" Target="10076:[4989..5047).1" />
<Link Source="10077:[44231..44317).41" Target="10319:[105368..106708).6" />
<Link Source="10077:[44231..44317).41" Target="10077:[32567..32606).1" />
<Link Source="10286:[1688..1781).25" Target="10319:[105368..106708).6" />
<Link Source="10286:[1688..1781).25" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).57" Target="10286:[1688..1781).25" />
<Link Source="10298:[471..492).57" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).25" Target="10319:[105368..106708).6" />
<Link Source="10286:[1820..1963).25" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).58" Target="10286:[1820..1963).25" />
<Link Source="10298:[471..492).58" Target="10286:[1840..1888).1" />
<Link Source="10319:[42478..42805).19" Target="10319:[105368..106708).6" />
<Link Source="10319:[42821..42938).49" Target="10319:[105368..106708).6" />
<Link Source="10319:[42839..42937).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[63849..63870).7" Target="10319:[42821..42938).49" />
<Link Source="10319:[63849..63870).7" Target="10319:[42839..42937).7" />
<Link Source="10319:[63885..63919).7" Target="10319:[42821..42938).49" />
<Link Source="10319:[63885..63919).7" Target="10319:[42839..42937).7" />
<Link Source="10319:[63934..63945).7" Target="10319:[42821..42938).49" />
<Link Source="10319:[63934..63945).7" Target="10319:[42839..42937).7" />
<Link Source="10319:[63960..63969).7" Target="10319:[42821..42938).49" />
<Link Source="10319:[63960..63969).7" Target="10319:[42839..42937).7" />
<Link Source="10319:[63984..64009).7" Target="10319:[42821..42938).49" />
<Link Source="10319:[63984..64009).7" Target="10319:[42839..42937).7" />
<Link Source="10319:[63768..64484).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[63768..64484).7" Target="10319:[42839..42937).7" />
<Link Source="10319:[64035..64445).25" Target="10319:[42839..42937).7" />
<Link Source="10319:[64035..64445).26" Target="10319:[63885..63919).7" />
<Link Source="10319:[64035..64445).26" Target="10319:[64035..64445).25" />
<Link Source="10319:[64035..64445).26" Target="10319:[42839..42937).7" />
<Link Source="10319:[64461..64473).13" Target="10319:[42839..42937).7" />
<Link Source="10319:[42821..42938).55" Target="10319:[64461..64473).13" />
<Link Source="10319:[42821..42938).55" Target="10319:[105368..106708).6" />
<Link Source="10319:[42952..43079).19" Target="10319:[105368..106708).6" />
<Link Source="10319:[42952..43079).20" Target="10319:[42821..42938).55" />
<Link Source="10319:[42952..43079).20" Target="10319:[42952..43079).19" />
<Link Source="10319:[42952..43079).20" Target="10319:[105368..106708).6" />
<Link Source="10354:[11312..11328).7" Target="10319:[105368..106708).6" />
<Link Source="10354:[3684..3818).43" Target="10319:[105368..106708).6" />
<Link Source="10354:[3684..3818).43" Target="10354:[11312..11328).7" />
<Link Source="10354:[3720..3803).313" Target="10354:[3684..3818).43" />
<Link Source="10354:[3720..3803).313" Target="10319:[105368..106708).6" />
<Link Source="10354:[3720..3803).313" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).313" Target="10354:[11312..11328).7" />
<Link Source="10354:[3720..3803).314" Target="10354:[11312..11328).7" />
<Link Source="10354:[3720..3803).315" Target="10354:[3684..3818).43" />
<Link Source="10354:[3720..3803).315" Target="10319:[105368..106708).6" />
<Link Source="10354:[3720..3803).315" Target="10354:[3720..3803).314" />
<Link Source="10354:[3720..3803).315" Target="10354:[11312..11328).7" />
<Link Source="10354:[11299..11330).19" Target="10354:[3720..3803).313" />
<Link Source="10354:[11299..11330).19" Target="10319:[105368..106708).6" />
<Link Source="10319:[50330..50355).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[3905..3919).7" Target="10319:[105368..106708).6" />
<Link Source="10354:[3684..3818).44" Target="10319:[105368..106708).6" />
<Link Source="10354:[3684..3818).44" Target="10312:[3905..3919).7" />
<Link Source="10354:[3720..3803).321" Target="10354:[3684..3818).44" />
<Link Source="10354:[3720..3803).321" Target="10319:[105368..106708).6" />
<Link Source="10354:[3720..3803).321" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).321" Target="10312:[3905..3919).7" />
<Link Source="10354:[3720..3803).322" Target="10312:[3905..3919).7" />
<Link Source="10354:[3720..3803).323" Target="10354:[3684..3818).44" />
<Link Source="10354:[3720..3803).323" Target="10319:[105368..106708).6" />
<Link Source="10354:[3720..3803).323" Target="10354:[3720..3803).322" />
<Link Source="10354:[3720..3803).323" Target="10312:[3905..3919).7" />
<Link Source="10312:[3892..3921).19" Target="10354:[3720..3803).321" />
<Link Source="10312:[3892..3921).19" Target="10319:[105368..106708).6" />
<Link Source="10312:[3935..3968).25" Target="10319:[105368..106708).6" />
<Link Source="10312:[3948..3966).7" Target="10319:[105368..106708).6" />
<Link Source="10353:[4698..4724).13" Target="10312:[3935..3968).25" />
<Link Source="10353:[4698..4724).13" Target="10312:[3948..3966).7" />
<Link Source="10353:[4750..4847).25" Target="10353:[4698..4724).13" />
<Link Source="10353:[4750..4847).25" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).25" Target="10312:[3948..3966).7" />
<Link Source="10353:[4863..5000).49" Target="10353:[4698..4724).13" />
<Link Source="10353:[4863..5000).49" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).49" Target="10312:[3948..3966).7" />
<Link Source="10353:[4863..5000).50" Target="10312:[3948..3966).7" />
<Link Source="10353:[5079..5183).25" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).25" Target="10312:[3948..3966).7" />
<Link Source="10353:[5197..5323).37" Target="10353:[4698..4724).13" />
<Link Source="10353:[5197..5323).37" Target="10353:[5079..5183).25" />
<Link Source="10353:[5197..5323).37" Target="10312:[3948..3966).7" />
<Link Source="10353:[5485..5759).73" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).73" Target="10312:[3948..3966).7" />
<Link Source="10353:[5485..5759).74" Target="10353:[4698..4724).13" />
<Link Source="10353:[5485..5759).74" Target="10353:[5485..5759).73" />
<Link Source="10353:[5485..5759).74" Target="10312:[3948..3966).7" />
<Link Source="10353:[5485..5759).75" Target="10312:[3948..3966).7" />
<Link Source="10353:[5775..5979).49" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).49" Target="10312:[3948..3966).7" />
<Link Source="10353:[5775..5979).51" Target="10353:[4698..4724).13" />
<Link Source="10353:[5775..5979).51" Target="10353:[5775..5979).49" />
<Link Source="10353:[5775..5979).51" Target="10312:[3948..3966).7" />
<Link Source="10353:[5995..6029).37" Target="10353:[5775..5979).51" />
<Link Source="10353:[5995..6029).37" Target="10312:[3948..3966).7" />
<Link Source="10353:[6002..6028).13" Target="10312:[3948..3966).7" />
<Link Source="10353:[6343..6358).13" Target="10353:[5995..6029).37" />
<Link Source="10353:[6343..6358).13" Target="10353:[6002..6028).13" />
<Link Source="10353:[6384..6410).73" Target="10353:[6002..6028).13" />
<Link Source="10353:[6384..6410).74" Target="10353:[6343..6358).13" />
<Link Source="10353:[6384..6410).74" Target="10353:[6384..6410).73" />
<Link Source="10353:[6384..6410).74" Target="10353:[6002..6028).13" />
<Link Source="10312:[5188..5207).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[5209..5220).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[5222..5231).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[5233..5272).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[5274..5295).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[5297..5318).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[5320..5333).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[5124..5404).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[4685..4699).19" Target="10319:[105368..106708).6" />
<Link Source="10354:[3684..3818).45" Target="10319:[105368..106708).6" />
<Link Source="10354:[3684..3818).45" Target="10312:[4685..4699).19" />
<Link Source="10354:[3720..3803).329" Target="10354:[3684..3818).45" />
<Link Source="10354:[3720..3803).329" Target="10319:[105368..106708).6" />
<Link Source="10354:[3720..3803).329" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).329" Target="10312:[4685..4699).19" />
<Link Source="10354:[3720..3803).330" Target="10312:[4685..4699).19" />
<Link Source="10354:[3720..3803).331" Target="10354:[3684..3818).45" />
<Link Source="10354:[3720..3803).331" Target="10319:[105368..106708).6" />
<Link Source="10354:[3720..3803).331" Target="10354:[3720..3803).330" />
<Link Source="10354:[3720..3803).331" Target="10312:[4685..4699).19" />
<Link Source="10312:[4680..4787).37" Target="10354:[3720..3803).329" />
<Link Source="10312:[4680..4787).37" Target="10319:[105368..106708).6" />
<Link Source="10312:[4826..5058).91" Target="10319:[105368..106708).6" />
<Link Source="10312:[4826..5058).91" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).92" Target="10319:[105368..106708).6" />
<Link Source="10382:[1340..1359).7" Target="10319:[105368..106708).6" />
<Link Source="10382:[1374..1383).7" Target="10319:[105368..106708).6" />
<Link Source="10382:[1385..1424).7" Target="10319:[105368..106708).6" />
<Link Source="10382:[1426..1447).7" Target="10319:[105368..106708).6" />
<Link Source="10382:[1449..1470).7" Target="10319:[105368..106708).6" />
<Link Source="10382:[1472..1485).7" Target="10319:[105368..106708).6" />
<Link Source="10382:[1572..1586).7" Target="10319:[105368..106708).6" />
<Link Source="10354:[3684..3818).46" Target="10382:[1340..1359).7" />
<Link Source="10354:[3684..3818).46" Target="10382:[1572..1586).7" />
<Link Source="10354:[3720..3803).337" Target="10354:[3684..3818).46" />
<Link Source="10354:[3720..3803).337" Target="10319:[105368..106708).6" />
<Link Source="10354:[3720..3803).337" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).337" Target="10382:[1572..1586).7" />
<Link Source="10354:[3720..3803).338" Target="10382:[1572..1586).7" />
<Link Source="10354:[3720..3803).339" Target="10354:[3684..3818).46" />
<Link Source="10354:[3720..3803).339" Target="10319:[105368..106708).6" />
<Link Source="10354:[3720..3803).339" Target="10354:[3720..3803).338" />
<Link Source="10354:[3720..3803).339" Target="10382:[1572..1586).7" />
<Link Source="10382:[1559..1588).19" Target="10354:[3720..3803).337" />
<Link Source="10382:[1559..1588).19" Target="10319:[105368..106708).6" />
<Link Source="10382:[1619..1629).7" Target="10319:[105368..106708).6" />
<Link Source="10382:[913..1046).7" Target="10319:[105368..106708).6" />
<Link Source="10382:[913..1046).7" Target="10382:[1619..1629).7" />
<Link Source="10382:[949..1031).13" Target="EXTERNAL" />
<Link Source="10382:[949..1031).13" Target="10382:[1619..1629).7" />
<Link Source="10382:[1604..1691).31" Target="10382:[949..1031).13" />
<Link Source="10382:[1604..1691).31" Target="10319:[105368..106708).6" />
<Link Source="10382:[1604..1691).32" Target="10382:[1426..1447).7" />
<Link Source="10382:[1604..1691).32" Target="10382:[1604..1691).31" />
<Link Source="10382:[1604..1691).32" Target="10319:[105368..106708).6" />
<Link Source="10382:[1604..1691).33" Target="10319:[105368..106708).6" />
<Link Source="10346:[10861..10875).7" Target="10319:[105368..106708).6" />
<Link Source="10354:[3684..3818).48" Target="10319:[105368..106708).6" />
<Link Source="10354:[3684..3818).48" Target="10346:[10861..10875).7" />
<Link Source="10354:[3720..3803).353" Target="10354:[3684..3818).48" />
<Link Source="10354:[3720..3803).353" Target="10319:[105368..106708).6" />
<Link Source="10354:[3720..3803).353" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).353" Target="10346:[10861..10875).7" />
<Link Source="10354:[3720..3803).354" Target="10346:[10861..10875).7" />
<Link Source="10354:[3720..3803).355" Target="10354:[3684..3818).48" />
<Link Source="10354:[3720..3803).355" Target="10319:[105368..106708).6" />
<Link Source="10354:[3720..3803).355" Target="10354:[3720..3803).354" />
<Link Source="10354:[3720..3803).355" Target="10346:[10861..10875).7" />
<Link Source="10346:[10848..10877).19" Target="10354:[3720..3803).353" />
<Link Source="10346:[10848..10877).19" Target="10319:[105368..106708).6" />
<Link Source="10346:[10897..10914).7" Target="10319:[105368..106708).6" />
<Link Source="10346:[7666..7775).7" Target="10319:[105368..106708).6" />
<Link Source="10346:[7666..7775).7" Target="10346:[10897..10914).7" />
<Link Source="10346:[7672..7773).19" Target="10346:[7666..7775).7" />
<Link Source="10346:[7672..7773).19" Target="10319:[105368..106708).6" />
<Link Source="10346:[7672..7773).19" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).19" Target="10346:[10897..10914).7" />
<Link Source="10346:[10893..11127).13" Target="10346:[7672..7773).19" />
<Link Source="10346:[10893..11127).13" Target="10319:[105368..106708).6" />
<Link Source="10346:[3525..3638).45" Target="10319:[105368..106708).6" />
<Link Source="10312:[7729..7768).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[7615..8420).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[7903..7936).25" Target="10319:[105368..106708).6" />
<Link Source="10312:[7916..7934).7" Target="10319:[105368..106708).6" />
<Link Source="10353:[4698..4724).14" Target="10312:[7903..7936).25" />
<Link Source="10353:[4698..4724).14" Target="10312:[7916..7934).7" />
<Link Source="10353:[4750..4847).27" Target="10353:[4698..4724).14" />
<Link Source="10353:[4750..4847).27" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).27" Target="10312:[7916..7934).7" />
<Link Source="10353:[4863..5000).53" Target="10353:[4698..4724).14" />
<Link Source="10353:[4863..5000).53" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).53" Target="10312:[7916..7934).7" />
<Link Source="10353:[4863..5000).54" Target="10312:[7916..7934).7" />
<Link Source="10353:[5079..5183).27" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).27" Target="10312:[7916..7934).7" />
<Link Source="10353:[5197..5323).40" Target="10353:[4698..4724).14" />
<Link Source="10353:[5197..5323).40" Target="10353:[5079..5183).27" />
<Link Source="10353:[5197..5323).40" Target="10312:[7916..7934).7" />
<Link Source="10353:[5485..5759).79" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).79" Target="10312:[7916..7934).7" />
<Link Source="10353:[5485..5759).80" Target="10353:[4698..4724).14" />
<Link Source="10353:[5485..5759).80" Target="10353:[5485..5759).79" />
<Link Source="10353:[5485..5759).80" Target="10312:[7916..7934).7" />
<Link Source="10353:[5485..5759).81" Target="10312:[7916..7934).7" />
<Link Source="10353:[5775..5979).53" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).53" Target="10312:[7916..7934).7" />
<Link Source="10353:[5775..5979).55" Target="10353:[4698..4724).14" />
<Link Source="10353:[5775..5979).55" Target="10353:[5775..5979).53" />
<Link Source="10353:[5775..5979).55" Target="10312:[7916..7934).7" />
<Link Source="10353:[5995..6029).40" Target="10353:[5775..5979).55" />
<Link Source="10353:[5995..6029).40" Target="10312:[7916..7934).7" />
<Link Source="10353:[6002..6028).14" Target="10312:[7916..7934).7" />
<Link Source="10353:[6343..6358).14" Target="10353:[5995..6029).40" />
<Link Source="10353:[6343..6358).14" Target="10353:[6002..6028).14" />
<Link Source="10353:[6384..6410).79" Target="10353:[6002..6028).14" />
<Link Source="10353:[6384..6410).80" Target="10353:[6343..6358).14" />
<Link Source="10353:[6384..6410).80" Target="10353:[6384..6410).79" />
<Link Source="10353:[6384..6410).80" Target="10353:[6002..6028).14" />
<Link Source="10312:[7952..7977).25" Target="10319:[105368..106708).6" />
<Link Source="10312:[61608..61629).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[63566..63612).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[63638..63668).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[80978..80991).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[80993..81002).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[81004..81017).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[81019..81040).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[81042..81069).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[81095..84034).7" Target="10312:[80978..80991).7" />
<Link Source="10312:[81095..84034).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[81196..82523).43" Target="10312:[81095..84034).7" />
<Link Source="10312:[81196..82523).44" Target="10312:[80993..81002).7" />
<Link Source="10312:[81196..82523).44" Target="10312:[81196..82523).43" />
<Link Source="10312:[81196..82523).44" Target="10312:[81095..84034).7" />
<Link Source="10312:[81196..82523).45" Target="10312:[81019..81040).7" />
<Link Source="10312:[81196..82523).45" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).45" Target="10312:[81095..84034).7" />
<Link Source="10312:[81196..82523).48" Target="10312:[81196..82523).44" />
<Link Source="10312:[81196..82523).48" Target="10312:[81196..82523).45" />
<Link Source="10312:[81196..82523).48" Target="10312:[81095..84034).7" />
<Link Source="10312:[81319..81371).7" Target="10312:[80978..80991).7" />
<Link Source="10312:[81319..81371).7" Target="10312:[81196..82523).48" />
<Link Source="10312:[81495..81570).31" Target="10312:[81319..81371).7" />
<Link Source="10312:[81495..81570).31" Target="10319:[105368..106708).6" />
<Link Source="10312:[81495..81570).31" Target="10312:[81196..82523).48" />
<Link Source="10312:[81495..81570).32" Target="10312:[81319..81371).7" />
<Link Source="10312:[81495..81570).32" Target="10312:[81196..82523).48" />
<Link Source="10312:[81596..82500).37" Target="10312:[81319..81371).7" />
<Link Source="10312:[81596..82500).37" Target="10319:[105368..106708).6" />
<Link Source="10312:[81596..82500).37" Target="10312:[80993..81002).7" />
<Link Source="10312:[81596..82500).37" Target="10312:[81196..82523).48" />
<Link Source="10312:[81596..82500).38" Target="10312:[81019..81040).7" />
<Link Source="10312:[81596..82500).38" Target="10312:[81196..82523).48" />
<Link Source="10312:[81628..81659).7" Target="10312:[81196..82523).48" />
<Link Source="10353:[7504..7530).14" Target="10312:[81596..82500).38" />
<Link Source="10353:[7504..7530).14" Target="10312:[81628..81659).7" />
<Link Source="10312:[81596..82500).41" Target="10312:[81596..82500).37" />
<Link Source="10312:[81596..82500).41" Target="10353:[7504..7530).14" />
<Link Source="10312:[81596..82500).41" Target="10312:[81196..82523).48" />
<Link Source="10312:[84050..84066).13" Target="10319:[105368..106708).6" />
<Link Source="10312:[66291..66342).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[75301..75322).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[75301..75322).7" Target="10312:[66291..66342).7" />
<Link Source="10312:[75324..75352).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[75324..75352).7" Target="10312:[66291..66342).7" />
<Link Source="10312:[75735..75866).31" Target="10312:[75301..75322).7" />
<Link Source="10312:[75735..75866).31" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).31" Target="10312:[66291..66342).7" />
<Link Source="10312:[75735..75866).32" Target="10312:[66291..66342).7" />
<Link Source="10312:[75742..75804).7" Target="10312:[75735..75866).31" />
<Link Source="10312:[75742..75804).7" Target="10312:[66291..66342).7" />
<Link Source="10312:[75735..75866).34" Target="10312:[75324..75352).7" />
<Link Source="10312:[75735..75866).34" Target="10312:[75742..75804).7" />
<Link Source="10312:[77543..77571).7" Target="10312:[75735..75866).34" />
<Link Source="10312:[77543..77571).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[77573..77604).7" Target="10312:[63638..63668).7" />
<Link Source="10312:[77573..77604).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[77654..77700).7" Target="10312:[63566..63612).7" />
<Link Source="10312:[77654..77700).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[77501..78044).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[77726..77892).25" Target="10312:[77501..78044).7" />
<Link Source="10312:[77726..77892).25" Target="10319:[105368..106708).6" />
<Link Source="10312:[77726..77892).26" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).26" Target="10319:[105368..106708).6" />
<Link Source="10312:[77730..77782).7" Target="10319:[105368..106708).6" />
<Link Source="10298:[471..492).62" Target="10312:[77726..77892).25" />
<Link Source="10298:[471..492).62" Target="10312:[77730..77782).7" />
<Link Source="10298:[494..511).62" Target="10312:[77726..77892).26" />
<Link Source="10298:[494..511).62" Target="10312:[77730..77782).7" />
<Link Source="10312:[78402..78430).7" Target="10312:[77543..77571).7" />
<Link Source="10312:[78402..78430).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[78432..78463).7" Target="10312:[77573..77604).7" />
<Link Source="10312:[78432..78463).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[78513..78552).7" Target="10312:[77654..77700).7" />
<Link Source="10312:[78513..78552).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[78346..78783).7" Target="10312:[77501..78044).7" />
<Link Source="10312:[78346..78783).7" Target="10319:[105368..106708).6" />
<Link Source="10376:[1085..1113).7" Target="10312:[78402..78430).7" />
<Link Source="10376:[1085..1113).7" Target="10319:[105368..106708).6" />
<Link Source="10376:[1115..1146).7" Target="10312:[78432..78463).7" />
<Link Source="10376:[1115..1146).7" Target="10319:[105368..106708).6" />
<Link Source="10376:[1196..1235).7" Target="10312:[78513..78552).7" />
<Link Source="10376:[1196..1235).7" Target="10319:[105368..106708).6" />
<Link Source="10376:[1028..1425).7" Target="10312:[78346..78783).7" />
<Link Source="10376:[1028..1425).7" Target="10319:[105368..106708).6" />
<Link Source="10286:[30098..30120).7" Target="10376:[1028..1425).7" />
<Link Source="10286:[30098..30120).7" Target="10319:[105368..106708).6" />
<Link Source="10286:[30135..30160).7" Target="10376:[1085..1113).7" />
<Link Source="10286:[30135..30160).7" Target="10319:[105368..106708).6" />
<Link Source="10286:[30175..30206).7" Target="10376:[1115..1146).7" />
<Link Source="10286:[30175..30206).7" Target="10319:[105368..106708).6" />
<Link Source="10286:[30283..30330).7" Target="10376:[1196..1235).7" />
<Link Source="10286:[30283..30330).7" Target="10319:[105368..106708).6" />
<Link Source="10286:[30012..30691).7" Target="10376:[1028..1425).7" />
<Link Source="10286:[30012..30691).7" Target="10319:[105368..106708).6" />
<Link Source="10286:[30356..30522).25" Target="10286:[30012..30691).7" />
<Link Source="10286:[30356..30522).25" Target="10319:[105368..106708).6" />
<Link Source="10286:[30356..30522).26" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).26" Target="10319:[105368..106708).6" />
<Link Source="10286:[30360..30412).7" Target="10319:[105368..106708).6" />
<Link Source="10298:[471..492).63" Target="10286:[30356..30522).25" />
<Link Source="10298:[471..492).63" Target="10286:[30360..30412).7" />
<Link Source="10298:[494..511).63" Target="10286:[30356..30522).26" />
<Link Source="10298:[494..511).63" Target="10286:[30360..30412).7" />
<Link Source="10060:[2136..2158).7" Target="10286:[30098..30120).7" />
<Link Source="10060:[2136..2158).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[2173..2198).7" Target="10286:[30135..30160).7" />
<Link Source="10060:[2173..2198).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[2213..2244).7" Target="10286:[30175..30206).7" />
<Link Source="10060:[2213..2244).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[2320..2366).7" Target="10286:[30283..30330).7" />
<Link Source="10060:[2320..2366).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[5621..5634).7" Target="10060:[2136..2158).7" />
<Link Source="10060:[5621..5634).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[5691..5716).7" Target="10060:[2173..2198).7" />
<Link Source="10060:[5691..5716).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[5731..5762).7" Target="10060:[2213..2244).7" />
<Link Source="10060:[5731..5762).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[5777..5806).7" Target="10060:[2136..2158).7" />
<Link Source="10060:[5777..5806).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[5882..5928).7" Target="10060:[2320..2366).7" />
<Link Source="10060:[5882..5928).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[5954..5991).25" Target="10319:[105368..106708).6" />
<Link Source="10060:[6005..6042).25" Target="10319:[105368..106708).6" />
<Link Source="10060:[6005..6042).26" Target="10060:[5621..5634).7" />
<Link Source="10060:[6005..6042).26" Target="10060:[6005..6042).25" />
<Link Source="10060:[6005..6042).26" Target="10319:[105368..106708).6" />
<Link Source="10060:[6056..6090).13" Target="10060:[5621..5634).7" />
<Link Source="10060:[6056..6090).13" Target="10319:[105368..106708).6" />
<Link Source="10060:[6104..6172).19" Target="10060:[5621..5634).7" />
<Link Source="10060:[6104..6172).19" Target="10319:[105368..106708).6" />
<Link Source="10060:[6188..6219).13" Target="10319:[105368..106708).6" />
<Link Source="10060:[10202..10215).7" Target="10060:[5621..5634).7" />
<Link Source="10060:[10202..10215).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[10265..10311).7" Target="10060:[5882..5928).7" />
<Link Source="10060:[10265..10311).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[10337..10405).19" Target="10060:[10202..10215).7" />
<Link Source="10060:[10337..10405).19" Target="10319:[105368..106708).6" />
<Link Source="10060:[10419..10454).25" Target="10319:[105368..106708).6" />
<Link Source="10060:[10470..10516).7" Target="10060:[10202..10215).7" />
<Link Source="10060:[10470..10516).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[10532..10544).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[10558..11295).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[11990..12013).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[12078..12091).7" Target="10060:[10202..10215).7" />
<Link Source="10060:[12078..12091).7" Target="10319:[105368..106708).6" />
<Link Source="10060:[12117..12185).19" Target="10060:[12078..12091).7" />
<Link Source="10060:[12117..12185).19" Target="10319:[105368..106708).6" />
<Link Source="10060:[12199..12238).25" Target="10319:[105368..106708).6" />
<Link Source="10060:[12199..12238).26" Target="10060:[11990..12013).7" />
<Link Source="10060:[12199..12238).26" Target="10060:[12199..12238).25" />
<Link Source="10060:[12199..12238).26" Target="10319:[105368..106708).6" />
<Link Source="10346:[11710..11746).7" Target="10312:[63638..63668).7" />
<Link Source="10286:[2155..2260).7" Target="10319:[105368..106708).6" />
<Link Source="10286:[2155..2260).7" Target="10346:[11710..11746).7" />
<Link Source="10286:[2191..2245).25" Target="10286:[2155..2260).7" />
<Link Source="10286:[2191..2245).25" Target="10312:[63638..63668).7" />
<Link Source="10286:[2191..2245).25" Target="10346:[11710..11746).7" />
<Link Source="10286:[2191..2245).26" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).26" Target="10346:[11710..11746).7" />
<Link Source="10286:[2198..2244).7" Target="10346:[11710..11746).7" />
<Link Source="10298:[471..492).65" Target="10286:[2191..2245).25" />
<Link Source="10298:[471..492).65" Target="10286:[2198..2244).7" />
<Link Source="10298:[494..511).65" Target="10286:[2191..2245).26" />
<Link Source="10298:[494..511).65" Target="10286:[2198..2244).7" />
<Link Source="10345:[28225..28251).7" Target="10298:[471..492).65" />
<Link Source="10345:[28225..28251).7" Target="10312:[63638..63668).7" />
<Link Source="10345:[28927..28940).13" Target="10312:[63638..63668).7" />
<Link Source="10346:[12205..12212).7" Target="10312:[63638..63668).7" />
<Link Source="10354:[3720..3803).361" Target="10354:[3684..3818).45" />
<Link Source="10354:[3720..3803).361" Target="10312:[63638..63668).7" />
<Link Source="10354:[3720..3803).361" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).361" Target="10312:[4685..4699).19" />
<Link Source="10312:[4680..4787).41" Target="10354:[3720..3803).361" />
<Link Source="10312:[4680..4787).41" Target="10319:[105368..106708).6" />
<Link Source="10312:[4749..4764).7" Target="10319:[105368..106708).6" />
<Link Source="10312:[4749..4764).7" Target="10312:[4680..4787).41" />
<Link Source="10312:[5087..5101).7" Target="10312:[4749..4764).7" />
<Link Source="10312:[5087..5101).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[43799..44676).37" Target="10319:[105368..106708).6" />
<Link Source="10319:[43853..43873).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[41088..41107).7" Target="10319:[43799..44676).37" />
<Link Source="10319:[41088..41107).7" Target="10319:[43853..43873).7" />
<Link Source="10319:[41138..41158).7" Target="10319:[43853..43873).7" />
<Link Source="10354:[4919..5009).48" Target="10319:[41088..41107).7" />
<Link Source="10354:[4919..5009).48" Target="10319:[41138..41158).7" />
<Link Source="10354:[4094..4107).62" Target="10354:[4919..5009).48" />
<Link Source="10354:[4094..4107).62" Target="10060:[2213..2244).7" />
<Link Source="10354:[4094..4107).62" Target="10319:[41138..41158).7" />
<Link Source="10319:[41133..41220).13" Target="10354:[4094..4107).62" />
<Link Source="10319:[41133..41220).13" Target="10319:[43853..43873).7" />
<Link Source="10319:[41254..41268).7" Target="10319:[43853..43873).7" />
<Link Source="10354:[4525..4595).13" Target="10319:[41088..41107).7" />
<Link Source="10354:[4525..4595).13" Target="10319:[41254..41268).7" />
<Link Source="10354:[4561..4580).13" Target="10354:[4525..4595).13" />
<Link Source="10354:[4561..4580).13" Target="10060:[2213..2244).7" />
<Link Source="10354:[4561..4580).13" Target="10319:[41254..41268).7" />
<Link Source="10319:[41236..41680).25" Target="10354:[4561..4580).13" />
<Link Source="10319:[41236..41680).25" Target="10319:[43853..43873).7" />
<Link Source="10319:[41302..41665).7" Target="10319:[41236..41680).25" />
<Link Source="10319:[41302..41665).7" Target="10060:[2213..2244).7" />
<Link Source="10319:[41634..41646).13" Target="10319:[41302..41665).7" />
<Link Source="10319:[44751..44765).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[84288..84313).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[84374..84391).7" Target="10319:[44751..44765).7" />
<Link Source="10319:[84374..84391).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[84406..84447).7" Target="10319:[44751..44765).7" />
<Link Source="10319:[84406..84447).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[84462..84508).7" Target="10319:[44751..44765).7" />
<Link Source="10319:[84462..84508).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[84124..109887).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[85320..85348).25" Target="10319:[105368..106708).6" />
<Link Source="10319:[85366..85400).25" Target="10319:[105368..106708).6" />
<Link Source="10319:[85366..85400).26" Target="10319:[84288..84313).7" />
<Link Source="10319:[85366..85400).26" Target="10319:[85366..85400).25" />
<Link Source="10319:[85366..85400).26" Target="10319:[105368..106708).6" />
<Link Source="10319:[85467..85484).13" Target="10319:[105368..106708).6" />
<Link Source="10319:[104874..105336).19" Target="10060:[2213..2244).7" />
<Link Source="10319:[104874..105336).19" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).20" Target="10319:[104874..105336).19" />
<Link Source="10319:[104874..105336).20" Target="10319:[84124..109887).7" />
<Link Source="10319:[104874..105336).20" Target="10060:[2213..2244).7" />
<Link Source="10319:[105368..106708).7" Target="10319:[84288..84313).7" />
<Link Source="10319:[105368..106708).7" Target="10060:[2213..2244).7" />
<Link Source="10319:[76360..76385).5" Target="10319:[105368..106708).7" />
<Link Source="10319:[76387..76402).5" Target="10319:[105368..106708).7" />
<Link Source="10319:[76494..76582).17" Target="10319:[105368..106708).7" />
<Link Source="10319:[84691..84861).13" Target="10060:[2213..2244).7" />
<Link Source="10319:[84691..84861).13" Target="10319:[105368..106708).7" />
<Link Source="10319:[84691..84861).13" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).13" Target="10319:[105368..106708).6" />
<Link Source="10319:[84764..84846).37" Target="10319:[105368..106708).6" />
<Link Source="10319:[84764..84846).37" Target="10319:[84691..84861).13" />
<Link Source="10319:[84764..84846).38" Target="10319:[84691..84861).13" />
<Link Source="10319:[84764..84846).40" Target="10060:[2213..2244).7" />
<Link Source="10319:[84764..84846).40" Target="10319:[84691..84861).13" />
<Link Source="10319:[84764..84846).41" Target="10319:[84288..84313).7" />
<Link Source="10319:[84764..84846).41" Target="10319:[84691..84861).13" />
<Link Source="10319:[84764..84845).7" Target="10319:[84691..84861).13" />
<Link Source="10306:[358886..358901).7" Target="10319:[84764..84846).37" />
<Link Source="10306:[358886..358901).7" Target="10319:[84764..84845).7" />
<Link Source="10306:[358903..358930).7" Target="10319:[84764..84846).38" />
<Link Source="10306:[358903..358930).7" Target="10319:[84764..84845).7" />
<Link Source="10306:[358932..358945).7" Target="10319:[84764..84846).40" />
<Link Source="10306:[358932..358945).7" Target="10319:[84764..84845).7" />
<Link Source="10306:[358947..358972).7" Target="10319:[84764..84846).41" />
<Link Source="10306:[358947..358972).7" Target="10319:[84764..84845).7" />
<Link Source="10306:[358838..360009).7" Target="10319:[84124..109887).7" />
<Link Source="10306:[358838..360009).7" Target="10319:[84764..84845).7" />
<Link Source="10306:[358998..359998).37" Target="10306:[358932..358945).7" />
<Link Source="10306:[358998..359998).37" Target="10319:[105368..106708).7" />
<Link Source="10306:[358998..359998).37" Target="10319:[84764..84845).7" />
<Link Source="10306:[358998..359998).38" Target="10319:[84764..84845).7" />
<Link Source="10319:[44948..45377).13" Target="10060:[2213..2244).7" />
<Link Source="10319:[44948..45377).13" Target="10319:[105368..106708).7" />
<Link Source="10319:[44948..45377).13" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).13" Target="10319:[105368..106708).6" />
<Link Source="10354:[11428..11441).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[45408..45422).7" Target="10319:[105368..106708).6" />
<Link Source="10287:[2377..2471).13" Target="10060:[2213..2244).7" />
<Link Source="10287:[2377..2471).13" Target="10319:[105368..106708).6" />
<Link Source="10287:[791..833).13" Target="10319:[105368..106708).7" />
<Link Source="10287:[791..833).13" Target="10060:[2213..2244).7" />
<Link Source="10287:[912..927).7" Target="10060:[2213..2244).7" />
<Link Source="10287:[912..919).7" Target="10287:[912..927).7" />
<Link Source="10287:[912..919).7" Target="10060:[2213..2244).7" />
<Link Source="10287:[945..972).7" Target="10060:[2213..2244).7" />
<Link Source="10287:[945..963).7" Target="10287:[945..972).7" />
<Link Source="10287:[945..963).7" Target="10060:[2213..2244).7" />
<Link Source="10286:[21546..21561).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[21563..21583).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[22086..22108).7" Target="10286:[21546..21561).7" />
<Link Source="10286:[22086..22108).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[22110..22130).7" Target="10286:[21563..21583).7" />
<Link Source="10286:[22110..22130).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[15616..15690).31" Target="10319:[105368..106708).7" />
<Link Source="10286:[15616..15690).32" Target="10319:[105368..106708).7" />
<Link Source="10286:[15616..15690).32" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[23124..23146).7" Target="10286:[22086..22108).7" />
<Link Source="10286:[23124..23146).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[23161..23181).7" Target="10286:[22110..22130).7" />
<Link Source="10286:[23161..23181).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[23281..23301).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[23380..23684).43" Target="10319:[105368..106708).7" />
<Link Source="10286:[23380..23684).43" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).13" Target="10319:[105368..106708).7" />
<Link Source="10286:[23893..24026).13" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).13" Target="10286:[23161..23181).7" />
<Link Source="10286:[24545..24641).13" Target="10319:[105368..106708).7" />
<Link Source="10286:[24655..25349).7" Target="10286:[24545..24641).13" />
<Link Source="10286:[24655..25349).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[26910..26935).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[26952..26974).7" Target="10286:[23124..23146).7" />
<Link Source="10286:[26952..26974).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[27002..27022).7" Target="10286:[23281..23301).7" />
<Link Source="10286:[27002..27022).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[27048..27088).25" Target="10319:[105368..106708).7" />
<Link Source="10286:[27048..27088).26" Target="10286:[26910..26935).7" />
<Link Source="10286:[27048..27088).26" Target="10286:[27048..27088).25" />
<Link Source="10286:[27048..27088).26" Target="10319:[105368..106708).7" />
<Link Source="10286:[27208..27236).13" Target="10319:[105368..106708).7" />
<Link Source="10286:[27250..27722).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[27738..27845).19" Target="10319:[105368..106708).7" />
<Link Source="10286:[27738..27845).20" Target="10286:[27208..27236).13" />
<Link Source="10286:[27738..27845).20" Target="10286:[27738..27845).19" />
<Link Source="10286:[27738..27845).20" Target="10319:[105368..106708).7" />
<Link Source="10286:[27861..27873).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[26281..26812).7" Target="10286:[27861..27873).7" />
<Link Source="10286:[26281..26812).7" Target="10319:[105368..106708).7" />
<Link Source="10286:[26450..26769).7" Target="10286:[24545..24641).13" />
<Link Source="10286:[26450..26769).7" Target="10286:[26281..26812).7" />
<Link Source="10287:[1680..1716).7" Target="10319:[105368..106708).7" />
<Link Source="10287:[1680..1716).7" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).7" Target="10287:[1680..1716).7" />
<Link Source="10287:[1683..1690).7" Target="10287:[912..919).7" />
<Link Source="10287:[1683..1690).7" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).13" Target="10287:[1683..1690).7" />
<Link Source="10287:[1683..1716).13" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).13" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).13" Target="10287:[1683..1716).13" />
<Link Source="10319:[51935..52244).13" Target="10319:[13969..14029).1" />
<Link Source="10319:[42478..42805).22" Target="10319:[105368..106708).7" />
<Link Source="10319:[42821..42938).57" Target="10319:[105368..106708).7" />
<Link Source="10319:[42839..42937).8" Target="10319:[105368..106708).7" />
<Link Source="10319:[63849..63870).8" Target="10319:[42821..42938).57" />
<Link Source="10319:[63849..63870).8" Target="10319:[42839..42937).8" />
<Link Source="10319:[63885..63919).8" Target="10319:[42821..42938).57" />
<Link Source="10319:[63885..63919).8" Target="10319:[42839..42937).8" />
<Link Source="10319:[63934..63945).8" Target="10319:[42821..42938).57" />
<Link Source="10319:[63934..63945).8" Target="10319:[42839..42937).8" />
<Link Source="10319:[63960..63969).8" Target="10319:[42821..42938).57" />
<Link Source="10319:[63960..63969).8" Target="10319:[42839..42937).8" />
<Link Source="10319:[63984..64009).8" Target="10319:[42821..42938).57" />
<Link Source="10319:[63984..64009).8" Target="10319:[42839..42937).8" />
<Link Source="10319:[63768..64484).8" Target="10319:[105368..106708).7" />
<Link Source="10319:[63768..64484).8" Target="10319:[42839..42937).8" />
<Link Source="10319:[64035..64445).29" Target="10319:[42839..42937).8" />
<Link Source="10319:[64035..64445).30" Target="10319:[63885..63919).8" />
<Link Source="10319:[64035..64445).30" Target="10319:[64035..64445).29" />
<Link Source="10319:[64035..64445).30" Target="10319:[42839..42937).8" />
<Link Source="10319:[64461..64473).15" Target="10319:[42839..42937).8" />
<Link Source="10319:[42821..42938).63" Target="10319:[64461..64473).15" />
<Link Source="10319:[42821..42938).63" Target="10319:[105368..106708).7" />
<Link Source="10319:[42952..43079).22" Target="10319:[105368..106708).7" />
<Link Source="10319:[42952..43079).23" Target="10319:[42821..42938).63" />
<Link Source="10319:[42952..43079).23" Target="10319:[42952..43079).22" />
<Link Source="10319:[42952..43079).23" Target="10319:[105368..106708).7" />
<Link Source="10354:[11312..11328).8" Target="10319:[105368..106708).7" />
<Link Source="10354:[3684..3818).50" Target="10319:[105368..106708).7" />
<Link Source="10354:[3684..3818).50" Target="10354:[11312..11328).8" />
<Link Source="10354:[3720..3803).365" Target="10354:[3684..3818).50" />
<Link Source="10354:[3720..3803).365" Target="10319:[105368..106708).7" />
<Link Source="10354:[3720..3803).365" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).365" Target="10354:[11312..11328).8" />
<Link Source="10354:[3720..3803).366" Target="10354:[11312..11328).8" />
<Link Source="10354:[3720..3803).367" Target="10354:[3684..3818).50" />
<Link Source="10354:[3720..3803).367" Target="10319:[105368..106708).7" />
<Link Source="10354:[3720..3803).367" Target="10354:[3720..3803).366" />
<Link Source="10354:[3720..3803).367" Target="10354:[11312..11328).8" />
<Link Source="10354:[11299..11330).22" Target="10354:[3720..3803).365" />
<Link Source="10354:[11299..11330).22" Target="10319:[105368..106708).7" />
<Link Source="10319:[50330..50355).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[3905..3919).8" Target="10319:[105368..106708).7" />
<Link Source="10354:[3684..3818).51" Target="10319:[105368..106708).7" />
<Link Source="10354:[3684..3818).51" Target="10312:[3905..3919).8" />
<Link Source="10354:[3720..3803).373" Target="10354:[3684..3818).51" />
<Link Source="10354:[3720..3803).373" Target="10319:[105368..106708).7" />
<Link Source="10354:[3720..3803).373" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).373" Target="10312:[3905..3919).8" />
<Link Source="10354:[3720..3803).374" Target="10312:[3905..3919).8" />
<Link Source="10354:[3720..3803).375" Target="10354:[3684..3818).51" />
<Link Source="10354:[3720..3803).375" Target="10319:[105368..106708).7" />
<Link Source="10354:[3720..3803).375" Target="10354:[3720..3803).374" />
<Link Source="10354:[3720..3803).375" Target="10312:[3905..3919).8" />
<Link Source="10312:[3892..3921).22" Target="10354:[3720..3803).373" />
<Link Source="10312:[3892..3921).22" Target="10319:[105368..106708).7" />
<Link Source="10312:[3935..3968).29" Target="10319:[105368..106708).7" />
<Link Source="10312:[3948..3966).8" Target="10319:[105368..106708).7" />
<Link Source="10353:[4698..4724).15" Target="10312:[3935..3968).29" />
<Link Source="10353:[4698..4724).15" Target="10312:[3948..3966).8" />
<Link Source="10353:[4750..4847).29" Target="10353:[4698..4724).15" />
<Link Source="10353:[4750..4847).29" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).29" Target="10312:[3948..3966).8" />
<Link Source="10353:[4863..5000).57" Target="10353:[4698..4724).15" />
<Link Source="10353:[4863..5000).57" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).57" Target="10312:[3948..3966).8" />
<Link Source="10353:[4863..5000).58" Target="10312:[3948..3966).8" />
<Link Source="10353:[5079..5183).29" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).29" Target="10312:[3948..3966).8" />
<Link Source="10353:[5197..5323).43" Target="10353:[4698..4724).15" />
<Link Source="10353:[5197..5323).43" Target="10353:[5079..5183).29" />
<Link Source="10353:[5197..5323).43" Target="10312:[3948..3966).8" />
<Link Source="10353:[5485..5759).85" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).85" Target="10312:[3948..3966).8" />
<Link Source="10353:[5485..5759).86" Target="10353:[4698..4724).15" />
<Link Source="10353:[5485..5759).86" Target="10353:[5485..5759).85" />
<Link Source="10353:[5485..5759).86" Target="10312:[3948..3966).8" />
<Link Source="10353:[5485..5759).87" Target="10312:[3948..3966).8" />
<Link Source="10353:[5775..5979).57" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).57" Target="10312:[3948..3966).8" />
<Link Source="10353:[5775..5979).59" Target="10353:[4698..4724).15" />
<Link Source="10353:[5775..5979).59" Target="10353:[5775..5979).57" />
<Link Source="10353:[5775..5979).59" Target="10312:[3948..3966).8" />
<Link Source="10353:[5995..6029).43" Target="10353:[5775..5979).59" />
<Link Source="10353:[5995..6029).43" Target="10312:[3948..3966).8" />
<Link Source="10353:[6002..6028).15" Target="10312:[3948..3966).8" />
<Link Source="10353:[6343..6358).15" Target="10353:[5995..6029).43" />
<Link Source="10353:[6343..6358).15" Target="10353:[6002..6028).15" />
<Link Source="10353:[6384..6410).85" Target="10353:[6002..6028).15" />
<Link Source="10353:[6384..6410).86" Target="10353:[6343..6358).15" />
<Link Source="10353:[6384..6410).86" Target="10353:[6384..6410).85" />
<Link Source="10353:[6384..6410).86" Target="10353:[6002..6028).15" />
<Link Source="10312:[5188..5207).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[5209..5220).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[5222..5231).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[5233..5272).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[5274..5295).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[5297..5318).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[5320..5333).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[5124..5404).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[4685..4699).22" Target="10319:[105368..106708).7" />
<Link Source="10354:[3684..3818).52" Target="10319:[105368..106708).7" />
<Link Source="10354:[3684..3818).52" Target="10312:[4685..4699).22" />
<Link Source="10354:[3720..3803).381" Target="10354:[3684..3818).52" />
<Link Source="10354:[3720..3803).381" Target="10319:[105368..106708).7" />
<Link Source="10354:[3720..3803).381" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).381" Target="10312:[4685..4699).22" />
<Link Source="10354:[3720..3803).382" Target="10312:[4685..4699).22" />
<Link Source="10354:[3720..3803).383" Target="10354:[3684..3818).52" />
<Link Source="10354:[3720..3803).383" Target="10319:[105368..106708).7" />
<Link Source="10354:[3720..3803).383" Target="10354:[3720..3803).382" />
<Link Source="10354:[3720..3803).383" Target="10312:[4685..4699).22" />
<Link Source="10312:[4680..4787).43" Target="10354:[3720..3803).381" />
<Link Source="10312:[4680..4787).43" Target="10319:[105368..106708).7" />
<Link Source="10312:[4826..5058).106" Target="10319:[105368..106708).7" />
<Link Source="10312:[4826..5058).106" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).107" Target="10319:[105368..106708).7" />
<Link Source="10382:[1340..1359).8" Target="10319:[105368..106708).7" />
<Link Source="10382:[1374..1383).8" Target="10319:[105368..106708).7" />
<Link Source="10382:[1385..1424).8" Target="10319:[105368..106708).7" />
<Link Source="10382:[1426..1447).8" Target="10319:[105368..106708).7" />
<Link Source="10382:[1449..1470).8" Target="10319:[105368..106708).7" />
<Link Source="10382:[1472..1485).8" Target="10319:[105368..106708).7" />
<Link Source="10382:[1572..1586).8" Target="10319:[105368..106708).7" />
<Link Source="10354:[3684..3818).53" Target="10382:[1340..1359).8" />
<Link Source="10354:[3684..3818).53" Target="10382:[1572..1586).8" />
<Link Source="10354:[3720..3803).389" Target="10354:[3684..3818).53" />
<Link Source="10354:[3720..3803).389" Target="10319:[105368..106708).7" />
<Link Source="10354:[3720..3803).389" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).389" Target="10382:[1572..1586).8" />
<Link Source="10354:[3720..3803).390" Target="10382:[1572..1586).8" />
<Link Source="10354:[3720..3803).391" Target="10354:[3684..3818).53" />
<Link Source="10354:[3720..3803).391" Target="10319:[105368..106708).7" />
<Link Source="10354:[3720..3803).391" Target="10354:[3720..3803).390" />
<Link Source="10354:[3720..3803).391" Target="10382:[1572..1586).8" />
<Link Source="10382:[1559..1588).22" Target="10354:[3720..3803).389" />
<Link Source="10382:[1559..1588).22" Target="10319:[105368..106708).7" />
<Link Source="10382:[1619..1629).8" Target="10319:[105368..106708).7" />
<Link Source="10382:[913..1046).8" Target="10319:[105368..106708).7" />
<Link Source="10382:[913..1046).8" Target="10382:[1619..1629).8" />
<Link Source="10382:[949..1031).15" Target="EXTERNAL" />
<Link Source="10382:[949..1031).15" Target="10382:[1619..1629).8" />
<Link Source="10382:[1604..1691).36" Target="10382:[949..1031).15" />
<Link Source="10382:[1604..1691).36" Target="10319:[105368..106708).7" />
<Link Source="10382:[1604..1691).37" Target="10382:[1426..1447).8" />
<Link Source="10382:[1604..1691).37" Target="10382:[1604..1691).36" />
<Link Source="10382:[1604..1691).37" Target="10319:[105368..106708).7" />
<Link Source="10382:[1604..1691).38" Target="10319:[105368..106708).7" />
<Link Source="10346:[10861..10875).8" Target="10319:[105368..106708).7" />
<Link Source="10354:[3684..3818).55" Target="10319:[105368..106708).7" />
<Link Source="10354:[3684..3818).55" Target="10346:[10861..10875).8" />
<Link Source="10354:[3720..3803).405" Target="10354:[3684..3818).55" />
<Link Source="10354:[3720..3803).405" Target="10319:[105368..106708).7" />
<Link Source="10354:[3720..3803).405" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).405" Target="10346:[10861..10875).8" />
<Link Source="10354:[3720..3803).406" Target="10346:[10861..10875).8" />
<Link Source="10354:[3720..3803).407" Target="10354:[3684..3818).55" />
<Link Source="10354:[3720..3803).407" Target="10319:[105368..106708).7" />
<Link Source="10354:[3720..3803).407" Target="10354:[3720..3803).406" />
<Link Source="10354:[3720..3803).407" Target="10346:[10861..10875).8" />
<Link Source="10346:[10848..10877).22" Target="10354:[3720..3803).405" />
<Link Source="10346:[10848..10877).22" Target="10319:[105368..106708).7" />
<Link Source="10346:[10897..10914).8" Target="10319:[105368..106708).7" />
<Link Source="10346:[7666..7775).8" Target="10319:[105368..106708).7" />
<Link Source="10346:[7666..7775).8" Target="10346:[10897..10914).8" />
<Link Source="10346:[7672..7773).22" Target="10346:[7666..7775).8" />
<Link Source="10346:[7672..7773).22" Target="10319:[105368..106708).7" />
<Link Source="10346:[7672..7773).22" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).22" Target="10346:[10897..10914).8" />
<Link Source="10346:[10893..11127).15" Target="10346:[7672..7773).22" />
<Link Source="10346:[10893..11127).15" Target="10319:[105368..106708).7" />
<Link Source="10346:[3525..3638).52" Target="10319:[105368..106708).7" />
<Link Source="10312:[7729..7768).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[7615..8420).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[7903..7936).29" Target="10319:[105368..106708).7" />
<Link Source="10312:[7916..7934).8" Target="10319:[105368..106708).7" />
<Link Source="10353:[4698..4724).16" Target="10312:[7903..7936).29" />
<Link Source="10353:[4698..4724).16" Target="10312:[7916..7934).8" />
<Link Source="10353:[4750..4847).31" Target="10353:[4698..4724).16" />
<Link Source="10353:[4750..4847).31" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).31" Target="10312:[7916..7934).8" />
<Link Source="10353:[4863..5000).61" Target="10353:[4698..4724).16" />
<Link Source="10353:[4863..5000).61" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).61" Target="10312:[7916..7934).8" />
<Link Source="10353:[4863..5000).62" Target="10312:[7916..7934).8" />
<Link Source="10353:[5079..5183).31" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).31" Target="10312:[7916..7934).8" />
<Link Source="10353:[5197..5323).46" Target="10353:[4698..4724).16" />
<Link Source="10353:[5197..5323).46" Target="10353:[5079..5183).31" />
<Link Source="10353:[5197..5323).46" Target="10312:[7916..7934).8" />
<Link Source="10353:[5485..5759).91" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).91" Target="10312:[7916..7934).8" />
<Link Source="10353:[5485..5759).92" Target="10353:[4698..4724).16" />
<Link Source="10353:[5485..5759).92" Target="10353:[5485..5759).91" />
<Link Source="10353:[5485..5759).92" Target="10312:[7916..7934).8" />
<Link Source="10353:[5485..5759).93" Target="10312:[7916..7934).8" />
<Link Source="10353:[5775..5979).61" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).61" Target="10312:[7916..7934).8" />
<Link Source="10353:[5775..5979).63" Target="10353:[4698..4724).16" />
<Link Source="10353:[5775..5979).63" Target="10353:[5775..5979).61" />
<Link Source="10353:[5775..5979).63" Target="10312:[7916..7934).8" />
<Link Source="10353:[5995..6029).46" Target="10353:[5775..5979).63" />
<Link Source="10353:[5995..6029).46" Target="10312:[7916..7934).8" />
<Link Source="10353:[6002..6028).16" Target="10312:[7916..7934).8" />
<Link Source="10353:[6343..6358).16" Target="10353:[5995..6029).46" />
<Link Source="10353:[6343..6358).16" Target="10353:[6002..6028).16" />
<Link Source="10353:[6384..6410).91" Target="10353:[6002..6028).16" />
<Link Source="10353:[6384..6410).92" Target="10353:[6343..6358).16" />
<Link Source="10353:[6384..6410).92" Target="10353:[6384..6410).91" />
<Link Source="10353:[6384..6410).92" Target="10353:[6002..6028).16" />
<Link Source="10312:[7952..7977).29" Target="10319:[105368..106708).7" />
<Link Source="10312:[61608..61629).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[63566..63612).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[80978..80991).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[80993..81002).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[81004..81017).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[81019..81040).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[81042..81069).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[81095..84034).8" Target="10312:[80978..80991).8" />
<Link Source="10312:[81095..84034).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[81196..82523).50" Target="10312:[81095..84034).8" />
<Link Source="10312:[81196..82523).51" Target="10312:[80993..81002).8" />
<Link Source="10312:[81196..82523).51" Target="10312:[81196..82523).50" />
<Link Source="10312:[81196..82523).51" Target="10312:[81095..84034).8" />
<Link Source="10312:[81196..82523).52" Target="10312:[81019..81040).8" />
<Link Source="10312:[81196..82523).52" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).52" Target="10312:[81095..84034).8" />
<Link Source="10312:[81196..82523).55" Target="10312:[81196..82523).51" />
<Link Source="10312:[81196..82523).55" Target="10312:[81196..82523).52" />
<Link Source="10312:[81196..82523).55" Target="10312:[81095..84034).8" />
<Link Source="10312:[81319..81371).8" Target="10312:[80978..80991).8" />
<Link Source="10312:[81319..81371).8" Target="10312:[81196..82523).55" />
<Link Source="10312:[81495..81570).36" Target="10312:[81319..81371).8" />
<Link Source="10312:[81495..81570).36" Target="10319:[105368..106708).7" />
<Link Source="10312:[81495..81570).36" Target="10312:[81196..82523).55" />
<Link Source="10312:[81495..81570).37" Target="10312:[81319..81371).8" />
<Link Source="10312:[81495..81570).37" Target="10312:[81196..82523).55" />
<Link Source="10312:[81596..82500).43" Target="10312:[81319..81371).8" />
<Link Source="10312:[81596..82500).43" Target="10319:[105368..106708).7" />
<Link Source="10312:[81596..82500).43" Target="10312:[80993..81002).8" />
<Link Source="10312:[81596..82500).43" Target="10312:[81196..82523).55" />
<Link Source="10312:[81596..82500).44" Target="10312:[81019..81040).8" />
<Link Source="10312:[81596..82500).44" Target="10312:[81196..82523).55" />
<Link Source="10312:[81628..81659).8" Target="10312:[81196..82523).55" />
<Link Source="10353:[7504..7530).16" Target="10312:[81596..82500).44" />
<Link Source="10353:[7504..7530).16" Target="10312:[81628..81659).8" />
<Link Source="10312:[81596..82500).47" Target="10312:[81596..82500).43" />
<Link Source="10312:[81596..82500).47" Target="10353:[7504..7530).16" />
<Link Source="10312:[81596..82500).47" Target="10312:[81196..82523).55" />
<Link Source="10312:[84050..84066).15" Target="10319:[105368..106708).7" />
<Link Source="10312:[66291..66342).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[75301..75322).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[75301..75322).8" Target="10312:[66291..66342).8" />
<Link Source="10312:[75324..75352).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[75324..75352).8" Target="10312:[66291..66342).8" />
<Link Source="10312:[75735..75866).36" Target="10312:[75301..75322).8" />
<Link Source="10312:[75735..75866).36" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).36" Target="10312:[66291..66342).8" />
<Link Source="10312:[75735..75866).37" Target="10312:[66291..66342).8" />
<Link Source="10312:[75742..75804).8" Target="10312:[75735..75866).36" />
<Link Source="10312:[75742..75804).8" Target="10312:[66291..66342).8" />
<Link Source="10312:[75735..75866).39" Target="10312:[75324..75352).8" />
<Link Source="10312:[75735..75866).39" Target="10312:[75742..75804).8" />
<Link Source="10312:[77543..77571).8" Target="10312:[75735..75866).39" />
<Link Source="10312:[77543..77571).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[77654..77700).8" Target="10312:[63566..63612).8" />
<Link Source="10312:[77654..77700).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[77501..78044).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[77726..77892).29" Target="10312:[77501..78044).8" />
<Link Source="10312:[77726..77892).29" Target="10319:[105368..106708).7" />
<Link Source="10312:[77726..77892).30" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).30" Target="10319:[105368..106708).7" />
<Link Source="10312:[77730..77782).8" Target="10319:[105368..106708).7" />
<Link Source="10298:[471..492).69" Target="10312:[77726..77892).29" />
<Link Source="10298:[471..492).69" Target="10312:[77730..77782).8" />
<Link Source="10298:[494..511).69" Target="10312:[77726..77892).30" />
<Link Source="10298:[494..511).69" Target="10312:[77730..77782).8" />
<Link Source="10312:[78402..78430).8" Target="10312:[77543..77571).8" />
<Link Source="10312:[78402..78430).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[78513..78552).8" Target="10312:[77654..77700).8" />
<Link Source="10312:[78513..78552).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[78346..78783).8" Target="10312:[77501..78044).8" />
<Link Source="10312:[78346..78783).8" Target="10319:[105368..106708).7" />
<Link Source="10376:[1085..1113).8" Target="10312:[78402..78430).8" />
<Link Source="10376:[1085..1113).8" Target="10319:[105368..106708).7" />
<Link Source="10376:[1196..1235).8" Target="10312:[78513..78552).8" />
<Link Source="10376:[1196..1235).8" Target="10319:[105368..106708).7" />
<Link Source="10376:[1028..1425).8" Target="10312:[78346..78783).8" />
<Link Source="10376:[1028..1425).8" Target="10319:[105368..106708).7" />
<Link Source="10286:[30098..30120).8" Target="10376:[1028..1425).8" />
<Link Source="10286:[30098..30120).8" Target="10319:[105368..106708).7" />
<Link Source="10286:[30135..30160).8" Target="10376:[1085..1113).8" />
<Link Source="10286:[30135..30160).8" Target="10319:[105368..106708).7" />
<Link Source="10286:[30283..30330).8" Target="10376:[1196..1235).8" />
<Link Source="10286:[30283..30330).8" Target="10319:[105368..106708).7" />
<Link Source="10286:[30012..30691).8" Target="10376:[1028..1425).8" />
<Link Source="10286:[30012..30691).8" Target="10319:[105368..106708).7" />
<Link Source="10286:[30356..30522).29" Target="10286:[30012..30691).8" />
<Link Source="10286:[30356..30522).29" Target="10319:[105368..106708).7" />
<Link Source="10286:[30356..30522).30" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).30" Target="10319:[105368..106708).7" />
<Link Source="10286:[30360..30412).8" Target="10319:[105368..106708).7" />
<Link Source="10298:[471..492).70" Target="10286:[30356..30522).29" />
<Link Source="10298:[471..492).70" Target="10286:[30360..30412).8" />
<Link Source="10298:[494..511).70" Target="10286:[30356..30522).30" />
<Link Source="10298:[494..511).70" Target="10286:[30360..30412).8" />
<Link Source="10060:[2136..2158).8" Target="10286:[30098..30120).8" />
<Link Source="10060:[2136..2158).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[2173..2198).8" Target="10286:[30135..30160).8" />
<Link Source="10060:[2173..2198).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[2320..2366).8" Target="10286:[30283..30330).8" />
<Link Source="10060:[2320..2366).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[5621..5634).8" Target="10060:[2136..2158).8" />
<Link Source="10060:[5621..5634).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[5691..5716).8" Target="10060:[2173..2198).8" />
<Link Source="10060:[5691..5716).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[5731..5762).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[5777..5806).8" Target="10060:[2136..2158).8" />
<Link Source="10060:[5777..5806).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[5882..5928).8" Target="10060:[2320..2366).8" />
<Link Source="10060:[5882..5928).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[5954..5991).29" Target="10319:[105368..106708).7" />
<Link Source="10060:[6005..6042).29" Target="10319:[105368..106708).7" />
<Link Source="10060:[6005..6042).30" Target="10060:[5621..5634).8" />
<Link Source="10060:[6005..6042).30" Target="10060:[6005..6042).29" />
<Link Source="10060:[6005..6042).30" Target="10319:[105368..106708).7" />
<Link Source="10060:[6056..6090).15" Target="10060:[5621..5634).8" />
<Link Source="10060:[6056..6090).15" Target="10319:[105368..106708).7" />
<Link Source="10060:[6104..6172).22" Target="10060:[5621..5634).8" />
<Link Source="10060:[6104..6172).22" Target="10319:[105368..106708).7" />
<Link Source="10060:[6188..6219).15" Target="10319:[105368..106708).7" />
<Link Source="10060:[10202..10215).8" Target="10060:[5621..5634).8" />
<Link Source="10060:[10202..10215).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[10265..10311).8" Target="10060:[5882..5928).8" />
<Link Source="10060:[10265..10311).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[10337..10405).22" Target="10060:[10202..10215).8" />
<Link Source="10060:[10337..10405).22" Target="10319:[105368..106708).7" />
<Link Source="10060:[10419..10454).29" Target="10319:[105368..106708).7" />
<Link Source="10060:[10470..10516).8" Target="10060:[10202..10215).8" />
<Link Source="10060:[10470..10516).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[10532..10544).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[10558..11295).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[11990..12013).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[12078..12091).8" Target="10060:[10202..10215).8" />
<Link Source="10060:[12078..12091).8" Target="10319:[105368..106708).7" />
<Link Source="10060:[12117..12185).22" Target="10060:[12078..12091).8" />
<Link Source="10060:[12117..12185).22" Target="10319:[105368..106708).7" />
<Link Source="10060:[12199..12238).29" Target="10319:[105368..106708).7" />
<Link Source="10060:[12199..12238).30" Target="10060:[11990..12013).8" />
<Link Source="10060:[12199..12238).30" Target="10060:[12199..12238).29" />
<Link Source="10060:[12199..12238).30" Target="10319:[105368..106708).7" />
<Link Source="10346:[11710..11746).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[2155..2260).8" Target="10319:[105368..106708).7" />
<Link Source="10286:[2155..2260).8" Target="10346:[11710..11746).8" />
<Link Source="10286:[2191..2245).29" Target="10286:[2155..2260).8" />
<Link Source="10286:[2191..2245).29" Target="10312:[63566..63612).8" />
<Link Source="10286:[2191..2245).29" Target="10346:[11710..11746).8" />
<Link Source="10286:[2191..2245).30" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).30" Target="10346:[11710..11746).8" />
<Link Source="10286:[2198..2244).8" Target="10346:[11710..11746).8" />
<Link Source="10298:[471..492).72" Target="10286:[2191..2245).29" />
<Link Source="10298:[471..492).72" Target="10286:[2198..2244).8" />
<Link Source="10298:[494..511).72" Target="10286:[2191..2245).30" />
<Link Source="10298:[494..511).72" Target="10286:[2198..2244).8" />
<Link Source="10345:[28225..28251).8" Target="10298:[471..492).72" />
<Link Source="10345:[28225..28251).8" Target="10312:[63566..63612).8" />
<Link Source="10345:[28927..28940).15" Target="10312:[63566..63612).8" />
<Link Source="10346:[12205..12212).8" Target="10312:[63566..63612).8" />
<Link Source="10354:[3720..3803).413" Target="10354:[3684..3818).52" />
<Link Source="10354:[3720..3803).413" Target="10312:[63566..63612).8" />
<Link Source="10354:[3720..3803).413" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).413" Target="10312:[4685..4699).22" />
<Link Source="10312:[4680..4787).47" Target="10354:[3720..3803).413" />
<Link Source="10312:[4680..4787).47" Target="10319:[105368..106708).7" />
<Link Source="10312:[4749..4764).8" Target="10319:[105368..106708).7" />
<Link Source="10312:[4749..4764).8" Target="10312:[4680..4787).47" />
<Link Source="10312:[5087..5101).8" Target="10312:[4749..4764).8" />
<Link Source="10312:[5087..5101).8" Target="10319:[105368..106708).7" />
<Link Source="10319:[43799..44676).43" Target="10319:[105368..106708).7" />
<Link Source="10319:[43853..43873).8" Target="10319:[105368..106708).7" />
<Link Source="10319:[41088..41107).8" Target="10319:[43799..44676).43" />
<Link Source="10319:[41088..41107).8" Target="10319:[43853..43873).8" />
<Link Source="10319:[41138..41158).8" Target="10319:[43853..43873).8" />
<Link Source="10354:[4919..5009).55" Target="10319:[41088..41107).8" />
<Link Source="10354:[4919..5009).55" Target="10319:[41138..41158).8" />
<Link Source="10354:[4094..4107).71" Target="10354:[4919..5009).55" />
<Link Source="10354:[4094..4107).71" Target="10312:[63566..63612).8" />
<Link Source="10354:[4094..4107).71" Target="10319:[41138..41158).8" />
<Link Source="10319:[41133..41220).15" Target="10354:[4094..4107).71" />
<Link Source="10319:[41133..41220).15" Target="10319:[43853..43873).8" />
<Link Source="10319:[41254..41268).8" Target="10319:[43853..43873).8" />
<Link Source="10354:[4525..4595).15" Target="10319:[41088..41107).8" />
<Link Source="10354:[4525..4595).15" Target="10319:[41254..41268).8" />
<Link Source="10354:[4561..4580).15" Target="10354:[4525..4595).15" />
<Link Source="10354:[4561..4580).15" Target="10312:[63566..63612).8" />
<Link Source="10354:[4561..4580).15" Target="10319:[41254..41268).8" />
<Link Source="10319:[41236..41680).29" Target="10354:[4561..4580).15" />
<Link Source="10319:[41236..41680).29" Target="10319:[43853..43873).8" />
<Link Source="10319:[41302..41665).8" Target="10319:[41236..41680).29" />
<Link Source="10319:[41302..41665).8" Target="10312:[63566..63612).8" />
<Link Source="10319:[41634..41646).15" Target="10319:[41302..41665).8" />
<Link Source="10319:[44751..44765).8" Target="10319:[105368..106708).7" />
<Link Source="10319:[84374..84391).8" Target="10319:[44751..44765).8" />
<Link Source="10319:[84374..84391).8" Target="10319:[105368..106708).7" />
<Link Source="10319:[84406..84447).8" Target="10319:[44751..44765).8" />
<Link Source="10319:[84406..84447).8" Target="10319:[105368..106708).7" />
<Link Source="10319:[84462..84508).8" Target="10319:[44751..44765).8" />
<Link Source="10319:[84462..84508).8" Target="10319:[105368..106708).7" />
<Link Source="10319:[84124..109887).8" Target="10319:[105368..106708).7" />
<Link Source="10319:[85320..85348).29" Target="10319:[105368..106708).7" />
<Link Source="10319:[85366..85400).29" Target="10319:[105368..106708).7" />
<Link Source="10319:[85467..85484).15" Target="10319:[105368..106708).7" />
<Link Source="10319:[104874..105336).22" Target="10312:[63566..63612).8" />
<Link Source="10319:[104874..105336).22" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).23" Target="10319:[104874..105336).22" />
<Link Source="10319:[104874..105336).23" Target="10319:[84124..109887).8" />
<Link Source="10319:[104874..105336).23" Target="10312:[63566..63612).8" />
<Link Source="10319:[76360..76385).6" Target="10312:[63566..63612).8" />
<Link Source="10319:[76387..76402).6" Target="10312:[63566..63612).8" />
<Link Source="10319:[76494..76582).21" Target="10312:[63566..63612).8" />
<Link Source="10319:[84691..84861).15" Target="10312:[63566..63612).8" />
<Link Source="10319:[84691..84861).15" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).15" Target="10319:[105368..106708).7" />
<Link Source="10319:[84764..84846).43" Target="10319:[105368..106708).7" />
<Link Source="10319:[84764..84846).43" Target="10319:[84691..84861).15" />
<Link Source="10319:[84764..84846).44" Target="10319:[84691..84861).15" />
<Link Source="10319:[84764..84846).46" Target="10312:[63566..63612).8" />
<Link Source="10319:[84764..84846).46" Target="10319:[84691..84861).15" />
<Link Source="10319:[84764..84845).8" Target="10319:[84691..84861).15" />
<Link Source="10306:[358886..358901).8" Target="10319:[84764..84846).43" />
<Link Source="10306:[358886..358901).8" Target="10319:[84764..84845).8" />
<Link Source="10306:[358903..358930).8" Target="10319:[84764..84846).44" />
<Link Source="10306:[358903..358930).8" Target="10319:[84764..84845).8" />
<Link Source="10306:[358932..358945).8" Target="10319:[84764..84846).46" />
<Link Source="10306:[358932..358945).8" Target="10319:[84764..84845).8" />
<Link Source="10306:[358947..358972).8" Target="10319:[84764..84846).43" />
<Link Source="10306:[358947..358972).8" Target="10319:[84764..84845).8" />
<Link Source="10306:[358838..360009).8" Target="10319:[84124..109887).8" />
<Link Source="10306:[358838..360009).8" Target="10319:[84764..84845).8" />
<Link Source="10306:[358998..359998).43" Target="10306:[358932..358945).8" />
<Link Source="10306:[358998..359998).43" Target="10312:[63566..63612).8" />
<Link Source="10306:[358998..359998).43" Target="10319:[84764..84845).8" />
<Link Source="10306:[358998..359998).44" Target="10319:[84764..84845).8" />
<Link Source="10319:[44948..45377).15" Target="10312:[63566..63612).8" />
<Link Source="10319:[44948..45377).15" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).15" Target="10319:[105368..106708).7" />
<Link Source="10354:[11428..11441).8" Target="10319:[105368..106708).7" />
<Link Source="10319:[45408..45422).8" Target="10319:[105368..106708).7" />
<Link Source="10287:[2377..2471).15" Target="10312:[63566..63612).8" />
<Link Source="10287:[2377..2471).15" Target="10319:[105368..106708).7" />
<Link Source="10287:[791..833).15" Target="10312:[63566..63612).8" />
<Link Source="10287:[912..927).8" Target="10312:[63566..63612).8" />
<Link Source="10287:[912..919).8" Target="10287:[912..927).8" />
<Link Source="10287:[912..919).8" Target="10312:[63566..63612).8" />
<Link Source="10287:[945..972).8" Target="10312:[63566..63612).8" />
<Link Source="10287:[945..963).8" Target="10287:[945..972).8" />
<Link Source="10287:[945..963).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[21546..21561).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[21563..21583).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[22086..22108).8" Target="10286:[21546..21561).8" />
<Link Source="10286:[22086..22108).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[22110..22130).8" Target="10286:[21563..21583).8" />
<Link Source="10286:[22110..22130).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[15616..15690).36" Target="10312:[63566..63612).8" />
<Link Source="10286:[15616..15690).37" Target="10312:[63566..63612).8" />
<Link Source="10286:[15616..15690).37" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[23124..23146).8" Target="10286:[22086..22108).8" />
<Link Source="10286:[23124..23146).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[23161..23181).8" Target="10286:[22110..22130).8" />
<Link Source="10286:[23161..23181).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[23281..23301).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[23380..23684).50" Target="10312:[63566..63612).8" />
<Link Source="10286:[23380..23684).50" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).15" Target="10312:[63566..63612).8" />
<Link Source="10286:[23893..24026).15" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).15" Target="10286:[23161..23181).8" />
<Link Source="10286:[24545..24641).15" Target="10312:[63566..63612).8" />
<Link Source="10286:[24655..25349).8" Target="10286:[24545..24641).15" />
<Link Source="10286:[24655..25349).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[26910..26935).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[26952..26974).8" Target="10286:[23124..23146).8" />
<Link Source="10286:[26952..26974).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[27002..27022).8" Target="10286:[23281..23301).8" />
<Link Source="10286:[27002..27022).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[27048..27088).29" Target="10312:[63566..63612).8" />
<Link Source="10286:[27048..27088).30" Target="10286:[26910..26935).8" />
<Link Source="10286:[27048..27088).30" Target="10286:[27048..27088).29" />
<Link Source="10286:[27048..27088).30" Target="10312:[63566..63612).8" />
<Link Source="10286:[27208..27236).15" Target="10312:[63566..63612).8" />
<Link Source="10286:[27250..27722).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[27738..27845).22" Target="10312:[63566..63612).8" />
<Link Source="10286:[27738..27845).23" Target="10286:[27208..27236).15" />
<Link Source="10286:[27738..27845).23" Target="10286:[27738..27845).22" />
<Link Source="10286:[27738..27845).23" Target="10312:[63566..63612).8" />
<Link Source="10286:[27861..27873).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[26281..26812).8" Target="10286:[27861..27873).8" />
<Link Source="10286:[26281..26812).8" Target="10312:[63566..63612).8" />
<Link Source="10286:[26450..26769).8" Target="10286:[24545..24641).15" />
<Link Source="10286:[26450..26769).8" Target="10286:[26281..26812).8" />
<Link Source="10287:[1680..1716).8" Target="10312:[63566..63612).8" />
<Link Source="10287:[1680..1716).8" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).8" Target="10287:[1680..1716).8" />
<Link Source="10287:[1683..1690).8" Target="10287:[912..919).8" />
<Link Source="10287:[1683..1690).8" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).15" Target="10287:[1683..1690).8" />
<Link Source="10287:[1683..1716).15" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).15" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).15" Target="10287:[1683..1716).15" />
<Link Source="10319:[51935..52244).15" Target="10319:[13969..14029).1" />
<Link Source="10076:[5223..5250).22" Target="10312:[63566..63612).8" />
<Link Source="10076:[5223..5250).22" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).22" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).22" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).22" Target="10312:[63566..63612).8" />
<Link Source="10076:[5277..5448).22" Target="10076:[4989..5047).1" />
<Link Source="10077:[44231..44317).49" Target="10312:[63566..63612).8" />
<Link Source="10077:[44231..44317).49" Target="10077:[32567..32606).1" />
<Link Source="10286:[1688..1781).31" Target="10312:[63566..63612).8" />
<Link Source="10286:[1688..1781).31" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).73" Target="10286:[1688..1781).31" />
<Link Source="10298:[471..492).73" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).31" Target="10312:[63566..63612).8" />
<Link Source="10286:[1820..1963).31" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).74" Target="10286:[1820..1963).31" />
<Link Source="10298:[471..492).74" Target="10286:[1840..1888).1" />
<Link Source="10319:[42478..42805).25" Target="10312:[63566..63612).8" />
<Link Source="10319:[42821..42938).65" Target="10312:[63566..63612).8" />
<Link Source="10319:[42839..42937).9" Target="10312:[63566..63612).8" />
<Link Source="10319:[63849..63870).9" Target="10319:[42821..42938).65" />
<Link Source="10319:[63849..63870).9" Target="10319:[42839..42937).9" />
<Link Source="10319:[63885..63919).9" Target="10319:[42821..42938).65" />
<Link Source="10319:[63885..63919).9" Target="10319:[42839..42937).9" />
<Link Source="10319:[63934..63945).9" Target="10319:[42821..42938).65" />
<Link Source="10319:[63934..63945).9" Target="10319:[42839..42937).9" />
<Link Source="10319:[63960..63969).9" Target="10319:[42821..42938).65" />
<Link Source="10319:[63960..63969).9" Target="10319:[42839..42937).9" />
<Link Source="10319:[63984..64009).9" Target="10319:[42821..42938).65" />
<Link Source="10319:[63984..64009).9" Target="10319:[42839..42937).9" />
<Link Source="10319:[63768..64484).9" Target="10312:[63566..63612).8" />
<Link Source="10319:[63768..64484).9" Target="10319:[42839..42937).9" />
<Link Source="10319:[64035..64445).33" Target="10319:[42839..42937).9" />
<Link Source="10319:[64035..64445).34" Target="10319:[63885..63919).9" />
<Link Source="10319:[64035..64445).34" Target="10319:[64035..64445).33" />
<Link Source="10319:[64035..64445).34" Target="10319:[42839..42937).9" />
<Link Source="10319:[64461..64473).17" Target="10319:[42839..42937).9" />
<Link Source="10319:[42821..42938).71" Target="10319:[64461..64473).17" />
<Link Source="10319:[42821..42938).71" Target="10312:[63566..63612).8" />
<Link Source="10319:[42952..43079).25" Target="10312:[63566..63612).8" />
<Link Source="10319:[42952..43079).26" Target="10319:[42821..42938).71" />
<Link Source="10319:[42952..43079).26" Target="10319:[42952..43079).25" />
<Link Source="10319:[42952..43079).26" Target="10312:[63566..63612).8" />
<Link Source="10354:[11312..11328).9" Target="10312:[63566..63612).8" />
<Link Source="10354:[3684..3818).57" Target="10312:[63566..63612).8" />
<Link Source="10354:[3684..3818).57" Target="10354:[11312..11328).9" />
<Link Source="10354:[3720..3803).417" Target="10354:[3684..3818).57" />
<Link Source="10354:[3720..3803).417" Target="10312:[63566..63612).8" />
<Link Source="10354:[3720..3803).417" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).417" Target="10354:[11312..11328).9" />
<Link Source="10354:[3720..3803).418" Target="10354:[11312..11328).9" />
<Link Source="10354:[3720..3803).419" Target="10354:[3684..3818).57" />
<Link Source="10354:[3720..3803).419" Target="10312:[63566..63612).8" />
<Link Source="10354:[3720..3803).419" Target="10354:[3720..3803).418" />
<Link Source="10354:[3720..3803).419" Target="10354:[11312..11328).9" />
<Link Source="10354:[11299..11330).25" Target="10354:[3720..3803).417" />
<Link Source="10354:[11299..11330).25" Target="10312:[63566..63612).8" />
<Link Source="10319:[50330..50355).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[3905..3919).9" Target="10312:[63566..63612).8" />
<Link Source="10354:[3684..3818).58" Target="10312:[63566..63612).8" />
<Link Source="10354:[3684..3818).58" Target="10312:[3905..3919).9" />
<Link Source="10354:[3720..3803).425" Target="10354:[3684..3818).58" />
<Link Source="10354:[3720..3803).425" Target="10312:[63566..63612).8" />
<Link Source="10354:[3720..3803).425" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).425" Target="10312:[3905..3919).9" />
<Link Source="10354:[3720..3803).426" Target="10312:[3905..3919).9" />
<Link Source="10354:[3720..3803).427" Target="10354:[3684..3818).58" />
<Link Source="10354:[3720..3803).427" Target="10312:[63566..63612).8" />
<Link Source="10354:[3720..3803).427" Target="10354:[3720..3803).426" />
<Link Source="10354:[3720..3803).427" Target="10312:[3905..3919).9" />
<Link Source="10312:[3892..3921).25" Target="10354:[3720..3803).425" />
<Link Source="10312:[3892..3921).25" Target="10312:[63566..63612).8" />
<Link Source="10312:[3935..3968).33" Target="10312:[63566..63612).8" />
<Link Source="10312:[3948..3966).9" Target="10312:[63566..63612).8" />
<Link Source="10353:[4698..4724).17" Target="10312:[3935..3968).33" />
<Link Source="10353:[4698..4724).17" Target="10312:[3948..3966).9" />
<Link Source="10353:[4750..4847).33" Target="10353:[4698..4724).17" />
<Link Source="10353:[4750..4847).33" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).33" Target="10312:[3948..3966).9" />
<Link Source="10353:[4863..5000).65" Target="10353:[4698..4724).17" />
<Link Source="10353:[4863..5000).65" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).65" Target="10312:[3948..3966).9" />
<Link Source="10353:[4863..5000).66" Target="10312:[3948..3966).9" />
<Link Source="10353:[5079..5183).33" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).33" Target="10312:[3948..3966).9" />
<Link Source="10353:[5197..5323).49" Target="10353:[4698..4724).17" />
<Link Source="10353:[5197..5323).49" Target="10353:[5079..5183).33" />
<Link Source="10353:[5197..5323).49" Target="10312:[3948..3966).9" />
<Link Source="10353:[5485..5759).97" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).97" Target="10312:[3948..3966).9" />
<Link Source="10353:[5485..5759).98" Target="10353:[4698..4724).17" />
<Link Source="10353:[5485..5759).98" Target="10353:[5485..5759).97" />
<Link Source="10353:[5485..5759).98" Target="10312:[3948..3966).9" />
<Link Source="10353:[5485..5759).99" Target="10312:[3948..3966).9" />
<Link Source="10353:[5775..5979).65" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).65" Target="10312:[3948..3966).9" />
<Link Source="10353:[5775..5979).67" Target="10353:[4698..4724).17" />
<Link Source="10353:[5775..5979).67" Target="10353:[5775..5979).65" />
<Link Source="10353:[5775..5979).67" Target="10312:[3948..3966).9" />
<Link Source="10353:[5995..6029).49" Target="10353:[5775..5979).67" />
<Link Source="10353:[5995..6029).49" Target="10312:[3948..3966).9" />
<Link Source="10353:[6002..6028).17" Target="10312:[3948..3966).9" />
<Link Source="10353:[6343..6358).17" Target="10353:[5995..6029).49" />
<Link Source="10353:[6343..6358).17" Target="10353:[6002..6028).17" />
<Link Source="10353:[6384..6410).97" Target="10353:[6002..6028).17" />
<Link Source="10353:[6384..6410).98" Target="10353:[6343..6358).17" />
<Link Source="10353:[6384..6410).98" Target="10353:[6384..6410).97" />
<Link Source="10353:[6384..6410).98" Target="10353:[6002..6028).17" />
<Link Source="10312:[5188..5207).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[5209..5220).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[5222..5231).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[5233..5272).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[5274..5295).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[5297..5318).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[5320..5333).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[5124..5404).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[4685..4699).25" Target="10312:[63566..63612).8" />
<Link Source="10354:[3684..3818).59" Target="10312:[63566..63612).8" />
<Link Source="10354:[3684..3818).59" Target="10312:[4685..4699).25" />
<Link Source="10354:[3720..3803).433" Target="10354:[3684..3818).59" />
<Link Source="10354:[3720..3803).433" Target="10312:[63566..63612).8" />
<Link Source="10354:[3720..3803).433" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).433" Target="10312:[4685..4699).25" />
<Link Source="10354:[3720..3803).434" Target="10312:[4685..4699).25" />
<Link Source="10354:[3720..3803).435" Target="10354:[3684..3818).59" />
<Link Source="10354:[3720..3803).435" Target="10312:[63566..63612).8" />
<Link Source="10354:[3720..3803).435" Target="10354:[3720..3803).434" />
<Link Source="10354:[3720..3803).435" Target="10312:[4685..4699).25" />
<Link Source="10312:[4680..4787).49" Target="10354:[3720..3803).433" />
<Link Source="10312:[4680..4787).49" Target="10312:[63566..63612).8" />
<Link Source="10312:[4826..5058).121" Target="10312:[63566..63612).8" />
<Link Source="10312:[4826..5058).121" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).122" Target="10312:[63566..63612).8" />
<Link Source="10382:[1340..1359).9" Target="10312:[63566..63612).8" />
<Link Source="10382:[1374..1383).9" Target="10312:[63566..63612).8" />
<Link Source="10382:[1385..1424).9" Target="10312:[63566..63612).8" />
<Link Source="10382:[1426..1447).9" Target="10312:[63566..63612).8" />
<Link Source="10382:[1449..1470).9" Target="10312:[63566..63612).8" />
<Link Source="10382:[1472..1485).9" Target="10312:[63566..63612).8" />
<Link Source="10382:[1572..1586).9" Target="10312:[63566..63612).8" />
<Link Source="10354:[3684..3818).60" Target="10382:[1340..1359).9" />
<Link Source="10354:[3684..3818).60" Target="10382:[1572..1586).9" />
<Link Source="10354:[3720..3803).441" Target="10354:[3684..3818).60" />
<Link Source="10354:[3720..3803).441" Target="10312:[63566..63612).8" />
<Link Source="10354:[3720..3803).441" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).441" Target="10382:[1572..1586).9" />
<Link Source="10354:[3720..3803).442" Target="10382:[1572..1586).9" />
<Link Source="10354:[3720..3803).443" Target="10354:[3684..3818).60" />
<Link Source="10354:[3720..3803).443" Target="10312:[63566..63612).8" />
<Link Source="10354:[3720..3803).443" Target="10354:[3720..3803).442" />
<Link Source="10354:[3720..3803).443" Target="10382:[1572..1586).9" />
<Link Source="10382:[1559..1588).25" Target="10354:[3720..3803).441" />
<Link Source="10382:[1559..1588).25" Target="10312:[63566..63612).8" />
<Link Source="10382:[1619..1629).9" Target="10312:[63566..63612).8" />
<Link Source="10382:[913..1046).9" Target="10312:[63566..63612).8" />
<Link Source="10382:[913..1046).9" Target="10382:[1619..1629).9" />
<Link Source="10382:[949..1031).17" Target="EXTERNAL" />
<Link Source="10382:[949..1031).17" Target="10382:[1619..1629).9" />
<Link Source="10382:[1604..1691).41" Target="10382:[949..1031).17" />
<Link Source="10382:[1604..1691).41" Target="10312:[63566..63612).8" />
<Link Source="10382:[1604..1691).42" Target="10382:[1426..1447).9" />
<Link Source="10382:[1604..1691).42" Target="10382:[1604..1691).41" />
<Link Source="10382:[1604..1691).42" Target="10312:[63566..63612).8" />
<Link Source="10382:[1604..1691).43" Target="10312:[63566..63612).8" />
<Link Source="10346:[10861..10875).9" Target="10312:[63566..63612).8" />
<Link Source="10354:[3684..3818).62" Target="10312:[63566..63612).8" />
<Link Source="10354:[3684..3818).62" Target="10346:[10861..10875).9" />
<Link Source="10354:[3720..3803).457" Target="10354:[3684..3818).62" />
<Link Source="10354:[3720..3803).457" Target="10312:[63566..63612).8" />
<Link Source="10354:[3720..3803).457" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).457" Target="10346:[10861..10875).9" />
<Link Source="10354:[3720..3803).458" Target="10346:[10861..10875).9" />
<Link Source="10354:[3720..3803).459" Target="10354:[3684..3818).62" />
<Link Source="10354:[3720..3803).459" Target="10312:[63566..63612).8" />
<Link Source="10354:[3720..3803).459" Target="10354:[3720..3803).458" />
<Link Source="10354:[3720..3803).459" Target="10346:[10861..10875).9" />
<Link Source="10346:[10848..10877).25" Target="10354:[3720..3803).457" />
<Link Source="10346:[10848..10877).25" Target="10312:[63566..63612).8" />
<Link Source="10346:[10897..10914).9" Target="10312:[63566..63612).8" />
<Link Source="10346:[7666..7775).9" Target="10312:[63566..63612).8" />
<Link Source="10346:[7666..7775).9" Target="10346:[10897..10914).9" />
<Link Source="10346:[7672..7773).25" Target="10346:[7666..7775).9" />
<Link Source="10346:[7672..7773).25" Target="10312:[63566..63612).8" />
<Link Source="10346:[7672..7773).25" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).25" Target="10346:[10897..10914).9" />
<Link Source="10346:[10893..11127).17" Target="10346:[7672..7773).25" />
<Link Source="10346:[10893..11127).17" Target="10312:[63566..63612).8" />
<Link Source="10346:[3525..3638).59" Target="10312:[63566..63612).8" />
<Link Source="10312:[7729..7768).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[7615..8420).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[7903..7936).33" Target="10312:[63566..63612).8" />
<Link Source="10312:[7916..7934).9" Target="10312:[63566..63612).8" />
<Link Source="10353:[4698..4724).18" Target="10312:[7903..7936).33" />
<Link Source="10353:[4698..4724).18" Target="10312:[7916..7934).9" />
<Link Source="10353:[4750..4847).35" Target="10353:[4698..4724).18" />
<Link Source="10353:[4750..4847).35" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).35" Target="10312:[7916..7934).9" />
<Link Source="10353:[4863..5000).69" Target="10353:[4698..4724).18" />
<Link Source="10353:[4863..5000).69" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).69" Target="10312:[7916..7934).9" />
<Link Source="10353:[4863..5000).70" Target="10312:[7916..7934).9" />
<Link Source="10353:[5079..5183).35" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).35" Target="10312:[7916..7934).9" />
<Link Source="10353:[5197..5323).52" Target="10353:[4698..4724).18" />
<Link Source="10353:[5197..5323).52" Target="10353:[5079..5183).35" />
<Link Source="10353:[5197..5323).52" Target="10312:[7916..7934).9" />
<Link Source="10353:[5485..5759).103" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).103" Target="10312:[7916..7934).9" />
<Link Source="10353:[5485..5759).104" Target="10353:[4698..4724).18" />
<Link Source="10353:[5485..5759).104" Target="10353:[5485..5759).103" />
<Link Source="10353:[5485..5759).104" Target="10312:[7916..7934).9" />
<Link Source="10353:[5485..5759).105" Target="10312:[7916..7934).9" />
<Link Source="10353:[5775..5979).69" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).69" Target="10312:[7916..7934).9" />
<Link Source="10353:[5775..5979).71" Target="10353:[4698..4724).18" />
<Link Source="10353:[5775..5979).71" Target="10353:[5775..5979).69" />
<Link Source="10353:[5775..5979).71" Target="10312:[7916..7934).9" />
<Link Source="10353:[5995..6029).52" Target="10353:[5775..5979).71" />
<Link Source="10353:[5995..6029).52" Target="10312:[7916..7934).9" />
<Link Source="10353:[6002..6028).18" Target="10312:[7916..7934).9" />
<Link Source="10353:[6343..6358).18" Target="10353:[5995..6029).52" />
<Link Source="10353:[6343..6358).18" Target="10353:[6002..6028).18" />
<Link Source="10353:[6384..6410).103" Target="10353:[6002..6028).18" />
<Link Source="10353:[6384..6410).104" Target="10353:[6343..6358).18" />
<Link Source="10353:[6384..6410).104" Target="10353:[6384..6410).103" />
<Link Source="10353:[6384..6410).104" Target="10353:[6002..6028).18" />
<Link Source="10312:[7952..7977).33" Target="10312:[63566..63612).8" />
<Link Source="10312:[61608..61629).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[80978..80991).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[80993..81002).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[81004..81017).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[81019..81040).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[81042..81069).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[81095..84034).9" Target="10312:[80978..80991).9" />
<Link Source="10312:[81095..84034).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[81196..82523).57" Target="10312:[81095..84034).9" />
<Link Source="10312:[81196..82523).58" Target="10312:[80993..81002).9" />
<Link Source="10312:[81196..82523).58" Target="10312:[81196..82523).57" />
<Link Source="10312:[81196..82523).58" Target="10312:[81095..84034).9" />
<Link Source="10312:[81196..82523).59" Target="10312:[81019..81040).9" />
<Link Source="10312:[81196..82523).59" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).59" Target="10312:[81095..84034).9" />
<Link Source="10312:[81196..82523).62" Target="10312:[81196..82523).58" />
<Link Source="10312:[81196..82523).62" Target="10312:[81196..82523).59" />
<Link Source="10312:[81196..82523).62" Target="10312:[81095..84034).9" />
<Link Source="10312:[81319..81371).9" Target="10312:[80978..80991).9" />
<Link Source="10312:[81319..81371).9" Target="10312:[81196..82523).62" />
<Link Source="10312:[81495..81570).41" Target="10312:[81319..81371).9" />
<Link Source="10312:[81495..81570).41" Target="10312:[63566..63612).8" />
<Link Source="10312:[81495..81570).41" Target="10312:[81196..82523).62" />
<Link Source="10312:[81495..81570).42" Target="10312:[81319..81371).9" />
<Link Source="10312:[81495..81570).42" Target="10312:[81196..82523).62" />
<Link Source="10312:[81596..82500).49" Target="10312:[81319..81371).9" />
<Link Source="10312:[81596..82500).49" Target="10312:[63566..63612).8" />
<Link Source="10312:[81596..82500).49" Target="10312:[80993..81002).9" />
<Link Source="10312:[81596..82500).49" Target="10312:[81196..82523).62" />
<Link Source="10312:[81596..82500).50" Target="10312:[81019..81040).9" />
<Link Source="10312:[81596..82500).50" Target="10312:[81196..82523).62" />
<Link Source="10312:[81628..81659).9" Target="10312:[81196..82523).62" />
<Link Source="10353:[7504..7530).18" Target="10312:[81596..82500).50" />
<Link Source="10353:[7504..7530).18" Target="10312:[81628..81659).9" />
<Link Source="10312:[81596..82500).53" Target="10312:[81596..82500).49" />
<Link Source="10312:[81596..82500).53" Target="10353:[7504..7530).18" />
<Link Source="10312:[81596..82500).53" Target="10312:[81196..82523).62" />
<Link Source="10312:[84050..84066).17" Target="10312:[63566..63612).8" />
<Link Source="10312:[66291..66342).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[75301..75322).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[75301..75322).9" Target="10312:[66291..66342).9" />
<Link Source="10312:[75324..75352).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[75324..75352).9" Target="10312:[66291..66342).9" />
<Link Source="10312:[75735..75866).41" Target="10312:[75301..75322).9" />
<Link Source="10312:[75735..75866).41" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).41" Target="10312:[66291..66342).9" />
<Link Source="10312:[75735..75866).42" Target="10312:[66291..66342).9" />
<Link Source="10312:[75742..75804).9" Target="10312:[75735..75866).41" />
<Link Source="10312:[75742..75804).9" Target="10312:[66291..66342).9" />
<Link Source="10312:[75735..75866).44" Target="10312:[75324..75352).9" />
<Link Source="10312:[75735..75866).44" Target="10312:[75742..75804).9" />
<Link Source="10312:[77543..77571).9" Target="10312:[75735..75866).44" />
<Link Source="10312:[77543..77571).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[77654..77700).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[77501..78044).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[77726..77892).33" Target="10312:[77501..78044).9" />
<Link Source="10312:[77726..77892).33" Target="10312:[63566..63612).8" />
<Link Source="10312:[77726..77892).34" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).34" Target="10312:[63566..63612).8" />
<Link Source="10312:[77730..77782).9" Target="10312:[63566..63612).8" />
<Link Source="10298:[471..492).78" Target="10312:[77726..77892).33" />
<Link Source="10298:[471..492).78" Target="10312:[77730..77782).9" />
<Link Source="10298:[494..511).78" Target="10312:[77726..77892).34" />
<Link Source="10298:[494..511).78" Target="10312:[77730..77782).9" />
<Link Source="10312:[78402..78430).9" Target="10312:[77543..77571).9" />
<Link Source="10312:[78402..78430).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[78513..78552).9" Target="10312:[77654..77700).9" />
<Link Source="10312:[78513..78552).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[78346..78783).9" Target="10312:[77501..78044).9" />
<Link Source="10312:[78346..78783).9" Target="10312:[63566..63612).8" />
<Link Source="10376:[1085..1113).9" Target="10312:[78402..78430).9" />
<Link Source="10376:[1085..1113).9" Target="10312:[63566..63612).8" />
<Link Source="10376:[1196..1235).9" Target="10312:[78513..78552).9" />
<Link Source="10376:[1196..1235).9" Target="10312:[63566..63612).8" />
<Link Source="10376:[1028..1425).9" Target="10312:[78346..78783).9" />
<Link Source="10376:[1028..1425).9" Target="10312:[63566..63612).8" />
<Link Source="10286:[30098..30120).9" Target="10376:[1028..1425).9" />
<Link Source="10286:[30098..30120).9" Target="10312:[63566..63612).8" />
<Link Source="10286:[30135..30160).9" Target="10376:[1085..1113).9" />
<Link Source="10286:[30135..30160).9" Target="10312:[63566..63612).8" />
<Link Source="10286:[30283..30330).9" Target="10376:[1196..1235).9" />
<Link Source="10286:[30283..30330).9" Target="10312:[63566..63612).8" />
<Link Source="10286:[30012..30691).9" Target="10376:[1028..1425).9" />
<Link Source="10286:[30012..30691).9" Target="10312:[63566..63612).8" />
<Link Source="10286:[30356..30522).33" Target="10286:[30012..30691).9" />
<Link Source="10286:[30356..30522).33" Target="10312:[63566..63612).8" />
<Link Source="10286:[30356..30522).34" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).34" Target="10312:[63566..63612).8" />
<Link Source="10286:[30360..30412).9" Target="10312:[63566..63612).8" />
<Link Source="10298:[471..492).79" Target="10286:[30356..30522).33" />
<Link Source="10298:[471..492).79" Target="10286:[30360..30412).9" />
<Link Source="10298:[494..511).79" Target="10286:[30356..30522).34" />
<Link Source="10298:[494..511).79" Target="10286:[30360..30412).9" />
<Link Source="10060:[2136..2158).9" Target="10286:[30098..30120).9" />
<Link Source="10060:[2136..2158).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[2173..2198).9" Target="10286:[30135..30160).9" />
<Link Source="10060:[2173..2198).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[2320..2366).9" Target="10286:[30283..30330).9" />
<Link Source="10060:[2320..2366).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[5621..5634).9" Target="10060:[2136..2158).9" />
<Link Source="10060:[5621..5634).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[5691..5716).9" Target="10060:[2173..2198).9" />
<Link Source="10060:[5691..5716).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[5731..5762).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[5777..5806).9" Target="10060:[2136..2158).9" />
<Link Source="10060:[5777..5806).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[5882..5928).9" Target="10060:[2320..2366).9" />
<Link Source="10060:[5882..5928).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[5954..5991).33" Target="10312:[63566..63612).8" />
<Link Source="10060:[6005..6042).33" Target="10312:[63566..63612).8" />
<Link Source="10060:[6005..6042).34" Target="10060:[5621..5634).9" />
<Link Source="10060:[6005..6042).34" Target="10060:[6005..6042).33" />
<Link Source="10060:[6005..6042).34" Target="10312:[63566..63612).8" />
<Link Source="10060:[6056..6090).17" Target="10060:[5621..5634).9" />
<Link Source="10060:[6056..6090).17" Target="10312:[63566..63612).8" />
<Link Source="10060:[6104..6172).25" Target="10060:[5621..5634).9" />
<Link Source="10060:[6104..6172).25" Target="10312:[63566..63612).8" />
<Link Source="10060:[6188..6219).17" Target="10312:[63566..63612).8" />
<Link Source="10060:[10202..10215).9" Target="10060:[5621..5634).9" />
<Link Source="10060:[10202..10215).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[10265..10311).9" Target="10060:[5882..5928).9" />
<Link Source="10060:[10265..10311).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[10337..10405).25" Target="10060:[10202..10215).9" />
<Link Source="10060:[10337..10405).25" Target="10312:[63566..63612).8" />
<Link Source="10060:[10419..10454).33" Target="10312:[63566..63612).8" />
<Link Source="10060:[10470..10516).9" Target="10060:[10202..10215).9" />
<Link Source="10060:[10470..10516).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[10532..10544).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[10558..11295).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[11990..12013).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[12078..12091).9" Target="10060:[10202..10215).9" />
<Link Source="10060:[12078..12091).9" Target="10312:[63566..63612).8" />
<Link Source="10060:[12117..12185).25" Target="10060:[12078..12091).9" />
<Link Source="10060:[12117..12185).25" Target="10312:[63566..63612).8" />
<Link Source="10060:[12199..12238).33" Target="10312:[63566..63612).8" />
<Link Source="10060:[12199..12238).34" Target="10060:[11990..12013).9" />
<Link Source="10060:[12199..12238).34" Target="10060:[12199..12238).33" />
<Link Source="10060:[12199..12238).34" Target="10312:[63566..63612).8" />
<Link Source="10346:[11710..11746).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[2155..2260).9" Target="10312:[63566..63612).8" />
<Link Source="10286:[2155..2260).9" Target="10346:[11710..11746).9" />
<Link Source="10286:[2191..2245).33" Target="10286:[2155..2260).9" />
<Link Source="10286:[2191..2245).33" Target="10312:[77654..77700).9" />
<Link Source="10286:[2191..2245).33" Target="10346:[11710..11746).9" />
<Link Source="10286:[2191..2245).34" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).34" Target="10346:[11710..11746).9" />
<Link Source="10286:[2198..2244).9" Target="10346:[11710..11746).9" />
<Link Source="10298:[471..492).81" Target="10286:[2191..2245).33" />
<Link Source="10298:[471..492).81" Target="10286:[2198..2244).9" />
<Link Source="10298:[494..511).81" Target="10286:[2191..2245).34" />
<Link Source="10298:[494..511).81" Target="10286:[2198..2244).9" />
<Link Source="10345:[28225..28251).9" Target="10298:[471..492).81" />
<Link Source="10345:[28225..28251).9" Target="10312:[77654..77700).9" />
<Link Source="10345:[28927..28940).17" Target="10312:[77654..77700).9" />
<Link Source="10346:[12205..12212).9" Target="10312:[77654..77700).9" />
<Link Source="10354:[3720..3803).465" Target="10354:[3684..3818).59" />
<Link Source="10354:[3720..3803).465" Target="10312:[77654..77700).9" />
<Link Source="10354:[3720..3803).465" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).465" Target="10312:[4685..4699).25" />
<Link Source="10312:[4680..4787).53" Target="10354:[3720..3803).465" />
<Link Source="10312:[4680..4787).53" Target="10312:[63566..63612).8" />
<Link Source="10312:[4749..4764).9" Target="10312:[63566..63612).8" />
<Link Source="10312:[4749..4764).9" Target="10312:[4680..4787).53" />
<Link Source="10312:[5087..5101).9" Target="10312:[4749..4764).9" />
<Link Source="10312:[5087..5101).9" Target="10312:[63566..63612).8" />
<Link Source="10319:[43799..44676).49" Target="10312:[63566..63612).8" />
<Link Source="10319:[43853..43873).9" Target="10312:[63566..63612).8" />
<Link Source="10319:[41088..41107).9" Target="10319:[43799..44676).49" />
<Link Source="10319:[41088..41107).9" Target="10319:[43853..43873).9" />
<Link Source="10319:[41138..41158).9" Target="10319:[43853..43873).9" />
<Link Source="10354:[4919..5009).62" Target="10319:[41088..41107).9" />
<Link Source="10354:[4919..5009).62" Target="10319:[41138..41158).9" />
<Link Source="10354:[4094..4107).80" Target="10354:[4919..5009).62" />
<Link Source="10354:[4094..4107).80" Target="10312:[77654..77700).9" />
<Link Source="10354:[4094..4107).80" Target="10319:[41138..41158).9" />
<Link Source="10319:[41133..41220).17" Target="10354:[4094..4107).80" />
<Link Source="10319:[41133..41220).17" Target="10319:[43853..43873).9" />
<Link Source="10319:[41254..41268).9" Target="10319:[43853..43873).9" />
<Link Source="10354:[4525..4595).17" Target="10319:[41088..41107).9" />
<Link Source="10354:[4525..4595).17" Target="10319:[41254..41268).9" />
<Link Source="10354:[4561..4580).17" Target="10354:[4525..4595).17" />
<Link Source="10354:[4561..4580).17" Target="10312:[77654..77700).9" />
<Link Source="10354:[4561..4580).17" Target="10319:[41254..41268).9" />
<Link Source="10319:[41236..41680).33" Target="10354:[4561..4580).17" />
<Link Source="10319:[41236..41680).33" Target="10319:[43853..43873).9" />
<Link Source="10319:[41302..41665).9" Target="10319:[41236..41680).33" />
<Link Source="10319:[41302..41665).9" Target="10312:[77654..77700).9" />
<Link Source="10319:[41634..41646).17" Target="10319:[41302..41665).9" />
<Link Source="10319:[44751..44765).9" Target="10312:[63566..63612).8" />
<Link Source="10319:[84374..84391).9" Target="10319:[44751..44765).9" />
<Link Source="10319:[84374..84391).9" Target="10312:[63566..63612).8" />
<Link Source="10319:[84406..84447).9" Target="10319:[44751..44765).9" />
<Link Source="10319:[84406..84447).9" Target="10312:[63566..63612).8" />
<Link Source="10319:[84462..84508).9" Target="10319:[44751..44765).9" />
<Link Source="10319:[84462..84508).9" Target="10312:[63566..63612).8" />
<Link Source="10319:[84124..109887).9" Target="10312:[63566..63612).8" />
<Link Source="10319:[85320..85348).33" Target="10312:[63566..63612).8" />
<Link Source="10319:[85366..85400).33" Target="10312:[63566..63612).8" />
<Link Source="10319:[85467..85484).17" Target="10312:[63566..63612).8" />
<Link Source="10319:[104874..105336).25" Target="10312:[77654..77700).9" />
<Link Source="10319:[104874..105336).25" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).26" Target="10319:[104874..105336).25" />
<Link Source="10319:[104874..105336).26" Target="10319:[84124..109887).9" />
<Link Source="10319:[104874..105336).26" Target="10312:[77654..77700).9" />
<Link Source="10319:[76360..76385).7" Target="10312:[77654..77700).9" />
<Link Source="10319:[76387..76402).7" Target="10312:[77654..77700).9" />
<Link Source="10319:[76494..76582).25" Target="10312:[77654..77700).9" />
<Link Source="10319:[84691..84861).17" Target="10312:[77654..77700).9" />
<Link Source="10319:[84691..84861).17" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).17" Target="10312:[63566..63612).8" />
<Link Source="10319:[84764..84846).49" Target="10312:[63566..63612).8" />
<Link Source="10319:[84764..84846).49" Target="10319:[84691..84861).17" />
<Link Source="10319:[84764..84846).50" Target="10319:[84691..84861).17" />
<Link Source="10319:[84764..84846).52" Target="10312:[77654..77700).9" />
<Link Source="10319:[84764..84846).52" Target="10319:[84691..84861).17" />
<Link Source="10319:[84764..84845).9" Target="10319:[84691..84861).17" />
<Link Source="10306:[358886..358901).9" Target="10319:[84764..84846).49" />
<Link Source="10306:[358886..358901).9" Target="10319:[84764..84845).9" />
<Link Source="10306:[358903..358930).9" Target="10319:[84764..84846).50" />
<Link Source="10306:[358903..358930).9" Target="10319:[84764..84845).9" />
<Link Source="10306:[358932..358945).9" Target="10319:[84764..84846).52" />
<Link Source="10306:[358932..358945).9" Target="10319:[84764..84845).9" />
<Link Source="10306:[358947..358972).9" Target="10319:[84764..84846).49" />
<Link Source="10306:[358947..358972).9" Target="10319:[84764..84845).9" />
<Link Source="10306:[358838..360009).9" Target="10319:[84124..109887).9" />
<Link Source="10306:[358838..360009).9" Target="10319:[84764..84845).9" />
<Link Source="10306:[358998..359998).49" Target="10306:[358932..358945).9" />
<Link Source="10306:[358998..359998).49" Target="10312:[77654..77700).9" />
<Link Source="10306:[358998..359998).49" Target="10319:[84764..84845).9" />
<Link Source="10306:[358998..359998).50" Target="10319:[84764..84845).9" />
<Link Source="10319:[44948..45377).17" Target="10312:[77654..77700).9" />
<Link Source="10319:[44948..45377).17" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).17" Target="10312:[63566..63612).8" />
<Link Source="10354:[11428..11441).9" Target="10312:[63566..63612).8" />
<Link Source="10319:[45408..45422).9" Target="10312:[63566..63612).8" />
<Link Source="10287:[2377..2471).17" Target="10312:[77654..77700).9" />
<Link Source="10287:[2377..2471).17" Target="10312:[63566..63612).8" />
<Link Source="10287:[791..833).17" Target="10312:[77654..77700).9" />
<Link Source="10287:[912..927).9" Target="10312:[77654..77700).9" />
<Link Source="10287:[912..919).9" Target="10287:[912..927).9" />
<Link Source="10287:[912..919).9" Target="10312:[77654..77700).9" />
<Link Source="10287:[945..972).9" Target="10312:[77654..77700).9" />
<Link Source="10287:[945..963).9" Target="10287:[945..972).9" />
<Link Source="10287:[945..963).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[21546..21561).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[21563..21583).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[22086..22108).9" Target="10286:[21546..21561).9" />
<Link Source="10286:[22086..22108).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[22110..22130).9" Target="10286:[21563..21583).9" />
<Link Source="10286:[22110..22130).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[15616..15690).41" Target="10312:[77654..77700).9" />
<Link Source="10286:[15616..15690).42" Target="10312:[77654..77700).9" />
<Link Source="10286:[15616..15690).42" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[23124..23146).9" Target="10286:[22086..22108).9" />
<Link Source="10286:[23124..23146).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[23161..23181).9" Target="10286:[22110..22130).9" />
<Link Source="10286:[23161..23181).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[23281..23301).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[23380..23684).57" Target="10312:[77654..77700).9" />
<Link Source="10286:[23380..23684).57" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).17" Target="10312:[77654..77700).9" />
<Link Source="10286:[23893..24026).17" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).17" Target="10286:[23161..23181).9" />
<Link Source="10286:[24545..24641).17" Target="10312:[77654..77700).9" />
<Link Source="10286:[24655..25349).9" Target="10286:[24545..24641).17" />
<Link Source="10286:[24655..25349).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[26910..26935).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[26952..26974).9" Target="10286:[23124..23146).9" />
<Link Source="10286:[26952..26974).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[27002..27022).9" Target="10286:[23281..23301).9" />
<Link Source="10286:[27002..27022).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[27048..27088).33" Target="10312:[77654..77700).9" />
<Link Source="10286:[27048..27088).34" Target="10286:[26910..26935).9" />
<Link Source="10286:[27048..27088).34" Target="10286:[27048..27088).33" />
<Link Source="10286:[27048..27088).34" Target="10312:[77654..77700).9" />
<Link Source="10286:[27208..27236).17" Target="10312:[77654..77700).9" />
<Link Source="10286:[27250..27722).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[27738..27845).25" Target="10312:[77654..77700).9" />
<Link Source="10286:[27738..27845).26" Target="10286:[27208..27236).17" />
<Link Source="10286:[27738..27845).26" Target="10286:[27738..27845).25" />
<Link Source="10286:[27738..27845).26" Target="10312:[77654..77700).9" />
<Link Source="10286:[27861..27873).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[26281..26812).9" Target="10286:[27861..27873).9" />
<Link Source="10286:[26281..26812).9" Target="10312:[77654..77700).9" />
<Link Source="10286:[26450..26769).9" Target="10286:[24545..24641).17" />
<Link Source="10286:[26450..26769).9" Target="10286:[26281..26812).9" />
<Link Source="10287:[1680..1716).9" Target="10312:[77654..77700).9" />
<Link Source="10287:[1680..1716).9" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).9" Target="10287:[1680..1716).9" />
<Link Source="10287:[1683..1690).9" Target="10287:[912..919).9" />
<Link Source="10287:[1683..1690).9" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).17" Target="10287:[1683..1690).9" />
<Link Source="10287:[1683..1716).17" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).17" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).17" Target="10287:[1683..1716).17" />
<Link Source="10319:[51935..52244).17" Target="10319:[13969..14029).1" />
<Link Source="10319:[42478..42805).28" Target="10312:[77654..77700).9" />
<Link Source="10319:[42821..42938).73" Target="10312:[77654..77700).9" />
<Link Source="10319:[42839..42937).10" Target="10312:[77654..77700).9" />
<Link Source="10319:[63849..63870).10" Target="10319:[42821..42938).73" />
<Link Source="10319:[63849..63870).10" Target="10319:[42839..42937).10" />
<Link Source="10319:[63885..63919).10" Target="10319:[42821..42938).73" />
<Link Source="10319:[63885..63919).10" Target="10319:[42839..42937).10" />
<Link Source="10319:[63934..63945).10" Target="10319:[42821..42938).73" />
<Link Source="10319:[63934..63945).10" Target="10319:[42839..42937).10" />
<Link Source="10319:[63960..63969).10" Target="10319:[42821..42938).73" />
<Link Source="10319:[63960..63969).10" Target="10319:[42839..42937).10" />
<Link Source="10319:[63984..64009).10" Target="10319:[42821..42938).73" />
<Link Source="10319:[63984..64009).10" Target="10319:[42839..42937).10" />
<Link Source="10319:[63768..64484).10" Target="10312:[77654..77700).9" />
<Link Source="10319:[63768..64484).10" Target="10319:[42839..42937).10" />
<Link Source="10319:[64035..64445).37" Target="10319:[42839..42937).10" />
<Link Source="10319:[64035..64445).38" Target="10319:[63885..63919).10" />
<Link Source="10319:[64035..64445).38" Target="10319:[64035..64445).37" />
<Link Source="10319:[64035..64445).38" Target="10319:[42839..42937).10" />
<Link Source="10319:[64461..64473).19" Target="10319:[42839..42937).10" />
<Link Source="10319:[42821..42938).79" Target="10319:[64461..64473).19" />
<Link Source="10319:[42821..42938).79" Target="10312:[77654..77700).9" />
<Link Source="10319:[42952..43079).28" Target="10312:[77654..77700).9" />
<Link Source="10319:[42952..43079).29" Target="10319:[42821..42938).79" />
<Link Source="10319:[42952..43079).29" Target="10319:[42952..43079).28" />
<Link Source="10319:[42952..43079).29" Target="10312:[77654..77700).9" />
<Link Source="10354:[11312..11328).10" Target="10312:[77654..77700).9" />
<Link Source="10354:[3684..3818).64" Target="10312:[77654..77700).9" />
<Link Source="10354:[3684..3818).64" Target="10354:[11312..11328).10" />
<Link Source="10354:[3720..3803).469" Target="10354:[3684..3818).64" />
<Link Source="10354:[3720..3803).469" Target="10312:[77654..77700).9" />
<Link Source="10354:[3720..3803).469" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).469" Target="10354:[11312..11328).10" />
<Link Source="10354:[3720..3803).470" Target="10354:[11312..11328).10" />
<Link Source="10354:[3720..3803).471" Target="10354:[3684..3818).64" />
<Link Source="10354:[3720..3803).471" Target="10312:[77654..77700).9" />
<Link Source="10354:[3720..3803).471" Target="10354:[3720..3803).470" />
<Link Source="10354:[3720..3803).471" Target="10354:[11312..11328).10" />
<Link Source="10354:[11299..11330).28" Target="10354:[3720..3803).469" />
<Link Source="10354:[11299..11330).28" Target="10312:[77654..77700).9" />
<Link Source="10319:[50330..50355).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[3905..3919).10" Target="10312:[77654..77700).9" />
<Link Source="10354:[3684..3818).65" Target="10312:[77654..77700).9" />
<Link Source="10354:[3684..3818).65" Target="10312:[3905..3919).10" />
<Link Source="10354:[3720..3803).477" Target="10354:[3684..3818).65" />
<Link Source="10354:[3720..3803).477" Target="10312:[77654..77700).9" />
<Link Source="10354:[3720..3803).477" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).477" Target="10312:[3905..3919).10" />
<Link Source="10354:[3720..3803).478" Target="10312:[3905..3919).10" />
<Link Source="10354:[3720..3803).479" Target="10354:[3684..3818).65" />
<Link Source="10354:[3720..3803).479" Target="10312:[77654..77700).9" />
<Link Source="10354:[3720..3803).479" Target="10354:[3720..3803).478" />
<Link Source="10354:[3720..3803).479" Target="10312:[3905..3919).10" />
<Link Source="10312:[3892..3921).28" Target="10354:[3720..3803).477" />
<Link Source="10312:[3892..3921).28" Target="10312:[77654..77700).9" />
<Link Source="10312:[3935..3968).37" Target="10312:[77654..77700).9" />
<Link Source="10312:[3948..3966).10" Target="10312:[77654..77700).9" />
<Link Source="10353:[4698..4724).19" Target="10312:[3935..3968).37" />
<Link Source="10353:[4698..4724).19" Target="10312:[3948..3966).10" />
<Link Source="10353:[4750..4847).37" Target="10353:[4698..4724).19" />
<Link Source="10353:[4750..4847).37" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).37" Target="10312:[3948..3966).10" />
<Link Source="10353:[4863..5000).73" Target="10353:[4698..4724).19" />
<Link Source="10353:[4863..5000).73" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).73" Target="10312:[3948..3966).10" />
<Link Source="10353:[4863..5000).74" Target="10312:[3948..3966).10" />
<Link Source="10353:[5079..5183).37" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).37" Target="10312:[3948..3966).10" />
<Link Source="10353:[5197..5323).55" Target="10353:[4698..4724).19" />
<Link Source="10353:[5197..5323).55" Target="10353:[5079..5183).37" />
<Link Source="10353:[5197..5323).55" Target="10312:[3948..3966).10" />
<Link Source="10353:[5485..5759).109" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).109" Target="10312:[3948..3966).10" />
<Link Source="10353:[5485..5759).110" Target="10353:[4698..4724).19" />
<Link Source="10353:[5485..5759).110" Target="10353:[5485..5759).109" />
<Link Source="10353:[5485..5759).110" Target="10312:[3948..3966).10" />
<Link Source="10353:[5485..5759).111" Target="10312:[3948..3966).10" />
<Link Source="10353:[5775..5979).73" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).73" Target="10312:[3948..3966).10" />
<Link Source="10353:[5775..5979).75" Target="10353:[4698..4724).19" />
<Link Source="10353:[5775..5979).75" Target="10353:[5775..5979).73" />
<Link Source="10353:[5775..5979).75" Target="10312:[3948..3966).10" />
<Link Source="10353:[5995..6029).55" Target="10353:[5775..5979).75" />
<Link Source="10353:[5995..6029).55" Target="10312:[3948..3966).10" />
<Link Source="10353:[6002..6028).19" Target="10312:[3948..3966).10" />
<Link Source="10353:[6343..6358).19" Target="10353:[5995..6029).55" />
<Link Source="10353:[6343..6358).19" Target="10353:[6002..6028).19" />
<Link Source="10353:[6384..6410).109" Target="10353:[6002..6028).19" />
<Link Source="10353:[6384..6410).110" Target="10353:[6343..6358).19" />
<Link Source="10353:[6384..6410).110" Target="10353:[6384..6410).109" />
<Link Source="10353:[6384..6410).110" Target="10353:[6002..6028).19" />
<Link Source="10312:[5188..5207).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[5209..5220).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[5222..5231).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[5233..5272).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[5274..5295).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[5297..5318).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[5320..5333).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[5124..5404).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[4685..4699).28" Target="10312:[77654..77700).9" />
<Link Source="10354:[3684..3818).66" Target="10312:[77654..77700).9" />
<Link Source="10354:[3684..3818).66" Target="10312:[4685..4699).28" />
<Link Source="10354:[3720..3803).485" Target="10354:[3684..3818).66" />
<Link Source="10354:[3720..3803).485" Target="10312:[77654..77700).9" />
<Link Source="10354:[3720..3803).485" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).485" Target="10312:[4685..4699).28" />
<Link Source="10354:[3720..3803).486" Target="10312:[4685..4699).28" />
<Link Source="10354:[3720..3803).487" Target="10354:[3684..3818).66" />
<Link Source="10354:[3720..3803).487" Target="10312:[77654..77700).9" />
<Link Source="10354:[3720..3803).487" Target="10354:[3720..3803).486" />
<Link Source="10354:[3720..3803).487" Target="10312:[4685..4699).28" />
<Link Source="10312:[4680..4787).55" Target="10354:[3720..3803).485" />
<Link Source="10312:[4680..4787).55" Target="10312:[77654..77700).9" />
<Link Source="10312:[4826..5058).136" Target="10312:[77654..77700).9" />
<Link Source="10312:[4826..5058).136" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).137" Target="10312:[77654..77700).9" />
<Link Source="10382:[1340..1359).10" Target="10312:[77654..77700).9" />
<Link Source="10382:[1374..1383).10" Target="10312:[77654..77700).9" />
<Link Source="10382:[1385..1424).10" Target="10312:[77654..77700).9" />
<Link Source="10382:[1426..1447).10" Target="10312:[77654..77700).9" />
<Link Source="10382:[1449..1470).10" Target="10312:[77654..77700).9" />
<Link Source="10382:[1472..1485).10" Target="10312:[77654..77700).9" />
<Link Source="10382:[1572..1586).10" Target="10312:[77654..77700).9" />
<Link Source="10354:[3684..3818).67" Target="10382:[1340..1359).10" />
<Link Source="10354:[3684..3818).67" Target="10382:[1572..1586).10" />
<Link Source="10354:[3720..3803).493" Target="10354:[3684..3818).67" />
<Link Source="10354:[3720..3803).493" Target="10312:[77654..77700).9" />
<Link Source="10354:[3720..3803).493" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).493" Target="10382:[1572..1586).10" />
<Link Source="10354:[3720..3803).494" Target="10382:[1572..1586).10" />
<Link Source="10354:[3720..3803).495" Target="10354:[3684..3818).67" />
<Link Source="10354:[3720..3803).495" Target="10312:[77654..77700).9" />
<Link Source="10354:[3720..3803).495" Target="10354:[3720..3803).494" />
<Link Source="10354:[3720..3803).495" Target="10382:[1572..1586).10" />
<Link Source="10382:[1559..1588).28" Target="10354:[3720..3803).493" />
<Link Source="10382:[1559..1588).28" Target="10312:[77654..77700).9" />
<Link Source="10382:[1619..1629).10" Target="10312:[77654..77700).9" />
<Link Source="10382:[913..1046).10" Target="10312:[77654..77700).9" />
<Link Source="10382:[913..1046).10" Target="10382:[1619..1629).10" />
<Link Source="10382:[949..1031).19" Target="EXTERNAL" />
<Link Source="10382:[949..1031).19" Target="10382:[1619..1629).10" />
<Link Source="10382:[1604..1691).46" Target="10382:[949..1031).19" />
<Link Source="10382:[1604..1691).46" Target="10312:[77654..77700).9" />
<Link Source="10382:[1604..1691).47" Target="10382:[1426..1447).10" />
<Link Source="10382:[1604..1691).47" Target="10382:[1604..1691).46" />
<Link Source="10382:[1604..1691).47" Target="10312:[77654..77700).9" />
<Link Source="10382:[1604..1691).48" Target="10312:[77654..77700).9" />
<Link Source="10346:[10861..10875).10" Target="10312:[77654..77700).9" />
<Link Source="10354:[3684..3818).69" Target="10312:[77654..77700).9" />
<Link Source="10354:[3684..3818).69" Target="10346:[10861..10875).10" />
<Link Source="10354:[3720..3803).509" Target="10354:[3684..3818).69" />
<Link Source="10354:[3720..3803).509" Target="10312:[77654..77700).9" />
<Link Source="10354:[3720..3803).509" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).509" Target="10346:[10861..10875).10" />
<Link Source="10354:[3720..3803).510" Target="10346:[10861..10875).10" />
<Link Source="10354:[3720..3803).511" Target="10354:[3684..3818).69" />
<Link Source="10354:[3720..3803).511" Target="10312:[77654..77700).9" />
<Link Source="10354:[3720..3803).511" Target="10354:[3720..3803).510" />
<Link Source="10354:[3720..3803).511" Target="10346:[10861..10875).10" />
<Link Source="10346:[10848..10877).28" Target="10354:[3720..3803).509" />
<Link Source="10346:[10848..10877).28" Target="10312:[77654..77700).9" />
<Link Source="10346:[10897..10914).10" Target="10312:[77654..77700).9" />
<Link Source="10346:[7666..7775).10" Target="10312:[77654..77700).9" />
<Link Source="10346:[7666..7775).10" Target="10346:[10897..10914).10" />
<Link Source="10346:[7672..7773).28" Target="10346:[7666..7775).10" />
<Link Source="10346:[7672..7773).28" Target="10312:[77654..77700).9" />
<Link Source="10346:[7672..7773).28" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).28" Target="10346:[10897..10914).10" />
<Link Source="10346:[10893..11127).19" Target="10346:[7672..7773).28" />
<Link Source="10346:[10893..11127).19" Target="10312:[77654..77700).9" />
<Link Source="10346:[3525..3638).66" Target="10312:[77654..77700).9" />
<Link Source="10312:[7729..7768).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[7615..8420).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[7903..7936).37" Target="10312:[77654..77700).9" />
<Link Source="10312:[7916..7934).10" Target="10312:[77654..77700).9" />
<Link Source="10353:[4698..4724).20" Target="10312:[7903..7936).37" />
<Link Source="10353:[4698..4724).20" Target="10312:[7916..7934).10" />
<Link Source="10353:[4750..4847).39" Target="10353:[4698..4724).20" />
<Link Source="10353:[4750..4847).39" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).39" Target="10312:[7916..7934).10" />
<Link Source="10353:[4863..5000).77" Target="10353:[4698..4724).20" />
<Link Source="10353:[4863..5000).77" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).77" Target="10312:[7916..7934).10" />
<Link Source="10353:[4863..5000).78" Target="10312:[7916..7934).10" />
<Link Source="10353:[5079..5183).39" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).39" Target="10312:[7916..7934).10" />
<Link Source="10353:[5197..5323).58" Target="10353:[4698..4724).20" />
<Link Source="10353:[5197..5323).58" Target="10353:[5079..5183).39" />
<Link Source="10353:[5197..5323).58" Target="10312:[7916..7934).10" />
<Link Source="10353:[5485..5759).115" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).115" Target="10312:[7916..7934).10" />
<Link Source="10353:[5485..5759).116" Target="10353:[4698..4724).20" />
<Link Source="10353:[5485..5759).116" Target="10353:[5485..5759).115" />
<Link Source="10353:[5485..5759).116" Target="10312:[7916..7934).10" />
<Link Source="10353:[5485..5759).117" Target="10312:[7916..7934).10" />
<Link Source="10353:[5775..5979).77" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).77" Target="10312:[7916..7934).10" />
<Link Source="10353:[5775..5979).79" Target="10353:[4698..4724).20" />
<Link Source="10353:[5775..5979).79" Target="10353:[5775..5979).77" />
<Link Source="10353:[5775..5979).79" Target="10312:[7916..7934).10" />
<Link Source="10353:[5995..6029).58" Target="10353:[5775..5979).79" />
<Link Source="10353:[5995..6029).58" Target="10312:[7916..7934).10" />
<Link Source="10353:[6002..6028).20" Target="10312:[7916..7934).10" />
<Link Source="10353:[6343..6358).20" Target="10353:[5995..6029).58" />
<Link Source="10353:[6343..6358).20" Target="10353:[6002..6028).20" />
<Link Source="10353:[6384..6410).115" Target="10353:[6002..6028).20" />
<Link Source="10353:[6384..6410).116" Target="10353:[6343..6358).20" />
<Link Source="10353:[6384..6410).116" Target="10353:[6384..6410).115" />
<Link Source="10353:[6384..6410).116" Target="10353:[6002..6028).20" />
<Link Source="10312:[7952..7977).37" Target="10312:[77654..77700).9" />
<Link Source="10312:[61608..61629).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[80978..80991).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[80993..81002).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[81004..81017).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[81019..81040).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[81042..81069).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[81095..84034).10" Target="10312:[80978..80991).10" />
<Link Source="10312:[81095..84034).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[81196..82523).64" Target="10312:[81095..84034).10" />
<Link Source="10312:[81196..82523).65" Target="10312:[80993..81002).10" />
<Link Source="10312:[81196..82523).65" Target="10312:[81196..82523).64" />
<Link Source="10312:[81196..82523).65" Target="10312:[81095..84034).10" />
<Link Source="10312:[81196..82523).66" Target="10312:[81019..81040).10" />
<Link Source="10312:[81196..82523).66" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).66" Target="10312:[81095..84034).10" />
<Link Source="10312:[81196..82523).69" Target="10312:[81196..82523).65" />
<Link Source="10312:[81196..82523).69" Target="10312:[81196..82523).66" />
<Link Source="10312:[81196..82523).69" Target="10312:[81095..84034).10" />
<Link Source="10312:[81319..81371).10" Target="10312:[80978..80991).10" />
<Link Source="10312:[81319..81371).10" Target="10312:[81196..82523).69" />
<Link Source="10312:[81495..81570).46" Target="10312:[81319..81371).10" />
<Link Source="10312:[81495..81570).46" Target="10312:[77654..77700).9" />
<Link Source="10312:[81495..81570).46" Target="10312:[81196..82523).69" />
<Link Source="10312:[81495..81570).47" Target="10312:[81319..81371).10" />
<Link Source="10312:[81495..81570).47" Target="10312:[81196..82523).69" />
<Link Source="10312:[81596..82500).55" Target="10312:[81319..81371).10" />
<Link Source="10312:[81596..82500).55" Target="10312:[77654..77700).9" />
<Link Source="10312:[81596..82500).55" Target="10312:[80993..81002).10" />
<Link Source="10312:[81596..82500).55" Target="10312:[81196..82523).69" />
<Link Source="10312:[81596..82500).56" Target="10312:[81019..81040).10" />
<Link Source="10312:[81596..82500).56" Target="10312:[81196..82523).69" />
<Link Source="10312:[81628..81659).10" Target="10312:[81196..82523).69" />
<Link Source="10353:[7504..7530).20" Target="10312:[81596..82500).56" />
<Link Source="10353:[7504..7530).20" Target="10312:[81628..81659).10" />
<Link Source="10312:[81596..82500).59" Target="10312:[81596..82500).55" />
<Link Source="10312:[81596..82500).59" Target="10353:[7504..7530).20" />
<Link Source="10312:[81596..82500).59" Target="10312:[81196..82523).69" />
<Link Source="10312:[84050..84066).19" Target="10312:[77654..77700).9" />
<Link Source="10312:[66291..66342).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[75301..75322).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[75301..75322).10" Target="10312:[66291..66342).10" />
<Link Source="10312:[75324..75352).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[75324..75352).10" Target="10312:[66291..66342).10" />
<Link Source="10312:[75735..75866).46" Target="10312:[75301..75322).10" />
<Link Source="10312:[75735..75866).46" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).46" Target="10312:[66291..66342).10" />
<Link Source="10312:[75735..75866).47" Target="10312:[66291..66342).10" />
<Link Source="10312:[75742..75804).10" Target="10312:[75735..75866).46" />
<Link Source="10312:[75742..75804).10" Target="10312:[66291..66342).10" />
<Link Source="10312:[75735..75866).49" Target="10312:[75324..75352).10" />
<Link Source="10312:[75735..75866).49" Target="10312:[75742..75804).10" />
<Link Source="10312:[77543..77571).10" Target="10312:[75735..75866).49" />
<Link Source="10312:[77543..77571).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[77501..78044).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[77726..77892).37" Target="10312:[77501..78044).10" />
<Link Source="10312:[77726..77892).37" Target="10312:[77654..77700).9" />
<Link Source="10312:[77726..77892).38" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).38" Target="10312:[77654..77700).9" />
<Link Source="10312:[77730..77782).10" Target="10312:[77654..77700).9" />
<Link Source="10298:[471..492).85" Target="10312:[77726..77892).37" />
<Link Source="10298:[471..492).85" Target="10312:[77730..77782).10" />
<Link Source="10298:[494..511).85" Target="10312:[77726..77892).38" />
<Link Source="10298:[494..511).85" Target="10312:[77730..77782).10" />
<Link Source="10312:[78402..78430).10" Target="10312:[77543..77571).10" />
<Link Source="10312:[78402..78430).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[78513..78552).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[78346..78783).10" Target="10312:[77501..78044).10" />
<Link Source="10312:[78346..78783).10" Target="10312:[77654..77700).9" />
<Link Source="10376:[1085..1113).10" Target="10312:[78402..78430).10" />
<Link Source="10376:[1085..1113).10" Target="10312:[77654..77700).9" />
<Link Source="10376:[1196..1235).10" Target="10312:[78513..78552).10" />
<Link Source="10376:[1196..1235).10" Target="10312:[77654..77700).9" />
<Link Source="10376:[1028..1425).10" Target="10312:[78346..78783).10" />
<Link Source="10376:[1028..1425).10" Target="10312:[77654..77700).9" />
<Link Source="10286:[30098..30120).10" Target="10376:[1028..1425).10" />
<Link Source="10286:[30098..30120).10" Target="10312:[77654..77700).9" />
<Link Source="10286:[30135..30160).10" Target="10376:[1085..1113).10" />
<Link Source="10286:[30135..30160).10" Target="10312:[77654..77700).9" />
<Link Source="10286:[30283..30330).10" Target="10376:[1196..1235).10" />
<Link Source="10286:[30283..30330).10" Target="10312:[77654..77700).9" />
<Link Source="10286:[30012..30691).10" Target="10376:[1028..1425).10" />
<Link Source="10286:[30012..30691).10" Target="10312:[77654..77700).9" />
<Link Source="10286:[30356..30522).37" Target="10286:[30012..30691).10" />
<Link Source="10286:[30356..30522).37" Target="10312:[77654..77700).9" />
<Link Source="10286:[30356..30522).38" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).38" Target="10312:[77654..77700).9" />
<Link Source="10286:[30360..30412).10" Target="10312:[77654..77700).9" />
<Link Source="10298:[471..492).86" Target="10286:[30356..30522).37" />
<Link Source="10298:[471..492).86" Target="10286:[30360..30412).10" />
<Link Source="10298:[494..511).86" Target="10286:[30356..30522).38" />
<Link Source="10298:[494..511).86" Target="10286:[30360..30412).10" />
<Link Source="10060:[2136..2158).10" Target="10286:[30098..30120).10" />
<Link Source="10060:[2136..2158).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[2173..2198).10" Target="10286:[30135..30160).10" />
<Link Source="10060:[2173..2198).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[2320..2366).10" Target="10286:[30283..30330).10" />
<Link Source="10060:[2320..2366).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[5621..5634).10" Target="10060:[2136..2158).10" />
<Link Source="10060:[5621..5634).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[5691..5716).10" Target="10060:[2173..2198).10" />
<Link Source="10060:[5691..5716).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[5731..5762).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[5777..5806).10" Target="10060:[2136..2158).10" />
<Link Source="10060:[5777..5806).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[5882..5928).10" Target="10060:[2320..2366).10" />
<Link Source="10060:[5882..5928).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[5954..5991).37" Target="10312:[77654..77700).9" />
<Link Source="10060:[6005..6042).37" Target="10312:[77654..77700).9" />
<Link Source="10060:[6005..6042).38" Target="10060:[5621..5634).10" />
<Link Source="10060:[6005..6042).38" Target="10060:[6005..6042).37" />
<Link Source="10060:[6005..6042).38" Target="10312:[77654..77700).9" />
<Link Source="10060:[6056..6090).19" Target="10060:[5621..5634).10" />
<Link Source="10060:[6056..6090).19" Target="10312:[77654..77700).9" />
<Link Source="10060:[6104..6172).28" Target="10060:[5621..5634).10" />
<Link Source="10060:[6104..6172).28" Target="10312:[77654..77700).9" />
<Link Source="10060:[6188..6219).19" Target="10312:[77654..77700).9" />
<Link Source="10060:[10202..10215).10" Target="10060:[5621..5634).10" />
<Link Source="10060:[10202..10215).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[10265..10311).10" Target="10060:[5882..5928).10" />
<Link Source="10060:[10265..10311).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[10337..10405).28" Target="10060:[10202..10215).10" />
<Link Source="10060:[10337..10405).28" Target="10312:[77654..77700).9" />
<Link Source="10060:[10419..10454).37" Target="10312:[77654..77700).9" />
<Link Source="10060:[10470..10516).10" Target="10060:[10202..10215).10" />
<Link Source="10060:[10470..10516).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[10532..10544).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[10558..11295).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[11990..12013).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[12078..12091).10" Target="10060:[10202..10215).10" />
<Link Source="10060:[12078..12091).10" Target="10312:[77654..77700).9" />
<Link Source="10060:[12117..12185).28" Target="10060:[12078..12091).10" />
<Link Source="10060:[12117..12185).28" Target="10312:[77654..77700).9" />
<Link Source="10060:[12199..12238).37" Target="10312:[77654..77700).9" />
<Link Source="10060:[12199..12238).38" Target="10060:[11990..12013).10" />
<Link Source="10060:[12199..12238).38" Target="10060:[12199..12238).37" />
<Link Source="10060:[12199..12238).38" Target="10312:[77654..77700).9" />
<Link Source="10346:[11710..11746).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[2155..2260).10" Target="10312:[77654..77700).9" />
<Link Source="10286:[2155..2260).10" Target="10346:[11710..11746).10" />
<Link Source="10286:[2191..2245).37" Target="10286:[2155..2260).10" />
<Link Source="10286:[2191..2245).37" Target="10312:[78513..78552).10" />
<Link Source="10286:[2191..2245).37" Target="10346:[11710..11746).10" />
<Link Source="10286:[2191..2245).38" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).38" Target="10346:[11710..11746).10" />
<Link Source="10286:[2198..2244).10" Target="10346:[11710..11746).10" />
<Link Source="10298:[471..492).88" Target="10286:[2191..2245).37" />
<Link Source="10298:[471..492).88" Target="10286:[2198..2244).10" />
<Link Source="10298:[494..511).88" Target="10286:[2191..2245).38" />
<Link Source="10298:[494..511).88" Target="10286:[2198..2244).10" />
<Link Source="10345:[28225..28251).10" Target="10298:[471..492).88" />
<Link Source="10345:[28225..28251).10" Target="10312:[78513..78552).10" />
<Link Source="10345:[28927..28940).19" Target="10312:[78513..78552).10" />
<Link Source="10346:[12205..12212).10" Target="10312:[78513..78552).10" />
<Link Source="10354:[3720..3803).517" Target="10354:[3684..3818).66" />
<Link Source="10354:[3720..3803).517" Target="10312:[78513..78552).10" />
<Link Source="10354:[3720..3803).517" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).517" Target="10312:[4685..4699).28" />
<Link Source="10312:[4680..4787).59" Target="10354:[3720..3803).517" />
<Link Source="10312:[4680..4787).59" Target="10312:[77654..77700).9" />
<Link Source="10312:[4749..4764).10" Target="10312:[77654..77700).9" />
<Link Source="10312:[4749..4764).10" Target="10312:[4680..4787).59" />
<Link Source="10312:[5087..5101).10" Target="10312:[4749..4764).10" />
<Link Source="10312:[5087..5101).10" Target="10312:[77654..77700).9" />
<Link Source="10319:[43799..44676).55" Target="10312:[77654..77700).9" />
<Link Source="10319:[43853..43873).10" Target="10312:[77654..77700).9" />
<Link Source="10319:[41088..41107).10" Target="10319:[43799..44676).55" />
<Link Source="10319:[41088..41107).10" Target="10319:[43853..43873).10" />
<Link Source="10319:[41138..41158).10" Target="10319:[43853..43873).10" />
<Link Source="10354:[4919..5009).69" Target="10319:[41088..41107).10" />
<Link Source="10354:[4919..5009).69" Target="10319:[41138..41158).10" />
<Link Source="10354:[4094..4107).89" Target="10354:[4919..5009).69" />
<Link Source="10354:[4094..4107).89" Target="10312:[78513..78552).10" />
<Link Source="10354:[4094..4107).89" Target="10319:[41138..41158).10" />
<Link Source="10319:[41133..41220).19" Target="10354:[4094..4107).89" />
<Link Source="10319:[41133..41220).19" Target="10319:[43853..43873).10" />
<Link Source="10319:[41254..41268).10" Target="10319:[43853..43873).10" />
<Link Source="10354:[4525..4595).19" Target="10319:[41088..41107).10" />
<Link Source="10354:[4525..4595).19" Target="10319:[41254..41268).10" />
<Link Source="10354:[4561..4580).19" Target="10354:[4525..4595).19" />
<Link Source="10354:[4561..4580).19" Target="10312:[78513..78552).10" />
<Link Source="10354:[4561..4580).19" Target="10319:[41254..41268).10" />
<Link Source="10319:[41236..41680).37" Target="10354:[4561..4580).19" />
<Link Source="10319:[41236..41680).37" Target="10319:[43853..43873).10" />
<Link Source="10319:[41302..41665).10" Target="10319:[41236..41680).37" />
<Link Source="10319:[41302..41665).10" Target="10312:[78513..78552).10" />
<Link Source="10319:[41634..41646).19" Target="10319:[41302..41665).10" />
<Link Source="10319:[44751..44765).10" Target="10312:[77654..77700).9" />
<Link Source="10319:[84374..84391).10" Target="10319:[44751..44765).10" />
<Link Source="10319:[84374..84391).10" Target="10312:[77654..77700).9" />
<Link Source="10319:[84406..84447).10" Target="10319:[44751..44765).10" />
<Link Source="10319:[84406..84447).10" Target="10312:[77654..77700).9" />
<Link Source="10319:[84462..84508).10" Target="10319:[44751..44765).10" />
<Link Source="10319:[84462..84508).10" Target="10312:[77654..77700).9" />
<Link Source="10319:[84124..109887).10" Target="10312:[77654..77700).9" />
<Link Source="10319:[85320..85348).37" Target="10312:[77654..77700).9" />
<Link Source="10319:[85366..85400).37" Target="10312:[77654..77700).9" />
<Link Source="10319:[85467..85484).19" Target="10312:[77654..77700).9" />
<Link Source="10319:[104874..105336).28" Target="10312:[78513..78552).10" />
<Link Source="10319:[104874..105336).28" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).29" Target="10319:[104874..105336).28" />
<Link Source="10319:[104874..105336).29" Target="10319:[84124..109887).10" />
<Link Source="10319:[104874..105336).29" Target="10312:[78513..78552).10" />
<Link Source="10319:[76360..76385).8" Target="10312:[78513..78552).10" />
<Link Source="10319:[76387..76402).8" Target="10312:[78513..78552).10" />
<Link Source="10319:[76494..76582).29" Target="10312:[78513..78552).10" />
<Link Source="10319:[84691..84861).19" Target="10312:[78513..78552).10" />
<Link Source="10319:[84691..84861).19" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).19" Target="10312:[77654..77700).9" />
<Link Source="10319:[84764..84846).55" Target="10312:[77654..77700).9" />
<Link Source="10319:[84764..84846).55" Target="10319:[84691..84861).19" />
<Link Source="10319:[84764..84846).56" Target="10319:[84691..84861).19" />
<Link Source="10319:[84764..84846).58" Target="10312:[78513..78552).10" />
<Link Source="10319:[84764..84846).58" Target="10319:[84691..84861).19" />
<Link Source="10319:[84764..84845).10" Target="10319:[84691..84861).19" />
<Link Source="10306:[358886..358901).10" Target="10319:[84764..84846).55" />
<Link Source="10306:[358886..358901).10" Target="10319:[84764..84845).10" />
<Link Source="10306:[358903..358930).10" Target="10319:[84764..84846).56" />
<Link Source="10306:[358903..358930).10" Target="10319:[84764..84845).10" />
<Link Source="10306:[358932..358945).10" Target="10319:[84764..84846).58" />
<Link Source="10306:[358932..358945).10" Target="10319:[84764..84845).10" />
<Link Source="10306:[358947..358972).10" Target="10319:[84764..84846).55" />
<Link Source="10306:[358947..358972).10" Target="10319:[84764..84845).10" />
<Link Source="10306:[358838..360009).10" Target="10319:[84124..109887).10" />
<Link Source="10306:[358838..360009).10" Target="10319:[84764..84845).10" />
<Link Source="10306:[358998..359998).55" Target="10306:[358932..358945).10" />
<Link Source="10306:[358998..359998).55" Target="10312:[78513..78552).10" />
<Link Source="10306:[358998..359998).55" Target="10319:[84764..84845).10" />
<Link Source="10306:[358998..359998).56" Target="10319:[84764..84845).10" />
<Link Source="10319:[44948..45377).19" Target="10312:[78513..78552).10" />
<Link Source="10319:[44948..45377).19" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).19" Target="10312:[77654..77700).9" />
<Link Source="10354:[11428..11441).10" Target="10312:[77654..77700).9" />
<Link Source="10319:[45408..45422).10" Target="10312:[77654..77700).9" />
<Link Source="10287:[2377..2471).19" Target="10312:[78513..78552).10" />
<Link Source="10287:[2377..2471).19" Target="10312:[77654..77700).9" />
<Link Source="10287:[791..833).19" Target="10312:[78513..78552).10" />
<Link Source="10287:[912..927).10" Target="10312:[78513..78552).10" />
<Link Source="10287:[912..919).10" Target="10287:[912..927).10" />
<Link Source="10287:[912..919).10" Target="10312:[78513..78552).10" />
<Link Source="10287:[945..972).10" Target="10312:[78513..78552).10" />
<Link Source="10287:[945..963).10" Target="10287:[945..972).10" />
<Link Source="10287:[945..963).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[21546..21561).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[21563..21583).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[22086..22108).10" Target="10286:[21546..21561).10" />
<Link Source="10286:[22086..22108).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[22110..22130).10" Target="10286:[21563..21583).10" />
<Link Source="10286:[22110..22130).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[15616..15690).46" Target="10312:[78513..78552).10" />
<Link Source="10286:[15616..15690).47" Target="10312:[78513..78552).10" />
<Link Source="10286:[15616..15690).47" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[23124..23146).10" Target="10286:[22086..22108).10" />
<Link Source="10286:[23124..23146).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[23161..23181).10" Target="10286:[22110..22130).10" />
<Link Source="10286:[23161..23181).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[23281..23301).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[23380..23684).64" Target="10312:[78513..78552).10" />
<Link Source="10286:[23380..23684).64" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).19" Target="10312:[78513..78552).10" />
<Link Source="10286:[23893..24026).19" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).19" Target="10286:[23161..23181).10" />
<Link Source="10286:[24545..24641).19" Target="10312:[78513..78552).10" />
<Link Source="10286:[24655..25349).10" Target="10286:[24545..24641).19" />
<Link Source="10286:[24655..25349).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[26910..26935).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[26952..26974).10" Target="10286:[23124..23146).10" />
<Link Source="10286:[26952..26974).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[27002..27022).10" Target="10286:[23281..23301).10" />
<Link Source="10286:[27002..27022).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[27048..27088).37" Target="10312:[78513..78552).10" />
<Link Source="10286:[27048..27088).38" Target="10286:[26910..26935).10" />
<Link Source="10286:[27048..27088).38" Target="10286:[27048..27088).37" />
<Link Source="10286:[27048..27088).38" Target="10312:[78513..78552).10" />
<Link Source="10286:[27208..27236).19" Target="10312:[78513..78552).10" />
<Link Source="10286:[27250..27722).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[27738..27845).28" Target="10312:[78513..78552).10" />
<Link Source="10286:[27738..27845).29" Target="10286:[27208..27236).19" />
<Link Source="10286:[27738..27845).29" Target="10286:[27738..27845).28" />
<Link Source="10286:[27738..27845).29" Target="10312:[78513..78552).10" />
<Link Source="10286:[27861..27873).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[26281..26812).10" Target="10286:[27861..27873).10" />
<Link Source="10286:[26281..26812).10" Target="10312:[78513..78552).10" />
<Link Source="10286:[26450..26769).10" Target="10286:[24545..24641).19" />
<Link Source="10286:[26450..26769).10" Target="10286:[26281..26812).10" />
<Link Source="10287:[1680..1716).10" Target="10312:[78513..78552).10" />
<Link Source="10287:[1680..1716).10" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).10" Target="10287:[1680..1716).10" />
<Link Source="10287:[1683..1690).10" Target="10287:[912..919).10" />
<Link Source="10287:[1683..1690).10" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).19" Target="10287:[1683..1690).10" />
<Link Source="10287:[1683..1716).19" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).19" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).19" Target="10287:[1683..1716).19" />
<Link Source="10319:[51935..52244).19" Target="10319:[13969..14029).1" />
<Link Source="25002:[4446..4475).1" Target="10312:[78513..78552).10" />
<Link Source="25002:[4446..4475).1" Target="28001:[40426..41067).3" />
<Link Source="25002:[4446..4475).2" Target="25002:[4284..4323).1" />
<Link Source="25002:[4446..4475).2" Target="28001:[40426..41067).3" />
<Link Source="25002:[4446..4474).1" Target="28001:[40426..41067).3" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4475).1" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4475).2" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[2296..2334).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[2336..2375).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2450).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2451).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2451).2" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[1554..1589).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[1591..1630).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).3" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1702).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1703).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1703).2" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1703).3" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2533..2565).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2611..2759).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).2" Target="25002:[2775..2867).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[40426..41068).2" />
<Link Source="25002:[2775..2867).2" Target="28001:[40426..41067).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[40426..41067).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[2816..2827).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2842..2863).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3253..3278).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2878..2898).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2913..2931).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3464..3478).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3045..3076).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3091..3116).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[1383..1412).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3131..3176).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3191..3238).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2988..3030).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[1713..1727).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[1891..1900).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[1941..1960).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[9227..9476).11" />
<Link Source="25002:[2775..2867).2" Target="25003:[2816..2827).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[2842..2863).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3253..3278).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[2878..2898).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[2913..2931).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3464..3478).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3045..3076).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3091..3116).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[1383..1412).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3131..3176).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3191..3238).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[2988..3030).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[1713..1727).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[1891..1900).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[1941..1960).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[9227..9476).31" />
<Link Source="25002:[2775..2867).2" Target="28001:[40624..40741).1" />
<Link Source="25002:[2775..2867).2" Target="25007:[3901..4266).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[40928..41047).1" />
<Link Source="25002:[2775..2867).2" Target="25007:[3901..4266).20" />
<Link Source="25002:[2775..2867).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).6" Target="25002:[2775..2867).1" />
<Link Source="25002:[2775..2867).6" Target="25002:[2775..2867).4" />
<Link Source="25002:[2775..2867).6" Target="28001:[40426..41068).2" />
<Link Source="25002:[2775..2867).6" Target="28001:[40426..41067).1" />
<Link Source="25002:[2775..2867).6" Target="28001:[40426..41067).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[2816..2827).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2842..2863).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3253..3278).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2878..2898).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2913..2931).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3464..3478).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3045..3076).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3091..3116).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[1383..1412).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3131..3176).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3191..3238).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2988..3030).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[1713..1727).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[1891..1900).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[1941..1960).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[9227..9476).11" />
<Link Source="25002:[2775..2867).6" Target="25003:[2816..2827).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[2842..2863).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3253..3278).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[2878..2898).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[2913..2931).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3464..3478).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3045..3076).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3091..3116).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[1383..1412).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3131..3176).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3191..3238).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[2988..3030).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[1713..1727).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[1891..1900).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[1941..1960).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[9227..9476).31" />
<Link Source="25002:[2775..2867).6" Target="28001:[40624..40741).1" />
<Link Source="25002:[2775..2867).6" Target="25007:[3901..4266).1" />
<Link Source="25002:[2775..2867).6" Target="28001:[40928..41047).1" />
<Link Source="25002:[2775..2867).6" Target="25007:[3901..4266).20" />
<Link Source="25002:[2775..2867).6" Target="25002:[1656..1702).1" />
<Link Source="25003:[10448..10470).1" Target="25002:[2775..2867).6" />
<Link Source="25003:[10448..10470).1" Target="25002:[2775..2867).4" />
<Link Source="25003:[10451..10470).1" Target="25003:[10448..10470).1" />
<Link Source="25003:[10451..10470).1" Target="25002:[2775..2867).6" />
<Link Source="25003:[10451..10470).1" Target="25002:[2775..2867).4" />
<Link Source="25002:[2881..2977).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2881..2977).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).2" Target="25002:[2881..2977).1" />
<Link Source="25002:[2881..2977).2" Target="25003:[10451..10470).1" />
<Link Source="25002:[2881..2977).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[2881..2977).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[2881..2977).4" />
<Link Source="25002:[2881..2977).6" Target="25003:[10451..10470).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[1656..1702).1" />
<Link Source="25003:[10526..10550).1" Target="25002:[2881..2977).6" />
<Link Source="25003:[10526..10550).1" Target="25002:[2881..2977).4" />
<Link Source="25003:[10529..10550).1" Target="25003:[10526..10550).1" />
<Link Source="25003:[10529..10550).1" Target="25002:[2881..2977).6" />
<Link Source="25003:[10529..10550).1" Target="25002:[2881..2977).4" />
<Link Source="25002:[2991..3166).1" Target="25002:[2501..2531).1" />
<Link Source="25002:[2991..3166).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2567..2585).1" />
<Link Source="25002:[2991..3166).2" Target="25003:[10451..10470).1" />
<Link Source="25002:[2991..3166).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).2" />
<Link Source="25002:[2991..3166).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).8" Target="25002:[1656..1702).1" />
<Link Source="25003:[4933..4945).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4933..4945).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4947..4965).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4947..4965).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4967..5002).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4967..5002).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5004..5041).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5004..5041).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4904..7352).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4904..7352).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[912..917).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[912..917).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[950..967).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[950..967).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1000..1013).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1000..1013).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1048..1062).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1048..1062).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1099..1109).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1099..1109).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1151..1165).19" Target="25003:[4904..7352).1" />
<Link Source="25003:[1151..1165).19" Target="25002:[2991..3166).8" />
<Link Source="25003:[1276..1303).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1276..1303).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1336..1350).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1336..1350).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1460..1479).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1460..1479).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1527..1548).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1527..1548).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1673..1689).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1673..1689).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[5067..5072).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5067..5072).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5067..5072).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5067..5072).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5096..5113).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5096..5113).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5096..5113).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5096..5113).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5149..5162).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5149..5162).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5149..5162).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5149..5162).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5194..5203).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5194..5203).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5194..5203).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5194..5203).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5253..5275).1" Target="25003:[4967..5002).1" />
<Link Source="25003:[5253..5275).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5231..5324).1" Target="25003:[5253..5275).1" />
<Link Source="25003:[5231..5250).1" Target="25003:[5231..5324).1" />
<Link Source="25003:[5231..5250).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5231..5250).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5362..5386).1" Target="25003:[5004..5041).1" />
<Link Source="25003:[5362..5386).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5338..5428).1" Target="25003:[5362..5386).1" />
<Link Source="25003:[5338..5359).1" Target="25003:[5338..5428).1" />
<Link Source="25003:[5338..5359).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5338..5359).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5444..5476).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).2" Target="25003:[4933..4945).1" />
<Link Source="25003:[5490..6130).2" Target="25002:[2991..3166).4" />
<Link Source="25003:[5490..6130).2" Target="25003:[5490..6130).1" />
<Link Source="25003:[5490..6130).2" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).3" Target="25003:[4933..4945).1" />
<Link Source="25003:[5490..6130).3" Target="25002:[2991..3166).4" />
<Link Source="25003:[5490..6130).3" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).4" Target="EXTERNAL" />
<Link Source="25003:[5490..6130).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[5744..5776).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5744..5776).1" Target="25003:[5490..6130).2" />
<Link Source="25003:[5794..6115).1" Target="25003:[5490..6130).2" />
<Link Source="25003:[5794..6115).2" Target="25003:[5744..5776).1" />
<Link Source="25003:[5794..6115).2" Target="25003:[5794..6115).1" />
<Link Source="25003:[5794..6115).2" Target="25003:[5490..6130).2" />
<Link Source="25003:[6001..6015).1" Target="25003:[5744..5776).1" />
<Link Source="25003:[6001..6015).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6001..6015).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6001..6015).1" Target="25003:[5794..6115).2" />
<Link Source="25003:[6081..6086).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[6081..6086).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6081..6086).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6081..6086).1" Target="25003:[5794..6115).2" />
<Link Source="25003:[6146..6175).1" Target="25003:[4947..4965).1" />
<Link Source="25003:[6146..6175).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6146..6175).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[6208..7260).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6208..7260).1" Target="25003:[6146..6175).1" />
<Link Source="25003:[6208..7260).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[6276..6580).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6276..6580).1" Target="25003:[5194..5203).1" />
<Link Source="25003:[6276..6580).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6276..6580).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[6482..6561).1" Target="25003:[6276..6580).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[6276..6580).1" />
<Link Source="25003:[6600..7098).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[5744..5776).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[6600..7098).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[6208..7260).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[5744..5776).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[6600..7098).2" />
<Link Source="25003:[7118..7245).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[6659..6669).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[6208..7260).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6659..6669).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6482..6561).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6208..7260).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[5194..5203).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[7276..7341).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[7276..7290).1" Target="25003:[7276..7341).1" />
<Link Source="25003:[7276..7290).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[7276..7290).1" Target="25002:[2991..3166).8" />
<Link Source="25002:[2991..3166).9" Target="25002:[2991..3166).4" />
<Link Source="25002:[2991..3166).9" Target="25003:[7276..7341).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6081..6086).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5096..5113).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5149..5162).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6482..6496).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6659..6669).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[7276..7290).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[1276..1303).7" />
<Link Source="25002:[2991..3166).9" Target="25003:[6001..6015).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6146..6175).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5231..5250).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5338..5359).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[1673..1689).7" />
<Link Source="25002:[2991..3166).9" Target="25003:[4904..7352).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5194..5203).1" />
<Link Source="25002:[2991..3166).9" Target="25002:[1656..1702).1" />
<Link Source="25003:[5067..5072).2" Target="25003:[4933..4945).1" />
<Link Source="25003:[5067..5072).2" Target="25002:[2991..3166).9" />
<Link Source="25003:[5067..5072).2" Target="25003:[4904..7352).1" />
<Link Source="25003:[5067..5072).2" Target="25002:[2991..3166).8" />
<Link Source="25003:[7118..7245).8" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).8" Target="25002:[2991..3166).9" />
<Link Source="25003:[7118..7245).8" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).8" Target="25003:[6208..7260).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3341..3730).2" Target="25002:[3341..3730).1" />
<Link Source="25002:[3341..3730).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[3341..3730).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[3401..3434).1" Target="25002:[3341..3730).2" />
<Link Source="25002:[3401..3434).2" Target="25002:[3401..3434).1" />
<Link Source="25002:[3401..3434).2" Target="25002:[2991..3166).9" />
<Link Source="25002:[3401..3434).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[3401..3434).2" Target="25002:[3341..3730).2" />
<Link Source="25003:[10591..10601).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10591..10601).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10563..13732).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10563..13732).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10627..10664).1" Target="25003:[10591..10601).1" />
<Link Source="25003:[10627..10664).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10680..10725).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10680..10725).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[10680..10725).2" Target="25003:[10680..10725).1" />
<Link Source="25003:[10680..10725).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[10741..10799).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10741..10799).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10741..10799).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10741..10799).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[10741..10799).2" Target="25002:[3401..3434).2" />
<Link Source="25003:[10741..10799).2" Target="25003:[10741..10799).1" />
<Link Source="25003:[10741..10799).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[10815..10891).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10815..10891).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10815..10891).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10815..10891).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10907..10975).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10907..10975).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10907..10975).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10907..10975).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10991..11148).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10991..11148).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10991..11148).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[11059..11133).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10991..11148).1" />
<Link Source="25003:[11164..11464).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11164..11464).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[11164..11464).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11164..11464).2" Target="25003:[11164..11464).1" />
<Link Source="25003:[11164..11464).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[11224..11449).1" Target="25003:[11164..11464).2" />
<Link Source="25003:[11294..11430).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[11294..11430).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[11294..11430).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[11294..11430).1" Target="25003:[11224..11449).1" />
<Link Source="25003:[11480..11903).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11480..11903).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[11480..11903).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11480..11903).2" Target="25003:[11480..11903).1" />
<Link Source="25003:[11480..11903).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[11917..12344).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11917..12344).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[11917..12344).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11917..12344).2" Target="25003:[11917..12344).1" />
<Link Source="25003:[11917..12344).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[12436..12535).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[12436..12535).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[12436..12535).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[12436..12535).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[12651..13498).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[12651..13498).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[12651..13498).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[12651..13498).2" Target="25003:[12651..13498).1" />
<Link Source="25003:[12651..13498).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[12855..12915).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13006..13029).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[1971..2761).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[1971..2761).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[2047..2709).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[1971..2761).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[2047..2709).2" Target="25003:[2047..2709).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[13006..13029).1" />
<Link Source="25003:[2321..2694).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2321..2694).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[2321..2694).1" Target="25003:[2047..2709).2" />
<Link Source="25003:[2321..2694).2" Target="25003:[2047..2709).2" />
<Link Source="25003:[2321..2340).1" Target="25003:[2321..2694).1" />
<Link Source="25003:[2321..2340).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2321..2340).1" Target="25003:[2047..2709).2" />
<Link Source="25003:[2723..2750).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2723..2750).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[2723..2750).1" Target="25003:[2321..2340).1" />
<Link Source="25003:[2723..2750).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[12994..13030).1" Target="25003:[2723..2750).1" />
<Link Source="25003:[12994..13030).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13060..13085).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[1971..2761).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[1971..2761).2" Target="25003:[13060..13085).1" />
<Link Source="25003:[2047..2709).4" Target="25003:[13060..13085).1" />
<Link Source="25003:[2047..2709).5" Target="25003:[1971..2761).2" />
<Link Source="25003:[2047..2709).5" Target="25003:[10741..10799).2" />
<Link Source="25003:[2047..2709).5" Target="25003:[2321..2340).1" />
<Link Source="25003:[2047..2709).5" Target="25003:[2047..2709).4" />
<Link Source="25003:[2047..2709).5" Target="25003:[13060..13085).1" />
<Link Source="25003:[2723..2750).2" Target="25003:[1971..2761).2" />
<Link Source="25003:[2723..2750).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[2723..2750).2" Target="25003:[2321..2340).1" />
<Link Source="25003:[2723..2750).2" Target="25003:[2047..2709).5" />
<Link Source="25003:[2723..2750).2" Target="25003:[13060..13085).1" />
<Link Source="25003:[13048..13086).1" Target="25003:[2723..2750).2" />
<Link Source="25003:[13048..13086).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13104..13483).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[13104..13483).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[13104..13483).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[13104..13483).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13393..13464).1" Target="25003:[12994..13030).1" />
<Link Source="25003:[13393..13464).1" Target="25003:[13104..13483).1" />
<Link Source="25003:[13393..13464).2" Target="25003:[13048..13086).1" />
<Link Source="25003:[13393..13464).2" Target="25003:[13104..13483).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[13393..13464).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[13393..13464).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[10741..10799).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2340).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[2047..2709).5" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2694).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2694).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[13104..13483).1" />
<Link Source="25003:[13514..13693).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[13514..13693).1" Target="25003:[13393..13464).3" />
<Link Source="25003:[13514..13693).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[13514..13693).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[13709..13721).1" Target="25002:[3401..3434).1" />
<Link Source="25002:[3401..3434).5" Target="25002:[3401..3434).2" />
<Link Source="25002:[3401..3434).5" Target="25003:[13709..13721).1" />
<Link Source="25002:[3401..3434).5" Target="25003:[13393..13464).3" />
<Link Source="25002:[3401..3434).5" Target="25002:[3341..3730).2" />
<Link Source="25002:[3452..3715).1" Target="25002:[3341..3730).2" />
<Link Source="25002:[3452..3715).2" Target="25002:[3401..3434).5" />
<Link Source="25002:[3452..3715).2" Target="25002:[3452..3715).1" />
<Link Source="25002:[3452..3715).2" Target="25002:[3341..3730).2" />
<Link Source="25002:[3508..3534).1" Target="25002:[3401..3434).5" />
<Link Source="25002:[3508..3534).1" Target="25002:[3452..3715).2" />
<Link Source="25003:[10680..10725).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[10815..10891).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[10907..10975).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[10991..11148).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[11059..11133).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[11059..11133).3" Target="25003:[10991..11148).2" />
<Link Source="25003:[11164..11464).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[11224..11449).4" Target="25003:[11164..11464).4" />
<Link Source="25003:[11294..11430).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[11294..11430).3" Target="25003:[11224..11449).4" />
<Link Source="25003:[11480..11903).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[11917..12344).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[12436..12535).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[12855..12915).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[13514..13693).5" Target="25002:[3508..3534).1" />
<Link Source="25002:[3840..3992).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[2991..3166).9" />
<Link Source="25002:[3840..3992).2" Target="25002:[3508..3534).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[3840..3992).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[2533..2565).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[2501..2531).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[4126..4179).1" Target="25002:[1656..1702).1" />
<Link Source="25003:[17577..17609).1" Target="25002:[4102..4181).3" />
<Link Source="25003:[17577..17609).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17611..17641).1" Target="25002:[4102..4181).4" />
<Link Source="25003:[17611..17641).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17667..17688).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17702..17728).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[17742..17827).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).2" Target="25003:[17742..17827).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[17742..17827).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[17757..17803).1" Target="25003:[17742..17827).2" />
<Link Source="25003:[17757..17803).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).6" Target="25003:[17667..17688).1" />
<Link Source="25003:[17742..17827).6" Target="25003:[17757..17803).1" />
<Link Source="25003:[17841..17904).1" Target="25003:[17742..17827).6" />
<Link Source="25003:[17841..17904).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17918..17965).1" Target="25003:[17742..17827).6" />
<Link Source="25003:[17918..17965).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17936..17956).1" Target="25003:[17918..17965).1" />
<Link Source="25003:[17936..17956).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[17979..18071).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).2" Target="25003:[17979..18071).1" />
<Link Source="25003:[17979..18071).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[17979..18071).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).6" Target="25003:[17979..18071).1" />
<Link Source="25003:[17979..18071).6" Target="25003:[17979..18071).4" />
<Link Source="25003:[17979..18071).6" Target="25002:[3508..3534).1" />
<Link Source="25003:[17979..18071).6" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18085..18181).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).2" Target="25003:[18085..18181).1" />
<Link Source="25003:[18085..18181).2" Target="25003:[17979..18071).6" />
<Link Source="25003:[18085..18181).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).6" Target="25003:[18085..18181).1" />
<Link Source="25003:[18085..18181).6" Target="25003:[18085..18181).4" />
<Link Source="25003:[18085..18181).6" Target="25003:[17979..18071).6" />
<Link Source="25003:[18085..18181).6" Target="25002:[4126..4179).1" />
<Link Source="25003:[18197..18490).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18197..18490).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18201..18226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18197..18490).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[22962..23812).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[23085..23122).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[23085..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21725..21759).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[21605..21640).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).2" Target="25003:[21773..22187).1" />
<Link Source="25003:[21773..22187).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[21773..22187).2" Target="25003:[18201..18226).1" />
<Link Source="25003:[21845..21956).1" Target="25003:[21773..22187).2" />
<Link Source="25003:[21974..22136).1" Target="25003:[21773..22187).2" />
<Link Source="25003:[21974..22136).2" Target="25003:[21725..21759).1" />
<Link Source="25003:[21974..22136).2" Target="25003:[21974..22136).1" />
<Link Source="25003:[21974..22136).2" Target="25003:[21773..22187).2" />
<Link Source="25003:[22154..22172).1" Target="25003:[21773..22187).2" />
<Link Source="25003:[21974..22136).6" Target="25003:[22154..22172).1" />
<Link Source="25003:[21974..22136).6" Target="25003:[21974..22136).1" />
<Link Source="25003:[21974..22136).6" Target="25003:[21773..22187).2" />
<Link Source="25003:[21974..22136).7" Target="25003:[22154..22172).1" />
<Link Source="25003:[21974..22136).7" Target="25003:[18085..18181).6" />
<Link Source="25003:[21974..22136).7" Target="25003:[21773..22187).2" />
<Link Source="25003:[21974..22136).8" Target="25003:[21773..22187).2" />
<Link Source="25003:[21974..22136).8" Target="25003:[18085..18181).6" />
<Link Source="25003:[21994..22058).1" Target="25003:[21773..22187).2" />
<Link Source="25003:[23158..23173).1" Target="25003:[21974..22136).7" />
<Link Source="25003:[23158..23173).1" Target="25003:[21994..22058).1" />
<Link Source="25003:[23175..23190).1" Target="25003:[21974..22136).8" />
<Link Source="25003:[23175..23190).1" Target="25003:[21994..22058).1" />
<Link Source="25003:[23139..23801).1" Target="25003:[21666..21711).1" />
<Link Source="25003:[23139..23801).1" Target="25003:[21994..22058).1" />
<Link Source="25003:[23224..23425).1" Target="25003:[21994..22058).1" />
<Link Source="25003:[23224..23425).2" Target="25003:[23158..23173).1" />
<Link Source="25003:[23224..23425).2" Target="25003:[23224..23425).1" />
<Link Source="25003:[23224..23425).2" Target="25003:[21994..22058).1" />
<Link Source="25003:[23445..23528).1" Target="25003:[21994..22058).1" />
<Link Source="25003:[23445..23528).2" Target="25003:[23175..23190).1" />
<Link Source="25003:[23445..23528).2" Target="25003:[23445..23528).1" />
<Link Source="25003:[23445..23528).2" Target="25003:[21994..22058).1" />
<Link Source="25003:[23548..23600).1" Target="25003:[23175..23190).1" />
<Link Source="25003:[23548..23600).1" Target="25003:[18085..18181).6" />
<Link Source="25003:[23548..23600).1" Target="25003:[21994..22058).1" />
<Link Source="25003:[23548..23600).2" Target="25003:[23158..23173).1" />
<Link Source="25003:[23548..23600).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[23548..23600).2" Target="25003:[23548..23600).1" />
<Link Source="25003:[23548..23600).2" Target="25003:[21994..22058).1" />
<Link Source="25003:[23618..23712).1" Target="25003:[21994..22058).1" />
<Link Source="25003:[23618..23712).2" Target="25003:[23548..23600).2" />
<Link Source="25003:[23618..23712).2" Target="25003:[23618..23712).1" />
<Link Source="25003:[23618..23712).2" Target="25003:[21994..22058).1" />
<Link Source="25003:[23677..23693).1" Target="25003:[23548..23600).2" />
<Link Source="25003:[23677..23693).1" Target="25003:[23618..23712).2" />
<Link Source="25003:[22201..22213).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[18197..18490).2" Target="25003:[22201..22213).1" />
<Link Source="25003:[18197..18490).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18453..18475).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[18453..18475).1" Target="25003:[18197..18490).2" />
<Link Source="25003:[18462..18474).1" Target="25003:[18197..18490).2" />
<Link Source="25003:[21372..21407).1" Target="25003:[18453..18475).1" />
<Link Source="25003:[21372..21407).1" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).1" Target="25003:[21372..21407).1" />
<Link Source="25003:[21433..21546).1" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).2" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).4" Target="25003:[23085..23122).1" />
<Link Source="25003:[21433..21546).4" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).1" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).2" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).4" />
<Link Source="25003:[21433..21546).5" Target="25003:[18085..18181).6" />
<Link Source="25003:[21433..21546).5" Target="25003:[18462..18474).1" />
<Link Source="25003:[18506..18543).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18557..18581).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18557..18581).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18658..18664).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18678..18713).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18557..18581).1" />
<Link Source="25003:[18678..18713).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[18727..18781).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18795..18929).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).2" Target="25003:[18795..18929).1" />
<Link Source="25003:[18795..18929).2" Target="25003:[21433..21546).5" />
<Link Source="25003:[18795..18929).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18855..18914).1" Target="25003:[18795..18929).2" />
<Link Source="25003:[18855..18914).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[18855..18914).2" Target="25003:[18795..18929).2" />
<Link Source="25003:[18872..18912).1" Target="25003:[18795..18929).2" />
<Link Source="25003:[22283..22306).1" Target="25003:[18855..18914).1" />
<Link Source="25003:[22283..22306).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22308..22323).1" Target="25003:[18855..18914).2" />
<Link Source="25003:[22308..22323).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[22349..22404).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[22308..22323).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[18872..18912).1" />
<Link Source="25003:[22391..22403).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[14779..17530).1" Target="25003:[22283..22306).1" />
<Link Source="25003:[14779..17530).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14837..14866).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14882..14907).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[14882..14907).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[22391..22403).1" />
<Link Source="25003:[14921..15244).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[21433..21546).5" />
<Link Source="25003:[14921..15244).2" Target="25003:[14921..15244).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15100..15131).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15100..15131).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[15100..15131).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15100..15131).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[15100..15131).2" Target="25003:[15100..15131).1" />
<Link Source="25003:[15100..15131).2" Target="25003:[14882..14907).3" />
<Link Source="25003:[15100..15131).2" Target="25003:[14921..15244).2" />
<Link Source="25003:[15149..15164).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15149..15164).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15149..15164).3" Target="25003:[15149..15164).1" />
<Link Source="25003:[15149..15164).3" Target="25003:[15100..15131).2" />
<Link Source="25003:[15149..15164).3" Target="25003:[14921..15244).2" />
<Link Source="25003:[15182..15229).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15182..15229).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[15182..15229).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15182..15229).5" Target="25003:[14837..14866).1" />
<Link Source="25003:[15182..15229).5" Target="25003:[15182..15229).1" />
<Link Source="25003:[15182..15229).5" Target="25003:[15149..15164).3" />
<Link Source="25003:[15182..15229).5" Target="25003:[14921..15244).2" />
<Link Source="25003:[15260..15767).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[21433..21546).5" />
<Link Source="25003:[15260..15767).2" Target="25003:[15260..15767).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15320..15717).1" Target="25003:[15260..15767).2" />
<Link Source="25003:[15632..15650).1" Target="25003:[15320..15717).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[15632..15650).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[15182..15229).5" />
<Link Source="25003:[15632..15650).3" Target="25003:[15320..15717).1" />
<Link Source="25003:[15672..15698).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15672..15698).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[15672..15698).1" Target="25003:[15320..15717).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[15672..15698).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[15632..15650).3" />
<Link Source="25003:[15672..15698).2" Target="25003:[15320..15717).1" />
<Link Source="25003:[15737..15752).1" Target="25003:[15260..15767).2" />
<Link Source="25003:[15737..15752).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15737..15752).3" Target="25003:[15737..15752).1" />
<Link Source="25003:[15737..15752).3" Target="25003:[15672..15698).2" />
<Link Source="25003:[15737..15752).3" Target="25003:[15260..15767).2" />
<Link Source="25003:[15783..15883).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15783..15883).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[15783..15883).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15899..15914).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[15899..15914).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[15737..15752).3" />
<Link Source="25003:[15899..15914).3" Target="25003:[22391..22403).1" />
<Link Source="25003:[15930..16520).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[21433..21546).5" />
<Link Source="25003:[15930..16520).2" Target="25003:[15930..16520).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15986..16015).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[15986..16015).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15986..16015).3" Target="25003:[15986..16015).1" />
<Link Source="25003:[15986..16015).3" Target="25003:[15899..15914).3" />
<Link Source="25003:[15986..16015).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16055..16078).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16033..16095).1" Target="25003:[16055..16078).1" />
<Link Source="25003:[16033..16095).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16113..16472).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16113..16472).3" Target="25003:[16033..16095).1" />
<Link Source="25003:[16113..16472).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16202..16218).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16202..16218).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16202..16218).3" Target="25003:[16202..16218).1" />
<Link Source="25003:[16202..16218).3" Target="25003:[15986..16015).3" />
<Link Source="25003:[16202..16218).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).1" Target="25003:[16033..16095).1" />
<Link Source="25003:[16240..16275).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[16240..16275).2" Target="25003:[16240..16275).1" />
<Link Source="25003:[16240..16275).2" Target="25003:[16202..16218).3" />
<Link Source="25003:[16240..16275).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16297..16313).3" Target="25003:[16297..16313).1" />
<Link Source="25003:[16297..16313).3" Target="25003:[16240..16275).2" />
<Link Source="25003:[16297..16313).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[16335..16453).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16414..16430).1" Target="25003:[16335..16453).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[16414..16430).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[16297..16313).3" />
<Link Source="25003:[16414..16430).3" Target="25003:[16335..16453).1" />
<Link Source="25003:[16490..16505).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16490..16505).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16490..16505).3" Target="25003:[16490..16505).1" />
<Link Source="25003:[16490..16505).3" Target="25003:[16414..16430).3" />
<Link Source="25003:[16490..16505).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16536..16829).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16536..16829).2" Target="25003:[16536..16829).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[16596..16624).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16596..16624).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16596..16624).3" Target="25003:[16596..16624).1" />
<Link Source="25003:[16596..16624).3" Target="25003:[16490..16505).3" />
<Link Source="25003:[16596..16624).3" Target="25003:[16536..16829).2" />
<Link Source="25003:[16642..16683).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16642..16683).4" Target="25003:[14837..14866).1" />
<Link Source="25003:[16642..16683).4" Target="25003:[16642..16683).1" />
<Link Source="25003:[16642..16683).4" Target="25003:[16596..16624).3" />
<Link Source="25003:[16642..16683).4" Target="25003:[16536..16829).2" />
<Link Source="25003:[16701..16717).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16701..16717).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16701..16717).3" Target="25003:[16701..16717).1" />
<Link Source="25003:[16701..16717).3" Target="25003:[16642..16683).4" />
<Link Source="25003:[16701..16717).3" Target="25003:[16536..16829).2" />
<Link Source="25003:[16735..16781).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16735..16781).4" Target="25003:[14837..14866).1" />
<Link Source="25003:[16735..16781).4" Target="25003:[16735..16781).1" />
<Link Source="25003:[16735..16781).4" Target="25003:[16701..16717).3" />
<Link Source="25003:[16735..16781).4" Target="25003:[16536..16829).2" />
<Link Source="25003:[16799..16814).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16799..16814).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16799..16814).3" Target="25003:[16799..16814).1" />
<Link Source="25003:[16799..16814).3" Target="25003:[16735..16781).4" />
<Link Source="25003:[16799..16814).3" Target="25003:[16536..16829).2" />
<Link Source="25003:[16845..16954).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[16845..16954).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16845..16954).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16970..17144).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16970..17144).2" Target="25003:[16970..17144).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17160..17340).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[17160..17340).2" Target="25003:[17160..17340).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17356..17482).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[17356..17482).2" Target="25003:[17356..17482).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17498..17519).1" Target="25003:[14837..14866).1" />
<Link Source="25003:[17498..17519).1" Target="25003:[16799..16814).3" />
<Link Source="25003:[17498..17519).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[22349..22404).7" Target="25003:[17498..17519).1" />
<Link Source="25003:[22349..22404).7" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).8" Target="25003:[22349..22404).4" />
<Link Source="25003:[22349..22404).8" Target="25003:[22349..22404).7" />
<Link Source="25003:[22349..22404).8" Target="25003:[18872..18912).1" />
<Link Source="25003:[18855..18914).5" Target="25003:[18727..18781).1" />
<Link Source="25003:[18855..18914).5" Target="25003:[22349..22404).8" />
<Link Source="25003:[18855..18914).5" Target="25003:[18795..18929).2" />
<Link Source="25003:[18855..18914).7" Target="25003:[17936..17956).1" />
<Link Source="25003:[18855..18914).7" Target="25003:[16113..16472).3" />
<Link Source="25003:[22308..22323).2" Target="25003:[18855..18914).7" />
<Link Source="25003:[22308..22323).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[22349..22404).10" Target="25003:[16113..16472).3" />
<Link Source="25003:[22349..22404).13" Target="25003:[22349..22404).10" />
<Link Source="25003:[22349..22404).13" Target="25003:[22308..22323).2" />
<Link Source="25003:[22349..22404).13" Target="25003:[16113..16472).3" />
<Link Source="25003:[14837..14866).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[14882..14907).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[14882..14907).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[14882..14907).6" Target="25003:[14882..14907).4" />
<Link Source="25003:[14882..14907).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[14921..15244).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[15100..15131).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[15100..15131).3" Target="25003:[14921..15244).4" />
<Link Source="25003:[15100..15131).4" Target="25003:[14837..14866).3" />
<Link Source="25003:[15100..15131).4" Target="25003:[15100..15131).3" />
<Link Source="25003:[15100..15131).4" Target="25003:[14882..14907).6" />
<Link Source="25003:[15100..15131).4" Target="25003:[14921..15244).4" />
<Link Source="25003:[15149..15164).4" Target="25003:[14921..15244).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15149..15164).6" Target="25003:[15149..15164).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[15100..15131).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[14921..15244).4" />
<Link Source="25003:[15182..15229).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[15182..15229).6" Target="25003:[14921..15244).4" />
<Link Source="25003:[15182..15229).10" Target="25003:[14837..14866).3" />
<Link Source="25003:[15182..15229).10" Target="25003:[15182..15229).6" />
<Link Source="25003:[15182..15229).10" Target="25003:[15149..15164).6" />
<Link Source="25003:[15182..15229).10" Target="25003:[14921..15244).4" />
<Link Source="25003:[15260..15767).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[15320..15717).13" Target="25003:[15260..15767).4" />
<Link Source="25003:[15632..15650).4" Target="25003:[15320..15717).13" />
<Link Source="25003:[15632..15650).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15632..15650).6" Target="25003:[15632..15650).4" />
<Link Source="25003:[15632..15650).6" Target="25003:[15182..15229).10" />
<Link Source="25003:[15632..15650).6" Target="25003:[15320..15717).13" />
<Link Source="25003:[15672..15698).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[15672..15698).3" Target="25003:[15320..15717).13" />
<Link Source="25003:[15672..15698).4" Target="25003:[14837..14866).3" />
<Link Source="25003:[15672..15698).4" Target="25003:[15672..15698).3" />
<Link Source="25003:[15672..15698).4" Target="25003:[15632..15650).6" />
<Link Source="25003:[15672..15698).4" Target="25003:[15320..15717).13" />
<Link Source="25003:[15737..15752).4" Target="25003:[15260..15767).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15737..15752).6" Target="25003:[15737..15752).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[15672..15698).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[15260..15767).4" />
<Link Source="25003:[15783..15883).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[15899..15914).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[15899..15914).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15899..15914).6" Target="25003:[15899..15914).4" />
<Link Source="25003:[15899..15914).6" Target="25003:[15737..15752).6" />
<Link Source="25003:[15899..15914).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[15986..16015).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[15986..16015).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15986..16015).6" Target="25003:[15986..16015).4" />
<Link Source="25003:[15986..16015).6" Target="25003:[15899..15914).6" />
<Link Source="25003:[15986..16015).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[16202..16218).9" Target="25003:[14837..14866).3" />
<Link Source="25003:[16202..16218).9" Target="25003:[16202..16218).1" />
<Link Source="25003:[16202..16218).9" Target="25003:[15986..16015).6" />
<Link Source="25003:[16202..16218).9" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).5" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16240..16275).6" Target="25003:[16240..16275).5" />
<Link Source="25003:[16240..16275).6" Target="25003:[16202..16218).9" />
<Link Source="25003:[16240..16275).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).9" Target="25003:[14837..14866).3" />
<Link Source="25003:[16297..16313).9" Target="25003:[16297..16313).1" />
<Link Source="25003:[16297..16313).9" Target="25003:[16240..16275).6" />
<Link Source="25003:[16297..16313).9" Target="25003:[16113..16472).3" />
<Link Source="25003:[16414..16430).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16414..16430).6" Target="25003:[16414..16430).1" />
<Link Source="25003:[16414..16430).6" Target="25003:[16297..16313).9" />
<Link Source="25003:[16414..16430).6" Target="25003:[16335..16453).1" />
<Link Source="25003:[16490..16505).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[16490..16505).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16490..16505).6" Target="25003:[16490..16505).4" />
<Link Source="25003:[16490..16505).6" Target="25003:[16414..16430).6" />
<Link Source="25003:[16490..16505).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[16536..16829).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[16596..16624).4" Target="25003:[16536..16829).4" />
<Link Source="25003:[16596..16624).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16596..16624).6" Target="25003:[16596..16624).4" />
<Link Source="25003:[16596..16624).6" Target="25003:[16490..16505).6" />
<Link Source="25003:[16596..16624).6" Target="25003:[16536..16829).4" />
<Link Source="25003:[16642..16683).5" Target="25003:[16536..16829).4" />
<Link Source="25003:[16642..16683).8" Target="25003:[14837..14866).3" />
<Link Source="25003:[16642..16683).8" Target="25003:[16642..16683).5" />
<Link Source="25003:[16642..16683).8" Target="25003:[16596..16624).6" />
<Link Source="25003:[16642..16683).8" Target="25003:[16536..16829).4" />
<Link Source="25003:[16701..16717).4" Target="25003:[16536..16829).4" />
<Link Source="25003:[16701..16717).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16701..16717).6" Target="25003:[16701..16717).4" />
<Link Source="25003:[16701..16717).6" Target="25003:[16642..16683).8" />
<Link Source="25003:[16701..16717).6" Target="25003:[16536..16829).4" />
<Link Source="25003:[16735..16781).5" Target="25003:[16536..16829).4" />
<Link Source="25003:[16735..16781).8" Target="25003:[14837..14866).3" />
<Link Source="25003:[16735..16781).8" Target="25003:[16735..16781).5" />
<Link Source="25003:[16735..16781).8" Target="25003:[16701..16717).6" />
<Link Source="25003:[16735..16781).8" Target="25003:[16536..16829).4" />
<Link Source="25003:[16799..16814).4" Target="25003:[16536..16829).4" />
<Link Source="25003:[16799..16814).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16799..16814).6" Target="25003:[16799..16814).4" />
<Link Source="25003:[16799..16814).6" Target="25003:[16735..16781).8" />
<Link Source="25003:[16799..16814).6" Target="25003:[16536..16829).4" />
<Link Source="25003:[16845..16954).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16970..17144).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[17160..17340).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[17356..17482).5" Target="25003:[16113..16472).3" />
<Link Source="25003:[17498..17519).3" Target="25003:[14837..14866).3" />
<Link Source="25003:[17498..17519).3" Target="25003:[16799..16814).6" />
<Link Source="25003:[17498..17519).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[22349..22404).16" Target="25003:[17498..17519).3" />
<Link Source="25003:[22349..22404).16" Target="25003:[16113..16472).3" />
<Link Source="25003:[22349..22404).17" Target="25003:[22349..22404).13" />
<Link Source="25003:[22349..22404).17" Target="25003:[22349..22404).16" />
<Link Source="25003:[22349..22404).17" Target="25003:[16113..16472).3" />
<Link Source="25003:[18943..18992).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18943..18992).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18992).2" Target="25003:[18727..18781).1" />
<Link Source="25003:[18943..18992).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18991).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18992).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18992).2" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[18855..18914).5" />
<Link Source="25003:[22669..22689).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22703..22939).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22669..22689).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[18943..18991).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[22703..22939).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[18855..18914).5" />
<Link Source="25003:[22763..22783).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[22763..22783).3" Target="25003:[22599..22615).1" />
<Link Source="25003:[22763..22783).3" Target="25003:[22763..22783).1" />
<Link Source="25003:[22763..22783).3" Target="25003:[18678..18713).3" />
<Link Source="25003:[22763..22783).3" Target="25003:[22703..22939).3" />
<Link Source="25003:[22801..22890).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[22856..22871).1" Target="25003:[22801..22890).1" />
<Link Source="25003:[22856..22871).3" Target="25003:[22599..22615).1" />
<Link Source="25003:[22856..22871).3" Target="25003:[22856..22871).1" />
<Link Source="25003:[22856..22871).3" Target="25003:[22763..22783).3" />
<Link Source="25003:[22856..22871).3" Target="25003:[22801..22890).1" />
<Link Source="25003:[22908..22924).1" Target="25003:[22599..22615).1" />
<Link Source="25003:[22908..22924).1" Target="25003:[22856..22871).3" />
<Link Source="25003:[22908..22924).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[18943..18992).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[19106..19139).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[22908..22924).1" />
<Link Source="25003:[19106..19139).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19153..19205).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19219..19250).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[19219..19250).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[19219..19250).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).3" Target="25003:[19219..19250).1" />
<Link Source="25003:[19264..20938).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[23158..23173).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[23158..23173).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23175..23190).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[23175..23190).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23139..23801).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[23139..23801).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23224..23425).4" Target="25003:[19264..20938).1" />
<Link Source="25003:[23224..23425).5" Target="25003:[23158..23173).2" />
<Link Source="25003:[23224..23425).5" Target="25003:[23224..23425).4" />
<Link Source="25003:[23224..23425).5" Target="25003:[19264..20938).1" />
<Link Source="25003:[23445..23528).4" Target="25003:[19264..20938).1" />
<Link Source="25003:[23445..23528).5" Target="25003:[23175..23190).2" />
<Link Source="25003:[23445..23528).5" Target="25003:[23445..23528).4" />
<Link Source="25003:[23445..23528).5" Target="25003:[19264..20938).1" />
<Link Source="25003:[23548..23600).4" Target="25003:[23175..23190).2" />
<Link Source="25003:[23548..23600).4" Target="25003:[19264..20938).3" />
<Link Source="25003:[23548..23600).4" Target="25003:[19264..20938).1" />
<Link Source="25003:[23548..23600).5" Target="25003:[23158..23173).2" />
<Link Source="25003:[23548..23600).5" Target="25003:[19264..20938).3" />
<Link Source="25003:[23548..23600).5" Target="25003:[23548..23600).4" />
<Link Source="25003:[23548..23600).5" Target="25003:[19264..20938).1" />
<Link Source="25003:[23618..23712).4" Target="25003:[19264..20938).1" />
<Link Source="25003:[23618..23712).5" Target="25003:[23548..23600).5" />
<Link Source="25003:[23618..23712).5" Target="25003:[23618..23712).4" />
<Link Source="25003:[23618..23712).5" Target="25003:[19264..20938).1" />
<Link Source="25003:[23732..23786).1" Target="25003:[23175..23190).2" />
<Link Source="25003:[23732..23786).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[23732..23786).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23732..23786).2" Target="25003:[23158..23173).2" />
<Link Source="25003:[23732..23786).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[23732..23786).2" Target="25003:[23732..23786).1" />
<Link Source="25003:[23732..23786).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23548..23600).7" Target="25003:[23175..23190).2" />
<Link Source="25003:[23548..23600).7" Target="25003:[23732..23786).2" />
<Link Source="25003:[23548..23600).7" Target="25003:[19264..20938).1" />
<Link Source="25003:[23618..23712).8" Target="25003:[23548..23600).7" />
<Link Source="25003:[23618..23712).8" Target="25003:[23618..23712).4" />
<Link Source="25003:[23618..23712).8" Target="25003:[19264..20938).1" />
<Link Source="25003:[23677..23693).2" Target="25003:[23548..23600).7" />
<Link Source="25003:[23677..23693).2" Target="25003:[23618..23712).8" />
<Link Source="25003:[19327..19352).1" Target="25003:[19219..19250).1" />
<Link Source="25003:[19327..19352).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[19370..19400).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[19370..19400).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[19418..19628).1" Target="25003:[19370..19400).1" />
<Link Source="25003:[19418..19628).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[19418..19628).2" Target="25003:[23677..23693).2" />
<Link Source="25003:[19648..19745).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[19765..20366).1" Target="25003:[17841..17904).1" />
<Link Source="25003:[19765..20366).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[19846..19878).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[19846..19878).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19846..19878).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[19846..19878).2" Target="25003:[19765..20366).1" />
<Link Source="25003:[19846..19877).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[22454..22470).1" Target="25003:[19846..19878).1" />
<Link Source="25003:[22454..22470).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22472..22481).1" Target="25003:[19846..19878).2" />
<Link Source="25003:[22472..22481).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[22507..22533).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[22472..22481).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22454..22470).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22507..22533).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22507..22533).4" />
<Link Source="25003:[22507..22533).6" Target="25003:[19106..19139).3" />
<Link Source="25003:[22507..22533).6" Target="25003:[19846..19877).1" />
<Link Source="25003:[19846..19878).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[19900..19925).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[19900..19925).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[22507..22533).6" />
<Link Source="25003:[19900..19925).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19370..19400).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[19947..19983).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[19900..19925).3" />
<Link Source="25003:[19947..19983).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19947..19983).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[20005..20024).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[19947..19983).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[20112..20144).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[20112..20144).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20112..20144).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20112..20144).2" Target="25003:[20046..20347).1" />
<Link Source="25003:[20112..20143).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[22454..22470).2" Target="25003:[20112..20144).1" />
<Link Source="25003:[22454..22470).2" Target="25003:[20112..20143).1" />
<Link Source="25003:[22472..22481).2" Target="25003:[20112..20144).2" />
<Link Source="25003:[22472..22481).2" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).7" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).10" Target="25003:[22507..22533).7" />
<Link Source="25003:[22507..22533).10" Target="25003:[22472..22481).2" />
<Link Source="25003:[22507..22533).10" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).12" Target="25003:[22454..22470).2" />
<Link Source="25003:[22507..22533).12" Target="25003:[22507..22533).7" />
<Link Source="25003:[22507..22533).12" Target="25003:[22507..22533).10" />
<Link Source="25003:[22507..22533).12" Target="25003:[19947..19983).3" />
<Link Source="25003:[22507..22533).12" Target="25003:[20112..20143).1" />
<Link Source="25003:[20112..20144).3" Target="25003:[20046..20347).1" />
<Link Source="25003:[20170..20195).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[20170..20195).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[22507..22533).12" />
<Link Source="25003:[20170..20195).3" Target="25003:[20046..20347).1" />
<Link Source="25003:[20221..20324).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[18506..18543).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[20221..20324).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[20170..20195).3" />
<Link Source="25003:[20221..20324).8" Target="25003:[20046..20347).1" />
<Link Source="25003:[20386..20505).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[20386..20505).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[20386..20505).2" Target="25003:[23677..23693).2" />
<Link Source="25003:[20386..20505).4" Target="25003:[17979..18071).2" />
<Link Source="25003:[20386..20505).4" Target="25003:[23677..23693).2" />
<Link Source="25003:[20386..20505).5" Target="25003:[18085..18181).2" />
<Link Source="25003:[20386..20505).5" Target="25003:[23677..23693).2" />
<Link Source="25003:[20404..20504).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[4933..4945).3" Target="25003:[20386..20505).1" />
<Link Source="25003:[4933..4945).3" Target="25003:[20404..20504).1" />
<Link Source="25003:[4947..4965).3" Target="25003:[20386..20505).2" />
<Link Source="25003:[4947..4965).3" Target="25003:[20404..20504).1" />
<Link Source="25003:[4967..5002).3" Target="25003:[20386..20505).4" />
<Link Source="25003:[4967..5002).3" Target="25003:[20404..20504).1" />
<Link Source="25003:[5004..5041).3" Target="25003:[20386..20505).5" />
<Link Source="25003:[5004..5041).3" Target="25003:[20404..20504).1" />
<Link Source="25003:[4904..7352).3" Target="25003:[20386..20505).2" />
<Link Source="25003:[4904..7352).3" Target="25003:[20404..20504).1" />
<Link Source="25003:[912..917).9" Target="25003:[4904..7352).3" />
<Link Source="25003:[912..917).9" Target="25003:[20404..20504).1" />
<Link Source="25003:[950..967).9" Target="25003:[4904..7352).3" />
<Link Source="25003:[950..967).9" Target="25003:[20404..20504).1" />
<Link Source="25003:[1000..1013).9" Target="25003:[4904..7352).3" />
<Link Source="25003:[1000..1013).9" Target="25003:[20404..20504).1" />
<Link Source="25003:[1048..1062).9" Target="25003:[4904..7352).3" />
<Link Source="25003:[1048..1062).9" Target="25003:[20404..20504).1" />
<Link Source="25003:[1099..1109).9" Target="25003:[4904..7352).3" />
<Link Source="25003:[1099..1109).9" Target="25003:[20404..20504).1" />
<Link Source="25003:[1151..1165).25" Target="25003:[4904..7352).3" />
<Link Source="25003:[1151..1165).25" Target="25003:[20404..20504).1" />
<Link Source="25003:[1336..1350).9" Target="25003:[4904..7352).3" />
<Link Source="25003:[1336..1350).9" Target="25003:[20404..20504).1" />
<Link Source="25003:[1460..1479).9" Target="25003:[4904..7352).3" />
<Link Source="25003:[1460..1479).9" Target="25003:[20404..20504).1" />
<Link Source="25003:[1527..1548).9" Target="25003:[4904..7352).3" />
<Link Source="25003:[1527..1548).9" Target="25003:[20404..20504).1" />
<Link Source="25003:[5067..5072).3" Target="25003:[4933..4945).3" />
<Link Source="25003:[5067..5072).3" Target="25003:[20221..20324).1" />
<Link Source="25003:[5067..5072).3" Target="25003:[4904..7352).3" />
<Link Source="25003:[5067..5072).3" Target="25003:[20404..20504).1" />
<Link Source="25003:[5096..5113).3" Target="25003:[4933..4945).3" />
<Link Source="25003:[5096..5113).3" Target="25003:[20221..20324).1" />
<Link Source="25003:[5096..5113).3" Target="25003:[4904..7352).3" />
<Link Source="25003:[5096..5113).3" Target="25003:[20404..20504).1" />
<Link Source="25003:[5149..5162).3" Target="25003:[4933..4945).3" />
<Link Source="25003:[5149..5162).3" Target="25003:[20221..20324).1" />
<Link Source="25003:[5149..5162).3" Target="25003:[4904..7352).3" />
<Link Source="25003:[5149..5162).3" Target="25003:[20404..20504).1" />
<Link Source="25003:[5194..5203).3" Target="25003:[4933..4945).3" />
<Link Source="25003:[5194..5203).3" Target="25003:[20221..20324).1" />
<Link Source="25003:[5194..5203).3" Target="25003:[4904..7352).3" />
<Link Source="25003:[5194..5203).3" Target="25003:[20404..20504).1" />
<Link Source="25003:[5444..5476).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[5490..6130).16" Target="25003:[4933..4945).3" />
<Link Source="25003:[5490..6130).16" Target="25003:[20221..20324).1" />
<Link Source="25003:[5490..6130).16" Target="25003:[20404..20504).1" />
<Link Source="25003:[7118..7245).13" Target="25003:[4904..7352).3" />
<Link Source="25003:[7118..7245).14" Target="25003:[4904..7352).3" />
<Link Source="25003:[7118..7245).14" Target="25003:[5490..6130).16" />
<Link Source="25003:[7118..7245).14" Target="25003:[7118..7245).13" />
<Link Source="25003:[7118..7245).16" Target="25003:[4904..7352).3" />
<Link Source="25003:[7118..7245).16" Target="25003:[5490..6130).16" />
<Link Source="25003:[7118..7245).16" Target="25003:[5194..5203).3" />
<Link Source="25003:[7118..7245).16" Target="25003:[7118..7245).13" />
<Link Source="25003:[20523..20557).1" Target="25003:[20386..20505).2" />
<Link Source="25003:[20523..20557).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[20575..20622).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[20575..20622).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[20575..20622).2" Target="25003:[20386..20505).2" />
<Link Source="25003:[20575..20622).2" Target="25003:[23677..23693).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[20575..20622).1" />
<Link Source="25003:[20575..20622).3" Target="25003:[20575..20622).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[5194..5203).3" />
<Link Source="25003:[20575..20622).3" Target="25003:[5490..6130).16" />
<Link Source="25003:[20575..20622).3" Target="25003:[5096..5113).3" />
<Link Source="25003:[20575..20622).3" Target="25003:[5149..5162).3" />
<Link Source="25003:[20575..20622).3" Target="25003:[4904..7352).3" />
<Link Source="25003:[20575..20622).3" Target="25003:[4947..4965).3" />
<Link Source="25003:[20575..20622).3" Target="25003:[4967..5002).3" />
<Link Source="25003:[20575..20622).3" Target="25003:[5004..5041).3" />
<Link Source="25003:[20575..20622).3" Target="25003:[23677..23693).2" />
<Link Source="25003:[20575..20622).4" Target="25003:[23677..23693).2" />
<Link Source="25003:[10680..10725).7" Target="25003:[20575..20622).4" />
<Link Source="25003:[10680..10725).8" Target="25003:[20575..20622).3" />
<Link Source="25003:[10680..10725).8" Target="25003:[10680..10725).7" />
<Link Source="25003:[10680..10725).8" Target="25003:[20575..20622).4" />
<Link Source="25003:[10815..10891).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[10815..10891).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[10907..10975).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[10907..10975).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[10991..11148).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[10991..11148).3" Target="25003:[20575..20622).4" />
<Link Source="25003:[11059..11133).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[11059..11133).5" Target="25003:[10991..11148).3" />
<Link Source="25003:[11164..11464).7" Target="25003:[20575..20622).4" />
<Link Source="25003:[11164..11464).8" Target="25003:[20575..20622).3" />
<Link Source="25003:[11164..11464).8" Target="25003:[11164..11464).7" />
<Link Source="25003:[11164..11464).8" Target="25003:[20575..20622).4" />
<Link Source="25003:[11224..11449).7" Target="25003:[11164..11464).8" />
<Link Source="25003:[11294..11430).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[11294..11430).5" Target="25003:[11224..11449).7" />
<Link Source="25003:[11480..11903).7" Target="25003:[20575..20622).4" />
<Link Source="25003:[11480..11903).8" Target="25003:[20575..20622).3" />
<Link Source="25003:[11480..11903).8" Target="25003:[11480..11903).7" />
<Link Source="25003:[11480..11903).8" Target="25003:[20575..20622).4" />
<Link Source="25003:[11917..12344).7" Target="25003:[20575..20622).4" />
<Link Source="25003:[11917..12344).8" Target="25003:[20575..20622).3" />
<Link Source="25003:[11917..12344).8" Target="25003:[11917..12344).7" />
<Link Source="25003:[11917..12344).8" Target="25003:[20575..20622).4" />
<Link Source="25003:[12436..12535).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[12436..12535).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[12855..12915).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[13514..13693).9" Target="25003:[20575..20622).3" />
<Link Source="25003:[13514..13693).9" Target="25003:[20575..20622).4" />
<Link Source="25003:[20640..20746).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[20640..20746).2" Target="25003:[20575..20622).3" />
<Link Source="25003:[20640..20746).2" Target="25003:[20640..20746).1" />
<Link Source="25003:[20640..20746).2" Target="25003:[23677..23693).2" />
<Link Source="25003:[20695..20727).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[20695..20727).1" Target="25003:[20575..20622).3" />
<Link Source="25003:[20695..20727).1" Target="25003:[20640..20746).2" />
<Link Source="25003:[20764..20834).1" Target="25003:[20386..20505).2" />
<Link Source="25003:[20764..20834).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[20764..20834).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20764..20834).2" Target="25003:[23677..23693).2" />
<Link Source="25003:[20782..20832).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[22283..22306).3" Target="25003:[20764..20834).1" />
<Link Source="25003:[22283..22306).3" Target="25003:[20782..20832).1" />
<Link Source="25003:[22308..22323).3" Target="25003:[20764..20834).2" />
<Link Source="25003:[22308..22323).3" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).19" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).22" Target="25003:[22349..22404).19" />
<Link Source="25003:[22349..22404).22" Target="25003:[22308..22323).3" />
<Link Source="25003:[22349..22404).22" Target="25003:[20782..20832).1" />
<Link Source="25003:[14837..14866).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[14882..14907).7" Target="25003:[20782..20832).1" />
<Link Source="25003:[14882..14907).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[14882..14907).9" Target="25003:[14882..14907).7" />
<Link Source="25003:[14882..14907).9" Target="25003:[20782..20832).1" />
<Link Source="25003:[14921..15244).7" Target="25003:[20782..20832).1" />
<Link Source="25003:[14921..15244).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[14921..15244).8" Target="25003:[20575..20622).3" />
<Link Source="25003:[14921..15244).8" Target="25003:[14921..15244).7" />
<Link Source="25003:[14921..15244).8" Target="25003:[20782..20832).1" />
<Link Source="25003:[15100..15131).5" Target="25003:[22283..22306).3" />
<Link Source="25003:[15100..15131).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[15100..15131).5" Target="25003:[14921..15244).8" />
<Link Source="25003:[15100..15131).6" Target="25003:[14837..14866).5" />
<Link Source="25003:[15100..15131).6" Target="25003:[15100..15131).5" />
<Link Source="25003:[15100..15131).6" Target="25003:[14882..14907).9" />
<Link Source="25003:[15100..15131).6" Target="25003:[14921..15244).8" />
<Link Source="25003:[15149..15164).7" Target="25003:[14921..15244).8" />
<Link Source="25003:[15149..15164).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15149..15164).9" Target="25003:[15149..15164).7" />
<Link Source="25003:[15149..15164).9" Target="25003:[15100..15131).6" />
<Link Source="25003:[15149..15164).9" Target="25003:[14921..15244).8" />
<Link Source="25003:[15182..15229).11" Target="25003:[22283..22306).3" />
<Link Source="25003:[15182..15229).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[15182..15229).11" Target="25003:[14921..15244).8" />
<Link Source="25003:[15182..15229).15" Target="25003:[14837..14866).5" />
<Link Source="25003:[15182..15229).15" Target="25003:[15182..15229).11" />
<Link Source="25003:[15182..15229).15" Target="25003:[15149..15164).9" />
<Link Source="25003:[15182..15229).15" Target="25003:[14921..15244).8" />
<Link Source="25003:[15260..15767).7" Target="25003:[20782..20832).1" />
<Link Source="25003:[15260..15767).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[15260..15767).8" Target="25003:[20575..20622).3" />
<Link Source="25003:[15260..15767).8" Target="25003:[15260..15767).7" />
<Link Source="25003:[15260..15767).8" Target="25003:[20782..20832).1" />
<Link Source="25003:[15320..15717).25" Target="25003:[15260..15767).8" />
<Link Source="25003:[15632..15650).7" Target="25003:[15320..15717).25" />
<Link Source="25003:[15632..15650).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15632..15650).9" Target="25003:[15632..15650).7" />
<Link Source="25003:[15632..15650).9" Target="25003:[15182..15229).15" />
<Link Source="25003:[15632..15650).9" Target="25003:[15320..15717).25" />
<Link Source="25003:[15672..15698).5" Target="25003:[22283..22306).3" />
<Link Source="25003:[15672..15698).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[15672..15698).5" Target="25003:[15320..15717).25" />
<Link Source="25003:[15672..15698).6" Target="25003:[14837..14866).5" />
<Link Source="25003:[15672..15698).6" Target="25003:[15672..15698).5" />
<Link Source="25003:[15672..15698).6" Target="25003:[15632..15650).9" />
<Link Source="25003:[15672..15698).6" Target="25003:[15320..15717).25" />
<Link Source="25003:[15737..15752).7" Target="25003:[15260..15767).8" />
<Link Source="25003:[15737..15752).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15737..15752).9" Target="25003:[15737..15752).7" />
<Link Source="25003:[15737..15752).9" Target="25003:[15672..15698).6" />
<Link Source="25003:[15737..15752).9" Target="25003:[15260..15767).8" />
<Link Source="25003:[15783..15883).3" Target="25003:[22283..22306).3" />
<Link Source="25003:[15783..15883).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[15783..15883).3" Target="25003:[20782..20832).1" />
<Link Source="25003:[15899..15914).7" Target="25003:[20782..20832).1" />
<Link Source="25003:[15899..15914).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15899..15914).9" Target="25003:[15899..15914).7" />
<Link Source="25003:[15899..15914).9" Target="25003:[15737..15752).9" />
<Link Source="25003:[15899..15914).9" Target="25003:[20782..20832).1" />
<Link Source="25003:[15930..16520).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[15930..16520).8" Target="25003:[20575..20622).3" />
<Link Source="25003:[15930..16520).8" Target="25003:[20782..20832).1" />
<Link Source="25003:[15986..16015).7" Target="25003:[15930..16520).8" />
<Link Source="25003:[15986..16015).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15986..16015).9" Target="25003:[15986..16015).7" />
<Link Source="25003:[15986..16015).9" Target="25003:[15899..15914).9" />
<Link Source="25003:[15986..16015).9" Target="25003:[15930..16520).8" />
<Link Source="25003:[16202..16218).13" Target="25003:[15930..16520).8" />
<Link Source="25003:[16202..16218).15" Target="25003:[14837..14866).5" />
<Link Source="25003:[16202..16218).15" Target="25003:[16202..16218).13" />
<Link Source="25003:[16202..16218).15" Target="25003:[15986..16015).9" />
<Link Source="25003:[16202..16218).15" Target="25003:[15930..16520).8" />
<Link Source="25003:[16240..16275).9" Target="25003:[15930..16520).8" />
<Link Source="25003:[16240..16275).10" Target="25003:[14837..14866).5" />
<Link Source="25003:[16240..16275).10" Target="25003:[16240..16275).9" />
<Link Source="25003:[16240..16275).10" Target="25003:[16202..16218).15" />
<Link Source="25003:[16240..16275).10" Target="25003:[15930..16520).8" />
<Link Source="25003:[16297..16313).13" Target="25003:[15930..16520).8" />
<Link Source="25003:[16297..16313).15" Target="25003:[14837..14866).5" />
<Link Source="25003:[16297..16313).15" Target="25003:[16297..16313).13" />
<Link Source="25003:[16297..16313).15" Target="25003:[16240..16275).10" />
<Link Source="25003:[16297..16313).15" Target="25003:[15930..16520).8" />
<Link Source="25003:[16335..16453).17" Target="25003:[15930..16520).8" />
<Link Source="25003:[16414..16430).7" Target="25003:[16335..16453).17" />
<Link Source="25003:[16414..16430).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16414..16430).9" Target="25003:[16414..16430).7" />
<Link Source="25003:[16414..16430).9" Target="25003:[16297..16313).15" />
<Link Source="25003:[16414..16430).9" Target="25003:[16335..16453).17" />
<Link Source="25003:[16490..16505).7" Target="25003:[15930..16520).8" />
<Link Source="25003:[16490..16505).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16490..16505).9" Target="25003:[16490..16505).7" />
<Link Source="25003:[16490..16505).9" Target="25003:[16414..16430).9" />
<Link Source="25003:[16490..16505).9" Target="25003:[15930..16520).8" />
<Link Source="25003:[16536..16829).7" Target="25003:[20782..20832).1" />
<Link Source="25003:[16536..16829).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[16536..16829).8" Target="25003:[15930..16520).8" />
<Link Source="25003:[16536..16829).8" Target="25003:[16536..16829).7" />
<Link Source="25003:[16536..16829).8" Target="25003:[20782..20832).1" />
<Link Source="25003:[16596..16624).7" Target="25003:[16536..16829).8" />
<Link Source="25003:[16596..16624).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16596..16624).9" Target="25003:[16596..16624).7" />
<Link Source="25003:[16596..16624).9" Target="25003:[16490..16505).9" />
<Link Source="25003:[16596..16624).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16642..16683).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16642..16683).12" Target="25003:[14837..14866).5" />
<Link Source="25003:[16642..16683).12" Target="25003:[16642..16683).9" />
<Link Source="25003:[16642..16683).12" Target="25003:[16596..16624).9" />
<Link Source="25003:[16642..16683).12" Target="25003:[16536..16829).8" />
<Link Source="25003:[16701..16717).7" Target="25003:[16536..16829).8" />
<Link Source="25003:[16701..16717).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16701..16717).9" Target="25003:[16701..16717).7" />
<Link Source="25003:[16701..16717).9" Target="25003:[16642..16683).12" />
<Link Source="25003:[16701..16717).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16735..16781).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16735..16781).12" Target="25003:[14837..14866).5" />
<Link Source="25003:[16735..16781).12" Target="25003:[16735..16781).9" />
<Link Source="25003:[16735..16781).12" Target="25003:[16701..16717).9" />
<Link Source="25003:[16735..16781).12" Target="25003:[16536..16829).8" />
<Link Source="25003:[16799..16814).7" Target="25003:[16536..16829).8" />
<Link Source="25003:[16799..16814).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16799..16814).9" Target="25003:[16799..16814).7" />
<Link Source="25003:[16799..16814).9" Target="25003:[16735..16781).12" />
<Link Source="25003:[16799..16814).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16845..16954).3" Target="25003:[22283..22306).3" />
<Link Source="25003:[16845..16954).3" Target="25003:[15930..16520).8" />
<Link Source="25003:[16845..16954).3" Target="25003:[20782..20832).1" />
<Link Source="25003:[16970..17144).7" Target="25003:[20782..20832).1" />
<Link Source="25003:[16970..17144).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[16970..17144).8" Target="25003:[15930..16520).8" />
<Link Source="25003:[16970..17144).8" Target="25003:[16970..17144).7" />
<Link Source="25003:[16970..17144).8" Target="25003:[20782..20832).1" />
<Link Source="25003:[17160..17340).7" Target="25003:[20782..20832).1" />
<Link Source="25003:[17160..17340).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[17160..17340).8" Target="25003:[15930..16520).8" />
<Link Source="25003:[17160..17340).8" Target="25003:[17160..17340).7" />
<Link Source="25003:[17160..17340).8" Target="25003:[20782..20832).1" />
<Link Source="25003:[17356..17482).9" Target="25003:[20782..20832).1" />
<Link Source="25003:[17356..17482).10" Target="25003:[22283..22306).3" />
<Link Source="25003:[17356..17482).10" Target="25003:[15930..16520).8" />
<Link Source="25003:[17356..17482).10" Target="25003:[17356..17482).9" />
<Link Source="25003:[17356..17482).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[17498..17519).5" Target="25003:[14837..14866).5" />
<Link Source="25003:[17498..17519).5" Target="25003:[16799..16814).9" />
<Link Source="25003:[17498..17519).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).25" Target="25003:[17498..17519).5" />
<Link Source="25003:[22349..22404).25" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).26" Target="25003:[22349..22404).22" />
<Link Source="25003:[22349..22404).26" Target="25003:[22349..22404).25" />
<Link Source="25003:[22349..22404).26" Target="25003:[20782..20832).1" />
<Link Source="25003:[20764..20834).5" Target="25003:[18506..18543).1" />
<Link Source="25003:[20764..20834).5" Target="25003:[22349..22404).26" />
<Link Source="25003:[20764..20834).5" Target="25003:[20221..20324).8" />
<Link Source="25003:[20764..20834).5" Target="25003:[23677..23693).2" />
<Link Source="25003:[20852..20923).1" Target="25003:[20695..20727).1" />
<Link Source="25003:[20852..20923).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[20852..20923).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20852..20923).2" Target="25003:[23677..23693).2" />
<Link Source="25003:[20867..20921).1" Target="25003:[23677..23693).2" />
<Link Source="25003:[22283..22306).4" Target="25003:[20852..20923).1" />
<Link Source="25003:[22283..22306).4" Target="25003:[20867..20921).1" />
<Link Source="25003:[22308..22323).4" Target="25003:[20852..20923).2" />
<Link Source="25003:[22308..22323).4" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).28" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).31" Target="25003:[22349..22404).28" />
<Link Source="25003:[22349..22404).31" Target="25003:[22308..22323).4" />
<Link Source="25003:[22349..22404).31" Target="25003:[20867..20921).1" />
<Link Source="25003:[14837..14866).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[14882..14907).10" Target="25003:[20867..20921).1" />
<Link Source="25003:[14882..14907).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[14882..14907).12" Target="25003:[14882..14907).10" />
<Link Source="25003:[14882..14907).12" Target="25003:[20867..20921).1" />
<Link Source="25003:[14921..15244).10" Target="25003:[20867..20921).1" />
<Link Source="25003:[14921..15244).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[14921..15244).11" Target="25003:[15930..16520).8" />
<Link Source="25003:[14921..15244).11" Target="25003:[14921..15244).10" />
<Link Source="25003:[14921..15244).11" Target="25003:[20867..20921).1" />
<Link Source="25003:[15100..15131).7" Target="25003:[22283..22306).4" />
<Link Source="25003:[15100..15131).7" Target="25003:[15930..16520).8" />
<Link Source="25003:[15100..15131).7" Target="25003:[14921..15244).11" />
<Link Source="25003:[15100..15131).8" Target="25003:[14837..14866).7" />
<Link Source="25003:[15100..15131).8" Target="25003:[15100..15131).7" />
<Link Source="25003:[15100..15131).8" Target="25003:[14882..14907).12" />
<Link Source="25003:[15100..15131).8" Target="25003:[14921..15244).11" />
<Link Source="25003:[15149..15164).10" Target="25003:[14921..15244).11" />
<Link Source="25003:[15149..15164).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15149..15164).12" Target="25003:[15149..15164).10" />
<Link Source="25003:[15149..15164).12" Target="25003:[15100..15131).8" />
<Link Source="25003:[15149..15164).12" Target="25003:[14921..15244).11" />
<Link Source="25003:[15182..15229).16" Target="25003:[22283..22306).4" />
<Link Source="25003:[15182..15229).16" Target="25003:[15930..16520).8" />
<Link Source="25003:[15182..15229).16" Target="25003:[14921..15244).11" />
<Link Source="25003:[15182..15229).20" Target="25003:[14837..14866).7" />
<Link Source="25003:[15182..15229).20" Target="25003:[15182..15229).16" />
<Link Source="25003:[15182..15229).20" Target="25003:[15149..15164).12" />
<Link Source="25003:[15182..15229).20" Target="25003:[14921..15244).11" />
<Link Source="25003:[15260..15767).10" Target="25003:[20867..20921).1" />
<Link Source="25003:[15260..15767).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[15260..15767).11" Target="25003:[15930..16520).8" />
<Link Source="25003:[15260..15767).11" Target="25003:[15260..15767).10" />
<Link Source="25003:[15260..15767).11" Target="25003:[20867..20921).1" />
<Link Source="25003:[15320..15717).37" Target="25003:[15260..15767).11" />
<Link Source="25003:[15632..15650).10" Target="25003:[15320..15717).37" />
<Link Source="25003:[15632..15650).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15632..15650).12" Target="25003:[15632..15650).10" />
<Link Source="25003:[15632..15650).12" Target="25003:[15182..15229).20" />
<Link Source="25003:[15632..15650).12" Target="25003:[15320..15717).37" />
<Link Source="25003:[15672..15698).7" Target="25003:[22283..22306).4" />
<Link Source="25003:[15672..15698).7" Target="25003:[15930..16520).8" />
<Link Source="25003:[15672..15698).7" Target="25003:[15320..15717).37" />
<Link Source="25003:[15672..15698).8" Target="25003:[14837..14866).7" />
<Link Source="25003:[15672..15698).8" Target="25003:[15672..15698).7" />
<Link Source="25003:[15672..15698).8" Target="25003:[15632..15650).12" />
<Link Source="25003:[15672..15698).8" Target="25003:[15320..15717).37" />
<Link Source="25003:[15737..15752).10" Target="25003:[15260..15767).11" />
<Link Source="25003:[15737..15752).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15737..15752).12" Target="25003:[15737..15752).10" />
<Link Source="25003:[15737..15752).12" Target="25003:[15672..15698).8" />
<Link Source="25003:[15737..15752).12" Target="25003:[15260..15767).11" />
<Link Source="25003:[15783..15883).4" Target="25003:[22283..22306).4" />
<Link Source="25003:[15783..15883).4" Target="25003:[15930..16520).8" />
<Link Source="25003:[15783..15883).4" Target="25003:[20867..20921).1" />
<Link Source="25003:[15899..15914).10" Target="25003:[20867..20921).1" />
<Link Source="25003:[15899..15914).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15899..15914).12" Target="25003:[15899..15914).10" />
<Link Source="25003:[15899..15914).12" Target="25003:[15737..15752).12" />
<Link Source="25003:[15899..15914).12" Target="25003:[20867..20921).1" />
<Link Source="25003:[15930..16520).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[15930..16520).11" Target="25003:[15930..16520).8" />
<Link Source="25003:[15930..16520).11" Target="25003:[20867..20921).1" />
<Link Source="25003:[15986..16015).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[15986..16015).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15986..16015).12" Target="25003:[15986..16015).10" />
<Link Source="25003:[15986..16015).12" Target="25003:[15899..15914).12" />
<Link Source="25003:[15986..16015).12" Target="25003:[15930..16520).11" />
<Link Source="25003:[16202..16218).19" Target="25003:[15930..16520).11" />
<Link Source="25003:[16202..16218).21" Target="25003:[14837..14866).7" />
<Link Source="25003:[16202..16218).21" Target="25003:[16202..16218).19" />
<Link Source="25003:[16202..16218).21" Target="25003:[15986..16015).12" />
<Link Source="25003:[16202..16218).21" Target="25003:[15930..16520).11" />
<Link Source="25003:[16240..16275).13" Target="25003:[15930..16520).11" />
<Link Source="25003:[16240..16275).14" Target="25003:[14837..14866).7" />
<Link Source="25003:[16240..16275).14" Target="25003:[16240..16275).13" />
<Link Source="25003:[16240..16275).14" Target="25003:[16202..16218).21" />
<Link Source="25003:[16240..16275).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[16297..16313).19" Target="25003:[15930..16520).11" />
<Link Source="25003:[16297..16313).21" Target="25003:[14837..14866).7" />
<Link Source="25003:[16297..16313).21" Target="25003:[16297..16313).19" />
<Link Source="25003:[16297..16313).21" Target="25003:[16240..16275).14" />
<Link Source="25003:[16297..16313).21" Target="25003:[15930..16520).11" />
<Link Source="25003:[16335..16453).25" Target="25003:[15930..16520).11" />
<Link Source="25003:[16414..16430).10" Target="25003:[16335..16453).25" />
<Link Source="25003:[16414..16430).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[16414..16430).12" Target="25003:[16414..16430).10" />
<Link Source="25003:[16414..16430).12" Target="25003:[16297..16313).21" />
<Link Source="25003:[16414..16430).12" Target="25003:[16335..16453).25" />
<Link Source="25003:[16490..16505).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[16490..16505).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[16490..16505).12" Target="25003:[16490..16505).10" />
<Link Source="25003:[16490..16505).12" Target="25003:[16414..16430).12" />
<Link Source="25003:[16490..16505).12" Target="25003:[15930..16520).11" />
<Link Source="25003:[16536..16829).10" Target="25003:[20867..20921).1" />
<Link Source="25003:[16536..16829).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[16536..16829).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[16536..16829).11" Target="25003:[16536..16829).10" />
<Link Source="25003:[16536..16829).11" Target="25003:[20867..20921).1" />
<Link Source="25003:[16596..16624).10" Target="25003:[16536..16829).11" />
<Link Source="25003:[16596..16624).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[16596..16624).12" Target="25003:[16596..16624).10" />
<Link Source="25003:[16596..16624).12" Target="25003:[16490..16505).12" />
<Link Source="25003:[16596..16624).12" Target="25003:[16536..16829).11" />
<Link Source="25003:[16642..16683).13" Target="25003:[16536..16829).11" />
<Link Source="25003:[16642..16683).16" Target="25003:[14837..14866).7" />
<Link Source="25003:[16642..16683).16" Target="25003:[16642..16683).13" />
<Link Source="25003:[16642..16683).16" Target="25003:[16596..16624).12" />
<Link Source="25003:[16642..16683).16" Target="25003:[16536..16829).11" />
<Link Source="25003:[16701..16717).10" Target="25003:[16536..16829).11" />
<Link Source="25003:[16701..16717).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[16701..16717).12" Target="25003:[16701..16717).10" />
<Link Source="25003:[16701..16717).12" Target="25003:[16642..16683).16" />
<Link Source="25003:[16701..16717).12" Target="25003:[16536..16829).11" />
<Link Source="25003:[16735..16781).13" Target="25003:[16536..16829).11" />
<Link Source="25003:[16735..16781).16" Target="25003:[14837..14866).7" />
<Link Source="25003:[16735..16781).16" Target="25003:[16735..16781).13" />
<Link Source="25003:[16735..16781).16" Target="25003:[16701..16717).12" />
<Link Source="25003:[16735..16781).16" Target="25003:[16536..16829).11" />
<Link Source="25003:[16799..16814).10" Target="25003:[16536..16829).11" />
<Link Source="25003:[16799..16814).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[16799..16814).12" Target="25003:[16799..16814).10" />
<Link Source="25003:[16799..16814).12" Target="25003:[16735..16781).16" />
<Link Source="25003:[16799..16814).12" Target="25003:[16536..16829).11" />
<Link Source="25003:[16845..16954).4" Target="25003:[22283..22306).4" />
<Link Source="25003:[16845..16954).4" Target="25003:[15930..16520).11" />
<Link Source="25003:[16845..16954).4" Target="25003:[20867..20921).1" />
<Link Source="25003:[16970..17144).10" Target="25003:[20867..20921).1" />
<Link Source="25003:[16970..17144).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[16970..17144).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[16970..17144).11" Target="25003:[16970..17144).10" />
<Link Source="25003:[16970..17144).11" Target="25003:[20867..20921).1" />
<Link Source="25003:[17160..17340).10" Target="25003:[20867..20921).1" />
<Link Source="25003:[17160..17340).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[17160..17340).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[17160..17340).11" Target="25003:[17160..17340).10" />
<Link Source="25003:[17160..17340).11" Target="25003:[20867..20921).1" />
<Link Source="25003:[17356..17482).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[17356..17482).14" Target="25003:[22283..22306).4" />
<Link Source="25003:[17356..17482).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[17356..17482).14" Target="25003:[17356..17482).13" />
<Link Source="25003:[17356..17482).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[17498..17519).7" Target="25003:[14837..14866).7" />
<Link Source="25003:[17498..17519).7" Target="25003:[16799..16814).12" />
<Link Source="25003:[17498..17519).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).34" Target="25003:[17498..17519).7" />
<Link Source="25003:[22349..22404).34" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).35" Target="25003:[22349..22404).31" />
<Link Source="25003:[22349..22404).35" Target="25003:[22349..22404).34" />
<Link Source="25003:[22349..22404).35" Target="25003:[20867..20921).1" />
<Link Source="25003:[20852..20923).5" Target="25003:[19153..19205).1" />
<Link Source="25003:[20852..20923).5" Target="25003:[22349..22404).35" />
<Link Source="25003:[20852..20923).5" Target="25003:[23677..23693).2" />
<Link Source="25003:[19418..19628).6" Target="25003:[15930..16520).11" />
<Link Source="25003:[19648..19745).4" Target="25003:[15930..16520).11" />
<Link Source="25003:[19699..19726).1" Target="25003:[19648..19745).4" />
<Link Source="25003:[19699..19726).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19699..19726).3" Target="25003:[19699..19726).1" />
<Link Source="25003:[19699..19726).3" Target="25003:[20764..20834).5" />
<Link Source="25003:[19699..19726).3" Target="25003:[19648..19745).4" />
<Link Source="25003:[19846..19878).4" Target="25003:[18506..18543).1" />
<Link Source="25003:[19846..19878).4" Target="25003:[15930..16520).11" />
<Link Source="25003:[19846..19878).5" Target="25003:[17936..17956).1" />
<Link Source="25003:[19846..19878).5" Target="25003:[15930..16520).11" />
<Link Source="25003:[19846..19877).2" Target="25003:[15930..16520).11" />
<Link Source="25003:[22454..22470).3" Target="25003:[19846..19878).4" />
<Link Source="25003:[22454..22470).3" Target="25003:[19846..19877).2" />
<Link Source="25003:[22472..22481).3" Target="25003:[19846..19878).5" />
<Link Source="25003:[22472..22481).3" Target="25003:[19846..19877).2" />
<Link Source="25003:[22507..22533).13" Target="25003:[19846..19877).2" />
<Link Source="25003:[22507..22533).16" Target="25003:[22507..22533).13" />
<Link Source="25003:[22507..22533).16" Target="25003:[22472..22481).3" />
<Link Source="25003:[22507..22533).16" Target="25003:[19846..19877).2" />
<Link Source="25003:[19846..19878).6" Target="25003:[15930..16520).11" />
<Link Source="25003:[19900..19925).4" Target="25003:[15930..16520).11" />
<Link Source="25003:[20112..20144).4" Target="25003:[18506..18543).1" />
<Link Source="25003:[20112..20144).4" Target="25003:[15930..16520).11" />
<Link Source="25003:[20112..20144).5" Target="25003:[17936..17956).1" />
<Link Source="25003:[20112..20144).5" Target="25003:[15930..16520).11" />
<Link Source="25003:[20112..20143).2" Target="25003:[15930..16520).11" />
<Link Source="25003:[22454..22470).4" Target="25003:[20112..20144).4" />
<Link Source="25003:[22454..22470).4" Target="25003:[20112..20143).2" />
<Link Source="25003:[22472..22481).4" Target="25003:[20112..20144).5" />
<Link Source="25003:[22472..22481).4" Target="25003:[20112..20143).2" />
<Link Source="25003:[22507..22533).19" Target="25003:[20112..20143).2" />
<Link Source="25003:[22507..22533).22" Target="25003:[22507..22533).19" />
<Link Source="25003:[22507..22533).22" Target="25003:[22472..22481).4" />
<Link Source="25003:[22507..22533).22" Target="25003:[20112..20143).2" />
<Link Source="25003:[20112..20144).6" Target="25003:[15930..16520).11" />
<Link Source="25003:[20170..20195).4" Target="25003:[15930..16520).11" />
<Link Source="25003:[912..917).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[950..967).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[1000..1013).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[1048..1062).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[1099..1109).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[1151..1165).28" Target="25003:[15930..16520).11" />
<Link Source="25003:[1336..1350).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[1460..1479).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[1527..1548).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[5067..5072).4" Target="25003:[15930..16520).11" />
<Link Source="25003:[5444..5476).7" Target="25003:[15930..16520).11" />
<Link Source="25003:[7118..7245).19" Target="25003:[15930..16520).11" />
<Link Source="25003:[20523..20557).2" Target="25003:[15930..16520).11" />
<Link Source="25003:[10680..10725).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[10815..10891).7" Target="25003:[15930..16520).11" />
<Link Source="25003:[10907..10975).7" Target="25003:[15930..16520).11" />
<Link Source="25003:[10991..11148).4" Target="25003:[15930..16520).11" />
<Link Source="25003:[11059..11133).7" Target="25003:[15930..16520).11" />
<Link Source="25003:[11059..11133).7" Target="25003:[10991..11148).4" />
<Link Source="25003:[11120..11133).1" Target="25003:[11059..11133).7" />
<Link Source="25003:[10815..10891).9" Target="25003:[15930..16520).11" />
<Link Source="25003:[10815..10891).9" Target="25003:[11120..11133).1" />
<Link Source="25003:[10907..10975).9" Target="25003:[15930..16520).11" />
<Link Source="25003:[10907..10975).9" Target="25003:[11120..11133).1" />
<Link Source="25003:[11164..11464).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[11164..11464).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[11164..11464).11" Target="25003:[11120..11133).1" />
<Link Source="25003:[11164..11464).11" Target="25003:[11164..11464).10" />
<Link Source="25003:[11224..11449).10" Target="25003:[11164..11464).11" />
<Link Source="25003:[11294..11430).7" Target="25003:[15930..16520).11" />
<Link Source="25003:[11294..11430).7" Target="25003:[11120..11133).1" />
<Link Source="25003:[11294..11430).7" Target="25003:[11224..11449).10" />
<Link Source="25003:[11480..11903).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[11480..11903).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[11480..11903).11" Target="25003:[11120..11133).1" />
<Link Source="25003:[11480..11903).11" Target="25003:[11480..11903).10" />
<Link Source="25003:[11917..12344).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[11917..12344).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[11917..12344).11" Target="25003:[11120..11133).1" />
<Link Source="25003:[11917..12344).11" Target="25003:[11917..12344).10" />
<Link Source="25003:[12436..12535).7" Target="25003:[15930..16520).11" />
<Link Source="25003:[12436..12535).7" Target="25003:[11120..11133).1" />
<Link Source="25003:[12855..12915).10" Target="25003:[11120..11133).1" />
<Link Source="25003:[13514..13693).13" Target="25003:[15930..16520).11" />
<Link Source="25003:[13514..13693).13" Target="25003:[11120..11133).1" />
<Link Source="25003:[20764..20834).7" Target="25003:[17936..17956).1" />
<Link Source="25003:[20764..20834).7" Target="25003:[15930..16520).11" />
<Link Source="25003:[22308..22323).5" Target="25003:[20764..20834).7" />
<Link Source="25003:[22308..22323).5" Target="25003:[15930..16520).11" />
<Link Source="25003:[22349..22404).37" Target="25003:[15930..16520).11" />
<Link Source="25003:[22349..22404).40" Target="25003:[22349..22404).37" />
<Link Source="25003:[22349..22404).40" Target="25003:[22308..22323).5" />
<Link Source="25003:[22349..22404).40" Target="25003:[15930..16520).11" />
<Link Source="25003:[14837..14866).9" Target="25003:[15930..16520).11" />
<Link Source="25003:[14882..14907).13" Target="25003:[15930..16520).11" />
<Link Source="25003:[14882..14907).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[14882..14907).15" Target="25003:[14882..14907).13" />
<Link Source="25003:[14882..14907).15" Target="25003:[15930..16520).11" />
<Link Source="25003:[14921..15244).13" Target="25003:[15930..16520).11" />
<Link Source="25003:[14921..15244).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[14921..15244).14" Target="25003:[11120..11133).1" />
<Link Source="25003:[14921..15244).14" Target="25003:[14921..15244).13" />
<Link Source="25003:[15100..15131).9" Target="25003:[15930..16520).11" />
<Link Source="25003:[15100..15131).9" Target="25003:[11120..11133).1" />
<Link Source="25003:[15100..15131).9" Target="25003:[14921..15244).14" />
<Link Source="25003:[15100..15131).10" Target="25003:[14837..14866).9" />
<Link Source="25003:[15100..15131).10" Target="25003:[15100..15131).9" />
<Link Source="25003:[15100..15131).10" Target="25003:[14882..14907).15" />
<Link Source="25003:[15100..15131).10" Target="25003:[14921..15244).14" />
<Link Source="25003:[15149..15164).13" Target="25003:[14921..15244).14" />
<Link Source="25003:[15149..15164).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15149..15164).15" Target="25003:[15149..15164).13" />
<Link Source="25003:[15149..15164).15" Target="25003:[15100..15131).10" />
<Link Source="25003:[15149..15164).15" Target="25003:[14921..15244).14" />
<Link Source="25003:[15182..15229).21" Target="25003:[15930..16520).11" />
<Link Source="25003:[15182..15229).21" Target="25003:[11120..11133).1" />
<Link Source="25003:[15182..15229).21" Target="25003:[14921..15244).14" />
<Link Source="25003:[15182..15229).25" Target="25003:[14837..14866).9" />
<Link Source="25003:[15182..15229).25" Target="25003:[15182..15229).21" />
<Link Source="25003:[15182..15229).25" Target="25003:[15149..15164).15" />
<Link Source="25003:[15182..15229).25" Target="25003:[14921..15244).14" />
<Link Source="25003:[15260..15767).13" Target="25003:[15930..16520).11" />
<Link Source="25003:[15260..15767).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[15260..15767).14" Target="25003:[11120..11133).1" />
<Link Source="25003:[15260..15767).14" Target="25003:[15260..15767).13" />
<Link Source="25003:[15320..15717).49" Target="25003:[15260..15767).14" />
<Link Source="25003:[15632..15650).13" Target="25003:[15320..15717).49" />
<Link Source="25003:[15632..15650).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15632..15650).15" Target="25003:[15632..15650).13" />
<Link Source="25003:[15632..15650).15" Target="25003:[15182..15229).25" />
<Link Source="25003:[15632..15650).15" Target="25003:[15320..15717).49" />
<Link Source="25003:[15672..15698).9" Target="25003:[15930..16520).11" />
<Link Source="25003:[15672..15698).9" Target="25003:[11120..11133).1" />
<Link Source="25003:[15672..15698).9" Target="25003:[15320..15717).49" />
<Link Source="25003:[15672..15698).10" Target="25003:[14837..14866).9" />
<Link Source="25003:[15672..15698).10" Target="25003:[15672..15698).9" />
<Link Source="25003:[15672..15698).10" Target="25003:[15632..15650).15" />
<Link Source="25003:[15672..15698).10" Target="25003:[15320..15717).49" />
<Link Source="25003:[15737..15752).13" Target="25003:[15260..15767).14" />
<Link Source="25003:[15737..15752).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15737..15752).15" Target="25003:[15737..15752).13" />
<Link Source="25003:[15737..15752).15" Target="25003:[15672..15698).10" />
<Link Source="25003:[15737..15752).15" Target="25003:[15260..15767).14" />
<Link Source="25003:[15783..15883).5" Target="25003:[15930..16520).11" />
<Link Source="25003:[15783..15883).5" Target="25003:[11120..11133).1" />
<Link Source="25003:[15899..15914).13" Target="25003:[15930..16520).11" />
<Link Source="25003:[15899..15914).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15899..15914).15" Target="25003:[15899..15914).13" />
<Link Source="25003:[15899..15914).15" Target="25003:[15737..15752).15" />
<Link Source="25003:[15899..15914).15" Target="25003:[15930..16520).11" />
<Link Source="25003:[15986..16015).13" Target="25003:[11120..11133).1" />
<Link Source="25003:[15986..16015).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15986..16015).15" Target="25003:[15986..16015).13" />
<Link Source="25003:[15986..16015).15" Target="25003:[15899..15914).15" />
<Link Source="25003:[15986..16015).15" Target="25003:[11120..11133).1" />
<Link Source="25003:[16202..16218).25" Target="25003:[11120..11133).1" />
<Link Source="25003:[16202..16218).27" Target="25003:[14837..14866).9" />
<Link Source="25003:[16202..16218).27" Target="25003:[16202..16218).25" />
<Link Source="25003:[16202..16218).27" Target="25003:[15986..16015).15" />
<Link Source="25003:[16202..16218).27" Target="25003:[11120..11133).1" />
<Link Source="25003:[16240..16275).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[16240..16275).18" Target="25003:[14837..14866).9" />
<Link Source="25003:[16240..16275).18" Target="25003:[16240..16275).17" />
<Link Source="25003:[16240..16275).18" Target="25003:[16202..16218).27" />
<Link Source="25003:[16240..16275).18" Target="25003:[11120..11133).1" />
<Link Source="25003:[16297..16313).25" Target="25003:[11120..11133).1" />
<Link Source="25003:[16297..16313).27" Target="25003:[14837..14866).9" />
<Link Source="25003:[16297..16313).27" Target="25003:[16297..16313).25" />
<Link Source="25003:[16297..16313).27" Target="25003:[16240..16275).18" />
<Link Source="25003:[16297..16313).27" Target="25003:[11120..11133).1" />
<Link Source="25003:[16335..16453).33" Target="25003:[11120..11133).1" />
<Link Source="25003:[16414..16430).13" Target="25003:[16335..16453).33" />
<Link Source="25003:[16414..16430).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[16414..16430).15" Target="25003:[16414..16430).13" />
<Link Source="25003:[16414..16430).15" Target="25003:[16297..16313).27" />
<Link Source="25003:[16414..16430).15" Target="25003:[16335..16453).33" />
<Link Source="25003:[16490..16505).13" Target="25003:[11120..11133).1" />
<Link Source="25003:[16490..16505).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[16490..16505).15" Target="25003:[16490..16505).13" />
<Link Source="25003:[16490..16505).15" Target="25003:[16414..16430).15" />
<Link Source="25003:[16490..16505).15" Target="25003:[11120..11133).1" />
<Link Source="25003:[16536..16829).13" Target="25003:[15930..16520).11" />
<Link Source="25003:[16536..16829).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[16536..16829).14" Target="25003:[11120..11133).1" />
<Link Source="25003:[16536..16829).14" Target="25003:[16536..16829).13" />
<Link Source="25003:[16596..16624).13" Target="25003:[16536..16829).14" />
<Link Source="25003:[16596..16624).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[16596..16624).15" Target="25003:[16596..16624).13" />
<Link Source="25003:[16596..16624).15" Target="25003:[16490..16505).15" />
<Link Source="25003:[16596..16624).15" Target="25003:[16536..16829).14" />
<Link Source="25003:[16642..16683).17" Target="25003:[16536..16829).14" />
<Link Source="25003:[16642..16683).20" Target="25003:[14837..14866).9" />
<Link Source="25003:[16642..16683).20" Target="25003:[16642..16683).17" />
<Link Source="25003:[16642..16683).20" Target="25003:[16596..16624).15" />
<Link Source="25003:[16642..16683).20" Target="25003:[16536..16829).14" />
<Link Source="25003:[16701..16717).13" Target="25003:[16536..16829).14" />
<Link Source="25003:[16701..16717).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[16701..16717).15" Target="25003:[16701..16717).13" />
<Link Source="25003:[16701..16717).15" Target="25003:[16642..16683).20" />
<Link Source="25003:[16701..16717).15" Target="25003:[16536..16829).14" />
<Link Source="25003:[16735..16781).17" Target="25003:[16536..16829).14" />
<Link Source="25003:[16735..16781).20" Target="25003:[14837..14866).9" />
<Link Source="25003:[16735..16781).20" Target="25003:[16735..16781).17" />
<Link Source="25003:[16735..16781).20" Target="25003:[16701..16717).15" />
<Link Source="25003:[16735..16781).20" Target="25003:[16536..16829).14" />
<Link Source="25003:[16799..16814).13" Target="25003:[16536..16829).14" />
<Link Source="25003:[16799..16814).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[16799..16814).15" Target="25003:[16799..16814).13" />
<Link Source="25003:[16799..16814).15" Target="25003:[16735..16781).20" />
<Link Source="25003:[16799..16814).15" Target="25003:[16536..16829).14" />
<Link Source="25003:[16845..16954).5" Target="25003:[15930..16520).11" />
<Link Source="25003:[16845..16954).5" Target="25003:[11120..11133).1" />
<Link Source="25003:[16970..17144).13" Target="25003:[15930..16520).11" />
<Link Source="25003:[16970..17144).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[16970..17144).14" Target="25003:[11120..11133).1" />
<Link Source="25003:[16970..17144).14" Target="25003:[16970..17144).13" />
<Link Source="25003:[17160..17340).13" Target="25003:[15930..16520).11" />
<Link Source="25003:[17160..17340).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[17160..17340).14" Target="25003:[11120..11133).1" />
<Link Source="25003:[17160..17340).14" Target="25003:[17160..17340).13" />
<Link Source="25003:[17356..17482).17" Target="25003:[15930..16520).11" />
<Link Source="25003:[17356..17482).18" Target="25003:[15930..16520).11" />
<Link Source="25003:[17356..17482).18" Target="25003:[11120..11133).1" />
<Link Source="25003:[17356..17482).18" Target="25003:[17356..17482).17" />
<Link Source="25003:[17498..17519).9" Target="25003:[14837..14866).9" />
<Link Source="25003:[17498..17519).9" Target="25003:[16799..16814).15" />
<Link Source="25003:[17498..17519).9" Target="25003:[15930..16520).11" />
<Link Source="25003:[22349..22404).43" Target="25003:[17498..17519).9" />
<Link Source="25003:[22349..22404).43" Target="25003:[15930..16520).11" />
<Link Source="25003:[22349..22404).44" Target="25003:[22349..22404).40" />
<Link Source="25003:[22349..22404).44" Target="25003:[22349..22404).43" />
<Link Source="25003:[22349..22404).44" Target="25003:[15930..16520).11" />
<Link Source="25003:[20764..20834).10" Target="25003:[18506..18543).1" />
<Link Source="25003:[20764..20834).10" Target="25003:[22349..22404).44" />
<Link Source="25003:[20764..20834).10" Target="25003:[19699..19726).3" />
<Link Source="25003:[20764..20834).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[20852..20923).7" Target="25003:[17936..17956).1" />
<Link Source="25003:[20852..20923).7" Target="25003:[15930..16520).11" />
<Link Source="25003:[22308..22323).6" Target="25003:[20852..20923).7" />
<Link Source="25003:[22308..22323).6" Target="25003:[15930..16520).11" />
<Link Source="25003:[22349..22404).49" Target="25003:[22349..22404).37" />
<Link Source="25003:[22349..22404).49" Target="25003:[22308..22323).6" />
<Link Source="25003:[22349..22404).49" Target="25003:[15930..16520).11" />
<Link Source="25003:[15100..15131).11" Target="25003:[11120..11133).1" />
<Link Source="25003:[15100..15131).11" Target="25003:[14921..15244).14" />
<Link Source="25003:[15100..15131).12" Target="25003:[14837..14866).9" />
<Link Source="25003:[15100..15131).12" Target="25003:[15100..15131).11" />
<Link Source="25003:[15100..15131).12" Target="25003:[14882..14907).15" />
<Link Source="25003:[15100..15131).12" Target="25003:[14921..15244).14" />
<Link Source="25003:[15149..15164).18" Target="25003:[14837..14866).9" />
<Link Source="25003:[15149..15164).18" Target="25003:[15149..15164).13" />
<Link Source="25003:[15149..15164).18" Target="25003:[15100..15131).12" />
<Link Source="25003:[15149..15164).18" Target="25003:[14921..15244).14" />
<Link Source="25003:[15182..15229).26" Target="25003:[11120..11133).1" />
<Link Source="25003:[15182..15229).26" Target="25003:[14921..15244).14" />
<Link Source="25003:[15182..15229).30" Target="25003:[14837..14866).9" />
<Link Source="25003:[15182..15229).30" Target="25003:[15182..15229).26" />
<Link Source="25003:[15182..15229).30" Target="25003:[15149..15164).18" />
<Link Source="25003:[15182..15229).30" Target="25003:[14921..15244).14" />
<Link Source="25003:[15632..15650).18" Target="25003:[14837..14866).9" />
<Link Source="25003:[15632..15650).18" Target="25003:[15632..15650).13" />
<Link Source="25003:[15632..15650).18" Target="25003:[15182..15229).30" />
<Link Source="25003:[15632..15650).18" Target="25003:[15320..15717).49" />
<Link Source="25003:[15672..15698).11" Target="25003:[11120..11133).1" />
<Link Source="25003:[15672..15698).11" Target="25003:[15320..15717).49" />
<Link Source="25003:[15672..15698).12" Target="25003:[14837..14866).9" />
<Link Source="25003:[15672..15698).12" Target="25003:[15672..15698).11" />
<Link Source="25003:[15672..15698).12" Target="25003:[15632..15650).18" />
<Link Source="25003:[15672..15698).12" Target="25003:[15320..15717).49" />
<Link Source="25003:[15737..15752).18" Target="25003:[14837..14866).9" />
<Link Source="25003:[15737..15752).18" Target="25003:[15737..15752).13" />
<Link Source="25003:[15737..15752).18" Target="25003:[15672..15698).12" />
<Link Source="25003:[15737..15752).18" Target="25003:[15260..15767).14" />
<Link Source="25003:[15899..15914).18" Target="25003:[14837..14866).9" />
<Link Source="25003:[15899..15914).18" Target="25003:[15899..15914).13" />
<Link Source="25003:[15899..15914).18" Target="25003:[15737..15752).18" />
<Link Source="25003:[15899..15914).18" Target="25003:[15930..16520).11" />
<Link Source="25003:[15986..16015).18" Target="25003:[14837..14866).9" />
<Link Source="25003:[15986..16015).18" Target="25003:[15986..16015).13" />
<Link Source="25003:[15986..16015).18" Target="25003:[15899..15914).18" />
<Link Source="25003:[15986..16015).18" Target="25003:[11120..11133).1" />
<Link Source="25003:[16202..16218).33" Target="25003:[14837..14866).9" />
<Link Source="25003:[16202..16218).33" Target="25003:[16202..16218).25" />
<Link Source="25003:[16202..16218).33" Target="25003:[15986..16015).18" />
<Link Source="25003:[16202..16218).33" Target="25003:[11120..11133).1" />
<Link Source="25003:[16240..16275).22" Target="25003:[14837..14866).9" />
<Link Source="25003:[16240..16275).22" Target="25003:[16240..16275).17" />
<Link Source="25003:[16240..16275).22" Target="25003:[16202..16218).33" />
<Link Source="25003:[16240..16275).22" Target="25003:[11120..11133).1" />
<Link Source="25003:[16297..16313).33" Target="25003:[14837..14866).9" />
<Link Source="25003:[16297..16313).33" Target="25003:[16297..16313).25" />
<Link Source="25003:[16297..16313).33" Target="25003:[16240..16275).22" />
<Link Source="25003:[16297..16313).33" Target="25003:[11120..11133).1" />
<Link Source="25003:[16414..16430).18" Target="25003:[14837..14866).9" />
<Link Source="25003:[16414..16430).18" Target="25003:[16414..16430).13" />
<Link Source="25003:[16414..16430).18" Target="25003:[16297..16313).33" />
<Link Source="25003:[16414..16430).18" Target="25003:[16335..16453).33" />
<Link Source="25003:[16490..16505).18" Target="25003:[14837..14866).9" />
<Link Source="25003:[16490..16505).18" Target="25003:[16490..16505).13" />
<Link Source="25003:[16490..16505).18" Target="25003:[16414..16430).18" />
<Link Source="25003:[16490..16505).18" Target="25003:[11120..11133).1" />
<Link Source="25003:[16596..16624).18" Target="25003:[14837..14866).9" />
<Link Source="25003:[16596..16624).18" Target="25003:[16596..16624).13" />
<Link Source="25003:[16596..16624).18" Target="25003:[16490..16505).18" />
<Link Source="25003:[16596..16624).18" Target="25003:[16536..16829).14" />
<Link Source="25003:[16642..16683).24" Target="25003:[14837..14866).9" />
<Link Source="25003:[16642..16683).24" Target="25003:[16642..16683).17" />
<Link Source="25003:[16642..16683).24" Target="25003:[16596..16624).18" />
<Link Source="25003:[16642..16683).24" Target="25003:[16536..16829).14" />
<Link Source="25003:[16701..16717).18" Target="25003:[14837..14866).9" />
<Link Source="25003:[16701..16717).18" Target="25003:[16701..16717).13" />
<Link Source="25003:[16701..16717).18" Target="25003:[16642..16683).24" />
<Link Source="25003:[16701..16717).18" Target="25003:[16536..16829).14" />
<Link Source="25003:[16735..16781).24" Target="25003:[14837..14866).9" />
<Link Source="25003:[16735..16781).24" Target="25003:[16735..16781).17" />
<Link Source="25003:[16735..16781).24" Target="25003:[16701..16717).18" />
<Link Source="25003:[16735..16781).24" Target="25003:[16536..16829).14" />
<Link Source="25003:[16799..16814).18" Target="25003:[14837..14866).9" />
<Link Source="25003:[16799..16814).18" Target="25003:[16799..16814).13" />
<Link Source="25003:[16799..16814).18" Target="25003:[16735..16781).24" />
<Link Source="25003:[16799..16814).18" Target="25003:[16536..16829).14" />
<Link Source="25003:[17498..17519).11" Target="25003:[14837..14866).9" />
<Link Source="25003:[17498..17519).11" Target="25003:[16799..16814).18" />
<Link Source="25003:[17498..17519).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[22349..22404).52" Target="25003:[17498..17519).11" />
<Link Source="25003:[22349..22404).52" Target="25003:[15930..16520).11" />
<Link Source="25003:[22349..22404).53" Target="25003:[22349..22404).49" />
<Link Source="25003:[22349..22404).53" Target="25003:[22349..22404).52" />
<Link Source="25003:[22349..22404).53" Target="25003:[15930..16520).11" />
<Link Source="25003:[20852..20923).10" Target="25003:[19153..19205).1" />
<Link Source="25003:[20852..20923).10" Target="25003:[22349..22404).53" />
<Link Source="25003:[20852..20923).10" Target="25003:[20852..20923).5" />
<Link Source="25003:[20852..20923).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[20952..21034).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[15930..16520).11" />
<Link Source="25003:[20952..21034).2" Target="25003:[20952..21034).1" />
<Link Source="25003:[20952..21034).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[20995..21019).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[20995..21019).1" Target="25003:[20764..20834).10" />
<Link Source="25003:[20995..21019).1" Target="25003:[20952..21034).2" />
<Link Source="25003:[21050..21081).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[21050..21081).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[20995..21019).1" />
<Link Source="25003:[21050..21081).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21095..21192).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).2" Target="25003:[19153..19205).1" />
<Link Source="25003:[21095..21192).2" Target="25002:[4126..4179).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3129..3133).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3121..3141).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3135..3139).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3121..3141).1" />
<Link Source="25012:[3102..3141).1" Target="25012:[3121..3141).1" />
<Link Source="25003:[21095..21192).3" Target="EXTERNAL" />
<Link Source="25003:[21095..21192).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[21113..21190).1" Target="25002:[4126..4179).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21095..21192).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2498..2519).1" Target="25003:[21095..21192).2" />
<Link Source="25012:[2498..2519).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2521..2537).1" Target="25003:[21095..21192).3" />
<Link Source="25012:[2521..2537).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2539..2575).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2539..2575).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2577..2608).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2577..2608).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2539..2575).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2634..2703).1" />
<Link Source="25012:[2634..2703).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2644..2662).1" Target="25012:[2634..2703).2" />
<Link Source="25012:[2644..2662).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1074..1101).1" Target="EXTERNAL" />
<Link Source="25012:[1194..1223).1" Target="25012:[1074..1101).1" />
<Link Source="25012:[1194..1223).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1183..1293).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[4217..4231).1" Target="25012:[4230..4231).1" />
<Link Source="25012:[4264..4278).1" Target="25012:[4277..4278).1" />
<Link Source="25012:[4311..4325).1" Target="25012:[4324..4325).1" />
<Link Source="25012:[3676..10647).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1194..1223).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1053..1102).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[2717..2783).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2717..2783).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2577..2608).1" />
<Link Source="25012:[2717..2783).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2799..2869).1" Target="25012:[2473..2496).1" />
<Link Source="25012:[2799..2869).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2883..2947).1" Target="25012:[2498..2519).1" />
<Link Source="25012:[2883..2947).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).1" Target="25012:[2521..2537).1" />
<Link Source="25012:[2963..3048).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[2963..3048).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2963..3048).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).4" Target="25012:[2717..2783).3" />
<Link Source="25012:[2963..3048).4" Target="25003:[21113..21190).1" />
<Link Source="25012:[2993..3046).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1574..1592).1" Target="25012:[2963..3048).2" />
<Link Source="25012:[1574..1592).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1594..1612).1" Target="25012:[2963..3048).3" />
<Link Source="25012:[1594..1612).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1614..1638).1" Target="25012:[2963..3048).4" />
<Link Source="25012:[1614..1638).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2644..2662).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2883..2947).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2993..3046).1" />
<Link Source="25012:[1693..1757).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1672..2400).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5415..5426).1" Target="25012:[1672..2400).2" />
<Link Source="25012:[5415..5426).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5428..5447).1" Target="25012:[1672..2400).3" />
<Link Source="25012:[5428..5447).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5449..5460).1" Target="25012:[1672..2400).4" />
<Link Source="25012:[5449..5460).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1533..2415).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[5394..5413).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[5415..5426).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[5428..5447).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[5449..5460).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5505..5562).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5494..5563).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9423..9434).1" Target="25012:[5494..5563).2" />
<Link Source="25012:[9423..9434).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9436..9455).1" Target="25012:[5494..5563).3" />
<Link Source="25012:[9436..9455).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9457..9468).1" Target="25012:[5494..5563).4" />
<Link Source="25012:[9457..9468).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5357..6686).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9423..9434).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9502..9523).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9457..9468).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9541..9562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9740..9764).1" Target="25012:[9502..9523).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[9541..9562).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9796).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9784..9796).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9814..9943).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[9889..9924).1" Target="25012:[9814..9943).3" />
<Link Source="25012:[9889..9924).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9889..9924).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9814..9943).3" />
<Link Source="25012:[9889..9896).1" Target="25012:[9889..9924).5" />
<Link Source="25012:[9889..9896).1" Target="25012:[9814..9943).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9889..9924).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9814..9943).3" />
<Link Source="25012:[9963..10092).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9963..10092).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10038..10073).1" Target="25012:[9963..10092).3" />
<Link Source="25012:[10038..10073).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9889..9896).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[10038..10073).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9963..10092).3" />
<Link Source="25012:[10038..10045).1" Target="25012:[10038..10073).5" />
<Link Source="25012:[10038..10045).1" Target="25012:[10038..10073).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9963..10092).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9963..10092).3" />
<Link Source="25012:[10112..10592).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10187..10573).1" Target="25012:[10112..10592).3" />
<Link Source="25012:[10187..10573).3" Target="25012:[10187..10573).1" />
<Link Source="25012:[10187..10573).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[10187..10573).3" Target="25012:[10112..10592).3" />
<Link Source="25012:[10270..10363).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[9889..9896).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10038..10045).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10270..10363).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).6" Target="25012:[9402..9421).1" />
<Link Source="25012:[10270..10363).6" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).10" Target="25012:[9436..9455).1" />
<Link Source="25012:[10270..10363).10" Target="25012:[10187..10573).3" />
<Link Source="25012:[10298..10344).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[1344..1362).1" Target="25012:[10270..10363).6" />
<Link Source="25012:[1344..1362).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1364..1374).1" Target="25012:[10270..10363).1" />
<Link Source="25012:[1364..1374).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1376..1394).1" Target="25012:[10270..10363).10" />
<Link Source="25012:[1376..1394).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1396..1406).1" Target="25012:[10270..10363).1" />
<Link Source="25012:[1396..1406).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1309..1517).1" Target="25012:[9369..10636).1" />
<Link Source="25012:[1309..1517).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[1344..1362).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[2799..2869).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[1364..1374).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[1376..1394).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[1396..1406).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[1309..1517).1" />
<Link Source="25012:[1440..1502).5" Target="EXTERNAL" />
<Link Source="25012:[1440..1502).5" Target="25012:[1440..1502).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[1440..1502).3" />
<Link Source="25012:[1440..1502).5" Target="25012:[2799..2869).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[2883..2947).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[10298..10344).1" />
<Link Source="25012:[10270..10363).17" Target="25012:[10270..10363).5" />
<Link Source="25012:[10270..10363).17" Target="25012:[1440..1502).5" />
<Link Source="25012:[10270..10363).17" Target="25012:[10187..10573).3" />
<Link Source="25012:[10389..10423).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10389..10423).3" Target="25012:[9740..9764).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[9784..9791).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[9889..9896).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10038..10045).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10389..10423).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10187..10573).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10449..10483).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10449..10483).3" Target="25012:[9740..9764).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[9784..9791).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[9889..9896).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10038..10045).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10449..10483).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).1" Target="25012:[10270..10363).17" />
<Link Source="25012:[10509..10550).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).2" Target="25012:[10389..10423).3" />
<Link Source="25012:[10509..10550).2" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).3" Target="25012:[10509..10550).1" />
<Link Source="25012:[10509..10550).3" Target="25012:[10509..10550).2" />
<Link Source="25012:[10509..10550).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).5" Target="25012:[10449..10483).3" />
<Link Source="25012:[10509..10550).5" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).6" Target="25012:[10509..10550).3" />
<Link Source="25012:[10509..10550).6" Target="25012:[10509..10550).5" />
<Link Source="25012:[10509..10550).6" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10516).1" Target="25012:[10509..10550).6" />
<Link Source="25012:[10509..10516).1" Target="25012:[10112..10592).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[10187..10573).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10612..10621).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10612..10621).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[5415..5426).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[5449..5460).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5581..5597).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[5615..5631).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).5" Target="25012:[5651..6341).2" />
<Link Source="25012:[5651..6341).5" Target="25012:[5651..6341).4" />
<Link Source="25012:[5651..6341).5" Target="25012:[1693..1757).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10612..10621).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9784..9791).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9889..9896).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10038..10045).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10509..10516).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5651..6341).5" />
<Link Source="25012:[5716..6322).2" Target="25012:[5651..6341).5" />
<Link Source="25012:[5716..6322).4" Target="25012:[10612..10621).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9740..9764).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9784..9791).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9889..9896).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[10038..10045).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[10509..10516).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[5716..6322).2" />
<Link Source="25012:[5716..6322).4" Target="25012:[5615..5631).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[5651..6341).5" />
<Link Source="25012:[5931..6322).1" Target="25012:[10612..10621).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9784..9791).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9889..9896).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[10038..10045).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[10509..10516).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5716..6322).4" />
<Link Source="25012:[5931..6322).2" Target="25012:[5716..6322).4" />
<Link Source="25012:[6194..6198).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[6194..6198).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6224..6228).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[6224..6228).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).2" Target="EXTERNAL" />
<Link Source="25012:[6254..6299).2" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).3" Target="25012:[6194..6198).1" />
<Link Source="25012:[6254..6299).3" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).4" Target="25012:[6224..6228).1" />
<Link Source="25012:[6254..6299).4" Target="25012:[5931..6322).2" />
<Link Source="25012:[6267..6298).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[3967..3980).1" Target="25012:[6254..6299).2" />
<Link Source="25012:[3967..3980).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3982..3992).1" Target="25012:[6254..6299).3" />
<Link Source="25012:[3982..3992).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3994..4004).1" Target="25012:[6254..6299).4" />
<Link Source="25012:[3994..4004).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3953..4168).1" Target="25012:[6254..6299).1" />
<Link Source="25012:[3953..4168).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[3967..3980).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[3982..3992).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[3994..4004).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[5651..6341).11" Target="25012:[6194..6198).1" />
<Link Source="25012:[5651..6341).11" Target="25012:[6224..6228).1" />
<Link Source="25012:[5651..6341).11" Target="25012:[1693..1757).1" />
<Link Source="25012:[6254..6299).7" Target="EXTERNAL" />
<Link Source="25012:[6254..6299).7" Target="25012:[5651..6341).11" />
<Link Source="25012:[6254..6299).8" Target="25012:[5651..6341).11" />
<Link Source="25012:[6267..6298).2" Target="25012:[5651..6341).11" />
<Link Source="25012:[3967..3980).2" Target="25012:[6254..6299).7" />
<Link Source="25012:[3967..3980).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[3982..3992).2" Target="25012:[6254..6299).8" />
<Link Source="25012:[3982..3992).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[3994..4004).2" Target="25012:[6254..6299).8" />
<Link Source="25012:[3994..4004).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[3953..4168).2" Target="25012:[6254..6299).8" />
<Link Source="25012:[3953..4168).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[4046..4055).2" Target="25012:[3967..3980).2" />
<Link Source="25012:[4046..4055).2" Target="25012:[3953..4168).2" />
<Link Source="25012:[4046..4055).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[4085..4096).2" Target="25012:[3982..3992).2" />
<Link Source="25012:[4085..4096).2" Target="25012:[3953..4168).2" />
<Link Source="25012:[4085..4096).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[4128..4139).2" Target="25012:[3994..4004).2" />
<Link Source="25012:[4128..4139).2" Target="25012:[3953..4168).2" />
<Link Source="25012:[4128..4139).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[6361..6506).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[5651..6341).11" />
<Link Source="25012:[6361..6506).2" Target="25012:[6361..6506).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[5651..6341).11" />
<Link Source="25012:[6526..6671).2" Target="25012:[6526..6671).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[6254..6299).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[6254..6299).8" />
<Link Source="25012:[1672..2400).7" Target="25012:[4046..4055).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4085..4096).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4128..4139).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4046..4055).2" />
<Link Source="25012:[1672..2400).7" Target="25012:[4085..4096).2" />
<Link Source="25012:[1672..2400).7" Target="25012:[4128..4139).2" />
<Link Source="25012:[1672..2400).7" Target="25012:[2993..3046).1" />
<Link Source="25012:[1809..2381).1" Target="25012:[1672..2400).7" />
<Link Source="25012:[2267..2322).1" Target="25012:[1809..2381).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[1440..1502).5" />
<Link Source="25012:[2267..2322).3" Target="25012:[1672..2400).7" />
<Link Source="25012:[2267..2322).3" Target="25012:[1809..2381).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[1614..1638).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[2267..2322).3" />
<Link Source="25012:[2267..2322).5" Target="25012:[2717..2783).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[1809..2381).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2963..3048).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2267..2322).1" />
<Link Source="25012:[2963..3048).7" Target="25003:[21113..21190).1" />
<Link Source="25003:[21095..21192).10" Target="25003:[18506..18543).1" />
<Link Source="25003:[21095..21192).10" Target="25012:[2963..3048).7" />
<Link Source="25003:[21095..21192).10" Target="25003:[21050..21081).3" />
<Link Source="25003:[21095..21192).10" Target="25002:[4126..4179).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[19153..19205).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[20852..20923).10" />
<Link Source="25003:[21208..21226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[22763..22783).1" />
<Link Source="25003:[21240..21260).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[21095..21192).10" />
<Link Source="25003:[21276..21305).1" Target="25002:[4126..4179).1" />
<Link Source="25002:[2401..2451).3" Target="25002:[4446..4474).1" />
<Link Source="25002:[4446..4475).3" Target="28001:[40426..41067).3" />
<Link Source="25002:[4489..4523).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4489..4523).1" Target="28001:[40426..41067).3" />
<Link Source="25002:[4489..4523).2" Target="10312:[78513..78552).10" />
<Link Source="25002:[4489..4523).2" Target="28001:[40426..41067).3" />
<Link Source="25002:[4489..4522).1" Target="28001:[40426..41067).3" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4523).1" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4523).2" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4653..4691).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[5097..5821).1" Target="25002:[4750..5836).1" />
<Link Source="25002:[5097..5821).1" Target="10312:[78513..78552).10" />
<Link Source="25002:[5097..5821).1" Target="25003:[11120..11133).1" />
<Link Source="25002:[5097..5821).2" Target="25002:[4637..4651).1" />
<Link Source="25002:[5097..5821).2" Target="25002:[5097..5821).1" />
<Link Source="25002:[5097..5821).2" Target="25003:[11120..11133).1" />
<Link Source="25002:[5097..5821).2" Target="25002:[4750..5836).1" />
<Link Source="25002:[5675..5741).1" Target="25002:[4750..5836).1" />
<Link Source="25002:[5675..5741).1" Target="25002:[5097..5821).2" />
<Link Source="25002:[5763..5802).1" Target="25002:[5675..5741).1" />
<Link Source="25002:[5763..5802).1" Target="25002:[5097..5821).2" />
<Link Source="25002:[5763..5802).3" Target="25002:[5675..5741).1" />
<Link Source="25002:[4489..4523).3" Target="28001:[40426..41067).3" />
<Link Source="25002:[4539..4548).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4539..4548).1" Target="28001:[40426..41067).3" />
</Links>
</DirectedGraph>
