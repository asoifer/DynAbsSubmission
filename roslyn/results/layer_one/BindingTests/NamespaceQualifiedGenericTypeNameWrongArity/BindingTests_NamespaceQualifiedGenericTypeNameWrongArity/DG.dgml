<?xml version="1.0" encoding="utf-8"?>
<DirectedGraph Title="DG" xmlns="http://schemas.microsoft.com/vs/2009/dgml">
<Nodes>
<Node Id="EXTERNAL" Label="EXTERNAL" />
<Node Id="25014:[387..448).1" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 697355" />
<Node Id="25014:[390..448).1" Label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 697356" />
<Node Id="28001:[588..156578).1" Label="param BindingTests(this) 697357" />
<Node Id="21002:[790..793).1" Label="'C' 697358" />
<Node Id="21002:[772..793).1" Label="DefaultTypeName = 'C' 697359" />
<Node Id="21002:[845..848).1" Label="'M' 697360" />
<Node Id="21002:[825..848).1" Label="DefaultMethodName = 'M' 697361" />
<Node Id="21002:[3243..25375).1" Label="@'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 697362" />
<Node Id="21002:[3098..25375).1" Label="LINQ =
        #region the string LINQ defines a complete LINQ API called List1$T$ (for instance method) and List2$T$ (for extension methods)
 @'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 697363" />
<Node Id="21002:[678..25421).1" Label="param CompilingTestBase(this) 697364" />
<Node Id="21003:[1338..2835).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 697365" />
<Node Id="21003:[1308..2835).1" Label="NullableAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 697366" />
<Node Id="21003:[2908..3440).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 697367" />
<Node Id="21003:[2871..3440).1" Label="NullableContextAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 697368" />
<Node Id="21003:[3516..3915).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 697369" />
<Node Id="21003:[3476..3915).1" Label="NullablePublicOnlyAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 697370" />
<Node Id="21003:[4223..4448).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 697371" />
<Node Id="21003:[4192..4448).1" Label="AllowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 697372" />
<Node Id="21003:[4518..4746).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 697373" />
<Node Id="21003:[4484..4746).1" Label="DisallowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 697374" />
<Node Id="21003:[4813..5071).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 697375" />
<Node Id="21003:[4782..5071).1" Label="MaybeNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 697376" />
<Node Id="21003:[5142..5397).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 697377" />
<Node Id="21003:[5107..5397).1" Label="MaybeNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 697378" />
<Node Id="21003:[5462..5718).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 697379" />
<Node Id="21003:[5433..5718).1" Label="NotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 697380" />
<Node Id="21003:[5787..6038).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 697381" />
<Node Id="21003:[5754..6038).1" Label="NotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 697382" />
<Node Id="21003:[6109..6460).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 697383" />
<Node Id="21003:[6074..6460).1" Label="MemberNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 697384" />
<Node Id="21003:[6535..6920).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 697385" />
<Node Id="21003:[6496..6920).1" Label="MemberNotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 697386" />
<Node Id="21003:[6993..7250).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 697387" />
<Node Id="21003:[6956..7250).1" Label="DoesNotReturnIfAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 697388" />
<Node Id="21003:[7321..7557).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 697389" />
<Node Id="21003:[7286..7557).1" Label="DoesNotReturnAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 697390" />
<Node Id="21003:[7631..7980).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 697391" />
<Node Id="21003:[7593..7980).1" Label="NotNullIfNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 697392" />
<Node Id="21003:[8047..8155).1" Label="@'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 697393" />
<Node Id="21003:[8016..8155).1" Label="IsExternalInitTypeDefinition = @'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 697394" />
<Node Id="21003:[8220..8359).1" Label="@'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 697395" />
<Node Id="21003:[8191..8359).1" Label="IAsyncDisposableDefinition = @'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 697396" />
<Node Id="21003:[8415..20279).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 697397" />
<Node Id="21003:[8395..20279).1" Label="AsyncStreamsTypes = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 697398" />
<Node Id="21003:[20353..20617).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 697399" />
<Node Id="21003:[20315..20617).1" Label="EnumeratorCancellationAttributeType = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 697400" />
<Node Id="21003:[20689..21473).1" Label="@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 697401" />
<Node Id="21003:[20653..21473).1" Label="NativeIntegerAttributeDefinition =
@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 697402" />
<Node Id="25004:[2227..2317).1" Label="() =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 697403" />
<Node Id="25004:[2332..2368).1" Label="LazyThreadSafetyMode.PublicationOnly 697404" />
<Node Id="25004:[2183..2369).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 697405" />
<Node Id="25004:[2155..2369).1" Label="s_lazyDefaultVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 697406" />
<Node Id="25004:[2602..2696).1" Label="() =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 697407" />
<Node Id="25004:[2711..2747).1" Label="LazyThreadSafetyMode.PublicationOnly 697408" />
<Node Id="25004:[2558..2748).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 697409" />
<Node Id="25004:[2531..2748).1" Label="s_lazyLatestVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 697410" />
<Node Id="25004:[2914..2947).1" Label="RuntimeUtilities.IsCoreClrRuntime 697411" />
<Node Id="25004:[3094..3171).1" Label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 697412" />
<Node Id="25004:[3077..3172).1" Label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 697413" />
<Node Id="25004:[2894..3172).1" Label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime
            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')
            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 697414" />
<Node Id="25004:[3490..5167).1" Label="() =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            } 697415" />
<Node Id="25004:[5182..5218).1" Label="LazyThreadSafetyMode.PublicationOnly 697416" />
<Node Id="25004:[3446..5219).1" Label="new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 697417" />
<Node Id="25004:[3432..5219).1" Label="s_winRtRefs = new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 697418" />
<Node Id="25004:[5576..5645).1" Label="() =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 697419" />
<Node Id="25004:[5660..5696).1" Label="LazyThreadSafetyMode.PublicationOnly 697420" />
<Node Id="25004:[5532..5697).1" Label="new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 697421" />
<Node Id="25004:[5508..5697).1" Label="s_portableRefsMinimal = new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 697422" />
<Node Id="25004:[6321..6439).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 697423" />
<Node Id="25004:[6458..6494).1" Label="LazyThreadSafetyMode.PublicationOnly 697424" />
<Node Id="25004:[6275..6495).1" Label="new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 697425" />
<Node Id="25004:[6244..6495).1" Label="s_systemCoreRef =
            new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 697426" />
<Node Id="25004:[6714..6838).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 697427" />
<Node Id="25004:[6853..6889).1" Label="LazyThreadSafetyMode.PublicationOnly 697428" />
<Node Id="25004:[6672..6890).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697429" />
<Node Id="25004:[6637..6890).1" Label="s_systemCoreRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697430" />
<Node Id="25004:[7130..7249).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 697431" />
<Node Id="25004:[7264..7300).1" Label="LazyThreadSafetyMode.PublicationOnly 697432" />
<Node Id="25004:[7088..7301).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697433" />
<Node Id="25004:[7066..7301).1" Label="s_systemCoreRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697434" />
<Node Id="25004:[7532..7667).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 697435" />
<Node Id="25004:[7682..7718).1" Label="LazyThreadSafetyMode.PublicationOnly 697436" />
<Node Id="25004:[7490..7719).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697437" />
<Node Id="25004:[7464..7719).1" Label="s_systemWindowsFormsRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697438" />
<Node Id="25004:[7940..8064).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 697439" />
<Node Id="25004:[8079..8115).1" Label="LazyThreadSafetyMode.PublicationOnly 697440" />
<Node Id="25004:[7898..8116).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697441" />
<Node Id="25004:[7877..8116).1" Label="s_systemDrawingRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697442" />
<Node Id="25004:[8324..8442).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 697443" />
<Node Id="25004:[8457..8493).1" Label="LazyThreadSafetyMode.PublicationOnly 697444" />
<Node Id="25004:[8282..8494).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697445" />
<Node Id="25004:[8264..8494).1" Label="s_systemDataRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697446" />
<Node Id="25004:[8694..8807).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 697447" />
<Node Id="25004:[8822..8858).1" Label="LazyThreadSafetyMode.PublicationOnly 697448" />
<Node Id="25004:[8652..8859).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697449" />
<Node Id="25004:[8636..8859).1" Label="s_mscorlibRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697450" />
<Node Id="25004:[9063..9214).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 697451" />
<Node Id="25004:[9229..9265).1" Label="LazyThreadSafetyMode.PublicationOnly 697452" />
<Node Id="25004:[9021..9266).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697453" />
<Node Id="25004:[8997..9266).1" Label="s_mscorlibRefPortable = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697454" />
<Node Id="25004:[9478..10389).1" Label="() =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            } 697455" />
<Node Id="25004:[10404..10440).1" Label="LazyThreadSafetyMode.PublicationOnly 697456" />
<Node Id="25004:[9436..10441).1" Label="new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 697457" />
<Node Id="25004:[9420..10441).1" Label="s_aacorlibRef = new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 697458" />
<Node Id="25004:[10811..10967).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri') 697459" />
<Node Id="25004:[10982..11018).1" Label="LazyThreadSafetyMode.PublicationOnly 697460" />
<Node Id="25004:[10769..11019).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 697461" />
<Node Id="25004:[10749..11019).1" Label="s_mscorlibRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 697462" />
<Node Id="25004:[11415..11589).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 697463" />
<Node Id="25004:[11604..11640).1" Label="LazyThreadSafetyMode.PublicationOnly 697464" />
<Node Id="25004:[11373..11641).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697465" />
<Node Id="25004:[11345..11641).1" Label="s_mscorlibRef_silverlight = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697466" />
<Node Id="25004:[12432..12560).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 697467" />
<Node Id="25004:[12575..12611).1" Label="LazyThreadSafetyMode.PublicationOnly 697468" />
<Node Id="25004:[12390..12612).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697469" />
<Node Id="25004:[12369..12612).1" Label="s_desktopCSharpRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697470" />
<Node Id="25004:[12815..12944).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 697471" />
<Node Id="25004:[12959..12995).1" Label="LazyThreadSafetyMode.PublicationOnly 697472" />
<Node Id="25004:[12773..12996).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697473" />
<Node Id="25004:[12760..12996).1" Label="s_std20Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697474" />
<Node Id="25004:[13204..13343).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 697475" />
<Node Id="25004:[13358..13394).1" Label="LazyThreadSafetyMode.PublicationOnly 697476" />
<Node Id="25004:[13162..13395).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697477" />
<Node Id="25004:[13138..13395).1" Label="s_46NetStandardFacade = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697478" />
<Node Id="25004:[13621..13796).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 697479" />
<Node Id="25004:[13811..13847).1" Label="LazyThreadSafetyMode.PublicationOnly 697480" />
<Node Id="25004:[13579..13848).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 697481" />
<Node Id="25004:[13551..13848).1" Label="s_systemDynamicRuntimeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 697482" />
<Node Id="25004:[14066..14175).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 697483" />
<Node Id="25004:[14190..14226).1" Label="LazyThreadSafetyMode.PublicationOnly 697484" />
<Node Id="25004:[14024..14227).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697485" />
<Node Id="25004:[14010..14227).1" Label="s_systemRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697486" />
<Node Id="25004:[14421..14531).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 697487" />
<Node Id="25004:[14546..14582).1" Label="LazyThreadSafetyMode.PublicationOnly 697488" />
<Node Id="25004:[14379..14583).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697489" />
<Node Id="25004:[14361..14583).1" Label="s_systemRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697490" />
<Node Id="25004:[14798..14913).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 697491" />
<Node Id="25004:[14928..14964).1" Label="LazyThreadSafetyMode.PublicationOnly 697492" />
<Node Id="25004:[14756..14965).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697493" />
<Node Id="25004:[14725..14965).1" Label="s_systemRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697494" />
<Node Id="25004:[15193..15301).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 697495" />
<Node Id="25004:[15316..15352).1" Label="LazyThreadSafetyMode.PublicationOnly 697496" />
<Node Id="25004:[15151..15353).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697497" />
<Node Id="25004:[15133..15353).1" Label="s_systemRef_v20 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697498" />
<Node Id="25004:[15554..15670).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 697499" />
<Node Id="25004:[15685..15721).1" Label="LazyThreadSafetyMode.PublicationOnly 697500" />
<Node Id="25004:[15512..15722).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697501" />
<Node Id="25004:[15495..15722).1" Label="s_systemXmlRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697502" />
<Node Id="25004:[15925..16050).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 697503" />
<Node Id="25004:[16065..16101).1" Label="LazyThreadSafetyMode.PublicationOnly 697504" />
<Node Id="25004:[15883..16102).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697505" />
<Node Id="25004:[15862..16102).1" Label="s_systemXmlLinqRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697506" />
<Node Id="25004:[16314..16416).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 697507" />
<Node Id="25004:[16431..16467).1" Label="LazyThreadSafetyMode.PublicationOnly 697508" />
<Node Id="25004:[16272..16468).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697509" />
<Node Id="25004:[16250..16468).1" Label="s_mscorlibFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697510" />
<Node Id="25004:[16687..16800).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 697511" />
<Node Id="25004:[16815..16851).1" Label="LazyThreadSafetyMode.PublicationOnly 697512" />
<Node Id="25004:[16645..16852).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697513" />
<Node Id="25004:[16618..16852).1" Label="s_systemRuntimeFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697514" />
<Node Id="25004:[17083..17200).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 697515" />
<Node Id="25004:[17215..17251).1" Label="LazyThreadSafetyMode.PublicationOnly 697516" />
<Node Id="25004:[17041..17252).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697517" />
<Node Id="25004:[17012..17252).1" Label="s_systemThreadingFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697518" />
<Node Id="25004:[17497..17625).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 697519" />
<Node Id="25004:[17640..17676).1" Label="LazyThreadSafetyMode.PublicationOnly 697520" />
<Node Id="25004:[17455..17677).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697521" />
<Node Id="25004:[17421..17677).1" Label="s_systemThreadingTasksFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697522" />
<Node Id="25004:[17911..18059).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 697523" />
<Node Id="25004:[18074..18110).1" Label="LazyThreadSafetyMode.PublicationOnly 697524" />
<Node Id="25004:[17869..18111).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697525" />
<Node Id="25004:[17850..18111).1" Label="s_mscorlibPP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697526" />
<Node Id="25004:[18321..18481).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 697527" />
<Node Id="25004:[18496..18532).1" Label="LazyThreadSafetyMode.PublicationOnly 697528" />
<Node Id="25004:[18279..18533).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697529" />
<Node Id="25004:[18255..18533).1" Label="s_systemRuntimePP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697530" />
<Node Id="25004:[18754..18880).1" Label="() =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 697531" />
<Node Id="25004:[18895..18931).1" Label="LazyThreadSafetyMode.PublicationOnly 697532" />
<Node Id="25004:[18712..18932).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697533" />
<Node Id="25004:[18687..18932).1" Label="s_FSharpTestLibraryRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 697534" />
<Node Id="25004:[19130..19147).1" Label="@'R:\Invalid.dll' 697535" />
<Node Id="25004:[19120..19147).1" Label="fullPath: @'R:\Invalid.dll' 697536" />
<Node Id="25004:[19094..19148).1" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 697537" />
<Node Id="25004:[19094..19148).5" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 697538" />
<Node Id="25004:[19081..19148).1" Label="InvalidRef = new TestMetadataReference(fullPath: @'R:\Invalid.dll') 697539" />
<Node Id="21003:[51329..51357).1" Label="MscorlibRef_v4_0_30316_17626 697540" />
<Node Id="25004:[10673..10688).1" Label="Net451.mscorlib 697541" />
<Node Id="21003:[51307..51358).1" Label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 697542" />
<Node Id="21003:[51292..51358).1" Label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 697543" />
<Node Id="21003:[56538..56550).1" Label="'/*$bind$*/' 697544" />
<Node Id="21003:[56524..56550).1" Label="StartString = '/*$bind$*/' 697545" />
<Node Id="21003:[56596..56609).1" Label="'/*$/bind$*/' 697546" />
<Node Id="21003:[56584..56609).1" Label="EndString = '/*$/bind$*/' 697547" />
<Node Id="21003:[92394..99056).1" Label="@'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 697548" />
<Node Id="21003:[92381..99056).1" Label="SpanSource = @'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 697549" />
<Node Id="21003:[101764..102290).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 697550" />
<Node Id="21003:[101743..102290).1" Label="s_IAsyncEnumerable = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 697551" />
<Node Id="21003:[1215..102298).1" Label="param CSharpTestBase(this) 697552" />
<Node Id="25015:[917..26825).1" Label="param CommonTestBase(this) 697553" />
<Node Id="25004:[926..968).1" Label="param TestBase(this) 697554" />
<Node Id="25004:[908..913).1" Label="_temp 697555" />
<Node Id="25014:[387..448).372" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 697556" />
<Node Id="28001:[74060..75308).1" Label="param NamespaceQualifiedGenericTypeNameWrongArity(this) 697557" />
<Node Id="28001:[74158..74549).1" Label="var source =
@'namespace N
{
    public class A$T$
    {
        public static T F;
    }

    public class B 
    { 
        public static int F;
    }
    public class B$T1, T2$ 
    { 
        public static System.Tuple$T1, T2$ F;
    }
}
class C
{
    static int TooMany = N.A$int, int$.F;
    static int TooFew = N.A.F;
    static int TooIndecisive = N.B$int$;
}'; 697558" />
<Node Id="28001:[74563..75297).1" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ); 697559" />
<Node Id="28001:[74581..74587).1" Label="source 697560" />
<Node Id="21004:[2251..2264).1" Label="param operator(string source) 697561" />
<Node Id="21004:[2290..2296).1" Label="source 697562" />
<Node Id="21004:[2269..2297).1" Label="new CSharpTestSource(source) 697563" />
<Node Id="21004:[839..851).1" Label="param CSharpTestSource(object value) 697564" />
<Node Id="21004:[814..902).1" Label="param CSharpTestSource(this) 697565" />
<Node Id="21004:[877..882).1" Label="Value 697566" />
<Node Id="28001:[74563..75297).2" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ); 697567" />
<Node Id="28001:[74563..75297).4" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ); 697568" />
<Node Id="28001:[74563..74588).1" Label="CreateCompilation(source) 697569" />
<Node Id="21003:[44736..44759).1" Label="param CreateCompilation(CSharpTestSource source) 697570" />
<Node Id="21003:[44774..44822).1" Label="param CreateCompilation(IEnumerable$MetadataReference$ references = null) 697571" />
<Node Id="21003:[44837..44876).1" Label="param CreateCompilation(CSharpCompilationOptions options = null) 697572" />
<Node Id="21003:[44891..44929).1" Label="param CreateCompilation(CSharpParseOptions parseOptions = null) 697573" />
<Node Id="21003:[44944..45002).1" Label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 697574" />
<Node Id="21003:[45017..45041).1" Label="param CreateCompilation(string assemblyName = '') 697575" />
<Node Id="21003:[45056..45082).1" Label="param CreateCompilation(string sourceFileName = '') 697576" />
<Node Id="21003:[45097..45128).1" Label="param CreateCompilation(bool skipUsesIsNullable = false) 697577" />
<Node Id="21003:[45156..45162).1" Label="source 697578" />
<Node Id="21003:[45198..45213).1" Label="targetFramework 697579" />
<Node Id="21003:[45215..45225).1" Label="references 697580" />
<Node Id="21003:[45164..45226).1" Label="TargetFrameworkUtil.GetReferences(targetFramework, references) 697581" />
<Node Id="25005:[9600..9618).1" Label="param GetReferences(TargetFramework tf) 697582" />
<Node Id="25005:[9620..9671).1" Label="param GetReferences(IEnumerable$MetadataReference$ additionalReferences) 697583" />
<Node Id="25005:[9697..9732).1" Label="var references = GetReferences(tf); 697584" />
<Node Id="25005:[9714..9731).1" Label="GetReferences(tf) 697585" />
<Node Id="25005:[7569..7600).1" Label="param GetReferences(TargetFramework targetFramework) 697586" />
<Node Id="25005:[7605..9525).1" Label="targetFramework switch
        {
            TargetFramework.Empty =$ ImmutableArray$MetadataReference$.Empty,
            TargetFramework.Mscorlib40 =$ Mscorlib40References,
            TargetFramework.Mscorlib40Extended =$ Mscorlib40ExtendedReferences,
            TargetFramework.Mscorlib40AndSystemCore =$ Mscorlib40andSystemCoreReferences,
            TargetFramework.Mscorlib40AndVBRuntime =$ Mscorlib40andVBRuntimeReferences,
            TargetFramework.Mscorlib45 =$ Mscorlib45References,
            TargetFramework.Mscorlib45Extended =$ Mscorlib45ExtendedReferences,
            TargetFramework.Mscorlib45AndCSharp =$ Mscorlib45AndCSharpReferences,
            TargetFramework.Mscorlib45AndVBRuntime =$ Mscorlib45AndVBRuntimeReferences,
            TargetFramework.Mscorlib46 =$ Mscorlib46References,
            TargetFramework.Mscorlib46Extended =$ Mscorlib46ExtendedReferences,
            TargetFramework.Mscorlib461 =$ Mscorlib46References,
            TargetFramework.Mscorlib461Extended =$ Mscorlib461ExtendedReferences,
            TargetFramework.NetStandard20 =$ NetStandard20References,
            TargetFramework.NetCoreApp =$ NetCoreAppReferences,
            TargetFramework.WinRT =$ WinRTReferences,
            TargetFramework.Standard =$ StandardReferences,
            TargetFramework.StandardLatest =$ StandardLatestReferences,
            TargetFramework.StandardAndCSharp =$ StandardAndCSharpReferences,
            TargetFramework.StandardAndVBRuntime =$ StandardAndVBRuntimeReferences,
            TargetFramework.StandardCompat =$ StandardCompatReferences,
            TargetFramework.DefaultVb =$ DefaultVbReferences,
            TargetFramework.Minimal =$ MinimalReferences,
            TargetFramework.MinimalAsync =$ MinimalAsyncReferences,
            _ =$ throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),
        } 697587" />
<Node Id="25005:[8889..8907).1" Label="StandardReferences 697588" />
<Node Id="25005:[6208..6241).1" Label="RuntimeUtilities.IsCoreClrRuntime 697589" />
<Node Id="25005:[6270..6298).1" Label="Mscorlib46ExtendedReferences 697590" />
<Node Id="25005:[4543..4693).1" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 697591" />
<Node Id="25005:[4648..4670).1" Label="TestBase.ValueTupleRef 697592" />
<Node Id="25004:[12011..12051).1" Label="TestReferences.NetFx.ValueTuple.tuplelib 697593" />
<Node Id="25005:[4543..4693).7" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 697594" />
<Node Id="25005:[6208..6298).1" Label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 697595" />
<Node Id="25005:[9746..9845).1" Label="if (additionalReferences == null)
            {
                return references;
            } 697596" />
<Node Id="25005:[9746..9845).2" Label="if (additionalReferences == null)
            {
                return references;
            } 697597" />
<Node Id="25005:[9812..9830).1" Label="return references; 697598" />
<Node Id="21003:[45228..45235).1" Label="options 697599" />
<Node Id="21003:[45237..45249).1" Label="parseOptions 697600" />
<Node Id="21003:[45251..45263).1" Label="assemblyName 697601" />
<Node Id="21003:[45265..45279).1" Label="sourceFileName 697602" />
<Node Id="21003:[45281..45299).1" Label="skipUsesIsNullable 697603" />
<Node Id="21003:[45133..45300).1" Label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 697604" />
<Node Id="21003:[45382..45405).1" Label="param CreateEmptyCompilation(CSharpTestSource source) 697605" />
<Node Id="21003:[45420..45468).1" Label="param CreateEmptyCompilation(IEnumerable$MetadataReference$ references = null) 697606" />
<Node Id="21003:[45483..45522).1" Label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 697607" />
<Node Id="21003:[45537..45575).1" Label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 697608" />
<Node Id="21003:[45590..45614).1" Label="param CreateEmptyCompilation(string assemblyName = '') 697609" />
<Node Id="21003:[45629..45655).1" Label="param CreateEmptyCompilation(string sourceFileName = '') 697610" />
<Node Id="21003:[45670..45701).1" Label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 697611" />
<Node Id="21003:[45728..45734).1" Label="source 697612" />
<Node Id="21003:[45736..45746).1" Label="references 697613" />
<Node Id="21003:[45748..45755).1" Label="options 697614" />
<Node Id="21003:[45757..45769).1" Label="parseOptions 697615" />
<Node Id="21003:[45771..45783).1" Label="assemblyName 697616" />
<Node Id="21003:[45785..45799).1" Label="sourceFileName 697617" />
<Node Id="21003:[45801..45819).1" Label="skipUsesIsNullable 697618" />
<Node Id="21003:[45842..45846).1" Label="null 697619" />
<Node Id="21003:[45821..45846).1" Label="experimentalFeature: null 697620" />
<Node Id="21003:[45706..45847).1" Label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 697621" />
<Node Id="21003:[45929..45952).1" Label="param CreateCompilationCore(CSharpTestSource source) 697622" />
<Node Id="21003:[45967..46008).1" Label="param CreateCompilationCore(IEnumerable$MetadataReference$ references) 697623" />
<Node Id="21003:[46023..46055).1" Label="param CreateCompilationCore(CSharpCompilationOptions options) 697624" />
<Node Id="21003:[46070..46101).1" Label="param CreateCompilationCore(CSharpParseOptions parseOptions) 697625" />
<Node Id="21003:[46116..46135).1" Label="param CreateCompilationCore(string assemblyName) 697626" />
<Node Id="21003:[46150..46171).1" Label="param CreateCompilationCore(string sourceFileName) 697627" />
<Node Id="21003:[46186..46209).1" Label="param CreateCompilationCore(bool skipUsesIsNullable) 697628" />
<Node Id="21003:[46224..46254).1" Label="param CreateCompilationCore(MessageID? experimentalFeature) 697629" />
<Node Id="21003:[46280..46350).1" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 697630" />
<Node Id="21003:[46280..46350).2" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 697631" />
<Node Id="21003:[46298..46349).1" Label="source.GetSyntaxTrees(parseOptions, sourceFileName) 697632" />
<Node Id="21004:[949..980).1" Label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 697633" />
<Node Id="21004:[982..1008).1" Label="param GetSyntaxTrees(string sourceFileName = '') 697634" />
<Node Id="21004:[914..2190).1" Label="param GetSyntaxTrees(this) 697635" />
<Node Id="21004:[1034..2179).1" Label="switch (Value)
            {
                case string source:
                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };
                case string[] sources:
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return CSharpTestBase.Parse(parseOptions, sources);
                case SyntaxTree tree:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return new[] { tree };
                case SyntaxTree[] trees:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return trees;
                case CSharpTestSource[] testSources:
                    return testSources.SelectMany(s =$ s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();
                case null:
                    return Array.Empty$SyntaxTree$();
                default:
                    throw new Exception($'Unexpected value: {Value}');
            } 697636" />
<Node Id="21004:[1122..1208).1" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 697637" />
<Node Id="21004:[1122..1208).3" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 697638" />
<Node Id="21004:[1122..1208).4" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 697639" />
<Node Id="21004:[1137..1205).1" Label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 697640" />
<Node Id="21003:[34078..34089).1" Label="param Parse(string text) 697641" />
<Node Id="21003:[34091..34111).1" Label="param Parse(string filename = '') 697642" />
<Node Id="21003:[34113..34146).1" Label="param Parse(CSharpParseOptions options = null) 697643" />
<Node Id="21003:[34148..34172).1" Label="param Parse(Encoding encoding = null) 697644" />
<Node Id="21003:[34198..34304).1" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 697645" />
<Node Id="21003:[34198..34304).2" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 697646" />
<Node Id="21010:[590..618).1" Label="kind: SourceCodeKind.Regular 697647" />
<Node Id="21010:[620..662).1" Label="documentationMode: DocumentationMode.Parse 697648" />
<Node Id="21010:[567..663).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 697649" />
<Node Id="21010:[567..663).5" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 697650" />
<Node Id="21010:[557..663).1" Label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 697651" />
<Node Id="21010:[742..763).1" Label="SourceCodeKind.Script 697652" />
<Node Id="21010:[725..764).1" Label="Regular.WithKind(SourceCodeKind.Script) 697653" />
<Node Id="21010:[716..764).1" Label="Script = Regular.WithKind(SourceCodeKind.Script) 697654" />
<Node Id="21010:[856..879).1" Label="LanguageVersion.CSharp6 697655" />
<Node Id="21010:[828..880).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 697656" />
<Node Id="21010:[817..880).1" Label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 697657" />
<Node Id="21010:[972..995).1" Label="LanguageVersion.CSharp7 697658" />
<Node Id="21010:[944..996).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 697659" />
<Node Id="21010:[933..996).1" Label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 697660" />
<Node Id="21010:[1090..1115).1" Label="LanguageVersion.CSharp7_1 697661" />
<Node Id="21010:[1062..1116).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 697662" />
<Node Id="21010:[1049..1116).1" Label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 697663" />
<Node Id="21010:[1210..1235).1" Label="LanguageVersion.CSharp7_2 697664" />
<Node Id="21010:[1182..1236).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 697665" />
<Node Id="21010:[1169..1236).1" Label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 697666" />
<Node Id="21010:[1330..1355).1" Label="LanguageVersion.CSharp7_3 697667" />
<Node Id="21010:[1302..1356).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 697668" />
<Node Id="21010:[1289..1356).1" Label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 697669" />
<Node Id="21010:[1454..1477).1" Label="LanguageVersion.Default 697670" />
<Node Id="21010:[1426..1478).1" Label="Regular.WithLanguageVersion(LanguageVersion.Default) 697671" />
<Node Id="21010:[1409..1478).1" Label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 697672" />
<Node Id="21010:[1576..1599).1" Label="LanguageVersion.Preview 697673" />
<Node Id="21010:[1548..1600).1" Label="Regular.WithLanguageVersion(LanguageVersion.Preview) 697674" />
<Node Id="21010:[1531..1600).1" Label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 697675" />
<Node Id="21010:[1692..1715).1" Label="LanguageVersion.CSharp8 697676" />
<Node Id="21010:[1664..1716).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 697677" />
<Node Id="21010:[1653..1716).1" Label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 697678" />
<Node Id="21010:[1808..1831).1" Label="LanguageVersion.CSharp9 697679" />
<Node Id="21010:[1780..1832).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 697680" />
<Node Id="21010:[1769..1832).1" Label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 697681" />
<Node Id="21010:[1950..1976).1" Label="DocumentationMode.Diagnose 697682" />
<Node Id="21010:[1920..1977).1" Label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 697683" />
<Node Id="21010:[1885..1977).1" Label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 697684" />
<Node Id="21010:[2060..2067).1" Label="Regular 697685" />
<Node Id="21010:[2080..2109).1" Label="'UseLegacyStrongNameProvider' 697686" />
<Node Id="21010:[2060..2110).1" Label="Regular.WithFeature('UseLegacyStrongNameProvider') 697687" />
<Node Id="21010:[7783..7814).1" Label="param WithFeature(this CSharpParseOptions options) 697688" />
<Node Id="21010:[7816..7830).1" Label="param WithFeature(string feature) 697689" />
<Node Id="21010:[7832..7853).1" Label="param WithFeature(string value = 'true') 697690" />
<Node Id="21010:[7879..7992).1" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 697691" />
<Node Id="21010:[7879..7992).2" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 697692" />
<Node Id="21010:[7879..7992).3" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 697693" />
<Node Id="21010:[7879..7992).4" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 697694" />
<Node Id="21010:[7879..7992).5" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 697695" />
<Node Id="21010:[7931..7989).1" Label="new[] { new KeyValuePair$string, string$(feature, value) } 697696" />
<Node Id="21010:[7879..7992).9" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 697697" />
<Node Id="21010:[2030..2110).1" Label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 697698" />
<Node Id="21010:[2227..2274).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates 697699" />
<Node Id="21010:[2227..2292).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 697700" />
<Node Id="21010:[2295..2296).1" Label="1 697701" />
<Node Id="21010:[2227..2296).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 697702" />
<Node Id="21010:[2199..2297).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 697703" />
<Node Id="21010:[2163..2297).1" Label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 697704" />
<Node Id="21010:[2401..2450).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides 697705" />
<Node Id="21010:[2401..2468).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 697706" />
<Node Id="21010:[2373..2469).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 697707" />
<Node Id="21010:[2350..2469).1" Label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 697708" />
<Node Id="21010:[2576..2599).1" Label="LanguageVersion.CSharp8 697709" />
<Node Id="21010:[2548..2600).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 697710" />
<Node Id="21010:[2522..2600).1" Label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 697711" />
<Node Id="21010:[2655..2705).1" Label="RegularWithExtendedPartialMethods = RegularPreview 697712" />
<Node Id="21010:[2799..2838).1" Label="new SmallDictionary$string, string$ { } 697713" />
<Node Id="21010:[2774..2838).1" Label="s_experimentalFeatures = new SmallDictionary$string, string$ { } 697714" />
<Node Id="21010:[2954..2982).1" Label="kind: SourceCodeKind.Regular 697715" />
<Node Id="21010:[2984..3025).1" Label="documentationMode: DocumentationMode.None 697716" />
<Node Id="21010:[3027..3067).1" Label="languageVersion: LanguageVersion.Preview 697717" />
<Node Id="21010:[2931..3068).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 697718" />
<Node Id="21010:[2931..3068).3" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 697719" />
<Node Id="21010:[3082..3104).1" Label="s_experimentalFeatures 697720" />
<Node Id="21010:[2931..3105).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 697721" />
<Node Id="21010:[2891..3105).1" Label="ExperimentalParseOptions =
            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 697722" />
<Node Id="21010:[3487..3556).1" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 697723" />
<Node Id="21010:[3524..3544).1" Label="'testV7SwitchBinder' 697724" />
<Node Id="21010:[3546..3552).1" Label="'true' 697725" />
<Node Id="21010:[3487..3556).2" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 697726" />
<Node Id="21010:[3465..3557).1" Label="Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 697727" />
<Node Id="21010:[3436..3557).1" Label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 697728" />
<Node Id="21010:[3612..3656).1" Label="RegularWithoutRecursivePatterns = Regular7_3 697729" />
<Node Id="21010:[3709..3748).1" Label="RegularWithRecursivePatterns = Regular8 697730" />
<Node Id="21010:[3801..3844).1" Label="RegularWithoutPatternCombinators = Regular8 697731" />
<Node Id="21010:[3897..3943).1" Label="RegularWithPatternCombinators = RegularPreview 697732" />
<Node Id="21010:[4035..4070).1" Label="OutputKind.DynamicallyLinkedLibrary 697733" />
<Node Id="21010:[4072..4097).1" Label="OptimizationLevel.Release 697734" />
<Node Id="21010:[4017..4098).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 697735" />
<Node Id="21010:[10204..10225).1" Label="param CreateTestOptions(OutputKind outputKind) 697736" />
<Node Id="21010:[10227..10262).1" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697737" />
<Node Id="21010:[10264..10288).1" Label="param CreateTestOptions(bool allowUnsafe = false) 697738" />
<Node Id="21010:[10335..10345).1" Label="outputKind 697739" />
<Node Id="21010:[10347..10383).1" Label="optimizationLevel: optimizationLevel 697740" />
<Node Id="21010:[10385..10425).1" Label="warningLevel: Diagnostic.MaxWarningLevel 697741" />
<Node Id="21010:[10427..10451).1" Label="allowUnsafe: allowUnsafe 697742" />
<Node Id="21010:[10306..10452).1" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697743" />
<Node Id="21010:[10306..10452).47" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697744" />
<Node Id="21010:[4004..4098).1" Label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 697745" />
<Node Id="21010:[4188..4217).1" Label="OutputKind.ConsoleApplication 697746" />
<Node Id="21010:[4219..4244).1" Label="OptimizationLevel.Release 697747" />
<Node Id="21010:[4170..4245).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 697748" />
<Node Id="21010:[10204..10225).2" Label="param CreateTestOptions(OutputKind outputKind) 697749" />
<Node Id="21010:[10227..10262).2" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697750" />
<Node Id="21010:[10264..10288).2" Label="param CreateTestOptions(bool allowUnsafe = false) 697751" />
<Node Id="21010:[10335..10345).2" Label="outputKind 697752" />
<Node Id="21010:[10347..10383).2" Label="optimizationLevel: optimizationLevel 697753" />
<Node Id="21010:[10385..10425).2" Label="warningLevel: Diagnostic.MaxWarningLevel 697754" />
<Node Id="21010:[10427..10451).2" Label="allowUnsafe: allowUnsafe 697755" />
<Node Id="21010:[10306..10452).49" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697756" />
<Node Id="21010:[10306..10452).95" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697757" />
<Node Id="21010:[4157..4245).1" Label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 697758" />
<Node Id="21010:[4353..4357).1" Label="true 697759" />
<Node Id="21010:[4324..4358).1" Label="ReleaseDll.WithDebugPlusMode(true) 697760" />
<Node Id="21010:[4306..4358).1" Label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 697761" />
<Node Id="21010:[4466..4470).1" Label="true 697762" />
<Node Id="21010:[4437..4471).1" Label="ReleaseExe.WithDebugPlusMode(true) 697763" />
<Node Id="21010:[4419..4471).1" Label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 697764" />
<Node Id="21010:[4561..4596).1" Label="OutputKind.DynamicallyLinkedLibrary 697765" />
<Node Id="21010:[4598..4621).1" Label="OptimizationLevel.Debug 697766" />
<Node Id="21010:[4543..4622).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 697767" />
<Node Id="21010:[10204..10225).3" Label="param CreateTestOptions(OutputKind outputKind) 697768" />
<Node Id="21010:[10227..10262).3" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697769" />
<Node Id="21010:[10264..10288).3" Label="param CreateTestOptions(bool allowUnsafe = false) 697770" />
<Node Id="21010:[10335..10345).3" Label="outputKind 697771" />
<Node Id="21010:[10347..10383).3" Label="optimizationLevel: optimizationLevel 697772" />
<Node Id="21010:[10385..10425).3" Label="warningLevel: Diagnostic.MaxWarningLevel 697773" />
<Node Id="21010:[10427..10451).3" Label="allowUnsafe: allowUnsafe 697774" />
<Node Id="21010:[10306..10452).97" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697775" />
<Node Id="21010:[10306..10452).143" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697776" />
<Node Id="21010:[4532..4622).1" Label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 697777" />
<Node Id="21010:[4710..4739).1" Label="OutputKind.ConsoleApplication 697778" />
<Node Id="21010:[4741..4764).1" Label="OptimizationLevel.Debug 697779" />
<Node Id="21010:[4692..4765).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 697780" />
<Node Id="21010:[10204..10225).4" Label="param CreateTestOptions(OutputKind outputKind) 697781" />
<Node Id="21010:[10227..10262).4" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697782" />
<Node Id="21010:[10264..10288).4" Label="param CreateTestOptions(bool allowUnsafe = false) 697783" />
<Node Id="21010:[10335..10345).4" Label="outputKind 697784" />
<Node Id="21010:[10347..10383).4" Label="optimizationLevel: optimizationLevel 697785" />
<Node Id="21010:[10385..10425).4" Label="warningLevel: Diagnostic.MaxWarningLevel 697786" />
<Node Id="21010:[10427..10451).4" Label="allowUnsafe: allowUnsafe 697787" />
<Node Id="21010:[10306..10452).145" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697788" />
<Node Id="21010:[10306..10452).191" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697789" />
<Node Id="21010:[4681..4765).1" Label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 697790" />
<Node Id="21010:[4859..4892).1" Label="OutputKind.WindowsRuntimeMetadata 697791" />
<Node Id="21010:[4894..4919).1" Label="OptimizationLevel.Release 697792" />
<Node Id="21010:[4841..4920).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 697793" />
<Node Id="21010:[10204..10225).5" Label="param CreateTestOptions(OutputKind outputKind) 697794" />
<Node Id="21010:[10227..10262).5" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697795" />
<Node Id="21010:[10264..10288).5" Label="param CreateTestOptions(bool allowUnsafe = false) 697796" />
<Node Id="21010:[10335..10345).5" Label="outputKind 697797" />
<Node Id="21010:[10347..10383).5" Label="optimizationLevel: optimizationLevel 697798" />
<Node Id="21010:[10385..10425).5" Label="warningLevel: Diagnostic.MaxWarningLevel 697799" />
<Node Id="21010:[10427..10451).5" Label="allowUnsafe: allowUnsafe 697800" />
<Node Id="21010:[10306..10452).193" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697801" />
<Node Id="21010:[10306..10452).239" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697802" />
<Node Id="21010:[4826..4920).1" Label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 697803" />
<Node Id="21010:[5010..5043).1" Label="OutputKind.WindowsRuntimeMetadata 697804" />
<Node Id="21010:[5045..5068).1" Label="OptimizationLevel.Debug 697805" />
<Node Id="21010:[4992..5069).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 697806" />
<Node Id="21010:[10204..10225).6" Label="param CreateTestOptions(OutputKind outputKind) 697807" />
<Node Id="21010:[10227..10262).6" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697808" />
<Node Id="21010:[10264..10288).6" Label="param CreateTestOptions(bool allowUnsafe = false) 697809" />
<Node Id="21010:[10335..10345).6" Label="outputKind 697810" />
<Node Id="21010:[10347..10383).6" Label="optimizationLevel: optimizationLevel 697811" />
<Node Id="21010:[10385..10425).6" Label="warningLevel: Diagnostic.MaxWarningLevel 697812" />
<Node Id="21010:[10427..10451).6" Label="allowUnsafe: allowUnsafe 697813" />
<Node Id="21010:[10306..10452).241" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697814" />
<Node Id="21010:[10306..10452).287" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697815" />
<Node Id="21010:[4979..5069).1" Label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 697816" />
<Node Id="21010:[5164..5184).1" Label="OutputKind.NetModule 697817" />
<Node Id="21010:[5186..5211).1" Label="OptimizationLevel.Release 697818" />
<Node Id="21010:[5146..5212).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 697819" />
<Node Id="21010:[10204..10225).7" Label="param CreateTestOptions(OutputKind outputKind) 697820" />
<Node Id="21010:[10227..10262).7" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697821" />
<Node Id="21010:[10264..10288).7" Label="param CreateTestOptions(bool allowUnsafe = false) 697822" />
<Node Id="21010:[10335..10345).7" Label="outputKind 697823" />
<Node Id="21010:[10347..10383).7" Label="optimizationLevel: optimizationLevel 697824" />
<Node Id="21010:[10385..10425).7" Label="warningLevel: Diagnostic.MaxWarningLevel 697825" />
<Node Id="21010:[10427..10451).7" Label="allowUnsafe: allowUnsafe 697826" />
<Node Id="21010:[10306..10452).289" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697827" />
<Node Id="21010:[10306..10452).335" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697828" />
<Node Id="21010:[5130..5212).1" Label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 697829" />
<Node Id="21010:[5303..5323).1" Label="OutputKind.NetModule 697830" />
<Node Id="21010:[5325..5348).1" Label="OptimizationLevel.Debug 697831" />
<Node Id="21010:[5285..5349).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 697832" />
<Node Id="21010:[10204..10225).8" Label="param CreateTestOptions(OutputKind outputKind) 697833" />
<Node Id="21010:[10227..10262).8" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 697834" />
<Node Id="21010:[10264..10288).8" Label="param CreateTestOptions(bool allowUnsafe = false) 697835" />
<Node Id="21010:[10335..10345).8" Label="outputKind 697836" />
<Node Id="21010:[10347..10383).8" Label="optimizationLevel: optimizationLevel 697837" />
<Node Id="21010:[10385..10425).8" Label="warningLevel: Diagnostic.MaxWarningLevel 697838" />
<Node Id="21010:[10427..10451).8" Label="allowUnsafe: allowUnsafe 697839" />
<Node Id="21010:[10306..10452).337" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697840" />
<Node Id="21010:[10306..10452).383" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 697841" />
<Node Id="21010:[5271..5349).1" Label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 697842" />
<Node Id="21010:[5456..5460).1" Label="true 697843" />
<Node Id="21010:[5429..5461).1" Label="ReleaseDll.WithAllowUnsafe(true) 697844" />
<Node Id="21010:[5410..5461).1" Label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 697845" />
<Node Id="21010:[5566..5570).1" Label="true 697846" />
<Node Id="21010:[5539..5571).1" Label="ReleaseExe.WithAllowUnsafe(true) 697847" />
<Node Id="21010:[5520..5571).1" Label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 697848" />
<Node Id="21010:[5674..5678).1" Label="true 697849" />
<Node Id="21010:[5649..5679).1" Label="DebugDll.WithAllowUnsafe(true) 697850" />
<Node Id="21010:[5632..5679).1" Label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 697851" />
<Node Id="21010:[5780..5784).1" Label="true 697852" />
<Node Id="21010:[5755..5785).1" Label="DebugExe.WithAllowUnsafe(true) 697853" />
<Node Id="21010:[5738..5785).1" Label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 697854" />
<Node Id="21010:[5900..5951).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 697855" />
<Node Id="21010:[5866..5952).1" Label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697856" />
<Node Id="21010:[5846..5952).1" Label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697857" />
<Node Id="21010:[6065..6116).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 697858" />
<Node Id="21010:[6031..6117).1" Label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697859" />
<Node Id="21010:[6011..6117).1" Label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697860" />
<Node Id="21010:[6236..6287).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 697861" />
<Node Id="21010:[6199..6288).1" Label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697862" />
<Node Id="21010:[6176..6288).1" Label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697863" />
<Node Id="21010:[6397..6448).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 697864" />
<Node Id="21010:[6365..6449).1" Label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697865" />
<Node Id="21010:[6347..6449).1" Label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 697866" />
<Node Id="21010:[6560..6586).1" Label="DebugInformationFormat.Pdb 697867" />
<Node Id="21010:[6513..6587).1" Label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 697868" />
<Node Id="21010:[6497..6587).1" Label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 697869" />
<Node Id="21003:[34259..34289).1" Label="options = TestOptions.Regular; 697870" />
<Node Id="21003:[34320..34386).1" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 697871" />
<Node Id="21003:[34320..34386).2" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 697872" />
<Node Id="21003:[34320..34386).3" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 697873" />
<Node Id="21003:[34320..34386).5" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 697874" />
<Node Id="21003:[34320..34386).7" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 697875" />
<Node Id="21003:[34400..34487).1" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 697876" />
<Node Id="21003:[34400..34487).2" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 697877" />
<Node Id="21003:[34400..34487).3" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 697878" />
<Node Id="21003:[34400..34487).4" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 697879" />
<Node Id="21003:[34400..34487).6" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 697880" />
<Node Id="21003:[34407..34486).1" Label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 697881" />
<Node Id="21003:[34554..34569).1" Label="param CheckSerializable(SyntaxTree tree) 697882" />
<Node Id="21003:[34595..34627).1" Label="var stream = new MemoryStream(); 697883" />
<Node Id="21003:[34641..34667).1" Label="var root = tree.GetRoot(); 697884" />
<Node Id="21003:[34641..34667).3" Label="var root = tree.GetRoot(); 697885" />
<Node Id="21003:[34681..34706).1" Label="root.SerializeTo(stream); 697886" />
<Node Id="21003:[34681..34706).2" Label="root.SerializeTo(stream); 697887" />
<Node Id="21003:[34681..34706).4" Label="root.SerializeTo(stream); 697888" />
<Node Id="21003:[34720..34740).1" Label="stream.Position = 0; 697889" />
<Node Id="21003:[34720..34735).1" Label="stream.Position 697890" />
<Node Id="21003:[34754..34818).1" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 697891" />
<Node Id="21003:[34754..34818).2" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 697892" />
<Node Id="21003:[34754..34818).4" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 697893" />
<Node Id="21003:[34832..34844).1" Label="return tree; 697894" />
<Node Id="21004:[1129..1207).1" Label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 697895" />
<Node Id="21003:[46280..46350).3" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 697896" />
<Node Id="21003:[46366..46650).1" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 697897" />
<Node Id="21003:[46366..46650).2" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 697898" />
<Node Id="21003:[46419..46533).1" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 697899" />
<Node Id="21003:[46419..46533).2" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 697900" />
<Node Id="21003:[46419..46533).4" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 697901" />
<Node Id="21003:[46563..46584).1" Label="hasTopLevelStatements 697902" />
<Node Id="21003:[46553..46635).1" Label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 697903" />
<Node Id="21003:[46755..46872).1" Label="if (Debugger.IsAttached)
            {
                options = options.WithConcurrentBuild(false);
            } 697904" />
<Node Id="21003:[46888..47066).1" Label="if (experimentalFeature.HasValue)
            {
                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);
            } 697905" />
<Node Id="21003:[47082..47319).1" Label="Func$CSharpCompilation$ createCompilationLambda = () =$ CSharpCompilation.Create(
                assemblyName == '' ? GetUniqueName() : assemblyName,
                syntaxTrees,
                references,
                options); 697906" />
<Node Id="21003:[47333..47400).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 697907" />
<Node Id="21003:[47333..47399).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 697908" />
<Node Id="25006:[11552..11587).1" Label="param ValidateIOperations(Func$Compilation$ createCompilation) 697909" />
<Node Id="25006:[11613..11696).1" Label="if (!EnableVerifyIOperation)
            {
                return;
            } 697910" />
<Node Id="25006:[11674..11681).1" Label="return; 697911" />
<Node Id="21003:[47333..47400).2" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 697912" />
<Node Id="21003:[47414..47458).1" Label="var compilation = createCompilationLambda(); 697913" />
<Node Id="21003:[47414..47458).2" Label="var compilation = createCompilationLambda(); 697914" />
<Node Id="25004:[1041..1077).1" Label="return Guid.NewGuid().ToString('D'); 697915" />
<Node Id="21003:[47414..47458).4" Label="var compilation = createCompilationLambda(); 697916" />
<Node Id="21003:[47689..47930).1" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 697917" />
<Node Id="21003:[47717..47747).1" Label="IsNullableEnabled(compilation) 697918" />
<Node Id="21003:[48025..48054).1" Label="param IsNullableEnabled(CSharpCompilation compilation) 697919" />
<Node Id="21003:[48175..48211).1" Label="var trees = compilation.SyntaxTrees; 697920" />
<Node Id="21003:[48225..48313).1" Label="if (trees.IsDefaultOrEmpty)
            {
                return false;
            } 697921" />
<Node Id="21003:[48327..48378).1" Label="var options = (CSharpParseOptions)trees[0].Options; 697922" />
<Node Id="21003:[48327..48378).2" Label="var options = (CSharpParseOptions)trees[0].Options; 697923" />
<Node Id="21003:[48392..48469).1" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 697924" />
<Node Id="21003:[48392..48469).2" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 697925" />
<Node Id="21003:[47689..47930).3" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 697926" />
<Node Id="21003:[47944..47963).1" Label="return compilation; 697927" />
<Node Id="28001:[74563..75297).21" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ); 697928" />
<Node Id="28001:[74749..74798).1" Label="Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$') 697929" />
<Node Id="25004:[19277..19288).1" Label="param Diagnostic(object code) 697930" />
<Node Id="25004:[19303..19330).1" Label="param Diagnostic(string squiggledText = null) 697931" />
<Node Id="25004:[19345..19370).1" Label="param Diagnostic(object[] arguments = null) 697932" />
<Node Id="25004:[19385..19419).1" Label="param Diagnostic(LinePosition? startLocation = null) 697933" />
<Node Id="25004:[19434..19483).1" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 697934" />
<Node Id="25004:[19498..19537).1" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 697935" />
<Node Id="25004:[19552..19577).1" Label="param Diagnostic(bool isSuppressed = false) 697936" />
<Node Id="25004:[19603..19877).1" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 697937" />
<Node Id="25004:[19603..19877).2" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 697938" />
<Node Id="25004:[19603..19877).3" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 697939" />
<Node Id="25004:[19603..19877).4" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 697940" />
<Node Id="25004:[19603..19877).5" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 697941" />
<Node Id="25004:[19603..19877).6" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 697942" />
<Node Id="25004:[19603..19877).7" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 697943" />
<Node Id="25004:[19610..19876).1" Label="TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed) 697944" />
<Node Id="25007:[3334..3345).1" Label="param Diagnostic(object code) 697945" />
<Node Id="25007:[3360..3387).1" Label="param Diagnostic(string squiggledText = null) 697946" />
<Node Id="25007:[3402..3427).1" Label="param Diagnostic(object[] arguments = null) 697947" />
<Node Id="25007:[3442..3476).1" Label="param Diagnostic(LinePosition? startLocation = null) 697948" />
<Node Id="25007:[3491..3540).1" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 697949" />
<Node Id="25007:[3555..3594).1" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 697950" />
<Node Id="25007:[3609..3634).1" Label="param Diagnostic(bool isSuppressed = false) 697951" />
<Node Id="25007:[3660..3885).1" Label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||
                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||
                         code is int ||
                         code is string); 697952" />
<Node Id="25007:[3901..4266).1" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 697953" />
<Node Id="25007:[3901..4266).4" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 697954" />
<Node Id="25007:[3901..4266).6" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 697955" />
<Node Id="25007:[3901..4266).7" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 697956" />
<Node Id="25007:[3901..4266).8" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 697957" />
<Node Id="25007:[3901..4266).9" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 697958" />
<Node Id="25007:[3901..4266).10" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 697959" />
<Node Id="25003:[747..750).1" Label="{ } 697960" />
<Node Id="25003:[740..750).1" Label="None = { } 697961" />
<Node Id="25003:[814..818).1" Label="null 697962" />
<Node Id="25003:[808..818).1" Label="Any = null 697963" />
<Node Id="25007:[3901..4266).13" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 697964" />
<Node Id="25007:[3908..4265).1" Label="new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed) 697965" />
<Node Id="25003:[2816..2827).1" Label="param DiagnosticDescription(object code) 697966" />
<Node Id="25003:[2842..2863).1" Label="param DiagnosticDescription(bool isWarningAsError) 697967" />
<Node Id="25003:[2878..2898).1" Label="param DiagnosticDescription(string squiggledText) 697968" />
<Node Id="25003:[2913..2931).1" Label="param DiagnosticDescription(object[] arguments) 697969" />
<Node Id="25003:[2946..2973).1" Label="param DiagnosticDescription(LinePosition? startLocation) 697970" />
<Node Id="25003:[2988..3030).1" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 697971" />
<Node Id="25003:[3045..3076).1" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 697972" />
<Node Id="25003:[3091..3116).1" Label="param DiagnosticDescription(Type errorCodeType = null) 697973" />
<Node Id="25003:[3131..3176).1" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 697974" />
<Node Id="25003:[3191..3238).1" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 697975" />
<Node Id="25003:[3253..3278).1" Label="param DiagnosticDescription(bool isSuppressed = false) 697976" />
<Node Id="25003:[2773..3850).1" Label="param DiagnosticDescription(this) 697977" />
<Node Id="25003:[912..917).1" Label="_code 697978" />
<Node Id="25003:[950..967).1" Label="_isWarningAsError 697979" />
<Node Id="25003:[1000..1013).1" Label="_isSuppressed 697980" />
<Node Id="25003:[1048..1062).1" Label="_squiggledText 697981" />
<Node Id="25003:[1099..1109).1" Label="_arguments 697982" />
<Node Id="25003:[1151..1165).1" Label="_startPosition 697983" />
<Node Id="25003:[1276..1303).1" Label="_argumentOrderDoesNotMatter 697984" />
<Node Id="25003:[1336..1350).1" Label="_errorCodeType 697985" />
<Node Id="25003:[1383..1412).1" Label="_ignoreArgumentsWhenComparing 697986" />
<Node Id="25003:[1460..1479).1" Label="_defaultSeverityOpt 697987" />
<Node Id="25003:[1527..1548).1" Label="_effectiveSeverityOpt 697988" />
<Node Id="25003:[1673..1689).1" Label="_syntaxPredicate 697989" />
<Node Id="25003:[1713..1727).1" Label="_showPredicate 697990" />
<Node Id="25003:[1891..1900).1" Label="_location 697991" />
<Node Id="25003:[1941..1960).1" Label="_argumentsAsStrings 697992" />
<Node Id="25003:[3304..3309).1" Label="_code 697993" />
<Node Id="25003:[3331..3348).1" Label="_isWarningAsError 697994" />
<Node Id="25003:[3382..3396).1" Label="_squiggledText 697995" />
<Node Id="25003:[3427..3437).1" Label="_arguments 697996" />
<Node Id="25003:[3464..3478).1" Label="_startPosition 697997" />
<Node Id="25003:[3509..3525).1" Label="_syntaxPredicate 697998" />
<Node Id="25003:[3562..3589).1" Label="_argumentOrderDoesNotMatter 697999" />
<Node Id="25003:[3633..3682).1" Label="_errorCodeType = errorCodeType ?? code.GetType(); 698000" />
<Node Id="25003:[3633..3647).1" Label="_errorCodeType 698001" />
<Node Id="25003:[3696..3715).1" Label="_defaultSeverityOpt 698002" />
<Node Id="25003:[3751..3772).1" Label="_effectiveSeverityOpt 698003" />
<Node Id="25003:[3810..3823).1" Label="_isSuppressed 698004" />
<Node Id="25004:[19603..19877).8" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698005" />
<Node Id="28001:[74563..75297).34" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ); 698006" />
<Node Id="28001:[74749..74835).1" Label="Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1') 698007" />
<Node Id="28001:[74749..74835).4" Label="Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1') 698008" />
<Node Id="25003:[7407..7432).1" Label="param WithArguments(params object[] arguments) 698009" />
<Node Id="25003:[7364..7671).1" Label="param WithArguments(this) 698010" />
<Node Id="25003:[7458..7660).1" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698011" />
<Node Id="25003:[7458..7660).2" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698012" />
<Node Id="25003:[7458..7660).3" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698013" />
<Node Id="25003:[7458..7660).4" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698014" />
<Node Id="25003:[7458..7660).5" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698015" />
<Node Id="25003:[7458..7660).6" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698016" />
<Node Id="25003:[7458..7660).7" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698017" />
<Node Id="25003:[7458..7660).9" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698018" />
<Node Id="25003:[7458..7660).10" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698019" />
<Node Id="25003:[7458..7660).11" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698020" />
<Node Id="25003:[7458..7660).12" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698021" />
<Node Id="25003:[7465..7659).1" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 698022" />
<Node Id="25003:[2816..2827).2" Label="param DiagnosticDescription(object code) 698023" />
<Node Id="25003:[2842..2863).2" Label="param DiagnosticDescription(bool isWarningAsError) 698024" />
<Node Id="25003:[2878..2898).2" Label="param DiagnosticDescription(string squiggledText) 698025" />
<Node Id="25003:[2913..2931).2" Label="param DiagnosticDescription(object[] arguments) 698026" />
<Node Id="25003:[2946..2973).2" Label="param DiagnosticDescription(LinePosition? startLocation) 698027" />
<Node Id="25003:[2988..3030).2" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 698028" />
<Node Id="25003:[3045..3076).2" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 698029" />
<Node Id="25003:[3091..3116).2" Label="param DiagnosticDescription(Type errorCodeType = null) 698030" />
<Node Id="25003:[3131..3176).2" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 698031" />
<Node Id="25003:[3191..3238).2" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 698032" />
<Node Id="25003:[3253..3278).2" Label="param DiagnosticDescription(bool isSuppressed = false) 698033" />
<Node Id="25003:[2773..3850).2" Label="param DiagnosticDescription(this) 698034" />
<Node Id="25003:[912..917).2" Label="_code 698035" />
<Node Id="25003:[950..967).2" Label="_isWarningAsError 698036" />
<Node Id="25003:[1000..1013).2" Label="_isSuppressed 698037" />
<Node Id="25003:[1048..1062).2" Label="_squiggledText 698038" />
<Node Id="25003:[1099..1109).2" Label="_arguments 698039" />
<Node Id="25003:[1151..1165).4" Label="_startPosition 698040" />
<Node Id="25003:[1276..1303).2" Label="_argumentOrderDoesNotMatter 698041" />
<Node Id="25003:[1336..1350).2" Label="_errorCodeType 698042" />
<Node Id="25003:[1383..1412).2" Label="_ignoreArgumentsWhenComparing 698043" />
<Node Id="25003:[1460..1479).2" Label="_defaultSeverityOpt 698044" />
<Node Id="25003:[1527..1548).2" Label="_effectiveSeverityOpt 698045" />
<Node Id="25003:[1673..1689).2" Label="_syntaxPredicate 698046" />
<Node Id="25003:[1713..1727).2" Label="_showPredicate 698047" />
<Node Id="25003:[1891..1900).2" Label="_location 698048" />
<Node Id="25003:[1941..1960).2" Label="_argumentsAsStrings 698049" />
<Node Id="25003:[3427..3437).2" Label="_arguments 698050" />
<Node Id="25003:[3562..3589).2" Label="_argumentOrderDoesNotMatter 698051" />
<Node Id="28001:[74563..75297).42" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ); 698052" />
<Node Id="28001:[74978..75017).1" Label="Diagnostic(ErrorCode.ERR_BadArity, 'A') 698053" />
<Node Id="25004:[19277..19288).2" Label="param Diagnostic(object code) 698054" />
<Node Id="25004:[19303..19330).2" Label="param Diagnostic(string squiggledText = null) 698055" />
<Node Id="25004:[19345..19370).2" Label="param Diagnostic(object[] arguments = null) 698056" />
<Node Id="25004:[19385..19419).2" Label="param Diagnostic(LinePosition? startLocation = null) 698057" />
<Node Id="25004:[19434..19483).2" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 698058" />
<Node Id="25004:[19498..19537).2" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 698059" />
<Node Id="25004:[19552..19577).2" Label="param Diagnostic(bool isSuppressed = false) 698060" />
<Node Id="25004:[19603..19877).10" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698061" />
<Node Id="25004:[19603..19877).11" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698062" />
<Node Id="25004:[19603..19877).12" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698063" />
<Node Id="25004:[19603..19877).13" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698064" />
<Node Id="25004:[19603..19877).14" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698065" />
<Node Id="25004:[19603..19877).15" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698066" />
<Node Id="25004:[19603..19877).16" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698067" />
<Node Id="25004:[19610..19876).2" Label="TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed) 698068" />
<Node Id="25007:[3334..3345).2" Label="param Diagnostic(object code) 698069" />
<Node Id="25007:[3360..3387).2" Label="param Diagnostic(string squiggledText = null) 698070" />
<Node Id="25007:[3402..3427).2" Label="param Diagnostic(object[] arguments = null) 698071" />
<Node Id="25007:[3442..3476).2" Label="param Diagnostic(LinePosition? startLocation = null) 698072" />
<Node Id="25007:[3491..3540).2" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 698073" />
<Node Id="25007:[3555..3594).2" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 698074" />
<Node Id="25007:[3609..3634).2" Label="param Diagnostic(bool isSuppressed = false) 698075" />
<Node Id="25007:[3660..3885).6" Label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||
                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||
                         code is int ||
                         code is string); 698076" />
<Node Id="25007:[3901..4266).20" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698077" />
<Node Id="25007:[3901..4266).23" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698078" />
<Node Id="25007:[3901..4266).25" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698079" />
<Node Id="25007:[3901..4266).26" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698080" />
<Node Id="25007:[3901..4266).27" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698081" />
<Node Id="25007:[3901..4266).28" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698082" />
<Node Id="25007:[3901..4266).29" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698083" />
<Node Id="25007:[3901..4266).32" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698084" />
<Node Id="25007:[3908..4265).2" Label="new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed) 698085" />
<Node Id="25003:[2816..2827).3" Label="param DiagnosticDescription(object code) 698086" />
<Node Id="25003:[2842..2863).3" Label="param DiagnosticDescription(bool isWarningAsError) 698087" />
<Node Id="25003:[2878..2898).3" Label="param DiagnosticDescription(string squiggledText) 698088" />
<Node Id="25003:[2913..2931).3" Label="param DiagnosticDescription(object[] arguments) 698089" />
<Node Id="25003:[2946..2973).3" Label="param DiagnosticDescription(LinePosition? startLocation) 698090" />
<Node Id="25003:[2988..3030).3" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 698091" />
<Node Id="25003:[3045..3076).3" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 698092" />
<Node Id="25003:[3091..3116).3" Label="param DiagnosticDescription(Type errorCodeType = null) 698093" />
<Node Id="25003:[3131..3176).3" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 698094" />
<Node Id="25003:[3191..3238).3" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 698095" />
<Node Id="25003:[3253..3278).3" Label="param DiagnosticDescription(bool isSuppressed = false) 698096" />
<Node Id="25003:[2773..3850).3" Label="param DiagnosticDescription(this) 698097" />
<Node Id="25003:[912..917).3" Label="_code 698098" />
<Node Id="25003:[950..967).3" Label="_isWarningAsError 698099" />
<Node Id="25003:[1000..1013).3" Label="_isSuppressed 698100" />
<Node Id="25003:[1048..1062).3" Label="_squiggledText 698101" />
<Node Id="25003:[1099..1109).3" Label="_arguments 698102" />
<Node Id="25003:[1151..1165).7" Label="_startPosition 698103" />
<Node Id="25003:[1276..1303).3" Label="_argumentOrderDoesNotMatter 698104" />
<Node Id="25003:[1336..1350).3" Label="_errorCodeType 698105" />
<Node Id="25003:[1383..1412).3" Label="_ignoreArgumentsWhenComparing 698106" />
<Node Id="25003:[1460..1479).3" Label="_defaultSeverityOpt 698107" />
<Node Id="25003:[1527..1548).3" Label="_effectiveSeverityOpt 698108" />
<Node Id="25003:[1673..1689).3" Label="_syntaxPredicate 698109" />
<Node Id="25003:[1713..1727).3" Label="_showPredicate 698110" />
<Node Id="25003:[1891..1900).3" Label="_location 698111" />
<Node Id="25003:[1941..1960).3" Label="_argumentsAsStrings 698112" />
<Node Id="25003:[3304..3309).3" Label="_code 698113" />
<Node Id="25003:[3331..3348).3" Label="_isWarningAsError 698114" />
<Node Id="25003:[3382..3396).3" Label="_squiggledText 698115" />
<Node Id="25003:[3427..3437).3" Label="_arguments 698116" />
<Node Id="25003:[3464..3478).3" Label="_startPosition 698117" />
<Node Id="25003:[3509..3525).3" Label="_syntaxPredicate 698118" />
<Node Id="25003:[3562..3589).3" Label="_argumentOrderDoesNotMatter 698119" />
<Node Id="25003:[3633..3682).3" Label="_errorCodeType = errorCodeType ?? code.GetType(); 698120" />
<Node Id="25003:[3633..3647).3" Label="_errorCodeType 698121" />
<Node Id="25003:[3696..3715).3" Label="_defaultSeverityOpt 698122" />
<Node Id="25003:[3751..3772).3" Label="_effectiveSeverityOpt 698123" />
<Node Id="25003:[3810..3823).3" Label="_isSuppressed 698124" />
<Node Id="25004:[19603..19877).17" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698125" />
<Node Id="28001:[74563..75297).56" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ); 698126" />
<Node Id="28001:[74978..75054).1" Label="Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1') 698127" />
<Node Id="28001:[74978..75054).4" Label="Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1') 698128" />
<Node Id="25003:[7407..7432).2" Label="param WithArguments(params object[] arguments) 698129" />
<Node Id="25003:[7364..7671).2" Label="param WithArguments(this) 698130" />
<Node Id="25003:[7458..7660).15" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698131" />
<Node Id="25003:[7458..7660).16" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698132" />
<Node Id="25003:[7458..7660).17" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698133" />
<Node Id="25003:[7458..7660).18" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698134" />
<Node Id="25003:[7458..7660).19" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698135" />
<Node Id="25003:[7458..7660).20" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698136" />
<Node Id="25003:[7458..7660).21" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698137" />
<Node Id="25003:[7458..7660).23" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698138" />
<Node Id="25003:[7458..7660).24" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698139" />
<Node Id="25003:[7458..7660).25" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698140" />
<Node Id="25003:[7458..7660).26" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698141" />
<Node Id="25003:[7465..7659).2" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 698142" />
<Node Id="25003:[2816..2827).4" Label="param DiagnosticDescription(object code) 698143" />
<Node Id="25003:[2842..2863).4" Label="param DiagnosticDescription(bool isWarningAsError) 698144" />
<Node Id="25003:[2878..2898).4" Label="param DiagnosticDescription(string squiggledText) 698145" />
<Node Id="25003:[2913..2931).4" Label="param DiagnosticDescription(object[] arguments) 698146" />
<Node Id="25003:[2946..2973).4" Label="param DiagnosticDescription(LinePosition? startLocation) 698147" />
<Node Id="25003:[2988..3030).4" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 698148" />
<Node Id="25003:[3045..3076).4" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 698149" />
<Node Id="25003:[3091..3116).4" Label="param DiagnosticDescription(Type errorCodeType = null) 698150" />
<Node Id="25003:[3131..3176).4" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 698151" />
<Node Id="25003:[3191..3238).4" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 698152" />
<Node Id="25003:[3253..3278).4" Label="param DiagnosticDescription(bool isSuppressed = false) 698153" />
<Node Id="25003:[2773..3850).4" Label="param DiagnosticDescription(this) 698154" />
<Node Id="25003:[912..917).4" Label="_code 698155" />
<Node Id="25003:[950..967).4" Label="_isWarningAsError 698156" />
<Node Id="25003:[1000..1013).4" Label="_isSuppressed 698157" />
<Node Id="25003:[1048..1062).4" Label="_squiggledText 698158" />
<Node Id="25003:[1099..1109).4" Label="_arguments 698159" />
<Node Id="25003:[1151..1165).10" Label="_startPosition 698160" />
<Node Id="25003:[1276..1303).4" Label="_argumentOrderDoesNotMatter 698161" />
<Node Id="25003:[1336..1350).4" Label="_errorCodeType 698162" />
<Node Id="25003:[1383..1412).4" Label="_ignoreArgumentsWhenComparing 698163" />
<Node Id="25003:[1460..1479).4" Label="_defaultSeverityOpt 698164" />
<Node Id="25003:[1527..1548).4" Label="_effectiveSeverityOpt 698165" />
<Node Id="25003:[1673..1689).4" Label="_syntaxPredicate 698166" />
<Node Id="25003:[1713..1727).4" Label="_showPredicate 698167" />
<Node Id="25003:[1891..1900).4" Label="_location 698168" />
<Node Id="25003:[1941..1960).4" Label="_argumentsAsStrings 698169" />
<Node Id="25003:[3427..3437).4" Label="_arguments 698170" />
<Node Id="25003:[3562..3589).4" Label="_argumentOrderDoesNotMatter 698171" />
<Node Id="28001:[74563..75297).64" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ); 698172" />
<Node Id="28001:[75199..75248).1" Label="Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$') 698173" />
<Node Id="25004:[19277..19288).3" Label="param Diagnostic(object code) 698174" />
<Node Id="25004:[19303..19330).3" Label="param Diagnostic(string squiggledText = null) 698175" />
<Node Id="25004:[19345..19370).3" Label="param Diagnostic(object[] arguments = null) 698176" />
<Node Id="25004:[19385..19419).3" Label="param Diagnostic(LinePosition? startLocation = null) 698177" />
<Node Id="25004:[19434..19483).3" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 698178" />
<Node Id="25004:[19498..19537).3" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 698179" />
<Node Id="25004:[19552..19577).3" Label="param Diagnostic(bool isSuppressed = false) 698180" />
<Node Id="25004:[19603..19877).19" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698181" />
<Node Id="25004:[19603..19877).20" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698182" />
<Node Id="25004:[19603..19877).21" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698183" />
<Node Id="25004:[19603..19877).22" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698184" />
<Node Id="25004:[19603..19877).23" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698185" />
<Node Id="25004:[19603..19877).24" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698186" />
<Node Id="25004:[19603..19877).25" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698187" />
<Node Id="25004:[19610..19876).3" Label="TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed) 698188" />
<Node Id="25007:[3334..3345).3" Label="param Diagnostic(object code) 698189" />
<Node Id="25007:[3360..3387).3" Label="param Diagnostic(string squiggledText = null) 698190" />
<Node Id="25007:[3402..3427).3" Label="param Diagnostic(object[] arguments = null) 698191" />
<Node Id="25007:[3442..3476).3" Label="param Diagnostic(LinePosition? startLocation = null) 698192" />
<Node Id="25007:[3491..3540).3" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 698193" />
<Node Id="25007:[3555..3594).3" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 698194" />
<Node Id="25007:[3609..3634).3" Label="param Diagnostic(bool isSuppressed = false) 698195" />
<Node Id="25007:[3660..3885).11" Label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||
                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||
                         code is int ||
                         code is string); 698196" />
<Node Id="25007:[3901..4266).39" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698197" />
<Node Id="25007:[3901..4266).42" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698198" />
<Node Id="25007:[3901..4266).44" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698199" />
<Node Id="25007:[3901..4266).45" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698200" />
<Node Id="25007:[3901..4266).46" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698201" />
<Node Id="25007:[3901..4266).47" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698202" />
<Node Id="25007:[3901..4266).48" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698203" />
<Node Id="25007:[3901..4266).51" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 698204" />
<Node Id="25007:[3908..4265).3" Label="new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed) 698205" />
<Node Id="25003:[2816..2827).5" Label="param DiagnosticDescription(object code) 698206" />
<Node Id="25003:[2842..2863).5" Label="param DiagnosticDescription(bool isWarningAsError) 698207" />
<Node Id="25003:[2878..2898).5" Label="param DiagnosticDescription(string squiggledText) 698208" />
<Node Id="25003:[2913..2931).5" Label="param DiagnosticDescription(object[] arguments) 698209" />
<Node Id="25003:[2946..2973).5" Label="param DiagnosticDescription(LinePosition? startLocation) 698210" />
<Node Id="25003:[2988..3030).5" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 698211" />
<Node Id="25003:[3045..3076).5" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 698212" />
<Node Id="25003:[3091..3116).5" Label="param DiagnosticDescription(Type errorCodeType = null) 698213" />
<Node Id="25003:[3131..3176).5" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 698214" />
<Node Id="25003:[3191..3238).5" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 698215" />
<Node Id="25003:[3253..3278).5" Label="param DiagnosticDescription(bool isSuppressed = false) 698216" />
<Node Id="25003:[2773..3850).5" Label="param DiagnosticDescription(this) 698217" />
<Node Id="25003:[912..917).5" Label="_code 698218" />
<Node Id="25003:[950..967).5" Label="_isWarningAsError 698219" />
<Node Id="25003:[1000..1013).5" Label="_isSuppressed 698220" />
<Node Id="25003:[1048..1062).5" Label="_squiggledText 698221" />
<Node Id="25003:[1099..1109).5" Label="_arguments 698222" />
<Node Id="25003:[1151..1165).13" Label="_startPosition 698223" />
<Node Id="25003:[1276..1303).5" Label="_argumentOrderDoesNotMatter 698224" />
<Node Id="25003:[1336..1350).5" Label="_errorCodeType 698225" />
<Node Id="25003:[1383..1412).5" Label="_ignoreArgumentsWhenComparing 698226" />
<Node Id="25003:[1460..1479).5" Label="_defaultSeverityOpt 698227" />
<Node Id="25003:[1527..1548).5" Label="_effectiveSeverityOpt 698228" />
<Node Id="25003:[1673..1689).5" Label="_syntaxPredicate 698229" />
<Node Id="25003:[1713..1727).5" Label="_showPredicate 698230" />
<Node Id="25003:[1891..1900).5" Label="_location 698231" />
<Node Id="25003:[1941..1960).5" Label="_argumentsAsStrings 698232" />
<Node Id="25003:[3304..3309).5" Label="_code 698233" />
<Node Id="25003:[3331..3348).5" Label="_isWarningAsError 698234" />
<Node Id="25003:[3382..3396).5" Label="_squiggledText 698235" />
<Node Id="25003:[3427..3437).5" Label="_arguments 698236" />
<Node Id="25003:[3464..3478).5" Label="_startPosition 698237" />
<Node Id="25003:[3509..3525).5" Label="_syntaxPredicate 698238" />
<Node Id="25003:[3562..3589).5" Label="_argumentOrderDoesNotMatter 698239" />
<Node Id="25003:[3633..3682).5" Label="_errorCodeType = errorCodeType ?? code.GetType(); 698240" />
<Node Id="25003:[3633..3647).5" Label="_errorCodeType 698241" />
<Node Id="25003:[3696..3715).5" Label="_defaultSeverityOpt 698242" />
<Node Id="25003:[3751..3772).5" Label="_effectiveSeverityOpt 698243" />
<Node Id="25003:[3810..3823).5" Label="_isSuppressed 698244" />
<Node Id="25004:[19603..19877).26" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 698245" />
<Node Id="28001:[74563..75297).78" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ); 698246" />
<Node Id="28001:[75199..75277).1" Label="Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type') 698247" />
<Node Id="28001:[75199..75277).3" Label="Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type') 698248" />
<Node Id="25003:[7407..7432).3" Label="param WithArguments(params object[] arguments) 698249" />
<Node Id="25003:[7364..7671).3" Label="param WithArguments(this) 698250" />
<Node Id="25003:[7458..7660).29" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698251" />
<Node Id="25003:[7458..7660).30" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698252" />
<Node Id="25003:[7458..7660).31" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698253" />
<Node Id="25003:[7458..7660).32" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698254" />
<Node Id="25003:[7458..7660).33" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698255" />
<Node Id="25003:[7458..7660).34" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698256" />
<Node Id="25003:[7458..7660).35" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698257" />
<Node Id="25003:[7458..7660).37" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698258" />
<Node Id="25003:[7458..7660).38" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698259" />
<Node Id="25003:[7458..7660).39" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698260" />
<Node Id="25003:[7458..7660).40" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 698261" />
<Node Id="25003:[7465..7659).3" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 698262" />
<Node Id="25003:[2816..2827).6" Label="param DiagnosticDescription(object code) 698263" />
<Node Id="25003:[2842..2863).6" Label="param DiagnosticDescription(bool isWarningAsError) 698264" />
<Node Id="25003:[2878..2898).6" Label="param DiagnosticDescription(string squiggledText) 698265" />
<Node Id="25003:[2913..2931).6" Label="param DiagnosticDescription(object[] arguments) 698266" />
<Node Id="25003:[2946..2973).6" Label="param DiagnosticDescription(LinePosition? startLocation) 698267" />
<Node Id="25003:[2988..3030).6" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 698268" />
<Node Id="25003:[3045..3076).6" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 698269" />
<Node Id="25003:[3091..3116).6" Label="param DiagnosticDescription(Type errorCodeType = null) 698270" />
<Node Id="25003:[3131..3176).6" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 698271" />
<Node Id="25003:[3191..3238).6" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 698272" />
<Node Id="25003:[3253..3278).6" Label="param DiagnosticDescription(bool isSuppressed = false) 698273" />
<Node Id="25003:[2773..3850).6" Label="param DiagnosticDescription(this) 698274" />
<Node Id="25003:[912..917).6" Label="_code 698275" />
<Node Id="25003:[950..967).6" Label="_isWarningAsError 698276" />
<Node Id="25003:[1000..1013).6" Label="_isSuppressed 698277" />
<Node Id="25003:[1048..1062).6" Label="_squiggledText 698278" />
<Node Id="25003:[1099..1109).6" Label="_arguments 698279" />
<Node Id="25003:[1151..1165).16" Label="_startPosition 698280" />
<Node Id="25003:[1276..1303).6" Label="_argumentOrderDoesNotMatter 698281" />
<Node Id="25003:[1336..1350).6" Label="_errorCodeType 698282" />
<Node Id="25003:[1383..1412).6" Label="_ignoreArgumentsWhenComparing 698283" />
<Node Id="25003:[1460..1479).6" Label="_defaultSeverityOpt 698284" />
<Node Id="25003:[1527..1548).6" Label="_effectiveSeverityOpt 698285" />
<Node Id="25003:[1673..1689).6" Label="_syntaxPredicate 698286" />
<Node Id="25003:[1713..1727).6" Label="_showPredicate 698287" />
<Node Id="25003:[1891..1900).6" Label="_location 698288" />
<Node Id="25003:[1941..1960).6" Label="_argumentsAsStrings 698289" />
<Node Id="25003:[3427..3437).6" Label="_arguments 698290" />
<Node Id="25003:[3562..3589).6" Label="_argumentOrderDoesNotMatter 698291" />
<Node Id="28001:[74563..75297).85" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ); 698292" />
<Node Id="28001:[74563..75296).1" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ) 698293" />
<Node Id="28001:[74563..75296).2" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ) 698294" />
<Node Id="28001:[74563..75296).3" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ) 698295" />
<Node Id="28001:[74563..75296).4" Label="CreateCompilation(source).VerifyDiagnostics(
                // (19,28): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A$int, int$').WithArguments('N.A$T$', 'type', '1'),
                // (20,27): error CS0305: Using the generic type 'N.A$T$' requires '1' type arguments
                // 
                Diagnostic(ErrorCode.ERR_BadArity, 'A').WithArguments('N.A$T$', 'type', '1'),
                // (21,34): error CS0308: The non-generic type 'N.B' cannot be used with type arguments
                // 
                Diagnostic(ErrorCode.ERR_HasNoTypeVars, 'B$int$').WithArguments('N.B', 'type')
                ) 698296" />
<Node Id="25002:[4263..4282).1" Label="param VerifyDiagnostics(this TCompilation c) 698297" />
<Node Id="25002:[4284..4323).1" Label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 698298" />
<Node Id="25002:[4395..4432).1" Label="var diagnostics = c.GetDiagnostics(); 698299" />
<Node Id="10345:[956..960).1" Label="null 698300" />
<Node Id="10345:[975..1032).1" Label="ImmutableDictionary$string, AliasAndUsingDirective$.Empty 698301" />
<Node Id="10345:[1047..1101).1" Label="ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty 698302" />
<Node Id="10345:[1116..1166).1" Label="ImmutableArray$AliasAndExternAliasDirective$.Empty 698303" />
<Node Id="10345:[1181..1185).1" Label="null 698304" />
<Node Id="10345:[930..1186).1" Label="new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 698305" />
<Node Id="10345:[1753..1782).1" Label="param Imports(CSharpCompilation compilation) 698306" />
<Node Id="10345:[1797..1861).1" Label="param Imports(ImmutableDictionary$string, AliasAndUsingDirective$ usingAliases) 698307" />
<Node Id="10345:[1876..1931).1" Label="param Imports(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 698308" />
<Node Id="10345:[1946..1998).1" Label="param Imports(ImmutableArray$AliasAndExternAliasDirective$ externs) 698309" />
<Node Id="10345:[2013..2038).1" Label="param Imports(DiagnosticBag diagnostics) 698310" />
<Node Id="10345:[1723..2412).1" Label="param Imports(this) 698311" />
<Node Id="10345:[1234..1246).1" Label="_compilation 698312" />
<Node Id="10345:[1288..1300).1" Label="_diagnostics 698313" />
<Node Id="10345:[1531..1543).1" Label="UsingAliases 698314" />
<Node Id="10345:[2064..2099).1" Label="Debug.Assert(usingAliases != null); 698315" />
<Node Id="10345:[2064..2099).2" Label="Debug.Assert(usingAliases != null); 698316" />
<Node Id="10345:[2113..2145).1" Label="Debug.Assert(!usings.IsDefault); 698317" />
<Node Id="10345:[2159..2192).1" Label="Debug.Assert(!externs.IsDefault); 698318" />
<Node Id="10345:[2208..2220).1" Label="_compilation 698319" />
<Node Id="10345:[2249..2266).1" Label="this.UsingAliases 698320" />
<Node Id="10345:[2296..2307).1" Label="this.Usings 698321" />
<Node Id="10345:[2331..2343).1" Label="_diagnostics 698322" />
<Node Id="10345:[2372..2390).1" Label="this.ExternAliases 698323" />
<Node Id="10345:[922..1186).1" Label="Empty = new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 698324" />
<Node Id="25002:[4395..4432).3" Label="var diagnostics = c.GetDiagnostics(); 698325" />
<Node Id="10345:[13089..13118).1" Label="param FromGlobalUsings(CSharpCompilation compilation) 698326" />
<Node Id="10345:[13144..13184).1" Label="var usings = compilation.Options.Usings; 698327" />
<Node Id="10345:[13200..13326).1" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 698328" />
<Node Id="10345:[13200..13326).2" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 698329" />
<Node Id="10345:[13200..13326).4" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 698330" />
<Node Id="10345:[13298..13311).1" Label="return Empty; 698331" />
<Node Id="25002:[4395..4432).6" Label="var diagnostics = c.GetDiagnostics(); 698332" />
<Node Id="10345:[24530..24565).1" Label="param Complete(CancellationToken cancellationToken) 698333" />
<Node Id="10345:[24507..26254).1" Label="param Complete(this) 698334" />
<Node Id="10345:[24591..26243).1" Label="while (true)
            {
                cancellationToken.ThrowIfCancellationRequested();
                var incompletePart = _state.NextIncompletePart;
                switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                }

                _state.SpinWaitComplete(incompletePart, cancellationToken);
            } 698335" />
<Node Id="10345:[24636..24685).1" Label="cancellationToken.ThrowIfCancellationRequested(); 698336" />
<Node Id="10345:[24703..24750).1" Label="var incompletePart = _state.NextIncompletePart; 698337" />
<Node Id="10345:[24768..26149).1" Label="switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                } 698338" />
<Node Id="10345:[26025..26098).1" Label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 698339" />
<Node Id="10345:[26169..26228).1" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 698340" />
<Node Id="10345:[26169..26228).2" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 698341" />
<Node Id="10345:[26169..26228).3" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 698342" />
<Node Id="10345:[24932..25204).1" Label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            } 698343" />
<Node Id="10345:[25064..25074).1" Label="Validate() 698344" />
<Node Id="10345:[26266..28173).1" Label="param Validate(this) 698345" />
<Node Id="10345:[26314..26387).1" Label="if (this == Empty)
            {
                return;
            } 698346" />
<Node Id="10345:[26365..26372).1" Label="return; 698347" />
<Node Id="10345:[25064..25075).1" Label="Validate(); 698348" />
<Node Id="10345:[25109..25173).1" Label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 698349" />
<Node Id="10345:[25858..25865).1" Label="return; 698350" />
<Node Id="10298:[471..492).1" Label="param Includes(this BinderFlags self) 698351" />
<Node Id="10298:[494..511).1" Label="param Includes(BinderFlags other) 698352" />
<Node Id="10298:[537..568).1" Label="return (self & other) == other; 698353" />
<Node Id="25002:[4395..4432).10" Label="var diagnostics = c.GetDiagnostics(); 698354" />
<Node Id="10292:[1720..1721).1" Label="0 698355" />
<Node Id="10292:[1704..1721).1" Label="ExternalScope = 0 698356" />
<Node Id="10292:[1768..1769).1" Label="1 698357" />
<Node Id="10292:[1752..1769).1" Label="TopLevelScope = 1 698358" />
<Node Id="10292:[1992..1993).1" Label="2 698359" />
<Node Id="10292:[1963..1993).1" Label="ValueKindInsignificantBits = 2 698360" />
<Node Id="10292:[2032..2129).1" Label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 $$ ValueKindInsignificantBits) - 1)) 698361" />
<Node Id="10306:[388969..389344).1" Label="property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 698362" />
<Node Id="10306:[388923..389344).1" Label="s_isIndexedPropertyWithNonOptionalArguments = property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 698363" />
<Node Id="10306:[389480..389543).1" Label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 698364" />
<Node Id="10306:[389562..389646).1" Label="memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType 698365" />
<Node Id="10306:[389708..389839).1" Label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 698366" />
<Node Id="10306:[389665..389839).1" Label="miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 698367" />
<Node Id="10306:[389438..389840).1" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 698368" />
<Node Id="10306:[389438..389840).17" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 698369" />
<Node Id="10306:[389401..389840).1" Label="s_propertyGroupFormat =
            new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 698370" />
<Node Id="10310:[84494..84496).1" Label="10 698371" />
<Node Id="10310:[84458..84496).1" Label="MaxParameterListsForErrorRecovery = 10 698372" />
<Node Id="10316:[802..830).1" Label="'$$h__TransparentIdentifier' 698373" />
<Node Id="10316:[772..830).1" Label="transparentIdentifierPrefix = '$$h__TransparentIdentifier' 698374" />
<Node Id="10319:[69643..69663).1" Label="s =$ (MethodSymbol)s 698375" />
<Node Id="10319:[69620..69663).1" Label="s_toMethodSymbolFunc = s =$ (MethodSymbol)s 698376" />
<Node Id="10319:[69752..69774).1" Label="s =$ (PropertySymbol)s 698377" />
<Node Id="10319:[69727..69774).1" Label="s_toPropertySymbolFunc = s =$ (PropertySymbol)s 698378" />
<Node Id="10286:[30925..30954).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 698379" />
<Node Id="10286:[30969..31000).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 698380" />
<Node Id="10286:[31015..31040).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 698381" />
<Node Id="10286:[31055..31080).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 698382" />
<Node Id="10286:[31095..31126).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 698383" />
<Node Id="10286:[31152..31210).1" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 698384" />
<Node Id="10286:[31152..31210).2" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 698385" />
<Node Id="10286:[31152..31210).4" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 698386" />
<Node Id="10286:[31152..31210).5" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 698387" />
<Node Id="10286:[31515..31598).1" Label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 698388" />
<Node Id="10286:[31614..31710).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 698389" />
<Node Id="10286:[31614..31710).2" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 698390" />
<Node Id="10286:[31614..31710).3" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 698391" />
<Node Id="10286:[31614..31710).4" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 698392" />
<Node Id="10286:[31614..31710).5" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 698393" />
<Node Id="10286:[31614..31710).6" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 698394" />
<Node Id="10286:[31614..31709).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 698395" />
<Node Id="10319:[80080..80109).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 698396" />
<Node Id="10319:[80111..80133).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 698397" />
<Node Id="10319:[80135..80160).1" Label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 698398" />
<Node Id="10319:[80162..80186).1" Label="param GetWellKnownTypeMember(Location location = null) 698399" />
<Node Id="10319:[80188..80212).1" Label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 698400" />
<Node Id="10319:[80214..80237).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 698401" />
<Node Id="10319:[80263..80315).1" Label="Debug.Assert((syntax != null) ^ (location != null)); 698402" />
<Node Id="10319:[80263..80315).2" Label="Debug.Assert((syntax != null) ^ (location != null)); 698403" />
<Node Id="10319:[80263..80315).4" Label="Debug.Assert((syntax != null) ^ (location != null)); 698404" />
<Node Id="10319:[80263..80315).5" Label="Debug.Assert((syntax != null) ^ (location != null)); 698405" />
<Node Id="10319:[80331..80364).1" Label="DiagnosticInfo useSiteDiagnostic; 698406" />
<Node Id="10319:[80378..80479).1" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 698407" />
<Node Id="10319:[80378..80479).2" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 698408" />
<Node Id="10319:[80378..80479).3" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 698409" />
<Node Id="10319:[80378..80479).4" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 698410" />
<Node Id="10319:[80400..80478).1" Label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 698411" />
<Node Id="10319:[80843..80872).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 698412" />
<Node Id="10319:[80874..80896).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 698413" />
<Node Id="10319:[80898..80931).1" Label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 698414" />
<Node Id="10319:[80933..80956).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 698415" />
<Node Id="10319:[80982..81047).1" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 698416" />
<Node Id="10319:[80982..81047).2" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 698417" />
<Node Id="10319:[80982..81047).3" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 698418" />
<Node Id="10060:[2841..2854).1" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 698419" />
<Node Id="10060:[2856..2875).1" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 698420" />
<Node Id="10060:[2901..2932).1" Label="Debug.Assert(symbol is object); 698421" />
<Node Id="10060:[2948..3467).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 698422" />
<Node Id="10060:[3483..3502).1" Label="isInternal = false; 698423" />
<Node Id="10060:[3553..4223).1" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 698424" />
<Node Id="10060:[4243..4274).1" Label="symbol = symbol.ContainingType; 698425" />
<Node Id="10060:[3518..4328).1" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 698426" />
<Node Id="10060:[4344..4356).1" Label="return true; 698427" />
<Node Id="10319:[80982..81047).8" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 698428" />
<Node Id="10060:[2841..2854).2" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 698429" />
<Node Id="10060:[2856..2875).2" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 698430" />
<Node Id="10060:[2901..2932).3" Label="Debug.Assert(symbol is object); 698431" />
<Node Id="10060:[2948..3467).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 698432" />
<Node Id="10060:[3553..4223).2" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 698433" />
<Node Id="10060:[4243..4274).2" Label="symbol = symbol.ContainingType; 698434" />
<Node Id="10060:[3518..4328).2" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 698435" />
<Node Id="10060:[3553..4223).3" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 698436" />
<Node Id="10319:[80982..81047).15" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 698437" />
<Node Id="10319:[81063..82500).1" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 698438" />
<Node Id="10319:[81063..82500).2" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 698439" />
<Node Id="10319:[81129..81207).1" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 698440" />
<Node Id="10319:[81129..81207).2" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 698441" />
<Node Id="10060:[2841..2854).4" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 698442" />
<Node Id="10060:[2856..2875).4" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 698443" />
<Node Id="10060:[2901..2932).7" Label="Debug.Assert(symbol is object); 698444" />
<Node Id="10060:[2948..3467).4" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 698445" />
<Node Id="10060:[3483..3502).7" Label="isInternal = false; 698446" />
<Node Id="10060:[3553..4223).6" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 698447" />
<Node Id="10060:[4243..4274).6" Label="symbol = symbol.ContainingType; 698448" />
<Node Id="10060:[3518..4328).6" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 698449" />
<Node Id="10060:[2841..2854).5" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 698450" />
<Node Id="10060:[2856..2875).5" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 698451" />
<Node Id="10060:[2901..2932).9" Label="Debug.Assert(symbol is object); 698452" />
<Node Id="10060:[2948..3467).5" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 698453" />
<Node Id="10060:[3553..4223).7" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 698454" />
<Node Id="10060:[4243..4274).7" Label="symbol = symbol.ContainingType; 698455" />
<Node Id="10060:[3518..4328).7" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 698456" />
<Node Id="10319:[81225..82039).1" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 698457" />
<Node Id="10319:[81225..82039).2" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 698458" />
<Node Id="10319:[82516..82536).1" Label="return memberSymbol; 698459" />
<Node Id="10319:[80495..80738).1" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 698460" />
<Node Id="10319:[80495..80738).2" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 698461" />
<Node Id="10319:[80754..80774).1" Label="return memberSymbol; 698462" />
<Node Id="10060:[2841..2854).9" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 698463" />
<Node Id="10060:[2856..2875).9" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 698464" />
<Node Id="10060:[2901..2932).17" Label="Debug.Assert(symbol is object); 698465" />
<Node Id="10060:[2948..3467).9" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 698466" />
<Node Id="10060:[3553..4223).11" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 698467" />
<Node Id="10060:[4243..4274).11" Label="symbol = symbol.ContainingType; 698468" />
<Node Id="10060:[3518..4328).11" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 698469" />
<Node Id="10060:[2841..2854).10" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 698470" />
<Node Id="10060:[2856..2875).10" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 698471" />
<Node Id="10060:[2901..2932).19" Label="Debug.Assert(symbol is object); 698472" />
<Node Id="10060:[2948..3467).10" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 698473" />
<Node Id="10060:[3553..4223).12" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 698474" />
<Node Id="10060:[4243..4274).12" Label="symbol = symbol.ContainingType; 698475" />
<Node Id="10060:[3518..4328).12" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 698476" />
<Node Id="10319:[81225..82039).4" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 698477" />
<Node Id="10319:[81225..82039).5" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 698478" />
<Node Id="10319:[82516..82536).2" Label="return memberSymbol; 698479" />
<Node Id="10319:[80495..80738).5" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 698480" />
<Node Id="10319:[80754..80774).2" Label="return memberSymbol; 698481" />
<Node Id="10319:[81225..82039).7" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 698482" />
<Node Id="10319:[82516..82536).3" Label="return memberSymbol; 698483" />
<Node Id="10319:[80754..80774).3" Label="return memberSymbol; 698484" />
<Node Id="10076:[4437..4452).1" Label="param GetBinder(SyntaxNode node) 698485" />
<Node Id="10076:[4454..4498).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 698486" />
<Node Id="10076:[4500..4523).1" Label="param GetBinder(Symbol memberOpt = null) 698487" />
<Node Id="10076:[4411..5059).1" Label="param GetBinder(this) 698488" />
<Node Id="10076:[4549..4579).1" Label="int position = node.SpanStart; 698489" />
<Node Id="10076:[4821..4829).1" Label="InScript 698490" />
<Node Id="10076:[3592..3700).1" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 698491" />
<Node Id="10076:[3628..3685).1" Label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 698492" />
<Node Id="10076:[4815..4966).1" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 698493" />
<Node Id="10076:[4815..4966).3" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 698494" />
<Node Id="10076:[4815..4966).4" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 698495" />
<Node Id="10076:[4815..4966).5" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 698496" />
<Node Id="10076:[4932..4951).1" Label="node = node.Parent; 698497" />
<Node Id="10076:[4982..5048).1" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 698498" />
<Node Id="10076:[4982..5048).2" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 698499" />
<Node Id="10076:[4982..5048).3" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 698500" />
<Node Id="10076:[4982..5048).4" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 698501" />
<Node Id="10076:[4989..5047).1" Label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 698502" />
<Node Id="10076:[5097..5112).1" Label="param GetBinder(SyntaxNode node) 698503" />
<Node Id="10076:[5114..5126).1" Label="param GetBinder(int position) 698504" />
<Node Id="10076:[5128..5172).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 698505" />
<Node Id="10076:[5174..5197).1" Label="param GetBinder(Symbol memberOpt = null) 698506" />
<Node Id="10076:[5071..5759).1" Label="param GetBinder(this) 698507" />
<Node Id="10076:[5223..5250).1" Label="Debug.Assert(node != null); 698508" />
<Node Id="10076:[5223..5250).2" Label="Debug.Assert(node != null); 698509" />
<Node Id="10076:[5277..5448).1" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 698510" />
<Node Id="10076:[5277..5448).2" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 698511" />
<Node Id="10076:[5470..5538).1" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 698512" />
<Node Id="10076:[5470..5538).3" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 698513" />
<Node Id="10077:[909..930).1" Label="param BinderFactoryVisitor(BinderFactory factory) 698514" />
<Node Id="10077:[879..998).1" Label="param BinderFactoryVisitor(this) 698515" />
<Node Id="10077:[879..998).2" Label="param BinderFactoryVisitor(this) 698516" />
<Node Id="10077:[698..707).1" Label="_position 698517" />
<Node Id="10077:[747..768).1" Label="_memberDeclarationOpt 698518" />
<Node Id="10077:[798..808).1" Label="_memberOpt 698519" />
<Node Id="10077:[854..862).1" Label="_factory 698520" />
<Node Id="10077:[964..972).1" Label="_factory 698521" />
<Node Id="10076:[5470..5538).4" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 698522" />
<Node Id="10076:[5552..5614).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 698523" />
<Node Id="10076:[5552..5614).2" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 698524" />
<Node Id="10076:[5552..5614).3" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 698525" />
<Node Id="10076:[5552..5613).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 698526" />
<Node Id="10077:[1039..1051).1" Label="param Initialize(int position) 698527" />
<Node Id="10077:[1053..1090).1" Label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 698528" />
<Node Id="10077:[1092..1108).1" Label="param Initialize(Symbol memberOpt) 698529" />
<Node Id="10077:[1014..1370).1" Label="param Initialize(this) 698530" />
<Node Id="10077:[1142..1210).1" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698531" />
<Node Id="10077:[1142..1210).2" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698532" />
<Node Id="10077:[1142..1210).4" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698533" />
<Node Id="10077:[1142..1210).5" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698534" />
<Node Id="10077:[1230..1239).1" Label="_position 698535" />
<Node Id="10077:[1269..1290).1" Label="_memberDeclarationOpt 698536" />
<Node Id="10077:[1332..1342).1" Label="_memberOpt 698537" />
<Node Id="10076:[5552..5614).4" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 698538" />
<Node Id="10076:[5628..5664).1" Label="Binder result = visitor.Visit(node); 698539" />
<Node Id="10076:[5644..5663).1" Label="visitor.Visit(node) 698540" />
<Node Id="10077:[2693..2708).1" Label="param Visit(SyntaxNode node) 698541" />
<Node Id="10077:[2664..2780).1" Label="param Visit(this) 698542" />
<Node Id="10077:[2742..2765).1" Label="return VisitCore(node); 698543" />
<Node Id="10077:[2749..2764).1" Label="VisitCore(node) 698544" />
<Node Id="10077:[2877..2892).1" Label="param VisitCore(SyntaxNode node) 698545" />
<Node Id="10077:[2852..2986).1" Label="param VisitCore(this) 698546" />
<Node Id="10077:[2926..2971).1" Label="return ((CSharpSyntaxNode)node).Accept(this); 698547" />
<Node Id="10077:[2926..2971).2" Label="return ((CSharpSyntaxNode)node).Accept(this); 698548" />
<Node Id="10077:[2926..2971).3" Label="return ((CSharpSyntaxNode)node).Accept(this); 698549" />
<Node Id="10077:[2398..2415).1" Label="param DefaultVisit(SyntaxNode parent) 698550" />
<Node Id="10077:[2362..2496).1" Label="param DefaultVisit(this) 698551" />
<Node Id="10077:[2449..2481).1" Label="return VisitCore(parent.Parent); 698552" />
<Node Id="10077:[2456..2480).1" Label="VisitCore(parent.Parent) 698553" />
<Node Id="10077:[2877..2892).2" Label="param VisitCore(SyntaxNode node) 698554" />
<Node Id="10077:[2852..2986).2" Label="param VisitCore(this) 698555" />
<Node Id="10077:[2926..2971).5" Label="return ((CSharpSyntaxNode)node).Accept(this); 698556" />
<Node Id="10077:[34617..34644).1" Label="param VisitClassDeclaration(ClassDeclarationSyntax node) 698557" />
<Node Id="10077:[34572..34731).1" Label="param VisitClassDeclaration(this) 698558" />
<Node Id="10077:[34678..34716).1" Label="return VisitTypeDeclarationCore(node); 698559" />
<Node Id="10077:[34685..34715).1" Label="VisitTypeDeclarationCore(node) 698560" />
<Node Id="10077:[31025..31053).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 698561" />
<Node Id="10077:[30985..32417).1" Label="param VisitTypeDeclarationCore(this) 698562" />
<Node Id="10077:[31087..31238).1" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 698563" />
<Node Id="10077:[31087..31238).2" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 698564" />
<Node Id="10077:[31087..31238).3" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 698565" />
<Node Id="10077:[31258..31297).1" Label="NodeUsage extraInfo = NodeUsage.Normal; 698566" />
<Node Id="10077:[31490..32331).1" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 698567" />
<Node Id="10077:[31490..32331).2" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 698568" />
<Node Id="10077:[31490..32331).6" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 698569" />
<Node Id="10077:[31490..32331).7" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 698570" />
<Node Id="10077:[31936..32331).1" Label="if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 698571" />
<Node Id="10077:[31936..32331).2" Label="if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 698572" />
<Node Id="10077:[32037..32089).1" Label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 698573" />
<Node Id="10077:[32351..32402).1" Label="return VisitTypeDeclarationCore(parent, extraInfo); 698574" />
<Node Id="10077:[32351..32402).2" Label="return VisitTypeDeclarationCore(parent, extraInfo); 698575" />
<Node Id="10077:[32358..32401).1" Label="VisitTypeDeclarationCore(parent, extraInfo) 698576" />
<Node Id="10077:[32474..32502).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 698577" />
<Node Id="10077:[32504..32523).1" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 698578" />
<Node Id="10077:[32433..34556).1" Label="param VisitTypeDeclarationCore(this) 698579" />
<Node Id="10077:[32557..32607).1" Label="var key = CreateBinderCacheKey(parent, extraInfo); 698580" />
<Node Id="10077:[32557..32607).2" Label="var key = CreateBinderCacheKey(parent, extraInfo); 698581" />
<Node Id="10077:[32567..32606).1" Label="CreateBinderCacheKey(parent, extraInfo) 698582" />
<Node Id="10077:[44159..44180).1" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 698583" />
<Node Id="10077:[44182..44197).1" Label="param CreateBinderCacheKey(NodeUsage usage) 698584" />
<Node Id="10077:[44231..44317).1" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 698585" />
<Node Id="10077:[44231..44317).3" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 698586" />
<Node Id="10077:[44335..44374).1" Label="return new BinderCacheKey(node, usage); 698587" />
<Node Id="10077:[44335..44374).2" Label="return new BinderCacheKey(node, usage); 698588" />
<Node Id="10077:[44335..44374).3" Label="return new BinderCacheKey(node, usage); 698589" />
<Node Id="10077:[44342..44373).1" Label="new BinderCacheKey(node, usage) 698590" />
<Node Id="10076:[875..902).1" Label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 698591" />
<Node Id="10076:[904..919).1" Label="param BinderCacheKey(NodeUsage usage) 698592" />
<Node Id="10076:[853..1034).1" Label="param BinderCacheKey(this) 698593" />
<Node Id="10076:[953..968).1" Label="this.syntaxNode 698594" />
<Node Id="10076:[1000..1010).1" Label="this.usage 698595" />
<Node Id="10077:[32557..32607).3" Label="var key = CreateBinderCacheKey(parent, extraInfo); 698596" />
<Node Id="10077:[32627..32647).1" Label="Binder resultBinder; 698597" />
<Node Id="10077:[32670..32681).1" Label="binderCache 698598" />
<Node Id="10077:[2066..2158).1" Label="get
                {
                    return _factory._binderCache;
                } 698599" />
<Node Id="10077:[2110..2139).1" Label="return _factory._binderCache; 698600" />
<Node Id="10077:[32665..34501).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 698601" />
<Node Id="10077:[32665..34501).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 698602" />
<Node Id="10077:[32665..34501).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 698603" />
<Node Id="10077:[32665..34501).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 698604" />
<Node Id="10077:[32665..34501).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 698605" />
<Node Id="10076:[1241..1380).1" Label="param GetHashCode(this) 698606" />
<Node Id="10076:[1307..1365).1" Label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 698607" />
<Node Id="10077:[33226..33266).1" Label="resultBinder = VisitCore(parent.Parent); 698608" />
<Node Id="10077:[33241..33265).1" Label="VisitCore(parent.Parent) 698609" />
<Node Id="10077:[2877..2892).3" Label="param VisitCore(SyntaxNode node) 698610" />
<Node Id="10077:[35299..35332).1" Label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 698611" />
<Node Id="10077:[35250..35934).1" Label="param VisitNamespaceDeclaration(this) 698612" />
<Node Id="10077:[35366..35522).1" Label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 698613" />
<Node Id="10077:[35366..35522).2" Label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 698614" />
<Node Id="10077:[35366..35522).3" Label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 698615" />
<Node Id="10077:[35674..35777).1" Label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 698616" />
<Node Id="10077:[35674..35777).2" Label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 698617" />
<Node Id="10077:[35797..35830).1" Label="bool inUsing = IsInUsing(parent); 698618" />
<Node Id="10077:[35812..35829).1" Label="IsInUsing(parent) 698619" />
<Node Id="10077:[44823..44854).1" Label="param IsInUsing(CSharpSyntaxNode containingNode) 698620" />
<Node Id="10077:[44800..46356).1" Label="param IsInUsing(this) 698621" />
<Node Id="10077:[44888..44934).1" Label="TextSpan containingSpan = containingNode.Span; 698622" />
<Node Id="10077:[44954..44972).1" Label="SyntaxToken token; 698623" />
<Node Id="10077:[44966..44971).1" Label="token 698624" />
<Node Id="10077:[44990..45616).1" Label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)
                {
                    // This occurs at EOF
                    token = containingNode.GetLastToken();
                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());
                }
                else if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 698625" />
<Node Id="10077:[44990..45616).3" Label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)
                {
                    // This occurs at EOF
                    token = containingNode.GetLastToken();
                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());
                }
                else if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 698626" />
<Node Id="10077:[45331..45616).1" Label="if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 698627" />
<Node Id="10077:[45553..45597).1" Label="token = containingNode.FindToken(_position); 698628" />
<Node Id="10077:[45553..45597).2" Label="token = containingNode.FindToken(_position); 698629" />
<Node Id="10077:[45636..45660).1" Label="var node = token.Parent; 698630" />
<Node Id="10077:[45678..46310).1" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 698631" />
<Node Id="10077:[45678..46310).2" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 698632" />
<Node Id="10077:[45678..46310).3" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 698633" />
<Node Id="10077:[46088..46248).1" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 698634" />
<Node Id="10077:[46088..46248).2" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 698635" />
<Node Id="10077:[46272..46291).1" Label="node = node.Parent; 698636" />
<Node Id="10077:[46328..46341).1" Label="return false; 698637" />
<Node Id="10077:[35797..35830).2" Label="bool inUsing = IsInUsing(parent); 698638" />
<Node Id="10077:[35850..35919).1" Label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 698639" />
<Node Id="10077:[35850..35919).2" Label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 698640" />
<Node Id="10077:[35850..35919).3" Label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 698641" />
<Node Id="10077:[35850..35919).4" Label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 698642" />
<Node Id="10077:[35857..35918).1" Label="VisitNamespaceDeclaration(parent, _position, inBody, inUsing) 698643" />
<Node Id="10077:[35992..36025).1" Label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 698644" />
<Node Id="10077:[36027..36039).1" Label="param VisitNamespaceDeclaration(int position) 698645" />
<Node Id="10077:[36041..36052).1" Label="param VisitNamespaceDeclaration(bool inBody) 698646" />
<Node Id="10077:[36054..36066).1" Label="param VisitNamespaceDeclaration(bool inUsing) 698647" />
<Node Id="10077:[35950..37866).1" Label="param VisitNamespaceDeclaration(this) 698648" />
<Node Id="10077:[36100..36154).1" Label="Debug.Assert(!inUsing || inBody, 'inUsing =$ inBody'); 698649" />
<Node Id="10077:[36100..36154).3" Label="Debug.Assert(!inUsing || inBody, 'inUsing =$ inBody'); 698650" />
<Node Id="10077:[36190..36197).1" Label="inUsing 698651" />
<Node Id="10077:[36229..36235).1" Label="inBody 698652" />
<Node Id="10077:[36174..36282).1" Label="var extraInfo = inUsing ? NodeUsage.NamespaceUsings : (inBody ? NodeUsage.NamespaceBody : NodeUsage.Normal); 698653" />
<Node Id="10077:[36330..36380).1" Label="var key = CreateBinderCacheKey(parent, extraInfo); 698654" />
<Node Id="10077:[36330..36380).2" Label="var key = CreateBinderCacheKey(parent, extraInfo); 698655" />
<Node Id="10077:[36340..36379).1" Label="CreateBinderCacheKey(parent, extraInfo) 698656" />
<Node Id="10077:[44159..44180).2" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 698657" />
<Node Id="10077:[44182..44197).2" Label="param CreateBinderCacheKey(NodeUsage usage) 698658" />
<Node Id="10077:[44231..44317).9" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 698659" />
<Node Id="10077:[44231..44317).11" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 698660" />
<Node Id="10077:[36330..36380).3" Label="var key = CreateBinderCacheKey(parent, extraInfo); 698661" />
<Node Id="10077:[36400..36414).1" Label="Binder result; 698662" />
<Node Id="10077:[36437..36448).1" Label="binderCache 698663" />
<Node Id="10077:[2066..2158).2" Label="get
                {
                    return _factory._binderCache;
                } 698664" />
<Node Id="10077:[2110..2139).2" Label="return _factory._binderCache; 698665" />
<Node Id="10077:[36432..37817).1" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    Binder outer;
                    var container = parent.Parent;

                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)
                    {
                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.
                        // A namespace in script code is not bound within the scope of a Script class, 
                        // but still within scope of compilation unit extern aliases and usings.
                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);
                    }
                    else
                    {
                        outer = _factory.GetBinder(parent.Parent, position);
                    }

                    if (!inBody)
                    {
                        // not between the curlies
                        result = outer;
                    }
                    else
                    {
                        // if between the curlies, members are in scope
                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);
                    }

                    binderCache.TryAdd(key, result);
                } 698666" />
<Node Id="10077:[36432..37817).2" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    Binder outer;
                    var container = parent.Parent;

                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)
                    {
                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.
                        // A namespace in script code is not bound within the scope of a Script class, 
                        // but still within scope of compilation unit extern aliases and usings.
                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);
                    }
                    else
                    {
                        outer = _factory.GetBinder(parent.Parent, position);
                    }

                    if (!inBody)
                    {
                        // not between the curlies
                        result = outer;
                    }
                    else
                    {
                        // if between the curlies, members are in scope
                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);
                    }

                    binderCache.TryAdd(key, result);
                } 698667" />
<Node Id="10077:[36432..37817).3" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    Binder outer;
                    var container = parent.Parent;

                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)
                    {
                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.
                        // A namespace in script code is not bound within the scope of a Script class, 
                        // but still within scope of compilation unit extern aliases and usings.
                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);
                    }
                    else
                    {
                        outer = _factory.GetBinder(parent.Parent, position);
                    }

                    if (!inBody)
                    {
                        // not between the curlies
                        result = outer;
                    }
                    else
                    {
                        // if between the curlies, members are in scope
                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);
                    }

                    binderCache.TryAdd(key, result);
                } 698668" />
<Node Id="10077:[36432..37817).4" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    Binder outer;
                    var container = parent.Parent;

                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)
                    {
                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.
                        // A namespace in script code is not bound within the scope of a Script class, 
                        // but still within scope of compilation unit extern aliases and usings.
                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);
                    }
                    else
                    {
                        outer = _factory.GetBinder(parent.Parent, position);
                    }

                    if (!inBody)
                    {
                        // not between the curlies
                        result = outer;
                    }
                    else
                    {
                        // if between the curlies, members are in scope
                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);
                    }

                    binderCache.TryAdd(key, result);
                } 698669" />
<Node Id="10077:[36432..37817).5" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    Binder outer;
                    var container = parent.Parent;

                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)
                    {
                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.
                        // A namespace in script code is not bound within the scope of a Script class, 
                        // but still within scope of compilation unit extern aliases and usings.
                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);
                    }
                    else
                    {
                        outer = _factory.GetBinder(parent.Parent, position);
                    }

                    if (!inBody)
                    {
                        // not between the curlies
                        result = outer;
                    }
                    else
                    {
                        // if between the curlies, members are in scope
                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);
                    }

                    binderCache.TryAdd(key, result);
                } 698670" />
<Node Id="10077:[36519..36532).1" Label="Binder outer; 698671" />
<Node Id="10077:[36554..36584).1" Label="var container = parent.Parent; 698672" />
<Node Id="10077:[36612..36620).1" Label="InScript 698673" />
<Node Id="10077:[2243..2331).1" Label="get
                {
                    return _factory.InScript;
                } 698674" />
<Node Id="10077:[2294..2311).1" Label="_factory.InScript 698675" />
<Node Id="10076:[3592..3700).2" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 698676" />
<Node Id="10077:[2287..2312).1" Label="return _factory.InScript; 698677" />
<Node Id="10077:[36608..37330).1" Label="if (InScript && container.Kind() == SyntaxKind.CompilationUnit)
                    {
                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.
                        // A namespace in script code is not bound within the scope of a Script class, 
                        // but still within scope of compilation unit extern aliases and usings.
                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);
                    }
                    else
                    {
                        outer = _factory.GetBinder(parent.Parent, position);
                    } 698678" />
<Node Id="10077:[37255..37307).1" Label="outer = _factory.GetBinder(parent.Parent, position); 698679" />
<Node Id="10077:[37255..37307).2" Label="outer = _factory.GetBinder(parent.Parent, position); 698680" />
<Node Id="10077:[37255..37307).3" Label="outer = _factory.GetBinder(parent.Parent, position); 698681" />
<Node Id="10077:[37263..37306).1" Label="_factory.GetBinder(parent.Parent, position) 698682" />
<Node Id="10076:[5097..5112).2" Label="param GetBinder(SyntaxNode node) 698683" />
<Node Id="10076:[5114..5126).2" Label="param GetBinder(int position) 698684" />
<Node Id="10076:[5128..5172).2" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 698685" />
<Node Id="10076:[5174..5197).2" Label="param GetBinder(Symbol memberOpt = null) 698686" />
<Node Id="10076:[5223..5250).5" Label="Debug.Assert(node != null); 698687" />
<Node Id="10076:[5223..5250).6" Label="Debug.Assert(node != null); 698688" />
<Node Id="10076:[5277..5448).5" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 698689" />
<Node Id="10077:[1142..1210).8" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698690" />
<Node Id="10077:[1142..1210).9" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698691" />
<Node Id="10077:[1142..1210).11" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 698692" />
<Node Id="10077:[39020..39048).1" Label="param VisitCompilationUnit(CompilationUnitSyntax parent) 698693" />
<Node Id="10077:[38976..39245).1" Label="param VisitCompilationUnit(this) 698694" />
<Node Id="10077:[39082..39230).1" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 698695" />
<Node Id="10077:[39170..39187).1" Label="IsInUsing(parent) 698696" />
<Node Id="10077:[44823..44854).2" Label="param IsInUsing(CSharpSyntaxNode containingNode) 698697" />
<Node Id="10077:[44800..46356).2" Label="param IsInUsing(this) 698698" />
<Node Id="10077:[44954..44972).2" Label="SyntaxToken token; 698699" />
<Node Id="10077:[44966..44971).34" Label="token 698700" />
<Node Id="10077:[45331..45616).5" Label="if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 698701" />
<Node Id="10077:[39082..39230).3" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 698702" />
<Node Id="10077:[39220..39228).1" Label="InScript 698703" />
<Node Id="10077:[2243..2331).2" Label="get
                {
                    return _factory.InScript;
                } 698704" />
<Node Id="10076:[3592..3700).3" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 698705" />
<Node Id="10077:[39089..39229).1" Label="VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript) 698706" />
<Node Id="10077:[39298..39335).1" Label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 698707" />
<Node Id="10077:[39337..39349).1" Label="param VisitCompilationUnit(bool inUsing) 698708" />
<Node Id="10077:[39351..39364).1" Label="param VisitCompilationUnit(bool inScript) 698709" />
<Node Id="10077:[39261..44091).1" Label="param VisitCompilationUnit(this) 698710" />
<Node Id="10077:[39421..39431).1" Label="syntaxTree 698711" />
<Node Id="10077:[1641..1732).1" Label="get
                {
                    return _factory._syntaxTree;
                } 698712" />
<Node Id="10077:[1685..1713).1" Label="return _factory._syntaxTree; 698713" />
<Node Id="10077:[39398..39590).1" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 698714" />
<Node Id="10077:[39398..39590).2" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 698715" />
<Node Id="10077:[39398..39590).5" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 698716" />
<Node Id="10077:[39626..39633).1" Label="inUsing 698717" />
<Node Id="10077:[39766..39774).1" Label="inScript 698718" />
<Node Id="10077:[39610..39829).1" Label="var extraInfo = inUsing
                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)
                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 698719" />
<Node Id="10077:[39877..39936).1" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 698720" />
<Node Id="10077:[39877..39936).2" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 698721" />
<Node Id="10077:[39887..39935).1" Label="CreateBinderCacheKey(compilationUnit, extraInfo) 698722" />
<Node Id="10077:[44159..44180).3" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 698723" />
<Node Id="10077:[44182..44197).3" Label="param CreateBinderCacheKey(NodeUsage usage) 698724" />
<Node Id="10077:[44231..44317).17" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 698725" />
<Node Id="10077:[44231..44317).19" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 698726" />
<Node Id="10077:[39877..39936).3" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 698727" />
<Node Id="10077:[39956..39970).1" Label="Binder result; 698728" />
<Node Id="10077:[39993..40004).1" Label="binderCache 698729" />
<Node Id="10077:[2066..2158).3" Label="get
                {
                    return _factory._binderCache;
                } 698730" />
<Node Id="10077:[2110..2139).3" Label="return _factory._binderCache; 698731" />
<Node Id="10077:[39988..44042).1" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 698732" />
<Node Id="10077:[39988..44042).2" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 698733" />
<Node Id="10077:[39988..44042).3" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 698734" />
<Node Id="10077:[39988..44042).4" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 698735" />
<Node Id="10077:[39988..44042).5" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 698736" />
<Node Id="10077:[40084..40108).1" Label="this.buckStopsHereBinder 698737" />
<Node Id="10077:[1843..1943).1" Label="get
                {
                    return _factory._buckStopsHereBinder;
                } 698738" />
<Node Id="10077:[1887..1924).1" Label="return _factory._buckStopsHereBinder; 698739" />
<Node Id="10077:[40075..40109).1" Label="result = this.buckStopsHereBinder; 698740" />
<Node Id="10077:[40133..43967).1" Label="if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    } 698741" />
<Node Id="10077:[43302..43313).1" Label="compilation 698742" />
<Node Id="10077:[1456..1548).1" Label="get
                {
                    return _factory._compilation;
                } 698743" />
<Node Id="10077:[1500..1529).1" Label="return _factory._compilation; 698744" />
<Node Id="10077:[43271..43374).1" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 698745" />
<Node Id="10077:[43271..43374).3" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 698746" />
<Node Id="10077:[43271..43374).4" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 698747" />
<Node Id="10077:[43271..43374).5" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 698748" />
<Node Id="10077:[43271..43374).6" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 698749" />
<Node Id="10077:[43280..43373).1" Label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 698750" />
<Node Id="10346:[1426..1457).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 698751" />
<Node Id="10346:[1459..1470).1" Label="param InContainerBinder(Binder next) 698752" />
<Node Id="10346:[1472..1506).1" Label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 698753" />
<Node Id="10346:[1508..1520).1" Label="param InContainerBinder(bool inUsing) 698754" />
<Node Id="10346:[1399..2435).1" Label="param InContainerBinder(this) 698755" />
<Node Id="10346:[1542..1546).1" Label="next 698756" />
<Node Id="10346:[1399..2435).2" Label="param InContainerBinder(this) 698757" />
<Node Id="10286:[1247..1258).1" Label="param Binder(Binder next) 698758" />
<Node Id="10286:[1231..1520).1" Label="param Binder(this) 698759" />
<Node Id="10286:[1260..1291).1" Label="param Binder(Conversions? conversions = null) 698760" />
<Node Id="10286:[726..773).1" Label="internal CSharpCompilation Compilation { get; } 698761" />
<Node Id="10286:[815..820).1" Label="Flags 698762" />
<Node Id="10286:[2975..3015).1" Label="protected internal Binder? Next { get; } 698763" />
<Node Id="10286:[17802..17818).1" Label="_lazyConversions 698764" />
<Node Id="10286:[18200..18223).1" Label="_lazyOverloadResolution 698765" />
<Node Id="10286:[1317..1350).1" Label="RoslynDebug.Assert(next != null); 698766" />
<Node Id="10286:[1317..1350).2" Label="RoslynDebug.Assert(next != null); 698767" />
<Node Id="10286:[1364..1368).1" Label="Next 698768" />
<Node Id="10286:[1390..1400).1" Label="this.Flags 698769" />
<Node Id="10286:[1428..1444).1" Label="this.Compilation 698770" />
<Node Id="10286:[1478..1494).1" Label="_lazyConversions 698771" />
<Node Id="10346:[858..868).1" Label="_container 698772" />
<Node Id="10346:[932..947).1" Label="_computeImports 698773" />
<Node Id="10346:[974..986).1" Label="_lazyImports 698774" />
<Node Id="10346:[1017..1033).1" Label="_lazyImportChain 698775" />
<Node Id="10346:[1074..1100).1" Label="_lazyQuickAttributeChecker 698776" />
<Node Id="10346:[1572..1612).1" Label="Debug.Assert((object)container != null); 698777" />
<Node Id="10346:[1572..1612).2" Label="Debug.Assert((object)container != null); 698778" />
<Node Id="10346:[1626..1666).1" Label="Debug.Assert(declarationSyntax != null); 698779" />
<Node Id="10346:[1626..1666).2" Label="Debug.Assert(declarationSyntax != null); 698780" />
<Node Id="10346:[1682..1692).1" Label="_container 698781" />
<Node Id="10346:[1719..1832).1" Label="_computeImports = basesBeingResolved =$ Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 698782" />
<Node Id="10346:[1719..1734).1" Label="_computeImports 698783" />
<Node Id="10346:[1848..2424).1" Label="if (!inUsing)
            {
                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                }
            } 698784" />
<Node Id="10346:[1894..2409).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                } 698785" />
<Node Id="10346:[1994..2057).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 698786" />
<Node Id="10346:[2079..2092).1" Label="_usingsSyntax 698787" />
<Node Id="10077:[43503..43514).1" Label="compilation 698788" />
<Node Id="10077:[1456..1548).2" Label="get
                {
                    return _factory._compilation;
                } 698789" />
<Node Id="10077:[1500..1529).2" Label="return _factory._compilation; 698790" />
<Node Id="10077:[43402..43944).1" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 698791" />
<Node Id="10077:[43402..43944).3" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 698792" />
<Node Id="10077:[43402..43944).4" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 698793" />
<Node Id="10077:[43991..44002).1" Label="binderCache 698794" />
<Node Id="10077:[2110..2139).4" Label="return _factory._binderCache; 698795" />
<Node Id="10077:[43991..44023).1" Label="binderCache.TryAdd(key, result); 698796" />
<Node Id="10077:[43991..44023).2" Label="binderCache.TryAdd(key, result); 698797" />
<Node Id="10077:[43991..44023).3" Label="binderCache.TryAdd(key, result); 698798" />
<Node Id="10077:[43991..44023).4" Label="binderCache.TryAdd(key, result); 698799" />
<Node Id="10077:[43991..44023).5" Label="binderCache.TryAdd(key, result); 698800" />
<Node Id="10077:[44062..44076).1" Label="return result; 698801" />
<Node Id="10077:[2926..2971).14" Label="return ((CSharpSyntaxNode)node).Accept(this); 698802" />
<Node Id="10076:[5678..5718).1" Label="_binderFactoryVisitorPool.Free(visitor); 698803" />
<Node Id="10076:[5678..5718).2" Label="_binderFactoryVisitorPool.Free(visitor); 698804" />
<Node Id="10076:[5734..5748).1" Label="return result; 698805" />
<Node Id="10077:[37354..37742).1" Label="if (!inBody)
                    {
                        // not between the curlies
                        result = outer;
                    }
                    else
                    {
                        // if between the curlies, members are in scope
                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);
                    } 698806" />
<Node Id="10077:[37653..37719).1" Label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 698807" />
<Node Id="10077:[37653..37719).2" Label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 698808" />
<Node Id="10077:[37653..37719).3" Label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 698809" />
<Node Id="10077:[37653..37719).4" Label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 698810" />
<Node Id="10077:[37662..37718).1" Label="MakeNamespaceBinder(parent, parent.Name, outer, inUsing) 698811" />
<Node Id="10077:[37917..37938).1" Label="param MakeNamespaceBinder(CSharpSyntaxNode node) 698812" />
<Node Id="10077:[37940..37955).1" Label="param MakeNamespaceBinder(NameSyntax name) 698813" />
<Node Id="10077:[37957..37969).1" Label="param MakeNamespaceBinder(Binder outer) 698814" />
<Node Id="10077:[37971..37983).1" Label="param MakeNamespaceBinder(bool inUsing) 698815" />
<Node Id="10077:[37882..38960).1" Label="param MakeNamespaceBinder(this) 698816" />
<Node Id="10077:[38017..38044).1" Label="QualifiedNameSyntax dotted; 698817" />
<Node Id="10077:[38062..38295).1" Label="while ((dotted = name as QualifiedNameSyntax) != null)
                {
                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);
                    name = dotted.Right;
                } 698818" />
<Node Id="10077:[38062..38295).2" Label="while ((dotted = name as QualifiedNameSyntax) != null)
                {
                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);
                    name = dotted.Right;
                } 698819" />
<Node Id="10077:[38062..38295).3" Label="while ((dotted = name as QualifiedNameSyntax) != null)
                {
                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);
                    name = dotted.Right;
                } 698820" />
<Node Id="10077:[38315..38347).1" Label="NamespaceOrTypeSymbol container; 698821" />
<Node Id="10077:[38367..38713).1" Label="if (outer is InContainerBinder inContainerBinder)
                {
                    container = inContainerBinder.Container;
                }
                else
                {
                    Debug.Assert(outer is SimpleProgramUnitBinder);
                    container = outer.Compilation.GlobalNamespace;
                } 698822" />
<Node Id="10077:[38469..38496).1" Label="inContainerBinder.Container 698823" />
<Node Id="10346:[3331..3400).1" Label="get
            {
                return _container;
            } 698824" />
<Node Id="10346:[3367..3385).1" Label="return _container; 698825" />
<Node Id="10077:[38457..38497).1" Label="container = inContainerBinder.Container; 698826" />
<Node Id="10077:[38733..38808).1" Label="NamespaceSymbol ns = ((NamespaceSymbol)container).GetNestedNamespace(name); 698827" />
<Node Id="10077:[38733..38808).2" Label="NamespaceSymbol ns = ((NamespaceSymbol)container).GetNestedNamespace(name); 698828" />
<Node Id="10077:[38826..38863).1" Label="if ((object)ns == null) return outer; 698829" />
<Node Id="10077:[38826..38863).2" Label="if ((object)ns == null) return outer; 698830" />
<Node Id="10077:[38881..38945).1" Label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 698831" />
<Node Id="10077:[38881..38945).2" Label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 698832" />
<Node Id="10077:[38881..38945).3" Label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 698833" />
<Node Id="10077:[38881..38945).4" Label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 698834" />
<Node Id="10077:[38881..38945).5" Label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 698835" />
<Node Id="10077:[38888..38944).1" Label="new InContainerBinder(ns, outer, node, inUsing: inUsing) 698836" />
<Node Id="10346:[1426..1457).2" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 698837" />
<Node Id="10346:[1459..1470).2" Label="param InContainerBinder(Binder next) 698838" />
<Node Id="10346:[1472..1506).2" Label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 698839" />
<Node Id="10346:[1508..1520).2" Label="param InContainerBinder(bool inUsing) 698840" />
<Node Id="10346:[1399..2435).3" Label="param InContainerBinder(this) 698841" />
<Node Id="10346:[1399..2435).4" Label="param InContainerBinder(this) 698842" />
<Node Id="10286:[1231..1520).2" Label="param Binder(this) 698843" />
<Node Id="10286:[1260..1291).2" Label="param Binder(Conversions? conversions = null) 698844" />
<Node Id="10286:[726..773).2" Label="internal CSharpCompilation Compilation { get; } 698845" />
<Node Id="10286:[815..820).2" Label="Flags 698846" />
<Node Id="10286:[2975..3015).2" Label="protected internal Binder? Next { get; } 698847" />
<Node Id="10286:[17802..17818).2" Label="_lazyConversions 698848" />
<Node Id="10286:[18200..18223).2" Label="_lazyOverloadResolution 698849" />
<Node Id="10286:[1317..1350).5" Label="RoslynDebug.Assert(next != null); 698850" />
<Node Id="10286:[1317..1350).6" Label="RoslynDebug.Assert(next != null); 698851" />
<Node Id="10286:[1390..1400).2" Label="this.Flags 698852" />
<Node Id="10286:[1428..1444).2" Label="this.Compilation 698853" />
<Node Id="10286:[1478..1494).2" Label="_lazyConversions 698854" />
<Node Id="10346:[858..868).2" Label="_container 698855" />
<Node Id="10346:[932..947).2" Label="_computeImports 698856" />
<Node Id="10346:[974..986).2" Label="_lazyImports 698857" />
<Node Id="10346:[1017..1033).2" Label="_lazyImportChain 698858" />
<Node Id="10346:[1074..1100).2" Label="_lazyQuickAttributeChecker 698859" />
<Node Id="10346:[1572..1612).5" Label="Debug.Assert((object)container != null); 698860" />
<Node Id="10346:[1572..1612).6" Label="Debug.Assert((object)container != null); 698861" />
<Node Id="10346:[1626..1666).5" Label="Debug.Assert(declarationSyntax != null); 698862" />
<Node Id="10346:[1626..1666).6" Label="Debug.Assert(declarationSyntax != null); 698863" />
<Node Id="10346:[1719..1832).2" Label="_computeImports = basesBeingResolved =$ Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 698864" />
<Node Id="10346:[1719..1734).2" Label="_computeImports 698865" />
<Node Id="10346:[1848..2424).2" Label="if (!inUsing)
            {
                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                }
            } 698866" />
<Node Id="10346:[1894..2409).4" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                } 698867" />
<Node Id="10346:[2160..2409).1" Label="if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                } 698868" />
<Node Id="10346:[2265..2331).1" Label="var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax; 698869" />
<Node Id="10346:[2353..2366).1" Label="_usingsSyntax 698870" />
<Node Id="10077:[37653..37719).5" Label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 698871" />
<Node Id="10077:[37766..37777).1" Label="binderCache 698872" />
<Node Id="10077:[2110..2139).5" Label="return _factory._binderCache; 698873" />
<Node Id="10077:[37766..37798).1" Label="binderCache.TryAdd(key, result); 698874" />
<Node Id="10077:[37766..37798).2" Label="binderCache.TryAdd(key, result); 698875" />
<Node Id="10077:[37766..37798).3" Label="binderCache.TryAdd(key, result); 698876" />
<Node Id="10077:[37766..37798).4" Label="binderCache.TryAdd(key, result); 698877" />
<Node Id="10077:[37766..37798).5" Label="binderCache.TryAdd(key, result); 698878" />
<Node Id="10076:[1089..1109).1" Label="param Equals(BinderCacheKey other) 698879" />
<Node Id="10076:[1050..1225).1" Label="param Equals(this) 698880" />
<Node Id="10076:[1143..1210).1" Label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 698881" />
<Node Id="10077:[37837..37851).1" Label="return result; 698882" />
<Node Id="10077:[2926..2971).18" Label="return ((CSharpSyntaxNode)node).Accept(this); 698883" />
<Node Id="10077:[33290..34322).1" Label="if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    } 698884" />
<Node Id="10077:[33414..33451).1" Label="resultBinder.ContainingMemberOrLambda 698885" />
<Node Id="10346:[7369..7588).1" Label="get
            {
                var merged = _container as MergedNamespaceSymbol;
                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;
            } 698886" />
<Node Id="10346:[7405..7454).1" Label="var merged = _container as MergedNamespaceSymbol; 698887" />
<Node Id="10346:[7472..7573).1" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 698888" />
<Node Id="10346:[7472..7573).2" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 698889" />
<Node Id="10346:[7479..7503).1" Label="((object)merged != null) 698890" />
<Node Id="10346:[7562..7572).1" Label="_container 698891" />
<Node Id="10077:[33373..33481).1" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 698892" />
<Node Id="10077:[33373..33481).2" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 698893" />
<Node Id="10077:[33509..34299).1" Label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        } 698894" />
<Node Id="10077:[33969..34032).1" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 698895" />
<Node Id="10077:[33969..34032).2" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 698896" />
<Node Id="10077:[33969..34032).3" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 698897" />
<Node Id="10077:[33984..34031).1" Label="new InContainerBinder(typeSymbol, resultBinder) 698898" />
<Node Id="10346:[2571..2602).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 698899" />
<Node Id="10346:[2604..2615).1" Label="param InContainerBinder(Binder next) 698900" />
<Node Id="10346:[2617..2639).1" Label="param InContainerBinder(Imports imports = null) 698901" />
<Node Id="10346:[2544..2854).1" Label="param InContainerBinder(this) 698902" />
<Node Id="10346:[2661..2665).1" Label="next 698903" />
<Node Id="10346:[2544..2854).2" Label="param InContainerBinder(this) 698904" />
<Node Id="10286:[1247..1258).3" Label="param Binder(Binder next) 698905" />
<Node Id="10286:[1231..1520).3" Label="param Binder(this) 698906" />
<Node Id="10286:[1260..1291).3" Label="param Binder(Conversions? conversions = null) 698907" />
<Node Id="10286:[726..773).3" Label="internal CSharpCompilation Compilation { get; } 698908" />
<Node Id="10286:[815..820).3" Label="Flags 698909" />
<Node Id="10286:[2975..3015).3" Label="protected internal Binder? Next { get; } 698910" />
<Node Id="10286:[17802..17818).3" Label="_lazyConversions 698911" />
<Node Id="10286:[18200..18223).3" Label="_lazyOverloadResolution 698912" />
<Node Id="10286:[1317..1350).9" Label="RoslynDebug.Assert(next != null); 698913" />
<Node Id="10286:[1317..1350).10" Label="RoslynDebug.Assert(next != null); 698914" />
<Node Id="10286:[1390..1400).3" Label="this.Flags 698915" />
<Node Id="10286:[1428..1444).3" Label="this.Compilation 698916" />
<Node Id="10286:[1478..1494).3" Label="_lazyConversions 698917" />
<Node Id="10346:[858..868).3" Label="_container 698918" />
<Node Id="10346:[932..947).3" Label="_computeImports 698919" />
<Node Id="10346:[974..986).3" Label="_lazyImports 698920" />
<Node Id="10346:[1017..1033).3" Label="_lazyImportChain 698921" />
<Node Id="10346:[1074..1100).3" Label="_lazyQuickAttributeChecker 698922" />
<Node Id="10346:[2691..2750).1" Label="Debug.Assert((object)container != null || imports != null); 698923" />
<Node Id="10346:[2691..2750).2" Label="Debug.Assert((object)container != null || imports != null); 698924" />
<Node Id="10346:[2766..2776).1" Label="_container 698925" />
<Node Id="10346:[2803..2843).1" Label="_lazyImports = imports ?? Imports.Empty; 698926" />
<Node Id="10346:[2803..2843).2" Label="_lazyImports = imports ?? Imports.Empty; 698927" />
<Node Id="10346:[2803..2815).1" Label="_lazyImports 698928" />
<Node Id="10077:[34064..34272).1" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 698929" />
<Node Id="10077:[34064..34272).2" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 698930" />
<Node Id="10077:[34166..34241).1" Label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 698931" />
<Node Id="10077:[34166..34241).2" Label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 698932" />
<Node Id="10077:[34166..34241).3" Label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 698933" />
<Node Id="10077:[34181..34240).1" Label="new WithClassTypeParametersBinder(typeSymbol, resultBinder) 698934" />
<Node Id="10376:[838..863).1" Label="param WithClassTypeParametersBinder(NamedTypeSymbol container) 698935" />
<Node Id="10376:[865..876).1" Label="param WithClassTypeParametersBinder(Binder next) 698936" />
<Node Id="10376:[799..1016).1" Label="param WithClassTypeParametersBinder(this) 698937" />
<Node Id="10376:[898..902).1" Label="next 698938" />
<Node Id="10376:[799..1016).2" Label="param WithClassTypeParametersBinder(this) 698939" />
<Node Id="10382:[520..531).1" Label="param WithTypeParametersBinder(Binder next) 698940" />
<Node Id="10382:[486..580).1" Label="param WithTypeParametersBinder(this) 698941" />
<Node Id="10382:[553..557).1" Label="next 698942" />
<Node Id="10382:[486..580).2" Label="param WithTypeParametersBinder(this) 698943" />
<Node Id="10286:[1247..1258).4" Label="param Binder(Binder next) 698944" />
<Node Id="10286:[726..773).4" Label="internal CSharpCompilation Compilation { get; } 698945" />
<Node Id="10286:[815..820).4" Label="Flags 698946" />
<Node Id="10286:[2975..3015).4" Label="protected internal Binder? Next { get; } 698947" />
<Node Id="10286:[17802..17818).4" Label="_lazyConversions 698948" />
<Node Id="10286:[1317..1350).13" Label="RoslynDebug.Assert(next != null); 698949" />
<Node Id="10286:[1317..1350).14" Label="RoslynDebug.Assert(next != null); 698950" />
<Node Id="10286:[1390..1400).4" Label="this.Flags 698951" />
<Node Id="10286:[1428..1444).4" Label="this.Compilation 698952" />
<Node Id="10376:[691..701).1" Label="_namedType 698953" />
<Node Id="10376:[765..786).1" Label="_lazyTypeParameterMap 698954" />
<Node Id="10376:[928..968).1" Label="Debug.Assert((object)container != null); 698955" />
<Node Id="10376:[928..968).2" Label="Debug.Assert((object)container != null); 698956" />
<Node Id="10376:[982..992).1" Label="_namedType 698957" />
<Node Id="10077:[34346..34420).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 698958" />
<Node Id="10077:[34361..34419).1" Label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 698959" />
<Node Id="10307:[3496..3521).1" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 698960" />
<Node Id="10307:[3452..3756).1" Label="param WithUnsafeRegionIfNecessary(this) 698961" />
<Node Id="10307:[3547..3745).1" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 698962" />
<Node Id="10307:[3547..3745).2" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 698963" />
<Node Id="10307:[3555..3600).1" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 698964" />
<Node Id="10298:[471..492).7" Label="param Includes(this BinderFlags self) 698965" />
<Node Id="10298:[494..511).7" Label="param Includes(BinderFlags other) 698966" />
<Node Id="10307:[3547..3745).4" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 698967" />
<Node Id="10307:[3547..3745).7" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 698968" />
<Node Id="10307:[3554..3645).1" Label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 698969" />
<Node Id="10077:[34444..34455).1" Label="binderCache 698970" />
<Node Id="10077:[2110..2139).6" Label="return _factory._binderCache; 698971" />
<Node Id="10077:[34444..34482).1" Label="binderCache.TryAdd(key, resultBinder); 698972" />
<Node Id="10077:[34444..34482).2" Label="binderCache.TryAdd(key, resultBinder); 698973" />
<Node Id="10077:[34444..34482).3" Label="binderCache.TryAdd(key, resultBinder); 698974" />
<Node Id="10077:[34444..34482).4" Label="binderCache.TryAdd(key, resultBinder); 698975" />
<Node Id="10077:[34444..34482).5" Label="binderCache.TryAdd(key, resultBinder); 698976" />
<Node Id="10077:[34521..34541).1" Label="return resultBinder; 698977" />
<Node Id="10077:[2926..2971).22" Label="return ((CSharpSyntaxNode)node).Accept(this); 698978" />
<Node Id="10076:[5678..5718).3" Label="_binderFactoryVisitorPool.Free(visitor); 698979" />
<Node Id="10302:[16344..16385).1" Label="param GetDefaultTypeParameterConstraintClauses(TypeParameterListSyntax typeParameterList) 698980" />
<Node Id="10302:[16248..16799).1" Label="param GetDefaultTypeParameterConstraintClauses(this) 698981" />
<Node Id="10302:[16411..16517).1" Label="var builder = ArrayBuilder$TypeParameterConstraintClause$.GetInstance(typeParameterList.Parameters.Count); 698982" />
<Node Id="10302:[16533..16736).1" Label="foreach (TypeParameterSyntax typeParameterSyntax in typeParameterList.Parameters)
            {
                builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax));
            } 698983" />
<Node Id="10302:[16647..16721).1" Label="builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax)); 698984" />
<Node Id="10302:[16659..16719).1" Label="GetDefaultTypeParameterConstraintClause(typeParameterSyntax) 698985" />
<Node Id="10302:[16889..16928).1" Label="param GetDefaultTypeParameterConstraintClause(TypeParameterSyntax typeParameterSyntax) 698986" />
<Node Id="10302:[16930..16956).1" Label="param GetDefaultTypeParameterConstraintClause(bool isForOverride = false) 698987" />
<Node Id="10302:[16811..17185).1" Label="param GetDefaultTypeParameterConstraintClause(this) 698988" />
<Node Id="10302:[16982..17174).1" Label="return isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) ? TypeParameterConstraintClause.Empty : TypeParameterConstraintClause.ObliviousNullabilityIfReferenceType; 698989" />
<Node Id="10302:[17006..17067).1" Label="AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) 698990" />
<Node Id="10286:[10010..10027).1" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 698991" />
<Node Id="10286:[9966..10197).1" Label="param AreNullableAnnotationsEnabled(this) 698992" />
<Node Id="10286:[10053..10100).1" Label="RoslynDebug.Assert(token.SyntaxTree is object); 698993" />
<Node Id="10286:[10114..10186).1" Label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 698994" />
<Node Id="10286:[10121..10185).1" Label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 698995" />
<Node Id="10286:[9073..9094).1" Label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 698996" />
<Node Id="10286:[9096..9108).1" Label="param AreNullableAnnotationsEnabled(int position) 698997" />
<Node Id="10286:[9029..9954).1" Label="param AreNullableAnnotationsEnabled(this) 698998" />
<Node Id="10286:[9134..9189).1" Label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 698999" />
<Node Id="10286:[9203..9282).1" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 699000" />
<Node Id="10286:[9203..9282).2" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 699001" />
<Node Id="10286:[9305..9942).1" Label="context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            } 699002" />
<Node Id="10286:[9298..9943).1" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 699003" />
<Node Id="10286:[9298..9943).2" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 699004" />
<Node Id="10286:[9798..9837).1" Label="AreNullableAnnotationsGloballyEnabled() 699005" />
<Node Id="10286:[10465..10663).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 699006" />
<Node Id="10286:[10551..10586).1" Label="RoslynDebug.Assert(Next is object); 699007" />
<Node Id="10286:[10607..10651).1" Label="Next.AreNullableAnnotationsGloballyEnabled() 699008" />
<Node Id="10286:[10465..10663).2" Label="param AreNullableAnnotationsGloballyEnabled(this) 699009" />
<Node Id="10325:[4462..4594).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 699010" />
<Node Id="10325:[4556..4582).1" Label="GetGlobalAnnotationState() 699011" />
<Node Id="10286:[10675..11259).1" Label="param GetGlobalAnnotationState(this) 699012" />
<Node Id="10286:[10741..11248).1" Label="switch (Compilation.Options.NullableContextOptions)
            {
                case NullableContextOptions.Enable:
                case NullableContextOptions.Annotations:
                    return true;

                case NullableContextOptions.Disable:
                case NullableContextOptions.Warnings:
                    return false;

                default:
                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);
            } 699013" />
<Node Id="10286:[11085..11098).1" Label="return false; 699014" />
<Node Id="10325:[4549..4583).1" Label="return GetGlobalAnnotationState(); 699015" />
<Node Id="10286:[10600..10652).1" Label="return Next.AreNullableAnnotationsGloballyEnabled(); 699016" />
<Node Id="10302:[16982..17174).3" Label="return isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) ? TypeParameterConstraintClause.Empty : TypeParameterConstraintClause.ObliviousNullabilityIfReferenceType; 699017" />
<Node Id="10302:[16989..17067).1" Label="isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) 699018" />
<Node Id="10302:[16647..16721).6" Label="builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax)); 699019" />
<Node Id="10302:[16752..16788).1" Label="return builder.ToImmutableAndFree(); 699020" />
<Node Id="10076:[5223..5250).10" Label="Debug.Assert(node != null); 699021" />
<Node Id="10076:[5277..5448).10" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 699022" />
<Node Id="10077:[31258..31297).2" Label="NodeUsage extraInfo = NodeUsage.Normal; 699023" />
<Node Id="10077:[44231..44317).25" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 699024" />
<Node Id="10076:[2308..2337).1" Label="param BinderFactory(CSharpCompilation compilation) 699025" />
<Node Id="10076:[2339..2360).1" Label="param BinderFactory(SyntaxTree syntaxTree) 699026" />
<Node Id="10076:[2362..2386).1" Label="param BinderFactory(bool ignoreAccessibility) 699027" />
<Node Id="10076:[2285..3386).1" Label="param BinderFactory(this) 699028" />
<Node Id="10076:[1715..1727).1" Label="_binderCache 699029" />
<Node Id="10076:[1773..1785).1" Label="_compilation 699030" />
<Node Id="10076:[1824..1835).1" Label="_syntaxTree 699031" />
<Node Id="10076:[1883..1903).1" Label="_buckStopsHereBinder 699032" />
<Node Id="10076:[1936..1956).1" Label="_ignoreAccessibility 699033" />
<Node Id="10076:[2247..2272).1" Label="_binderFactoryVisitorPool 699034" />
<Node Id="10076:[2412..2424).1" Label="_compilation 699035" />
<Node Id="10076:[2453..2464).1" Label="_syntaxTree 699036" />
<Node Id="10076:[2492..2512).1" Label="_ignoreAccessibility 699037" />
<Node Id="10076:[2551..2658).1" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 699038" />
<Node Id="10076:[2551..2658).3" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 699039" />
<Node Id="10076:[2551..2658).5" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 699040" />
<Node Id="10076:[2551..2576).1" Label="_binderFactoryVisitorPool 699041" />
<Node Id="10076:[3236..3299).1" Label="_binderCache = new ConcurrentCache$BinderCacheKey, Binder$(50); 699042" />
<Node Id="10076:[3236..3248).1" Label="_binderCache 699043" />
<Node Id="10076:[3315..3375).1" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 699044" />
<Node Id="10076:[3315..3375).2" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 699045" />
<Node Id="10076:[3338..3374).1" Label="new BuckStopsHereBinder(compilation) 699046" />
<Node Id="10325:[645..674).1" Label="param BuckStopsHereBinder(CSharpCompilation compilation) 699047" />
<Node Id="10325:[616..730).1" Label="param BuckStopsHereBinder(this) 699048" />
<Node Id="10325:[696..707).1" Label="compilation 699049" />
<Node Id="10325:[616..730).2" Label="param BuckStopsHereBinder(this) 699050" />
<Node Id="10286:[939..968).1" Label="param Binder(CSharpCompilation compilation) 699051" />
<Node Id="10286:[923..1219).1" Label="param Binder(this) 699052" />
<Node Id="10286:[726..773).5" Label="internal CSharpCompilation Compilation { get; } 699053" />
<Node Id="10286:[815..820).5" Label="Flags 699054" />
<Node Id="10286:[2975..3015).5" Label="protected internal Binder? Next { get; } 699055" />
<Node Id="10286:[17802..17818).5" Label="_lazyConversions 699056" />
<Node Id="10286:[18200..18223).5" Label="_lazyOverloadResolution 699057" />
<Node Id="10286:[994..1034).1" Label="RoslynDebug.Assert(compilation != null); 699058" />
<Node Id="10286:[994..1034).2" Label="RoslynDebug.Assert(compilation != null); 699059" />
<Node Id="10286:[1048..1096).1" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 699060" />
<Node Id="10286:[1048..1096).2" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 699061" />
<Node Id="10286:[1110..1120).1" Label="this.Flags 699062" />
<Node Id="10286:[1177..1193).1" Label="this.Compilation 699063" />
<Node Id="10076:[3315..3335).1" Label="_buckStopsHereBinder 699064" />
<Node Id="25002:[4395..4432).34" Label="var diagnostics = c.GetDiagnostics(); 699065" />
<Node Id="10076:[5223..5250).14" Label="Debug.Assert(node != null); 699066" />
<Node Id="10076:[5277..5448).14" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 699067" />
<Node Id="10077:[34685..34715).3" Label="VisitTypeDeclarationCore(node) 699068" />
<Node Id="10077:[31258..31297).3" Label="NodeUsage extraInfo = NodeUsage.Normal; 699069" />
<Node Id="10077:[31490..32331).31" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 699070" />
<Node Id="10077:[31842..31894).1" Label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 699071" />
<Node Id="10077:[32358..32401).3" Label="VisitTypeDeclarationCore(parent, extraInfo) 699072" />
<Node Id="10077:[32567..32606).3" Label="CreateBinderCacheKey(parent, extraInfo) 699073" />
<Node Id="10077:[44231..44317).33" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 699074" />
<Node Id="10077:[44231..44317).35" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 699075" />
<Node Id="10077:[44335..44374).19" Label="return new BinderCacheKey(node, usage); 699076" />
<Node Id="10077:[44342..44373).5" Label="new BinderCacheKey(node, usage) 699077" />
<Node Id="10076:[853..1034).5" Label="param BinderCacheKey(this) 699078" />
<Node Id="10077:[32557..32607).11" Label="var key = CreateBinderCacheKey(parent, extraInfo); 699079" />
<Node Id="10077:[32627..32647).3" Label="Binder resultBinder; 699080" />
<Node Id="10077:[32670..32681).3" Label="binderCache 699081" />
<Node Id="10077:[32665..34501).23" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 699082" />
<Node Id="10077:[32665..34501).24" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 699083" />
<Node Id="10077:[32665..34501).26" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 699084" />
<Node Id="10077:[44954..44972).3" Label="SyntaxToken token; 699085" />
<Node Id="10077:[44966..44971).67" Label="token 699086" />
<Node Id="10077:[36100..36154).6" Label="Debug.Assert(!inUsing || inBody, 'inUsing =$ inBody'); 699087" />
<Node Id="10077:[44231..44317).41" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 699088" />
<Node Id="10077:[36519..36532).2" Label="Binder outer; 699089" />
<Node Id="10077:[36554..36584).2" Label="var container = parent.Parent; 699090" />
<Node Id="10076:[5223..5250).17" Label="Debug.Assert(node != null); 699091" />
<Node Id="10076:[5277..5448).17" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 699092" />
<Node Id="10077:[1142..1210).29" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 699093" />
<Node Id="10077:[39421..39431).2" Label="syntaxTree 699094" />
<Node Id="10077:[1641..1732).2" Label="get
                {
                    return _factory._syntaxTree;
                } 699095" />
<Node Id="10077:[1685..1713).2" Label="return _factory._syntaxTree; 699096" />
<Node Id="10077:[39398..39590).7" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 699097" />
<Node Id="10077:[39398..39590).8" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 699098" />
<Node Id="10286:[1317..1350).17" Label="RoslynDebug.Assert(next != null); 699099" />
<Node Id="10346:[858..868).4" Label="_container 699100" />
<Node Id="10346:[1572..1612).9" Label="Debug.Assert((object)container != null); 699101" />
<Node Id="10346:[1626..1666).9" Label="Debug.Assert(declarationSyntax != null); 699102" />
<Node Id="10077:[37882..38960).2" Label="param MakeNamespaceBinder(this) 699103" />
<Node Id="10077:[38017..38044).2" Label="QualifiedNameSyntax dotted; 699104" />
<Node Id="10077:[38062..38295).5" Label="while ((dotted = name as QualifiedNameSyntax) != null)
                {
                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);
                    name = dotted.Right;
                } 699105" />
<Node Id="10077:[38315..38347).2" Label="NamespaceOrTypeSymbol container; 699106" />
<Node Id="10077:[38826..38863).4" Label="if ((object)ns == null) return outer; 699107" />
<Node Id="10346:[2691..2750).6" Label="Debug.Assert((object)container != null || imports != null); 699108" />
<Node Id="10376:[691..701).2" Label="_namedType 699109" />
<Node Id="10376:[928..968).5" Label="Debug.Assert((object)container != null); 699110" />
<Node Id="10845:[522..547).1" Label="param TypeConversions(AssemblySymbol corLibrary) 699111" />
<Node Id="10845:[549..580).1" Label="param TypeConversions(bool includeNullability = false) 699112" />
<Node Id="10845:[499..728).1" Label="param TypeConversions(this) 699113" />
<Node Id="10845:[602..612).1" Label="corLibrary 699114" />
<Node Id="10845:[637..638).1" Label="0 699115" />
<Node Id="10845:[660..678).1" Label="includeNullability 699116" />
<Node Id="10845:[701..705).1" Label="null 699117" />
<Node Id="10845:[499..728).2" Label="param TypeConversions(this) 699118" />
<Node Id="10845:[764..789).1" Label="param TypeConversions(AssemblySymbol corLibrary) 699119" />
<Node Id="10845:[791..816).1" Label="param TypeConversions(int currentRecursionDepth) 699120" />
<Node Id="10845:[818..841).1" Label="param TypeConversions(bool includeNullability) 699121" />
<Node Id="10845:[843..878).1" Label="param TypeConversions(TypeConversions otherNullabilityOpt) 699122" />
<Node Id="10845:[740..997).1" Label="param TypeConversions(this) 699123" />
<Node Id="10845:[900..910).1" Label="corLibrary 699124" />
<Node Id="10845:[912..933).1" Label="currentRecursionDepth 699125" />
<Node Id="10845:[935..953).1" Label="includeNullability 699126" />
<Node Id="10845:[955..974).1" Label="otherNullabilityOpt 699127" />
<Node Id="10845:[740..997).2" Label="param TypeConversions(this) 699128" />
<Node Id="10843:[1173..1198).1" Label="param ConversionsBase(AssemblySymbol corLibrary) 699129" />
<Node Id="10843:[1200..1225).1" Label="param ConversionsBase(int currentRecursionDepth) 699130" />
<Node Id="10843:[1227..1250).1" Label="param ConversionsBase(bool includeNullability) 699131" />
<Node Id="10843:[1252..1287).1" Label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 699132" />
<Node Id="10843:[1147..1833).1" Label="param ConversionsBase(this) 699133" />
<Node Id="10843:[734..744).1" Label="corLibrary 699134" />
<Node Id="10843:[778..799).1" Label="currentRecursionDepth 699135" />
<Node Id="10843:[835..853).1" Label="IncludeNullability 699136" />
<Node Id="10843:[1113..1134).1" Label="_lazyOtherNullability 699137" />
<Node Id="10843:[1313..1354).1" Label="Debug.Assert((object)corLibrary != null); 699138" />
<Node Id="10843:[1313..1354).2" Label="Debug.Assert((object)corLibrary != null); 699139" />
<Node Id="10843:[1368..1474).1" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 699140" />
<Node Id="10843:[1368..1474).2" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 699141" />
<Node Id="10843:[1488..1600).1" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 699142" />
<Node Id="10843:[1488..1600).2" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 699143" />
<Node Id="10843:[1616..1631).1" Label="this.corLibrary 699144" />
<Node Id="10843:[1659..1685).1" Label="this.currentRecursionDepth 699145" />
<Node Id="10843:[1724..1742).1" Label="IncludeNullability 699146" />
<Node Id="10843:[1778..1799).1" Label="_lazyOtherNullability 699147" />
<Node Id="25002:[4395..4432).40" Label="var diagnostics = c.GetDiagnostics(); 699148" />
<Node Id="10076:[5223..5250).22" Label="Debug.Assert(node != null); 699149" />
<Node Id="10076:[5277..5448).22" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 699150" />
<Node Id="10077:[15216..15245).1" Label="param VisitFieldDeclaration(FieldDeclarationSyntax parent) 699151" />
<Node Id="10077:[15171..15372).1" Label="param VisitFieldDeclaration(this) 699152" />
<Node Id="10077:[15279..15357).1" Label="return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers); 699153" />
<Node Id="10077:[15286..15310).1" Label="VisitCore(parent.Parent) 699154" />
<Node Id="10077:[2877..2892).12" Label="param VisitCore(SyntaxNode node) 699155" />
<Node Id="10077:[2852..2986).12" Label="param VisitCore(this) 699156" />
<Node Id="10077:[2926..2971).71" Label="return ((CSharpSyntaxNode)node).Accept(this); 699157" />
<Node Id="10077:[34685..34715).4" Label="VisitTypeDeclarationCore(node) 699158" />
<Node Id="10077:[31258..31297).4" Label="NodeUsage extraInfo = NodeUsage.Normal; 699159" />
<Node Id="10077:[31490..32331).43" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 699160" />
<Node Id="10077:[32358..32401).4" Label="VisitTypeDeclarationCore(parent, extraInfo) 699161" />
<Node Id="10077:[32567..32606).4" Label="CreateBinderCacheKey(parent, extraInfo) 699162" />
<Node Id="10077:[44231..44317).57" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 699163" />
<Node Id="10077:[44231..44317).59" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 699164" />
<Node Id="10077:[44335..44374).31" Label="return new BinderCacheKey(node, usage); 699165" />
<Node Id="10077:[44342..44373).8" Label="new BinderCacheKey(node, usage) 699166" />
<Node Id="10076:[853..1034).8" Label="param BinderCacheKey(this) 699167" />
<Node Id="10077:[32557..32607).15" Label="var key = CreateBinderCacheKey(parent, extraInfo); 699168" />
<Node Id="10077:[32627..32647).4" Label="Binder resultBinder; 699169" />
<Node Id="10077:[32670..32681).4" Label="binderCache 699170" />
<Node Id="10077:[32665..34501).32" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 699171" />
<Node Id="10077:[32665..34501).33" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 699172" />
<Node Id="10077:[32665..34501).35" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 699173" />
<Node Id="10077:[15286..15356).1" Label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 699174" />
<Node Id="10307:[3496..3521).3" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 699175" />
<Node Id="10307:[3452..3756).3" Label="param WithUnsafeRegionIfNecessary(this) 699176" />
<Node Id="10307:[3547..3745).20" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 699177" />
<Node Id="10307:[3555..3600).3" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 699178" />
<Node Id="10298:[494..511).9" Label="param Includes(BinderFlags other) 699179" />
<Node Id="10307:[3228..3245).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 699180" />
<Node Id="10307:[3247..3264).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 699181" />
<Node Id="10307:[3165..3440).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 699182" />
<Node Id="10307:[3290..3331).1" Label="Debug.Assert((object)containing != null); 699183" />
<Node Id="10307:[3290..3331).2" Label="Debug.Assert((object)containing != null); 699184" />
<Node Id="10307:[3345..3429).1" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 699185" />
<Node Id="10307:[3345..3429).2" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 699186" />
<Node Id="10307:[3345..3429).4" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 699187" />
<Node Id="10307:[3345..3429).5" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 699188" />
<Node Id="10307:[3352..3428).1" Label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 699189" />
<Node Id="10307:[1072..1083).1" Label="param BinderWithContainingMemberOrLambda(Binder next) 699190" />
<Node Id="10307:[1085..1102).1" Label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 699191" />
<Node Id="10307:[1104..1135).1" Label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 699192" />
<Node Id="10307:[1028..1341).1" Label="param BinderWithContainingMemberOrLambda(this) 699193" />
<Node Id="10307:[1161..1165).1" Label="next 699194" />
<Node Id="10307:[1167..1172).1" Label="flags 699195" />
<Node Id="10307:[1028..1341).2" Label="param BinderWithContainingMemberOrLambda(this) 699196" />
<Node Id="10286:[1549..1560).1" Label="param Binder(Binder next) 699197" />
<Node Id="10286:[1562..1579).1" Label="param Binder(BinderFlags flags) 699198" />
<Node Id="10286:[1532..2083).1" Label="param Binder(this) 699199" />
<Node Id="10286:[726..773).10" Label="internal CSharpCompilation Compilation { get; } 699200" />
<Node Id="10286:[815..820).10" Label="Flags 699201" />
<Node Id="10286:[2975..3015).10" Label="protected internal Binder? Next { get; } 699202" />
<Node Id="10286:[17802..17818).10" Label="_lazyConversions 699203" />
<Node Id="10286:[18200..18223).10" Label="_lazyOverloadResolution 699204" />
<Node Id="10286:[1605..1638).1" Label="RoslynDebug.Assert(next != null); 699205" />
<Node Id="10286:[1605..1638).2" Label="RoslynDebug.Assert(next != null); 699206" />
<Node Id="10286:[1688..1781).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 699207" />
<Node Id="10286:[1688..1781).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 699208" />
<Node Id="10286:[1708..1779).1" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 699209" />
<Node Id="10298:[471..492).10" Label="param Includes(this BinderFlags self) 699210" />
<Node Id="10298:[494..511).10" Label="param Includes(BinderFlags other) 699211" />
<Node Id="10286:[1820..1963).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 699212" />
<Node Id="10286:[1820..1963).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 699213" />
<Node Id="10286:[1840..1888).1" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 699214" />
<Node Id="10298:[471..492).11" Label="param Includes(this BinderFlags self) 699215" />
<Node Id="10298:[494..511).11" Label="param Includes(BinderFlags other) 699216" />
<Node Id="10286:[1977..1981).1" Label="Next 699217" />
<Node Id="10286:[2003..2013).1" Label="this.Flags 699218" />
<Node Id="10286:[2036..2052).1" Label="this.Compilation 699219" />
<Node Id="10307:[683..708).1" Label="_containingMemberOrLambda 699220" />
<Node Id="10307:[1206..1253).1" Label="Debug.Assert(containingMemberOrLambda != null); 699221" />
<Node Id="10307:[1206..1253).2" Label="Debug.Assert(containingMemberOrLambda != null); 699222" />
<Node Id="10307:[1273..1298).1" Label="_containingMemberOrLambda 699223" />
<Node Id="25002:[4395..4432).46" Label="var diagnostics = c.GetDiagnostics(); 699224" />
<Node Id="10319:[13685..13708).1" Label="param BindType(ExpressionSyntax syntax) 699225" />
<Node Id="10319:[13710..13735).1" Label="param BindType(DiagnosticBag diagnostics) 699226" />
<Node Id="10319:[13737..13783).1" Label="param BindType(ConsList$TypeSymbol$ basesBeingResolved = null) 699227" />
<Node Id="10319:[13785..13824).1" Label="param BindType(bool suppressUseSiteDiagnostics = false) 699228" />
<Node Id="10319:[13647..14061).1" Label="param BindType(this) 699229" />
<Node Id="10319:[13850..13948).1" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 699230" />
<Node Id="10319:[13850..13948).2" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 699231" />
<Node Id="10319:[13850..13948).3" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 699232" />
<Node Id="10319:[13850..13948).4" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 699233" />
<Node Id="10319:[13863..13947).1" Label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 699234" />
<Node Id="10319:[14931..14954).1" Label="param BindTypeOrAlias(ExpressionSyntax syntax) 699235" />
<Node Id="10319:[14956..14981).1" Label="param BindTypeOrAlias(DiagnosticBag diagnostics) 699236" />
<Node Id="10319:[14983..15029).1" Label="param BindTypeOrAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 699237" />
<Node Id="10319:[15031..15070).1" Label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 699238" />
<Node Id="10319:[14862..16302).1" Label="param BindTypeOrAlias(this) 699239" />
<Node Id="10319:[15096..15130).1" Label="Debug.Assert(diagnostics != null); 699240" />
<Node Id="10319:[15096..15130).2" Label="Debug.Assert(diagnostics != null); 699241" />
<Node Id="10319:[15146..15291).1" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 699242" />
<Node Id="10319:[15146..15291).2" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 699243" />
<Node Id="10319:[15146..15291).3" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 699244" />
<Node Id="10319:[15146..15291).4" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 699245" />
<Node Id="10319:[15146..15291).5" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 699246" />
<Node Id="10319:[15146..15291).6" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 699247" />
<Node Id="10319:[15159..15290).1" Label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 699248" />
<Node Id="10319:[20002..20025).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 699249" />
<Node Id="10319:[20027..20052).1" Label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 699250" />
<Node Id="10319:[20054..20093).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 699251" />
<Node Id="10319:[20095..20126).1" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 699252" />
<Node Id="10319:[19916..30085).1" Label="param BindNamespaceOrTypeOrAliasSymbol(this) 699253" />
<Node Id="10319:[20152..24647).1" Label="switch (syntax.Kind())
            {
                case SyntaxKind.NullableType:
                    return bindNullable(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.PredefinedType:
                    return bindPredefined(syntax, diagnostics);

                case SyntaxKind.IdentifierName:
                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);

                case SyntaxKind.GenericName:
                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);

                case SyntaxKind.AliasQualifiedName:
                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);

                case SyntaxKind.QualifiedName:
                    {
                        var node = (QualifiedNameSyntax)syntax;
                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.SimpleMemberAccessExpression:
                    {
                        var node = (MemberAccessExpressionSyntax)syntax;
                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.ArrayType:
                    {
                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);
                    }

                case SyntaxKind.PointerType:
                    return bindPointer(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.FunctionPointerType:
                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;
                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)
                    {
                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;
                        var asterisk = functionPointerTypeSyntax.AsteriskToken;
                        RoslynDebug.Assert(@delegate.SyntaxTree is object);
                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));
                    }

                    return TypeWithAnnotations.Create(
                        FunctionPointerTypeSymbol.CreateFromSource(
                            functionPointerTypeSyntax,
                            this,
                            diagnostics,
                            basesBeingResolved,
                            suppressUseSiteDiagnostics));

                case SyntaxKind.OmittedTypeArgument:
                    {
                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);
                    }

                case SyntaxKind.TupleType:
                    {
                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;
                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));
                    }

                case SyntaxKind.RefType:
                    {
                        // ref needs to be handled by the caller
                        var refTypeSyntax = (RefTypeSyntax)syntax;
                        var refToken = refTypeSyntax.RefKeyword;
                        if (!syntax.HasErrors)
                        {
                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());
                        }

                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                default:
                    {
                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind
                        // is attempted to be bound as a type pattern.
                        return createErrorType(syntax);
                    }
            } 699254" />
<Node Id="10319:[20508..20675).1" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 699255" />
<Node Id="10319:[20508..20675).2" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 699256" />
<Node Id="10319:[20508..20675).3" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 699257" />
<Node Id="10319:[20508..20675).4" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 699258" />
<Node Id="10319:[20508..20675).5" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 699259" />
<Node Id="10319:[20515..20674).1" Label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 699260" />
<Node Id="10319:[41849..41874).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 699261" />
<Node Id="10319:[41889..41914).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 699262" />
<Node Id="10319:[41929..41968).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 699263" />
<Node Id="10319:[41983..42014).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 699264" />
<Node Id="10319:[42029..42063).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 699265" />
<Node Id="10319:[41732..45579).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 699266" />
<Node Id="10319:[42089..42141).1" Label="var identifierValueText = node.Identifier.ValueText; 699267" />
<Node Id="10319:[42478..42805).1" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 699268" />
<Node Id="10319:[42821..42938).1" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 699269" />
<Node Id="10319:[42821..42938).2" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 699270" />
<Node Id="10319:[42821..42938).3" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 699271" />
<Node Id="10319:[42821..42938).4" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 699272" />
<Node Id="10319:[42821..42938).6" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 699273" />
<Node Id="10319:[42839..42937).1" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 699274" />
<Node Id="10319:[63849..63870).1" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 699275" />
<Node Id="10319:[63885..63919).1" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 699276" />
<Node Id="10319:[63934..63945).1" Label="param CreateErrorIfLookupOnTypeParameter(string name) 699277" />
<Node Id="10319:[63960..63969).1" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 699278" />
<Node Id="10319:[63984..64009).1" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 699279" />
<Node Id="10319:[63768..64484).1" Label="param CreateErrorIfLookupOnTypeParameter(this) 699280" />
<Node Id="10319:[64035..64445).1" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 699281" />
<Node Id="10319:[64035..64445).2" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 699282" />
<Node Id="10319:[64461..64473).1" Label="return null; 699283" />
<Node Id="10319:[42821..42938).7" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 699284" />
<Node Id="10319:[42952..43079).1" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 699285" />
<Node Id="10319:[42952..43079).2" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 699286" />
<Node Id="10354:[10826..10838).1" Label="CreatePool() 699287" />
<Node Id="10354:[10975..11012).1" Label="ObjectPool$LookupResult$ pool = null; 699288" />
<Node Id="10354:[11026..11097).1" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 699289" />
<Node Id="10354:[11026..11097).3" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 699290" />
<Node Id="10354:[11142..11154).1" Label="return pool; 699291" />
<Node Id="10354:[10809..10838).1" Label="s_poolInstance = CreatePool() 699292" />
<Node Id="10319:[43108..43134).1" Label="LookupResult.GetInstance() 699293" />
<Node Id="10354:[11244..11285).1" Label="var instance = s_poolInstance.Allocate(); 699294" />
<Node Id="10354:[11244..11285).2" Label="var instance = s_poolInstance.Allocate(); 699295" />
<Node Id="10354:[11244..11285).3" Label="var instance = s_poolInstance.Allocate(); 699296" />
<Node Id="10354:[3419..3448).1" Label="param LookupResult(ObjectPool$LookupResult$ pool) 699297" />
<Node Id="10354:[3398..3626).1" Label="param LookupResult(this) 699298" />
<Node Id="10354:[3068..3073).1" Label="_kind 699299" />
<Node Id="10354:[3200..3211).1" Label="_symbolList 699300" />
<Node Id="10354:[3319..3325).1" Label="_error 699301" />
<Node Id="10354:[3380..3385).1" Label="_pool 699302" />
<Node Id="10354:[3474..3479).1" Label="_pool 699303" />
<Node Id="10354:[3501..3506).1" Label="_kind 699304" />
<Node Id="10354:[3546..3587).1" Label="_symbolList = new ArrayBuilder$Symbol$(); 699305" />
<Node Id="10354:[3546..3557).1" Label="_symbolList 699306" />
<Node Id="10354:[3601..3615).1" Label="_error = null; 699307" />
<Node Id="10354:[3601..3607).1" Label="_error 699308" />
<Node Id="10354:[11244..11285).4" Label="var instance = s_poolInstance.Allocate(); 699309" />
<Node Id="10354:[11312..11328).1" Label="instance.IsClear 699310" />
<Node Id="10354:[3684..3818).1" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 699311" />
<Node Id="10354:[3720..3803).1" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699312" />
<Node Id="10354:[3720..3803).2" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699313" />
<Node Id="10354:[3720..3803).3" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699314" />
<Node Id="10354:[11299..11330).1" Label="Debug.Assert(instance.IsClear); 699315" />
<Node Id="10354:[11344..11360).1" Label="return instance; 699316" />
<Node Id="10319:[43095..43135).1" Label="var result = LookupResult.GetInstance(); 699317" />
<Node Id="10319:[43149..43246).1" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 699318" />
<Node Id="10319:[43149..43246).2" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 699319" />
<Node Id="10319:[43173..43245).1" Label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 699320" />
<Node Id="10319:[50313..50328).1" Label="param GetSimpleNameLookupOptions(NameSyntax node) 699321" />
<Node Id="10319:[50330..50355).1" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 699322" />
<Node Id="10319:[50381..51340).1" Label="if (SyntaxFacts.IsAttributeName(node))
            {
                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.
                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.
                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity
                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled
                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only
                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.

                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;
            }
            else
            {
                return LookupOptions.NamespacesOrTypesOnly;
            } 699323" />
<Node Id="10319:[51282..51325).1" Label="return LookupOptions.NamespacesOrTypesOnly; 699324" />
<Node Id="10319:[43262..43312).1" Label="HashSet$DiagnosticInfo$ useSiteDiagnostics = null; 699325" />
<Node Id="10319:[43326..43490).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699326" />
<Node Id="10319:[43326..43490).2" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699327" />
<Node Id="10319:[43326..43490).3" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699328" />
<Node Id="10319:[43326..43490).4" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699329" />
<Node Id="10319:[43326..43490).6" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699330" />
<Node Id="10319:[43326..43490).7" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699331" />
<Node Id="10319:[43326..43490).10" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 699332" />
<Node Id="10319:[43326..43489).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 699333" />
<Node Id="10312:[994..1013).1" Label="param LookupSymbolsSimpleName(LookupResult result) 699334" />
<Node Id="10312:[1028..1062).1" Label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 699335" />
<Node Id="10312:[1077..1093).1" Label="param LookupSymbolsSimpleName(string plainName) 699336" />
<Node Id="10312:[1108..1117).1" Label="param LookupSymbolsSimpleName(int arity) 699337" />
<Node Id="10312:[1132..1171).1" Label="param LookupSymbolsSimpleName(ConsList$TypeSymbol$ basesBeingResolved) 699338" />
<Node Id="10312:[1186..1207).1" Label="param LookupSymbolsSimpleName(LookupOptions options) 699339" />
<Node Id="10312:[1222..1235).1" Label="param LookupSymbolsSimpleName(bool diagnose) 699340" />
<Node Id="10312:[1250..1296).1" Label="param LookupSymbolsSimpleName(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 699341" />
<Node Id="10312:[942..1750).1" Label="param LookupSymbolsSimpleName(this) 699342" />
<Node Id="10312:[1322..1739).1" Label="if (options.IsAttributeTypeLookup())
            {
                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 699343" />
<Node Id="10312:[1326..1357).1" Label="options.IsAttributeTypeLookup() 699344" />
<Node Id="10353:[7504..7530).1" Label="param IsAttributeTypeLookup(this LookupOptions options) 699345" />
<Node Id="10353:[7556..7642).1" Label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 699346" />
<Node Id="10312:[1585..1724).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699347" />
<Node Id="10312:[1585..1724).2" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699348" />
<Node Id="10312:[1585..1724).3" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699349" />
<Node Id="10312:[1585..1724).4" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699350" />
<Node Id="10312:[1585..1724).5" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699351" />
<Node Id="10312:[1585..1724).6" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699352" />
<Node Id="10312:[1585..1724).7" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699353" />
<Node Id="10312:[1585..1724).8" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699354" />
<Node Id="10312:[1585..1723).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 699355" />
<Node Id="10312:[5721..5740).1" Label="param LookupSymbolsOrMembersInternal(LookupResult result) 699356" />
<Node Id="10312:[5755..5789).1" Label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 699357" />
<Node Id="10312:[5804..5815).1" Label="param LookupSymbolsOrMembersInternal(string name) 699358" />
<Node Id="10312:[5830..5839).1" Label="param LookupSymbolsOrMembersInternal(int arity) 699359" />
<Node Id="10312:[5854..5893).1" Label="param LookupSymbolsOrMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 699360" />
<Node Id="10312:[5908..5929).1" Label="param LookupSymbolsOrMembersInternal(LookupOptions options) 699361" />
<Node Id="10312:[5944..5957).1" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 699362" />
<Node Id="10312:[5972..6018).1" Label="param LookupSymbolsOrMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 699363" />
<Node Id="10312:[5663..6444).1" Label="param LookupSymbolsOrMembersInternal(this) 699364" />
<Node Id="10312:[6044..6433).1" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 699365" />
<Node Id="10312:[6044..6433).2" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 699366" />
<Node Id="10312:[6110..6221).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699367" />
<Node Id="10312:[6110..6221).2" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699368" />
<Node Id="10312:[6110..6221).3" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699369" />
<Node Id="10312:[6110..6221).4" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699370" />
<Node Id="10312:[6110..6221).5" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699371" />
<Node Id="10312:[6110..6221).6" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699372" />
<Node Id="10312:[6110..6221).7" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699373" />
<Node Id="10312:[6110..6220).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 699374" />
<Node Id="10312:[3696..3715).1" Label="param LookupSymbolsInternal(LookupResult result) 699375" />
<Node Id="10312:[3717..3728).1" Label="param LookupSymbolsInternal(string name) 699376" />
<Node Id="10312:[3730..3739).1" Label="param LookupSymbolsInternal(int arity) 699377" />
<Node Id="10312:[3741..3780).1" Label="param LookupSymbolsInternal(ConsList$TypeSymbol$ basesBeingResolved) 699378" />
<Node Id="10312:[3782..3803).1" Label="param LookupSymbolsInternal(LookupOptions options) 699379" />
<Node Id="10312:[3805..3818).1" Label="param LookupSymbolsInternal(bool diagnose) 699380" />
<Node Id="10312:[3820..3866).1" Label="param LookupSymbolsInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 699381" />
<Node Id="10312:[3645..5112).1" Label="param LookupSymbolsInternal(this) 699382" />
<Node Id="10312:[3905..3919).1" Label="result.IsClear 699383" />
<Node Id="10354:[3684..3818).2" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 699384" />
<Node Id="10354:[3720..3803).9" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699385" />
<Node Id="10354:[3720..3803).10" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699386" />
<Node Id="10354:[3720..3803).11" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699387" />
<Node Id="10312:[3892..3921).1" Label="Debug.Assert(result.IsClear); 699388" />
<Node Id="10312:[3935..3968).1" Label="Debug.Assert(options.AreValid()); 699389" />
<Node Id="10312:[3948..3966).1" Label="options.AreValid() 699390" />
<Node Id="10353:[4698..4724).1" Label="param AreValid(this LookupOptions options) 699391" />
<Node Id="10353:[4750..4847).1" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 699392" />
<Node Id="10353:[4863..5000).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 699393" />
<Node Id="10353:[4863..5000).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 699394" />
<Node Id="10353:[5079..5183).1" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 699395" />
<Node Id="10353:[5197..5323).1" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 699396" />
<Node Id="10353:[5485..5759).1" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 699397" />
<Node Id="10353:[5485..5759).2" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 699398" />
<Node Id="10353:[5485..5759).3" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 699399" />
<Node Id="10353:[5775..5979).1" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 699400" />
<Node Id="10353:[5775..5979).3" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 699401" />
<Node Id="10353:[5995..6029).1" Label="return OnlyOneBitSet(onlyOptions); 699402" />
<Node Id="10353:[6002..6028).1" Label="OnlyOneBitSet(onlyOptions) 699403" />
<Node Id="10353:[6343..6358).1" Label="param OnlyOneBitSet(LookupOptions o) 699404" />
<Node Id="10353:[6384..6410).1" Label="return (o & (o - 1)) == 0; 699405" />
<Node Id="10353:[6384..6410).2" Label="return (o & (o - 1)) == 0; 699406" />
<Node Id="10312:[3984..4005).1" Label="Binder binder = null; 699407" />
<Node Id="10312:[4019..5073).1" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 699408" />
<Node Id="10312:[4019..5073).2" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 699409" />
<Node Id="10312:[4060..4080).1" Label="result.IsMultiViable 699410" />
<Node Id="10354:[4919..5009).1" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 699411" />
<Node Id="10354:[4962..4966).1" Label="Kind 699412" />
<Node Id="10354:[4058..4122).1" Label="get
            {
                return _kind;
            } 699413" />
<Node Id="10354:[4094..4107).1" Label="return _kind; 699414" />
<Node Id="10354:[4955..4994).1" Label="return Kind == LookupResultKind.Viable; 699415" />
<Node Id="10312:[4019..5073).4" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 699416" />
<Node Id="10312:[4019..5073).5" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 699417" />
<Node Id="10312:[4134..4806).1" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 699418" />
<Node Id="10312:[4134..4806).2" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 699419" />
<Node Id="10312:[4534..4658).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699420" />
<Node Id="10312:[4534..4658).2" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699421" />
<Node Id="10312:[4534..4658).3" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699422" />
<Node Id="10312:[4534..4658).4" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699423" />
<Node Id="10312:[4534..4658).5" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699424" />
<Node Id="10312:[4534..4658).6" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699425" />
<Node Id="10312:[4534..4658).7" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699426" />
<Node Id="10312:[4534..4658).8" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699427" />
<Node Id="10312:[4534..4657).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 699428" />
<Node Id="10312:[5188..5207).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 699429" />
<Node Id="10312:[5209..5220).1" Label="param LookupSymbolsInSingleBinder(string name) 699430" />
<Node Id="10312:[5222..5231).1" Label="param LookupSymbolsInSingleBinder(int arity) 699431" />
<Node Id="10312:[5233..5272).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 699432" />
<Node Id="10312:[5274..5295).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 699433" />
<Node Id="10312:[5297..5318).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 699434" />
<Node Id="10312:[5320..5333).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 699435" />
<Node Id="10312:[5335..5381).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 699436" />
<Node Id="10312:[5124..5404).1" Label="param LookupSymbolsInSingleBinder(this) 699437" />
<Node Id="10312:[4534..4658).9" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 699438" />
<Node Id="10312:[4685..4699).1" Label="result.IsClear 699439" />
<Node Id="10354:[3684..3818).3" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 699440" />
<Node Id="10354:[3720..3803).17" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699441" />
<Node Id="10354:[3720..3803).18" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699442" />
<Node Id="10354:[3720..3803).19" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699443" />
<Node Id="10312:[4680..4787).1" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 699444" />
<Node Id="10312:[4826..5058).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 699445" />
<Node Id="10312:[4826..5058).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 699446" />
<Node Id="10382:[1340..1359).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 699447" />
<Node Id="10382:[1361..1372).1" Label="param LookupSymbolsInSingleBinder(string name) 699448" />
<Node Id="10382:[1374..1383).1" Label="param LookupSymbolsInSingleBinder(int arity) 699449" />
<Node Id="10382:[1385..1424).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 699450" />
<Node Id="10382:[1426..1447).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 699451" />
<Node Id="10382:[1449..1470).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 699452" />
<Node Id="10382:[1472..1485).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 699453" />
<Node Id="10382:[1487..1533).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 699454" />
<Node Id="10382:[1275..1939).1" Label="param LookupSymbolsInSingleBinder(this) 699455" />
<Node Id="10382:[1572..1586).1" Label="result.IsClear 699456" />
<Node Id="10354:[3684..3818).4" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 699457" />
<Node Id="10354:[3720..3803).25" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699458" />
<Node Id="10354:[3720..3803).26" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699459" />
<Node Id="10354:[3720..3803).27" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699460" />
<Node Id="10382:[1559..1588).1" Label="Debug.Assert(result.IsClear); 699461" />
<Node Id="10382:[1619..1629).1" Label="LookupMask 699462" />
<Node Id="10382:[913..1046).1" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 699463" />
<Node Id="10382:[949..1031).1" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 699464" />
<Node Id="10382:[1604..1691).1" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 699465" />
<Node Id="10382:[1604..1691).2" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 699466" />
<Node Id="10382:[1604..1691).3" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 699467" />
<Node Id="10382:[1737..1753).1" Label="TypeParameterMap 699468" />
<Node Id="10376:[1542..2071).1" Label="get
            {
                if (_lazyTypeParameterMap == null)
                {
                    var result = new MultiDictionary$string, TypeParameterSymbol$();
                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    }
                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);
                }
                return _lazyTypeParameterMap;
            } 699469" />
<Node Id="10376:[1578..2009).1" Label="if (_lazyTypeParameterMap == null)
                {
                    var result = new MultiDictionary$string, TypeParameterSymbol$();
                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    }
                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);
                } 699470" />
<Node Id="10376:[1578..2009).2" Label="if (_lazyTypeParameterMap == null)
                {
                    var result = new MultiDictionary$string, TypeParameterSymbol$();
                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    }
                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);
                } 699471" />
<Node Id="10376:[1653..1717).1" Label="var result = new MultiDictionary$string, TypeParameterSymbol$(); 699472" />
<Node Id="10376:[1739..1899).1" Label="foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    } 699473" />
<Node Id="10376:[1850..1876).1" Label="result.Add(tps.Name, tps); 699474" />
<Node Id="10376:[1850..1876).2" Label="result.Add(tps.Name, tps); 699475" />
<Node Id="10376:[1850..1876).3" Label="result.Add(tps.Name, tps); 699476" />
<Node Id="10376:[1921..1990).1" Label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 699477" />
<Node Id="10376:[1921..1990).2" Label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 699478" />
<Node Id="10376:[1921..1990).3" Label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 699479" />
<Node Id="10376:[2027..2056).1" Label="return _lazyTypeParameterMap; 699480" />
<Node Id="10382:[1707..1928).1" Label="foreach (var typeParameter in TypeParameterMap[name])
            {
                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));
            } 699481" />
<Node Id="10382:[1707..1928).2" Label="foreach (var typeParameter in TypeParameterMap[name])
            {
                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));
            } 699482" />
<Node Id="10382:[1793..1913).1" Label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 699483" />
<Node Id="10382:[1793..1913).2" Label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 699484" />
<Node Id="10382:[1793..1913).3" Label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 699485" />
<Node Id="10382:[1793..1913).6" Label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 699486" />
<Node Id="10382:[1793..1913).7" Label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 699487" />
<Node Id="10382:[1811..1911).1" Label="originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics) 699488" />
<Node Id="10312:[63424..63437).1" Label="param CheckViability(Symbol symbol) 699489" />
<Node Id="10312:[63439..63448).1" Label="param CheckViability(int arity) 699490" />
<Node Id="10312:[63450..63471).1" Label="param CheckViability(LookupOptions options) 699491" />
<Node Id="10312:[63473..63501).1" Label="param CheckViability(TypeSymbol accessThroughType) 699492" />
<Node Id="10312:[63503..63516).1" Label="param CheckViability(bool diagnose) 699493" />
<Node Id="10312:[63518..63564).1" Label="param CheckViability(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 699494" />
<Node Id="10312:[63566..63612).1" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 699495" />
<Node Id="10312:[63381..70761).1" Label="param CheckViability(this) 699496" />
<Node Id="10312:[63638..63668).1" Label="bool inaccessibleViaQualifier; 699497" />
<Node Id="10312:[63682..63706).1" Label="DiagnosticInfo diagInfo; 699498" />
<Node Id="10312:[63859..64015).1" Label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias
                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)
                : symbol; 699499" />
<Node Id="10312:[63881..63912).1" Label="symbol.Kind == SymbolKind.Alias 699500" />
<Node Id="10312:[64121..69285).1" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699501" />
<Node Id="10312:[64121..69285).2" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699502" />
<Node Id="10312:[64353..69285).1" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699503" />
<Node Id="10312:[64353..69285).2" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699504" />
<Node Id="10312:[64353..69285).3" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699505" />
<Node Id="10312:[64353..69285).4" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699506" />
<Node Id="10312:[64353..69285).5" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699507" />
<Node Id="10312:[64357..64415).1" Label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 699508" />
<Node Id="10312:[80978..80991).1" Label="param WrongArity(Symbol symbol) 699509" />
<Node Id="10312:[80993..81002).1" Label="param WrongArity(int arity) 699510" />
<Node Id="10312:[81004..81017).1" Label="param WrongArity(bool diagnose) 699511" />
<Node Id="10312:[81019..81040).1" Label="param WrongArity(LookupOptions options) 699512" />
<Node Id="10312:[81042..81069).1" Label="param WrongArity(out DiagnosticInfo diagInfo) 699513" />
<Node Id="10312:[81095..84034).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 699514" />
<Node Id="10312:[83750..83991).1" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 699515" />
<Node Id="10312:[83750..83991).2" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 699516" />
<Node Id="10312:[84050..84066).1" Label="diagInfo = null; 699517" />
<Node Id="10312:[84080..84093).1" Label="return false; 699518" />
<Node Id="10312:[64353..69285).6" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699519" />
<Node Id="10312:[64537..64543).1" Label="InCref 699520" />
<Node Id="10306:[3196..3249).1" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 699521" />
<Node Id="10306:[3202..3247).1" Label="return this.Flags.Includes(BinderFlags.Cref); 699522" />
<Node Id="10306:[3202..3247).2" Label="return this.Flags.Includes(BinderFlags.Cref); 699523" />
<Node Id="10306:[3209..3246).1" Label="this.Flags.Includes(BinderFlags.Cref) 699524" />
<Node Id="10298:[471..492).12" Label="param Includes(this BinderFlags self) 699525" />
<Node Id="10298:[494..511).12" Label="param Includes(BinderFlags other) 699526" />
<Node Id="10312:[64532..69285).1" Label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699527" />
<Node Id="10312:[65229..69285).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699528" />
<Node Id="10312:[65229..69285).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699529" />
<Node Id="10312:[65474..69285).1" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699530" />
<Node Id="10312:[65474..69285).2" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699531" />
<Node Id="10312:[65730..65736).1" Label="InCref 699532" />
<Node Id="10312:[65726..69285).1" Label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699533" />
<Node Id="10312:[66182..66188).1" Label="InCref 699534" />
<Node Id="10312:[66177..69285).1" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699535" />
<Node Id="10312:[66177..69285).2" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699536" />
<Node Id="10312:[66177..69285).3" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699537" />
<Node Id="10312:[66177..69285).4" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699538" />
<Node Id="10312:[66291..66342).1" Label="RefineAccessThroughType(options, accessThroughType) 699539" />
<Node Id="10312:[75301..75322).1" Label="param RefineAccessThroughType(LookupOptions options) 699540" />
<Node Id="10312:[75324..75352).1" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 699541" />
<Node Id="10312:[75735..75866).1" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 699542" />
<Node Id="10312:[75735..75866).2" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 699543" />
<Node Id="10312:[75742..75804).1" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 699544" />
<Node Id="10312:[75735..75866).4" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 699545" />
<Node Id="10312:[66177..69285).7" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699546" />
<Node Id="10312:[66177..69285).8" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699547" />
<Node Id="10312:[66177..69285).9" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699548" />
<Node Id="10312:[66215..66540).1" Label="this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved) 699549" />
<Node Id="10312:[77528..77541).1" Label="param IsAccessible(Symbol symbol) 699550" />
<Node Id="10312:[77543..77571).1" Label="param IsAccessible(TypeSymbol accessThroughType) 699551" />
<Node Id="10312:[77573..77604).1" Label="param IsAccessible(out bool failedThroughTypeCheck) 699552" />
<Node Id="10312:[77606..77652).1" Label="param IsAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 699553" />
<Node Id="10312:[77654..77700).1" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 699554" />
<Node Id="10312:[77501..78044).1" Label="param IsAccessible(this) 699555" />
<Node Id="10312:[77726..77892).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 699556" />
<Node Id="10312:[77726..77892).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 699557" />
<Node Id="10312:[77730..77782).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 699558" />
<Node Id="10298:[471..492).15" Label="param Includes(this BinderFlags self) 699559" />
<Node Id="10298:[494..511).15" Label="param Includes(BinderFlags other) 699560" />
<Node Id="10312:[77908..78033).1" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699561" />
<Node Id="10312:[77908..78033).2" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699562" />
<Node Id="10312:[77908..78033).3" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699563" />
<Node Id="10312:[77908..78033).4" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699564" />
<Node Id="10312:[77908..78033).5" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699565" />
<Node Id="10312:[77915..78032).1" Label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 699566" />
<Node Id="10312:[78387..78400).1" Label="param IsAccessibleHelper(Symbol symbol) 699567" />
<Node Id="10312:[78402..78430).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 699568" />
<Node Id="10312:[78432..78463).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 699569" />
<Node Id="10312:[78465..78511).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 699570" />
<Node Id="10312:[78513..78552).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 699571" />
<Node Id="10312:[78346..78783).1" Label="param IsAccessibleHelper(this) 699572" />
<Node Id="10312:[78642..78772).1" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699573" />
<Node Id="10312:[78642..78772).2" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699574" />
<Node Id="10312:[78642..78772).3" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699575" />
<Node Id="10312:[78642..78772).4" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699576" />
<Node Id="10312:[78642..78772).5" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699577" />
<Node Id="10312:[78649..78771).1" Label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 699578" />
<Node Id="10376:[1070..1083).1" Label="param IsAccessibleHelper(Symbol symbol) 699579" />
<Node Id="10376:[1085..1113).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 699580" />
<Node Id="10376:[1115..1146).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 699581" />
<Node Id="10376:[1148..1194).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 699582" />
<Node Id="10376:[1196..1235).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 699583" />
<Node Id="10376:[1028..1425).1" Label="param IsAccessibleHelper(this) 699584" />
<Node Id="10376:[1261..1414).1" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699585" />
<Node Id="10376:[1261..1414).2" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699586" />
<Node Id="10376:[1261..1414).3" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699587" />
<Node Id="10376:[1261..1414).4" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699588" />
<Node Id="10376:[1261..1414).5" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699589" />
<Node Id="10376:[1261..1414).6" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699590" />
<Node Id="10376:[1268..1413).1" Label="this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 699591" />
<Node Id="10286:[30070..30083).1" Label="param IsSymbolAccessibleConditional(Symbol symbol) 699592" />
<Node Id="10286:[30098..30120).1" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 699593" />
<Node Id="10286:[30135..30160).1" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 699594" />
<Node Id="10286:[30175..30206).1" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 699595" />
<Node Id="10286:[30221..30268).1" Label="param IsSymbolAccessibleConditional(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 699596" />
<Node Id="10286:[30283..30330).1" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 699597" />
<Node Id="10286:[30012..30691).1" Label="param IsSymbolAccessibleConditional(this) 699598" />
<Node Id="10286:[30356..30522).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 699599" />
<Node Id="10286:[30356..30522).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 699600" />
<Node Id="10286:[30360..30412).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 699601" />
<Node Id="10298:[471..492).16" Label="param Includes(this BinderFlags self) 699602" />
<Node Id="10298:[494..511).16" Label="param Includes(BinderFlags other) 699603" />
<Node Id="10286:[30538..30680).1" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699604" />
<Node Id="10286:[30538..30680).2" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699605" />
<Node Id="10286:[30538..30680).3" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699606" />
<Node Id="10286:[30538..30680).4" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699607" />
<Node Id="10286:[30538..30680).5" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699608" />
<Node Id="10286:[30538..30680).6" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 699609" />
<Node Id="10286:[30545..30679).1" Label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 699610" />
<Node Id="10060:[2108..2121).1" Label="param IsSymbolAccessible(Symbol symbol) 699611" />
<Node Id="10060:[2136..2158).1" Label="param IsSymbolAccessible(NamedTypeSymbol within) 699612" />
<Node Id="10060:[2173..2198).1" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 699613" />
<Node Id="10060:[2213..2244).1" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 699614" />
<Node Id="10060:[2259..2305).1" Label="param IsSymbolAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 699615" />
<Node Id="10060:[2320..2366).1" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 699616" />
<Node Id="10060:[2392..2555).1" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699617" />
<Node Id="10060:[2392..2555).2" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699618" />
<Node Id="10060:[2392..2555).3" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699619" />
<Node Id="10060:[2392..2555).4" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699620" />
<Node Id="10060:[2392..2555).5" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699621" />
<Node Id="10060:[2392..2555).6" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699622" />
<Node Id="10060:[2392..2555).7" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 699623" />
<Node Id="10060:[2399..2554).1" Label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 699624" />
<Node Id="10060:[5593..5606).1" Label="param IsSymbolAccessibleCore(Symbol symbol) 699625" />
<Node Id="10060:[5621..5634).1" Label="param IsSymbolAccessibleCore(Symbol within) 699626" />
<Node Id="10060:[5691..5716).1" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 699627" />
<Node Id="10060:[5731..5762).1" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 699628" />
<Node Id="10060:[5777..5806).1" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 699629" />
<Node Id="10060:[5821..5867).1" Label="param IsSymbolAccessibleCore(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 699630" />
<Node Id="10060:[5882..5928).1" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 699631" />
<Node Id="10060:[5954..5991).1" Label="Debug.Assert((object)symbol != null); 699632" />
<Node Id="10060:[5954..5991).2" Label="Debug.Assert((object)symbol != null); 699633" />
<Node Id="10060:[6005..6042).1" Label="Debug.Assert((object)within != null); 699634" />
<Node Id="10060:[6005..6042).2" Label="Debug.Assert((object)within != null); 699635" />
<Node Id="10060:[6056..6090).1" Label="Debug.Assert(within.IsDefinition); 699636" />
<Node Id="10060:[6104..6172).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 699637" />
<Node Id="10060:[6188..6219).1" Label="failedThroughTypeCheck = false; 699638" />
<Node Id="10060:[6235..9907).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.ArrayType:
                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.PointerType:
                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.NamedType:
                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Alias:
                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Discard:
                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.FunctionPointerType:
                    var funcPtr = (FunctionPointerTypeSymbol)symbol;
                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }

                    foreach (var param in funcPtr.Signature.Parameters)
                    {
                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                        {
                            return false;
                        }
                    }

                    return true;

                case SymbolKind.ErrorType:
                    // Always assume that error types are accessible.
                    return true;

                case SymbolKind.TypeParameter:
                case SymbolKind.Parameter:
                case SymbolKind.Local:
                case SymbolKind.Label:
                case SymbolKind.Namespace:
                case SymbolKind.DynamicType:
                case SymbolKind.Assembly:
                case SymbolKind.NetModule:
                case SymbolKind.RangeVariable:
                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:
                    // These types of symbols are always accessible (if visible).
                    return true;

                case SymbolKind.Method:
                case SymbolKind.Property:
                case SymbolKind.Event:
                case SymbolKind.Field:
                    if (!symbol.RequiresInstanceReceiver())
                    {
                        // static members aren't accessed 'through' an 'instance' of any type.  So we
                        // null out the 'through' instance here.  This ensures that we'll understand
                        // accessing protected statics properly.
                        throughTypeOpt = null;
                    }

                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);

                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 699639" />
<Node Id="10060:[8992..9004).1" Label="return true; 699640" />
<Node Id="10312:[66177..69285).11" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699641" />
<Node Id="10312:[67587..67593).1" Label="InCref 699642" />
<Node Id="10312:[67582..69285).1" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699643" />
<Node Id="10312:[67582..69285).2" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699644" />
<Node Id="10312:[67858..69285).1" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699645" />
<Node Id="10312:[67858..69285).2" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699646" />
<Node Id="10312:[68183..69285).1" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699647" />
<Node Id="10312:[68183..69285).2" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699648" />
<Node Id="10312:[68512..69285).1" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699649" />
<Node Id="10312:[68512..69285).2" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699650" />
<Node Id="10312:[68882..69285).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699651" />
<Node Id="10312:[68882..69285).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 699652" />
<Node Id="10312:[69237..69270).1" Label="return LookupResult.Good(symbol); 699653" />
<Node Id="10312:[69244..69269).1" Label="LookupResult.Good(symbol) 699654" />
<Node Id="10354:[5400..5413).1" Label="param Good(Symbol symbol) 699655" />
<Node Id="10354:[5439..5508).1" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 699656" />
<Node Id="10354:[5439..5508).2" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 699657" />
<Node Id="10354:[5439..5508).3" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 699658" />
<Node Id="10354:[5446..5507).1" Label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 699659" />
<Node Id="10368:[1076..1097).1" Label="param SingleLookupResult(LookupResultKind kind) 699660" />
<Node Id="10368:[1099..1112).1" Label="param SingleLookupResult(Symbol symbol) 699661" />
<Node Id="10368:[1114..1134).1" Label="param SingleLookupResult(DiagnosticInfo error) 699662" />
<Node Id="10368:[1048..1256).1" Label="param SingleLookupResult(this) 699663" />
<Node Id="10368:[1160..1169).1" Label="this.Kind 699664" />
<Node Id="10368:[1191..1202).1" Label="this.Symbol 699665" />
<Node Id="10368:[1226..1236).1" Label="this.Error 699666" />
<Node Id="10312:[69237..69270).2" Label="return LookupResult.Good(symbol); 699667" />
<Node Id="10382:[1793..1912).1" Label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)) 699668" />
<Node Id="10354:[10217..10242).1" Label="param MergeEqual(SingleLookupResult result) 699669" />
<Node Id="10354:[10192..10676).1" Label="param MergeEqual(this) 699670" />
<Node Id="10354:[10272..10276).1" Label="Kind 699671" />
<Node Id="10354:[4058..4122).3" Label="get
            {
                return _kind;
            } 699672" />
<Node Id="10354:[10268..10665).1" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 699673" />
<Node Id="10354:[10268..10665).2" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 699674" />
<Node Id="10354:[10404..10408).1" Label="Kind 699675" />
<Node Id="10354:[10386..10665).1" Label="if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 699676" />
<Node Id="10354:[10442..10463).1" Label="this.SetFrom(result); 699677" />
<Node Id="10354:[10442..10462).1" Label="this.SetFrom(result) 699678" />
<Node Id="10354:[8131..8155).1" Label="param SetFrom(SingleLookupResult other) 699679" />
<Node Id="10354:[8109..8324).1" Label="param SetFrom(this) 699680" />
<Node Id="10354:[8181..8186).1" Label="_kind 699681" />
<Node Id="10354:[8214..8234).1" Label="_symbolList.Clear(); 699682" />
<Node Id="10354:[8248..8278).1" Label="_symbolList.Add(other.Symbol); 699683" />
<Node Id="10354:[8248..8278).2" Label="_symbolList.Add(other.Symbol); 699684" />
<Node Id="10354:[8292..8298).1" Label="_error 699685" />
<Node Id="10354:[10442..10463).2" Label="this.SetFrom(result); 699686" />
<Node Id="10382:[1707..1928).6" Label="foreach (var typeParameter in TypeParameterMap[name])
            {
                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));
            } 699687" />
<Node Id="10354:[3720..3803).33" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 699688" />
<Node Id="10312:[4680..4787).3" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 699689" />
<Node Id="10312:[4749..4764).1" Label="binder = scope; 699690" />
<Node Id="10312:[5087..5101).1" Label="return binder; 699691" />
<Node Id="10312:[1585..1724).9" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 699692" />
<Node Id="10319:[43504..43546).1" Label="diagnostics.Add(node, useSiteDiagnostics); 699693" />
<Node Id="10319:[43504..43546).2" Label="diagnostics.Add(node, useSiteDiagnostics); 699694" />
<Node Id="10319:[43504..43546).3" Label="diagnostics.Add(node, useSiteDiagnostics); 699695" />
<Node Id="10319:[43504..43546).4" Label="diagnostics.Add(node, useSiteDiagnostics); 699696" />
<Node Id="10319:[43562..43590).1" Label="Symbol bindingResult = null; 699697" />
<Node Id="10319:[43799..44676).1" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 699698" />
<Node Id="10319:[43799..44676).2" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 699699" />
<Node Id="10319:[43799..44676).3" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 699700" />
<Node Id="10319:[43853..43873).1" Label="IsViableType(result) 699701" />
<Node Id="10319:[41088..41107).1" Label="param IsViableType(LookupResult result) 699702" />
<Node Id="10319:[41138..41158).1" Label="result.IsMultiViable 699703" />
<Node Id="10354:[4919..5009).4" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 699704" />
<Node Id="10354:[4962..4966).4" Label="Kind 699705" />
<Node Id="10354:[4058..4122).6" Label="get
            {
                return _kind;
            } 699706" />
<Node Id="10354:[4094..4107).6" Label="return _kind; 699707" />
<Node Id="10319:[41133..41220).1" Label="if (!result.IsMultiViable)
            {
                return false;
            } 699708" />
<Node Id="10319:[41254..41268).1" Label="result.Symbols 699709" />
<Node Id="10354:[4525..4595).1" Label="get
            {
                return _symbolList;
            } 699710" />
<Node Id="10354:[4561..4580).1" Label="return _symbolList; 699711" />
<Node Id="10319:[41236..41680).1" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 699712" />
<Node Id="10319:[41302..41665).1" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 699713" />
<Node Id="10319:[41634..41646).1" Label="return true; 699714" />
<Node Id="10319:[44692..45392).1" Label="if (bindingResult is null)
            {
                bool wasError;

                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);
                if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
            } 699715" />
<Node Id="10319:[44751..44765).1" Label="bool wasError; 699716" />
<Node Id="10319:[44785..44930).1" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699717" />
<Node Id="10319:[44785..44930).2" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699718" />
<Node Id="10319:[44785..44930).3" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699719" />
<Node Id="10319:[44785..44930).5" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699720" />
<Node Id="10319:[44785..44930).6" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699721" />
<Node Id="10319:[44785..44930).7" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699722" />
<Node Id="10319:[44785..44930).8" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699723" />
<Node Id="10319:[44785..44930).9" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699724" />
<Node Id="10319:[44785..44930).10" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699725" />
<Node Id="10319:[44801..44929).1" Label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 699726" />
<Node Id="10319:[84167..84186).1" Label="param ResultSymbol(LookupResult result) 699727" />
<Node Id="10319:[84201..84218).1" Label="param ResultSymbol(string simpleName) 699728" />
<Node Id="10319:[84233..84242).1" Label="param ResultSymbol(int arity) 699729" />
<Node Id="10319:[84257..84273).1" Label="param ResultSymbol(SyntaxNode where) 699730" />
<Node Id="10319:[84288..84313).1" Label="param ResultSymbol(DiagnosticBag diagnostics) 699731" />
<Node Id="10319:[84328..84359).1" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 699732" />
<Node Id="10319:[84374..84391).1" Label="param ResultSymbol(out bool wasError) 699733" />
<Node Id="10319:[84406..84447).1" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 699734" />
<Node Id="10319:[84462..84508).1" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 699735" />
<Node Id="10319:[84124..109887).1" Label="param ResultSymbol(this) 699736" />
<Node Id="10319:[84534..84675).1" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699737" />
<Node Id="10319:[84534..84675).2" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699738" />
<Node Id="10319:[84534..84675).3" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699739" />
<Node Id="10319:[84534..84675).4" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699740" />
<Node Id="10319:[84534..84675).5" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699741" />
<Node Id="10319:[84534..84675).6" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699742" />
<Node Id="10319:[84534..84675).7" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699743" />
<Node Id="10319:[84534..84675).8" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699744" />
<Node Id="10319:[84534..84675).9" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 699745" />
<Node Id="10319:[84550..84674).1" Label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 699746" />
<Node Id="10319:[84907..109876).1" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 699747" />
<Node Id="10319:[84907..109876).2" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 699748" />
<Node Id="10319:[84907..109876).3" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 699749" />
<Node Id="10319:[84907..109876).4" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 699750" />
<Node Id="10319:[84907..109876).5" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 699751" />
<Node Id="10319:[84907..109876).6" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 699752" />
<Node Id="10319:[84907..109876).7" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 699753" />
<Node Id="10319:[84907..109876).8" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 699754" />
<Node Id="10319:[84907..109876).9" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 699755" />
<Node Id="10319:[84907..109876).10" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 699756" />
<Node Id="10319:[85320..85348).1" Label="Debug.Assert(where != null); 699757" />
<Node Id="10319:[85320..85348).2" Label="Debug.Assert(where != null); 699758" />
<Node Id="10319:[85366..85400).1" Label="Debug.Assert(diagnostics != null); 699759" />
<Node Id="10319:[85366..85400).2" Label="Debug.Assert(diagnostics != null); 699760" />
<Node Id="10319:[85434..85448).1" Label="result.Symbols 699761" />
<Node Id="10354:[4525..4595).2" Label="get
            {
                return _symbolList;
            } 699762" />
<Node Id="10354:[4561..4580).2" Label="return _symbolList; 699763" />
<Node Id="10319:[85420..85449).1" Label="var symbols = result.Symbols; 699764" />
<Node Id="10319:[85467..85484).1" Label="wasError = false; 699765" />
<Node Id="10319:[85508..85528).1" Label="result.IsMultiViable 699766" />
<Node Id="10354:[4919..5009).5" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 699767" />
<Node Id="10354:[4962..4966).5" Label="Kind 699768" />
<Node Id="10354:[4058..4122).7" Label="get
            {
                return _kind;
            } 699769" />
<Node Id="10354:[4094..4107).7" Label="return _kind; 699770" />
<Node Id="10319:[85504..106825).1" Label="if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                } 699771" />
<Node Id="10319:[85570..106806).1" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 699772" />
<Node Id="10319:[85570..106806).2" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 699773" />
<Node Id="10319:[103953..103983).1" Label="var singleResult = symbols[0]; 699774" />
<Node Id="10319:[104078..104122).1" Label="var singleType = singleResult as TypeSymbol; 699775" />
<Node Id="10319:[104148..106735).1" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 699776" />
<Node Id="10319:[104148..106735).2" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 699777" />
<Node Id="10319:[104148..106735).3" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 699778" />
<Node Id="10319:[104874..105336).1" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 699779" />
<Node Id="10319:[105368..106708).1" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 699780" />
<Node Id="10319:[105465..105535).1" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 699781" />
<Node Id="10319:[105465..105535).2" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 699782" />
<Node Id="10319:[105465..105535).3" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 699783" />
<Node Id="10319:[105476..105534).1" Label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 699784" />
<Node Id="10319:[76345..76358).1" Label="param ReportUseSiteDiagnostics(Symbol symbol) 699785" />
<Node Id="10319:[76360..76385).1" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 699786" />
<Node Id="10319:[76387..76402).1" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 699787" />
<Node Id="10319:[76428..76480).1" Label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 699788" />
<Node Id="10319:[76494..76582).1" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 699789" />
<Node Id="10319:[76494..76582).2" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 699790" />
<Node Id="10319:[106763..106783).1" Label="return singleResult; 699791" />
<Node Id="10319:[84691..84861).1" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 699792" />
<Node Id="10319:[84877..84891).1" Label="return symbol; 699793" />
<Node Id="10319:[44948..45377).1" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 699794" />
<Node Id="10319:[45408..45421).1" Label="result.Free() 699795" />
<Node Id="10354:[11383..11549).1" Label="param Free(this) 699796" />
<Node Id="10354:[11428..11440).1" Label="this.Clear() 699797" />
<Node Id="10354:[3841..3991).1" Label="param Clear(this) 699798" />
<Node Id="10354:[3887..3892).1" Label="_kind 699799" />
<Node Id="10354:[3932..3952).1" Label="_symbolList.Clear(); 699800" />
<Node Id="10354:[3966..3980).1" Label="_error = null; 699801" />
<Node Id="10354:[3966..3972).1" Label="_error 699802" />
<Node Id="10354:[11428..11441).1" Label="this.Clear(); 699803" />
<Node Id="10354:[11455..11538).1" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 699804" />
<Node Id="10354:[11455..11538).2" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 699805" />
<Node Id="10354:[11506..11523).1" Label="_pool.Free(this); 699806" />
<Node Id="10354:[11506..11523).2" Label="_pool.Free(this); 699807" />
<Node Id="10319:[45408..45422).1" Label="result.Free(); 699808" />
<Node Id="10319:[45436..45568).1" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 699809" />
<Node Id="10319:[45505..45551).1" Label="AreNullableAnnotationsEnabled(node.Identifier) 699810" />
<Node Id="10286:[10010..10027).3" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 699811" />
<Node Id="10286:[9966..10197).3" Label="param AreNullableAnnotationsEnabled(this) 699812" />
<Node Id="10319:[45436..45568).4" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 699813" />
<Node Id="10319:[45443..45567).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 699814" />
<Node Id="10287:[2306..2328).1" Label="param CreateUnannotated(bool isNullableEnabled) 699815" />
<Node Id="10287:[2330..2343).1" Label="param CreateUnannotated(Symbol symbol) 699816" />
<Node Id="10287:[2377..2471).1" Label="if (symbol is null)
                {
                    return default;
                } 699817" />
<Node Id="10287:[2489..2521).1" Label="var type = symbol as TypeSymbol; 699818" />
<Node Id="10287:[2539..2781).1" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 699819" />
<Node Id="10287:[2546..2558).1" Label="type is null 699820" />
<Node Id="10287:[2539..2781).2" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 699821" />
<Node Id="10287:[2680..2780).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 699822" />
<Node Id="10287:[718..757).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 699823" />
<Node Id="10287:[666..1076).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 699824" />
<Node Id="10287:[791..833).1" Label="Debug.Assert(typeWithAnnotations.HasType); 699825" />
<Node Id="10287:[851..871).1" Label="_typeWithAnnotations 699826" />
<Node Id="10287:[912..927).1" Label="_symbol = null; 699827" />
<Node Id="10287:[912..919).1" Label="_symbol 699828" />
<Node Id="10287:[945..972).1" Label="_isNullableEnabled = false; 699829" />
<Node Id="10287:[945..963).1" Label="_isNullableEnabled 699830" />
<Node Id="10319:[15383..15396).1" Label="symbol.IsType 699831" />
<Node Id="10287:[1609..1643).1" Label="=$ !_typeWithAnnotations.IsDefault 699832" />
<Node Id="10287:[1612..1643).1" Label="!_typeWithAnnotations.IsDefault 699833" />
<Node Id="10319:[15379..15933).1" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 699834" />
<Node Id="10319:[15548..15561).1" Label="symbol.IsType 699835" />
<Node Id="10319:[15544..15884).1" Label="if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                } 699836" />
<Node Id="10319:[15783..15809).1" Label="symbol.TypeWithAnnotations 699837" />
<Node Id="10287:[1474..1497).1" Label="=$ _typeWithAnnotations 699838" />
<Node Id="10287:[1477..1497).1" Label="_typeWithAnnotations 699839" />
<Node Id="10319:[15783..15865).1" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 699840" />
<Node Id="10319:[15783..15865).2" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 699841" />
<Node Id="10319:[15783..15865).3" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 699842" />
<Node Id="10319:[15783..15865).4" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 699843" />
<Node Id="10319:[15783..15865).6" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 699844" />
<Node Id="10286:[21504..21529).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 699845" />
<Node Id="10286:[21531..21544).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 699846" />
<Node Id="10286:[21546..21561).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 699847" />
<Node Id="10286:[21563..21583).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 699848" />
<Node Id="10286:[21462..21711).1" Label="param ReportDiagnosticsIfObsolete(this) 699849" />
<Node Id="10286:[21609..21700).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 699850" />
<Node Id="10286:[21609..21700).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 699851" />
<Node Id="10286:[21609..21700).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 699852" />
<Node Id="10286:[21609..21700).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 699853" />
<Node Id="10286:[21609..21699).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 699854" />
<Node Id="10286:[22044..22069).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 699855" />
<Node Id="10286:[22071..22084).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 699856" />
<Node Id="10286:[22086..22108).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 699857" />
<Node Id="10286:[22110..22130).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 699858" />
<Node Id="10286:[22002..22611).1" Label="param ReportDiagnosticsIfObsolete(this) 699859" />
<Node Id="10286:[22156..22600).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Event:
                case SymbolKind.Property:
                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);
                    break;
            } 699860" />
<Node Id="10286:[21609..21700).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 699861" />
<Node Id="10319:[15904..15918).1" Label="return symbol; 699862" />
<Node Id="10319:[13962..14050).1" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 699863" />
<Node Id="10319:[13962..14050).2" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 699864" />
<Node Id="10319:[13962..14050).3" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 699865" />
<Node Id="10319:[13962..14050).4" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 699866" />
<Node Id="10319:[13969..14029).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 699867" />
<Node Id="10319:[51762..51815).1" Label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 699868" />
<Node Id="10319:[51817..51842).1" Label="param UnwrapAlias(DiagnosticBag diagnostics) 699869" />
<Node Id="10319:[51844..51861).1" Label="param UnwrapAlias(SyntaxNode syntax) 699870" />
<Node Id="10319:[51863..51909).1" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 699871" />
<Node Id="10319:[51698..52285).1" Label="param UnwrapAlias(this) 699872" />
<Node Id="10319:[51939..51953).1" Label="symbol.IsAlias 699873" />
<Node Id="10287:[1680..1716).1" Label="=$ _symbol?.Kind == SymbolKind.Alias 699874" />
<Node Id="10287:[1683..1690).1" Label="_symbol 699875" />
<Node Id="10287:[1683..1716).1" Label="_symbol?.Kind == SymbolKind.Alias 699876" />
<Node Id="10319:[51935..52244).1" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 699877" />
<Node Id="10319:[52260..52274).1" Label="return symbol; 699878" />
<Node Id="10319:[13969..14049).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 699879" />
<Node Id="10287:[1474..1497).2" Label="=$ _typeWithAnnotations 699880" />
<Node Id="10287:[1477..1497).2" Label="_typeWithAnnotations 699881" />
<Node Id="25002:[4395..4432).49" Label="var diagnostics = c.GetDiagnostics(); 699882" />
<Node Id="10327:[1273..1314).1" Label="get { return (object)_fieldOpt == null; } 699883" />
<Node Id="10327:[1279..1312).1" Label="return (object)_fieldOpt == null; 699884" />
<Node Id="10327:[1279..1312).2" Label="return (object)_fieldOpt == null; 699885" />
<Node Id="25002:[4446..4475).1" Label="diagnostics.Verify(expected); 699886" />
<Node Id="25002:[4446..4475).2" Label="diagnostics.Verify(expected); 699887" />
<Node Id="25002:[4446..4474).1" Label="diagnostics.Verify(expected) 699888" />
<Node Id="25002:[2296..2334).1" Label="param Verify(this ImmutableArray$Diagnostic$ actual) 699889" />
<Node Id="25002:[2336..2375).1" Label="param Verify(params DiagnosticDescription[] expected) 699890" />
<Node Id="25002:[2401..2451).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 699891" />
<Node Id="25002:[2401..2451).2" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 699892" />
<Node Id="25002:[2401..2450).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected) 699893" />
<Node Id="25002:[1554..1589).1" Label="param Verify(this IEnumerable$Diagnostic$ actual) 699894" />
<Node Id="25002:[1591..1630).1" Label="param Verify(params DiagnosticDescription[] expected) 699895" />
<Node Id="25002:[1656..1703).1" Label="Verify(actual, expected, errorCodeOnly: false); 699896" />
<Node Id="25002:[1656..1703).2" Label="Verify(actual, expected, errorCodeOnly: false); 699897" />
<Node Id="25002:[1656..1703).3" Label="Verify(actual, expected, errorCodeOnly: false); 699898" />
<Node Id="25002:[1656..1702).1" Label="Verify(actual, expected, errorCodeOnly: false) 699899" />
<Node Id="25002:[2501..2531).1" Label="param Verify(IEnumerable$Diagnostic$ actual) 699900" />
<Node Id="25002:[2533..2565).1" Label="param Verify(DiagnosticDescription[] expected) 699901" />
<Node Id="25002:[2567..2585).1" Label="param Verify(bool errorCodeOnly) 699902" />
<Node Id="25002:[2611..2759).1" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 699903" />
<Node Id="25002:[2611..2759).2" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 699904" />
<Node Id="25002:[2775..2867).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 699905" />
<Node Id="25002:[2775..2867).2" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 699906" />
<Node Id="25002:[2775..2867).4" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 699907" />
<Node Id="25002:[2775..2867).6" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 699908" />
<Node Id="25003:[10448..10470).1" Label="=$ _defaultSeverityOpt 699909" />
<Node Id="25003:[10451..10470).1" Label="_defaultSeverityOpt 699910" />
<Node Id="25002:[2881..2977).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 699911" />
<Node Id="25002:[2881..2977).2" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 699912" />
<Node Id="25002:[2881..2977).4" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 699913" />
<Node Id="25002:[2881..2977).6" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 699914" />
<Node Id="25003:[10526..10550).1" Label="=$ _effectiveSeverityOpt 699915" />
<Node Id="25003:[10529..10550).1" Label="_effectiveSeverityOpt 699916" />
<Node Id="25002:[2991..3166).1" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 699917" />
<Node Id="25002:[2991..3166).2" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 699918" />
<Node Id="25002:[2991..3166).4" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 699919" />
<Node Id="25002:[2991..3166).8" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 699920" />
<Node Id="25003:[4933..4945).1" Label="param DiagnosticDescription(Diagnostic d) 699921" />
<Node Id="25003:[4947..4965).1" Label="param DiagnosticDescription(bool errorCodeOnly) 699922" />
<Node Id="25003:[4967..5002).1" Label="param DiagnosticDescription(bool includeDefaultSeverity = false) 699923" />
<Node Id="25003:[5004..5041).1" Label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 699924" />
<Node Id="25003:[4904..7352).1" Label="param DiagnosticDescription(this) 699925" />
<Node Id="25003:[912..917).7" Label="_code 699926" />
<Node Id="25003:[950..967).7" Label="_isWarningAsError 699927" />
<Node Id="25003:[1000..1013).7" Label="_isSuppressed 699928" />
<Node Id="25003:[1048..1062).7" Label="_squiggledText 699929" />
<Node Id="25003:[1099..1109).7" Label="_arguments 699930" />
<Node Id="25003:[1151..1165).19" Label="_startPosition 699931" />
<Node Id="25003:[1276..1303).7" Label="_argumentOrderDoesNotMatter 699932" />
<Node Id="25003:[1336..1350).7" Label="_errorCodeType 699933" />
<Node Id="25003:[1460..1479).7" Label="_defaultSeverityOpt 699934" />
<Node Id="25003:[1527..1548).7" Label="_effectiveSeverityOpt 699935" />
<Node Id="25003:[1673..1689).7" Label="_syntaxPredicate 699936" />
<Node Id="25003:[5067..5072).1" Label="_code 699937" />
<Node Id="25003:[5096..5113).1" Label="_isWarningAsError 699938" />
<Node Id="25003:[5149..5162).1" Label="_isSuppressed 699939" />
<Node Id="25003:[5194..5203).1" Label="_location 699940" />
<Node Id="25003:[5253..5275).1" Label="includeDefaultSeverity 699941" />
<Node Id="25003:[5231..5324).1" Label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 699942" />
<Node Id="25003:[5231..5250).1" Label="_defaultSeverityOpt 699943" />
<Node Id="25003:[5362..5386).1" Label="includeEffectiveSeverity 699944" />
<Node Id="25003:[5338..5428).1" Label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 699945" />
<Node Id="25003:[5338..5359).1" Label="_effectiveSeverityOpt 699946" />
<Node Id="25003:[5444..5476).1" Label="DiagnosticWithInfo dinfo = null; 699947" />
<Node Id="25003:[5490..6130).1" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 699948" />
<Node Id="25003:[5490..6130).2" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 699949" />
<Node Id="25003:[5490..6130).3" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 699950" />
<Node Id="25003:[5490..6130).4" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 699951" />
<Node Id="25003:[5744..5776).1" Label="dinfo = d as DiagnosticWithInfo; 699952" />
<Node Id="25003:[5794..6115).1" Label="if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                } 699953" />
<Node Id="25003:[5794..6115).2" Label="if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                } 699954" />
<Node Id="25003:[6001..6015).1" Label="_errorCodeType 699955" />
<Node Id="25003:[6081..6086).1" Label="_code 699956" />
<Node Id="25003:[6146..6175).1" Label="_ignoreArgumentsWhenComparing 699957" />
<Node Id="25003:[6208..7260).1" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_location.IsInSource)
                {
                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API
                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);
                }

                if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                }

                if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                }
            } 699958" />
<Node Id="25003:[6276..6580).1" Label="if (_location.IsInSource)
                {
                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API
                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);
                } 699959" />
<Node Id="25003:[6482..6561).1" Label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 699960" />
<Node Id="25003:[6482..6496).1" Label="_squiggledText 699961" />
<Node Id="25003:[6600..7098).1" Label="if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                } 699962" />
<Node Id="25003:[6600..7098).2" Label="if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                } 699963" />
<Node Id="25003:[6659..6669).1" Label="_arguments 699964" />
<Node Id="25003:[7118..7245).1" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 699965" />
<Node Id="25003:[7118..7245).2" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 699966" />
<Node Id="25003:[7118..7245).4" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 699967" />
<Node Id="25003:[7276..7341).1" Label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 699968" />
<Node Id="25003:[7276..7290).1" Label="_startPosition 699969" />
<Node Id="25002:[2991..3166).9" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 699970" />
<Node Id="25003:[5067..5072).2" Label="_code 699971" />
<Node Id="25003:[7118..7245).8" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 699972" />
<Node Id="25002:[3341..3730).1" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 699973" />
<Node Id="25002:[3341..3730).2" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 699974" />
<Node Id="25002:[3401..3434).1" Label="int index = unmatched.IndexOf(d); 699975" />
<Node Id="25002:[3401..3434).2" Label="int index = unmatched.IndexOf(d); 699976" />
<Node Id="25003:[10591..10601).1" Label="param Equals(object obj) 699977" />
<Node Id="25003:[10563..13732).1" Label="param Equals(this) 699978" />
<Node Id="25003:[10627..10664).1" Label="var d = obj as DiagnosticDescription; 699979" />
<Node Id="25003:[10680..10725).1" Label="if (d == null)
                return false; 699980" />
<Node Id="25003:[10680..10725).2" Label="if (d == null)
                return false; 699981" />
<Node Id="25003:[10741..10799).1" Label="if (!_code.Equals(d._code))
                return false; 699982" />
<Node Id="25003:[10741..10799).2" Label="if (!_code.Equals(d._code))
                return false; 699983" />
<Node Id="25003:[10815..10891).1" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 699984" />
<Node Id="25003:[10907..10975).1" Label="if (_isSuppressed != d._isSuppressed)
                return false; 699985" />
<Node Id="25003:[10991..11148).1" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 699986" />
<Node Id="25003:[11059..11133).1" Label="if (_squiggledText != d._squiggledText)
                    return false; 699987" />
<Node Id="25003:[11164..11464).1" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 699988" />
<Node Id="25003:[11164..11464).2" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 699989" />
<Node Id="25003:[11224..11449).1" Label="if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                } 699990" />
<Node Id="25003:[11480..11903).1" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 699991" />
<Node Id="25003:[11480..11903).2" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 699992" />
<Node Id="25003:[11917..12344).1" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 699993" />
<Node Id="25003:[11917..12344).2" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 699994" />
<Node Id="25003:[12436..12535).1" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 699995" />
<Node Id="25003:[12651..13498).1" Label="if (_arguments == null)
            {
                if (d._arguments != null)
                    return false;
            }
            else // _arguments != null
            {
                if (d._arguments == null)
                    return false;

                // we'll compare the arguments as strings
                var args1 = GetArgumentsAsStrings();
                var args2 = d.GetArgumentsAsStrings();
                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                }
            } 699996" />
<Node Id="25003:[12651..13498).2" Label="if (_arguments == null)
            {
                if (d._arguments != null)
                    return false;
            }
            else // _arguments != null
            {
                if (d._arguments == null)
                    return false;

                // we'll compare the arguments as strings
                var args1 = GetArgumentsAsStrings();
                var args2 = d.GetArgumentsAsStrings();
                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                }
            } 699997" />
<Node Id="25003:[12855..12915).1" Label="if (d._arguments == null)
                    return false; 699998" />
<Node Id="25003:[13006..13029).1" Label="GetArgumentsAsStrings() 699999" />
<Node Id="25003:[1971..2761).1" Label="param GetArgumentsAsStrings(this) 700000" />
<Node Id="25003:[2047..2709).1" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 700001" />
<Node Id="25003:[2047..2709).2" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 700002" />
<Node Id="25003:[2321..2694).1" Label="_argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                }); 700003" />
<Node Id="25003:[2321..2694).2" Label="_argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                }); 700004" />
<Node Id="25003:[2321..2340).1" Label="_argumentsAsStrings 700005" />
<Node Id="25003:[2723..2750).1" Label="return _argumentsAsStrings; 700006" />
<Node Id="25003:[12994..13030).1" Label="var args1 = GetArgumentsAsStrings(); 700007" />
<Node Id="25003:[13060..13085).1" Label="d.GetArgumentsAsStrings() 700008" />
<Node Id="25003:[1971..2761).2" Label="param GetArgumentsAsStrings(this) 700009" />
<Node Id="25003:[2047..2709).4" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 700010" />
<Node Id="25003:[2047..2709).5" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 700011" />
<Node Id="25003:[2723..2750).2" Label="return _argumentsAsStrings; 700012" />
<Node Id="25003:[13048..13086).1" Label="var args2 = d.GetArgumentsAsStrings(); 700013" />
<Node Id="25003:[13104..13483).1" Label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                } 700014" />
<Node Id="25003:[13393..13464).1" Label="if (!args1.SequenceEqual(args2))
                        return false; 700015" />
<Node Id="25003:[13393..13464).2" Label="if (!args1.SequenceEqual(args2))
                        return false; 700016" />
<Node Id="25003:[13393..13464).3" Label="if (!args1.SequenceEqual(args2))
                        return false; 700017" />
<Node Id="25003:[13514..13693).1" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 700018" />
<Node Id="25003:[13709..13721).1" Label="return true; 700019" />
<Node Id="25002:[3401..3434).5" Label="int index = unmatched.IndexOf(d); 700020" />
<Node Id="25002:[3452..3715).1" Label="if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                } 700021" />
<Node Id="25002:[3452..3715).2" Label="if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                } 700022" />
<Node Id="25002:[3508..3534).1" Label="unmatched.RemoveAt(index); 700023" />
<Node Id="25003:[10680..10725).4" Label="if (d == null)
                return false; 700024" />
<Node Id="25003:[10815..10891).3" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 700025" />
<Node Id="25003:[10907..10975).3" Label="if (_isSuppressed != d._isSuppressed)
                return false; 700026" />
<Node Id="25003:[10991..11148).2" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 700027" />
<Node Id="25003:[11059..11133).3" Label="if (_squiggledText != d._squiggledText)
                    return false; 700028" />
<Node Id="25003:[11164..11464).4" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 700029" />
<Node Id="25003:[11224..11449).4" Label="if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                } 700030" />
<Node Id="25003:[11480..11903).4" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 700031" />
<Node Id="25003:[11917..12344).4" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 700032" />
<Node Id="25003:[12436..12535).3" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 700033" />
<Node Id="25003:[12855..12915).4" Label="if (d._arguments == null)
                    return false; 700034" />
<Node Id="25003:[13514..13693).5" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 700035" />
<Node Id="25002:[3840..3992).1" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 700036" />
<Node Id="25002:[3840..3992).2" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 700037" />
<Node Id="25002:[4102..4181).1" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 700038" />
<Node Id="25002:[4102..4181).3" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 700039" />
<Node Id="25002:[4102..4181).4" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 700040" />
<Node Id="25002:[4126..4179).1" Label="DiagnosticDescription.GetAssertText(expected, actual) 700041" />
<Node Id="25003:[17577..17609).1" Label="param GetAssertText(DiagnosticDescription[] expected) 700042" />
<Node Id="25003:[17611..17641).1" Label="param GetAssertText(IEnumerable$Diagnostic$ actual) 700043" />
<Node Id="25003:[17667..17688).1" Label="const int CSharp = 1; 700044" />
<Node Id="25003:[17702..17728).1" Label="const int VisualBasic = 2; 700045" />
<Node Id="25003:[17742..17827).1" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 700046" />
<Node Id="25003:[17742..17827).2" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 700047" />
<Node Id="25003:[17742..17827).4" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 700048" />
<Node Id="25003:[17757..17803).1" Label="actual.Any() && actual.First() is CSDiagnostic 700049" />
<Node Id="25003:[17742..17827).6" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 700050" />
<Node Id="25003:[17841..17904).1" Label="var includeDiagnosticMessagesAsComments = (language == CSharp); 700051" />
<Node Id="25003:[17918..17965).1" Label="int indentDepth = (language == CSharp) ? 4 : 1; 700052" />
<Node Id="25003:[17936..17956).1" Label="(language == CSharp) 700053" />
<Node Id="25003:[17979..18071).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 700054" />
<Node Id="25003:[17979..18071).2" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 700055" />
<Node Id="25003:[17979..18071).4" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 700056" />
<Node Id="25003:[17979..18071).6" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 700057" />
<Node Id="25003:[18085..18181).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 700058" />
<Node Id="25003:[18085..18181).2" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 700059" />
<Node Id="25003:[18085..18181).4" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 700060" />
<Node Id="25003:[18085..18181).6" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 700061" />
<Node Id="25003:[18197..18490).1" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 700062" />
<Node Id="25003:[18201..18226).1" Label="IsSortedOrEmpty(expected) 700063" />
<Node Id="25003:[21605..21640).1" Label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 700064" />
<Node Id="25003:[23096..23122).1" Label="new LinePositionComparer() 700065" />
<Node Id="25003:[22962..23812).1" Label="param LinePositionComparer(this) 700066" />
<Node Id="25003:[23085..23122).1" Label="Instance = new LinePositionComparer() 700067" />
<Node Id="25003:[21666..21711).1" Label="var comparer = LinePositionComparer.Instance; 700068" />
<Node Id="25003:[21725..21759).1" Label="DiagnosticDescription last = null; 700069" />
<Node Id="25003:[21773..22187).1" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 700070" />
<Node Id="25003:[21773..22187).2" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 700071" />
<Node Id="25003:[21845..21956).1" Label="if (diagnostic._startPosition == null)
                {
                    return false;
                } 700072" />
<Node Id="25003:[21924..21937).1" Label="return false; 700073" />
<Node Id="25003:[18506..18543).1" Label="var assertText = new StringBuilder(); 700074" />
<Node Id="25003:[18557..18581).1" Label="assertText.AppendLine(); 700075" />
<Node Id="25003:[18658..18664).1" Label="int i; 700076" />
<Node Id="25003:[18678..18713).1" Label="assertText.AppendLine('Expected:'); 700077" />
<Node Id="25003:[18678..18713).3" Label="assertText.AppendLine('Expected:'); 700078" />
<Node Id="25003:[18727..18781).1" Label="var expectedText = ArrayBuilder$string$.GetInstance(); 700079" />
<Node Id="25003:[18795..18929).1" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 700080" />
<Node Id="25003:[18795..18929).2" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 700081" />
<Node Id="25003:[18855..18914).1" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 700082" />
<Node Id="25003:[18855..18914).2" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 700083" />
<Node Id="25003:[18872..18912).1" Label="GetDiagnosticDescription(d, indentDepth) 700084" />
<Node Id="25003:[22283..22306).1" Label="param GetDiagnosticDescription(DiagnosticDescription d) 700085" />
<Node Id="25003:[22308..22323).1" Label="param GetDiagnosticDescription(int indentDepth) 700086" />
<Node Id="25003:[22349..22404).1" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700087" />
<Node Id="25003:[22349..22404).4" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700088" />
<Node Id="25003:[22391..22403).1" Label="d.ToString() 700089" />
<Node Id="25003:[14779..17530).1" Label="param ToString(this) 700090" />
<Node Id="25003:[14837..14866).1" Label="var sb = new StringBuilder(); 700091" />
<Node Id="25003:[14882..14907).1" Label="sb.Append('Diagnostic('); 700092" />
<Node Id="25003:[14882..14907).3" Label="sb.Append('Diagnostic('); 700093" />
<Node Id="25003:[14921..15244).1" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 700094" />
<Node Id="25003:[14921..15244).2" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 700095" />
<Node Id="25003:[15100..15131).1" Label="sb.Append(_errorCodeType.Name); 700096" />
<Node Id="25003:[15100..15131).2" Label="sb.Append(_errorCodeType.Name); 700097" />
<Node Id="25003:[15149..15164).1" Label="sb.Append('.'); 700098" />
<Node Id="25003:[15149..15164).3" Label="sb.Append('.'); 700099" />
<Node Id="25003:[15182..15229).1" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700100" />
<Node Id="25003:[15182..15229).5" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700101" />
<Node Id="25003:[15260..15767).1" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 700102" />
<Node Id="25003:[15260..15767).2" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 700103" />
<Node Id="25003:[15320..15717).1" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 700104" />
<Node Id="25003:[15632..15650).1" Label="sb.Append(', \''); 700105" />
<Node Id="25003:[15632..15650).3" Label="sb.Append(', \''); 700106" />
<Node Id="25003:[15672..15698).1" Label="sb.Append(_squiggledText); 700107" />
<Node Id="25003:[15672..15698).2" Label="sb.Append(_squiggledText); 700108" />
<Node Id="25003:[15737..15752).1" Label="sb.Append('''); 700109" />
<Node Id="25003:[15737..15752).3" Label="sb.Append('''); 700110" />
<Node Id="25003:[15783..15883).1" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 700111" />
<Node Id="25003:[15899..15914).1" Label="sb.Append(')'); 700112" />
<Node Id="25003:[15899..15914).3" Label="sb.Append(')'); 700113" />
<Node Id="25003:[15930..16520).1" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 700114" />
<Node Id="25003:[15930..16520).2" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 700115" />
<Node Id="25003:[15986..16015).1" Label="sb.Append('.WithArguments('); 700116" />
<Node Id="25003:[15986..16015).3" Label="sb.Append('.WithArguments('); 700117" />
<Node Id="25003:[16055..16078).1" Label="GetArgumentsAsStrings() 700118" />
<Node Id="25003:[16033..16095).1" Label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 700119" />
<Node Id="25003:[16113..16472).1" Label="for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                } 700120" />
<Node Id="25003:[16113..16472).3" Label="for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                } 700121" />
<Node Id="25003:[16202..16218).1" Label="sb.Append('\''); 700122" />
<Node Id="25003:[16202..16218).3" Label="sb.Append('\''); 700123" />
<Node Id="25003:[16240..16275).1" Label="sb.Append(argumentStrings.Current); 700124" />
<Node Id="25003:[16240..16275).2" Label="sb.Append(argumentStrings.Current); 700125" />
<Node Id="25003:[16297..16313).1" Label="sb.Append('\''); 700126" />
<Node Id="25003:[16297..16313).3" Label="sb.Append('\''); 700127" />
<Node Id="25003:[16335..16453).1" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 700128" />
<Node Id="25003:[16414..16430).1" Label="sb.Append(', '); 700129" />
<Node Id="25003:[16414..16430).3" Label="sb.Append(', '); 700130" />
<Node Id="25003:[16490..16505).1" Label="sb.Append(')'); 700131" />
<Node Id="25003:[16490..16505).3" Label="sb.Append(')'); 700132" />
<Node Id="25003:[16536..16829).1" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 700133" />
<Node Id="25003:[16536..16829).2" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 700134" />
<Node Id="25003:[16845..16954).1" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 700135" />
<Node Id="25003:[16970..17144).1" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 700136" />
<Node Id="25003:[16970..17144).2" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 700137" />
<Node Id="25003:[17160..17340).1" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 700138" />
<Node Id="25003:[17160..17340).2" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 700139" />
<Node Id="25003:[17356..17482).1" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 700140" />
<Node Id="25003:[17356..17482).2" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 700141" />
<Node Id="25003:[17498..17519).1" Label="return sb.ToString(); 700142" />
<Node Id="25003:[22349..22404).7" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700143" />
<Node Id="25003:[22349..22404).8" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700144" />
<Node Id="25003:[18855..18914).5" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 700145" />
<Node Id="25003:[18855..18914).7" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 700146" />
<Node Id="25003:[22308..22323).2" Label="param GetDiagnosticDescription(int indentDepth) 700147" />
<Node Id="25003:[22349..22404).10" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700148" />
<Node Id="25003:[22349..22404).13" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700149" />
<Node Id="25003:[14837..14866).3" Label="var sb = new StringBuilder(); 700150" />
<Node Id="25003:[14882..14907).4" Label="sb.Append('Diagnostic('); 700151" />
<Node Id="25003:[14882..14907).6" Label="sb.Append('Diagnostic('); 700152" />
<Node Id="25003:[14921..15244).4" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 700153" />
<Node Id="25003:[15100..15131).3" Label="sb.Append(_errorCodeType.Name); 700154" />
<Node Id="25003:[15100..15131).4" Label="sb.Append(_errorCodeType.Name); 700155" />
<Node Id="25003:[15149..15164).4" Label="sb.Append('.'); 700156" />
<Node Id="25003:[15149..15164).6" Label="sb.Append('.'); 700157" />
<Node Id="25003:[15182..15229).6" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700158" />
<Node Id="25003:[15182..15229).10" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700159" />
<Node Id="25003:[15260..15767).4" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 700160" />
<Node Id="25003:[15320..15717).13" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 700161" />
<Node Id="25003:[15632..15650).4" Label="sb.Append(', \''); 700162" />
<Node Id="25003:[15632..15650).6" Label="sb.Append(', \''); 700163" />
<Node Id="25003:[15672..15698).3" Label="sb.Append(_squiggledText); 700164" />
<Node Id="25003:[15672..15698).4" Label="sb.Append(_squiggledText); 700165" />
<Node Id="25003:[15737..15752).4" Label="sb.Append('''); 700166" />
<Node Id="25003:[15737..15752).6" Label="sb.Append('''); 700167" />
<Node Id="25003:[15783..15883).2" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 700168" />
<Node Id="25003:[15899..15914).4" Label="sb.Append(')'); 700169" />
<Node Id="25003:[15899..15914).6" Label="sb.Append(')'); 700170" />
<Node Id="25003:[15986..16015).4" Label="sb.Append('.WithArguments('); 700171" />
<Node Id="25003:[15986..16015).6" Label="sb.Append('.WithArguments('); 700172" />
<Node Id="25003:[16202..16218).12" Label="sb.Append('\''); 700173" />
<Node Id="25003:[16240..16275).7" Label="sb.Append(argumentStrings.Current); 700174" />
<Node Id="25003:[16240..16275).8" Label="sb.Append(argumentStrings.Current); 700175" />
<Node Id="25003:[16297..16313).12" Label="sb.Append('\''); 700176" />
<Node Id="25003:[16414..16430).9" Label="sb.Append(', '); 700177" />
<Node Id="25003:[16490..16505).4" Label="sb.Append(')'); 700178" />
<Node Id="25003:[16490..16505).6" Label="sb.Append(')'); 700179" />
<Node Id="25003:[16536..16829).4" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 700180" />
<Node Id="25003:[16845..16954).2" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 700181" />
<Node Id="25003:[16970..17144).4" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 700182" />
<Node Id="25003:[17160..17340).4" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 700183" />
<Node Id="25003:[17356..17482).5" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 700184" />
<Node Id="25003:[17498..17519).3" Label="return sb.ToString(); 700185" />
<Node Id="25003:[22349..22404).16" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700186" />
<Node Id="25003:[22349..22404).17" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700187" />
<Node Id="25003:[18943..18992).1" Label="GetCommaSeparatedLines(assertText, expectedText); 700188" />
<Node Id="25003:[18943..18992).2" Label="GetCommaSeparatedLines(assertText, expectedText); 700189" />
<Node Id="25003:[18943..18991).1" Label="GetCommaSeparatedLines(assertText, expectedText) 700190" />
<Node Id="25003:[22599..22615).1" Label="param GetCommaSeparatedLines(StringBuilder sb) 700191" />
<Node Id="25003:[22617..22643).1" Label="param GetCommaSeparatedLines(ArrayBuilder$string$ lines) 700192" />
<Node Id="25003:[22669..22689).1" Label="int n = lines.Count; 700193" />
<Node Id="25003:[22703..22939).1" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 700194" />
<Node Id="25003:[22703..22939).3" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 700195" />
<Node Id="25003:[22763..22783).1" Label="sb.Append(lines[i]); 700196" />
<Node Id="25003:[22763..22783).3" Label="sb.Append(lines[i]); 700197" />
<Node Id="25003:[22801..22890).1" Label="if (i $ n - 1)
                {
                    sb.Append(',');
                } 700198" />
<Node Id="25003:[22856..22871).1" Label="sb.Append(','); 700199" />
<Node Id="25003:[22856..22871).3" Label="sb.Append(','); 700200" />
<Node Id="25003:[22908..22924).1" Label="sb.AppendLine(); 700201" />
<Node Id="25003:[18943..18992).3" Label="GetCommaSeparatedLines(assertText, expectedText); 700202" />
<Node Id="25003:[19106..19139).1" Label="assertText.AppendLine('Actual:'); 700203" />
<Node Id="25003:[19106..19139).3" Label="assertText.AppendLine('Actual:'); 700204" />
<Node Id="25003:[19153..19205).1" Label="var actualText = ArrayBuilder$string$.GetInstance(); 700205" />
<Node Id="25003:[19219..19250).1" Label="var e = actual.GetEnumerator(); 700206" />
<Node Id="25003:[19264..20938).1" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 700207" />
<Node Id="25003:[19264..20938).3" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 700208" />
<Node Id="25003:[19327..19352).1" Label="Diagnostic d = e.Current; 700209" />
<Node Id="25003:[19370..19400).1" Label="string message = d.ToString(); 700210" />
<Node Id="25003:[19418..19628).1" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 700211" />
<Node Id="25003:[19418..19628).2" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 700212" />
<Node Id="25003:[19648..19745).1" Label="if (i $ 0)
                {
                    assertText.AppendLine(',');
                } 700213" />
<Node Id="25003:[19765..20366).1" Label="if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                } 700214" />
<Node Id="25003:[19846..19878).1" Label="Indent(assertText, indentDepth); 700215" />
<Node Id="25003:[19846..19878).2" Label="Indent(assertText, indentDepth); 700216" />
<Node Id="25003:[19846..19877).1" Label="Indent(assertText, indentDepth) 700217" />
<Node Id="25003:[22454..22470).1" Label="param Indent(StringBuilder sb) 700218" />
<Node Id="25003:[22472..22481).1" Label="param Indent(int count) 700219" />
<Node Id="25003:[22507..22533).1" Label="sb.Append(' ', 4 * count); 700220" />
<Node Id="25003:[22507..22533).4" Label="sb.Append(' ', 4 * count); 700221" />
<Node Id="25003:[22507..22533).6" Label="sb.Append(' ', 4 * count); 700222" />
<Node Id="25003:[19846..19878).3" Label="Indent(assertText, indentDepth); 700223" />
<Node Id="25003:[19900..19925).1" Label="assertText.Append('// '); 700224" />
<Node Id="25003:[19900..19925).3" Label="assertText.Append('// '); 700225" />
<Node Id="25003:[19947..19983).1" Label="assertText.AppendLine(d.ToString()); 700226" />
<Node Id="25003:[19947..19983).3" Label="assertText.AppendLine(d.ToString()); 700227" />
<Node Id="25003:[20005..20024).1" Label="var l = d.Location; 700228" />
<Node Id="25003:[20046..20347).1" Label="if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    } 700229" />
<Node Id="25003:[20112..20144).1" Label="Indent(assertText, indentDepth); 700230" />
<Node Id="25003:[20112..20144).2" Label="Indent(assertText, indentDepth); 700231" />
<Node Id="25003:[20112..20143).1" Label="Indent(assertText, indentDepth) 700232" />
<Node Id="25003:[22454..22470).2" Label="param Indent(StringBuilder sb) 700233" />
<Node Id="25003:[22472..22481).2" Label="param Indent(int count) 700234" />
<Node Id="25003:[22507..22533).7" Label="sb.Append(' ', 4 * count); 700235" />
<Node Id="25003:[22507..22533).10" Label="sb.Append(' ', 4 * count); 700236" />
<Node Id="25003:[22507..22533).12" Label="sb.Append(' ', 4 * count); 700237" />
<Node Id="25003:[20112..20144).3" Label="Indent(assertText, indentDepth); 700238" />
<Node Id="25003:[20170..20195).1" Label="assertText.Append('// '); 700239" />
<Node Id="25003:[20170..20195).3" Label="assertText.Append('// '); 700240" />
<Node Id="25003:[20221..20324).1" Label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 700241" />
<Node Id="25003:[20221..20324).8" Label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 700242" />
<Node Id="25003:[20386..20505).1" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 700243" />
<Node Id="25003:[20386..20505).2" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 700244" />
<Node Id="25003:[20386..20505).4" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 700245" />
<Node Id="25003:[20386..20505).5" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 700246" />
<Node Id="25003:[20404..20504).1" Label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 700247" />
<Node Id="25003:[4933..4945).4" Label="param DiagnosticDescription(Diagnostic d) 700248" />
<Node Id="25003:[4947..4965).4" Label="param DiagnosticDescription(bool errorCodeOnly) 700249" />
<Node Id="25003:[4967..5002).4" Label="param DiagnosticDescription(bool includeDefaultSeverity = false) 700250" />
<Node Id="25003:[5004..5041).4" Label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 700251" />
<Node Id="25003:[4904..7352).4" Label="param DiagnosticDescription(this) 700252" />
<Node Id="25003:[912..917).10" Label="_code 700253" />
<Node Id="25003:[950..967).10" Label="_isWarningAsError 700254" />
<Node Id="25003:[1000..1013).10" Label="_isSuppressed 700255" />
<Node Id="25003:[1048..1062).10" Label="_squiggledText 700256" />
<Node Id="25003:[1099..1109).10" Label="_arguments 700257" />
<Node Id="25003:[1151..1165).28" Label="_startPosition 700258" />
<Node Id="25003:[1336..1350).10" Label="_errorCodeType 700259" />
<Node Id="25003:[1460..1479).10" Label="_defaultSeverityOpt 700260" />
<Node Id="25003:[1527..1548).10" Label="_effectiveSeverityOpt 700261" />
<Node Id="25003:[5067..5072).4" Label="_code 700262" />
<Node Id="25003:[5096..5113).4" Label="_isWarningAsError 700263" />
<Node Id="25003:[5149..5162).4" Label="_isSuppressed 700264" />
<Node Id="25003:[5194..5203).4" Label="_location 700265" />
<Node Id="25003:[5444..5476).7" Label="DiagnosticWithInfo dinfo = null; 700266" />
<Node Id="25003:[5490..6130).23" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 700267" />
<Node Id="25003:[7118..7245).19" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 700268" />
<Node Id="25003:[7118..7245).20" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 700269" />
<Node Id="25003:[7118..7245).22" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 700270" />
<Node Id="25003:[20523..20557).1" Label="var diffDescription = description; 700271" />
<Node Id="25003:[20575..20622).1" Label="var idx = Array.IndexOf(expected, description); 700272" />
<Node Id="25003:[20575..20622).2" Label="var idx = Array.IndexOf(expected, description); 700273" />
<Node Id="25003:[20575..20622).3" Label="var idx = Array.IndexOf(expected, description); 700274" />
<Node Id="25003:[20575..20622).4" Label="var idx = Array.IndexOf(expected, description); 700275" />
<Node Id="25003:[10680..10725).10" Label="if (d == null)
                return false; 700276" />
<Node Id="25003:[10680..10725).11" Label="if (d == null)
                return false; 700277" />
<Node Id="25003:[10815..10891).7" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 700278" />
<Node Id="25003:[10907..10975).7" Label="if (_isSuppressed != d._isSuppressed)
                return false; 700279" />
<Node Id="25003:[10991..11148).4" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 700280" />
<Node Id="25003:[11059..11133).7" Label="if (_squiggledText != d._squiggledText)
                    return false; 700281" />
<Node Id="25003:[11164..11464).10" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 700282" />
<Node Id="25003:[11164..11464).11" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 700283" />
<Node Id="25003:[11480..11903).10" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 700284" />
<Node Id="25003:[11480..11903).11" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 700285" />
<Node Id="25003:[11917..12344).10" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 700286" />
<Node Id="25003:[11917..12344).11" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 700287" />
<Node Id="25003:[12436..12535).7" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 700288" />
<Node Id="25003:[12855..12915).10" Label="if (d._arguments == null)
                    return false; 700289" />
<Node Id="25003:[13514..13693).13" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 700290" />
<Node Id="25003:[20640..20746).1" Label="if (idx != -1)
                {
                    diffDescription = expected[idx];
                } 700291" />
<Node Id="25003:[20640..20746).2" Label="if (idx != -1)
                {
                    diffDescription = expected[idx];
                } 700292" />
<Node Id="25003:[20695..20727).1" Label="diffDescription = expected[idx]; 700293" />
<Node Id="25003:[20764..20834).1" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700294" />
<Node Id="25003:[20764..20834).2" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700295" />
<Node Id="25003:[20782..20832).1" Label="GetDiagnosticDescription(description, indentDepth) 700296" />
<Node Id="25003:[22283..22306).4" Label="param GetDiagnosticDescription(DiagnosticDescription d) 700297" />
<Node Id="25003:[22308..22323).4" Label="param GetDiagnosticDescription(int indentDepth) 700298" />
<Node Id="25003:[22349..22404).28" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700299" />
<Node Id="25003:[22349..22404).31" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700300" />
<Node Id="25003:[14837..14866).7" Label="var sb = new StringBuilder(); 700301" />
<Node Id="25003:[14882..14907).10" Label="sb.Append('Diagnostic('); 700302" />
<Node Id="25003:[14882..14907).12" Label="sb.Append('Diagnostic('); 700303" />
<Node Id="25003:[14921..15244).10" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 700304" />
<Node Id="25003:[14921..15244).11" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 700305" />
<Node Id="25003:[15100..15131).7" Label="sb.Append(_errorCodeType.Name); 700306" />
<Node Id="25003:[15100..15131).8" Label="sb.Append(_errorCodeType.Name); 700307" />
<Node Id="25003:[15149..15164).10" Label="sb.Append('.'); 700308" />
<Node Id="25003:[15149..15164).12" Label="sb.Append('.'); 700309" />
<Node Id="25003:[15182..15229).16" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700310" />
<Node Id="25003:[15182..15229).20" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700311" />
<Node Id="25003:[15260..15767).10" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 700312" />
<Node Id="25003:[15260..15767).11" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 700313" />
<Node Id="25003:[15320..15717).37" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 700314" />
<Node Id="25003:[15632..15650).10" Label="sb.Append(', \''); 700315" />
<Node Id="25003:[15632..15650).12" Label="sb.Append(', \''); 700316" />
<Node Id="25003:[15672..15698).7" Label="sb.Append(_squiggledText); 700317" />
<Node Id="25003:[15672..15698).8" Label="sb.Append(_squiggledText); 700318" />
<Node Id="25003:[15737..15752).10" Label="sb.Append('''); 700319" />
<Node Id="25003:[15737..15752).12" Label="sb.Append('''); 700320" />
<Node Id="25003:[15783..15883).4" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 700321" />
<Node Id="25003:[15899..15914).10" Label="sb.Append(')'); 700322" />
<Node Id="25003:[15899..15914).12" Label="sb.Append(')'); 700323" />
<Node Id="25003:[15930..16520).11" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 700324" />
<Node Id="25003:[15986..16015).10" Label="sb.Append('.WithArguments('); 700325" />
<Node Id="25003:[15986..16015).12" Label="sb.Append('.WithArguments('); 700326" />
<Node Id="25003:[16202..16218).25" Label="sb.Append('\''); 700327" />
<Node Id="25003:[16202..16218).27" Label="sb.Append('\''); 700328" />
<Node Id="25003:[16240..16275).17" Label="sb.Append(argumentStrings.Current); 700329" />
<Node Id="25003:[16240..16275).18" Label="sb.Append(argumentStrings.Current); 700330" />
<Node Id="25003:[16297..16313).25" Label="sb.Append('\''); 700331" />
<Node Id="25003:[16297..16313).27" Label="sb.Append('\''); 700332" />
<Node Id="25003:[16335..16453).33" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 700333" />
<Node Id="25003:[16414..16430).16" Label="sb.Append(', '); 700334" />
<Node Id="25003:[16414..16430).18" Label="sb.Append(', '); 700335" />
<Node Id="25003:[16490..16505).10" Label="sb.Append(')'); 700336" />
<Node Id="25003:[16490..16505).12" Label="sb.Append(')'); 700337" />
<Node Id="25003:[16536..16829).10" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 700338" />
<Node Id="25003:[16536..16829).11" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 700339" />
<Node Id="25003:[16596..16624).1" Label="sb.Append('.WithLocation('); 700340" />
<Node Id="25003:[16596..16624).3" Label="sb.Append('.WithLocation('); 700341" />
<Node Id="25003:[16642..16683).1" Label="sb.Append(_startPosition.Value.Line + 1); 700342" />
<Node Id="25003:[16642..16683).4" Label="sb.Append(_startPosition.Value.Line + 1); 700343" />
<Node Id="25003:[16701..16717).1" Label="sb.Append(', '); 700344" />
<Node Id="25003:[16701..16717).3" Label="sb.Append(', '); 700345" />
<Node Id="25003:[16735..16781).1" Label="sb.Append(_startPosition.Value.Character + 1); 700346" />
<Node Id="25003:[16735..16781).4" Label="sb.Append(_startPosition.Value.Character + 1); 700347" />
<Node Id="25003:[16799..16814).1" Label="sb.Append(')'); 700348" />
<Node Id="25003:[16799..16814).3" Label="sb.Append(')'); 700349" />
<Node Id="25003:[16845..16954).4" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 700350" />
<Node Id="25003:[16970..17144).10" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 700351" />
<Node Id="25003:[16970..17144).11" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 700352" />
<Node Id="25003:[17160..17340).10" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 700353" />
<Node Id="25003:[17160..17340).11" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 700354" />
<Node Id="25003:[17356..17482).13" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 700355" />
<Node Id="25003:[17356..17482).14" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 700356" />
<Node Id="25003:[17498..17519).7" Label="return sb.ToString(); 700357" />
<Node Id="25003:[22349..22404).34" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700358" />
<Node Id="25003:[22349..22404).35" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700359" />
<Node Id="25003:[20764..20834).5" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700360" />
<Node Id="25003:[20852..20923).1" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700361" />
<Node Id="25003:[20852..20923).2" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700362" />
<Node Id="25003:[20867..20921).1" Label="GetDiagnosticDescription(diffDescription, indentDepth) 700363" />
<Node Id="25003:[22283..22306).5" Label="param GetDiagnosticDescription(DiagnosticDescription d) 700364" />
<Node Id="25003:[22308..22323).5" Label="param GetDiagnosticDescription(int indentDepth) 700365" />
<Node Id="25003:[22349..22404).37" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700366" />
<Node Id="25003:[22349..22404).40" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700367" />
<Node Id="25003:[14837..14866).9" Label="var sb = new StringBuilder(); 700368" />
<Node Id="25003:[14882..14907).13" Label="sb.Append('Diagnostic('); 700369" />
<Node Id="25003:[14882..14907).15" Label="sb.Append('Diagnostic('); 700370" />
<Node Id="25003:[14921..15244).13" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 700371" />
<Node Id="25003:[14921..15244).14" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 700372" />
<Node Id="25003:[15100..15131).9" Label="sb.Append(_errorCodeType.Name); 700373" />
<Node Id="25003:[15100..15131).10" Label="sb.Append(_errorCodeType.Name); 700374" />
<Node Id="25003:[15149..15164).13" Label="sb.Append('.'); 700375" />
<Node Id="25003:[15149..15164).15" Label="sb.Append('.'); 700376" />
<Node Id="25003:[15182..15229).21" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700377" />
<Node Id="25003:[15182..15229).25" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700378" />
<Node Id="25003:[15260..15767).13" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 700379" />
<Node Id="25003:[15260..15767).14" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 700380" />
<Node Id="25003:[15320..15717).49" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 700381" />
<Node Id="25003:[15632..15650).13" Label="sb.Append(', \''); 700382" />
<Node Id="25003:[15632..15650).15" Label="sb.Append(', \''); 700383" />
<Node Id="25003:[15672..15698).9" Label="sb.Append(_squiggledText); 700384" />
<Node Id="25003:[15672..15698).10" Label="sb.Append(_squiggledText); 700385" />
<Node Id="25003:[15737..15752).13" Label="sb.Append('''); 700386" />
<Node Id="25003:[15737..15752).15" Label="sb.Append('''); 700387" />
<Node Id="25003:[15783..15883).5" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 700388" />
<Node Id="25003:[15899..15914).13" Label="sb.Append(')'); 700389" />
<Node Id="25003:[15899..15914).15" Label="sb.Append(')'); 700390" />
<Node Id="25003:[15930..16520).14" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 700391" />
<Node Id="25003:[15986..16015).13" Label="sb.Append('.WithArguments('); 700392" />
<Node Id="25003:[15986..16015).15" Label="sb.Append('.WithArguments('); 700393" />
<Node Id="25003:[16202..16218).34" Label="sb.Append('\''); 700394" />
<Node Id="25003:[16202..16218).36" Label="sb.Append('\''); 700395" />
<Node Id="25003:[16240..16275).23" Label="sb.Append(argumentStrings.Current); 700396" />
<Node Id="25003:[16240..16275).24" Label="sb.Append(argumentStrings.Current); 700397" />
<Node Id="25003:[16297..16313).34" Label="sb.Append('\''); 700398" />
<Node Id="25003:[16297..16313).36" Label="sb.Append('\''); 700399" />
<Node Id="25003:[16335..16453).45" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 700400" />
<Node Id="25003:[16414..16430).22" Label="sb.Append(', '); 700401" />
<Node Id="25003:[16414..16430).24" Label="sb.Append(', '); 700402" />
<Node Id="25003:[16490..16505).13" Label="sb.Append(')'); 700403" />
<Node Id="25003:[16490..16505).15" Label="sb.Append(')'); 700404" />
<Node Id="25003:[16536..16829).13" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 700405" />
<Node Id="25003:[16536..16829).14" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 700406" />
<Node Id="25003:[16845..16954).5" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 700407" />
<Node Id="25003:[16970..17144).13" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 700408" />
<Node Id="25003:[16970..17144).14" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 700409" />
<Node Id="25003:[17160..17340).13" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 700410" />
<Node Id="25003:[17160..17340).14" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 700411" />
<Node Id="25003:[17356..17482).17" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 700412" />
<Node Id="25003:[17356..17482).18" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 700413" />
<Node Id="25003:[17498..17519).9" Label="return sb.ToString(); 700414" />
<Node Id="25003:[22349..22404).43" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700415" />
<Node Id="25003:[22349..22404).44" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700416" />
<Node Id="25003:[20852..20923).5" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700417" />
<Node Id="25003:[19418..19628).6" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 700418" />
<Node Id="25003:[19648..19745).4" Label="if (i $ 0)
                {
                    assertText.AppendLine(',');
                } 700419" />
<Node Id="25003:[19699..19726).1" Label="assertText.AppendLine(','); 700420" />
<Node Id="25003:[19699..19726).3" Label="assertText.AppendLine(','); 700421" />
<Node Id="25003:[19846..19878).4" Label="Indent(assertText, indentDepth); 700422" />
<Node Id="25003:[19846..19878).5" Label="Indent(assertText, indentDepth); 700423" />
<Node Id="25003:[19846..19877).2" Label="Indent(assertText, indentDepth) 700424" />
<Node Id="25003:[22454..22470).3" Label="param Indent(StringBuilder sb) 700425" />
<Node Id="25003:[22472..22481).3" Label="param Indent(int count) 700426" />
<Node Id="25003:[22507..22533).13" Label="sb.Append(' ', 4 * count); 700427" />
<Node Id="25003:[22507..22533).16" Label="sb.Append(' ', 4 * count); 700428" />
<Node Id="25003:[19846..19878).6" Label="Indent(assertText, indentDepth); 700429" />
<Node Id="25003:[19900..19925).4" Label="assertText.Append('// '); 700430" />
<Node Id="25003:[20112..20144).4" Label="Indent(assertText, indentDepth); 700431" />
<Node Id="25003:[20112..20144).5" Label="Indent(assertText, indentDepth); 700432" />
<Node Id="25003:[20112..20143).2" Label="Indent(assertText, indentDepth) 700433" />
<Node Id="25003:[22454..22470).4" Label="param Indent(StringBuilder sb) 700434" />
<Node Id="25003:[22472..22481).4" Label="param Indent(int count) 700435" />
<Node Id="25003:[22507..22533).19" Label="sb.Append(' ', 4 * count); 700436" />
<Node Id="25003:[22507..22533).22" Label="sb.Append(' ', 4 * count); 700437" />
<Node Id="25003:[20112..20144).6" Label="Indent(assertText, indentDepth); 700438" />
<Node Id="25003:[20170..20195).4" Label="assertText.Append('// '); 700439" />
<Node Id="25003:[912..917).11" Label="_code 700440" />
<Node Id="25003:[950..967).11" Label="_isWarningAsError 700441" />
<Node Id="25003:[1000..1013).11" Label="_isSuppressed 700442" />
<Node Id="25003:[1048..1062).11" Label="_squiggledText 700443" />
<Node Id="25003:[1099..1109).11" Label="_arguments 700444" />
<Node Id="25003:[1151..1165).31" Label="_startPosition 700445" />
<Node Id="25003:[1336..1350).11" Label="_errorCodeType 700446" />
<Node Id="25003:[1460..1479).11" Label="_defaultSeverityOpt 700447" />
<Node Id="25003:[1527..1548).11" Label="_effectiveSeverityOpt 700448" />
<Node Id="25003:[5067..5072).5" Label="_code 700449" />
<Node Id="25003:[5444..5476).9" Label="DiagnosticWithInfo dinfo = null; 700450" />
<Node Id="25003:[7118..7245).25" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 700451" />
<Node Id="25003:[20523..20557).2" Label="var diffDescription = description; 700452" />
<Node Id="25003:[10680..10725).13" Label="if (d == null)
                return false; 700453" />
<Node Id="25003:[10815..10891).9" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 700454" />
<Node Id="25003:[10907..10975).9" Label="if (_isSuppressed != d._isSuppressed)
                return false; 700455" />
<Node Id="25003:[10991..11148).5" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 700456" />
<Node Id="25003:[11059..11133).9" Label="if (_squiggledText != d._squiggledText)
                    return false; 700457" />
<Node Id="25003:[11120..11133).1" Label="return false; 700458" />
<Node Id="25003:[10815..10891).11" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 700459" />
<Node Id="25003:[10907..10975).11" Label="if (_isSuppressed != d._isSuppressed)
                return false; 700460" />
<Node Id="25003:[11164..11464).13" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 700461" />
<Node Id="25003:[11164..11464).14" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 700462" />
<Node Id="25003:[11480..11903).13" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 700463" />
<Node Id="25003:[11480..11903).14" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 700464" />
<Node Id="25003:[11917..12344).13" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 700465" />
<Node Id="25003:[11917..12344).14" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 700466" />
<Node Id="25003:[12436..12535).9" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 700467" />
<Node Id="25003:[12855..12915).13" Label="if (d._arguments == null)
                    return false; 700468" />
<Node Id="25003:[13514..13693).17" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 700469" />
<Node Id="25003:[20764..20834).7" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700470" />
<Node Id="25003:[22308..22323).6" Label="param GetDiagnosticDescription(int indentDepth) 700471" />
<Node Id="25003:[22349..22404).46" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700472" />
<Node Id="25003:[22349..22404).49" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700473" />
<Node Id="25003:[14837..14866).11" Label="var sb = new StringBuilder(); 700474" />
<Node Id="25003:[14882..14907).16" Label="sb.Append('Diagnostic('); 700475" />
<Node Id="25003:[14882..14907).18" Label="sb.Append('Diagnostic('); 700476" />
<Node Id="25003:[14921..15244).16" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 700477" />
<Node Id="25003:[14921..15244).17" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 700478" />
<Node Id="25003:[15100..15131).11" Label="sb.Append(_errorCodeType.Name); 700479" />
<Node Id="25003:[15100..15131).12" Label="sb.Append(_errorCodeType.Name); 700480" />
<Node Id="25003:[15149..15164).16" Label="sb.Append('.'); 700481" />
<Node Id="25003:[15149..15164).18" Label="sb.Append('.'); 700482" />
<Node Id="25003:[15182..15229).26" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700483" />
<Node Id="25003:[15182..15229).30" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700484" />
<Node Id="25003:[15260..15767).16" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 700485" />
<Node Id="25003:[15260..15767).17" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 700486" />
<Node Id="25003:[15320..15717).61" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 700487" />
<Node Id="25003:[15632..15650).16" Label="sb.Append(', \''); 700488" />
<Node Id="25003:[15632..15650).18" Label="sb.Append(', \''); 700489" />
<Node Id="25003:[15672..15698).11" Label="sb.Append(_squiggledText); 700490" />
<Node Id="25003:[15672..15698).12" Label="sb.Append(_squiggledText); 700491" />
<Node Id="25003:[15737..15752).16" Label="sb.Append('''); 700492" />
<Node Id="25003:[15737..15752).18" Label="sb.Append('''); 700493" />
<Node Id="25003:[15783..15883).6" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 700494" />
<Node Id="25003:[15899..15914).16" Label="sb.Append(')'); 700495" />
<Node Id="25003:[15899..15914).18" Label="sb.Append(')'); 700496" />
<Node Id="25003:[15986..16015).16" Label="sb.Append('.WithArguments('); 700497" />
<Node Id="25003:[15986..16015).18" Label="sb.Append('.WithArguments('); 700498" />
<Node Id="25003:[16202..16218).43" Label="sb.Append('\''); 700499" />
<Node Id="25003:[16202..16218).45" Label="sb.Append('\''); 700500" />
<Node Id="25003:[16240..16275).29" Label="sb.Append(argumentStrings.Current); 700501" />
<Node Id="25003:[16240..16275).30" Label="sb.Append(argumentStrings.Current); 700502" />
<Node Id="25003:[16297..16313).43" Label="sb.Append('\''); 700503" />
<Node Id="25003:[16297..16313).45" Label="sb.Append('\''); 700504" />
<Node Id="25003:[16335..16453).57" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 700505" />
<Node Id="25003:[16414..16430).28" Label="sb.Append(', '); 700506" />
<Node Id="25003:[16414..16430).30" Label="sb.Append(', '); 700507" />
<Node Id="25003:[16490..16505).16" Label="sb.Append(')'); 700508" />
<Node Id="25003:[16490..16505).18" Label="sb.Append(')'); 700509" />
<Node Id="25003:[16536..16829).16" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 700510" />
<Node Id="25003:[16536..16829).17" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 700511" />
<Node Id="25003:[16596..16624).4" Label="sb.Append('.WithLocation('); 700512" />
<Node Id="25003:[16596..16624).6" Label="sb.Append('.WithLocation('); 700513" />
<Node Id="25003:[16642..16683).5" Label="sb.Append(_startPosition.Value.Line + 1); 700514" />
<Node Id="25003:[16642..16683).8" Label="sb.Append(_startPosition.Value.Line + 1); 700515" />
<Node Id="25003:[16701..16717).4" Label="sb.Append(', '); 700516" />
<Node Id="25003:[16701..16717).6" Label="sb.Append(', '); 700517" />
<Node Id="25003:[16735..16781).5" Label="sb.Append(_startPosition.Value.Character + 1); 700518" />
<Node Id="25003:[16735..16781).8" Label="sb.Append(_startPosition.Value.Character + 1); 700519" />
<Node Id="25003:[16799..16814).4" Label="sb.Append(')'); 700520" />
<Node Id="25003:[16799..16814).6" Label="sb.Append(')'); 700521" />
<Node Id="25003:[16845..16954).6" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 700522" />
<Node Id="25003:[16970..17144).16" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 700523" />
<Node Id="25003:[16970..17144).17" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 700524" />
<Node Id="25003:[17160..17340).16" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 700525" />
<Node Id="25003:[17160..17340).17" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 700526" />
<Node Id="25003:[17356..17482).21" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 700527" />
<Node Id="25003:[17356..17482).22" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 700528" />
<Node Id="25003:[17498..17519).11" Label="return sb.ToString(); 700529" />
<Node Id="25003:[22349..22404).52" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700530" />
<Node Id="25003:[22349..22404).53" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700531" />
<Node Id="25003:[20764..20834).10" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700532" />
<Node Id="25003:[20852..20923).7" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700533" />
<Node Id="25003:[22308..22323).7" Label="param GetDiagnosticDescription(int indentDepth) 700534" />
<Node Id="25003:[22349..22404).58" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700535" />
<Node Id="25003:[15100..15131).13" Label="sb.Append(_errorCodeType.Name); 700536" />
<Node Id="25003:[15100..15131).14" Label="sb.Append(_errorCodeType.Name); 700537" />
<Node Id="25003:[15149..15164).21" Label="sb.Append('.'); 700538" />
<Node Id="25003:[15182..15229).31" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700539" />
<Node Id="25003:[15182..15229).35" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700540" />
<Node Id="25003:[15632..15650).21" Label="sb.Append(', \''); 700541" />
<Node Id="25003:[15672..15698).13" Label="sb.Append(_squiggledText); 700542" />
<Node Id="25003:[15672..15698).14" Label="sb.Append(_squiggledText); 700543" />
<Node Id="25003:[15737..15752).21" Label="sb.Append('''); 700544" />
<Node Id="25003:[15899..15914).21" Label="sb.Append(')'); 700545" />
<Node Id="25003:[15986..16015).21" Label="sb.Append('.WithArguments('); 700546" />
<Node Id="25003:[16202..16218).54" Label="sb.Append('\''); 700547" />
<Node Id="25003:[16240..16275).36" Label="sb.Append(argumentStrings.Current); 700548" />
<Node Id="25003:[16297..16313).54" Label="sb.Append('\''); 700549" />
<Node Id="25003:[16414..16430).36" Label="sb.Append(', '); 700550" />
<Node Id="25003:[16490..16505).21" Label="sb.Append(')'); 700551" />
<Node Id="25003:[17498..17519).13" Label="return sb.ToString(); 700552" />
<Node Id="25003:[22349..22404).61" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700553" />
<Node Id="25003:[22349..22404).62" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700554" />
<Node Id="25003:[20852..20923).10" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700555" />
<Node Id="25003:[19418..19628).11" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 700556" />
<Node Id="25003:[19648..19745).7" Label="if (i $ 0)
                {
                    assertText.AppendLine(',');
                } 700557" />
<Node Id="25003:[19699..19726).4" Label="assertText.AppendLine(','); 700558" />
<Node Id="25003:[19846..19878).7" Label="Indent(assertText, indentDepth); 700559" />
<Node Id="25003:[19846..19878).8" Label="Indent(assertText, indentDepth); 700560" />
<Node Id="25003:[19846..19877).3" Label="Indent(assertText, indentDepth) 700561" />
<Node Id="25003:[22454..22470).5" Label="param Indent(StringBuilder sb) 700562" />
<Node Id="25003:[22472..22481).5" Label="param Indent(int count) 700563" />
<Node Id="25003:[22507..22533).25" Label="sb.Append(' ', 4 * count); 700564" />
<Node Id="25003:[22507..22533).28" Label="sb.Append(' ', 4 * count); 700565" />
<Node Id="25003:[19846..19878).9" Label="Indent(assertText, indentDepth); 700566" />
<Node Id="25003:[19900..19925).7" Label="assertText.Append('// '); 700567" />
<Node Id="25003:[20112..20144).7" Label="Indent(assertText, indentDepth); 700568" />
<Node Id="25003:[20112..20144).8" Label="Indent(assertText, indentDepth); 700569" />
<Node Id="25003:[20112..20143).3" Label="Indent(assertText, indentDepth) 700570" />
<Node Id="25003:[22454..22470).6" Label="param Indent(StringBuilder sb) 700571" />
<Node Id="25003:[22472..22481).6" Label="param Indent(int count) 700572" />
<Node Id="25003:[22507..22533).31" Label="sb.Append(' ', 4 * count); 700573" />
<Node Id="25003:[22507..22533).34" Label="sb.Append(' ', 4 * count); 700574" />
<Node Id="25003:[20112..20144).9" Label="Indent(assertText, indentDepth); 700575" />
<Node Id="25003:[20170..20195).7" Label="assertText.Append('// '); 700576" />
<Node Id="25003:[912..917).12" Label="_code 700577" />
<Node Id="25003:[950..967).12" Label="_isWarningAsError 700578" />
<Node Id="25003:[1000..1013).12" Label="_isSuppressed 700579" />
<Node Id="25003:[1048..1062).12" Label="_squiggledText 700580" />
<Node Id="25003:[1099..1109).12" Label="_arguments 700581" />
<Node Id="25003:[1151..1165).34" Label="_startPosition 700582" />
<Node Id="25003:[1336..1350).12" Label="_errorCodeType 700583" />
<Node Id="25003:[1460..1479).12" Label="_defaultSeverityOpt 700584" />
<Node Id="25003:[1527..1548).12" Label="_effectiveSeverityOpt 700585" />
<Node Id="25003:[5067..5072).6" Label="_code 700586" />
<Node Id="25003:[5444..5476).11" Label="DiagnosticWithInfo dinfo = null; 700587" />
<Node Id="25003:[7118..7245).31" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 700588" />
<Node Id="25003:[20523..20557).3" Label="var diffDescription = description; 700589" />
<Node Id="25003:[10680..10725).19" Label="if (d == null)
                return false; 700590" />
<Node Id="25003:[10786..10799).1" Label="return false; 700591" />
<Node Id="25003:[10680..10725).22" Label="if (d == null)
                return false; 700592" />
<Node Id="25003:[10815..10891).13" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 700593" />
<Node Id="25003:[10907..10975).13" Label="if (_isSuppressed != d._isSuppressed)
                return false; 700594" />
<Node Id="25003:[11164..11464).16" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 700595" />
<Node Id="25003:[11480..11903).16" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 700596" />
<Node Id="25003:[11917..12344).16" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 700597" />
<Node Id="25003:[12436..12535).11" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 700598" />
<Node Id="25003:[12855..12915).16" Label="if (d._arguments == null)
                    return false; 700599" />
<Node Id="25003:[13514..13693).21" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 700600" />
<Node Id="25003:[20764..20834).12" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700601" />
<Node Id="25003:[22308..22323).8" Label="param GetDiagnosticDescription(int indentDepth) 700602" />
<Node Id="25003:[22349..22404).64" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700603" />
<Node Id="25003:[22349..22404).67" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700604" />
<Node Id="25003:[14837..14866).15" Label="var sb = new StringBuilder(); 700605" />
<Node Id="25003:[14882..14907).22" Label="sb.Append('Diagnostic('); 700606" />
<Node Id="25003:[14882..14907).24" Label="sb.Append('Diagnostic('); 700607" />
<Node Id="25003:[14921..15244).22" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 700608" />
<Node Id="25003:[14921..15244).23" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 700609" />
<Node Id="25003:[15100..15131).15" Label="sb.Append(_errorCodeType.Name); 700610" />
<Node Id="25003:[15100..15131).16" Label="sb.Append(_errorCodeType.Name); 700611" />
<Node Id="25003:[15149..15164).22" Label="sb.Append('.'); 700612" />
<Node Id="25003:[15149..15164).24" Label="sb.Append('.'); 700613" />
<Node Id="25003:[15182..15229).36" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700614" />
<Node Id="25003:[15182..15229).40" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700615" />
<Node Id="25003:[15260..15767).22" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 700616" />
<Node Id="25003:[15260..15767).23" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 700617" />
<Node Id="25003:[15320..15717).85" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 700618" />
<Node Id="25003:[15632..15650).22" Label="sb.Append(', \''); 700619" />
<Node Id="25003:[15632..15650).24" Label="sb.Append(', \''); 700620" />
<Node Id="25003:[15672..15698).15" Label="sb.Append(_squiggledText); 700621" />
<Node Id="25003:[15672..15698).16" Label="sb.Append(_squiggledText); 700622" />
<Node Id="25003:[15737..15752).22" Label="sb.Append('''); 700623" />
<Node Id="25003:[15737..15752).24" Label="sb.Append('''); 700624" />
<Node Id="25003:[15783..15883).8" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 700625" />
<Node Id="25003:[15899..15914).22" Label="sb.Append(')'); 700626" />
<Node Id="25003:[15899..15914).24" Label="sb.Append(')'); 700627" />
<Node Id="25003:[15986..16015).22" Label="sb.Append('.WithArguments('); 700628" />
<Node Id="25003:[15986..16015).24" Label="sb.Append('.WithArguments('); 700629" />
<Node Id="25003:[16202..16218).61" Label="sb.Append('\''); 700630" />
<Node Id="25003:[16202..16218).63" Label="sb.Append('\''); 700631" />
<Node Id="25003:[16240..16275).41" Label="sb.Append(argumentStrings.Current); 700632" />
<Node Id="25003:[16240..16275).42" Label="sb.Append(argumentStrings.Current); 700633" />
<Node Id="25003:[16297..16313).61" Label="sb.Append('\''); 700634" />
<Node Id="25003:[16297..16313).63" Label="sb.Append('\''); 700635" />
<Node Id="25003:[16335..16453).81" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 700636" />
<Node Id="25003:[16414..16430).40" Label="sb.Append(', '); 700637" />
<Node Id="25003:[16414..16430).42" Label="sb.Append(', '); 700638" />
<Node Id="25003:[16490..16505).22" Label="sb.Append(')'); 700639" />
<Node Id="25003:[16490..16505).24" Label="sb.Append(')'); 700640" />
<Node Id="25003:[16536..16829).22" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 700641" />
<Node Id="25003:[16536..16829).23" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 700642" />
<Node Id="25003:[16596..16624).7" Label="sb.Append('.WithLocation('); 700643" />
<Node Id="25003:[16596..16624).9" Label="sb.Append('.WithLocation('); 700644" />
<Node Id="25003:[16642..16683).9" Label="sb.Append(_startPosition.Value.Line + 1); 700645" />
<Node Id="25003:[16642..16683).12" Label="sb.Append(_startPosition.Value.Line + 1); 700646" />
<Node Id="25003:[16701..16717).7" Label="sb.Append(', '); 700647" />
<Node Id="25003:[16701..16717).9" Label="sb.Append(', '); 700648" />
<Node Id="25003:[16735..16781).9" Label="sb.Append(_startPosition.Value.Character + 1); 700649" />
<Node Id="25003:[16735..16781).12" Label="sb.Append(_startPosition.Value.Character + 1); 700650" />
<Node Id="25003:[16799..16814).7" Label="sb.Append(')'); 700651" />
<Node Id="25003:[16799..16814).9" Label="sb.Append(')'); 700652" />
<Node Id="25003:[16845..16954).8" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 700653" />
<Node Id="25003:[16970..17144).22" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 700654" />
<Node Id="25003:[16970..17144).23" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 700655" />
<Node Id="25003:[17160..17340).22" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 700656" />
<Node Id="25003:[17160..17340).23" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 700657" />
<Node Id="25003:[17356..17482).29" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 700658" />
<Node Id="25003:[17356..17482).30" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 700659" />
<Node Id="25003:[17498..17519).15" Label="return sb.ToString(); 700660" />
<Node Id="25003:[22349..22404).70" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700661" />
<Node Id="25003:[22349..22404).71" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700662" />
<Node Id="25003:[20764..20834).15" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 700663" />
<Node Id="25003:[20852..20923).12" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700664" />
<Node Id="25003:[22308..22323).9" Label="param GetDiagnosticDescription(int indentDepth) 700665" />
<Node Id="25003:[22349..22404).76" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700666" />
<Node Id="25003:[15100..15131).17" Label="sb.Append(_errorCodeType.Name); 700667" />
<Node Id="25003:[15100..15131).18" Label="sb.Append(_errorCodeType.Name); 700668" />
<Node Id="25003:[15149..15164).27" Label="sb.Append('.'); 700669" />
<Node Id="25003:[15182..15229).41" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700670" />
<Node Id="25003:[15182..15229).45" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 700671" />
<Node Id="25003:[15632..15650).27" Label="sb.Append(', \''); 700672" />
<Node Id="25003:[15672..15698).17" Label="sb.Append(_squiggledText); 700673" />
<Node Id="25003:[15672..15698).18" Label="sb.Append(_squiggledText); 700674" />
<Node Id="25003:[15737..15752).27" Label="sb.Append('''); 700675" />
<Node Id="25003:[15899..15914).27" Label="sb.Append(')'); 700676" />
<Node Id="25003:[15986..16015).27" Label="sb.Append('.WithArguments('); 700677" />
<Node Id="25003:[16202..16218).69" Label="sb.Append('\''); 700678" />
<Node Id="25003:[16240..16275).46" Label="sb.Append(argumentStrings.Current); 700679" />
<Node Id="25003:[16297..16313).69" Label="sb.Append('\''); 700680" />
<Node Id="25003:[16414..16430).45" Label="sb.Append(', '); 700681" />
<Node Id="25003:[16490..16505).27" Label="sb.Append(')'); 700682" />
<Node Id="25003:[17498..17519).17" Label="return sb.ToString(); 700683" />
<Node Id="25003:[22349..22404).79" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700684" />
<Node Id="25003:[22349..22404).80" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 700685" />
<Node Id="25003:[20852..20923).15" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 700686" />
<Node Id="25003:[20952..21034).1" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 700687" />
<Node Id="25003:[20952..21034).2" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 700688" />
<Node Id="25003:[20995..21019).1" Label="assertText.AppendLine(); 700689" />
<Node Id="25003:[21050..21081).1" Label="assertText.AppendLine('Diff:'); 700690" />
<Node Id="25003:[21050..21081).3" Label="assertText.AppendLine('Diff:'); 700691" />
<Node Id="25003:[21095..21192).1" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 700692" />
<Node Id="25003:[21095..21192).2" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 700693" />
<Node Id="25012:[3121..3141).1" Label="new[] { '\r', '\n' } 700694" />
<Node Id="25012:[3129..3133).1" Label="'\r' 700695" />
<Node Id="25012:[3135..3139).1" Label="'\n' 700696" />
<Node Id="25012:[3121..3141).4" Label="new[] { '\r', '\n' } 700697" />
<Node Id="25012:[3121..3141).5" Label="new[] { '\r', '\n' } 700698" />
<Node Id="25012:[3102..3141).1" Label="s_lineSplitChars = new[] { '\r', '\n' } 700699" />
<Node Id="25003:[21095..21192).3" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 700700" />
<Node Id="25003:[21095..21192).4" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 700701" />
<Node Id="25003:[21113..21190).1" Label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 700702" />
<Node Id="25012:[2473..2496).1" Label="param DiffReport(IEnumerable$T$ expected) 700703" />
<Node Id="25012:[2498..2519).1" Label="param DiffReport(IEnumerable$T$ actual) 700704" />
<Node Id="25012:[2521..2537).1" Label="param DiffReport(string separator) 700705" />
<Node Id="25012:[2539..2575).1" Label="param DiffReport(IEqualityComparer$T$ comparer = null) 700706" />
<Node Id="25012:[2577..2608).1" Label="param DiffReport(Func$T, string$ toString = null) 700707" />
<Node Id="25012:[2634..2703).1" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 700708" />
<Node Id="25012:[2634..2703).2" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 700709" />
<Node Id="25012:[2644..2662).1" Label="(comparer != null) 700710" />
<Node Id="25012:[1074..1101).1" Label="EqualityComparer$T$.Default 700711" />
<Node Id="25012:[1063..1102).1" Label="new LCS$T$(EqualityComparer$T$.Default) 700712" />
<Node Id="25012:[1194..1223).1" Label="param LCS(IEqualityComparer$T$ comparer) 700713" />
<Node Id="25012:[1183..1293).1" Label="param LCS(this) 700714" />
<Node Id="25012:[4230..4231).1" Label="1 700715" />
<Node Id="25012:[4217..4231).1" Label="DeleteCost = 1 700716" />
<Node Id="25012:[4277..4278).1" Label="1 700717" />
<Node Id="25012:[4264..4278).1" Label="InsertCost = 1 700718" />
<Node Id="25012:[4324..4325).1" Label="2 700719" />
<Node Id="25012:[4311..4325).1" Label="UpdateCost = 2 700720" />
<Node Id="25012:[3676..10647).1" Label="param LongestCommonSubsequence(this) 700721" />
<Node Id="25012:[1157..1166).1" Label="_comparer 700722" />
<Node Id="25012:[1257..1266).1" Label="_comparer 700723" />
<Node Id="25012:[1053..1102).1" Label="Default = new LCS$T$(EqualityComparer$T$.Default) 700724" />
<Node Id="25012:[2717..2783).1" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 700725" />
<Node Id="25012:[2717..2783).3" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 700726" />
<Node Id="25012:[2799..2869).1" Label="IList$T$ expectedList = expected as IList$T$ ?? new List$T$(expected); 700727" />
<Node Id="25012:[2883..2947).1" Label="IList$T$ actualList = actual as IList$T$ ?? new List$T$(actual); 700728" />
<Node Id="25012:[2963..3048).1" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 700729" />
<Node Id="25012:[2963..3048).2" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 700730" />
<Node Id="25012:[2963..3048).3" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 700731" />
<Node Id="25012:[2963..3048).4" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 700732" />
<Node Id="25012:[2993..3046).1" Label="lcs.CalculateDiff(expectedList, actualList, toString) 700733" />
<Node Id="25012:[1574..1592).1" Label="param CalculateDiff(IList$T$ sequenceA) 700734" />
<Node Id="25012:[1594..1612).1" Label="param CalculateDiff(IList$T$ sequenceB) 700735" />
<Node Id="25012:[1614..1638).1" Label="param CalculateDiff(Func$T, string$ toString) 700736" />
<Node Id="25012:[1533..2415).1" Label="param CalculateDiff(this) 700737" />
<Node Id="25012:[1672..2400).1" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 700738" />
<Node Id="25012:[1672..2400).2" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 700739" />
<Node Id="25012:[1672..2400).3" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 700740" />
<Node Id="25012:[1672..2400).4" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 700741" />
<Node Id="25012:[1693..1757).1" Label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 700742" />
<Node Id="25012:[5394..5413).1" Label="param GetEdits(TSequence sequenceA) 700743" />
<Node Id="25012:[5415..5426).1" Label="param GetEdits(int lengthA) 700744" />
<Node Id="25012:[5428..5447).1" Label="param GetEdits(TSequence sequenceB) 700745" />
<Node Id="25012:[5449..5460).1" Label="param GetEdits(int lengthB) 700746" />
<Node Id="25012:[5357..6686).1" Label="param GetEdits(this) 700747" />
<Node Id="25012:[5494..5563).1" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 700748" />
<Node Id="25012:[5494..5563).2" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 700749" />
<Node Id="25012:[5494..5563).3" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 700750" />
<Node Id="25012:[5494..5563).4" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 700751" />
<Node Id="25012:[5505..5562).1" Label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 700752" />
<Node Id="25012:[9402..9421).1" Label="param ComputeCostMatrix(TSequence sequenceA) 700753" />
<Node Id="25012:[9423..9434).1" Label="param ComputeCostMatrix(int lengthA) 700754" />
<Node Id="25012:[9436..9455).1" Label="param ComputeCostMatrix(TSequence sequenceB) 700755" />
<Node Id="25012:[9457..9468).1" Label="param ComputeCostMatrix(int lengthB) 700756" />
<Node Id="25012:[9369..10636).1" Label="param ComputeCostMatrix(this) 700757" />
<Node Id="25012:[9502..9523).1" Label="var la = lengthA + 1; 700758" />
<Node Id="25012:[9502..9523).2" Label="var la = lengthA + 1; 700759" />
<Node Id="25012:[9541..9562).1" Label="var lb = lengthB + 1; 700760" />
<Node Id="25012:[9541..9562).2" Label="var lb = lengthB + 1; 700761" />
<Node Id="25012:[9740..9764).1" Label="var d = new int[la, lb]; 700762" />
<Node Id="25012:[9784..9796).1" Label="d[0, 0] = 0; 700763" />
<Node Id="25012:[9784..9791).1" Label="d[0, 0] 700764" />
<Node Id="25012:[9814..9943).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 700765" />
<Node Id="25012:[9814..9943).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 700766" />
<Node Id="25012:[9889..9924).1" Label="d[i, 0] = d[i - 1, 0] + DeleteCost; 700767" />
<Node Id="25012:[9889..9924).5" Label="d[i, 0] = d[i - 1, 0] + DeleteCost; 700768" />
<Node Id="25012:[9889..9896).1" Label="d[i, 0] 700769" />
<Node Id="25012:[9963..10092).1" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 700770" />
<Node Id="25012:[9963..10092).3" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 700771" />
<Node Id="25012:[10038..10073).1" Label="d[0, j] = d[0, j - 1] + InsertCost; 700772" />
<Node Id="25012:[10038..10073).5" Label="d[0, j] = d[0, j - 1] + InsertCost; 700773" />
<Node Id="25012:[10038..10045).1" Label="d[0, j] 700774" />
<Node Id="25012:[10112..10592).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 700775" />
<Node Id="25012:[10112..10592).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 700776" />
<Node Id="25012:[10187..10573).1" Label="for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    } 700777" />
<Node Id="25012:[10187..10573).3" Label="for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    } 700778" />
<Node Id="25012:[10270..10363).1" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 700779" />
<Node Id="25012:[10270..10363).5" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 700780" />
<Node Id="25012:[10270..10363).6" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 700781" />
<Node Id="25012:[10270..10363).10" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 700782" />
<Node Id="25012:[10298..10344).1" Label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 700783" />
<Node Id="25012:[1344..1362).1" Label="param ItemsEqual(IList$T$ sequenceA) 700784" />
<Node Id="25012:[1364..1374).1" Label="param ItemsEqual(int indexA) 700785" />
<Node Id="25012:[1376..1394).1" Label="param ItemsEqual(IList$T$ sequenceB) 700786" />
<Node Id="25012:[1396..1406).1" Label="param ItemsEqual(int indexB) 700787" />
<Node Id="25012:[1309..1517).1" Label="param ItemsEqual(this) 700788" />
<Node Id="25012:[1440..1502).1" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 700789" />
<Node Id="25012:[1440..1502).3" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 700790" />
<Node Id="25012:[1440..1502).5" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 700791" />
<Node Id="25012:[10270..10363).17" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 700792" />
<Node Id="25012:[10389..10423).1" Label="int m2 = d[i - 1, j] + DeleteCost; 700793" />
<Node Id="25012:[10389..10423).3" Label="int m2 = d[i - 1, j] + DeleteCost; 700794" />
<Node Id="25012:[10449..10483).1" Label="int m3 = d[i, j - 1] + InsertCost; 700795" />
<Node Id="25012:[10449..10483).3" Label="int m3 = d[i, j - 1] + InsertCost; 700796" />
<Node Id="25012:[10509..10550).1" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 700797" />
<Node Id="25012:[10509..10550).2" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 700798" />
<Node Id="25012:[10509..10550).3" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 700799" />
<Node Id="25012:[10509..10550).5" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 700800" />
<Node Id="25012:[10509..10550).6" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 700801" />
<Node Id="25012:[10509..10516).1" Label="d[i, j] 700802" />
<Node Id="25012:[10612..10621).1" Label="return d; 700803" />
<Node Id="25012:[5581..5597).1" Label="int i = lengthA; 700804" />
<Node Id="25012:[5615..5631).1" Label="int j = lengthB; 700805" />
<Node Id="25012:[5651..6341).1" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 700806" />
<Node Id="25012:[5651..6341).2" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 700807" />
<Node Id="25012:[5651..6341).4" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 700808" />
<Node Id="25012:[5651..6341).5" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 700809" />
<Node Id="25012:[5716..6322).1" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 700810" />
<Node Id="25012:[5716..6322).2" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 700811" />
<Node Id="25012:[5716..6322).4" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 700812" />
<Node Id="25012:[5931..6322).1" Label="if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 700813" />
<Node Id="25012:[5931..6322).2" Label="if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 700814" />
<Node Id="25012:[6194..6198).1" Label="i--; 700815" />
<Node Id="25012:[6224..6228).1" Label="j--; 700816" />
<Node Id="25012:[6254..6299).1" Label="yield return new Edit(EditKind.Update, i, j); 700817" />
<Node Id="25012:[6254..6299).2" Label="yield return new Edit(EditKind.Update, i, j); 700818" />
<Node Id="25012:[6254..6299).3" Label="yield return new Edit(EditKind.Update, i, j); 700819" />
<Node Id="25012:[6254..6299).4" Label="yield return new Edit(EditKind.Update, i, j); 700820" />
<Node Id="25012:[6267..6298).1" Label="new Edit(EditKind.Update, i, j) 700821" />
<Node Id="25012:[3967..3980).1" Label="param Edit(EditKind kind) 700822" />
<Node Id="25012:[3982..3992).1" Label="param Edit(int indexA) 700823" />
<Node Id="25012:[3994..4004).1" Label="param Edit(int indexB) 700824" />
<Node Id="25012:[3953..4168).1" Label="param Edit(this) 700825" />
<Node Id="25012:[4046..4055).1" Label="this.Kind 700826" />
<Node Id="25012:[4085..4096).1" Label="this.IndexA 700827" />
<Node Id="25012:[4128..4139).1" Label="this.IndexB 700828" />
<Node Id="25012:[5651..6341).11" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 700829" />
<Node Id="25012:[6254..6299).7" Label="yield return new Edit(EditKind.Update, i, j); 700830" />
<Node Id="25012:[6254..6299).8" Label="yield return new Edit(EditKind.Update, i, j); 700831" />
<Node Id="25012:[6267..6298).2" Label="new Edit(EditKind.Update, i, j) 700832" />
<Node Id="25012:[3967..3980).2" Label="param Edit(EditKind kind) 700833" />
<Node Id="25012:[3982..3992).2" Label="param Edit(int indexA) 700834" />
<Node Id="25012:[3994..4004).2" Label="param Edit(int indexB) 700835" />
<Node Id="25012:[3953..4168).2" Label="param Edit(this) 700836" />
<Node Id="25012:[4046..4055).2" Label="this.Kind 700837" />
<Node Id="25012:[4085..4096).2" Label="this.IndexA 700838" />
<Node Id="25012:[4128..4139).2" Label="this.IndexB 700839" />
<Node Id="25012:[6361..6506).1" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 700840" />
<Node Id="25012:[6361..6506).2" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 700841" />
<Node Id="25012:[6526..6671).1" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 700842" />
<Node Id="25012:[6526..6671).2" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 700843" />
<Node Id="25012:[1672..2400).7" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 700844" />
<Node Id="25012:[1809..2381).1" Label="switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    } 700845" />
<Node Id="25012:[2267..2322).1" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 700846" />
<Node Id="25012:[2267..2322).3" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 700847" />
<Node Id="25012:[2267..2322).5" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 700848" />
<Node Id="25012:[2963..3048).7" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 700849" />
<Node Id="25003:[21095..21192).10" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 700850" />
<Node Id="25003:[21208..21226).1" Label="actualText.Free(); 700851" />
<Node Id="25003:[21240..21260).1" Label="expectedText.Free(); 700852" />
<Node Id="25003:[21276..21305).1" Label="return assertText.ToString(); 700853" />
<Node Id="25002:[2401..2451).3" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 700854" />
<Node Id="25002:[4446..4475).3" Label="diagnostics.Verify(expected); 700855" />
<Node Id="25002:[4489..4523).1" Label="VerifyAssemblyIds(c, diagnostics); 700856" />
<Node Id="25002:[4489..4523).2" Label="VerifyAssemblyIds(c, diagnostics); 700857" />
<Node Id="25002:[4489..4522).1" Label="VerifyAssemblyIds(c, diagnostics) 700858" />
<Node Id="25002:[4637..4651).1" Label="param VerifyAssemblyIds(TCompilation c) 700859" />
<Node Id="25002:[4653..4691).1" Label="param VerifyAssemblyIds(ImmutableArray$Diagnostic$ diagnostics) 700860" />
<Node Id="25002:[4750..5836).1" Label="foreach (var diagnostic in diagnostics)
            {
                // If this is a diagnostic about a missing assembly, make sure that we can get back
                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about
                // a missing assembly, make sure we get no results back.
                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                }
            } 700861" />
<Node Id="25002:[5097..5821).1" Label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                } 700862" />
<Node Id="25002:[5097..5821).2" Label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                } 700863" />
<Node Id="25002:[5675..5741).1" Label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 700864" />
<Node Id="25002:[5763..5802).1" Label="CustomAssert.True(assemblyIds.IsEmpty); 700865" />
<Node Id="25002:[5763..5802).3" Label="CustomAssert.True(assemblyIds.IsEmpty); 700866" />
<Node Id="25002:[4489..4523).3" Label="VerifyAssemblyIds(c, diagnostics); 700867" />
<Node Id="25002:[4539..4548).1" Label="return c; 700868" />
</Nodes>
<Links>
<Link Source="25014:[390..448).1" Target="EXTERNAL" />
<Link Source="25014:[390..448).1" Target="25014:[387..448).1" />
<Link Source="28001:[588..156578).1" Target="25014:[387..448).1" />
<Link Source="21002:[772..793).1" Target="21002:[790..793).1" />
<Link Source="21002:[825..848).1" Target="21002:[845..848).1" />
<Link Source="21002:[3098..25375).1" Target="21002:[3243..25375).1" />
<Link Source="21002:[678..25421).1" Target="28001:[588..156578).1" />
<Link Source="21003:[1308..2835).1" Target="21003:[1338..2835).1" />
<Link Source="21003:[2871..3440).1" Target="21003:[2908..3440).1" />
<Link Source="21003:[3476..3915).1" Target="21003:[3516..3915).1" />
<Link Source="21003:[4192..4448).1" Target="21003:[4223..4448).1" />
<Link Source="21003:[4484..4746).1" Target="21003:[4518..4746).1" />
<Link Source="21003:[4782..5071).1" Target="21003:[4813..5071).1" />
<Link Source="21003:[5107..5397).1" Target="21003:[5142..5397).1" />
<Link Source="21003:[5433..5718).1" Target="21003:[5462..5718).1" />
<Link Source="21003:[5754..6038).1" Target="21003:[5787..6038).1" />
<Link Source="21003:[6074..6460).1" Target="21003:[6109..6460).1" />
<Link Source="21003:[6496..6920).1" Target="21003:[6535..6920).1" />
<Link Source="21003:[6956..7250).1" Target="21003:[6993..7250).1" />
<Link Source="21003:[7286..7557).1" Target="21003:[7321..7557).1" />
<Link Source="21003:[7593..7980).1" Target="21003:[7631..7980).1" />
<Link Source="21003:[8016..8155).1" Target="21003:[8047..8155).1" />
<Link Source="21003:[8191..8359).1" Target="21003:[8220..8359).1" />
<Link Source="21003:[8395..20279).1" Target="21003:[8415..20279).1" />
<Link Source="21003:[20315..20617).1" Target="21003:[20353..20617).1" />
<Link Source="21003:[20653..21473).1" Target="21003:[20689..21473).1" />
<Link Source="25004:[2227..2317).1" Target="EXTERNAL" />
<Link Source="25004:[2332..2368).1" Target="EXTERNAL" />
<Link Source="25004:[2183..2369).1" Target="25004:[2227..2317).1" />
<Link Source="25004:[2183..2369).1" Target="25004:[2332..2368).1" />
<Link Source="25004:[2183..2369).1" Target="EXTERNAL" />
<Link Source="25004:[2155..2369).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2602..2696).1" Target="EXTERNAL" />
<Link Source="25004:[2711..2747).1" Target="EXTERNAL" />
<Link Source="25004:[2558..2748).1" Target="25004:[2602..2696).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2711..2747).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2531..2748).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[2914..2947).1" Target="EXTERNAL" />
<Link Source="25004:[3094..3171).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[3094..3171).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[2894..3172).1" Target="25004:[3077..3172).1" />
<Link Source="25004:[5182..5218).1" Target="EXTERNAL" />
<Link Source="25004:[3446..5219).1" Target="25004:[3490..5167).1" />
<Link Source="25004:[3446..5219).1" Target="25004:[5182..5218).1" />
<Link Source="25004:[3432..5219).1" Target="25004:[3446..5219).1" />
<Link Source="25004:[5576..5645).1" Target="EXTERNAL" />
<Link Source="25004:[5660..5696).1" Target="EXTERNAL" />
<Link Source="25004:[5532..5697).1" Target="25004:[5576..5645).1" />
<Link Source="25004:[5532..5697).1" Target="25004:[5660..5696).1" />
<Link Source="25004:[5532..5697).1" Target="EXTERNAL" />
<Link Source="25004:[5508..5697).1" Target="25004:[5532..5697).1" />
<Link Source="25004:[6321..6439).1" Target="EXTERNAL" />
<Link Source="25004:[6458..6494).1" Target="EXTERNAL" />
<Link Source="25004:[6275..6495).1" Target="25004:[6321..6439).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[6458..6494).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[6244..6495).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6714..6838).1" Target="EXTERNAL" />
<Link Source="25004:[6853..6889).1" Target="EXTERNAL" />
<Link Source="25004:[6672..6890).1" Target="25004:[6714..6838).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6853..6889).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6637..6890).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7130..7249).1" Target="EXTERNAL" />
<Link Source="25004:[7264..7300).1" Target="EXTERNAL" />
<Link Source="25004:[7088..7301).1" Target="25004:[7130..7249).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[7264..7300).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7066..7301).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[7532..7667).1" Target="EXTERNAL" />
<Link Source="25004:[7682..7718).1" Target="EXTERNAL" />
<Link Source="25004:[7490..7719).1" Target="25004:[7532..7667).1" />
<Link Source="25004:[7490..7719).1" Target="25004:[7682..7718).1" />
<Link Source="25004:[7490..7719).1" Target="EXTERNAL" />
<Link Source="25004:[7464..7719).1" Target="25004:[7490..7719).1" />
<Link Source="25004:[7940..8064).1" Target="EXTERNAL" />
<Link Source="25004:[8079..8115).1" Target="EXTERNAL" />
<Link Source="25004:[7898..8116).1" Target="25004:[7940..8064).1" />
<Link Source="25004:[7898..8116).1" Target="25004:[8079..8115).1" />
<Link Source="25004:[7898..8116).1" Target="EXTERNAL" />
<Link Source="25004:[7877..8116).1" Target="25004:[7898..8116).1" />
<Link Source="25004:[8324..8442).1" Target="EXTERNAL" />
<Link Source="25004:[8457..8493).1" Target="EXTERNAL" />
<Link Source="25004:[8282..8494).1" Target="25004:[8324..8442).1" />
<Link Source="25004:[8282..8494).1" Target="25004:[8457..8493).1" />
<Link Source="25004:[8282..8494).1" Target="EXTERNAL" />
<Link Source="25004:[8264..8494).1" Target="25004:[8282..8494).1" />
<Link Source="25004:[8694..8807).1" Target="EXTERNAL" />
<Link Source="25004:[8822..8858).1" Target="EXTERNAL" />
<Link Source="25004:[8652..8859).1" Target="25004:[8694..8807).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[8822..8858).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[8636..8859).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[9063..9214).1" Target="EXTERNAL" />
<Link Source="25004:[9229..9265).1" Target="EXTERNAL" />
<Link Source="25004:[9021..9266).1" Target="25004:[9063..9214).1" />
<Link Source="25004:[9021..9266).1" Target="25004:[9229..9265).1" />
<Link Source="25004:[9021..9266).1" Target="EXTERNAL" />
<Link Source="25004:[8997..9266).1" Target="25004:[9021..9266).1" />
<Link Source="25004:[10404..10440).1" Target="EXTERNAL" />
<Link Source="25004:[9436..10441).1" Target="25004:[9478..10389).1" />
<Link Source="25004:[9436..10441).1" Target="25004:[10404..10440).1" />
<Link Source="25004:[9420..10441).1" Target="25004:[9436..10441).1" />
<Link Source="25004:[10811..10967).1" Target="EXTERNAL" />
<Link Source="25004:[10982..11018).1" Target="EXTERNAL" />
<Link Source="25004:[10769..11019).1" Target="25004:[10811..10967).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[10982..11018).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[10749..11019).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[11415..11589).1" Target="EXTERNAL" />
<Link Source="25004:[11604..11640).1" Target="EXTERNAL" />
<Link Source="25004:[11373..11641).1" Target="25004:[11415..11589).1" />
<Link Source="25004:[11373..11641).1" Target="25004:[11604..11640).1" />
<Link Source="25004:[11373..11641).1" Target="EXTERNAL" />
<Link Source="25004:[11345..11641).1" Target="25004:[11373..11641).1" />
<Link Source="25004:[12432..12560).1" Target="EXTERNAL" />
<Link Source="25004:[12575..12611).1" Target="EXTERNAL" />
<Link Source="25004:[12390..12612).1" Target="25004:[12432..12560).1" />
<Link Source="25004:[12390..12612).1" Target="25004:[12575..12611).1" />
<Link Source="25004:[12390..12612).1" Target="EXTERNAL" />
<Link Source="25004:[12369..12612).1" Target="25004:[12390..12612).1" />
<Link Source="25004:[12815..12944).1" Target="EXTERNAL" />
<Link Source="25004:[12959..12995).1" Target="EXTERNAL" />
<Link Source="25004:[12773..12996).1" Target="25004:[12815..12944).1" />
<Link Source="25004:[12773..12996).1" Target="25004:[12959..12995).1" />
<Link Source="25004:[12773..12996).1" Target="EXTERNAL" />
<Link Source="25004:[12760..12996).1" Target="25004:[12773..12996).1" />
<Link Source="25004:[13204..13343).1" Target="EXTERNAL" />
<Link Source="25004:[13358..13394).1" Target="EXTERNAL" />
<Link Source="25004:[13162..13395).1" Target="25004:[13204..13343).1" />
<Link Source="25004:[13162..13395).1" Target="25004:[13358..13394).1" />
<Link Source="25004:[13162..13395).1" Target="EXTERNAL" />
<Link Source="25004:[13138..13395).1" Target="25004:[13162..13395).1" />
<Link Source="25004:[13621..13796).1" Target="EXTERNAL" />
<Link Source="25004:[13811..13847).1" Target="EXTERNAL" />
<Link Source="25004:[13579..13848).1" Target="25004:[13621..13796).1" />
<Link Source="25004:[13579..13848).1" Target="25004:[13811..13847).1" />
<Link Source="25004:[13579..13848).1" Target="EXTERNAL" />
<Link Source="25004:[13551..13848).1" Target="25004:[13579..13848).1" />
<Link Source="25004:[14066..14175).1" Target="EXTERNAL" />
<Link Source="25004:[14190..14226).1" Target="EXTERNAL" />
<Link Source="25004:[14024..14227).1" Target="25004:[14066..14175).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[14190..14226).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[14010..14227).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14421..14531).1" Target="EXTERNAL" />
<Link Source="25004:[14546..14582).1" Target="EXTERNAL" />
<Link Source="25004:[14379..14583).1" Target="25004:[14421..14531).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14546..14582).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14361..14583).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14798..14913).1" Target="EXTERNAL" />
<Link Source="25004:[14928..14964).1" Target="EXTERNAL" />
<Link Source="25004:[14756..14965).1" Target="25004:[14798..14913).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14928..14964).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14725..14965).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15193..15301).1" Target="EXTERNAL" />
<Link Source="25004:[15316..15352).1" Target="EXTERNAL" />
<Link Source="25004:[15151..15353).1" Target="25004:[15193..15301).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[15316..15352).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15133..15353).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[15554..15670).1" Target="EXTERNAL" />
<Link Source="25004:[15685..15721).1" Target="EXTERNAL" />
<Link Source="25004:[15512..15722).1" Target="25004:[15554..15670).1" />
<Link Source="25004:[15512..15722).1" Target="25004:[15685..15721).1" />
<Link Source="25004:[15512..15722).1" Target="EXTERNAL" />
<Link Source="25004:[15495..15722).1" Target="25004:[15512..15722).1" />
<Link Source="25004:[15925..16050).1" Target="EXTERNAL" />
<Link Source="25004:[16065..16101).1" Target="EXTERNAL" />
<Link Source="25004:[15883..16102).1" Target="25004:[15925..16050).1" />
<Link Source="25004:[15883..16102).1" Target="25004:[16065..16101).1" />
<Link Source="25004:[15883..16102).1" Target="EXTERNAL" />
<Link Source="25004:[15862..16102).1" Target="25004:[15883..16102).1" />
<Link Source="25004:[16314..16416).1" Target="EXTERNAL" />
<Link Source="25004:[16431..16467).1" Target="EXTERNAL" />
<Link Source="25004:[16272..16468).1" Target="25004:[16314..16416).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[16431..16467).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[16250..16468).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[16687..16800).1" Target="EXTERNAL" />
<Link Source="25004:[16815..16851).1" Target="EXTERNAL" />
<Link Source="25004:[16645..16852).1" Target="25004:[16687..16800).1" />
<Link Source="25004:[16645..16852).1" Target="25004:[16815..16851).1" />
<Link Source="25004:[16645..16852).1" Target="EXTERNAL" />
<Link Source="25004:[16618..16852).1" Target="25004:[16645..16852).1" />
<Link Source="25004:[17083..17200).1" Target="EXTERNAL" />
<Link Source="25004:[17215..17251).1" Target="EXTERNAL" />
<Link Source="25004:[17041..17252).1" Target="25004:[17083..17200).1" />
<Link Source="25004:[17041..17252).1" Target="25004:[17215..17251).1" />
<Link Source="25004:[17041..17252).1" Target="EXTERNAL" />
<Link Source="25004:[17012..17252).1" Target="25004:[17041..17252).1" />
<Link Source="25004:[17497..17625).1" Target="EXTERNAL" />
<Link Source="25004:[17640..17676).1" Target="EXTERNAL" />
<Link Source="25004:[17455..17677).1" Target="25004:[17497..17625).1" />
<Link Source="25004:[17455..17677).1" Target="25004:[17640..17676).1" />
<Link Source="25004:[17455..17677).1" Target="EXTERNAL" />
<Link Source="25004:[17421..17677).1" Target="25004:[17455..17677).1" />
<Link Source="25004:[17911..18059).1" Target="EXTERNAL" />
<Link Source="25004:[18074..18110).1" Target="EXTERNAL" />
<Link Source="25004:[17869..18111).1" Target="25004:[17911..18059).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[18074..18110).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[17850..18111).1" Target="25004:[17869..18111).1" />
<Link Source="25004:[18321..18481).1" Target="EXTERNAL" />
<Link Source="25004:[18496..18532).1" Target="EXTERNAL" />
<Link Source="25004:[18279..18533).1" Target="25004:[18321..18481).1" />
<Link Source="25004:[18279..18533).1" Target="25004:[18496..18532).1" />
<Link Source="25004:[18279..18533).1" Target="EXTERNAL" />
<Link Source="25004:[18255..18533).1" Target="25004:[18279..18533).1" />
<Link Source="25004:[18754..18880).1" Target="EXTERNAL" />
<Link Source="25004:[18895..18931).1" Target="EXTERNAL" />
<Link Source="25004:[18712..18932).1" Target="25004:[18754..18880).1" />
<Link Source="25004:[18712..18932).1" Target="25004:[18895..18931).1" />
<Link Source="25004:[18712..18932).1" Target="EXTERNAL" />
<Link Source="25004:[18687..18932).1" Target="25004:[18712..18932).1" />
<Link Source="25004:[19120..19147).1" Target="25004:[19130..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19120..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19094..19148).1" />
<Link Source="25004:[19081..19148).1" Target="25004:[19094..19148).5" />
<Link Source="25004:[10673..10688).1" Target="EXTERNAL" />
<Link Source="25004:[10673..10688).1" Target="21003:[51329..51357).1" />
<Link Source="21003:[51307..51358).1" Target="25004:[10673..10688).1" />
<Link Source="21003:[51307..51358).1" Target="EXTERNAL" />
<Link Source="21003:[51292..51358).1" Target="21003:[51307..51358).1" />
<Link Source="21003:[56524..56550).1" Target="21003:[56538..56550).1" />
<Link Source="21003:[56584..56609).1" Target="21003:[56596..56609).1" />
<Link Source="21003:[92381..99056).1" Target="21003:[92394..99056).1" />
<Link Source="21003:[101743..102290).1" Target="21003:[101764..102290).1" />
<Link Source="21003:[1215..102298).1" Target="21002:[678..25421).1" />
<Link Source="25015:[917..26825).1" Target="21003:[1215..102298).1" />
<Link Source="25004:[926..968).1" Target="25015:[917..26825).1" />
<Link Source="25004:[908..913).1" Target="25004:[926..968).1" />
<Link Source="25004:[908..913).1" Target="25015:[917..26825).1" />
<Link Source="25014:[387..448).372" Target="25014:[387..448).1" />
<Link Source="25014:[387..448).372" Target="25014:[390..448).1" />
<Link Source="25014:[387..448).372" Target="25004:[908..913).1" />
<Link Source="28001:[74060..75308).1" Target="25014:[387..448).1" />
<Link Source="28001:[74158..74549).1" Target="25014:[387..448).1" />
<Link Source="28001:[74563..75297).1" Target="28001:[74158..74549).1" />
<Link Source="28001:[74563..75297).1" Target="25014:[387..448).1" />
<Link Source="28001:[74581..74587).1" Target="25014:[387..448).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[74563..75297).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[74581..74587).1" />
<Link Source="21004:[2290..2296).1" Target="21004:[2251..2264).1" />
<Link Source="21004:[2290..2296).1" Target="28001:[74581..74587).1" />
<Link Source="21004:[2269..2297).1" Target="28001:[74581..74587).1" />
<Link Source="21004:[839..851).1" Target="21004:[2290..2296).1" />
<Link Source="21004:[839..851).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[814..902).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[877..882).1" Target="21004:[839..851).1" />
<Link Source="21004:[877..882).1" Target="21004:[814..902).1" />
<Link Source="21004:[877..882).1" Target="21004:[2269..2297).1" />
<Link Source="28001:[74563..75297).2" Target="21004:[2269..2297).1" />
<Link Source="28001:[74563..75297).2" Target="25014:[387..448).1" />
<Link Source="28001:[74563..75297).4" Target="25014:[387..448).1" />
<Link Source="28001:[74563..74588).1" Target="25014:[387..448).1" />
<Link Source="21003:[44736..44759).1" Target="28001:[74563..75297).2" />
<Link Source="21003:[44736..44759).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[44774..44822).1" Target="28001:[74563..75297).4" />
<Link Source="21003:[44774..44822).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[44837..44876).1" Target="28001:[74563..75297).4" />
<Link Source="21003:[44837..44876).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[44891..44929).1" Target="28001:[74563..75297).4" />
<Link Source="21003:[44891..44929).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[44944..45002).1" Target="28001:[74563..75297).4" />
<Link Source="21003:[44944..45002).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45017..45041).1" Target="28001:[74563..75297).4" />
<Link Source="21003:[45017..45041).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45056..45082).1" Target="28001:[74563..75297).4" />
<Link Source="21003:[45056..45082).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45097..45128).1" Target="28001:[74563..75297).4" />
<Link Source="21003:[45097..45128).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45156..45162).1" Target="21003:[44736..44759).1" />
<Link Source="21003:[45156..45162).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45198..45213).1" Target="21003:[44944..45002).1" />
<Link Source="21003:[45198..45213).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45215..45225).1" Target="21003:[44774..44822).1" />
<Link Source="21003:[45215..45225).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45164..45226).1" Target="28001:[74563..74588).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45198..45213).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45215..45225).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9697..9732).1" Target="25005:[9600..9618).1" />
<Link Source="25005:[9697..9732).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9714..9731).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9697..9732).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[7569..7600).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[8889..8907).1" Target="25005:[7605..9525).1" />
<Link Source="25005:[6208..6241).1" Target="EXTERNAL" />
<Link Source="25005:[6208..6241).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[6270..6298).1" Target="25005:[6208..6241).1" />
<Link Source="25005:[4543..4693).1" Target="25005:[6270..6298).1" />
<Link Source="25005:[4648..4670).1" Target="25005:[6270..6298).1" />
<Link Source="25004:[12011..12051).1" Target="EXTERNAL" />
<Link Source="25004:[12011..12051).1" Target="25005:[4648..4670).1" />
<Link Source="25005:[4543..4693).7" Target="25004:[12011..12051).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[4543..4693).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[6270..6298).1" />
<Link Source="25005:[6208..6298).1" Target="25005:[4543..4693).7" />
<Link Source="25005:[6208..6298).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[9746..9845).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9620..9671).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9746..9845).1" />
<Link Source="25005:[9746..9845).2" Target="21003:[45164..45226).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[6208..6298).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[9746..9845).2" />
<Link Source="21003:[45228..45235).1" Target="21003:[44837..44876).1" />
<Link Source="21003:[45228..45235).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45237..45249).1" Target="21003:[44891..44929).1" />
<Link Source="21003:[45237..45249).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45251..45263).1" Target="21003:[45017..45041).1" />
<Link Source="21003:[45251..45263).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45265..45279).1" Target="21003:[45056..45082).1" />
<Link Source="21003:[45265..45279).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45281..45299).1" Target="21003:[45097..45128).1" />
<Link Source="21003:[45281..45299).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45133..45300).1" Target="28001:[74563..74588).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45156..45162).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45420..45468).1" Target="25005:[9812..9830).1" />
<Link Source="21003:[45420..45468).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45228..45235).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45237..45249).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45251..45263).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45265..45279).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45281..45299).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45382..45405).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45420..45468).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45483..45522).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45537..45575).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45590..45614).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45629..45655).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45670..45701).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45842..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45842..45846).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45706..45847).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45728..45734).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45736..45746).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45748..45755).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45757..45769).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45771..45783).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45785..45799).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45801..45819).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45821..45846).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[46070..46101).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[46150..46171).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46298..46349).1" Target="21003:[45706..45847).1" />
<Link Source="21004:[949..980).1" Target="21003:[46280..46350).1" />
<Link Source="21004:[949..980).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[982..1008).1" Target="21003:[46280..46350).2" />
<Link Source="21004:[982..1008).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[914..2190).1" Target="21003:[45929..45952).1" />
<Link Source="21004:[914..2190).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[914..2190).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[877..882).1" />
<Link Source="21004:[1034..2179).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1122..1208).1" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[982..1008).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[949..980).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[1034..2179).1" />
<Link Source="21004:[1137..1205).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34091..34111).1" Target="21004:[1122..1208).3" />
<Link Source="21003:[34091..34111).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34113..34146).1" Target="21004:[1122..1208).4" />
<Link Source="21003:[34113..34146).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34113..34146).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34198..34304).1" />
<Link Source="21003:[34198..34304).2" Target="21004:[1137..1205).1" />
<Link Source="21010:[590..618).1" Target="EXTERNAL" />
<Link Source="21010:[620..662).1" Target="EXTERNAL" />
<Link Source="21010:[567..663).5" Target="21010:[590..618).1" />
<Link Source="21010:[567..663).5" Target="21010:[620..662).1" />
<Link Source="21010:[567..663).5" Target="21010:[567..663).1" />
<Link Source="21010:[557..663).1" Target="21010:[567..663).5" />
<Link Source="21010:[742..763).1" Target="EXTERNAL" />
<Link Source="21010:[725..764).1" Target="21010:[557..663).1" />
<Link Source="21010:[725..764).1" Target="21010:[567..663).5" />
<Link Source="21010:[725..764).1" Target="21010:[742..763).1" />
<Link Source="21010:[716..764).1" Target="21010:[725..764).1" />
<Link Source="21010:[856..879).1" Target="EXTERNAL" />
<Link Source="21010:[828..880).1" Target="21010:[557..663).1" />
<Link Source="21010:[828..880).1" Target="21010:[567..663).5" />
<Link Source="21010:[828..880).1" Target="21010:[856..879).1" />
<Link Source="21010:[817..880).1" Target="21010:[828..880).1" />
<Link Source="21010:[972..995).1" Target="EXTERNAL" />
<Link Source="21010:[944..996).1" Target="21010:[557..663).1" />
<Link Source="21010:[944..996).1" Target="21010:[567..663).5" />
<Link Source="21010:[944..996).1" Target="21010:[972..995).1" />
<Link Source="21010:[933..996).1" Target="21010:[944..996).1" />
<Link Source="21010:[1090..1115).1" Target="EXTERNAL" />
<Link Source="21010:[1062..1116).1" Target="21010:[557..663).1" />
<Link Source="21010:[1062..1116).1" Target="21010:[567..663).5" />
<Link Source="21010:[1062..1116).1" Target="21010:[1090..1115).1" />
<Link Source="21010:[1049..1116).1" Target="21010:[1062..1116).1" />
<Link Source="21010:[1210..1235).1" Target="EXTERNAL" />
<Link Source="21010:[1182..1236).1" Target="21010:[557..663).1" />
<Link Source="21010:[1182..1236).1" Target="21010:[567..663).5" />
<Link Source="21010:[1182..1236).1" Target="21010:[1210..1235).1" />
<Link Source="21010:[1169..1236).1" Target="21010:[1182..1236).1" />
<Link Source="21010:[1330..1355).1" Target="EXTERNAL" />
<Link Source="21010:[1302..1356).1" Target="21010:[557..663).1" />
<Link Source="21010:[1302..1356).1" Target="21010:[567..663).5" />
<Link Source="21010:[1302..1356).1" Target="21010:[1330..1355).1" />
<Link Source="21010:[1289..1356).1" Target="21010:[1302..1356).1" />
<Link Source="21010:[1454..1477).1" Target="EXTERNAL" />
<Link Source="21010:[1426..1478).1" Target="21010:[557..663).1" />
<Link Source="21010:[1426..1478).1" Target="21010:[567..663).5" />
<Link Source="21010:[1426..1478).1" Target="21010:[1454..1477).1" />
<Link Source="21010:[1409..1478).1" Target="21010:[1426..1478).1" />
<Link Source="21010:[1576..1599).1" Target="EXTERNAL" />
<Link Source="21010:[1548..1600).1" Target="21010:[557..663).1" />
<Link Source="21010:[1548..1600).1" Target="21010:[567..663).5" />
<Link Source="21010:[1548..1600).1" Target="21010:[1576..1599).1" />
<Link Source="21010:[1531..1600).1" Target="21010:[1548..1600).1" />
<Link Source="21010:[1692..1715).1" Target="EXTERNAL" />
<Link Source="21010:[1664..1716).1" Target="21010:[557..663).1" />
<Link Source="21010:[1664..1716).1" Target="21010:[567..663).5" />
<Link Source="21010:[1664..1716).1" Target="21010:[1692..1715).1" />
<Link Source="21010:[1653..1716).1" Target="21010:[1664..1716).1" />
<Link Source="21010:[1808..1831).1" Target="EXTERNAL" />
<Link Source="21010:[1780..1832).1" Target="21010:[557..663).1" />
<Link Source="21010:[1780..1832).1" Target="21010:[567..663).5" />
<Link Source="21010:[1780..1832).1" Target="21010:[1808..1831).1" />
<Link Source="21010:[1769..1832).1" Target="21010:[1780..1832).1" />
<Link Source="21010:[1950..1976).1" Target="EXTERNAL" />
<Link Source="21010:[1920..1977).1" Target="21010:[557..663).1" />
<Link Source="21010:[1920..1977).1" Target="21010:[567..663).5" />
<Link Source="21010:[1920..1977).1" Target="21010:[1950..1976).1" />
<Link Source="21010:[1885..1977).1" Target="21010:[1920..1977).1" />
<Link Source="21010:[2060..2067).1" Target="21010:[557..663).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2067).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2080..2109).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7832..7853).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[7783..7814).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).2" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[7816..7830).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[7832..7853).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).3" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).4" />
<Link Source="21010:[7879..7992).5" Target="21010:[2060..2110).1" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).5" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).2" />
<Link Source="21010:[7931..7989).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).2" />
<Link Source="21010:[7879..7992).9" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[7931..7989).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[2060..2110).1" />
<Link Source="21010:[2030..2110).1" Target="21010:[7879..7992).9" />
<Link Source="21010:[2227..2274).1" Target="EXTERNAL" />
<Link Source="21010:[2227..2292).1" Target="21010:[2227..2274).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2227..2292).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2295..2296).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[557..663).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[567..663).5" />
<Link Source="21010:[2199..2297).1" Target="21010:[2227..2296).1" />
<Link Source="21010:[2163..2297).1" Target="21010:[2199..2297).1" />
<Link Source="21010:[2401..2450).1" Target="EXTERNAL" />
<Link Source="21010:[2401..2468).1" Target="21010:[2401..2450).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[557..663).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[567..663).5" />
<Link Source="21010:[2373..2469).1" Target="21010:[2401..2468).1" />
<Link Source="21010:[2350..2469).1" Target="21010:[2373..2469).1" />
<Link Source="21010:[2576..2599).1" Target="EXTERNAL" />
<Link Source="21010:[2548..2600).1" Target="21010:[557..663).1" />
<Link Source="21010:[2548..2600).1" Target="21010:[567..663).5" />
<Link Source="21010:[2548..2600).1" Target="21010:[2576..2599).1" />
<Link Source="21010:[2522..2600).1" Target="21010:[2548..2600).1" />
<Link Source="21010:[2655..2705).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[2774..2838).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2954..2982).1" Target="EXTERNAL" />
<Link Source="21010:[2984..3025).1" Target="EXTERNAL" />
<Link Source="21010:[3027..3067).1" Target="EXTERNAL" />
<Link Source="21010:[2931..3068).3" Target="21010:[2954..2982).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2984..3025).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[3027..3067).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2931..3068).1" />
<Link Source="21010:[3082..3104).1" Target="21010:[2774..2838).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2931..3068).3" />
<Link Source="21010:[2931..3105).1" Target="21010:[3082..3104).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2891..3105).1" Target="21010:[2931..3105).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3487..3556).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3524..3544).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3546..3552).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[817..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[567..663).5" />
<Link Source="21010:[3465..3557).1" Target="21010:[828..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).2" />
<Link Source="21010:[3436..3557).1" Target="21010:[3465..3557).1" />
<Link Source="21010:[3612..3656).1" Target="21010:[1289..1356).1" />
<Link Source="21010:[3709..3748).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3801..3844).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3897..3943).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[4035..4070).1" Target="EXTERNAL" />
<Link Source="21010:[4072..4097).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).1" Target="21010:[4035..4070).1" />
<Link Source="21010:[10204..10225).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4072..4097).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10264..10288).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[10204..10225).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[10227..10262).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10385..10425).1" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[10264..10288).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10335..10345).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10347..10383).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10385..10425).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10427..10451).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10306..10452).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[4017..4098).1" />
<Link Source="21010:[4004..4098).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4188..4217).1" Target="EXTERNAL" />
<Link Source="21010:[4219..4244).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).2" Target="21010:[4188..4217).1" />
<Link Source="21010:[10204..10225).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4219..4244).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10264..10288).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10335..10345).2" Target="21010:[10204..10225).2" />
<Link Source="21010:[10335..10345).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10347..10383).2" Target="21010:[10227..10262).2" />
<Link Source="21010:[10347..10383).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10385..10425).2" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10427..10451).2" Target="21010:[10264..10288).2" />
<Link Source="21010:[10427..10451).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).49" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).95" Target="21010:[10335..10345).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10347..10383).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10385..10425).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10427..10451).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10306..10452).49" />
<Link Source="21010:[10306..10452).95" Target="21010:[4170..4245).1" />
<Link Source="21010:[4157..4245).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4324..4358).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[4324..4358).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4324..4358).1" Target="21010:[4353..4357).1" />
<Link Source="21010:[4306..4358).1" Target="21010:[4324..4358).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4437..4471).1" Target="21010:[4466..4470).1" />
<Link Source="21010:[4419..4471).1" Target="21010:[4437..4471).1" />
<Link Source="21010:[4561..4596).1" Target="EXTERNAL" />
<Link Source="21010:[4598..4621).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).3" Target="21010:[4561..4596).1" />
<Link Source="21010:[10204..10225).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4598..4621).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10264..10288).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10335..10345).3" Target="21010:[10204..10225).3" />
<Link Source="21010:[10335..10345).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10347..10383).3" Target="21010:[10227..10262).3" />
<Link Source="21010:[10347..10383).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10385..10425).3" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10427..10451).3" Target="21010:[10264..10288).3" />
<Link Source="21010:[10427..10451).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).97" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).143" Target="21010:[10335..10345).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10347..10383).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10385..10425).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10427..10451).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10306..10452).97" />
<Link Source="21010:[10306..10452).143" Target="21010:[4543..4622).1" />
<Link Source="21010:[4532..4622).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[4710..4739).1" Target="EXTERNAL" />
<Link Source="21010:[4741..4764).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).4" Target="21010:[4710..4739).1" />
<Link Source="21010:[10204..10225).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4741..4764).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10264..10288).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10335..10345).4" Target="21010:[10204..10225).4" />
<Link Source="21010:[10335..10345).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10347..10383).4" Target="21010:[10227..10262).4" />
<Link Source="21010:[10347..10383).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10385..10425).4" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10427..10451).4" Target="21010:[10264..10288).4" />
<Link Source="21010:[10427..10451).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).145" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).191" Target="21010:[10335..10345).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10347..10383).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10385..10425).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10427..10451).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10306..10452).145" />
<Link Source="21010:[10306..10452).191" Target="21010:[4692..4765).1" />
<Link Source="21010:[4681..4765).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[4859..4892).1" Target="EXTERNAL" />
<Link Source="21010:[4894..4919).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).5" Target="21010:[4859..4892).1" />
<Link Source="21010:[10204..10225).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4894..4919).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10264..10288).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10335..10345).5" Target="21010:[10204..10225).5" />
<Link Source="21010:[10335..10345).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10347..10383).5" Target="21010:[10227..10262).5" />
<Link Source="21010:[10347..10383).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10385..10425).5" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10427..10451).5" Target="21010:[10264..10288).5" />
<Link Source="21010:[10427..10451).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).193" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).239" Target="21010:[10335..10345).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10347..10383).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10385..10425).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10427..10451).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10306..10452).193" />
<Link Source="21010:[10306..10452).239" Target="21010:[4841..4920).1" />
<Link Source="21010:[4826..4920).1" Target="21010:[10306..10452).239" />
<Link Source="21010:[5010..5043).1" Target="EXTERNAL" />
<Link Source="21010:[5045..5068).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).6" Target="21010:[5010..5043).1" />
<Link Source="21010:[10204..10225).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[5045..5068).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10264..10288).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10335..10345).6" Target="21010:[10204..10225).6" />
<Link Source="21010:[10335..10345).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10347..10383).6" Target="21010:[10227..10262).6" />
<Link Source="21010:[10347..10383).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10385..10425).6" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10427..10451).6" Target="21010:[10264..10288).6" />
<Link Source="21010:[10427..10451).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).241" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).287" Target="21010:[10335..10345).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10347..10383).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10385..10425).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10427..10451).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10306..10452).241" />
<Link Source="21010:[10306..10452).287" Target="21010:[4992..5069).1" />
<Link Source="21010:[4979..5069).1" Target="21010:[10306..10452).287" />
<Link Source="21010:[5164..5184).1" Target="EXTERNAL" />
<Link Source="21010:[5186..5211).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).7" Target="21010:[5164..5184).1" />
<Link Source="21010:[10204..10225).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5186..5211).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10264..10288).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10335..10345).7" Target="21010:[10204..10225).7" />
<Link Source="21010:[10335..10345).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10347..10383).7" Target="21010:[10227..10262).7" />
<Link Source="21010:[10347..10383).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10385..10425).7" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10427..10451).7" Target="21010:[10264..10288).7" />
<Link Source="21010:[10427..10451).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).289" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).335" Target="21010:[10335..10345).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10347..10383).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10385..10425).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10427..10451).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10306..10452).289" />
<Link Source="21010:[10306..10452).335" Target="21010:[5146..5212).1" />
<Link Source="21010:[5130..5212).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[5303..5323).1" Target="EXTERNAL" />
<Link Source="21010:[5325..5348).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).8" Target="21010:[5303..5323).1" />
<Link Source="21010:[10204..10225).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5325..5348).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10264..10288).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10335..10345).8" Target="21010:[10204..10225).8" />
<Link Source="21010:[10335..10345).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10347..10383).8" Target="21010:[10227..10262).8" />
<Link Source="21010:[10347..10383).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10385..10425).8" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10427..10451).8" Target="21010:[10264..10288).8" />
<Link Source="21010:[10427..10451).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).337" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).383" Target="21010:[10335..10345).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10347..10383).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10385..10425).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10427..10451).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10306..10452).337" />
<Link Source="21010:[10306..10452).383" Target="21010:[5285..5349).1" />
<Link Source="21010:[5271..5349).1" Target="21010:[10306..10452).383" />
<Link Source="21010:[5429..5461).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5429..5461).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5429..5461).1" Target="21010:[5456..5460).1" />
<Link Source="21010:[5410..5461).1" Target="21010:[5429..5461).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[5539..5571).1" Target="21010:[5566..5570).1" />
<Link Source="21010:[5520..5571).1" Target="21010:[5539..5571).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[5649..5679).1" Target="21010:[5674..5678).1" />
<Link Source="21010:[5632..5679).1" Target="21010:[5649..5679).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[4681..4765).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[5755..5785).1" Target="21010:[5780..5784).1" />
<Link Source="21010:[5738..5785).1" Target="21010:[5755..5785).1" />
<Link Source="21010:[5900..5951).1" Target="EXTERNAL" />
<Link Source="21010:[5866..5952).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5866..5952).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5866..5952).1" Target="21010:[5900..5951).1" />
<Link Source="21010:[5866..5952).1" Target="EXTERNAL" />
<Link Source="21010:[5846..5952).1" Target="21010:[5866..5952).1" />
<Link Source="21010:[6065..6116).1" Target="EXTERNAL" />
<Link Source="21010:[6031..6117).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[6031..6117).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[6031..6117).1" Target="21010:[6065..6116).1" />
<Link Source="21010:[6031..6117).1" Target="EXTERNAL" />
<Link Source="21010:[6011..6117).1" Target="21010:[6031..6117).1" />
<Link Source="21010:[6236..6287).1" Target="EXTERNAL" />
<Link Source="21010:[6199..6288).1" Target="21010:[5130..5212).1" />
<Link Source="21010:[6199..6288).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[6199..6288).1" Target="21010:[6236..6287).1" />
<Link Source="21010:[6199..6288).1" Target="EXTERNAL" />
<Link Source="21010:[6176..6288).1" Target="21010:[6199..6288).1" />
<Link Source="21010:[6397..6448).1" Target="EXTERNAL" />
<Link Source="21010:[6365..6449).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[6365..6449).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[6365..6449).1" Target="21010:[6397..6448).1" />
<Link Source="21010:[6365..6449).1" Target="EXTERNAL" />
<Link Source="21010:[6347..6449).1" Target="21010:[6365..6449).1" />
<Link Source="21010:[6560..6586).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="21010:[6560..6586).1" />
<Link Source="21010:[6497..6587).1" Target="21010:[6513..6587).1" />
<Link Source="21003:[34259..34289).1" Target="21010:[557..663).1" />
<Link Source="21003:[34259..34289).1" Target="21003:[34198..34304).2" />
<Link Source="21003:[34320..34386).1" Target="21003:[34078..34089).1" />
<Link Source="21003:[34320..34386).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).2" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).3" Target="21003:[34320..34386).2" />
<Link Source="21003:[34320..34386).3" Target="21003:[34148..34172).1" />
<Link Source="21003:[34320..34386).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).5" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).3" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).5" />
<Link Source="21003:[34320..34386).7" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).7" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).1" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).2" Target="21003:[34259..34289).1" />
<Link Source="21003:[34400..34487).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).3" Target="21003:[34091..34111).1" />
<Link Source="21003:[34400..34487).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).4" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).2" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).3" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).4" />
<Link Source="21003:[34400..34487).6" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).6" Target="21010:[567..663).5" />
<Link Source="21003:[34400..34487).6" Target="21004:[1137..1205).1" />
<Link Source="21003:[34407..34486).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34554..34569).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[34554..34569).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34595..34627).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34554..34569).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34400..34487).6" />
<Link Source="21003:[34641..34667).3" Target="21003:[34641..34667).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).3" />
<Link Source="21003:[34681..34706).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).2" />
<Link Source="21003:[34681..34706).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34740).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34720..34740).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).2" />
<Link Source="21003:[34754..34818).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34720..34735).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34554..34569).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34407..34486).1" />
<Link Source="21004:[1129..1207).1" Target="21003:[34832..34844).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1122..1208).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[46280..46350).3" Target="21004:[1122..1208).1" />
<Link Source="21003:[46280..46350).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46023..46055).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46366..46650).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46419..46533).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[46419..46533).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).2" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).2" />
<Link Source="21003:[46419..46533).4" Target="21004:[1122..1208).1" />
<Link Source="21003:[46419..46533).4" Target="21004:[1129..1207).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[46419..46533).4" Target="21003:[46366..46650).2" />
<Link Source="21003:[46563..46584).1" Target="21003:[46419..46533).4" />
<Link Source="21003:[46563..46584).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46553..46635).1" Target="21010:[4004..4098).1" />
<Link Source="21003:[46553..46635).1" Target="21003:[46563..46584).1" />
<Link Source="21003:[46755..46872).1" Target="EXTERNAL" />
<Link Source="21003:[46755..46872).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[46224..46254).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46116..46135).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[47082..47319).1" Target="21003:[45967..46008).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46553..46635).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47399).1" Target="21003:[45706..45847).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47400).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11613..11696).1" Target="EXTERNAL" />
<Link Source="25006:[11613..11696).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11674..11681).1" Target="25006:[11613..11696).1" />
<Link Source="21003:[47333..47400).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1129..1207).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).7" />
<Link Source="21003:[47414..47458).1" Target="EXTERNAL" />
<Link Source="21003:[47414..47458).1" Target="21010:[10306..10452).47" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).2" Target="21003:[45706..45847).1" />
<Link Source="25004:[1041..1077).1" Target="21003:[47414..47458).2" />
<Link Source="21003:[47414..47458).4" Target="21003:[47414..47458).1" />
<Link Source="21003:[47414..47458).4" Target="25004:[1041..1077).1" />
<Link Source="21003:[47414..47458).4" Target="21003:[45706..45847).1" />
<Link Source="21003:[47689..47930).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47689..47930).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47717..47747).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47689..47930).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[48025..48054).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48175..48211).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[48175..48211).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48225..48313).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48175..48211).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48327..48378).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[47414..47458).4" />
<Link Source="21003:[48327..48378).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).1" Target="EXTERNAL" />
<Link Source="21003:[48392..48469).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[48327..48378).2" />
<Link Source="21003:[48392..48469).2" Target="21003:[48392..48469).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[46186..46209).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[48392..48469).2" />
<Link Source="21003:[47689..47930).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[47944..47963).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47944..47963).1" Target="21003:[45706..45847).1" />
<Link Source="28001:[74563..75297).21" Target="EXTERNAL" />
<Link Source="28001:[74563..75297).21" Target="25014:[387..448).1" />
<Link Source="28001:[74749..74798).1" Target="25014:[387..448).1" />
<Link Source="25004:[19277..19288).1" Target="28001:[74563..75297).21" />
<Link Source="25004:[19277..19288).1" Target="28001:[74749..74798).1" />
<Link Source="25004:[19303..19330).1" Target="28001:[74563..75297).4" />
<Link Source="25004:[19303..19330).1" Target="28001:[74749..74798).1" />
<Link Source="25004:[19345..19370).1" Target="28001:[74563..75297).4" />
<Link Source="25004:[19345..19370).1" Target="28001:[74749..74798).1" />
<Link Source="25004:[19385..19419).1" Target="28001:[74563..75297).4" />
<Link Source="25004:[19385..19419).1" Target="28001:[74749..74798).1" />
<Link Source="25004:[19434..19483).1" Target="28001:[74563..75297).4" />
<Link Source="25004:[19434..19483).1" Target="28001:[74749..74798).1" />
<Link Source="25004:[19498..19537).1" Target="28001:[74563..75297).4" />
<Link Source="25004:[19498..19537).1" Target="28001:[74749..74798).1" />
<Link Source="25004:[19552..19577).1" Target="28001:[74563..75297).4" />
<Link Source="25004:[19552..19577).1" Target="28001:[74749..74798).1" />
<Link Source="25004:[19603..19877).1" Target="25004:[19277..19288).1" />
<Link Source="25004:[19603..19877).1" Target="28001:[74749..74798).1" />
<Link Source="25004:[19603..19877).2" Target="25004:[19303..19330).1" />
<Link Source="25004:[19603..19877).2" Target="28001:[74749..74798).1" />
<Link Source="25004:[19603..19877).3" Target="25004:[19345..19370).1" />
<Link Source="25004:[19603..19877).3" Target="28001:[74749..74798).1" />
<Link Source="25004:[19603..19877).4" Target="25004:[19385..19419).1" />
<Link Source="25004:[19603..19877).4" Target="28001:[74749..74798).1" />
<Link Source="25004:[19603..19877).5" Target="25004:[19434..19483).1" />
<Link Source="25004:[19603..19877).5" Target="28001:[74749..74798).1" />
<Link Source="25004:[19603..19877).6" Target="25004:[19498..19537).1" />
<Link Source="25004:[19603..19877).6" Target="28001:[74749..74798).1" />
<Link Source="25004:[19603..19877).7" Target="25004:[19552..19577).1" />
<Link Source="25004:[19603..19877).7" Target="28001:[74749..74798).1" />
<Link Source="25004:[19610..19876).1" Target="28001:[74749..74798).1" />
<Link Source="25007:[3334..3345).1" Target="25004:[19603..19877).1" />
<Link Source="25007:[3334..3345).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3360..3387).1" Target="25004:[19603..19877).2" />
<Link Source="25007:[3360..3387).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3402..3427).1" Target="25004:[19603..19877).3" />
<Link Source="25007:[3402..3427).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3442..3476).1" Target="25004:[19603..19877).4" />
<Link Source="25007:[3442..3476).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3491..3540).1" Target="25004:[19603..19877).5" />
<Link Source="25007:[3491..3540).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3555..3594).1" Target="25004:[19603..19877).6" />
<Link Source="25007:[3555..3594).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3609..3634).1" Target="25004:[19603..19877).7" />
<Link Source="25007:[3609..3634).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3660..3885).1" Target="25007:[3334..3345).1" />
<Link Source="25007:[3660..3885).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).1" Target="25007:[3334..3345).1" />
<Link Source="25007:[3901..4266).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).4" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).6" Target="25007:[3360..3387).1" />
<Link Source="25007:[3901..4266).6" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).7" Target="25007:[3402..3427).1" />
<Link Source="25007:[3901..4266).7" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).8" Target="25007:[3442..3476).1" />
<Link Source="25007:[3901..4266).8" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).9" Target="25007:[3491..3540).1" />
<Link Source="25007:[3901..4266).9" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).10" Target="25007:[3555..3594).1" />
<Link Source="25007:[3901..4266).10" Target="25004:[19610..19876).1" />
<Link Source="25003:[740..750).1" Target="25003:[747..750).1" />
<Link Source="25003:[808..818).1" Target="25003:[814..818).1" />
<Link Source="25007:[3901..4266).13" Target="25007:[3609..3634).1" />
<Link Source="25007:[3901..4266).13" Target="25004:[19610..19876).1" />
<Link Source="25007:[3908..4265).1" Target="25004:[19610..19876).1" />
<Link Source="25003:[2816..2827).1" Target="25007:[3901..4266).1" />
<Link Source="25003:[2816..2827).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2842..2863).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[2842..2863).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2878..2898).1" Target="25007:[3901..4266).6" />
<Link Source="25003:[2878..2898).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2913..2931).1" Target="25007:[3901..4266).7" />
<Link Source="25003:[2913..2931).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2946..2973).1" Target="25007:[3901..4266).8" />
<Link Source="25003:[2946..2973).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2988..3030).1" Target="25007:[3901..4266).9" />
<Link Source="25003:[2988..3030).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3045..3076).1" Target="25007:[3901..4266).10" />
<Link Source="25003:[3045..3076).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3091..3116).1" Target="25007:[3901..4266).1" />
<Link Source="25003:[3091..3116).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3131..3176).1" Target="25007:[3901..4266).13" />
<Link Source="25003:[3131..3176).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3191..3238).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[3191..3238).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3253..3278).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[3253..3278).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2773..3850).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[2773..3850).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[912..917).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[912..917).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[950..967).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[950..967).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1000..1013).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1000..1013).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1048..1062).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1048..1062).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1099..1109).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1099..1109).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1151..1165).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1151..1165).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1276..1303).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1276..1303).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1336..1350).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1336..1350).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1383..1412).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1383..1412).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1460..1479).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1460..1479).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1527..1548).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1527..1548).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1673..1689).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1673..1689).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1713..1727).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1713..1727).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1891..1900).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1891..1900).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1941..1960).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1941..1960).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3304..3309).1" Target="25003:[2816..2827).1" />
<Link Source="25003:[3304..3309).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3304..3309).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3331..3348).1" Target="25003:[2842..2863).1" />
<Link Source="25003:[3331..3348).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3331..3348).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3382..3396).1" Target="25003:[2878..2898).1" />
<Link Source="25003:[3382..3396).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3382..3396).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3427..3437).1" Target="25003:[2913..2931).1" />
<Link Source="25003:[3427..3437).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3427..3437).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3464..3478).1" Target="25003:[2946..2973).1" />
<Link Source="25003:[3464..3478).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3464..3478).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3509..3525).1" Target="25003:[2988..3030).1" />
<Link Source="25003:[3509..3525).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3509..3525).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3562..3589).1" Target="25003:[3045..3076).1" />
<Link Source="25003:[3562..3589).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3562..3589).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3633..3682).1" Target="25003:[3091..3116).1" />
<Link Source="25003:[3633..3682).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3633..3647).1" Target="25003:[3633..3682).1" />
<Link Source="25003:[3633..3647).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3633..3647).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3696..3715).1" Target="25003:[3131..3176).1" />
<Link Source="25003:[3696..3715).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3696..3715).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3751..3772).1" Target="25003:[3191..3238).1" />
<Link Source="25003:[3751..3772).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3751..3772).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3810..3823).1" Target="25003:[3253..3278).1" />
<Link Source="25003:[3810..3823).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3810..3823).1" Target="25007:[3908..4265).1" />
<Link Source="25004:[19603..19877).8" Target="25007:[3901..4266).4" />
<Link Source="25004:[19603..19877).8" Target="28001:[74749..74798).1" />
<Link Source="28001:[74563..75297).34" Target="25004:[19603..19877).8" />
<Link Source="28001:[74563..75297).34" Target="25014:[387..448).1" />
<Link Source="28001:[74749..74835).1" Target="28001:[74563..75297).4" />
<Link Source="28001:[74749..74835).1" Target="25014:[387..448).1" />
<Link Source="28001:[74749..74835).4" Target="25014:[387..448).1" />
<Link Source="25003:[7407..7432).1" Target="28001:[74563..75297).4" />
<Link Source="25003:[7407..7432).1" Target="28001:[74749..74835).4" />
<Link Source="25003:[7364..7671).1" Target="28001:[74563..75297).34" />
<Link Source="25003:[7364..7671).1" Target="28001:[74749..74835).4" />
<Link Source="25003:[7458..7660).1" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).1" Target="25003:[3304..3309).1" />
<Link Source="25003:[7458..7660).1" Target="28001:[74749..74835).4" />
<Link Source="25003:[7458..7660).2" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).2" Target="25003:[3331..3348).1" />
<Link Source="25003:[7458..7660).2" Target="28001:[74749..74835).4" />
<Link Source="25003:[7458..7660).3" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).3" Target="25003:[3382..3396).1" />
<Link Source="25003:[7458..7660).3" Target="28001:[74749..74835).4" />
<Link Source="25003:[7458..7660).4" Target="25003:[7407..7432).1" />
<Link Source="25003:[7458..7660).4" Target="28001:[74749..74835).4" />
<Link Source="25003:[7458..7660).5" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).5" Target="25003:[3464..3478).1" />
<Link Source="25003:[7458..7660).5" Target="28001:[74749..74835).4" />
<Link Source="25003:[7458..7660).6" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).6" Target="25003:[3509..3525).1" />
<Link Source="25003:[7458..7660).6" Target="28001:[74749..74835).4" />
<Link Source="25003:[7458..7660).7" Target="28001:[74749..74835).4" />
<Link Source="25003:[7458..7660).9" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).9" Target="25003:[3633..3647).1" />
<Link Source="25003:[7458..7660).9" Target="28001:[74749..74835).4" />
<Link Source="25003:[7458..7660).10" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).10" Target="25003:[3696..3715).1" />
<Link Source="25003:[7458..7660).10" Target="28001:[74749..74835).4" />
<Link Source="25003:[7458..7660).11" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).11" Target="25003:[3751..3772).1" />
<Link Source="25003:[7458..7660).11" Target="28001:[74749..74835).4" />
<Link Source="25003:[7458..7660).12" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).12" Target="25003:[3810..3823).1" />
<Link Source="25003:[7458..7660).12" Target="28001:[74749..74835).4" />
<Link Source="25003:[7465..7659).1" Target="28001:[74749..74835).4" />
<Link Source="25003:[2816..2827).2" Target="25003:[7458..7660).1" />
<Link Source="25003:[2816..2827).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2842..2863).2" Target="25003:[7458..7660).2" />
<Link Source="25003:[2842..2863).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2878..2898).2" Target="25003:[7458..7660).3" />
<Link Source="25003:[2878..2898).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2913..2931).2" Target="25003:[7458..7660).4" />
<Link Source="25003:[2913..2931).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2946..2973).2" Target="25003:[7458..7660).5" />
<Link Source="25003:[2946..2973).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2988..3030).2" Target="25003:[7458..7660).6" />
<Link Source="25003:[2988..3030).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3045..3076).2" Target="25003:[7458..7660).7" />
<Link Source="25003:[3045..3076).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3091..3116).2" Target="25003:[7458..7660).9" />
<Link Source="25003:[3091..3116).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3131..3176).2" Target="25003:[7458..7660).10" />
<Link Source="25003:[3131..3176).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3191..3238).2" Target="25003:[7458..7660).11" />
<Link Source="25003:[3191..3238).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3253..3278).2" Target="25003:[7458..7660).12" />
<Link Source="25003:[3253..3278).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2773..3850).2" Target="25003:[7458..7660).7" />
<Link Source="25003:[2773..3850).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[912..917).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[912..917).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[950..967).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[950..967).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1000..1013).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1000..1013).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1048..1062).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1048..1062).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1099..1109).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1099..1109).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1151..1165).4" Target="25003:[2773..3850).2" />
<Link Source="25003:[1151..1165).4" Target="25003:[7465..7659).1" />
<Link Source="25003:[1276..1303).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1276..1303).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1336..1350).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1336..1350).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1383..1412).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1383..1412).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1460..1479).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1460..1479).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1527..1548).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1527..1548).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1673..1689).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1673..1689).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1713..1727).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1713..1727).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1891..1900).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1891..1900).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1941..1960).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1941..1960).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3427..3437).2" Target="25003:[2913..2931).2" />
<Link Source="25003:[3427..3437).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[3427..3437).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3562..3589).2" Target="25003:[3045..3076).2" />
<Link Source="25003:[3562..3589).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[3562..3589).2" Target="25003:[7465..7659).1" />
<Link Source="28001:[74563..75297).42" Target="25003:[7458..7660).7" />
<Link Source="28001:[74563..75297).42" Target="25014:[387..448).1" />
<Link Source="28001:[74978..75017).1" Target="25014:[387..448).1" />
<Link Source="25004:[19277..19288).2" Target="28001:[74563..75297).21" />
<Link Source="25004:[19277..19288).2" Target="28001:[74978..75017).1" />
<Link Source="25004:[19303..19330).2" Target="28001:[74563..75297).4" />
<Link Source="25004:[19303..19330).2" Target="28001:[74978..75017).1" />
<Link Source="25004:[19345..19370).2" Target="28001:[74563..75297).4" />
<Link Source="25004:[19345..19370).2" Target="28001:[74978..75017).1" />
<Link Source="25004:[19385..19419).2" Target="28001:[74563..75297).4" />
<Link Source="25004:[19385..19419).2" Target="28001:[74978..75017).1" />
<Link Source="25004:[19434..19483).2" Target="28001:[74563..75297).4" />
<Link Source="25004:[19434..19483).2" Target="28001:[74978..75017).1" />
<Link Source="25004:[19498..19537).2" Target="28001:[74563..75297).4" />
<Link Source="25004:[19498..19537).2" Target="28001:[74978..75017).1" />
<Link Source="25004:[19552..19577).2" Target="28001:[74563..75297).4" />
<Link Source="25004:[19552..19577).2" Target="28001:[74978..75017).1" />
<Link Source="25004:[19603..19877).10" Target="25004:[19277..19288).2" />
<Link Source="25004:[19603..19877).10" Target="28001:[74978..75017).1" />
<Link Source="25004:[19603..19877).11" Target="25004:[19303..19330).2" />
<Link Source="25004:[19603..19877).11" Target="28001:[74978..75017).1" />
<Link Source="25004:[19603..19877).12" Target="25004:[19345..19370).2" />
<Link Source="25004:[19603..19877).12" Target="28001:[74978..75017).1" />
<Link Source="25004:[19603..19877).13" Target="25004:[19385..19419).2" />
<Link Source="25004:[19603..19877).13" Target="28001:[74978..75017).1" />
<Link Source="25004:[19603..19877).14" Target="25004:[19434..19483).2" />
<Link Source="25004:[19603..19877).14" Target="28001:[74978..75017).1" />
<Link Source="25004:[19603..19877).15" Target="25004:[19498..19537).2" />
<Link Source="25004:[19603..19877).15" Target="28001:[74978..75017).1" />
<Link Source="25004:[19603..19877).16" Target="25004:[19552..19577).2" />
<Link Source="25004:[19603..19877).16" Target="28001:[74978..75017).1" />
<Link Source="25004:[19610..19876).2" Target="28001:[74978..75017).1" />
<Link Source="25007:[3334..3345).2" Target="25004:[19603..19877).10" />
<Link Source="25007:[3334..3345).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3360..3387).2" Target="25004:[19603..19877).11" />
<Link Source="25007:[3360..3387).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3402..3427).2" Target="25004:[19603..19877).12" />
<Link Source="25007:[3402..3427).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3442..3476).2" Target="25004:[19603..19877).13" />
<Link Source="25007:[3442..3476).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3491..3540).2" Target="25004:[19603..19877).14" />
<Link Source="25007:[3491..3540).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3555..3594).2" Target="25004:[19603..19877).15" />
<Link Source="25007:[3555..3594).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3609..3634).2" Target="25004:[19603..19877).16" />
<Link Source="25007:[3609..3634).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3660..3885).6" Target="25007:[3334..3345).2" />
<Link Source="25007:[3660..3885).6" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).20" Target="25007:[3334..3345).2" />
<Link Source="25007:[3901..4266).20" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).23" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).25" Target="25007:[3360..3387).2" />
<Link Source="25007:[3901..4266).25" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).26" Target="25007:[3402..3427).2" />
<Link Source="25007:[3901..4266).26" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).27" Target="25007:[3442..3476).2" />
<Link Source="25007:[3901..4266).27" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).28" Target="25007:[3491..3540).2" />
<Link Source="25007:[3901..4266).28" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).29" Target="25007:[3555..3594).2" />
<Link Source="25007:[3901..4266).29" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).32" Target="25007:[3609..3634).2" />
<Link Source="25007:[3901..4266).32" Target="25004:[19610..19876).2" />
<Link Source="25007:[3908..4265).2" Target="25004:[19610..19876).2" />
<Link Source="25003:[2816..2827).3" Target="25007:[3901..4266).20" />
<Link Source="25003:[2816..2827).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[2842..2863).3" Target="25007:[3901..4266).23" />
<Link Source="25003:[2842..2863).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[2878..2898).3" Target="25007:[3901..4266).25" />
<Link Source="25003:[2878..2898).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[2913..2931).3" Target="25007:[3901..4266).26" />
<Link Source="25003:[2913..2931).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[2946..2973).3" Target="25007:[3901..4266).27" />
<Link Source="25003:[2946..2973).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[2988..3030).3" Target="25007:[3901..4266).28" />
<Link Source="25003:[2988..3030).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3045..3076).3" Target="25007:[3901..4266).29" />
<Link Source="25003:[3045..3076).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3091..3116).3" Target="25007:[3901..4266).20" />
<Link Source="25003:[3091..3116).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3131..3176).3" Target="25007:[3901..4266).32" />
<Link Source="25003:[3131..3176).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3191..3238).3" Target="25007:[3901..4266).23" />
<Link Source="25003:[3191..3238).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3253..3278).3" Target="25007:[3901..4266).23" />
<Link Source="25003:[3253..3278).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[2773..3850).3" Target="25007:[3901..4266).23" />
<Link Source="25003:[2773..3850).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[912..917).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[912..917).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[950..967).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[950..967).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1000..1013).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1000..1013).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1048..1062).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1048..1062).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1099..1109).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1099..1109).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1151..1165).7" Target="25003:[2773..3850).3" />
<Link Source="25003:[1151..1165).7" Target="25007:[3908..4265).2" />
<Link Source="25003:[1276..1303).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1276..1303).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1336..1350).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1336..1350).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1383..1412).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1383..1412).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1460..1479).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1460..1479).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1527..1548).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1527..1548).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1673..1689).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1673..1689).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1713..1727).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1713..1727).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1891..1900).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1891..1900).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1941..1960).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1941..1960).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3304..3309).3" Target="25003:[2816..2827).3" />
<Link Source="25003:[3304..3309).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3304..3309).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3331..3348).3" Target="25003:[2842..2863).3" />
<Link Source="25003:[3331..3348).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3331..3348).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3382..3396).3" Target="25003:[2878..2898).3" />
<Link Source="25003:[3382..3396).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3382..3396).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3427..3437).3" Target="25003:[2913..2931).3" />
<Link Source="25003:[3427..3437).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3427..3437).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3464..3478).3" Target="25003:[2946..2973).3" />
<Link Source="25003:[3464..3478).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3464..3478).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3509..3525).3" Target="25003:[2988..3030).3" />
<Link Source="25003:[3509..3525).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3509..3525).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3562..3589).3" Target="25003:[3045..3076).3" />
<Link Source="25003:[3562..3589).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3562..3589).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3633..3682).3" Target="25003:[3091..3116).3" />
<Link Source="25003:[3633..3682).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3633..3647).3" Target="25003:[3633..3682).3" />
<Link Source="25003:[3633..3647).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3633..3647).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3696..3715).3" Target="25003:[3131..3176).3" />
<Link Source="25003:[3696..3715).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3696..3715).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3751..3772).3" Target="25003:[3191..3238).3" />
<Link Source="25003:[3751..3772).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3751..3772).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3810..3823).3" Target="25003:[3253..3278).3" />
<Link Source="25003:[3810..3823).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3810..3823).3" Target="25007:[3908..4265).2" />
<Link Source="25004:[19603..19877).17" Target="25007:[3901..4266).23" />
<Link Source="25004:[19603..19877).17" Target="28001:[74978..75017).1" />
<Link Source="28001:[74563..75297).56" Target="25004:[19603..19877).17" />
<Link Source="28001:[74563..75297).56" Target="25014:[387..448).1" />
<Link Source="28001:[74978..75054).1" Target="28001:[74563..75297).4" />
<Link Source="28001:[74978..75054).1" Target="25014:[387..448).1" />
<Link Source="28001:[74978..75054).4" Target="25014:[387..448).1" />
<Link Source="25003:[7407..7432).2" Target="28001:[74563..75297).4" />
<Link Source="25003:[7407..7432).2" Target="28001:[74978..75054).4" />
<Link Source="25003:[7364..7671).2" Target="28001:[74563..75297).56" />
<Link Source="25003:[7364..7671).2" Target="28001:[74978..75054).4" />
<Link Source="25003:[7458..7660).15" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).15" Target="25003:[3304..3309).3" />
<Link Source="25003:[7458..7660).15" Target="28001:[74978..75054).4" />
<Link Source="25003:[7458..7660).16" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).16" Target="25003:[3331..3348).3" />
<Link Source="25003:[7458..7660).16" Target="28001:[74978..75054).4" />
<Link Source="25003:[7458..7660).17" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).17" Target="25003:[3382..3396).3" />
<Link Source="25003:[7458..7660).17" Target="28001:[74978..75054).4" />
<Link Source="25003:[7458..7660).18" Target="25003:[7407..7432).2" />
<Link Source="25003:[7458..7660).18" Target="28001:[74978..75054).4" />
<Link Source="25003:[7458..7660).19" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).19" Target="25003:[3464..3478).3" />
<Link Source="25003:[7458..7660).19" Target="28001:[74978..75054).4" />
<Link Source="25003:[7458..7660).20" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).20" Target="25003:[3509..3525).3" />
<Link Source="25003:[7458..7660).20" Target="28001:[74978..75054).4" />
<Link Source="25003:[7458..7660).21" Target="28001:[74978..75054).4" />
<Link Source="25003:[7458..7660).23" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).23" Target="25003:[3633..3647).3" />
<Link Source="25003:[7458..7660).23" Target="28001:[74978..75054).4" />
<Link Source="25003:[7458..7660).24" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).24" Target="25003:[3696..3715).3" />
<Link Source="25003:[7458..7660).24" Target="28001:[74978..75054).4" />
<Link Source="25003:[7458..7660).25" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).25" Target="25003:[3751..3772).3" />
<Link Source="25003:[7458..7660).25" Target="28001:[74978..75054).4" />
<Link Source="25003:[7458..7660).26" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).26" Target="25003:[3810..3823).3" />
<Link Source="25003:[7458..7660).26" Target="28001:[74978..75054).4" />
<Link Source="25003:[7465..7659).2" Target="28001:[74978..75054).4" />
<Link Source="25003:[2816..2827).4" Target="25003:[7458..7660).15" />
<Link Source="25003:[2816..2827).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[2842..2863).4" Target="25003:[7458..7660).16" />
<Link Source="25003:[2842..2863).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[2878..2898).4" Target="25003:[7458..7660).17" />
<Link Source="25003:[2878..2898).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[2913..2931).4" Target="25003:[7458..7660).18" />
<Link Source="25003:[2913..2931).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[2946..2973).4" Target="25003:[7458..7660).19" />
<Link Source="25003:[2946..2973).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[2988..3030).4" Target="25003:[7458..7660).20" />
<Link Source="25003:[2988..3030).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3045..3076).4" Target="25003:[7458..7660).21" />
<Link Source="25003:[3045..3076).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3091..3116).4" Target="25003:[7458..7660).23" />
<Link Source="25003:[3091..3116).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3131..3176).4" Target="25003:[7458..7660).24" />
<Link Source="25003:[3131..3176).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3191..3238).4" Target="25003:[7458..7660).25" />
<Link Source="25003:[3191..3238).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3253..3278).4" Target="25003:[7458..7660).26" />
<Link Source="25003:[3253..3278).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[2773..3850).4" Target="25003:[7458..7660).21" />
<Link Source="25003:[2773..3850).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[912..917).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[912..917).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[950..967).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[950..967).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1000..1013).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1000..1013).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1048..1062).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1048..1062).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1099..1109).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1099..1109).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1151..1165).10" Target="25003:[2773..3850).4" />
<Link Source="25003:[1151..1165).10" Target="25003:[7465..7659).2" />
<Link Source="25003:[1276..1303).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1276..1303).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1336..1350).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1336..1350).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1383..1412).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1383..1412).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1460..1479).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1460..1479).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1527..1548).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1527..1548).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1673..1689).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1673..1689).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1713..1727).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1713..1727).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1891..1900).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1891..1900).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1941..1960).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1941..1960).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3427..3437).4" Target="25003:[2913..2931).4" />
<Link Source="25003:[3427..3437).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3427..3437).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3562..3589).4" Target="25003:[3045..3076).4" />
<Link Source="25003:[3562..3589).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3562..3589).4" Target="25003:[7465..7659).2" />
<Link Source="28001:[74563..75297).64" Target="25003:[7458..7660).21" />
<Link Source="28001:[74563..75297).64" Target="25014:[387..448).1" />
<Link Source="28001:[75199..75248).1" Target="25014:[387..448).1" />
<Link Source="25004:[19277..19288).3" Target="28001:[74563..75297).21" />
<Link Source="25004:[19277..19288).3" Target="28001:[75199..75248).1" />
<Link Source="25004:[19303..19330).3" Target="28001:[74563..75297).4" />
<Link Source="25004:[19303..19330).3" Target="28001:[75199..75248).1" />
<Link Source="25004:[19345..19370).3" Target="28001:[74563..75297).4" />
<Link Source="25004:[19345..19370).3" Target="28001:[75199..75248).1" />
<Link Source="25004:[19385..19419).3" Target="28001:[74563..75297).4" />
<Link Source="25004:[19385..19419).3" Target="28001:[75199..75248).1" />
<Link Source="25004:[19434..19483).3" Target="28001:[74563..75297).4" />
<Link Source="25004:[19434..19483).3" Target="28001:[75199..75248).1" />
<Link Source="25004:[19498..19537).3" Target="28001:[74563..75297).4" />
<Link Source="25004:[19498..19537).3" Target="28001:[75199..75248).1" />
<Link Source="25004:[19552..19577).3" Target="28001:[74563..75297).4" />
<Link Source="25004:[19552..19577).3" Target="28001:[75199..75248).1" />
<Link Source="25004:[19603..19877).19" Target="25004:[19277..19288).3" />
<Link Source="25004:[19603..19877).19" Target="28001:[75199..75248).1" />
<Link Source="25004:[19603..19877).20" Target="25004:[19303..19330).3" />
<Link Source="25004:[19603..19877).20" Target="28001:[75199..75248).1" />
<Link Source="25004:[19603..19877).21" Target="25004:[19345..19370).3" />
<Link Source="25004:[19603..19877).21" Target="28001:[75199..75248).1" />
<Link Source="25004:[19603..19877).22" Target="25004:[19385..19419).3" />
<Link Source="25004:[19603..19877).22" Target="28001:[75199..75248).1" />
<Link Source="25004:[19603..19877).23" Target="25004:[19434..19483).3" />
<Link Source="25004:[19603..19877).23" Target="28001:[75199..75248).1" />
<Link Source="25004:[19603..19877).24" Target="25004:[19498..19537).3" />
<Link Source="25004:[19603..19877).24" Target="28001:[75199..75248).1" />
<Link Source="25004:[19603..19877).25" Target="25004:[19552..19577).3" />
<Link Source="25004:[19603..19877).25" Target="28001:[75199..75248).1" />
<Link Source="25004:[19610..19876).3" Target="28001:[75199..75248).1" />
<Link Source="25007:[3334..3345).3" Target="25004:[19603..19877).19" />
<Link Source="25007:[3334..3345).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3360..3387).3" Target="25004:[19603..19877).20" />
<Link Source="25007:[3360..3387).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3402..3427).3" Target="25004:[19603..19877).21" />
<Link Source="25007:[3402..3427).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3442..3476).3" Target="25004:[19603..19877).22" />
<Link Source="25007:[3442..3476).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3491..3540).3" Target="25004:[19603..19877).23" />
<Link Source="25007:[3491..3540).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3555..3594).3" Target="25004:[19603..19877).24" />
<Link Source="25007:[3555..3594).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3609..3634).3" Target="25004:[19603..19877).25" />
<Link Source="25007:[3609..3634).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3660..3885).11" Target="25007:[3334..3345).3" />
<Link Source="25007:[3660..3885).11" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).39" Target="25007:[3334..3345).3" />
<Link Source="25007:[3901..4266).39" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).42" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).44" Target="25007:[3360..3387).3" />
<Link Source="25007:[3901..4266).44" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).45" Target="25007:[3402..3427).3" />
<Link Source="25007:[3901..4266).45" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).46" Target="25007:[3442..3476).3" />
<Link Source="25007:[3901..4266).46" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).47" Target="25007:[3491..3540).3" />
<Link Source="25007:[3901..4266).47" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).48" Target="25007:[3555..3594).3" />
<Link Source="25007:[3901..4266).48" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).51" Target="25007:[3609..3634).3" />
<Link Source="25007:[3901..4266).51" Target="25004:[19610..19876).3" />
<Link Source="25007:[3908..4265).3" Target="25004:[19610..19876).3" />
<Link Source="25003:[2816..2827).5" Target="25007:[3901..4266).39" />
<Link Source="25003:[2816..2827).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[2842..2863).5" Target="25007:[3901..4266).42" />
<Link Source="25003:[2842..2863).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[2878..2898).5" Target="25007:[3901..4266).44" />
<Link Source="25003:[2878..2898).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[2913..2931).5" Target="25007:[3901..4266).45" />
<Link Source="25003:[2913..2931).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[2946..2973).5" Target="25007:[3901..4266).46" />
<Link Source="25003:[2946..2973).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[2988..3030).5" Target="25007:[3901..4266).47" />
<Link Source="25003:[2988..3030).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3045..3076).5" Target="25007:[3901..4266).48" />
<Link Source="25003:[3045..3076).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3091..3116).5" Target="25007:[3901..4266).39" />
<Link Source="25003:[3091..3116).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3131..3176).5" Target="25007:[3901..4266).51" />
<Link Source="25003:[3131..3176).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3191..3238).5" Target="25007:[3901..4266).42" />
<Link Source="25003:[3191..3238).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3253..3278).5" Target="25007:[3901..4266).42" />
<Link Source="25003:[3253..3278).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[2773..3850).5" Target="25007:[3901..4266).42" />
<Link Source="25003:[2773..3850).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[912..917).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[912..917).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[950..967).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[950..967).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1000..1013).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1000..1013).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1048..1062).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1048..1062).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1099..1109).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1099..1109).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1151..1165).13" Target="25003:[2773..3850).5" />
<Link Source="25003:[1151..1165).13" Target="25007:[3908..4265).3" />
<Link Source="25003:[1276..1303).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1276..1303).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1336..1350).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1336..1350).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1383..1412).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1383..1412).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1460..1479).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1460..1479).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1527..1548).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1527..1548).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1673..1689).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1673..1689).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1713..1727).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1713..1727).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1891..1900).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1891..1900).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1941..1960).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1941..1960).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3304..3309).5" Target="25003:[2816..2827).5" />
<Link Source="25003:[3304..3309).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3304..3309).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3331..3348).5" Target="25003:[2842..2863).5" />
<Link Source="25003:[3331..3348).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3331..3348).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3382..3396).5" Target="25003:[2878..2898).5" />
<Link Source="25003:[3382..3396).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3382..3396).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3427..3437).5" Target="25003:[2913..2931).5" />
<Link Source="25003:[3427..3437).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3427..3437).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3464..3478).5" Target="25003:[2946..2973).5" />
<Link Source="25003:[3464..3478).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3464..3478).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3509..3525).5" Target="25003:[2988..3030).5" />
<Link Source="25003:[3509..3525).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3509..3525).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3562..3589).5" Target="25003:[3045..3076).5" />
<Link Source="25003:[3562..3589).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3562..3589).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3633..3682).5" Target="25003:[3091..3116).5" />
<Link Source="25003:[3633..3682).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3633..3647).5" Target="25003:[3633..3682).5" />
<Link Source="25003:[3633..3647).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3633..3647).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3696..3715).5" Target="25003:[3131..3176).5" />
<Link Source="25003:[3696..3715).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3696..3715).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3751..3772).5" Target="25003:[3191..3238).5" />
<Link Source="25003:[3751..3772).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3751..3772).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3810..3823).5" Target="25003:[3253..3278).5" />
<Link Source="25003:[3810..3823).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3810..3823).5" Target="25007:[3908..4265).3" />
<Link Source="25004:[19603..19877).26" Target="25007:[3901..4266).42" />
<Link Source="25004:[19603..19877).26" Target="28001:[75199..75248).1" />
<Link Source="28001:[74563..75297).78" Target="25004:[19603..19877).26" />
<Link Source="28001:[74563..75297).78" Target="25014:[387..448).1" />
<Link Source="28001:[75199..75277).1" Target="28001:[74563..75297).4" />
<Link Source="28001:[75199..75277).1" Target="25014:[387..448).1" />
<Link Source="28001:[75199..75277).3" Target="25014:[387..448).1" />
<Link Source="25003:[7407..7432).3" Target="28001:[74563..75297).4" />
<Link Source="25003:[7407..7432).3" Target="28001:[75199..75277).3" />
<Link Source="25003:[7364..7671).3" Target="28001:[74563..75297).78" />
<Link Source="25003:[7364..7671).3" Target="28001:[75199..75277).3" />
<Link Source="25003:[7458..7660).29" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).29" Target="25003:[3304..3309).5" />
<Link Source="25003:[7458..7660).29" Target="28001:[75199..75277).3" />
<Link Source="25003:[7458..7660).30" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).30" Target="25003:[3331..3348).5" />
<Link Source="25003:[7458..7660).30" Target="28001:[75199..75277).3" />
<Link Source="25003:[7458..7660).31" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).31" Target="25003:[3382..3396).5" />
<Link Source="25003:[7458..7660).31" Target="28001:[75199..75277).3" />
<Link Source="25003:[7458..7660).32" Target="25003:[7407..7432).3" />
<Link Source="25003:[7458..7660).32" Target="28001:[75199..75277).3" />
<Link Source="25003:[7458..7660).33" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).33" Target="25003:[3464..3478).5" />
<Link Source="25003:[7458..7660).33" Target="28001:[75199..75277).3" />
<Link Source="25003:[7458..7660).34" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).34" Target="25003:[3509..3525).5" />
<Link Source="25003:[7458..7660).34" Target="28001:[75199..75277).3" />
<Link Source="25003:[7458..7660).35" Target="28001:[75199..75277).3" />
<Link Source="25003:[7458..7660).37" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).37" Target="25003:[3633..3647).5" />
<Link Source="25003:[7458..7660).37" Target="28001:[75199..75277).3" />
<Link Source="25003:[7458..7660).38" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).38" Target="25003:[3696..3715).5" />
<Link Source="25003:[7458..7660).38" Target="28001:[75199..75277).3" />
<Link Source="25003:[7458..7660).39" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).39" Target="25003:[3751..3772).5" />
<Link Source="25003:[7458..7660).39" Target="28001:[75199..75277).3" />
<Link Source="25003:[7458..7660).40" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).40" Target="25003:[3810..3823).5" />
<Link Source="25003:[7458..7660).40" Target="28001:[75199..75277).3" />
<Link Source="25003:[7465..7659).3" Target="28001:[75199..75277).3" />
<Link Source="25003:[2816..2827).6" Target="25003:[7458..7660).29" />
<Link Source="25003:[2816..2827).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[2842..2863).6" Target="25003:[7458..7660).30" />
<Link Source="25003:[2842..2863).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[2878..2898).6" Target="25003:[7458..7660).31" />
<Link Source="25003:[2878..2898).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[2913..2931).6" Target="25003:[7458..7660).32" />
<Link Source="25003:[2913..2931).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[2946..2973).6" Target="25003:[7458..7660).33" />
<Link Source="25003:[2946..2973).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[2988..3030).6" Target="25003:[7458..7660).34" />
<Link Source="25003:[2988..3030).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3045..3076).6" Target="25003:[7458..7660).35" />
<Link Source="25003:[3045..3076).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3091..3116).6" Target="25003:[7458..7660).37" />
<Link Source="25003:[3091..3116).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3131..3176).6" Target="25003:[7458..7660).38" />
<Link Source="25003:[3131..3176).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3191..3238).6" Target="25003:[7458..7660).39" />
<Link Source="25003:[3191..3238).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3253..3278).6" Target="25003:[7458..7660).40" />
<Link Source="25003:[3253..3278).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[2773..3850).6" Target="25003:[7458..7660).35" />
<Link Source="25003:[2773..3850).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[912..917).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[912..917).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[950..967).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[950..967).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1000..1013).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1000..1013).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1048..1062).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1048..1062).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1099..1109).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1099..1109).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1151..1165).16" Target="25003:[2773..3850).6" />
<Link Source="25003:[1151..1165).16" Target="25003:[7465..7659).3" />
<Link Source="25003:[1276..1303).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1276..1303).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1336..1350).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1336..1350).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1383..1412).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1383..1412).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1460..1479).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1460..1479).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1527..1548).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1527..1548).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1673..1689).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1673..1689).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1713..1727).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1713..1727).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1891..1900).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1891..1900).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1941..1960).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1941..1960).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3427..3437).6" Target="25003:[2913..2931).6" />
<Link Source="25003:[3427..3437).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[3427..3437).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3562..3589).6" Target="25003:[3045..3076).6" />
<Link Source="25003:[3562..3589).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[3562..3589).6" Target="25003:[7465..7659).3" />
<Link Source="28001:[74563..75297).85" Target="25003:[7458..7660).35" />
<Link Source="28001:[74563..75297).85" Target="25014:[387..448).1" />
<Link Source="28001:[74563..75296).1" Target="28001:[74563..75297).42" />
<Link Source="28001:[74563..75296).1" Target="28001:[74563..75297).4" />
<Link Source="28001:[74563..75296).1" Target="25014:[387..448).1" />
<Link Source="28001:[74563..75296).2" Target="28001:[74563..75297).64" />
<Link Source="28001:[74563..75296).2" Target="28001:[74563..75297).4" />
<Link Source="28001:[74563..75296).2" Target="25014:[387..448).1" />
<Link Source="28001:[74563..75296).3" Target="28001:[74563..75297).85" />
<Link Source="28001:[74563..75296).3" Target="28001:[74563..75297).4" />
<Link Source="28001:[74563..75296).3" Target="25014:[387..448).1" />
<Link Source="28001:[74563..75296).4" Target="25014:[387..448).1" />
<Link Source="25002:[4263..4282).1" Target="21003:[47944..47963).1" />
<Link Source="25002:[4263..4282).1" Target="28001:[74563..75296).4" />
<Link Source="25002:[4284..4323).1" Target="28001:[74563..75297).4" />
<Link Source="25002:[4284..4323).1" Target="28001:[74563..75296).4" />
<Link Source="25002:[4395..4432).1" Target="28001:[74563..75296).4" />
<Link Source="10345:[975..1032).1" Target="EXTERNAL" />
<Link Source="10345:[1047..1101).1" Target="EXTERNAL" />
<Link Source="10345:[1116..1166).1" Target="EXTERNAL" />
<Link Source="10345:[1753..1782).1" Target="10345:[956..960).1" />
<Link Source="10345:[1753..1782).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[975..1032).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[1047..1101).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[1116..1166).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[1181..1185).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1723..2412).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[1797..1861).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[2064..2099).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[930..1186).1" />
<Link Source="10345:[2113..2145).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2113..2145).1" Target="EXTERNAL" />
<Link Source="10345:[2113..2145).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2159..2192).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2159..2192).1" Target="EXTERNAL" />
<Link Source="10345:[2159..2192).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1753..1782).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1797..1861).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[2013..2038).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[930..1186).1" />
<Link Source="10345:[922..1186).1" Target="10345:[930..1186).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4263..4282).1" />
<Link Source="25002:[4395..4432).3" Target="21003:[48392..48469).2" />
<Link Source="25002:[4395..4432).3" Target="28001:[74563..75296).4" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13144..13184).1" Target="10345:[13089..13118).1" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).2" Target="10345:[13144..13184).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).2" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).4" Target="10345:[13089..13118).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).4" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[922..1186).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[13200..13326).2" />
<Link Source="25002:[4395..4432).6" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).6" Target="10345:[13298..13311).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2208..2220).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2331..2343).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2249..2266).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2296..2307).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2372..2390).1" />
<Link Source="25002:[4395..4432).6" Target="EXTERNAL" />
<Link Source="25002:[4395..4432).6" Target="28001:[74563..75296).4" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24591..26243).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24636..24685).1" Target="10345:[24530..24565).1" />
<Link Source="10345:[24636..24685).1" Target="25002:[4395..4432).6" />
<Link Source="10345:[24636..24685).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24636..24685).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26025..26098).1" Target="EXTERNAL" />
<Link Source="10345:[26025..26098).1" Target="10345:[24768..26149).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24530..24565).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[24507..26254).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26025..26098).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).2" />
<Link Source="10345:[26169..26228).3" Target="10345:[24591..26243).1" />
<Link Source="10345:[24932..25204).1" Target="EXTERNAL" />
<Link Source="10345:[24932..25204).1" Target="10345:[26169..26228).3" />
<Link Source="10345:[25064..25074).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[26266..28173).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[922..1186).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26365..26372).1" Target="10345:[26314..26387).1" />
<Link Source="10345:[25064..25075).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25109..25173).1" Target="EXTERNAL" />
<Link Source="10345:[25109..25173).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25858..25865).1" Target="10345:[25109..25173).1" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[537..568).1" Target="10298:[471..492).1" />
<Link Source="10298:[537..568).1" Target="10298:[494..511).1" />
<Link Source="10298:[537..568).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).10" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).10" Target="10298:[537..568).1" />
<Link Source="25002:[4395..4432).10" Target="10345:[25109..25173).1" />
<Link Source="25002:[4395..4432).10" Target="28001:[74563..75296).4" />
<Link Source="10292:[1704..1721).1" Target="10292:[1720..1721).1" />
<Link Source="10292:[1752..1769).1" Target="10292:[1768..1769).1" />
<Link Source="10292:[1963..1993).1" Target="10292:[1992..1993).1" />
<Link Source="10306:[388923..389344).1" Target="10306:[388969..389344).1" />
<Link Source="10306:[389480..389543).1" Target="EXTERNAL" />
<Link Source="10306:[389562..389646).1" Target="EXTERNAL" />
<Link Source="10306:[389708..389839).1" Target="EXTERNAL" />
<Link Source="10306:[389665..389839).1" Target="10306:[389708..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389480..389543).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389562..389646).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389665..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389438..389840).1" />
<Link Source="10306:[389401..389840).1" Target="10306:[389438..389840).17" />
<Link Source="10310:[84458..84496).1" Target="10310:[84494..84496).1" />
<Link Source="10316:[772..830).1" Target="10316:[802..830).1" />
<Link Source="10319:[69620..69663).1" Target="10319:[69643..69663).1" />
<Link Source="10319:[69727..69774).1" Target="10319:[69752..69774).1" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31055..31080).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31095..31126).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).2" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).4" />
<Link Source="10286:[31152..31210).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31515..31598).1" Target="10286:[30969..31000).1" />
<Link Source="10286:[31515..31598).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).1" Target="10286:[30925..30954).1" />
<Link Source="10286:[31614..31710).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).2" Target="10286:[30969..31000).1" />
<Link Source="10286:[31614..31710).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).3" Target="10286:[31015..31040).1" />
<Link Source="10286:[31614..31710).3" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).4" Target="10286:[31055..31080).1" />
<Link Source="10286:[31614..31710).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).5" Target="10286:[31095..31126).1" />
<Link Source="10286:[31614..31710).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).6" Target="10286:[31515..31598).1" />
<Link Source="10286:[31614..31710).6" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31709).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31710).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31710).2" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31710).3" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31710).4" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31710).5" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31710).6" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80188..80212).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80162..80186).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).2" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).4" />
<Link Source="10319:[80263..80315).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80331..80364).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).1" Target="10319:[80080..80109).1" />
<Link Source="10319:[80378..80479).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).2" Target="10319:[80111..80133).1" />
<Link Source="10319:[80378..80479).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).3" Target="10319:[80331..80364).1" />
<Link Source="10319:[80378..80479).3" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).4" Target="10319:[80214..80237).1" />
<Link Source="10319:[80378..80479).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80400..80478).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80378..80479).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80874..80896).1" Target="10319:[80378..80479).2" />
<Link Source="10319:[80874..80896).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80898..80931).1" Target="10319:[80378..80479).3" />
<Link Source="10319:[80898..80931).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80933..80956).1" Target="10319:[80378..80479).4" />
<Link Source="10319:[80933..80956).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80874..80896).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).2" Target="25002:[4395..4432).10" />
<Link Source="10319:[80982..81047).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).3" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2901..2932).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3483..3502).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).1" Target="10060:[4243..4274).1" />
<Link Source="10060:[3518..4328).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4344..4356).1" Target="10319:[80982..81047).3" />
<Link Source="10319:[80982..81047).8" Target="10060:[3483..3502).1" />
<Link Source="10319:[80982..81047).8" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).8" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2841..2854).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2856..2875).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).3" Target="10060:[2841..2854).2" />
<Link Source="10060:[2901..2932).3" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[2948..3467).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[3553..4223).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[4243..4274).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).2" Target="10060:[4243..4274).2" />
<Link Source="10060:[3518..4328).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).3" Target="10060:[4243..4274).2" />
<Link Source="10060:[3553..4223).3" Target="10060:[3518..4328).2" />
<Link Source="10319:[80982..81047).15" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).2" />
<Link Source="10319:[80982..81047).15" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80982..81047).15" />
<Link Source="10319:[81063..82500).2" Target="10319:[81063..82500).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[81129..81207).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[81129..81207).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81129..81207).2" Target="10319:[81063..82500).2" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).7" Target="10060:[2841..2854).4" />
<Link Source="10060:[2901..2932).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).4" Target="10060:[2841..2854).4" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[3483..3502).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).6" Target="10060:[4243..4274).6" />
<Link Source="10060:[3518..4328).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2841..2854).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).9" Target="10060:[2841..2854).5" />
<Link Source="10060:[2901..2932).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).5" Target="10060:[2841..2854).5" />
<Link Source="10060:[2948..3467).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[3553..4223).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[4243..4274).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).7" Target="10060:[4243..4274).7" />
<Link Source="10060:[3518..4328).7" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81225..82039).1" />
<Link Source="10319:[81225..82039).2" Target="10319:[81063..82500).2" />
<Link Source="10319:[82516..82536).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[82516..82536).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80495..80738).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[80495..80738).2" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).1" Target="10319:[82516..82536).1" />
<Link Source="10319:[80754..80774).1" Target="10286:[31614..31709).1" />
<Link Source="10060:[2841..2854).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).17" Target="10060:[2841..2854).9" />
<Link Source="10060:[2901..2932).17" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).9" Target="10060:[2841..2854).9" />
<Link Source="10060:[2948..3467).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[3553..4223).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[4243..4274).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).11" Target="10060:[4243..4274).11" />
<Link Source="10060:[3518..4328).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[2841..2854).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2901..2932).19" Target="10060:[2841..2854).10" />
<Link Source="10060:[2901..2932).19" Target="10060:[3483..3502).7" />
<Link Source="10060:[2948..3467).10" Target="10060:[2841..2854).10" />
<Link Source="10060:[2948..3467).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[3553..4223).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[3553..4223).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[4243..4274).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[4243..4274).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[3518..4328).12" Target="10060:[4243..4274).12" />
<Link Source="10060:[3518..4328).12" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).4" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).5" Target="10319:[81225..82039).4" />
<Link Source="10319:[81225..82039).5" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[80495..80738).5" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).2" Target="10319:[82516..82536).2" />
<Link Source="10319:[80754..80774).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[81225..82039).7" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10319:[80400..80478).1" />
<Link Source="10319:[80754..80774).3" Target="10319:[82516..82536).3" />
<Link Source="10319:[80754..80774).3" Target="10286:[31614..31709).1" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4549..4579).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4549..4579).1" Target="10060:[3483..3502).7" />
<Link Source="10076:[4549..4579).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4821..4829).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[4821..4829).1" />
<Link Source="10076:[3628..3685).1" Target="10076:[3592..3700).1" />
<Link Source="10076:[3628..3685).1" Target="10060:[3483..3502).7" />
<Link Source="10076:[3628..3685).1" Target="EXTERNAL" />
<Link Source="10076:[3628..3685).1" Target="10076:[4821..4829).1" />
<Link Source="10076:[4815..4966).1" Target="10076:[3628..3685).1" />
<Link Source="10076:[4815..4966).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).4" Target="10076:[4437..4452).1" />
<Link Source="10076:[4815..4966).4" Target="10060:[3483..3502).7" />
<Link Source="10076:[4815..4966).4" Target="10076:[4815..4966).3" />
<Link Source="10076:[4815..4966).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).4" />
<Link Source="10076:[4815..4966).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[4932..4951).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4932..4951).1" Target="10060:[3483..3502).7" />
<Link Source="10076:[4932..4951).1" Target="10076:[4815..4966).5" />
<Link Source="10076:[4982..5048).1" Target="10076:[4932..4951).1" />
<Link Source="10076:[4982..5048).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).2" Target="10076:[4549..4579).1" />
<Link Source="10076:[4982..5048).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).3" Target="10076:[4454..4498).1" />
<Link Source="10076:[4982..5048).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).4" Target="10076:[4500..4523).1" />
<Link Source="10076:[4982..5048).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4989..5047).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4982..5048).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5114..5126).1" Target="10076:[4982..5048).2" />
<Link Source="10076:[5114..5126).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5128..5172).1" Target="10076:[4982..5048).3" />
<Link Source="10076:[5128..5172).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5174..5197).1" Target="10076:[4982..5048).4" />
<Link Source="10076:[5174..5197).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5097..5112).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).2" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).2" Target="10060:[3483..3502).7" />
<Link Source="10076:[5277..5448).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).1" Target="10076:[5071..5759).1" />
<Link Source="10076:[5470..5538).1" Target="10060:[3483..3502).7" />
<Link Source="10076:[5470..5538).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).3" Target="10076:[4989..5047).1" />
<Link Source="10077:[909..930).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[909..930).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[879..998).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[879..998).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[879..998).2" Target="10076:[5470..5538).3" />
<Link Source="10077:[698..707).1" Target="10077:[879..998).2" />
<Link Source="10077:[698..707).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[747..768).1" Target="10077:[879..998).2" />
<Link Source="10077:[747..768).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[798..808).1" Target="10077:[879..998).2" />
<Link Source="10077:[798..808).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[854..862).1" Target="10077:[879..998).2" />
<Link Source="10077:[854..862).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[964..972).1" Target="10077:[909..930).1" />
<Link Source="10077:[964..972).1" Target="10077:[879..998).2" />
<Link Source="10077:[964..972).1" Target="10076:[5470..5538).3" />
<Link Source="10076:[5470..5538).4" Target="10076:[5470..5538).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[879..998).2" />
<Link Source="10076:[5470..5538).4" Target="10077:[698..707).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[747..768).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[798..808).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[854..862).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[964..972).1" />
<Link Source="10076:[5470..5538).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[5114..5126).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[5128..5172).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[5174..5197).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5613).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[5552..5614).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1053..1090).1" Target="10076:[5552..5614).2" />
<Link Source="10077:[1053..1090).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1092..1108).1" Target="10076:[5552..5614).3" />
<Link Source="10077:[1092..1108).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1014..1370).1" Target="10076:[5470..5538).4" />
<Link Source="10077:[1014..1370).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1053..1090).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1092..1108).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).4" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).2" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).4" />
<Link Source="10077:[1142..1210).5" Target="10076:[5552..5613).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1039..1051).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1230..1239).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1053..1090).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1269..1290).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1092..1108).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1332..1342).1" Target="10076:[5552..5613).1" />
<Link Source="10076:[5552..5614).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[5097..5112).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5644..5663).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5628..5664).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2664..2780).1" Target="10076:[5470..5538).4" />
<Link Source="10077:[2664..2780).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2742..2765).1" Target="10077:[2693..2708).1" />
<Link Source="10077:[2742..2765).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2749..2764).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2742..2765).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2664..2780).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2852..2986).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2926..2971).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2877..2892).1" />
<Link Source="10077:[2926..2971).2" Target="10076:[5470..5538).4" />
<Link Source="10077:[2926..2971).2" Target="10077:[1230..1239).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1269..1290).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1332..1342).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).3" Target="10077:[2749..2764).1" />
<Link Source="10077:[2398..2415).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[2398..2415).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2362..2496).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[2362..2496).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2449..2481).1" Target="10077:[2398..2415).1" />
<Link Source="10077:[2449..2481).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[2449..2481).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2456..2480).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2877..2892).2" Target="10077:[2449..2481).1" />
<Link Source="10077:[2877..2892).2" Target="10077:[2456..2480).1" />
<Link Source="10077:[2852..2986).2" Target="10077:[2362..2496).1" />
<Link Source="10077:[2852..2986).2" Target="10077:[2456..2480).1" />
<Link Source="10077:[2926..2971).5" Target="10077:[2852..2986).2" />
<Link Source="10077:[2926..2971).5" Target="10077:[2877..2892).2" />
<Link Source="10077:[2926..2971).5" Target="10077:[2926..2971).2" />
<Link Source="10077:[2926..2971).5" Target="10077:[2456..2480).1" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).5" />
<Link Source="10077:[34617..34644).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).5" />
<Link Source="10077:[34572..34731).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[34678..34716).1" Target="10077:[34617..34644).1" />
<Link Source="10077:[34678..34716).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[34685..34715).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[31025..31053).1" Target="10077:[34678..34716).1" />
<Link Source="10077:[31025..31053).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34572..34731).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[2926..2971).5" />
<Link Source="10077:[31087..31238).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[2926..2971).5" />
<Link Source="10077:[31087..31238).3" Target="10077:[34685..34715).1" />
<Link Source="10077:[31258..31297).1" Target="EXTERNAL" />
<Link Source="10077:[31258..31297).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).2" Target="10077:[31490..32331).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[30985..32417).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).6" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).7" Target="10077:[34685..34715).1" />
<Link Source="10077:[31936..32331).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[31936..32331).1" Target="10077:[31490..32331).6" />
<Link Source="10077:[31936..32331).1" Target="10077:[31490..32331).2" />
<Link Source="10077:[31936..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31936..32331).2" Target="10077:[31490..32331).2" />
<Link Source="10077:[32037..32089).1" Target="EXTERNAL" />
<Link Source="10077:[32037..32089).1" Target="10077:[31936..32331).1" />
<Link Source="10077:[32351..32402).1" Target="10077:[31025..31053).1" />
<Link Source="10077:[32351..32402).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[32037..32089).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[32358..32401).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32351..32402).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32504..32523).1" Target="10077:[32351..32402).2" />
<Link Source="10077:[32504..32523).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32504..32523).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32567..32606).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[32557..32607).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44182..44197).1" Target="10077:[32557..32607).2" />
<Link Source="10077:[44182..44197).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[44182..44197).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).3" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[44159..44180).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[44182..44197).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).3" Target="10077:[32567..32606).1" />
<Link Source="10077:[44342..44373).1" Target="10077:[32567..32606).1" />
<Link Source="10076:[875..902).1" Target="10077:[44335..44374).1" />
<Link Source="10076:[875..902).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[904..919).1" Target="10077:[44335..44374).2" />
<Link Source="10076:[904..919).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[853..1034).1" Target="10077:[44335..44374).3" />
<Link Source="10076:[853..1034).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[953..968).1" Target="10076:[875..902).1" />
<Link Source="10076:[953..968).1" Target="10076:[853..1034).1" />
<Link Source="10076:[953..968).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[904..919).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[853..1034).1" />
<Link Source="10076:[1000..1010).1" Target="10077:[44342..44373).1" />
<Link Source="10077:[32557..32607).3" Target="10077:[44335..44374).3" />
<Link Source="10077:[32557..32607).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32627..32647).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32670..32681).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[32433..34556).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[32670..32681).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[2066..2158).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[31936..32331).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[32670..32681).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[2110..2139).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[32665..34501).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32627..32647).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).2" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).3" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).1" />
<Link Source="10077:[32665..34501).4" Target="10076:[953..968).1" />
<Link Source="10077:[32665..34501).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[31936..32331).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).5" Target="10077:[32358..32401).1" />
<Link Source="10076:[1241..1380).1" Target="10077:[32665..34501).4" />
<Link Source="10076:[1241..1380).1" Target="10077:[32665..34501).5" />
<Link Source="10076:[1307..1365).1" Target="10076:[1241..1380).1" />
<Link Source="10076:[1307..1365).1" Target="10077:[32665..34501).4" />
<Link Source="10076:[1307..1365).1" Target="10077:[32665..34501).5" />
<Link Source="10077:[33226..33266).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[33226..33266).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[33241..33265).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2877..2892).3" Target="10077:[33226..33266).1" />
<Link Source="10077:[2877..2892).3" Target="10077:[33241..33265).1" />
<Link Source="10077:[35299..35332).1" Target="10077:[2877..2892).3" />
<Link Source="10077:[35299..35332).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35250..35934).1" Target="10077:[2877..2892).3" />
<Link Source="10077:[35250..35934).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35366..35522).1" Target="10077:[35250..35934).1" />
<Link Source="10077:[35366..35522).1" Target="10077:[2877..2892).3" />
<Link Source="10077:[35366..35522).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35366..35522).2" Target="10077:[35299..35332).1" />
<Link Source="10077:[35366..35522).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[35366..35522).3" Target="10077:[35366..35522).1" />
<Link Source="10077:[35366..35522).3" Target="10077:[35366..35522).2" />
<Link Source="10077:[35366..35522).3" Target="10077:[2877..2892).3" />
<Link Source="10077:[35366..35522).3" Target="10077:[33241..33265).1" />
<Link Source="10077:[35674..35777).1" Target="10077:[35250..35934).1" />
<Link Source="10077:[35674..35777).1" Target="10077:[35366..35522).3" />
<Link Source="10077:[35674..35777).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35674..35777).2" Target="10077:[35299..35332).1" />
<Link Source="10077:[35674..35777).2" Target="10077:[35366..35522).3" />
<Link Source="10077:[35674..35777).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[35797..35830).1" Target="10077:[35299..35332).1" />
<Link Source="10077:[35797..35830).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35812..35829).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[35797..35830).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[35250..35934).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[35674..35777).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[44954..44972).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[44954..44972).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[35674..35777).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[44990..45616).3" Target="10077:[44800..46356).1" />
<Link Source="10077:[44990..45616).3" Target="10077:[44990..45616).1" />
<Link Source="10077:[44990..45616).3" Target="10077:[44888..44934).1" />
<Link Source="10077:[44990..45616).3" Target="10077:[35674..35777).1" />
<Link Source="10077:[44990..45616).3" Target="10077:[35812..35829).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44888..44934).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[35674..35777).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44990..45616).3" />
<Link Source="10077:[45553..45597).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[45331..45616).1" />
<Link Source="10077:[45553..45597).2" Target="10077:[45331..45616).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[45553..45597).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[45678..46310).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45678..46310).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[35812..35829).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[44823..44854).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[35812..35829).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46088..46248).2" Target="EXTERNAL" />
<Link Source="10077:[46088..46248).2" Target="10077:[45678..46310).2" />
<Link Source="10077:[46272..46291).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[46088..46248).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46328..46341).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[35797..35830).2" Target="10077:[46328..46341).1" />
<Link Source="10077:[35797..35830).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[35850..35919).1" Target="10077:[35299..35332).1" />
<Link Source="10077:[35850..35919).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35850..35919).2" Target="10077:[35250..35934).1" />
<Link Source="10077:[35850..35919).2" Target="10077:[46272..46291).1" />
<Link Source="10077:[35850..35919).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[35850..35919).3" Target="10077:[35674..35777).1" />
<Link Source="10077:[35850..35919).3" Target="10077:[33241..33265).1" />
<Link Source="10077:[35850..35919).4" Target="10077:[35797..35830).2" />
<Link Source="10077:[35850..35919).4" Target="10077:[33241..33265).1" />
<Link Source="10077:[35857..35918).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35992..36025).1" Target="10077:[35850..35919).1" />
<Link Source="10077:[35992..36025).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36027..36039).1" Target="10077:[35850..35919).2" />
<Link Source="10077:[36027..36039).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36041..36052).1" Target="10077:[35850..35919).3" />
<Link Source="10077:[36041..36052).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36054..36066).1" Target="10077:[35850..35919).4" />
<Link Source="10077:[36054..36066).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[35950..37866).1" Target="10077:[35250..35934).1" />
<Link Source="10077:[35950..37866).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36100..36154).1" Target="10077:[36054..36066).1" />
<Link Source="10077:[36100..36154).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36100..36154).3" Target="10077:[35857..35918).1" />
<Link Source="10077:[36190..36197).1" Target="10077:[36054..36066).1" />
<Link Source="10077:[36190..36197).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36229..36235).1" Target="10077:[36041..36052).1" />
<Link Source="10077:[36229..36235).1" Target="10077:[36190..36197).1" />
<Link Source="10077:[36174..36282).1" Target="EXTERNAL" />
<Link Source="10077:[36174..36282).1" Target="10077:[36229..36235).1" />
<Link Source="10077:[36330..36380).1" Target="10077:[35992..36025).1" />
<Link Source="10077:[36330..36380).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36330..36380).2" Target="10077:[36174..36282).1" />
<Link Source="10077:[36330..36380).2" Target="10077:[35857..35918).1" />
<Link Source="10077:[36340..36379).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[36330..36380).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[36340..36379).1" />
<Link Source="10077:[44182..44197).2" Target="10077:[36330..36380).2" />
<Link Source="10077:[44182..44197).2" Target="10077:[36340..36379).1" />
<Link Source="10077:[44231..44317).9" Target="10077:[44182..44197).2" />
<Link Source="10077:[44231..44317).9" Target="10077:[36340..36379).1" />
<Link Source="10077:[44231..44317).11" Target="10077:[36340..36379).1" />
<Link Source="10077:[36330..36380).3" Target="10077:[36340..36379).1" />
<Link Source="10077:[36330..36380).3" Target="10077:[35857..35918).1" />
<Link Source="10077:[36400..36414).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36437..36448).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[2066..2158).2" Target="10077:[35950..37866).1" />
<Link Source="10077:[2066..2158).2" Target="10077:[36437..36448).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[2066..2158).2" />
<Link Source="10077:[2110..2139).2" Target="10077:[46272..46291).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[36437..36448).1" />
<Link Source="10077:[36432..37817).1" Target="10077:[2110..2139).2" />
<Link Source="10077:[36432..37817).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36432..37817).2" Target="10077:[36330..36380).3" />
<Link Source="10077:[36432..37817).2" Target="10077:[35857..35918).1" />
<Link Source="10077:[36432..37817).3" Target="10077:[36400..36414).1" />
<Link Source="10077:[36432..37817).3" Target="10077:[35857..35918).1" />
<Link Source="10077:[36432..37817).4" Target="10077:[36432..37817).2" />
<Link Source="10077:[36432..37817).4" Target="10077:[36432..37817).3" />
<Link Source="10077:[36432..37817).4" Target="10077:[36432..37817).1" />
<Link Source="10077:[36432..37817).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[36432..37817).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[36432..37817).4" Target="10077:[46272..46291).1" />
<Link Source="10077:[36432..37817).4" Target="10077:[35857..35918).1" />
<Link Source="10077:[36432..37817).5" Target="10077:[35857..35918).1" />
<Link Source="10077:[36519..36532).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[36554..36584).1" Target="10077:[35992..36025).1" />
<Link Source="10077:[36554..36584).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[36612..36620).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[2243..2331).1" Target="10077:[35950..37866).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[36612..36620).1" />
<Link Source="10077:[2294..2311).1" Target="10077:[36612..36620).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[2243..2331).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[36432..37817).4" />
<Link Source="10076:[3592..3700).2" Target="10077:[2294..2311).1" />
<Link Source="10077:[2287..2312).1" Target="10076:[3592..3700).2" />
<Link Source="10077:[2287..2312).1" Target="10077:[36612..36620).1" />
<Link Source="10077:[36608..37330).1" Target="10077:[2287..2312).1" />
<Link Source="10077:[36608..37330).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[37255..37307).1" Target="10077:[35992..36025).1" />
<Link Source="10077:[37255..37307).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[37255..37307).1" Target="10077:[36608..37330).1" />
<Link Source="10077:[37255..37307).2" Target="10077:[36027..36039).1" />
<Link Source="10077:[37255..37307).2" Target="10077:[36608..37330).1" />
<Link Source="10077:[37255..37307).3" Target="10077:[36608..37330).1" />
<Link Source="10077:[37263..37306).1" Target="10077:[36608..37330).1" />
<Link Source="10076:[5097..5112).2" Target="10077:[37255..37307).1" />
<Link Source="10076:[5097..5112).2" Target="10077:[37263..37306).1" />
<Link Source="10076:[5114..5126).2" Target="10077:[37255..37307).2" />
<Link Source="10076:[5114..5126).2" Target="10077:[37263..37306).1" />
<Link Source="10076:[5128..5172).2" Target="10077:[37255..37307).3" />
<Link Source="10076:[5128..5172).2" Target="10077:[37263..37306).1" />
<Link Source="10076:[5174..5197).2" Target="10077:[37255..37307).3" />
<Link Source="10076:[5174..5197).2" Target="10077:[37263..37306).1" />
<Link Source="10076:[5223..5250).5" Target="10077:[37263..37306).1" />
<Link Source="10076:[5223..5250).6" Target="10076:[5097..5112).2" />
<Link Source="10076:[5223..5250).6" Target="10076:[5223..5250).5" />
<Link Source="10076:[5223..5250).6" Target="10077:[37263..37306).1" />
<Link Source="10076:[5277..5448).5" Target="10076:[5174..5197).2" />
<Link Source="10076:[5277..5448).5" Target="10077:[37263..37306).1" />
<Link Source="10077:[1142..1210).8" Target="10077:[37263..37306).1" />
<Link Source="10077:[1142..1210).9" Target="10076:[5128..5172).2" />
<Link Source="10077:[1142..1210).9" Target="10077:[1142..1210).8" />
<Link Source="10077:[1142..1210).9" Target="10077:[37263..37306).1" />
<Link Source="10077:[1142..1210).11" Target="10076:[5174..5197).2" />
<Link Source="10077:[1142..1210).11" Target="10077:[1142..1210).8" />
<Link Source="10077:[1142..1210).11" Target="10077:[37263..37306).1" />
<Link Source="10077:[39020..39048).1" Target="10076:[5114..5126).2" />
<Link Source="10077:[39020..39048).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[38976..39245).1" Target="10076:[5114..5126).2" />
<Link Source="10077:[38976..39245).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[39020..39048).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[39170..39187).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[44823..44854).2" Target="10077:[39082..39230).1" />
<Link Source="10077:[44823..44854).2" Target="10077:[39170..39187).1" />
<Link Source="10077:[44800..46356).2" Target="10077:[38976..39245).1" />
<Link Source="10077:[44800..46356).2" Target="10077:[39170..39187).1" />
<Link Source="10077:[44954..44972).2" Target="10077:[39170..39187).1" />
<Link Source="10077:[44966..44971).34" Target="10077:[44954..44972).2" />
<Link Source="10077:[44966..44971).34" Target="10077:[39170..39187).1" />
<Link Source="10077:[45331..45616).5" Target="10077:[44800..46356).2" />
<Link Source="10077:[45331..45616).5" Target="10077:[44823..44854).2" />
<Link Source="10077:[45331..45616).5" Target="10076:[5114..5126).2" />
<Link Source="10077:[39082..39230).3" Target="10077:[39170..39187).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[37263..37306).1" />
<Link Source="10077:[39220..39228).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[2243..2331).2" Target="10077:[38976..39245).1" />
<Link Source="10077:[2243..2331).2" Target="10077:[39220..39228).1" />
<Link Source="10076:[3592..3700).3" Target="10077:[2243..2331).2" />
<Link Source="10076:[3592..3700).3" Target="10077:[45331..45616).5" />
<Link Source="10076:[3592..3700).3" Target="10077:[39220..39228).1" />
<Link Source="10077:[39089..39229).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[39298..39335).1" Target="10077:[39082..39230).1" />
<Link Source="10077:[39298..39335).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39337..39349).1" Target="10077:[39082..39230).3" />
<Link Source="10077:[39337..39349).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39351..39364).1" Target="10076:[3592..3700).3" />
<Link Source="10077:[39351..39364).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39261..44091).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[39261..44091).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39421..39431).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[1641..1732).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[45331..45616).5" />
<Link Source="10077:[1685..1713).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[1685..1713).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39298..39335).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39398..39590).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39089..39229).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39337..39349).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39626..39633).1" />
<Link Source="10077:[39610..39829).1" Target="EXTERNAL" />
<Link Source="10077:[39610..39829).1" Target="10077:[39766..39774).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39298..39335).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39610..39829).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39887..39935).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[44159..44180).3" Target="10077:[39877..39936).1" />
<Link Source="10077:[44159..44180).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[44182..44197).3" Target="10077:[39877..39936).2" />
<Link Source="10077:[44182..44197).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).17" Target="10077:[44182..44197).3" />
<Link Source="10077:[44231..44317).17" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).19" Target="10077:[39887..39935).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[39089..39229).1" />
<Link Source="10077:[39956..39970).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39993..40004).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[2066..2158).3" Target="10077:[39261..44091).1" />
<Link Source="10077:[2066..2158).3" Target="10077:[39993..40004).1" />
<Link Source="10077:[2110..2139).3" Target="10077:[2066..2158).3" />
<Link Source="10077:[2110..2139).3" Target="10077:[45331..45616).5" />
<Link Source="10077:[2110..2139).3" Target="10077:[39993..40004).1" />
<Link Source="10077:[39988..44042).1" Target="10077:[2110..2139).3" />
<Link Source="10077:[39988..44042).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[39988..44042).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39956..39970).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).3" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[44159..44180).3" />
<Link Source="10077:[39988..44042).4" Target="10077:[44182..44197).3" />
<Link Source="10077:[39988..44042).4" Target="10077:[45331..45616).5" />
<Link Source="10077:[39988..44042).4" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).5" Target="10077:[39089..39229).1" />
<Link Source="10077:[40084..40108).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1843..1943).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1843..1943).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[1843..1943).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1887..1924).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[1887..1924).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[40133..43967).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[40133..43967).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[43302..43313).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[1456..1548).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1500..1529).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[1500..1529).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40075..40109).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[39298..39335).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[39337..39349).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).6" Target="10077:[40133..43967).1" />
<Link Source="10077:[43280..43373).1" Target="10077:[40133..43967).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43271..43374).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1459..1470).1" Target="10077:[43271..43374).3" />
<Link Source="10346:[1459..1470).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1472..1506).1" Target="10077:[43271..43374).4" />
<Link Source="10346:[1472..1506).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1508..1520).1" Target="10077:[43271..43374).5" />
<Link Source="10346:[1508..1520).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).1" Target="10077:[43271..43374).6" />
<Link Source="10346:[1399..2435).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1542..1546).1" Target="10346:[1459..1470).1" />
<Link Source="10346:[1542..1546).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).2" Target="10077:[43280..43373).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1542..1546).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).1" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1260..1291).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[726..773).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[726..773).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[815..820).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[815..820).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[2975..3015).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[2975..3015).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[17802..17818).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[17802..17818).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[18200..18223).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[18200..18223).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).2" Target="10286:[1247..1258).1" />
<Link Source="10286:[1317..1350).2" Target="10286:[1317..1350).1" />
<Link Source="10286:[1317..1350).2" Target="10346:[1399..2435).2" />
<Link Source="10286:[1364..1368).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1364..1368).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1364..1368).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1390..1400).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1390..1400).1" Target="10077:[39988..44042).4" />
<Link Source="10286:[1390..1400).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1390..1400).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1428..1444).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1428..1444).1" Target="10077:[39988..44042).4" />
<Link Source="10286:[1428..1444).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1428..1444).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1478..1494).1" Target="10286:[1260..1291).1" />
<Link Source="10286:[1478..1494).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1478..1494).1" Target="10346:[1399..2435).2" />
<Link Source="10346:[858..868).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[858..868).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[932..947).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[932..947).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[974..986).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[974..986).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1017..1033).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1017..1033).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1074..1100).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1074..1100).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1426..1457).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1572..1612).1" />
<Link Source="10346:[1572..1612).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1472..1506).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1626..1666).1" />
<Link Source="10346:[1626..1666).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1426..1457).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1682..1692).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1719..1832).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1719..1832).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1734).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1848..2424).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1848..2424).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1894..2409).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1894..2409).1" Target="10077:[39988..44042).4" />
<Link Source="10346:[1894..2409).1" Target="10346:[1848..2424).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1994..2057).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1399..2435).1" />
<Link Source="10077:[43503..43514).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[1456..1548).2" />
<Link Source="10077:[1500..1529).2" Target="10346:[1894..2409).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[43402..43944).1" Target="10077:[1500..1529).2" />
<Link Source="10077:[43402..43944).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[39298..39335).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43991..44002).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[2110..2139).4" Target="10077:[43991..44002).1" />
<Link Source="10077:[2110..2139).4" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).1" Target="10077:[2110..2139).4" />
<Link Source="10077:[43991..44023).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[43991..44023).2" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).3" Target="10077:[43271..43374).6" />
<Link Source="10077:[43991..44023).3" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).2" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).3" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[44159..44180).3" />
<Link Source="10077:[43991..44023).4" Target="10077:[44182..44197).3" />
<Link Source="10077:[43991..44023).4" Target="10286:[1428..1444).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1390..1400).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1364..1368).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1478..1494).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[18200..18223).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1682..1692).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1734).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[974..986).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1017..1033).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1074..1100).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[2079..2092).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1832).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1894..2409).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).5" Target="10077:[39988..44042).4" />
<Link Source="10077:[44062..44076).1" Target="10077:[43271..43374).6" />
<Link Source="10077:[44062..44076).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[2926..2971).14" Target="10076:[5114..5126).2" />
<Link Source="10077:[2926..2971).14" Target="10077:[44062..44076).1" />
<Link Source="10077:[2926..2971).14" Target="10077:[43991..44023).4" />
<Link Source="10077:[2926..2971).14" Target="10077:[37263..37306).1" />
<Link Source="10076:[5678..5718).1" Target="10077:[37263..37306).1" />
<Link Source="10076:[5678..5718).2" Target="10077:[37263..37306).1" />
<Link Source="10076:[5678..5718).2" Target="10077:[2926..2971).14" />
<Link Source="10076:[5678..5718).2" Target="10076:[5678..5718).1" />
<Link Source="10076:[5734..5748).1" Target="10077:[2926..2971).14" />
<Link Source="10076:[5734..5748).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[37354..37742).1" Target="10077:[36041..36052).1" />
<Link Source="10077:[37354..37742).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[37653..37719).1" Target="10077:[35992..36025).1" />
<Link Source="10077:[37653..37719).1" Target="10077:[37354..37742).1" />
<Link Source="10077:[37653..37719).2" Target="10077:[35992..36025).1" />
<Link Source="10077:[37653..37719).2" Target="10076:[5678..5718).2" />
<Link Source="10077:[37653..37719).2" Target="10077:[37354..37742).1" />
<Link Source="10077:[37653..37719).3" Target="10076:[5734..5748).1" />
<Link Source="10077:[37653..37719).3" Target="10077:[37354..37742).1" />
<Link Source="10077:[37653..37719).4" Target="10077:[36054..36066).1" />
<Link Source="10077:[37653..37719).4" Target="10077:[37354..37742).1" />
<Link Source="10077:[37662..37718).1" Target="10077:[37354..37742).1" />
<Link Source="10077:[37917..37938).1" Target="10077:[37653..37719).1" />
<Link Source="10077:[37917..37938).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[37940..37955).1" Target="10077:[37653..37719).2" />
<Link Source="10077:[37940..37955).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[37957..37969).1" Target="10077:[37653..37719).3" />
<Link Source="10077:[37957..37969).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[37971..37983).1" Target="10077:[37653..37719).4" />
<Link Source="10077:[37971..37983).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[37882..38960).1" Target="10077:[35950..37866).1" />
<Link Source="10077:[37882..38960).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38017..38044).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38062..38295).1" Target="10077:[37940..37955).1" />
<Link Source="10077:[38062..38295).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38062..38295).2" Target="10077:[37662..37718).1" />
<Link Source="10077:[38062..38295).3" Target="10077:[37940..37955).1" />
<Link Source="10077:[38062..38295).3" Target="10077:[38062..38295).2" />
<Link Source="10077:[38062..38295).3" Target="10077:[37662..37718).1" />
<Link Source="10077:[38315..38347).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38367..38713).1" Target="10077:[37957..37969).1" />
<Link Source="10077:[38367..38713).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38469..38496).1" Target="10077:[38367..38713).1" />
<Link Source="10346:[3331..3400).1" Target="10077:[38367..38713).1" />
<Link Source="10346:[3331..3400).1" Target="10077:[38469..38496).1" />
<Link Source="10346:[3367..3385).1" Target="10346:[3331..3400).1" />
<Link Source="10346:[3367..3385).1" Target="10076:[5678..5718).2" />
<Link Source="10346:[3367..3385).1" Target="10077:[38469..38496).1" />
<Link Source="10077:[38457..38497).1" Target="10346:[3367..3385).1" />
<Link Source="10077:[38457..38497).1" Target="10077:[38367..38713).1" />
<Link Source="10077:[38733..38808).1" Target="10077:[37940..37955).1" />
<Link Source="10077:[38733..38808).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38733..38808).2" Target="10077:[38457..38497).1" />
<Link Source="10077:[38733..38808).2" Target="10077:[38733..38808).1" />
<Link Source="10077:[38733..38808).2" Target="10076:[5678..5718).2" />
<Link Source="10077:[38733..38808).2" Target="10077:[37662..37718).1" />
<Link Source="10077:[38826..38863).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38826..38863).2" Target="10077:[38733..38808).2" />
<Link Source="10077:[38826..38863).2" Target="10077:[38826..38863).1" />
<Link Source="10077:[38826..38863).2" Target="10077:[37662..37718).1" />
<Link Source="10077:[38881..38945).1" Target="10077:[38733..38808).2" />
<Link Source="10077:[38881..38945).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38881..38945).2" Target="10077:[37957..37969).1" />
<Link Source="10077:[38881..38945).2" Target="10077:[37662..37718).1" />
<Link Source="10077:[38881..38945).3" Target="10077:[37917..37938).1" />
<Link Source="10077:[38881..38945).3" Target="10077:[37662..37718).1" />
<Link Source="10077:[38881..38945).4" Target="10077:[37971..37983).1" />
<Link Source="10077:[38881..38945).4" Target="10077:[37662..37718).1" />
<Link Source="10077:[38881..38945).5" Target="10077:[37662..37718).1" />
<Link Source="10077:[38888..38944).1" Target="10077:[37662..37718).1" />
<Link Source="10346:[1426..1457).2" Target="10077:[38881..38945).1" />
<Link Source="10346:[1426..1457).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1459..1470).2" Target="10077:[38881..38945).2" />
<Link Source="10346:[1459..1470).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1472..1506).2" Target="10077:[38881..38945).3" />
<Link Source="10346:[1472..1506).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1508..1520).2" Target="10077:[38881..38945).4" />
<Link Source="10346:[1508..1520).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1399..2435).3" Target="10077:[38881..38945).5" />
<Link Source="10346:[1399..2435).3" Target="10077:[38888..38944).1" />
<Link Source="10346:[1399..2435).4" Target="10077:[38888..38944).1" />
<Link Source="10286:[1231..1520).2" Target="10346:[1399..2435).3" />
<Link Source="10286:[1231..1520).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[1260..1291).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[726..773).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[726..773).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[815..820).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[815..820).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[2975..3015).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[2975..3015).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[17802..17818).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[17802..17818).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[18200..18223).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[18200..18223).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[1317..1350).5" Target="10346:[1399..2435).4" />
<Link Source="10286:[1317..1350).6" Target="10346:[1459..1470).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1317..1350).5" />
<Link Source="10286:[1317..1350).6" Target="10346:[1399..2435).4" />
<Link Source="10286:[1390..1400).2" Target="10346:[1459..1470).2" />
<Link Source="10286:[1390..1400).2" Target="10077:[38733..38808).2" />
<Link Source="10286:[1390..1400).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1390..1400).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[1428..1444).2" Target="10346:[1459..1470).2" />
<Link Source="10286:[1428..1444).2" Target="10077:[38733..38808).2" />
<Link Source="10286:[1428..1444).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1428..1444).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[1478..1494).2" Target="10286:[1260..1291).2" />
<Link Source="10286:[1478..1494).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1478..1494).2" Target="10346:[1399..2435).4" />
<Link Source="10346:[858..868).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[858..868).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[932..947).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[932..947).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[974..986).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[974..986).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1017..1033).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[1017..1033).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1074..1100).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[1074..1100).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1572..1612).5" Target="10077:[38888..38944).1" />
<Link Source="10346:[1572..1612).6" Target="10346:[1426..1457).2" />
<Link Source="10346:[1572..1612).6" Target="10346:[1572..1612).5" />
<Link Source="10346:[1572..1612).6" Target="10077:[38888..38944).1" />
<Link Source="10346:[1626..1666).5" Target="10077:[38888..38944).1" />
<Link Source="10346:[1626..1666).6" Target="10346:[1472..1506).2" />
<Link Source="10346:[1626..1666).6" Target="10346:[1626..1666).5" />
<Link Source="10346:[1626..1666).6" Target="10077:[38888..38944).1" />
<Link Source="10346:[1719..1832).2" Target="10346:[1472..1506).2" />
<Link Source="10346:[1719..1832).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[1719..1832).2" Target="10346:[1508..1520).2" />
<Link Source="10346:[1719..1832).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1719..1734).2" Target="10346:[1719..1832).2" />
<Link Source="10346:[1719..1734).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[1719..1734).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1848..2424).2" Target="10346:[1508..1520).2" />
<Link Source="10346:[1848..2424).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1894..2409).4" Target="10346:[1472..1506).2" />
<Link Source="10346:[1894..2409).4" Target="10077:[38733..38808).2" />
<Link Source="10346:[1894..2409).4" Target="10346:[1848..2424).2" />
<Link Source="10346:[2160..2409).1" Target="10346:[1472..1506).2" />
<Link Source="10346:[2160..2409).1" Target="10346:[1894..2409).4" />
<Link Source="10346:[2265..2331).1" Target="10346:[1472..1506).2" />
<Link Source="10346:[2265..2331).1" Target="10346:[2160..2409).1" />
<Link Source="10346:[2353..2366).1" Target="10346:[2265..2331).1" />
<Link Source="10346:[2353..2366).1" Target="10346:[2160..2409).1" />
<Link Source="10346:[2353..2366).1" Target="10346:[1399..2435).3" />
<Link Source="10077:[37653..37719).5" Target="10077:[38881..38945).5" />
<Link Source="10077:[37653..37719).5" Target="10077:[37354..37742).1" />
<Link Source="10077:[37766..37777).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[2110..2139).5" Target="10077:[37766..37777).1" />
<Link Source="10077:[2110..2139).5" Target="10346:[2160..2409).1" />
<Link Source="10077:[37766..37798).1" Target="10077:[2110..2139).5" />
<Link Source="10077:[37766..37798).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[37766..37798).2" Target="10077:[36330..36380).3" />
<Link Source="10077:[37766..37798).2" Target="10077:[36432..37817).4" />
<Link Source="10077:[37766..37798).3" Target="10077:[37653..37719).5" />
<Link Source="10077:[37766..37798).3" Target="10077:[36432..37817).4" />
<Link Source="10077:[37766..37798).4" Target="10077:[37766..37798).2" />
<Link Source="10077:[37766..37798).4" Target="10077:[37766..37798).3" />
<Link Source="10077:[37766..37798).4" Target="10077:[37766..37798).1" />
<Link Source="10077:[37766..37798).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[37766..37798).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[37766..37798).4" Target="10286:[1428..1444).2" />
<Link Source="10077:[37766..37798).4" Target="10286:[1390..1400).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[1459..1470).2" />
<Link Source="10077:[37766..37798).4" Target="10286:[1478..1494).2" />
<Link Source="10077:[37766..37798).4" Target="10286:[18200..18223).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[1426..1457).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[1719..1734).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[974..986).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[1017..1033).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[1074..1100).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[2353..2366).1" />
<Link Source="10077:[37766..37798).4" Target="10346:[2160..2409).1" />
<Link Source="10077:[37766..37798).4" Target="10346:[1719..1832).2" />
<Link Source="10077:[37766..37798).4" Target="10077:[36432..37817).4" />
<Link Source="10077:[37766..37798).5" Target="10077:[36432..37817).4" />
<Link Source="10076:[1089..1109).1" Target="10077:[37766..37798).4" />
<Link Source="10076:[1089..1109).1" Target="10077:[37766..37798).5" />
<Link Source="10076:[1050..1225).1" Target="10077:[37766..37798).4" />
<Link Source="10076:[1050..1225).1" Target="10077:[37766..37798).5" />
<Link Source="10076:[1143..1210).1" Target="10076:[1050..1225).1" />
<Link Source="10076:[1143..1210).1" Target="10077:[37766..37798).4" />
<Link Source="10076:[1143..1210).1" Target="10076:[1089..1109).1" />
<Link Source="10076:[1143..1210).1" Target="10077:[37766..37798).5" />
<Link Source="10077:[37837..37851).1" Target="10077:[37653..37719).5" />
<Link Source="10077:[37837..37851).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[2926..2971).18" Target="10077:[2877..2892).3" />
<Link Source="10077:[2926..2971).18" Target="10077:[37837..37851).1" />
<Link Source="10077:[2926..2971).18" Target="10076:[1143..1210).1" />
<Link Source="10077:[2926..2971).18" Target="10077:[33241..33265).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[39610..39829).1" />
<Link Source="10077:[33290..34322).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[33414..33451).1" Target="10077:[33290..34322).1" />
<Link Source="10346:[7369..7588).1" Target="10077:[2926..2971).18" />
<Link Source="10346:[7369..7588).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7405..7454).1" Target="10346:[7369..7588).1" />
<Link Source="10346:[7405..7454).1" Target="10077:[2926..2971).18" />
<Link Source="10346:[7405..7454).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7405..7454).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7472..7573).1" />
<Link Source="10346:[7472..7573).2" Target="10077:[33414..33451).1" />
<Link Source="10346:[7479..7503).1" Target="10346:[7472..7573).2" />
<Link Source="10346:[7479..7503).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7562..7572).1" Target="10346:[7369..7588).1" />
<Link Source="10346:[7562..7572).1" Target="10077:[2926..2971).18" />
<Link Source="10346:[7562..7572).1" Target="10346:[7479..7503).1" />
<Link Source="10077:[33373..33481).1" Target="10346:[7562..7572).1" />
<Link Source="10077:[33373..33481).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[33290..34322).1" />
<Link Source="10077:[33509..34299).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33509..34299).1" Target="EXTERNAL" />
<Link Source="10077:[33509..34299).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[33969..34032).2" Target="10077:[2926..2971).18" />
<Link Source="10077:[33969..34032).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[33969..34032).3" Target="10077:[33509..34299).1" />
<Link Source="10077:[33984..34031).1" Target="10077:[33509..34299).1" />
<Link Source="10346:[2571..2602).1" Target="10077:[33969..34032).1" />
<Link Source="10346:[2571..2602).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2604..2615).1" Target="10077:[33969..34032).2" />
<Link Source="10346:[2604..2615).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2617..2639).1" Target="10077:[33969..34032).3" />
<Link Source="10346:[2617..2639).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2544..2854).1" Target="10077:[33969..34032).3" />
<Link Source="10346:[2544..2854).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2661..2665).1" Target="10346:[2604..2615).1" />
<Link Source="10346:[2661..2665).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2544..2854).2" Target="10077:[33984..34031).1" />
<Link Source="10286:[1247..1258).3" Target="10346:[2661..2665).1" />
<Link Source="10286:[1247..1258).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[1231..1520).3" Target="10346:[2544..2854).1" />
<Link Source="10286:[1231..1520).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[1260..1291).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[726..773).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[726..773).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[815..820).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[815..820).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[2975..3015).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[2975..3015).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[17802..17818).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[17802..17818).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[18200..18223).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[18200..18223).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).9" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).10" Target="10286:[1247..1258).3" />
<Link Source="10286:[1317..1350).10" Target="10286:[1317..1350).9" />
<Link Source="10286:[1317..1350).10" Target="10346:[2544..2854).2" />
<Link Source="10286:[1390..1400).3" Target="10286:[1247..1258).3" />
<Link Source="10286:[1390..1400).3" Target="10077:[33373..33481).1" />
<Link Source="10286:[1390..1400).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[1390..1400).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[1428..1444).3" Target="10286:[1247..1258).3" />
<Link Source="10286:[1428..1444).3" Target="10077:[33373..33481).1" />
<Link Source="10286:[1428..1444).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[1428..1444).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[1478..1494).3" Target="10286:[1260..1291).3" />
<Link Source="10286:[1478..1494).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[1478..1494).3" Target="10346:[2544..2854).2" />
<Link Source="10346:[858..868).3" Target="10346:[2544..2854).1" />
<Link Source="10346:[858..868).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[932..947).3" Target="10346:[2544..2854).1" />
<Link Source="10346:[932..947).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[974..986).3" Target="10346:[2544..2854).1" />
<Link Source="10346:[974..986).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[1017..1033).3" Target="10346:[2544..2854).1" />
<Link Source="10346:[1017..1033).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[1074..1100).3" Target="10346:[2544..2854).1" />
<Link Source="10346:[1074..1100).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2571..2602).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2691..2750).1" />
<Link Source="10346:[2691..2750).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2571..2602).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2766..2776).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2843).1" Target="10345:[922..1186).1" />
<Link Source="10346:[2803..2843).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2843).2" Target="10346:[2803..2843).1" />
<Link Source="10346:[2803..2843).2" Target="10346:[2617..2639).1" />
<Link Source="10346:[2803..2843).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2815).1" Target="10346:[2803..2843).2" />
<Link Source="10346:[2803..2815).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2803..2815).1" Target="10077:[33984..34031).1" />
<Link Source="10077:[34064..34272).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[33373..33481).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[34064..34272).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[34166..34241).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[34166..34241).1" Target="10077:[34064..34272).2" />
<Link Source="10077:[34166..34241).2" Target="10077:[33969..34032).3" />
<Link Source="10077:[34166..34241).2" Target="10077:[34064..34272).2" />
<Link Source="10077:[34166..34241).3" Target="10077:[34064..34272).2" />
<Link Source="10077:[34181..34240).1" Target="10077:[34064..34272).2" />
<Link Source="10376:[838..863).1" Target="10077:[34166..34241).1" />
<Link Source="10376:[838..863).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[865..876).1" Target="10077:[34166..34241).2" />
<Link Source="10376:[865..876).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[799..1016).1" Target="10077:[34166..34241).3" />
<Link Source="10376:[799..1016).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[898..902).1" Target="10376:[865..876).1" />
<Link Source="10376:[898..902).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[799..1016).2" Target="10077:[34181..34240).1" />
<Link Source="10382:[520..531).1" Target="10376:[898..902).1" />
<Link Source="10382:[520..531).1" Target="10376:[799..1016).2" />
<Link Source="10382:[486..580).1" Target="10376:[799..1016).1" />
<Link Source="10382:[486..580).1" Target="10376:[799..1016).2" />
<Link Source="10382:[553..557).1" Target="10382:[520..531).1" />
<Link Source="10382:[553..557).1" Target="10376:[799..1016).2" />
<Link Source="10382:[486..580).2" Target="10376:[799..1016).2" />
<Link Source="10286:[1247..1258).4" Target="10382:[553..557).1" />
<Link Source="10286:[1247..1258).4" Target="10382:[486..580).2" />
<Link Source="10286:[726..773).4" Target="10382:[486..580).1" />
<Link Source="10286:[726..773).4" Target="10382:[486..580).2" />
<Link Source="10286:[815..820).4" Target="10382:[486..580).1" />
<Link Source="10286:[815..820).4" Target="10382:[486..580).2" />
<Link Source="10286:[2975..3015).4" Target="10382:[486..580).1" />
<Link Source="10286:[2975..3015).4" Target="10382:[486..580).2" />
<Link Source="10286:[17802..17818).4" Target="10382:[486..580).1" />
<Link Source="10286:[17802..17818).4" Target="10382:[486..580).2" />
<Link Source="10286:[1317..1350).13" Target="10382:[486..580).2" />
<Link Source="10286:[1317..1350).14" Target="10286:[1247..1258).4" />
<Link Source="10286:[1317..1350).14" Target="10286:[1317..1350).13" />
<Link Source="10286:[1317..1350).14" Target="10382:[486..580).2" />
<Link Source="10286:[1390..1400).4" Target="10286:[1247..1258).4" />
<Link Source="10286:[1390..1400).4" Target="10286:[1390..1400).3" />
<Link Source="10286:[1390..1400).4" Target="10382:[486..580).1" />
<Link Source="10286:[1390..1400).4" Target="10382:[486..580).2" />
<Link Source="10286:[1428..1444).4" Target="10286:[1247..1258).4" />
<Link Source="10286:[1428..1444).4" Target="10286:[1428..1444).3" />
<Link Source="10286:[1428..1444).4" Target="10382:[486..580).1" />
<Link Source="10286:[1428..1444).4" Target="10382:[486..580).2" />
<Link Source="10376:[691..701).1" Target="10376:[799..1016).1" />
<Link Source="10376:[691..701).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[765..786).1" Target="10376:[799..1016).1" />
<Link Source="10376:[765..786).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[928..968).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[928..968).2" Target="10376:[838..863).1" />
<Link Source="10376:[928..968).2" Target="10376:[928..968).1" />
<Link Source="10376:[928..968).2" Target="10077:[34181..34240).1" />
<Link Source="10376:[982..992).1" Target="10376:[838..863).1" />
<Link Source="10376:[982..992).1" Target="10376:[799..1016).1" />
<Link Source="10376:[982..992).1" Target="10077:[34181..34240).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[34346..34420).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[34361..34419).1" Target="10076:[1307..1365).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34346..34420).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3452..3756).1" Target="10077:[34166..34241).3" />
<Link Source="10307:[3452..3756).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).1" Target="10307:[3452..3756).1" />
<Link Source="10307:[3547..3745).1" Target="10286:[1390..1400).4" />
<Link Source="10307:[3547..3745).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).2" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).2" Target="10077:[34361..34419).1" />
<Link Source="10307:[3555..3600).1" Target="10077:[34361..34419).1" />
<Link Source="10298:[471..492).7" Target="10307:[3547..3745).1" />
<Link Source="10298:[471..492).7" Target="10307:[3555..3600).1" />
<Link Source="10298:[494..511).7" Target="10307:[3547..3745).2" />
<Link Source="10298:[494..511).7" Target="10307:[3555..3600).1" />
<Link Source="10307:[3547..3745).4" Target="10307:[3496..3521).1" />
<Link Source="10307:[3547..3745).4" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).7" Target="10298:[471..492).7" />
<Link Source="10307:[3547..3745).7" Target="10307:[3547..3745).4" />
<Link Source="10307:[3547..3745).7" Target="10077:[34361..34419).1" />
<Link Source="10307:[3554..3645).1" Target="10307:[3547..3745).7" />
<Link Source="10307:[3554..3645).1" Target="10077:[34361..34419).1" />
<Link Source="10077:[34444..34455).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2110..2139).6" Target="10077:[34444..34455).1" />
<Link Source="10077:[2110..2139).6" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).1" Target="10077:[2110..2139).6" />
<Link Source="10077:[34444..34482).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[34444..34482).2" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).3" Target="10307:[3554..3645).1" />
<Link Source="10077:[34444..34482).3" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).2" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).3" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).1" />
<Link Source="10077:[34444..34482).4" Target="10076:[953..968).1" />
<Link Source="10077:[34444..34482).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[34444..34482).4" Target="10286:[1428..1444).4" />
<Link Source="10077:[34444..34482).4" Target="10286:[1390..1400).4" />
<Link Source="10077:[34444..34482).4" Target="10286:[1247..1258).4" />
<Link Source="10077:[34444..34482).4" Target="10382:[486..580).1" />
<Link Source="10077:[34444..34482).4" Target="10376:[982..992).1" />
<Link Source="10077:[34444..34482).4" Target="10376:[765..786).1" />
<Link Source="10077:[34444..34482).4" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).4" Target="10286:[1428..1444).3" />
<Link Source="10077:[34444..34482).4" Target="10286:[1390..1400).3" />
<Link Source="10077:[34444..34482).4" Target="10286:[1247..1258).3" />
<Link Source="10077:[34444..34482).4" Target="10286:[1478..1494).3" />
<Link Source="10077:[34444..34482).4" Target="10286:[18200..18223).3" />
<Link Source="10077:[34444..34482).4" Target="10346:[2766..2776).1" />
<Link Source="10077:[34444..34482).4" Target="10346:[932..947).3" />
<Link Source="10077:[34444..34482).4" Target="10346:[2803..2815).1" />
<Link Source="10077:[34444..34482).4" Target="10346:[1017..1033).3" />
<Link Source="10077:[34444..34482).4" Target="10346:[1074..1100).3" />
<Link Source="10077:[34444..34482).4" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).5" Target="10076:[1307..1365).1" />
<Link Source="10077:[34521..34541).1" Target="10307:[3554..3645).1" />
<Link Source="10077:[34521..34541).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2926..2971).22" Target="10077:[2926..2971).5" />
<Link Source="10077:[2926..2971).22" Target="10077:[34521..34541).1" />
<Link Source="10077:[2926..2971).22" Target="10077:[34444..34482).4" />
<Link Source="10077:[2926..2971).22" Target="10077:[2456..2480).1" />
<Link Source="10076:[5678..5718).3" Target="10076:[5470..5538).4" />
<Link Source="10076:[5678..5718).3" Target="10076:[4989..5047).1" />
<Link Source="10302:[16344..16385).1" Target="25002:[4395..4432).3" />
<Link Source="10302:[16344..16385).1" Target="25002:[4395..4432).1" />
<Link Source="10302:[16248..16799).1" Target="25002:[4395..4432).3" />
<Link Source="10302:[16248..16799).1" Target="25002:[4395..4432).1" />
<Link Source="10302:[16411..16517).1" Target="10302:[16344..16385).1" />
<Link Source="10302:[16411..16517).1" Target="10077:[2926..2971).22" />
<Link Source="10302:[16411..16517).1" Target="25002:[4395..4432).1" />
<Link Source="10302:[16533..16736).1" Target="10302:[16344..16385).1" />
<Link Source="10302:[16533..16736).1" Target="10077:[2926..2971).22" />
<Link Source="10302:[16533..16736).1" Target="25002:[4395..4432).1" />
<Link Source="10302:[16647..16721).1" Target="10302:[16533..16736).1" />
<Link Source="10302:[16659..16719).1" Target="10302:[16533..16736).1" />
<Link Source="10302:[16889..16928).1" Target="10302:[16647..16721).1" />
<Link Source="10302:[16889..16928).1" Target="10302:[16659..16719).1" />
<Link Source="10302:[16930..16956).1" Target="10302:[16647..16721).1" />
<Link Source="10302:[16930..16956).1" Target="10302:[16659..16719).1" />
<Link Source="10302:[16811..17185).1" Target="10302:[16248..16799).1" />
<Link Source="10302:[16811..17185).1" Target="10302:[16659..16719).1" />
<Link Source="10302:[16982..17174).1" Target="10302:[16889..16928).1" />
<Link Source="10302:[16982..17174).1" Target="10077:[2926..2971).22" />
<Link Source="10302:[16982..17174).1" Target="10302:[16659..16719).1" />
<Link Source="10302:[17006..17067).1" Target="10302:[16659..16719).1" />
<Link Source="10286:[10010..10027).1" Target="10302:[16982..17174).1" />
<Link Source="10286:[10010..10027).1" Target="10302:[17006..17067).1" />
<Link Source="10286:[9966..10197).1" Target="10302:[16811..17185).1" />
<Link Source="10286:[9966..10197).1" Target="10302:[17006..17067).1" />
<Link Source="10286:[10053..10100).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10053..10100).1" Target="10077:[2926..2971).22" />
<Link Source="10286:[10053..10100).1" Target="10302:[17006..17067).1" />
<Link Source="10286:[10114..10186).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10114..10186).1" Target="10077:[2926..2971).22" />
<Link Source="10286:[10114..10186).1" Target="10302:[17006..17067).1" />
<Link Source="10286:[10121..10185).1" Target="10302:[17006..17067).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[9966..10197).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[9073..9094).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[9096..9108).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9134..9189).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9203..9282).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10053..10100).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10121..10185).1" />
<Link Source="10286:[9305..9942).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9305..9942).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9298..9943).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[9298..9943).2" Target="EXTERNAL" />
<Link Source="10286:[9298..9943).2" Target="10286:[9305..9942).1" />
<Link Source="10286:[9798..9837).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[10465..10663).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9298..9943).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10607..10651).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10465..10663).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10551..10586).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10607..10651).1" />
<Link Source="10325:[4462..4594).1" Target="10286:[10465..10663).2" />
<Link Source="10325:[4462..4594).1" Target="10286:[10607..10651).1" />
<Link Source="10325:[4556..4582).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4462..4594).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10675..11259).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10465..10663).2" />
<Link Source="10286:[10741..11248).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[11085..11098).1" Target="10286:[10741..11248).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[11085..11098).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10600..10652).1" Target="10325:[4549..4583).1" />
<Link Source="10286:[10600..10652).1" Target="10286:[10607..10651).1" />
<Link Source="10302:[16982..17174).3" Target="10302:[16930..16956).1" />
<Link Source="10302:[16982..17174).3" Target="10286:[10600..10652).1" />
<Link Source="10302:[16982..17174).3" Target="10302:[16659..16719).1" />
<Link Source="10302:[16989..17067).1" Target="10302:[16982..17174).3" />
<Link Source="10302:[16989..17067).1" Target="10302:[16659..16719).1" />
<Link Source="10302:[16647..16721).6" Target="10302:[16411..16517).1" />
<Link Source="10302:[16647..16721).6" Target="10302:[16989..17067).1" />
<Link Source="10302:[16647..16721).6" Target="EXTERNAL" />
<Link Source="10302:[16647..16721).6" Target="10302:[16533..16736).1" />
<Link Source="10302:[16752..16788).1" Target="10302:[16411..16517).1" />
<Link Source="10302:[16752..16788).1" Target="10302:[16647..16721).6" />
<Link Source="10302:[16752..16788).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[5223..5250).10" Target="10302:[16752..16788).1" />
<Link Source="10076:[5223..5250).10" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).10" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).10" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).10" Target="10302:[16752..16788).1" />
<Link Source="10076:[5277..5448).10" Target="10076:[4989..5047).1" />
<Link Source="10077:[31258..31297).2" Target="10077:[39610..39829).1" />
<Link Source="10077:[31258..31297).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[44231..44317).25" Target="10302:[16752..16788).1" />
<Link Source="10077:[44231..44317).25" Target="10077:[32567..32606).1" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1715..1727).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1715..1727).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1773..1785).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1773..1785).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1824..1835).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1824..1835).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1883..1903).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1883..1903).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1936..1956).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1936..1956).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2247..2272).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2247..2272).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2412..2424).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2339..2360).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2453..2464).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2362..2386).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2492..2512).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2658).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).3" />
<Link Source="10076:[2551..2658).5" Target="10076:[1715..1727).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2412..2424).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2453..2464).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[1883..1903).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2492..2512).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2247..2272).1" />
<Link Source="10076:[2551..2658).5" Target="10302:[16752..16788).1" />
<Link Source="10076:[2551..2658).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2576).1" Target="10076:[2551..2658).5" />
<Link Source="10076:[2551..2576).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2576).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3299).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[3236..3299).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3236..3248).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[3315..3375).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[3338..3374).1" Target="25002:[4395..4432).1" />
<Link Source="10325:[645..674).1" Target="10076:[3315..3375).1" />
<Link Source="10325:[645..674).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).1" Target="10076:[3315..3375).2" />
<Link Source="10325:[616..730).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[696..707).1" Target="10325:[645..674).1" />
<Link Source="10325:[696..707).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).2" Target="10076:[3338..3374).1" />
<Link Source="10286:[939..968).1" Target="10325:[696..707).1" />
<Link Source="10286:[939..968).1" Target="10325:[616..730).2" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).1" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).2" />
<Link Source="10286:[726..773).5" Target="10286:[923..1219).1" />
<Link Source="10286:[726..773).5" Target="10325:[616..730).2" />
<Link Source="10286:[815..820).5" Target="10286:[923..1219).1" />
<Link Source="10286:[815..820).5" Target="10325:[616..730).2" />
<Link Source="10286:[2975..3015).5" Target="10286:[923..1219).1" />
<Link Source="10286:[2975..3015).5" Target="10325:[616..730).2" />
<Link Source="10286:[17802..17818).5" Target="10286:[923..1219).1" />
<Link Source="10286:[17802..17818).5" Target="10325:[616..730).2" />
<Link Source="10286:[18200..18223).5" Target="10286:[923..1219).1" />
<Link Source="10286:[18200..18223).5" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).2" Target="10286:[939..968).1" />
<Link Source="10286:[994..1034).2" Target="10286:[994..1034).1" />
<Link Source="10286:[994..1034).2" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1048..1096).1" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).2" Target="10286:[1048..1096).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[726..773).5" />
<Link Source="10286:[1048..1096).2" Target="10286:[815..820).5" />
<Link Source="10286:[1048..1096).2" Target="10286:[2975..3015).5" />
<Link Source="10286:[1048..1096).2" Target="10286:[17802..17818).5" />
<Link Source="10286:[1048..1096).2" Target="10286:[18200..18223).5" />
<Link Source="10286:[1048..1096).2" Target="10325:[616..730).2" />
<Link Source="10286:[1110..1120).1" Target="10286:[939..968).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2658).5" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2576).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[3236..3248).1" />
<Link Source="10286:[1110..1120).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1110..1120).1" Target="10325:[616..730).2" />
<Link Source="10286:[1177..1193).1" Target="10286:[939..968).1" />
<Link Source="10286:[1177..1193).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1177..1193).1" Target="10325:[616..730).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[3315..3375).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3315..3335).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).34" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).34" Target="10076:[2551..2658).5" />
<Link Source="25002:[4395..4432).34" Target="10076:[2551..2576).1" />
<Link Source="25002:[4395..4432).34" Target="10076:[3236..3248).1" />
<Link Source="25002:[4395..4432).34" Target="10076:[3315..3335).1" />
<Link Source="25002:[4395..4432).34" Target="10076:[3236..3299).1" />
<Link Source="25002:[4395..4432).34" Target="10286:[1048..1096).2" />
<Link Source="25002:[4395..4432).34" Target="10286:[1110..1120).1" />
<Link Source="25002:[4395..4432).34" Target="10286:[1177..1193).1" />
<Link Source="25002:[4395..4432).34" Target="28001:[74563..75296).4" />
<Link Source="10076:[5223..5250).14" Target="25002:[4395..4432).34" />
<Link Source="10076:[5223..5250).14" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).14" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).14" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).14" Target="25002:[4395..4432).34" />
<Link Source="10076:[5277..5448).14" Target="10076:[4989..5047).1" />
<Link Source="10077:[34685..34715).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[31258..31297).3" Target="10077:[39610..39829).1" />
<Link Source="10077:[31258..31297).3" Target="10077:[34685..34715).3" />
<Link Source="10077:[31490..32331).31" Target="10077:[34685..34715).3" />
<Link Source="10077:[31842..31894).1" Target="EXTERNAL" />
<Link Source="10077:[31842..31894).1" Target="25002:[4395..4432).34" />
<Link Source="10077:[32358..32401).3" Target="10077:[34685..34715).3" />
<Link Source="10077:[32567..32606).3" Target="10077:[32358..32401).3" />
<Link Source="10077:[44231..44317).33" Target="10077:[31842..31894).1" />
<Link Source="10077:[44231..44317).33" Target="10077:[32567..32606).3" />
<Link Source="10077:[44231..44317).35" Target="10077:[32567..32606).3" />
<Link Source="10077:[44335..44374).19" Target="10077:[32567..32606).3" />
<Link Source="10077:[44342..44373).5" Target="10077:[32567..32606).3" />
<Link Source="10076:[853..1034).5" Target="10077:[44335..44374).19" />
<Link Source="10076:[853..1034).5" Target="10077:[44342..44373).5" />
<Link Source="10077:[32557..32607).11" Target="10077:[44335..44374).19" />
<Link Source="10077:[32557..32607).11" Target="10077:[32358..32401).3" />
<Link Source="10077:[32627..32647).3" Target="10077:[32358..32401).3" />
<Link Source="10077:[32670..32681).3" Target="10077:[32358..32401).3" />
<Link Source="10077:[32665..34501).23" Target="10077:[32557..32607).11" />
<Link Source="10077:[32665..34501).23" Target="10077:[32358..32401).3" />
<Link Source="10077:[32665..34501).24" Target="10077:[32627..32647).3" />
<Link Source="10077:[32665..34501).24" Target="10077:[32358..32401).3" />
<Link Source="10077:[32665..34501).26" Target="10077:[32358..32401).3" />
<Link Source="10077:[44954..44972).3" Target="10077:[31842..31894).1" />
<Link Source="10077:[44966..44971).67" Target="10077:[44954..44972).3" />
<Link Source="10077:[44966..44971).67" Target="10077:[31842..31894).1" />
<Link Source="10077:[36100..36154).6" Target="10077:[31842..31894).1" />
<Link Source="10077:[44231..44317).41" Target="10077:[31842..31894).1" />
<Link Source="10077:[36519..36532).2" Target="10077:[31842..31894).1" />
<Link Source="10077:[36554..36584).2" Target="10077:[31842..31894).1" />
<Link Source="10076:[5223..5250).17" Target="10077:[31842..31894).1" />
<Link Source="10076:[5277..5448).17" Target="10077:[31842..31894).1" />
<Link Source="10077:[1142..1210).29" Target="10077:[31842..31894).1" />
<Link Source="10077:[39421..39431).2" Target="10077:[31842..31894).1" />
<Link Source="10077:[1641..1732).2" Target="10077:[31842..31894).1" />
<Link Source="10077:[1641..1732).2" Target="10077:[39421..39431).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[1641..1732).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[31842..31894).1" />
<Link Source="10077:[1685..1713).2" Target="10077:[39421..39431).2" />
<Link Source="10077:[39398..39590).7" Target="10077:[1685..1713).2" />
<Link Source="10077:[39398..39590).7" Target="10077:[31842..31894).1" />
<Link Source="10077:[39398..39590).8" Target="10077:[31842..31894).1" />
<Link Source="10286:[1317..1350).17" Target="10077:[31842..31894).1" />
<Link Source="10346:[858..868).4" Target="10077:[31842..31894).1" />
<Link Source="10346:[1572..1612).9" Target="10077:[31842..31894).1" />
<Link Source="10346:[1626..1666).9" Target="10077:[31842..31894).1" />
<Link Source="10077:[37882..38960).2" Target="10077:[31842..31894).1" />
<Link Source="10077:[38017..38044).2" Target="10077:[31842..31894).1" />
<Link Source="10077:[38062..38295).5" Target="10077:[31842..31894).1" />
<Link Source="10077:[38315..38347).2" Target="10077:[31842..31894).1" />
<Link Source="10077:[38826..38863).4" Target="10077:[31842..31894).1" />
<Link Source="10346:[2691..2750).6" Target="10077:[31842..31894).1" />
<Link Source="10376:[691..701).2" Target="10077:[31842..31894).1" />
<Link Source="10376:[928..968).5" Target="10077:[31842..31894).1" />
<Link Source="10845:[522..547).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[522..547).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[549..580).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[549..580).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[499..728).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[602..612).1" Target="10845:[522..547).1" />
<Link Source="10845:[602..612).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[637..638).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[660..678).1" Target="10845:[549..580).1" />
<Link Source="10845:[660..678).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[701..705).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).2" Target="25002:[4395..4432).1" />
<Link Source="10845:[764..789).1" Target="10845:[602..612).1" />
<Link Source="10845:[764..789).1" Target="10845:[499..728).2" />
<Link Source="10845:[791..816).1" Target="10845:[637..638).1" />
<Link Source="10845:[791..816).1" Target="10845:[499..728).2" />
<Link Source="10845:[818..841).1" Target="10845:[660..678).1" />
<Link Source="10845:[818..841).1" Target="10845:[499..728).2" />
<Link Source="10845:[843..878).1" Target="10845:[701..705).1" />
<Link Source="10845:[843..878).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).1" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).2" />
<Link Source="10845:[900..910).1" Target="10845:[764..789).1" />
<Link Source="10845:[900..910).1" Target="10845:[499..728).2" />
<Link Source="10845:[912..933).1" Target="10845:[791..816).1" />
<Link Source="10845:[912..933).1" Target="10845:[499..728).2" />
<Link Source="10845:[935..953).1" Target="10845:[818..841).1" />
<Link Source="10845:[935..953).1" Target="10845:[499..728).2" />
<Link Source="10845:[955..974).1" Target="10845:[843..878).1" />
<Link Source="10845:[955..974).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).2" Target="10845:[499..728).2" />
<Link Source="10843:[1173..1198).1" Target="10845:[900..910).1" />
<Link Source="10843:[1173..1198).1" Target="10845:[740..997).2" />
<Link Source="10843:[1200..1225).1" Target="10845:[912..933).1" />
<Link Source="10843:[1200..1225).1" Target="10845:[740..997).2" />
<Link Source="10843:[1227..1250).1" Target="10845:[935..953).1" />
<Link Source="10843:[1227..1250).1" Target="10845:[740..997).2" />
<Link Source="10843:[1252..1287).1" Target="10845:[955..974).1" />
<Link Source="10843:[1252..1287).1" Target="10845:[740..997).2" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).1" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).2" />
<Link Source="10843:[734..744).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[734..744).1" Target="10845:[740..997).2" />
<Link Source="10843:[778..799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[778..799).1" Target="10845:[740..997).2" />
<Link Source="10843:[835..853).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[835..853).1" Target="10845:[740..997).2" />
<Link Source="10843:[1113..1134).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1113..1134).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).2" Target="10843:[1173..1198).1" />
<Link Source="10843:[1313..1354).2" Target="10843:[1313..1354).1" />
<Link Source="10843:[1313..1354).2" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).1" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1368..1474).2" Target="10843:[1368..1474).1" />
<Link Source="10843:[1368..1474).2" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).1" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1488..1600).2" Target="10843:[1488..1600).1" />
<Link Source="10843:[1488..1600).2" Target="10845:[740..997).2" />
<Link Source="10843:[1616..1631).1" Target="10843:[1173..1198).1" />
<Link Source="10843:[1616..1631).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1616..1631).1" Target="10845:[740..997).2" />
<Link Source="10843:[1659..1685).1" Target="10843:[1200..1225).1" />
<Link Source="10843:[1659..1685).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1659..1685).1" Target="10845:[740..997).2" />
<Link Source="10843:[1724..1742).1" Target="10843:[1227..1250).1" />
<Link Source="10843:[1724..1742).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1724..1742).1" Target="10845:[740..997).2" />
<Link Source="10843:[1778..1799).1" Target="10843:[1252..1287).1" />
<Link Source="10843:[1778..1799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1778..1799).1" Target="10845:[740..997).2" />
<Link Source="25002:[4395..4432).40" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).40" Target="10077:[31842..31894).1" />
<Link Source="25002:[4395..4432).40" Target="10843:[1616..1631).1" />
<Link Source="25002:[4395..4432).40" Target="10843:[1659..1685).1" />
<Link Source="25002:[4395..4432).40" Target="10843:[1724..1742).1" />
<Link Source="25002:[4395..4432).40" Target="10843:[1778..1799).1" />
<Link Source="25002:[4395..4432).40" Target="28001:[74563..75296).4" />
<Link Source="10076:[5223..5250).22" Target="25002:[4395..4432).40" />
<Link Source="10076:[5223..5250).22" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).22" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).22" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).22" Target="25002:[4395..4432).40" />
<Link Source="10076:[5277..5448).22" Target="10076:[4989..5047).1" />
<Link Source="10077:[15216..15245).1" Target="25002:[4395..4432).40" />
<Link Source="10077:[15216..15245).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[15171..15372).1" Target="25002:[4395..4432).40" />
<Link Source="10077:[15171..15372).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[15279..15357).1" Target="10077:[15216..15245).1" />
<Link Source="10077:[15279..15357).1" Target="25002:[4395..4432).40" />
<Link Source="10077:[15279..15357).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[15286..15310).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[2877..2892).12" Target="10077:[15279..15357).1" />
<Link Source="10077:[2877..2892).12" Target="10077:[15286..15310).1" />
<Link Source="10077:[2852..2986).12" Target="10077:[15171..15372).1" />
<Link Source="10077:[2852..2986).12" Target="10077:[15286..15310).1" />
<Link Source="10077:[2926..2971).71" Target="10077:[2852..2986).12" />
<Link Source="10077:[2926..2971).71" Target="10077:[2877..2892).12" />
<Link Source="10077:[2926..2971).71" Target="25002:[4395..4432).40" />
<Link Source="10077:[2926..2971).71" Target="10077:[15286..15310).1" />
<Link Source="10077:[34685..34715).4" Target="10077:[15286..15310).1" />
<Link Source="10077:[31258..31297).4" Target="10077:[31842..31894).1" />
<Link Source="10077:[31258..31297).4" Target="10077:[34685..34715).4" />
<Link Source="10077:[31490..32331).43" Target="10077:[34685..34715).4" />
<Link Source="10077:[32358..32401).4" Target="10077:[34685..34715).4" />
<Link Source="10077:[32567..32606).4" Target="10077:[32358..32401).4" />
<Link Source="10077:[44231..44317).57" Target="10077:[2926..2971).71" />
<Link Source="10077:[44231..44317).57" Target="10077:[32567..32606).4" />
<Link Source="10077:[44231..44317).59" Target="10077:[32567..32606).4" />
<Link Source="10077:[44335..44374).31" Target="10077:[32567..32606).4" />
<Link Source="10077:[44342..44373).8" Target="10077:[32567..32606).4" />
<Link Source="10076:[853..1034).8" Target="10077:[44335..44374).31" />
<Link Source="10076:[853..1034).8" Target="10077:[44342..44373).8" />
<Link Source="10077:[32557..32607).15" Target="10077:[44335..44374).31" />
<Link Source="10077:[32557..32607).15" Target="10077:[32358..32401).4" />
<Link Source="10077:[32627..32647).4" Target="10077:[32358..32401).4" />
<Link Source="10077:[32670..32681).4" Target="10077:[32358..32401).4" />
<Link Source="10077:[32665..34501).32" Target="10077:[32557..32607).15" />
<Link Source="10077:[32665..34501).32" Target="10077:[32358..32401).4" />
<Link Source="10077:[32665..34501).33" Target="10077:[32627..32647).4" />
<Link Source="10077:[32665..34501).33" Target="10077:[32358..32401).4" />
<Link Source="10077:[32665..34501).35" Target="10077:[32358..32401).4" />
<Link Source="10077:[15286..15356).1" Target="10077:[2456..2480).1" />
<Link Source="10307:[3496..3521).3" Target="10077:[2926..2971).71" />
<Link Source="10307:[3496..3521).3" Target="10077:[15286..15356).1" />
<Link Source="10307:[3452..3756).3" Target="10077:[2926..2971).71" />
<Link Source="10307:[3452..3756).3" Target="10077:[15286..15356).1" />
<Link Source="10307:[3547..3745).20" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).20" Target="10077:[15286..15356).1" />
<Link Source="10307:[3555..3600).3" Target="10077:[15286..15356).1" />
<Link Source="10298:[494..511).9" Target="10307:[3547..3745).20" />
<Link Source="10298:[494..511).9" Target="10307:[3555..3600).3" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3247..3264).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3290..3331).1" />
<Link Source="10307:[3290..3331).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).1" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).2" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).2" Target="10307:[3452..3756).3" />
<Link Source="10307:[3345..3429).2" Target="10307:[3228..3245).1" />
<Link Source="10307:[3345..3429).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).4" Target="10307:[3247..3264).1" />
<Link Source="10307:[3345..3429).4" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).5" Target="25002:[4395..4432).1" />
<Link Source="10307:[3352..3428).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3345..3429).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1085..1102).1" Target="10307:[3345..3429).2" />
<Link Source="10307:[1085..1102).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1104..1135).1" Target="10307:[3345..3429).4" />
<Link Source="10307:[1104..1135).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).1" Target="10307:[3345..3429).5" />
<Link Source="10307:[1028..1341).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[1072..1083).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[1085..1102).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).2" Target="10307:[3352..3428).1" />
<Link Source="10286:[1549..1560).1" Target="10307:[1161..1165).1" />
<Link Source="10286:[1549..1560).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1562..1579).1" Target="10307:[1167..1172).1" />
<Link Source="10286:[1562..1579).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1532..2083).1" Target="10307:[1028..1341).1" />
<Link Source="10286:[1532..2083).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[726..773).10" Target="10286:[1532..2083).1" />
<Link Source="10286:[726..773).10" Target="10307:[1028..1341).2" />
<Link Source="10286:[815..820).10" Target="10286:[1532..2083).1" />
<Link Source="10286:[815..820).10" Target="10307:[1028..1341).2" />
<Link Source="10286:[2975..3015).10" Target="10286:[1532..2083).1" />
<Link Source="10286:[2975..3015).10" Target="10307:[1028..1341).2" />
<Link Source="10286:[17802..17818).10" Target="10286:[1532..2083).1" />
<Link Source="10286:[17802..17818).10" Target="10307:[1028..1341).2" />
<Link Source="10286:[18200..18223).10" Target="10286:[1532..2083).1" />
<Link Source="10286:[18200..18223).10" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).2" Target="10286:[1549..1560).1" />
<Link Source="10286:[1605..1638).2" Target="10286:[1605..1638).1" />
<Link Source="10286:[1605..1638).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1688..1781).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).2" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1708..1779).1" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).10" Target="10286:[1688..1781).1" />
<Link Source="10298:[471..492).10" Target="10286:[1708..1779).1" />
<Link Source="10298:[494..511).10" Target="10286:[1688..1781).2" />
<Link Source="10298:[494..511).10" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1820..1963).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1820..1963).2" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1840..1888).1" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).11" Target="10286:[1820..1963).1" />
<Link Source="10298:[471..492).11" Target="10286:[1840..1888).1" />
<Link Source="10298:[494..511).11" Target="10286:[1820..1963).2" />
<Link Source="10298:[494..511).11" Target="10286:[1840..1888).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[1977..1981).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[2003..2013).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[2003..2013).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2003..2013).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[2036..2052).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[2036..2052).1" Target="10307:[3452..3756).3" />
<Link Source="10286:[2036..2052).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2036..2052).1" Target="10307:[1028..1341).2" />
<Link Source="10307:[683..708).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[683..708).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1104..1135).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1206..1253).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[3352..3428).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1104..1135).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[3352..3428).1" />
<Link Source="25002:[4395..4432).46" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).46" Target="10307:[3345..3429).5" />
<Link Source="25002:[4395..4432).46" Target="10307:[3452..3756).3" />
<Link Source="25002:[4395..4432).46" Target="10286:[2036..2052).1" />
<Link Source="25002:[4395..4432).46" Target="10286:[2003..2013).1" />
<Link Source="25002:[4395..4432).46" Target="10286:[1977..1981).1" />
<Link Source="25002:[4395..4432).46" Target="10286:[17802..17818).10" />
<Link Source="25002:[4395..4432).46" Target="10286:[18200..18223).10" />
<Link Source="25002:[4395..4432).46" Target="10307:[1273..1298).1" />
<Link Source="25002:[4395..4432).46" Target="28001:[74563..75296).4" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).1" Target="10319:[13685..13708).1" />
<Link Source="10319:[13850..13948).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13850..13948).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).3" Target="10319:[13737..13783).1" />
<Link Source="10319:[13850..13948).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).4" Target="10319:[13785..13824).1" />
<Link Source="10319:[13850..13948).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13863..13947).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13850..13948).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14956..14981).1" Target="10319:[13850..13948).2" />
<Link Source="10319:[14956..14981).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14983..15029).1" Target="10319:[13850..13948).3" />
<Link Source="10319:[14983..15029).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15031..15070).1" Target="10319:[13850..13948).4" />
<Link Source="10319:[15031..15070).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[15096..15130).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[14931..14954).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).4" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[15146..15291).4" />
<Link Source="10319:[15146..15291).5" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).6" Target="10319:[15146..15291).5" />
<Link Source="10319:[15146..15291).6" Target="10319:[15031..15070).1" />
<Link Source="10319:[15146..15291).6" Target="10319:[13863..13947).1" />
<Link Source="10319:[15159..15290).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[15146..15291).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20027..20052).1" Target="10319:[15146..15291).2" />
<Link Source="10319:[20027..20052).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20054..20093).1" Target="10319:[15146..15291).3" />
<Link Source="10319:[20054..20093).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20095..20126).1" Target="10319:[15146..15291).6" />
<Link Source="10319:[20095..20126).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[14862..16302).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20152..24647).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20152..24647).1" Target="25002:[4395..4432).46" />
<Link Source="10319:[20152..24647).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).2" Target="10319:[20027..20052).1" />
<Link Source="10319:[20508..20675).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).3" Target="10319:[20054..20093).1" />
<Link Source="10319:[20508..20675).3" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).4" Target="10319:[20095..20126).1" />
<Link Source="10319:[20508..20675).4" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).5" Target="10319:[20152..24647).1" />
<Link Source="10319:[20515..20674).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20508..20675).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41889..41914).1" Target="10319:[20508..20675).2" />
<Link Source="10319:[41889..41914).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41929..41968).1" Target="10319:[20508..20675).3" />
<Link Source="10319:[41929..41968).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41983..42014).1" Target="10319:[20508..20675).4" />
<Link Source="10319:[41983..42014).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42029..42063).1" Target="10319:[20508..20675).5" />
<Link Source="10319:[42029..42063).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[19916..30085).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[42089..42141).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[42839..42937).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42821..42938).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63885..63919).1" Target="10319:[42821..42938).2" />
<Link Source="10319:[63885..63919).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63934..63945).1" Target="10319:[42821..42938).3" />
<Link Source="10319:[63934..63945).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63960..63969).1" Target="10319:[42821..42938).4" />
<Link Source="10319:[63960..63969).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63984..64009).1" Target="10319:[42821..42938).6" />
<Link Source="10319:[63984..64009).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[63885..63919).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[64035..64445).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[42839..42937).1" />
<Link Source="10319:[64461..64473).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[64461..64473).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[42821..42938).7" />
<Link Source="10319:[42952..43079).2" Target="10319:[42952..43079).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[20515..20674).1" />
<Link Source="10354:[10975..11012).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10975..11012).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).3" Target="10354:[10826..10838).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[11026..11097).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[10809..10838).1" Target="10354:[11142..11154).1" />
<Link Source="10319:[43108..43134).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11244..11285).1" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[11026..11097).1" />
<Link Source="10354:[11244..11285).2" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).3" Target="10319:[43108..43134).1" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).2" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).1" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3068..3073).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3068..3073).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3200..3211).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3200..3211).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3319..3325).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3319..3325).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3380..3385).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3380..3385).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3474..3479).1" Target="10354:[3419..3448).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3501..3506).1" Target="EXTERNAL" />
<Link Source="10354:[3501..3506).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3501..3506).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3587).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3557).1" Target="10354:[3546..3587).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3615).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3607).1" Target="10354:[3601..3615).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).2" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3501..3506).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3557).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3601..3607).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3474..3479).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3587).1" />
<Link Source="10354:[11244..11285).4" Target="10319:[43108..43134).1" />
<Link Source="10354:[11312..11328).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[3684..3818).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3684..3818).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).1" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).2" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).3" Target="10354:[3720..3803).2" />
<Link Source="10354:[3720..3803).3" Target="10354:[11312..11328).1" />
<Link Source="10354:[11299..11330).1" Target="10354:[3720..3803).1" />
<Link Source="10354:[11299..11330).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11344..11360).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[11344..11360).1" Target="10319:[43108..43134).1" />
<Link Source="10319:[43095..43135).1" Target="10354:[11344..11360).1" />
<Link Source="10319:[43095..43135).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43173..43245).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43149..43246).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50330..50355).1" Target="10319:[43149..43246).2" />
<Link Source="10319:[50330..50355).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[50313..50328).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[51282..51325).1" Target="EXTERNAL" />
<Link Source="10319:[51282..51325).1" Target="10319:[50381..51340).1" />
<Link Source="10319:[43262..43312).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[41929..41968).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[51282..51325).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[43262..43312).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43489).1" Target="10319:[20515..20674).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43490).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43490).2" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43490).3" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43490).6" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43490).7" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43490).10" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[942..1750).1" Target="10319:[41732..45579).1" />
<Link Source="10312:[942..1750).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1322..1739).1" Target="10312:[1186..1207).1" />
<Link Source="10312:[1322..1739).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1326..1357).1" Target="10319:[43326..43489).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1322..1739).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1326..1357).1" />
<Link Source="10353:[7556..7642).1" Target="10353:[7504..7530).1" />
<Link Source="10353:[7556..7642).1" Target="EXTERNAL" />
<Link Source="10353:[7556..7642).1" Target="10312:[1326..1357).1" />
<Link Source="10312:[1585..1724).1" Target="10312:[994..1013).1" />
<Link Source="10312:[1585..1724).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).2" Target="10312:[1028..1062).1" />
<Link Source="10312:[1585..1724).2" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).3" Target="10312:[1077..1093).1" />
<Link Source="10312:[1585..1724).3" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).4" Target="10312:[1108..1117).1" />
<Link Source="10312:[1585..1724).4" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).5" Target="10312:[1132..1171).1" />
<Link Source="10312:[1585..1724).5" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).6" Target="10312:[1186..1207).1" />
<Link Source="10312:[1585..1724).6" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).7" Target="10312:[1222..1235).1" />
<Link Source="10312:[1585..1724).7" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).8" Target="10312:[1250..1296).1" />
<Link Source="10312:[1585..1724).8" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1723).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1724).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1724).2" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1724).3" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1724).4" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1724).5" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1724).6" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1724).7" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1724).8" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[942..1750).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[5755..5789).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[6044..6433).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[1585..1723).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[5721..5740).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).2" Target="10312:[5804..5815).1" />
<Link Source="10312:[6110..6221).2" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).3" Target="10312:[5830..5839).1" />
<Link Source="10312:[6110..6221).3" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).4" Target="10312:[5854..5893).1" />
<Link Source="10312:[6110..6221).4" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).5" Target="10312:[5908..5929).1" />
<Link Source="10312:[6110..6221).5" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).6" Target="10312:[5944..5957).1" />
<Link Source="10312:[6110..6221).6" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).7" Target="10312:[5972..6018).1" />
<Link Source="10312:[6110..6221).7" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6220).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6221).1" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6221).2" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6221).3" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6221).4" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6221).5" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6221).6" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6221).7" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[5663..6444).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3905..3919).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).9" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).9" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).9" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).9" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).10" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).11" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).11" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).11" Target="10354:[3720..3803).10" />
<Link Source="10354:[3720..3803).11" Target="10312:[3905..3919).1" />
<Link Source="10312:[3892..3921).1" Target="10354:[3720..3803).9" />
<Link Source="10312:[3892..3921).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3948..3966).1" Target="10312:[6110..6220).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3935..3968).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4750..4847).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4750..4847).1" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4863..5000).1" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5079..5183).1" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[5079..5183).1" />
<Link Source="10353:[5197..5323).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).1" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[4698..4724).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[5485..5759).1" />
<Link Source="10353:[5485..5759).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).1" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[4698..4724).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[5775..5979).1" />
<Link Source="10353:[5775..5979).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5995..6029).1" Target="10353:[5775..5979).3" />
<Link Source="10353:[5995..6029).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6002..6028).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[5995..6029).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6343..6358).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6384..6410).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6002..6028).1" />
<Link Source="10312:[3984..4005).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[3645..5112).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).2" Target="10312:[6110..6220).1" />
<Link Source="10312:[4060..4080).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[3696..3715).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4962..4966).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4919..5009).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[4058..4122).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[4094..4107).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4955..4994).1" Target="10354:[4094..4107).1" />
<Link Source="10354:[4955..4994).1" Target="10312:[4060..4080).1" />
<Link Source="10312:[4019..5073).4" Target="10354:[4955..4994).1" />
<Link Source="10312:[4019..5073).4" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).4" />
<Link Source="10312:[4019..5073).5" Target="10312:[6110..6220).1" />
<Link Source="10312:[4134..4806).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4134..4806).2" Target="10312:[3984..4005).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4134..4806).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4019..5073).5" />
<Link Source="10312:[4534..4658).1" Target="10312:[3696..3715).1" />
<Link Source="10312:[4534..4658).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).2" Target="10312:[3717..3728).1" />
<Link Source="10312:[4534..4658).2" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).3" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).4" Target="10312:[3741..3780).1" />
<Link Source="10312:[4534..4658).4" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).5" Target="10312:[3782..3803).1" />
<Link Source="10312:[4534..4658).5" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).6" Target="10312:[3645..5112).1" />
<Link Source="10312:[4534..4658).6" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).7" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).7" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).8" Target="10312:[3820..3866).1" />
<Link Source="10312:[4534..4658).8" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4657).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4658).1" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4658).2" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4658).3" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4658).4" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4658).5" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4658).6" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4658).7" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4658).8" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4019..5073).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[4534..4658).9" Target="10312:[4134..4806).2" />
<Link Source="10312:[4685..4699).1" Target="10312:[4134..4806).2" />
<Link Source="10354:[3684..3818).3" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).3" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).17" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).17" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).17" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).17" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).18" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).19" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).19" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).19" Target="10354:[3720..3803).18" />
<Link Source="10354:[3720..3803).19" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).1" Target="10354:[3720..3803).17" />
<Link Source="10312:[4680..4787).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4826..5058).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).1" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4826..5058).2" Target="10312:[4019..5073).5" />
<Link Source="10382:[1340..1359).1" Target="10312:[4534..4658).1" />
<Link Source="10382:[1340..1359).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1361..1372).1" Target="10312:[4534..4658).2" />
<Link Source="10382:[1361..1372).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1374..1383).1" Target="10312:[4534..4658).3" />
<Link Source="10382:[1374..1383).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1385..1424).1" Target="10312:[4534..4658).4" />
<Link Source="10382:[1385..1424).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1426..1447).1" Target="10312:[4534..4658).5" />
<Link Source="10382:[1426..1447).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1449..1470).1" Target="10312:[4534..4658).6" />
<Link Source="10382:[1449..1470).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1472..1485).1" Target="10312:[4534..4658).7" />
<Link Source="10382:[1472..1485).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1487..1533).1" Target="10312:[5335..5381).1" />
<Link Source="10382:[1487..1533).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1275..1939).1" Target="10312:[4019..5073).5" />
<Link Source="10382:[1275..1939).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1572..1586).1" Target="10312:[4534..4657).1" />
<Link Source="10354:[3684..3818).4" Target="10382:[1340..1359).1" />
<Link Source="10354:[3684..3818).4" Target="10382:[1572..1586).1" />
<Link Source="10354:[3720..3803).25" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).25" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).25" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).25" Target="10382:[1572..1586).1" />
<Link Source="10354:[3720..3803).26" Target="10382:[1572..1586).1" />
<Link Source="10354:[3720..3803).27" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[3720..3803).26" />
<Link Source="10354:[3720..3803).27" Target="10382:[1572..1586).1" />
<Link Source="10382:[1559..1588).1" Target="10354:[3720..3803).25" />
<Link Source="10382:[1559..1588).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1619..1629).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[913..1046).1" Target="10382:[1275..1939).1" />
<Link Source="10382:[913..1046).1" Target="10382:[1619..1629).1" />
<Link Source="10382:[949..1031).1" Target="EXTERNAL" />
<Link Source="10382:[949..1031).1" Target="10382:[1619..1629).1" />
<Link Source="10382:[1604..1691).1" Target="10382:[949..1031).1" />
<Link Source="10382:[1604..1691).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1604..1691).2" Target="10382:[1426..1447).1" />
<Link Source="10382:[1604..1691).2" Target="10382:[1604..1691).1" />
<Link Source="10382:[1604..1691).2" Target="10312:[4534..4657).1" />
<Link Source="10382:[1604..1691).3" Target="10312:[4534..4657).1" />
<Link Source="10382:[1737..1753).1" Target="10312:[4534..4657).1" />
<Link Source="10376:[1542..2071).1" Target="10382:[1275..1939).1" />
<Link Source="10376:[1542..2071).1" Target="10382:[1737..1753).1" />
<Link Source="10376:[1578..2009).1" Target="10382:[1737..1753).1" />
<Link Source="10376:[1578..2009).2" Target="10376:[1542..2071).1" />
<Link Source="10376:[1578..2009).2" Target="10319:[50381..51340).1" />
<Link Source="10376:[1578..2009).2" Target="10376:[1578..2009).1" />
<Link Source="10376:[1578..2009).2" Target="10382:[1737..1753).1" />
<Link Source="10376:[1653..1717).1" Target="10376:[1578..2009).2" />
<Link Source="10376:[1739..1899).1" Target="10376:[1542..2071).1" />
<Link Source="10376:[1739..1899).1" Target="10319:[50381..51340).1" />
<Link Source="10376:[1739..1899).1" Target="10376:[1578..2009).2" />
<Link Source="10376:[1850..1876).1" Target="10376:[1739..1899).1" />
<Link Source="10376:[1850..1876).1" Target="10319:[50381..51340).1" />
<Link Source="10376:[1850..1876).2" Target="10376:[1739..1899).1" />
<Link Source="10376:[1850..1876).3" Target="10376:[1653..1717).1" />
<Link Source="10376:[1850..1876).3" Target="10376:[1850..1876).1" />
<Link Source="10376:[1850..1876).3" Target="10376:[1850..1876).2" />
<Link Source="10376:[1850..1876).3" Target="10319:[50381..51340).1" />
<Link Source="10376:[1850..1876).3" Target="10376:[1739..1899).1" />
<Link Source="10376:[1921..1990).1" Target="10376:[1542..2071).1" />
<Link Source="10376:[1921..1990).1" Target="10376:[1850..1876).3" />
<Link Source="10376:[1921..1990).1" Target="10376:[1578..2009).2" />
<Link Source="10376:[1921..1990).2" Target="10376:[1653..1717).1" />
<Link Source="10376:[1921..1990).2" Target="10376:[1578..2009).2" />
<Link Source="10376:[1921..1990).3" Target="10376:[1578..2009).2" />
<Link Source="10376:[2027..2056).1" Target="10376:[1542..2071).1" />
<Link Source="10376:[2027..2056).1" Target="10376:[1921..1990).1" />
<Link Source="10376:[2027..2056).1" Target="10382:[1737..1753).1" />
<Link Source="10382:[1707..1928).1" Target="10376:[2027..2056).1" />
<Link Source="10382:[1707..1928).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1707..1928).2" Target="10382:[1707..1928).1" />
<Link Source="10382:[1707..1928).2" Target="10382:[1361..1372).1" />
<Link Source="10382:[1707..1928).2" Target="10376:[1921..1990).1" />
<Link Source="10382:[1707..1928).2" Target="10312:[4534..4657).1" />
<Link Source="10382:[1793..1913).1" Target="10382:[1707..1928).2" />
<Link Source="10382:[1793..1913).2" Target="10382:[1374..1383).1" />
<Link Source="10382:[1793..1913).2" Target="10382:[1707..1928).2" />
<Link Source="10382:[1793..1913).3" Target="10382:[1426..1447).1" />
<Link Source="10382:[1793..1913).3" Target="10382:[1707..1928).2" />
<Link Source="10382:[1793..1913).6" Target="10382:[1472..1485).1" />
<Link Source="10382:[1793..1913).6" Target="10382:[1707..1928).2" />
<Link Source="10382:[1793..1913).7" Target="10382:[1487..1533).1" />
<Link Source="10382:[1793..1913).7" Target="10382:[1707..1928).2" />
<Link Source="10382:[1811..1911).1" Target="10382:[1707..1928).2" />
<Link Source="10312:[63424..63437).1" Target="10382:[1793..1913).1" />
<Link Source="10312:[63424..63437).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63439..63448).1" Target="10382:[1793..1913).2" />
<Link Source="10312:[63439..63448).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63450..63471).1" Target="10382:[1793..1913).3" />
<Link Source="10312:[63450..63471).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63473..63501).1" Target="10382:[1793..1913).1" />
<Link Source="10312:[63473..63501).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63503..63516).1" Target="10382:[1793..1913).6" />
<Link Source="10312:[63503..63516).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63518..63564).1" Target="10382:[1793..1913).7" />
<Link Source="10312:[63518..63564).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63566..63612).1" Target="10382:[1793..1913).1" />
<Link Source="10312:[63566..63612).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63381..70761).1" Target="10382:[1449..1470).1" />
<Link Source="10312:[63381..70761).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63638..63668).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63682..63706).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[63424..63437).1" />
<Link Source="10312:[63859..64015).1" Target="10382:[1707..1928).2" />
<Link Source="10312:[63859..64015).1" Target="EXTERNAL" />
<Link Source="10312:[63859..64015).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[63859..64015).1" />
<Link Source="10312:[63881..63912).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64121..69285).1" Target="10382:[1707..1928).2" />
<Link Source="10312:[64121..69285).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[63381..70761).1" />
<Link Source="10312:[64121..69285).2" Target="10382:[1707..1928).2" />
<Link Source="10312:[64121..69285).2" Target="10312:[64121..69285).1" />
<Link Source="10312:[64121..69285).2" Target="10382:[1811..1911).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).2" Target="10312:[63439..63448).1" />
<Link Source="10312:[64353..69285).2" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).3" Target="10312:[63503..63516).1" />
<Link Source="10312:[64353..69285).3" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).4" Target="10312:[63450..63471).1" />
<Link Source="10312:[64353..69285).4" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).5" Target="10312:[63682..63706).1" />
<Link Source="10312:[64353..69285).5" Target="10312:[64121..69285).2" />
<Link Source="10312:[64357..64415).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[80978..80991).1" Target="10312:[64353..69285).1" />
<Link Source="10312:[80978..80991).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[80993..81002).1" Target="10312:[64353..69285).2" />
<Link Source="10312:[80993..81002).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81004..81017).1" Target="10312:[64353..69285).3" />
<Link Source="10312:[81004..81017).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81019..81040).1" Target="10312:[64353..69285).4" />
<Link Source="10312:[81019..81040).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81042..81069).1" Target="10312:[64353..69285).5" />
<Link Source="10312:[81042..81069).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[80978..80991).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81095..84034).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[83750..83991).1" Target="10312:[81095..84034).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[80993..81002).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[83750..83991).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[81095..84034).1" />
<Link Source="10312:[84050..84066).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[84080..84093).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[84080..84093).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[64121..69285).2" />
<Link Source="10312:[64537..64543).1" Target="10312:[64353..69285).6" />
<Link Source="10306:[3196..3249).1" Target="10312:[63381..70761).1" />
<Link Source="10306:[3196..3249).1" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).1" Target="10306:[3196..3249).1" />
<Link Source="10306:[3202..3247).1" Target="10312:[64121..69285).2" />
<Link Source="10306:[3202..3247).1" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).2" Target="EXTERNAL" />
<Link Source="10306:[3202..3247).2" Target="10312:[64537..64543).1" />
<Link Source="10306:[3209..3246).1" Target="10312:[64537..64543).1" />
<Link Source="10298:[471..492).12" Target="10306:[3202..3247).1" />
<Link Source="10298:[471..492).12" Target="10306:[3209..3246).1" />
<Link Source="10298:[494..511).12" Target="10306:[3202..3247).2" />
<Link Source="10298:[494..511).12" Target="10306:[3209..3246).1" />
<Link Source="10312:[64532..69285).1" Target="10298:[471..492).12" />
<Link Source="10312:[64532..69285).1" Target="10312:[64353..69285).6" />
<Link Source="10312:[65229..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65229..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65229..69285).1" Target="10312:[64532..69285).1" />
<Link Source="10312:[65229..69285).2" Target="10312:[64532..69285).1" />
<Link Source="10312:[65474..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65474..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65474..69285).1" Target="10312:[65229..69285).1" />
<Link Source="10312:[65474..69285).2" Target="10312:[65229..69285).1" />
<Link Source="10312:[65730..65736).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65730..65736).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[66182..66188).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[66182..66188).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[63450..63471).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[63473..63501).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[65726..69285).1" />
<Link Source="10312:[66291..66342).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[75301..75322).1" Target="10312:[66177..69285).3" />
<Link Source="10312:[75301..75322).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75324..75352).1" Target="10312:[66177..69285).4" />
<Link Source="10312:[75324..75352).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).1" Target="10312:[75301..75322).1" />
<Link Source="10312:[75735..75866).1" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).2" Target="10312:[66291..66342).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[75735..75866).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75324..75352).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75742..75804).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[63638..63668).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[63518..63564).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[63566..63612).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[65726..69285).1" />
<Link Source="10312:[66215..66540).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[77528..77541).1" Target="10312:[66177..69285).2" />
<Link Source="10312:[77528..77541).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77543..77571).1" Target="10312:[75735..75866).4" />
<Link Source="10312:[77543..77571).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77573..77604).1" Target="10312:[66177..69285).7" />
<Link Source="10312:[77573..77604).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77606..77652).1" Target="10312:[66177..69285).8" />
<Link Source="10312:[77606..77652).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77654..77700).1" Target="10312:[66177..69285).9" />
<Link Source="10312:[77654..77700).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[63381..70761).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[77726..77892).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).2" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77730..77782).1" Target="10312:[66215..66540).1" />
<Link Source="10298:[471..492).15" Target="10312:[77726..77892).1" />
<Link Source="10298:[471..492).15" Target="10312:[77730..77782).1" />
<Link Source="10298:[494..511).15" Target="10312:[77726..77892).2" />
<Link Source="10298:[494..511).15" Target="10312:[77730..77782).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[77528..77541).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[77543..77571).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[77573..77604).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[77606..77652).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[77654..77700).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[66215..66540).1" />
<Link Source="10312:[77915..78032).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77908..78033).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78402..78430).1" Target="10312:[77908..78033).2" />
<Link Source="10312:[78402..78430).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78432..78463).1" Target="10312:[77908..78033).3" />
<Link Source="10312:[78432..78463).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78465..78511).1" Target="10312:[77908..78033).4" />
<Link Source="10312:[78465..78511).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78513..78552).1" Target="10312:[77908..78033).5" />
<Link Source="10312:[78513..78552).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[78387..78400).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[78402..78430).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[78432..78463).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[78465..78511).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[78513..78552).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[77915..78032).1" />
<Link Source="10312:[78649..78771).1" Target="10312:[77915..78032).1" />
<Link Source="10376:[1070..1083).1" Target="10312:[78642..78772).1" />
<Link Source="10376:[1070..1083).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1085..1113).1" Target="10312:[78642..78772).2" />
<Link Source="10376:[1085..1113).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1115..1146).1" Target="10312:[78642..78772).3" />
<Link Source="10376:[1115..1146).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1148..1194).1" Target="10312:[78642..78772).4" />
<Link Source="10376:[1148..1194).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1196..1235).1" Target="10312:[78642..78772).5" />
<Link Source="10376:[1196..1235).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1028..1425).1" Target="10312:[78346..78783).1" />
<Link Source="10376:[1028..1425).1" Target="10312:[64121..69285).2" />
<Link Source="10376:[1028..1425).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).1" Target="10376:[1070..1083).1" />
<Link Source="10376:[1261..1414).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).2" Target="10376:[1028..1425).1" />
<Link Source="10376:[1261..1414).2" Target="10312:[64121..69285).2" />
<Link Source="10376:[1261..1414).2" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).3" Target="10376:[1085..1113).1" />
<Link Source="10376:[1261..1414).3" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).4" Target="10376:[1115..1146).1" />
<Link Source="10376:[1261..1414).4" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).5" Target="10376:[1148..1194).1" />
<Link Source="10376:[1261..1414).5" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).6" Target="10376:[1196..1235).1" />
<Link Source="10376:[1261..1414).6" Target="10312:[78649..78771).1" />
<Link Source="10376:[1268..1413).1" Target="10312:[78649..78771).1" />
<Link Source="10286:[30070..30083).1" Target="10376:[1261..1414).1" />
<Link Source="10286:[30070..30083).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30098..30120).1" Target="10376:[1261..1414).2" />
<Link Source="10286:[30098..30120).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30135..30160).1" Target="10376:[1261..1414).3" />
<Link Source="10286:[30135..30160).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30175..30206).1" Target="10376:[1261..1414).4" />
<Link Source="10286:[30175..30206).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30221..30268).1" Target="10376:[1261..1414).5" />
<Link Source="10286:[30221..30268).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30283..30330).1" Target="10376:[1261..1414).6" />
<Link Source="10286:[30283..30330).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30012..30691).1" Target="10376:[1028..1425).1" />
<Link Source="10286:[30012..30691).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30356..30522).1" Target="10286:[30012..30691).1" />
<Link Source="10286:[30356..30522).1" Target="10312:[64121..69285).2" />
<Link Source="10286:[30356..30522).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30356..30522).2" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).2" Target="10376:[1268..1413).1" />
<Link Source="10286:[30360..30412).1" Target="10376:[1268..1413).1" />
<Link Source="10298:[471..492).16" Target="10286:[30356..30522).1" />
<Link Source="10298:[471..492).16" Target="10286:[30360..30412).1" />
<Link Source="10298:[494..511).16" Target="10286:[30356..30522).2" />
<Link Source="10298:[494..511).16" Target="10286:[30360..30412).1" />
<Link Source="10286:[30538..30680).1" Target="10286:[30070..30083).1" />
<Link Source="10286:[30538..30680).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).2" Target="10286:[30098..30120).1" />
<Link Source="10286:[30538..30680).2" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).3" Target="10286:[30135..30160).1" />
<Link Source="10286:[30538..30680).3" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).4" Target="10286:[30175..30206).1" />
<Link Source="10286:[30538..30680).4" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).5" Target="10286:[30221..30268).1" />
<Link Source="10286:[30538..30680).5" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).6" Target="10286:[30283..30330).1" />
<Link Source="10286:[30538..30680).6" Target="10376:[1268..1413).1" />
<Link Source="10286:[30545..30679).1" Target="10376:[1268..1413).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30538..30680).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2136..2158).1" Target="10286:[30538..30680).2" />
<Link Source="10060:[2136..2158).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2173..2198).1" Target="10286:[30538..30680).3" />
<Link Source="10060:[2173..2198).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2213..2244).1" Target="10286:[30538..30680).4" />
<Link Source="10060:[2213..2244).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2259..2305).1" Target="10286:[30538..30680).5" />
<Link Source="10060:[2259..2305).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2320..2366).1" Target="10286:[30538..30680).6" />
<Link Source="10060:[2320..2366).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).1" Target="10060:[2108..2121).1" />
<Link Source="10060:[2392..2555).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).2" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).2" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).3" Target="10060:[2173..2198).1" />
<Link Source="10060:[2392..2555).3" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).4" Target="10060:[2213..2244).1" />
<Link Source="10060:[2392..2555).4" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).5" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).5" Target="10312:[64121..69285).2" />
<Link Source="10060:[2392..2555).5" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).6" Target="10060:[2259..2305).1" />
<Link Source="10060:[2392..2555).6" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).7" Target="10060:[2320..2366).1" />
<Link Source="10060:[2392..2555).7" Target="10286:[30545..30679).1" />
<Link Source="10060:[2399..2554).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[2392..2555).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5621..5634).1" Target="10060:[2392..2555).2" />
<Link Source="10060:[5621..5634).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5691..5716).1" Target="10060:[2392..2555).3" />
<Link Source="10060:[5691..5716).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5731..5762).1" Target="10060:[2392..2555).4" />
<Link Source="10060:[5731..5762).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5777..5806).1" Target="10060:[2392..2555).5" />
<Link Source="10060:[5777..5806).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5821..5867).1" Target="10060:[2392..2555).6" />
<Link Source="10060:[5821..5867).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5882..5928).1" Target="10060:[2392..2555).7" />
<Link Source="10060:[5882..5928).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5593..5606).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5954..5991).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[5621..5634).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[6005..6042).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[6056..6090).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6056..6090).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6056..6090).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6188..6219).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6235..9907).1" Target="10060:[5593..5606).1" />
<Link Source="10060:[6235..9907).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6235..9907).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[8992..9004).1" Target="10060:[6235..9907).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[66177..69285).1" />
<Link Source="10312:[66177..69285).11" Target="10060:[8992..9004).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[65726..69285).1" />
<Link Source="10312:[67587..67593).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).1" Target="10312:[67587..67593).1" />
<Link Source="10312:[67582..69285).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[67582..69285).2" Target="10312:[66177..69285).11" />
<Link Source="10312:[67858..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[67858..69285).1" Target="EXTERNAL" />
<Link Source="10312:[67858..69285).1" Target="10312:[67582..69285).1" />
<Link Source="10312:[67858..69285).2" Target="10312:[67582..69285).1" />
<Link Source="10312:[68183..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68183..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68183..69285).1" Target="10312:[67858..69285).1" />
<Link Source="10312:[68183..69285).2" Target="10312:[67858..69285).1" />
<Link Source="10312:[68512..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68512..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68512..69285).1" Target="10312:[68183..69285).1" />
<Link Source="10312:[68512..69285).2" Target="10312:[68183..69285).1" />
<Link Source="10312:[68882..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68882..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68882..69285).1" Target="10312:[68512..69285).1" />
<Link Source="10312:[68882..69285).2" Target="10312:[68512..69285).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[68882..69285).1" />
<Link Source="10312:[69244..69269).1" Target="10312:[68882..69285).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69237..69270).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).1" Target="EXTERNAL" />
<Link Source="10354:[5439..5508).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).2" Target="10354:[5400..5413).1" />
<Link Source="10354:[5439..5508).2" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).3" Target="10312:[69244..69269).1" />
<Link Source="10354:[5446..5507).1" Target="10312:[69244..69269).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5439..5508).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1099..1112).1" Target="10354:[5439..5508).2" />
<Link Source="10368:[1099..1112).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1114..1134).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1114..1134).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1048..1256).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1048..1256).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1076..1097).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1160..1169).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1099..1112).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1191..1202).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1114..1134).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1226..1236).1" Target="10354:[5446..5507).1" />
<Link Source="10312:[69237..69270).2" Target="10354:[5439..5508).3" />
<Link Source="10312:[69237..69270).2" Target="10312:[68882..69285).1" />
<Link Source="10382:[1793..1912).1" Target="10382:[1707..1928).2" />
<Link Source="10354:[10217..10242).1" Target="10312:[69237..69270).2" />
<Link Source="10354:[10217..10242).1" Target="10382:[1793..1912).1" />
<Link Source="10354:[10192..10676).1" Target="10382:[1340..1359).1" />
<Link Source="10354:[10192..10676).1" Target="10382:[1793..1912).1" />
<Link Source="10354:[10272..10276).1" Target="10382:[1793..1912).1" />
<Link Source="10354:[4058..4122).3" Target="10354:[10192..10676).1" />
<Link Source="10354:[4058..4122).3" Target="10354:[10272..10276).1" />
<Link Source="10354:[10268..10665).1" Target="10354:[4058..4122).3" />
<Link Source="10354:[10268..10665).1" Target="10382:[1793..1912).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10268..10665).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10217..10242).1" />
<Link Source="10354:[10268..10665).2" Target="10368:[1160..1169).1" />
<Link Source="10354:[10268..10665).2" Target="10382:[1793..1912).1" />
<Link Source="10354:[10404..10408).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10386..10665).1" Target="10354:[10404..10408).1" />
<Link Source="10354:[10386..10665).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10442..10463).1" Target="10354:[10217..10242).1" />
<Link Source="10354:[10442..10463).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[10442..10462).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10463).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10192..10676).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8181..8186).1" Target="10368:[1160..1169).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[8214..8234).1" Target="10354:[8181..8186).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8248..8278).1" Target="10368:[1191..1202).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8109..8324).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8214..8234).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8248..8278).1" />
<Link Source="10354:[8248..8278).2" Target="10312:[67582..69285).2" />
<Link Source="10354:[8248..8278).2" Target="10354:[10442..10462).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8292..8298).1" Target="10368:[1226..1236).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[10442..10463).2" Target="10354:[10386..10665).1" />
<Link Source="10382:[1707..1928).6" Target="10382:[1707..1928).2" />
<Link Source="10382:[1707..1928).6" Target="10354:[8248..8278).2" />
<Link Source="10382:[1707..1928).6" Target="10354:[8292..8298).1" />
<Link Source="10382:[1707..1928).6" Target="10312:[4534..4657).1" />
<Link Source="10354:[3720..3803).33" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).33" Target="10354:[8248..8278).2" />
<Link Source="10354:[3720..3803).33" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).33" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).3" Target="10354:[3720..3803).33" />
<Link Source="10312:[4680..4787).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4749..4764).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4749..4764).1" Target="10312:[4680..4787).3" />
<Link Source="10312:[5087..5101).1" Target="10312:[4749..4764).1" />
<Link Source="10312:[5087..5101).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[1585..1724).9" Target="10353:[7556..7642).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[41889..41914).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).3" Target="10060:[5821..5867).1" />
<Link Source="10319:[43504..43546).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).2" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).3" />
<Link Source="10319:[43504..43546).4" Target="10354:[8248..8278).2" />
<Link Source="10319:[43504..43546).4" Target="10354:[8292..8298).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43562..43590).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[43799..44676).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[43095..43135).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43853..43873).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41088..41107).1" Target="10319:[43799..44676).3" />
<Link Source="10319:[41088..41107).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41138..41158).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4919..5009).4" Target="10319:[41088..41107).1" />
<Link Source="10354:[4919..5009).4" Target="10319:[41138..41158).1" />
<Link Source="10354:[4962..4966).4" Target="10319:[41138..41158).1" />
<Link Source="10354:[4058..4122).6" Target="10354:[4919..5009).4" />
<Link Source="10354:[4058..4122).6" Target="10354:[4962..4966).4" />
<Link Source="10354:[4094..4107).6" Target="10354:[4058..4122).6" />
<Link Source="10354:[4094..4107).6" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).6" Target="10354:[4962..4966).4" />
<Link Source="10319:[41133..41220).1" Target="10354:[4094..4107).6" />
<Link Source="10319:[41133..41220).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41254..41268).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41088..41107).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41254..41268).1" />
<Link Source="10354:[4561..4580).1" Target="10354:[4525..4595).1" />
<Link Source="10354:[4561..4580).1" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).1" Target="10319:[41254..41268).1" />
<Link Source="10319:[41236..41680).1" Target="10354:[4561..4580).1" />
<Link Source="10319:[41236..41680).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[41236..41680).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[43504..43546).4" />
<Link Source="10319:[41634..41646).1" Target="10319:[41302..41665).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[43562..43590).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[44751..44765).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[42089..42141).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).3" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[41849..41874).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[41983..42014).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44751..44765).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[42029..42063).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[51282..51325).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[44692..45392).1" />
<Link Source="10319:[44801..44929).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44785..44930).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84201..84218).1" Target="10319:[44785..44930).2" />
<Link Source="10319:[84201..84218).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84233..84242).1" Target="10319:[44785..44930).3" />
<Link Source="10319:[84233..84242).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84257..84273).1" Target="10319:[44785..44930).5" />
<Link Source="10319:[84257..84273).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84288..84313).1" Target="10319:[44785..44930).6" />
<Link Source="10319:[84288..84313).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84328..84359).1" Target="10319:[44785..44930).7" />
<Link Source="10319:[84328..84359).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84374..84391).1" Target="10319:[44785..44930).8" />
<Link Source="10319:[84374..84391).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84406..84447).1" Target="10319:[44785..44930).9" />
<Link Source="10319:[84406..84447).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84462..84508).1" Target="10319:[44785..44930).10" />
<Link Source="10319:[84462..84508).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[84167..84186).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[84201..84218).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[84233..84242).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[84257..84273).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[84288..84313).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[84328..84359).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[84374..84391).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[84406..84447).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[84462..84508).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[44801..44929).1" />
<Link Source="10319:[84550..84674).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84534..84675).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).2" Target="10319:[84534..84675).2" />
<Link Source="10319:[84907..109876).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).3" Target="10319:[84534..84675).3" />
<Link Source="10319:[84907..109876).3" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).4" Target="10319:[84534..84675).4" />
<Link Source="10319:[84907..109876).4" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).5" Target="10319:[84534..84675).5" />
<Link Source="10319:[84907..109876).5" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).6" Target="10319:[84534..84675).6" />
<Link Source="10319:[84907..109876).6" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).7" Target="10319:[84534..84675).7" />
<Link Source="10319:[84907..109876).7" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).8" Target="10319:[84534..84675).8" />
<Link Source="10319:[84907..109876).8" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).9" Target="10319:[84534..84675).9" />
<Link Source="10319:[84907..109876).9" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84124..109887).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84907..109876).4" />
<Link Source="10319:[85320..85348).2" Target="10319:[85320..85348).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[85366..85400).2" Target="10319:[85366..85400).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85434..85448).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[84907..109876).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[85434..85448).1" />
<Link Source="10354:[4561..4580).2" Target="10354:[4525..4595).2" />
<Link Source="10354:[4561..4580).2" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).2" Target="10319:[85434..85448).1" />
<Link Source="10319:[85420..85449).1" Target="10354:[4561..4580).2" />
<Link Source="10319:[85420..85449).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85467..85484).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85508..85528).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4919..5009).5" Target="10319:[84907..109876).1" />
<Link Source="10354:[4919..5009).5" Target="10319:[85508..85528).1" />
<Link Source="10354:[4962..4966).5" Target="10319:[85508..85528).1" />
<Link Source="10354:[4058..4122).7" Target="10354:[4919..5009).5" />
<Link Source="10354:[4058..4122).7" Target="10354:[4962..4966).5" />
<Link Source="10354:[4094..4107).7" Target="10354:[4058..4122).7" />
<Link Source="10354:[4094..4107).7" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).7" Target="10354:[4962..4966).5" />
<Link Source="10319:[85504..106825).1" Target="10354:[4094..4107).7" />
<Link Source="10319:[85504..106825).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85570..106806).1" Target="10319:[85504..106825).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85420..85449).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[43504..43546).4" />
<Link Source="10319:[85570..106806).2" Target="10319:[85570..106806).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85504..106825).1" />
<Link Source="10319:[103953..103983).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104078..104122).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104078..104122).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).2" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[104148..106735).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).3" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).3" Target="10319:[103953..103983).1" />
<Link Source="10319:[104148..106735).3" Target="EXTERNAL" />
<Link Source="10319:[104148..106735).3" Target="10319:[85570..106806).2" />
<Link Source="10319:[104874..105336).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104874..105336).1" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105368..106708).1" Target="10319:[84907..109876).6" />
<Link Source="10319:[105368..106708).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105465..105535).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[105465..105535).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[105465..105535).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[105465..105535).2" Target="10319:[105368..106708).1" />
<Link Source="10319:[105465..105535).3" Target="10319:[84907..109876).4" />
<Link Source="10319:[105465..105535).3" Target="10319:[105368..106708).1" />
<Link Source="10319:[105476..105534).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[105465..105535).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76360..76385).1" Target="10319:[105465..105535).2" />
<Link Source="10319:[76360..76385).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76387..76402).1" Target="10319:[105465..105535).3" />
<Link Source="10319:[76387..76402).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[76345..76358).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76428..76480).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76494..76582).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[105476..105534).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[84691..84861).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84691..84861).1" Target="10319:[76428..76480).1" />
<Link Source="10319:[84691..84861).1" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[84877..84891).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[76428..76480).1" />
<Link Source="10319:[44948..45377).1" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[45408..45421).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11383..11549).1" Target="10319:[43095..43135).1" />
<Link Source="10354:[11383..11549).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11428..11440).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[3841..3991).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[3841..3991).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3887..3892).1" Target="EXTERNAL" />
<Link Source="10354:[3887..3892).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3887..3892).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3932..3952).1" Target="10319:[76428..76480).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3887..3892).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3980).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3966..3980).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[11428..11441).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[3932..3952).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11455..11538).1" />
<Link Source="10354:[11455..11538).2" Target="10319:[45408..45421).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11455..11538).2" />
<Link Source="10354:[11506..11523).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[3932..3952).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[11506..11523).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[3966..3972).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[11455..11538).2" />
<Link Source="10319:[45408..45422).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45436..45568).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[45436..45568).1" Target="10354:[11506..11523).2" />
<Link Source="10319:[45436..45568).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45505..45551).1" Target="10319:[20515..20674).1" />
<Link Source="10286:[10010..10027).3" Target="10319:[45436..45568).1" />
<Link Source="10286:[10010..10027).3" Target="10319:[45505..45551).1" />
<Link Source="10286:[9966..10197).3" Target="10319:[41732..45579).1" />
<Link Source="10286:[9966..10197).3" Target="10319:[45505..45551).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[84877..84891).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[45443..45567).1" Target="10319:[20515..20674).1" />
<Link Source="10287:[2306..2328).1" Target="10286:[10010..10027).3" />
<Link Source="10287:[2306..2328).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2330..2343).1" Target="10319:[45436..45568).4" />
<Link Source="10287:[2330..2343).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2377..2471).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2377..2471).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2489..2521).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2489..2521).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).1" Target="10287:[2489..2521).1" />
<Link Source="10287:[2539..2781).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2546..2558).1" Target="10287:[2539..2781).1" />
<Link Source="10287:[2546..2558).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).2" Target="10287:[2306..2328).1" />
<Link Source="10287:[2539..2781).2" Target="10287:[2546..2558).1" />
<Link Source="10287:[2680..2780).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[718..757).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[718..757).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[666..1076).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[666..1076).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[791..833).1" Target="10287:[718..757).1" />
<Link Source="10287:[791..833).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[791..833).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[851..871).1" Target="10287:[718..757).1" />
<Link Source="10287:[851..871).1" Target="10287:[666..1076).1" />
<Link Source="10287:[851..871).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..927).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..919).1" Target="10287:[912..927).1" />
<Link Source="10287:[912..919).1" Target="10287:[666..1076).1" />
<Link Source="10287:[912..919).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..972).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..963).1" Target="10287:[945..972).1" />
<Link Source="10287:[945..963).1" Target="10287:[666..1076).1" />
<Link Source="10287:[945..963).1" Target="10287:[2680..2780).1" />
<Link Source="10319:[15383..15396).1" Target="10319:[13863..13947).1" />
<Link Source="10287:[1609..1643).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1609..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[1609..1643).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[851..871).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[1612..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10319:[15379..15933).1" Target="10287:[1612..1643).1" />
<Link Source="10319:[15379..15933).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15548..15561).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15548..15561).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15783..15809).1" Target="10319:[15544..15884).1" />
<Link Source="10287:[1474..1497).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1474..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[1474..1497).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[851..871).1" />
<Link Source="10287:[1477..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10319:[15783..15865).1" Target="10287:[1477..1497).1" />
<Link Source="10319:[15783..15865).1" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[14862..16302).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[14931..14954).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[14956..14981).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).6" Target="10319:[15544..15884).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21531..21544).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21531..21544).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21546..21561).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21546..21561).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21563..21583).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21563..21583).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21462..21711).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21462..21711).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).1" Target="10286:[21504..21529).1" />
<Link Source="10286:[21609..21700).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).2" Target="10286:[21531..21544).1" />
<Link Source="10286:[21609..21700).2" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).3" Target="10286:[21546..21561).1" />
<Link Source="10286:[21609..21700).3" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).4" Target="10286:[21563..21583).1" />
<Link Source="10286:[21609..21700).4" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21699).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21700).1" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21700).2" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21700).3" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21700).4" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21462..21711).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[22071..22084).1" />
<Link Source="10286:[22156..22600).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[21609..21700).5" Target="10319:[15783..15865).6" />
<Link Source="10319:[15904..15918).1" Target="10287:[2546..2558).1" />
<Link Source="10319:[15904..15918).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[13962..14050).1" Target="10319:[15904..15918).1" />
<Link Source="10319:[13962..14050).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13962..14050).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).3" Target="10319:[13685..13708).1" />
<Link Source="10319:[13962..14050).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).4" Target="10319:[13737..13783).1" />
<Link Source="10319:[13962..14050).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13969..14029).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[13962..14050).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51817..51842).1" Target="10319:[13962..14050).2" />
<Link Source="10319:[51817..51842).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51844..51861).1" Target="10319:[13962..14050).3" />
<Link Source="10319:[51844..51861).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51863..51909).1" Target="10319:[13962..14050).4" />
<Link Source="10319:[51863..51909).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51939..51953).1" Target="10319:[13969..14029).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51762..51815).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).1" Target="10287:[1680..1716).1" />
<Link Source="10287:[1683..1690).1" Target="10287:[912..919).1" />
<Link Source="10287:[1683..1690).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).1" Target="10287:[1683..1690).1" />
<Link Source="10287:[1683..1716).1" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).1" Target="10287:[1683..1716).1" />
<Link Source="10319:[51935..52244).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[51762..51815).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[13969..14049).1" Target="25002:[4395..4432).1" />
<Link Source="10287:[1474..1497).2" Target="10319:[52260..52274).1" />
<Link Source="10287:[1474..1497).2" Target="10319:[13969..14049).1" />
<Link Source="10287:[1477..1497).2" Target="10287:[1474..1497).2" />
<Link Source="10287:[1477..1497).2" Target="10287:[851..871).1" />
<Link Source="10287:[1477..1497).2" Target="10319:[13969..14049).1" />
<Link Source="25002:[4395..4432).49" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).49" Target="10287:[1477..1497).2" />
<Link Source="25002:[4395..4432).49" Target="10319:[15783..15865).1" />
<Link Source="25002:[4395..4432).49" Target="10287:[2539..2781).2" />
<Link Source="25002:[4395..4432).49" Target="28001:[74563..75296).4" />
<Link Source="10327:[1273..1314).1" Target="25002:[4395..4432).3" />
<Link Source="10327:[1273..1314).1" Target="25002:[4395..4432).1" />
<Link Source="10327:[1279..1312).1" Target="25002:[4395..4432).1" />
<Link Source="10327:[1279..1312).2" Target="10327:[1273..1314).1" />
<Link Source="10327:[1279..1312).2" Target="25002:[4395..4432).49" />
<Link Source="10327:[1279..1312).2" Target="10327:[1279..1312).1" />
<Link Source="10327:[1279..1312).2" Target="25002:[4395..4432).1" />
<Link Source="25002:[4446..4475).1" Target="10327:[1279..1312).2" />
<Link Source="25002:[4446..4475).1" Target="28001:[74563..75296).4" />
<Link Source="25002:[4446..4475).2" Target="25002:[4284..4323).1" />
<Link Source="25002:[4446..4475).2" Target="28001:[74563..75296).4" />
<Link Source="25002:[4446..4474).1" Target="28001:[74563..75296).4" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4475).1" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4475).2" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[2296..2334).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[2336..2375).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2450).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2451).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2451).2" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[1554..1589).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[1591..1630).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).3" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1702).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1703).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1703).2" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1703).3" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2533..2565).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2611..2759).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).2" Target="25002:[2775..2867).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[74563..75297).4" />
<Link Source="25002:[2775..2867).2" Target="28001:[74563..75296).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[74563..75296).2" />
<Link Source="25002:[2775..2867).2" Target="28001:[74563..75296).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2816..2827).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[2842..2863).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[3253..3278).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[2878..2898).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[3427..3437).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[2946..2973).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[3562..3589).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[3091..3116).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[1383..1412).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[3131..3176).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[3191..3238).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[2988..3030).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[1713..1727).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[1891..1900).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[1941..1960).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[2816..2827).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[2842..2863).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[3253..3278).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[2878..2898).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[3427..3437).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[2946..2973).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[3562..3589).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[3091..3116).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[1383..1412).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[3131..3176).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[3191..3238).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[2988..3030).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[1713..1727).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[1891..1900).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[1941..1960).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[2816..2827).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[2842..2863).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3253..3278).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[2878..2898).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3427..3437).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[2946..2973).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3562..3589).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3091..3116).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[1383..1412).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3131..3176).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3191..3238).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[2988..3030).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[1713..1727).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[1891..1900).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[1941..1960).6" />
<Link Source="25002:[2775..2867).2" Target="28001:[75199..75277).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[74749..74835).1" />
<Link Source="25002:[2775..2867).2" Target="25007:[3901..4266).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[74978..75054).1" />
<Link Source="25002:[2775..2867).2" Target="25007:[3901..4266).20" />
<Link Source="25002:[2775..2867).2" Target="25007:[3901..4266).39" />
<Link Source="25002:[2775..2867).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).6" Target="25002:[2775..2867).1" />
<Link Source="25002:[2775..2867).6" Target="25002:[2775..2867).4" />
<Link Source="25002:[2775..2867).6" Target="28001:[74563..75297).4" />
<Link Source="25002:[2775..2867).6" Target="28001:[74563..75296).1" />
<Link Source="25002:[2775..2867).6" Target="28001:[74563..75296).2" />
<Link Source="25002:[2775..2867).6" Target="28001:[74563..75296).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2816..2827).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[2842..2863).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[3253..3278).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[2878..2898).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[3427..3437).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[2946..2973).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[3562..3589).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[3091..3116).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[1383..1412).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[3131..3176).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[3191..3238).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[2988..3030).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[1713..1727).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[1891..1900).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[1941..1960).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[2816..2827).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[2842..2863).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[3253..3278).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[2878..2898).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[3427..3437).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[2946..2973).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[3562..3589).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[3091..3116).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[1383..1412).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[3131..3176).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[3191..3238).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[2988..3030).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[1713..1727).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[1891..1900).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[1941..1960).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[2816..2827).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[2842..2863).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3253..3278).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[2878..2898).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3427..3437).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[2946..2973).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3562..3589).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3091..3116).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[1383..1412).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3131..3176).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3191..3238).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[2988..3030).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[1713..1727).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[1891..1900).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[1941..1960).6" />
<Link Source="25002:[2775..2867).6" Target="28001:[75199..75277).1" />
<Link Source="25002:[2775..2867).6" Target="28001:[74749..74835).1" />
<Link Source="25002:[2775..2867).6" Target="25007:[3901..4266).1" />
<Link Source="25002:[2775..2867).6" Target="28001:[74978..75054).1" />
<Link Source="25002:[2775..2867).6" Target="25007:[3901..4266).20" />
<Link Source="25002:[2775..2867).6" Target="25007:[3901..4266).39" />
<Link Source="25002:[2775..2867).6" Target="25002:[1656..1702).1" />
<Link Source="25003:[10448..10470).1" Target="25002:[2775..2867).6" />
<Link Source="25003:[10448..10470).1" Target="25002:[2775..2867).4" />
<Link Source="25003:[10451..10470).1" Target="25003:[10448..10470).1" />
<Link Source="25003:[10451..10470).1" Target="25002:[2775..2867).6" />
<Link Source="25003:[10451..10470).1" Target="25002:[2775..2867).4" />
<Link Source="25002:[2881..2977).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2881..2977).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).2" Target="25002:[2881..2977).1" />
<Link Source="25002:[2881..2977).2" Target="25003:[10451..10470).1" />
<Link Source="25002:[2881..2977).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[2881..2977).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[2881..2977).4" />
<Link Source="25002:[2881..2977).6" Target="25003:[10451..10470).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[1656..1702).1" />
<Link Source="25003:[10526..10550).1" Target="25002:[2881..2977).6" />
<Link Source="25003:[10526..10550).1" Target="25002:[2881..2977).4" />
<Link Source="25003:[10529..10550).1" Target="25003:[10526..10550).1" />
<Link Source="25003:[10529..10550).1" Target="25002:[2881..2977).6" />
<Link Source="25003:[10529..10550).1" Target="25002:[2881..2977).4" />
<Link Source="25002:[2991..3166).1" Target="25002:[2501..2531).1" />
<Link Source="25002:[2991..3166).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2567..2585).1" />
<Link Source="25002:[2991..3166).2" Target="25003:[10451..10470).1" />
<Link Source="25002:[2991..3166).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).2" />
<Link Source="25002:[2991..3166).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).8" Target="25002:[1656..1702).1" />
<Link Source="25003:[4933..4945).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4933..4945).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4947..4965).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4947..4965).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4967..5002).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4967..5002).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5004..5041).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5004..5041).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4904..7352).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4904..7352).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[912..917).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[912..917).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[950..967).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[950..967).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1000..1013).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1000..1013).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1048..1062).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1048..1062).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1099..1109).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1099..1109).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1151..1165).19" Target="25003:[4904..7352).1" />
<Link Source="25003:[1151..1165).19" Target="25002:[2991..3166).8" />
<Link Source="25003:[1276..1303).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1276..1303).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1336..1350).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1336..1350).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1460..1479).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1460..1479).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1527..1548).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1527..1548).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1673..1689).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1673..1689).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[5067..5072).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5067..5072).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5067..5072).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5067..5072).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5096..5113).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5096..5113).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5096..5113).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5096..5113).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5149..5162).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5149..5162).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5149..5162).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5149..5162).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5194..5203).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5194..5203).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5194..5203).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5194..5203).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5253..5275).1" Target="25003:[4967..5002).1" />
<Link Source="25003:[5253..5275).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5231..5324).1" Target="25003:[5253..5275).1" />
<Link Source="25003:[5231..5250).1" Target="25003:[5231..5324).1" />
<Link Source="25003:[5231..5250).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5231..5250).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5362..5386).1" Target="25003:[5004..5041).1" />
<Link Source="25003:[5362..5386).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5338..5428).1" Target="25003:[5362..5386).1" />
<Link Source="25003:[5338..5359).1" Target="25003:[5338..5428).1" />
<Link Source="25003:[5338..5359).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5338..5359).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5444..5476).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).2" Target="25003:[4933..4945).1" />
<Link Source="25003:[5490..6130).2" Target="25002:[2991..3166).4" />
<Link Source="25003:[5490..6130).2" Target="25003:[5490..6130).1" />
<Link Source="25003:[5490..6130).2" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).3" Target="25003:[4933..4945).1" />
<Link Source="25003:[5490..6130).3" Target="25002:[2991..3166).4" />
<Link Source="25003:[5490..6130).3" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).4" Target="EXTERNAL" />
<Link Source="25003:[5490..6130).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[5744..5776).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5744..5776).1" Target="25003:[5490..6130).2" />
<Link Source="25003:[5794..6115).1" Target="25003:[5490..6130).2" />
<Link Source="25003:[5794..6115).2" Target="25003:[5744..5776).1" />
<Link Source="25003:[5794..6115).2" Target="25003:[5794..6115).1" />
<Link Source="25003:[5794..6115).2" Target="25003:[5490..6130).2" />
<Link Source="25003:[6001..6015).1" Target="25003:[5744..5776).1" />
<Link Source="25003:[6001..6015).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6001..6015).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6001..6015).1" Target="25003:[5794..6115).2" />
<Link Source="25003:[6081..6086).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[6081..6086).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6081..6086).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6081..6086).1" Target="25003:[5794..6115).2" />
<Link Source="25003:[6146..6175).1" Target="25003:[4947..4965).1" />
<Link Source="25003:[6146..6175).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6146..6175).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[6208..7260).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6208..7260).1" Target="25003:[6146..6175).1" />
<Link Source="25003:[6208..7260).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[6276..6580).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6276..6580).1" Target="25003:[5194..5203).1" />
<Link Source="25003:[6276..6580).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6276..6580).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[6482..6561).1" Target="25003:[6276..6580).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[6276..6580).1" />
<Link Source="25003:[6600..7098).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[5744..5776).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[6600..7098).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[6208..7260).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[5744..5776).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[6600..7098).2" />
<Link Source="25003:[7118..7245).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[6659..6669).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[6208..7260).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6659..6669).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6482..6561).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6208..7260).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[5194..5203).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[7276..7341).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[7276..7290).1" Target="25003:[7276..7341).1" />
<Link Source="25003:[7276..7290).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[7276..7290).1" Target="25002:[2991..3166).8" />
<Link Source="25002:[2991..3166).9" Target="25002:[2991..3166).4" />
<Link Source="25002:[2991..3166).9" Target="25003:[7276..7341).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6081..6086).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5096..5113).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5149..5162).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6482..6496).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6659..6669).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[7276..7290).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[1276..1303).7" />
<Link Source="25002:[2991..3166).9" Target="25003:[6001..6015).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6146..6175).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5231..5250).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5338..5359).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[1673..1689).7" />
<Link Source="25002:[2991..3166).9" Target="25003:[4904..7352).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5194..5203).1" />
<Link Source="25002:[2991..3166).9" Target="25002:[1656..1702).1" />
<Link Source="25003:[5067..5072).2" Target="25003:[4933..4945).1" />
<Link Source="25003:[5067..5072).2" Target="25002:[2991..3166).9" />
<Link Source="25003:[5067..5072).2" Target="25003:[4904..7352).1" />
<Link Source="25003:[5067..5072).2" Target="25002:[2991..3166).8" />
<Link Source="25003:[7118..7245).8" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).8" Target="25002:[2991..3166).9" />
<Link Source="25003:[7118..7245).8" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).8" Target="25003:[6208..7260).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3341..3730).2" Target="25002:[3341..3730).1" />
<Link Source="25002:[3341..3730).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[3341..3730).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[3401..3434).1" Target="25002:[3341..3730).2" />
<Link Source="25002:[3401..3434).2" Target="25002:[3401..3434).1" />
<Link Source="25002:[3401..3434).2" Target="25002:[2991..3166).9" />
<Link Source="25002:[3401..3434).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[3401..3434).2" Target="25002:[3341..3730).2" />
<Link Source="25003:[10591..10601).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10591..10601).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10563..13732).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10563..13732).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10627..10664).1" Target="25003:[10591..10601).1" />
<Link Source="25003:[10627..10664).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10680..10725).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10680..10725).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[10680..10725).2" Target="25003:[10680..10725).1" />
<Link Source="25003:[10680..10725).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[10741..10799).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10741..10799).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10741..10799).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10741..10799).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[10741..10799).2" Target="25002:[3401..3434).2" />
<Link Source="25003:[10741..10799).2" Target="25003:[10741..10799).1" />
<Link Source="25003:[10741..10799).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[10815..10891).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10815..10891).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10815..10891).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10815..10891).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10907..10975).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10907..10975).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10907..10975).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10907..10975).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10991..11148).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10991..11148).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10991..11148).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[11059..11133).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10991..11148).1" />
<Link Source="25003:[11164..11464).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11164..11464).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[11164..11464).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11164..11464).2" Target="25003:[11164..11464).1" />
<Link Source="25003:[11164..11464).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[11224..11449).1" Target="25003:[11164..11464).2" />
<Link Source="25003:[11480..11903).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11480..11903).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[11480..11903).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11480..11903).2" Target="25003:[11480..11903).1" />
<Link Source="25003:[11480..11903).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[11917..12344).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11917..12344).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[11917..12344).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11917..12344).2" Target="25003:[11917..12344).1" />
<Link Source="25003:[11917..12344).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[12436..12535).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[12436..12535).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[12436..12535).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[12436..12535).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[12651..13498).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[12651..13498).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[12651..13498).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[12651..13498).2" Target="25003:[12651..13498).1" />
<Link Source="25003:[12651..13498).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[12855..12915).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13006..13029).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[1971..2761).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[1971..2761).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[2047..2709).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[1971..2761).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[2047..2709).2" Target="25003:[2047..2709).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[13006..13029).1" />
<Link Source="25003:[2321..2694).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2321..2694).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[2321..2694).1" Target="25003:[2047..2709).2" />
<Link Source="25003:[2321..2694).2" Target="25003:[2047..2709).2" />
<Link Source="25003:[2321..2340).1" Target="25003:[2321..2694).1" />
<Link Source="25003:[2321..2340).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2321..2340).1" Target="25003:[2047..2709).2" />
<Link Source="25003:[2723..2750).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2723..2750).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[2723..2750).1" Target="25003:[2321..2340).1" />
<Link Source="25003:[2723..2750).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[12994..13030).1" Target="25003:[2723..2750).1" />
<Link Source="25003:[12994..13030).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13060..13085).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[1971..2761).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[1971..2761).2" Target="25003:[13060..13085).1" />
<Link Source="25003:[2047..2709).4" Target="25003:[13060..13085).1" />
<Link Source="25003:[2047..2709).5" Target="25003:[1971..2761).2" />
<Link Source="25003:[2047..2709).5" Target="25003:[10741..10799).2" />
<Link Source="25003:[2047..2709).5" Target="25003:[2321..2340).1" />
<Link Source="25003:[2047..2709).5" Target="25003:[2047..2709).4" />
<Link Source="25003:[2047..2709).5" Target="25003:[13060..13085).1" />
<Link Source="25003:[2723..2750).2" Target="25003:[1971..2761).2" />
<Link Source="25003:[2723..2750).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[2723..2750).2" Target="25003:[2321..2340).1" />
<Link Source="25003:[2723..2750).2" Target="25003:[2047..2709).5" />
<Link Source="25003:[2723..2750).2" Target="25003:[13060..13085).1" />
<Link Source="25003:[13048..13086).1" Target="25003:[2723..2750).2" />
<Link Source="25003:[13048..13086).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13104..13483).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[13104..13483).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[13104..13483).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[13104..13483).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13393..13464).1" Target="25003:[12994..13030).1" />
<Link Source="25003:[13393..13464).1" Target="25003:[13104..13483).1" />
<Link Source="25003:[13393..13464).2" Target="25003:[13048..13086).1" />
<Link Source="25003:[13393..13464).2" Target="25003:[13104..13483).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[13393..13464).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[13393..13464).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[10741..10799).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2340).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[2047..2709).5" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2694).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2694).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[13104..13483).1" />
<Link Source="25003:[13514..13693).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[13514..13693).1" Target="25003:[13393..13464).3" />
<Link Source="25003:[13514..13693).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[13514..13693).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[13709..13721).1" Target="25002:[3401..3434).1" />
<Link Source="25002:[3401..3434).5" Target="25002:[3401..3434).2" />
<Link Source="25002:[3401..3434).5" Target="25003:[13709..13721).1" />
<Link Source="25002:[3401..3434).5" Target="25003:[13393..13464).3" />
<Link Source="25002:[3401..3434).5" Target="25002:[3341..3730).2" />
<Link Source="25002:[3452..3715).1" Target="25002:[3341..3730).2" />
<Link Source="25002:[3452..3715).2" Target="25002:[3401..3434).5" />
<Link Source="25002:[3452..3715).2" Target="25002:[3452..3715).1" />
<Link Source="25002:[3452..3715).2" Target="25002:[3341..3730).2" />
<Link Source="25002:[3508..3534).1" Target="25002:[3401..3434).5" />
<Link Source="25002:[3508..3534).1" Target="25002:[3452..3715).2" />
<Link Source="25003:[10680..10725).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[10815..10891).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[10907..10975).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[10991..11148).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[11059..11133).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[11059..11133).3" Target="25003:[10991..11148).2" />
<Link Source="25003:[11164..11464).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[11224..11449).4" Target="25003:[11164..11464).4" />
<Link Source="25003:[11480..11903).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[11917..12344).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[12436..12535).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[12855..12915).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[13514..13693).5" Target="25002:[3508..3534).1" />
<Link Source="25002:[3840..3992).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[2991..3166).9" />
<Link Source="25002:[3840..3992).2" Target="25002:[3508..3534).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[3840..3992).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[2533..2565).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[2501..2531).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[4126..4179).1" Target="25002:[1656..1702).1" />
<Link Source="25003:[17577..17609).1" Target="25002:[4102..4181).3" />
<Link Source="25003:[17577..17609).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17611..17641).1" Target="25002:[4102..4181).4" />
<Link Source="25003:[17611..17641).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17667..17688).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17702..17728).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[17742..17827).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).2" Target="25003:[17742..17827).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[17742..17827).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[17757..17803).1" Target="25003:[17742..17827).2" />
<Link Source="25003:[17757..17803).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).6" Target="25003:[17667..17688).1" />
<Link Source="25003:[17742..17827).6" Target="25003:[17757..17803).1" />
<Link Source="25003:[17841..17904).1" Target="25003:[17742..17827).6" />
<Link Source="25003:[17841..17904).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17918..17965).1" Target="25003:[17742..17827).6" />
<Link Source="25003:[17918..17965).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17936..17956).1" Target="25003:[17918..17965).1" />
<Link Source="25003:[17936..17956).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[17979..18071).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).2" Target="25003:[17979..18071).1" />
<Link Source="25003:[17979..18071).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[17979..18071).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).6" Target="25003:[17979..18071).1" />
<Link Source="25003:[17979..18071).6" Target="25003:[17979..18071).4" />
<Link Source="25003:[17979..18071).6" Target="25002:[3508..3534).1" />
<Link Source="25003:[17979..18071).6" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18085..18181).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).2" Target="25003:[18085..18181).1" />
<Link Source="25003:[18085..18181).2" Target="25003:[17979..18071).6" />
<Link Source="25003:[18085..18181).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).6" Target="25003:[18085..18181).1" />
<Link Source="25003:[18085..18181).6" Target="25003:[18085..18181).4" />
<Link Source="25003:[18085..18181).6" Target="25003:[17979..18071).6" />
<Link Source="25003:[18085..18181).6" Target="25002:[4126..4179).1" />
<Link Source="25003:[18197..18490).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18197..18490).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18201..18226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18197..18490).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[22962..23812).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[23085..23122).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[23085..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21725..21759).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[21605..21640).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).2" Target="25003:[21773..22187).1" />
<Link Source="25003:[21773..22187).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[21773..22187).2" Target="25003:[18201..18226).1" />
<Link Source="25003:[21845..21956).1" Target="25003:[21773..22187).2" />
<Link Source="25003:[21924..21937).1" Target="25003:[21845..21956).1" />
<Link Source="25003:[18506..18543).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18557..18581).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18557..18581).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18658..18664).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18678..18713).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18557..18581).1" />
<Link Source="25003:[18678..18713).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[18727..18781).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18795..18929).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).2" Target="25003:[18795..18929).1" />
<Link Source="25003:[18795..18929).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[18795..18929).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18855..18914).1" Target="25003:[18795..18929).2" />
<Link Source="25003:[18855..18914).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[18855..18914).2" Target="25003:[18795..18929).2" />
<Link Source="25003:[18872..18912).1" Target="25003:[18795..18929).2" />
<Link Source="25003:[22283..22306).1" Target="25003:[18855..18914).1" />
<Link Source="25003:[22283..22306).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22308..22323).1" Target="25003:[18855..18914).2" />
<Link Source="25003:[22308..22323).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[22349..22404).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[22308..22323).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[18872..18912).1" />
<Link Source="25003:[22391..22403).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[14779..17530).1" Target="25003:[22283..22306).1" />
<Link Source="25003:[14779..17530).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14837..14866).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14882..14907).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[14882..14907).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[22391..22403).1" />
<Link Source="25003:[14921..15244).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[14921..15244).2" Target="25003:[14921..15244).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15100..15131).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15100..15131).1" Target="25003:[18085..18181).6" />
<Link Source="25003:[15100..15131).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15100..15131).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[15100..15131).2" Target="25003:[15100..15131).1" />
<Link Source="25003:[15100..15131).2" Target="25003:[14882..14907).3" />
<Link Source="25003:[15100..15131).2" Target="25003:[14921..15244).2" />
<Link Source="25003:[15149..15164).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15149..15164).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15149..15164).3" Target="25003:[15149..15164).1" />
<Link Source="25003:[15149..15164).3" Target="25003:[15100..15131).2" />
<Link Source="25003:[15149..15164).3" Target="25003:[14921..15244).2" />
<Link Source="25003:[15182..15229).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15182..15229).1" Target="25003:[18085..18181).6" />
<Link Source="25003:[15182..15229).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15182..15229).5" Target="25003:[14837..14866).1" />
<Link Source="25003:[15182..15229).5" Target="25003:[15182..15229).1" />
<Link Source="25003:[15182..15229).5" Target="25003:[15149..15164).3" />
<Link Source="25003:[15182..15229).5" Target="25003:[14921..15244).2" />
<Link Source="25003:[15260..15767).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[15260..15767).2" Target="25003:[15260..15767).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15320..15717).1" Target="25003:[15260..15767).2" />
<Link Source="25003:[15632..15650).1" Target="25003:[15320..15717).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[15632..15650).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[15182..15229).5" />
<Link Source="25003:[15632..15650).3" Target="25003:[15320..15717).1" />
<Link Source="25003:[15672..15698).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15672..15698).1" Target="25003:[18085..18181).6" />
<Link Source="25003:[15672..15698).1" Target="25003:[15320..15717).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[15672..15698).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[15632..15650).3" />
<Link Source="25003:[15672..15698).2" Target="25003:[15320..15717).1" />
<Link Source="25003:[15737..15752).1" Target="25003:[15260..15767).2" />
<Link Source="25003:[15737..15752).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15737..15752).3" Target="25003:[15737..15752).1" />
<Link Source="25003:[15737..15752).3" Target="25003:[15672..15698).2" />
<Link Source="25003:[15737..15752).3" Target="25003:[15260..15767).2" />
<Link Source="25003:[15783..15883).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15783..15883).1" Target="25003:[18085..18181).6" />
<Link Source="25003:[15783..15883).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15899..15914).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[15899..15914).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[15737..15752).3" />
<Link Source="25003:[15899..15914).3" Target="25003:[22391..22403).1" />
<Link Source="25003:[15930..16520).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[15930..16520).2" Target="25003:[15930..16520).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15986..16015).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[15986..16015).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15986..16015).3" Target="25003:[15986..16015).1" />
<Link Source="25003:[15986..16015).3" Target="25003:[15899..15914).3" />
<Link Source="25003:[15986..16015).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16055..16078).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16033..16095).1" Target="25003:[16055..16078).1" />
<Link Source="25003:[16033..16095).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16113..16472).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16113..16472).3" Target="25003:[16033..16095).1" />
<Link Source="25003:[16113..16472).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16202..16218).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16202..16218).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16202..16218).3" Target="25003:[16202..16218).1" />
<Link Source="25003:[16202..16218).3" Target="25003:[15986..16015).3" />
<Link Source="25003:[16202..16218).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).1" Target="25003:[16033..16095).1" />
<Link Source="25003:[16240..16275).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[16240..16275).2" Target="25003:[16240..16275).1" />
<Link Source="25003:[16240..16275).2" Target="25003:[16202..16218).3" />
<Link Source="25003:[16240..16275).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16297..16313).3" Target="25003:[16297..16313).1" />
<Link Source="25003:[16297..16313).3" Target="25003:[16240..16275).2" />
<Link Source="25003:[16297..16313).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[16335..16453).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16414..16430).1" Target="25003:[16335..16453).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[16414..16430).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[16297..16313).3" />
<Link Source="25003:[16414..16430).3" Target="25003:[16335..16453).1" />
<Link Source="25003:[16490..16505).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16490..16505).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16490..16505).3" Target="25003:[16490..16505).1" />
<Link Source="25003:[16490..16505).3" Target="25003:[16414..16430).3" />
<Link Source="25003:[16490..16505).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16536..16829).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16536..16829).2" Target="25003:[16536..16829).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[16845..16954).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[16845..16954).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16845..16954).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16970..17144).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16970..17144).2" Target="25003:[16970..17144).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17160..17340).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[17160..17340).2" Target="25003:[17160..17340).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17356..17482).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[17356..17482).2" Target="25003:[17356..17482).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17498..17519).1" Target="25003:[14837..14866).1" />
<Link Source="25003:[17498..17519).1" Target="25003:[16490..16505).3" />
<Link Source="25003:[17498..17519).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[22349..22404).7" Target="25003:[17498..17519).1" />
<Link Source="25003:[22349..22404).7" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).8" Target="25003:[22349..22404).4" />
<Link Source="25003:[22349..22404).8" Target="25003:[22349..22404).7" />
<Link Source="25003:[22349..22404).8" Target="25003:[18872..18912).1" />
<Link Source="25003:[18855..18914).5" Target="25003:[18727..18781).1" />
<Link Source="25003:[18855..18914).5" Target="25003:[22349..22404).8" />
<Link Source="25003:[18855..18914).5" Target="25003:[18795..18929).2" />
<Link Source="25003:[18855..18914).7" Target="25003:[17936..17956).1" />
<Link Source="25003:[18855..18914).7" Target="25003:[16113..16472).3" />
<Link Source="25003:[22308..22323).2" Target="25003:[18855..18914).7" />
<Link Source="25003:[22308..22323).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[22349..22404).10" Target="25003:[16113..16472).3" />
<Link Source="25003:[22349..22404).13" Target="25003:[22349..22404).10" />
<Link Source="25003:[22349..22404).13" Target="25003:[22308..22323).2" />
<Link Source="25003:[22349..22404).13" Target="25003:[16113..16472).3" />
<Link Source="25003:[14837..14866).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[14882..14907).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[14882..14907).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[14882..14907).6" Target="25003:[14882..14907).4" />
<Link Source="25003:[14882..14907).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[14921..15244).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[15100..15131).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[15100..15131).3" Target="25003:[14921..15244).4" />
<Link Source="25003:[15100..15131).4" Target="25003:[14837..14866).3" />
<Link Source="25003:[15100..15131).4" Target="25003:[15100..15131).3" />
<Link Source="25003:[15100..15131).4" Target="25003:[14882..14907).6" />
<Link Source="25003:[15100..15131).4" Target="25003:[14921..15244).4" />
<Link Source="25003:[15149..15164).4" Target="25003:[14921..15244).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15149..15164).6" Target="25003:[15149..15164).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[15100..15131).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[14921..15244).4" />
<Link Source="25003:[15182..15229).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[15182..15229).6" Target="25003:[14921..15244).4" />
<Link Source="25003:[15182..15229).10" Target="25003:[14837..14866).3" />
<Link Source="25003:[15182..15229).10" Target="25003:[15182..15229).6" />
<Link Source="25003:[15182..15229).10" Target="25003:[15149..15164).6" />
<Link Source="25003:[15182..15229).10" Target="25003:[14921..15244).4" />
<Link Source="25003:[15260..15767).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[15320..15717).13" Target="25003:[15260..15767).4" />
<Link Source="25003:[15632..15650).4" Target="25003:[15320..15717).13" />
<Link Source="25003:[15632..15650).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15632..15650).6" Target="25003:[15632..15650).4" />
<Link Source="25003:[15632..15650).6" Target="25003:[15182..15229).10" />
<Link Source="25003:[15632..15650).6" Target="25003:[15320..15717).13" />
<Link Source="25003:[15672..15698).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[15672..15698).3" Target="25003:[15320..15717).13" />
<Link Source="25003:[15672..15698).4" Target="25003:[14837..14866).3" />
<Link Source="25003:[15672..15698).4" Target="25003:[15672..15698).3" />
<Link Source="25003:[15672..15698).4" Target="25003:[15632..15650).6" />
<Link Source="25003:[15672..15698).4" Target="25003:[15320..15717).13" />
<Link Source="25003:[15737..15752).4" Target="25003:[15260..15767).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15737..15752).6" Target="25003:[15737..15752).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[15672..15698).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[15260..15767).4" />
<Link Source="25003:[15783..15883).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[15899..15914).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[15899..15914).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15899..15914).6" Target="25003:[15899..15914).4" />
<Link Source="25003:[15899..15914).6" Target="25003:[15737..15752).6" />
<Link Source="25003:[15899..15914).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[15986..16015).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[15986..16015).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15986..16015).6" Target="25003:[15986..16015).4" />
<Link Source="25003:[15986..16015).6" Target="25003:[15899..15914).6" />
<Link Source="25003:[15986..16015).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[16202..16218).12" Target="25003:[14837..14866).3" />
<Link Source="25003:[16202..16218).12" Target="25003:[16202..16218).1" />
<Link Source="25003:[16202..16218).12" Target="25003:[15986..16015).6" />
<Link Source="25003:[16202..16218).12" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).7" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).8" Target="25003:[14837..14866).3" />
<Link Source="25003:[16240..16275).8" Target="25003:[16240..16275).7" />
<Link Source="25003:[16240..16275).8" Target="25003:[16202..16218).12" />
<Link Source="25003:[16240..16275).8" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).12" Target="25003:[14837..14866).3" />
<Link Source="25003:[16297..16313).12" Target="25003:[16297..16313).1" />
<Link Source="25003:[16297..16313).12" Target="25003:[16240..16275).8" />
<Link Source="25003:[16297..16313).12" Target="25003:[16113..16472).3" />
<Link Source="25003:[16414..16430).9" Target="25003:[14837..14866).3" />
<Link Source="25003:[16414..16430).9" Target="25003:[16414..16430).1" />
<Link Source="25003:[16414..16430).9" Target="25003:[16297..16313).12" />
<Link Source="25003:[16414..16430).9" Target="25003:[16335..16453).1" />
<Link Source="25003:[16490..16505).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[16490..16505).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16490..16505).6" Target="25003:[16490..16505).4" />
<Link Source="25003:[16490..16505).6" Target="25003:[16414..16430).9" />
<Link Source="25003:[16490..16505).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[16536..16829).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[16845..16954).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16970..17144).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[17160..17340).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[17356..17482).5" Target="25003:[16113..16472).3" />
<Link Source="25003:[17498..17519).3" Target="25003:[14837..14866).3" />
<Link Source="25003:[17498..17519).3" Target="25003:[16490..16505).6" />
<Link Source="25003:[17498..17519).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[22349..22404).16" Target="25003:[17498..17519).3" />
<Link Source="25003:[22349..22404).16" Target="25003:[16113..16472).3" />
<Link Source="25003:[22349..22404).17" Target="25003:[22349..22404).13" />
<Link Source="25003:[22349..22404).17" Target="25003:[22349..22404).16" />
<Link Source="25003:[22349..22404).17" Target="25003:[16113..16472).3" />
<Link Source="25003:[18943..18992).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18943..18992).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18992).2" Target="25003:[18727..18781).1" />
<Link Source="25003:[18943..18992).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18991).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18992).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18992).2" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[18855..18914).5" />
<Link Source="25003:[22669..22689).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22703..22939).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22669..22689).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[18943..18991).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[22703..22939).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[18855..18914).5" />
<Link Source="25003:[22763..22783).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[22763..22783).3" Target="25003:[22599..22615).1" />
<Link Source="25003:[22763..22783).3" Target="25003:[22763..22783).1" />
<Link Source="25003:[22763..22783).3" Target="25003:[18678..18713).3" />
<Link Source="25003:[22763..22783).3" Target="25003:[22703..22939).3" />
<Link Source="25003:[22801..22890).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[22856..22871).1" Target="25003:[22801..22890).1" />
<Link Source="25003:[22856..22871).3" Target="25003:[22599..22615).1" />
<Link Source="25003:[22856..22871).3" Target="25003:[22856..22871).1" />
<Link Source="25003:[22856..22871).3" Target="25003:[22763..22783).3" />
<Link Source="25003:[22856..22871).3" Target="25003:[22801..22890).1" />
<Link Source="25003:[22908..22924).1" Target="25003:[22599..22615).1" />
<Link Source="25003:[22908..22924).1" Target="25003:[22856..22871).3" />
<Link Source="25003:[22908..22924).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[18943..18992).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[19106..19139).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[22908..22924).1" />
<Link Source="25003:[19106..19139).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19153..19205).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19219..19250).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[19219..19250).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[19219..19250).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).3" Target="25003:[19219..19250).1" />
<Link Source="25003:[19264..20938).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19327..19352).1" Target="25003:[19219..19250).1" />
<Link Source="25003:[19327..19352).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[19370..19400).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[19370..19400).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[19418..19628).1" Target="25003:[19370..19400).1" />
<Link Source="25003:[19418..19628).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[19418..19628).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[19648..19745).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[19765..20366).1" Target="25003:[17841..17904).1" />
<Link Source="25003:[19765..20366).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[19846..19878).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[19846..19878).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19846..19878).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[19846..19878).2" Target="25003:[19765..20366).1" />
<Link Source="25003:[19846..19877).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[22454..22470).1" Target="25003:[19846..19878).1" />
<Link Source="25003:[22454..22470).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22472..22481).1" Target="25003:[19846..19878).2" />
<Link Source="25003:[22472..22481).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[22507..22533).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[22472..22481).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22454..22470).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22507..22533).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22507..22533).4" />
<Link Source="25003:[22507..22533).6" Target="25003:[19106..19139).3" />
<Link Source="25003:[22507..22533).6" Target="25003:[19846..19877).1" />
<Link Source="25003:[19846..19878).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[19900..19925).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[19900..19925).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[22507..22533).6" />
<Link Source="25003:[19900..19925).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19370..19400).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[19947..19983).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[19900..19925).3" />
<Link Source="25003:[19947..19983).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19947..19983).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[20005..20024).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[19947..19983).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[20112..20144).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[20112..20144).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20112..20144).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20112..20144).2" Target="25003:[20046..20347).1" />
<Link Source="25003:[20112..20143).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[22454..22470).2" Target="25003:[20112..20144).1" />
<Link Source="25003:[22454..22470).2" Target="25003:[20112..20143).1" />
<Link Source="25003:[22472..22481).2" Target="25003:[20112..20144).2" />
<Link Source="25003:[22472..22481).2" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).7" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).10" Target="25003:[22507..22533).7" />
<Link Source="25003:[22507..22533).10" Target="25003:[22472..22481).2" />
<Link Source="25003:[22507..22533).10" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).12" Target="25003:[22454..22470).2" />
<Link Source="25003:[22507..22533).12" Target="25003:[22507..22533).7" />
<Link Source="25003:[22507..22533).12" Target="25003:[22507..22533).10" />
<Link Source="25003:[22507..22533).12" Target="25003:[19947..19983).3" />
<Link Source="25003:[22507..22533).12" Target="25003:[20112..20143).1" />
<Link Source="25003:[20112..20144).3" Target="25003:[20046..20347).1" />
<Link Source="25003:[20170..20195).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[20170..20195).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[22507..22533).12" />
<Link Source="25003:[20170..20195).3" Target="25003:[20046..20347).1" />
<Link Source="25003:[20221..20324).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[18506..18543).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[20221..20324).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[20170..20195).3" />
<Link Source="25003:[20221..20324).8" Target="25003:[20046..20347).1" />
<Link Source="25003:[20386..20505).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[20386..20505).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[20386..20505).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[20386..20505).4" Target="25003:[17979..18071).2" />
<Link Source="25003:[20386..20505).4" Target="25003:[19264..20938).3" />
<Link Source="25003:[20386..20505).5" Target="25003:[18085..18181).2" />
<Link Source="25003:[20386..20505).5" Target="25003:[19264..20938).3" />
<Link Source="25003:[20404..20504).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[4933..4945).4" Target="25003:[20386..20505).1" />
<Link Source="25003:[4933..4945).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[4947..4965).4" Target="25003:[20386..20505).2" />
<Link Source="25003:[4947..4965).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[4967..5002).4" Target="25003:[20386..20505).4" />
<Link Source="25003:[4967..5002).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[5004..5041).4" Target="25003:[20386..20505).5" />
<Link Source="25003:[5004..5041).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[4904..7352).4" Target="25003:[20386..20505).2" />
<Link Source="25003:[4904..7352).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[912..917).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[912..917).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[950..967).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[950..967).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[1000..1013).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[1000..1013).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[1048..1062).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[1048..1062).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[1099..1109).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[1099..1109).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[1151..1165).28" Target="25003:[4904..7352).4" />
<Link Source="25003:[1151..1165).28" Target="25003:[20404..20504).1" />
<Link Source="25003:[1336..1350).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[1336..1350).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[1460..1479).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[1460..1479).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[1527..1548).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[1527..1548).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[5067..5072).4" Target="25003:[4933..4945).4" />
<Link Source="25003:[5067..5072).4" Target="25003:[20221..20324).1" />
<Link Source="25003:[5067..5072).4" Target="25003:[4904..7352).4" />
<Link Source="25003:[5067..5072).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[5096..5113).4" Target="25003:[4933..4945).4" />
<Link Source="25003:[5096..5113).4" Target="25003:[20221..20324).1" />
<Link Source="25003:[5096..5113).4" Target="25003:[4904..7352).4" />
<Link Source="25003:[5096..5113).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[5149..5162).4" Target="25003:[4933..4945).4" />
<Link Source="25003:[5149..5162).4" Target="25003:[20221..20324).1" />
<Link Source="25003:[5149..5162).4" Target="25003:[4904..7352).4" />
<Link Source="25003:[5149..5162).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[5194..5203).4" Target="25003:[4933..4945).4" />
<Link Source="25003:[5194..5203).4" Target="25003:[20221..20324).1" />
<Link Source="25003:[5194..5203).4" Target="25003:[4904..7352).4" />
<Link Source="25003:[5194..5203).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[5444..5476).7" Target="25003:[20404..20504).1" />
<Link Source="25003:[5490..6130).23" Target="25003:[4933..4945).4" />
<Link Source="25003:[5490..6130).23" Target="25003:[20221..20324).1" />
<Link Source="25003:[5490..6130).23" Target="25003:[20404..20504).1" />
<Link Source="25003:[7118..7245).19" Target="25003:[4904..7352).4" />
<Link Source="25003:[7118..7245).20" Target="25003:[4904..7352).4" />
<Link Source="25003:[7118..7245).20" Target="25003:[5490..6130).23" />
<Link Source="25003:[7118..7245).20" Target="25003:[7118..7245).19" />
<Link Source="25003:[7118..7245).22" Target="25003:[4904..7352).4" />
<Link Source="25003:[7118..7245).22" Target="25003:[5490..6130).23" />
<Link Source="25003:[7118..7245).22" Target="25003:[5194..5203).4" />
<Link Source="25003:[7118..7245).22" Target="25003:[7118..7245).19" />
<Link Source="25003:[20523..20557).1" Target="25003:[20386..20505).2" />
<Link Source="25003:[20523..20557).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[20575..20622).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[20575..20622).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[20575..20622).2" Target="25003:[20386..20505).2" />
<Link Source="25003:[20575..20622).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[20575..20622).3" Target="25003:[20575..20622).1" />
<Link Source="25003:[20575..20622).3" Target="25003:[20575..20622).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[5194..5203).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[5490..6130).23" />
<Link Source="25003:[20575..20622).3" Target="25003:[5096..5113).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[5149..5162).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[4904..7352).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[4947..4965).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[4967..5002).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[5004..5041).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[19264..20938).3" />
<Link Source="25003:[20575..20622).4" Target="25003:[19264..20938).3" />
<Link Source="25003:[10680..10725).10" Target="25003:[20575..20622).4" />
<Link Source="25003:[10680..10725).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[10680..10725).11" Target="25003:[10680..10725).10" />
<Link Source="25003:[10680..10725).11" Target="25003:[20575..20622).4" />
<Link Source="25003:[10815..10891).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[10815..10891).7" Target="25003:[20575..20622).4" />
<Link Source="25003:[10907..10975).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[10907..10975).7" Target="25003:[20575..20622).4" />
<Link Source="25003:[10991..11148).4" Target="25003:[20575..20622).3" />
<Link Source="25003:[10991..11148).4" Target="25003:[20575..20622).4" />
<Link Source="25003:[11059..11133).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[11059..11133).7" Target="25003:[10991..11148).4" />
<Link Source="25003:[11164..11464).10" Target="25003:[20575..20622).4" />
<Link Source="25003:[11164..11464).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[11164..11464).11" Target="25003:[11164..11464).10" />
<Link Source="25003:[11164..11464).11" Target="25003:[20575..20622).4" />
<Link Source="25003:[11480..11903).10" Target="25003:[20575..20622).4" />
<Link Source="25003:[11480..11903).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[11480..11903).11" Target="25003:[11480..11903).10" />
<Link Source="25003:[11480..11903).11" Target="25003:[20575..20622).4" />
<Link Source="25003:[11917..12344).10" Target="25003:[20575..20622).4" />
<Link Source="25003:[11917..12344).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[11917..12344).11" Target="25003:[11917..12344).10" />
<Link Source="25003:[11917..12344).11" Target="25003:[20575..20622).4" />
<Link Source="25003:[12436..12535).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[12436..12535).7" Target="25003:[20575..20622).4" />
<Link Source="25003:[12855..12915).10" Target="25003:[20575..20622).3" />
<Link Source="25003:[13514..13693).13" Target="25003:[20575..20622).3" />
<Link Source="25003:[13514..13693).13" Target="25003:[20575..20622).4" />
<Link Source="25003:[20640..20746).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[20640..20746).2" Target="25003:[20575..20622).3" />
<Link Source="25003:[20640..20746).2" Target="25003:[20640..20746).1" />
<Link Source="25003:[20640..20746).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[20695..20727).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[20695..20727).1" Target="25003:[20575..20622).3" />
<Link Source="25003:[20695..20727).1" Target="25003:[20640..20746).2" />
<Link Source="25003:[20764..20834).1" Target="25003:[20386..20505).2" />
<Link Source="25003:[20764..20834).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[20764..20834).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20764..20834).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[20782..20832).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[22283..22306).4" Target="25003:[20764..20834).1" />
<Link Source="25003:[22283..22306).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[22308..22323).4" Target="25003:[20764..20834).2" />
<Link Source="25003:[22308..22323).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).28" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).31" Target="25003:[22349..22404).28" />
<Link Source="25003:[22349..22404).31" Target="25003:[22308..22323).4" />
<Link Source="25003:[22349..22404).31" Target="25003:[20782..20832).1" />
<Link Source="25003:[14837..14866).7" Target="25003:[20782..20832).1" />
<Link Source="25003:[14882..14907).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[14882..14907).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[14882..14907).12" Target="25003:[14882..14907).10" />
<Link Source="25003:[14882..14907).12" Target="25003:[20782..20832).1" />
<Link Source="25003:[14921..15244).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[14921..15244).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[14921..15244).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[14921..15244).11" Target="25003:[14921..15244).10" />
<Link Source="25003:[14921..15244).11" Target="25003:[20782..20832).1" />
<Link Source="25003:[15100..15131).7" Target="25003:[22283..22306).4" />
<Link Source="25003:[15100..15131).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[15100..15131).7" Target="25003:[14921..15244).11" />
<Link Source="25003:[15100..15131).8" Target="25003:[14837..14866).7" />
<Link Source="25003:[15100..15131).8" Target="25003:[15100..15131).7" />
<Link Source="25003:[15100..15131).8" Target="25003:[14882..14907).12" />
<Link Source="25003:[15100..15131).8" Target="25003:[14921..15244).11" />
<Link Source="25003:[15149..15164).10" Target="25003:[14921..15244).11" />
<Link Source="25003:[15149..15164).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15149..15164).12" Target="25003:[15149..15164).10" />
<Link Source="25003:[15149..15164).12" Target="25003:[15100..15131).8" />
<Link Source="25003:[15149..15164).12" Target="25003:[14921..15244).11" />
<Link Source="25003:[15182..15229).16" Target="25003:[22283..22306).4" />
<Link Source="25003:[15182..15229).16" Target="25003:[20575..20622).3" />
<Link Source="25003:[15182..15229).16" Target="25003:[14921..15244).11" />
<Link Source="25003:[15182..15229).20" Target="25003:[14837..14866).7" />
<Link Source="25003:[15182..15229).20" Target="25003:[15182..15229).16" />
<Link Source="25003:[15182..15229).20" Target="25003:[15149..15164).12" />
<Link Source="25003:[15182..15229).20" Target="25003:[14921..15244).11" />
<Link Source="25003:[15260..15767).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[15260..15767).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[15260..15767).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[15260..15767).11" Target="25003:[15260..15767).10" />
<Link Source="25003:[15260..15767).11" Target="25003:[20782..20832).1" />
<Link Source="25003:[15320..15717).37" Target="25003:[15260..15767).11" />
<Link Source="25003:[15632..15650).10" Target="25003:[15320..15717).37" />
<Link Source="25003:[15632..15650).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15632..15650).12" Target="25003:[15632..15650).10" />
<Link Source="25003:[15632..15650).12" Target="25003:[15182..15229).20" />
<Link Source="25003:[15632..15650).12" Target="25003:[15320..15717).37" />
<Link Source="25003:[15672..15698).7" Target="25003:[22283..22306).4" />
<Link Source="25003:[15672..15698).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[15672..15698).7" Target="25003:[15320..15717).37" />
<Link Source="25003:[15672..15698).8" Target="25003:[14837..14866).7" />
<Link Source="25003:[15672..15698).8" Target="25003:[15672..15698).7" />
<Link Source="25003:[15672..15698).8" Target="25003:[15632..15650).12" />
<Link Source="25003:[15672..15698).8" Target="25003:[15320..15717).37" />
<Link Source="25003:[15737..15752).10" Target="25003:[15260..15767).11" />
<Link Source="25003:[15737..15752).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15737..15752).12" Target="25003:[15737..15752).10" />
<Link Source="25003:[15737..15752).12" Target="25003:[15672..15698).8" />
<Link Source="25003:[15737..15752).12" Target="25003:[15260..15767).11" />
<Link Source="25003:[15783..15883).4" Target="25003:[22283..22306).4" />
<Link Source="25003:[15783..15883).4" Target="25003:[20575..20622).3" />
<Link Source="25003:[15783..15883).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[15899..15914).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[15899..15914).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15899..15914).12" Target="25003:[15899..15914).10" />
<Link Source="25003:[15899..15914).12" Target="25003:[15737..15752).12" />
<Link Source="25003:[15899..15914).12" Target="25003:[20782..20832).1" />
<Link Source="25003:[15930..16520).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[15930..16520).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[15930..16520).11" Target="25003:[20782..20832).1" />
<Link Source="25003:[15986..16015).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[15986..16015).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15986..16015).12" Target="25003:[15986..16015).10" />
<Link Source="25003:[15986..16015).12" Target="25003:[15899..15914).12" />
<Link Source="25003:[15986..16015).12" Target="25003:[15930..16520).11" />
<Link Source="25003:[16202..16218).25" Target="25003:[15930..16520).11" />
<Link Source="25003:[16202..16218).27" Target="25003:[14837..14866).7" />
<Link Source="25003:[16202..16218).27" Target="25003:[16202..16218).25" />
<Link Source="25003:[16202..16218).27" Target="25003:[15986..16015).12" />
<Link Source="25003:[16202..16218).27" Target="25003:[15930..16520).11" />
<Link Source="25003:[16240..16275).17" Target="25003:[15930..16520).11" />
<Link Source="25003:[16240..16275).18" Target="25003:[14837..14866).7" />
<Link Source="25003:[16240..16275).18" Target="25003:[16240..16275).17" />
<Link Source="25003:[16240..16275).18" Target="25003:[16202..16218).27" />
<Link Source="25003:[16240..16275).18" Target="25003:[15930..16520).11" />
<Link Source="25003:[16297..16313).25" Target="25003:[15930..16520).11" />
<Link Source="25003:[16297..16313).27" Target="25003:[14837..14866).7" />
<Link Source="25003:[16297..16313).27" Target="25003:[16297..16313).25" />
<Link Source="25003:[16297..16313).27" Target="25003:[16240..16275).18" />
<Link Source="25003:[16297..16313).27" Target="25003:[15930..16520).11" />
<Link Source="25003:[16335..16453).33" Target="25003:[15930..16520).11" />
<Link Source="25003:[16414..16430).16" Target="25003:[16335..16453).33" />
<Link Source="25003:[16414..16430).18" Target="25003:[14837..14866).7" />
<Link Source="25003:[16414..16430).18" Target="25003:[16414..16430).16" />
<Link Source="25003:[16414..16430).18" Target="25003:[16297..16313).27" />
<Link Source="25003:[16414..16430).18" Target="25003:[16335..16453).33" />
<Link Source="25003:[16490..16505).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[16490..16505).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[16490..16505).12" Target="25003:[16490..16505).10" />
<Link Source="25003:[16490..16505).12" Target="25003:[16414..16430).18" />
<Link Source="25003:[16490..16505).12" Target="25003:[15930..16520).11" />
<Link Source="25003:[16536..16829).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[16536..16829).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[16536..16829).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[16536..16829).11" Target="25003:[16536..16829).10" />
<Link Source="25003:[16536..16829).11" Target="25003:[20782..20832).1" />
<Link Source="25003:[16596..16624).1" Target="25003:[16536..16829).11" />
<Link Source="25003:[16596..16624).3" Target="25003:[14837..14866).7" />
<Link Source="25003:[16596..16624).3" Target="25003:[16596..16624).1" />
<Link Source="25003:[16596..16624).3" Target="25003:[16490..16505).12" />
<Link Source="25003:[16596..16624).3" Target="25003:[16536..16829).11" />
<Link Source="25003:[16642..16683).1" Target="25003:[16536..16829).11" />
<Link Source="25003:[16642..16683).4" Target="25003:[14837..14866).7" />
<Link Source="25003:[16642..16683).4" Target="25003:[16642..16683).1" />
<Link Source="25003:[16642..16683).4" Target="25003:[16596..16624).3" />
<Link Source="25003:[16642..16683).4" Target="25003:[16536..16829).11" />
<Link Source="25003:[16701..16717).1" Target="25003:[16536..16829).11" />
<Link Source="25003:[16701..16717).3" Target="25003:[14837..14866).7" />
<Link Source="25003:[16701..16717).3" Target="25003:[16701..16717).1" />
<Link Source="25003:[16701..16717).3" Target="25003:[16642..16683).4" />
<Link Source="25003:[16701..16717).3" Target="25003:[16536..16829).11" />
<Link Source="25003:[16735..16781).1" Target="25003:[16536..16829).11" />
<Link Source="25003:[16735..16781).4" Target="25003:[14837..14866).7" />
<Link Source="25003:[16735..16781).4" Target="25003:[16735..16781).1" />
<Link Source="25003:[16735..16781).4" Target="25003:[16701..16717).3" />
<Link Source="25003:[16735..16781).4" Target="25003:[16536..16829).11" />
<Link Source="25003:[16799..16814).1" Target="25003:[16536..16829).11" />
<Link Source="25003:[16799..16814).3" Target="25003:[14837..14866).7" />
<Link Source="25003:[16799..16814).3" Target="25003:[16799..16814).1" />
<Link Source="25003:[16799..16814).3" Target="25003:[16735..16781).4" />
<Link Source="25003:[16799..16814).3" Target="25003:[16536..16829).11" />
<Link Source="25003:[16845..16954).4" Target="25003:[22283..22306).4" />
<Link Source="25003:[16845..16954).4" Target="25003:[15930..16520).11" />
<Link Source="25003:[16845..16954).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[16970..17144).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[16970..17144).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[16970..17144).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[16970..17144).11" Target="25003:[16970..17144).10" />
<Link Source="25003:[16970..17144).11" Target="25003:[20782..20832).1" />
<Link Source="25003:[17160..17340).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[17160..17340).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[17160..17340).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[17160..17340).11" Target="25003:[17160..17340).10" />
<Link Source="25003:[17160..17340).11" Target="25003:[20782..20832).1" />
<Link Source="25003:[17356..17482).13" Target="25003:[20782..20832).1" />
<Link Source="25003:[17356..17482).14" Target="25003:[22283..22306).4" />
<Link Source="25003:[17356..17482).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[17356..17482).14" Target="25003:[17356..17482).13" />
<Link Source="25003:[17356..17482).14" Target="25003:[20782..20832).1" />
<Link Source="25003:[17498..17519).7" Target="25003:[14837..14866).7" />
<Link Source="25003:[17498..17519).7" Target="25003:[16799..16814).3" />
<Link Source="25003:[17498..17519).7" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).34" Target="25003:[17498..17519).7" />
<Link Source="25003:[22349..22404).34" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).35" Target="25003:[22349..22404).31" />
<Link Source="25003:[22349..22404).35" Target="25003:[22349..22404).34" />
<Link Source="25003:[22349..22404).35" Target="25003:[20782..20832).1" />
<Link Source="25003:[20764..20834).5" Target="25003:[18506..18543).1" />
<Link Source="25003:[20764..20834).5" Target="25003:[22349..22404).35" />
<Link Source="25003:[20764..20834).5" Target="25003:[20221..20324).8" />
<Link Source="25003:[20764..20834).5" Target="25003:[19264..20938).3" />
<Link Source="25003:[20852..20923).1" Target="25003:[20695..20727).1" />
<Link Source="25003:[20852..20923).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[20852..20923).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20852..20923).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[20867..20921).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[22283..22306).5" Target="25003:[20852..20923).1" />
<Link Source="25003:[22283..22306).5" Target="25003:[20867..20921).1" />
<Link Source="25003:[22308..22323).5" Target="25003:[20852..20923).2" />
<Link Source="25003:[22308..22323).5" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).37" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).40" Target="25003:[22349..22404).37" />
<Link Source="25003:[22349..22404).40" Target="25003:[22308..22323).5" />
<Link Source="25003:[22349..22404).40" Target="25003:[20867..20921).1" />
<Link Source="25003:[14837..14866).9" Target="25003:[20867..20921).1" />
<Link Source="25003:[14882..14907).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[14882..14907).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[14882..14907).15" Target="25003:[14882..14907).13" />
<Link Source="25003:[14882..14907).15" Target="25003:[20867..20921).1" />
<Link Source="25003:[14921..15244).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[14921..15244).14" Target="25003:[22283..22306).5" />
<Link Source="25003:[14921..15244).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[14921..15244).14" Target="25003:[14921..15244).13" />
<Link Source="25003:[14921..15244).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[15100..15131).9" Target="25003:[22283..22306).5" />
<Link Source="25003:[15100..15131).9" Target="25003:[15930..16520).11" />
<Link Source="25003:[15100..15131).9" Target="25003:[14921..15244).14" />
<Link Source="25003:[15100..15131).10" Target="25003:[14837..14866).9" />
<Link Source="25003:[15100..15131).10" Target="25003:[15100..15131).9" />
<Link Source="25003:[15100..15131).10" Target="25003:[14882..14907).15" />
<Link Source="25003:[15100..15131).10" Target="25003:[14921..15244).14" />
<Link Source="25003:[15149..15164).13" Target="25003:[14921..15244).14" />
<Link Source="25003:[15149..15164).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15149..15164).15" Target="25003:[15149..15164).13" />
<Link Source="25003:[15149..15164).15" Target="25003:[15100..15131).10" />
<Link Source="25003:[15149..15164).15" Target="25003:[14921..15244).14" />
<Link Source="25003:[15182..15229).21" Target="25003:[22283..22306).5" />
<Link Source="25003:[15182..15229).21" Target="25003:[15930..16520).11" />
<Link Source="25003:[15182..15229).21" Target="25003:[14921..15244).14" />
<Link Source="25003:[15182..15229).25" Target="25003:[14837..14866).9" />
<Link Source="25003:[15182..15229).25" Target="25003:[15182..15229).21" />
<Link Source="25003:[15182..15229).25" Target="25003:[15149..15164).15" />
<Link Source="25003:[15182..15229).25" Target="25003:[14921..15244).14" />
<Link Source="25003:[15260..15767).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[15260..15767).14" Target="25003:[22283..22306).5" />
<Link Source="25003:[15260..15767).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[15260..15767).14" Target="25003:[15260..15767).13" />
<Link Source="25003:[15260..15767).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[15320..15717).49" Target="25003:[15260..15767).14" />
<Link Source="25003:[15632..15650).13" Target="25003:[15320..15717).49" />
<Link Source="25003:[15632..15650).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15632..15650).15" Target="25003:[15632..15650).13" />
<Link Source="25003:[15632..15650).15" Target="25003:[15182..15229).25" />
<Link Source="25003:[15632..15650).15" Target="25003:[15320..15717).49" />
<Link Source="25003:[15672..15698).9" Target="25003:[22283..22306).5" />
<Link Source="25003:[15672..15698).9" Target="25003:[15930..16520).11" />
<Link Source="25003:[15672..15698).9" Target="25003:[15320..15717).49" />
<Link Source="25003:[15672..15698).10" Target="25003:[14837..14866).9" />
<Link Source="25003:[15672..15698).10" Target="25003:[15672..15698).9" />
<Link Source="25003:[15672..15698).10" Target="25003:[15632..15650).15" />
<Link Source="25003:[15672..15698).10" Target="25003:[15320..15717).49" />
<Link Source="25003:[15737..15752).13" Target="25003:[15260..15767).14" />
<Link Source="25003:[15737..15752).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15737..15752).15" Target="25003:[15737..15752).13" />
<Link Source="25003:[15737..15752).15" Target="25003:[15672..15698).10" />
<Link Source="25003:[15737..15752).15" Target="25003:[15260..15767).14" />
<Link Source="25003:[15783..15883).5" Target="25003:[22283..22306).5" />
<Link Source="25003:[15783..15883).5" Target="25003:[15930..16520).11" />
<Link Source="25003:[15783..15883).5" Target="25003:[20867..20921).1" />
<Link Source="25003:[15899..15914).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[15899..15914).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15899..15914).15" Target="25003:[15899..15914).13" />
<Link Source="25003:[15899..15914).15" Target="25003:[15737..15752).15" />
<Link Source="25003:[15899..15914).15" Target="25003:[20867..20921).1" />
<Link Source="25003:[15930..16520).14" Target="25003:[22283..22306).5" />
<Link Source="25003:[15930..16520).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[15930..16520).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[15986..16015).13" Target="25003:[15930..16520).14" />
<Link Source="25003:[15986..16015).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15986..16015).15" Target="25003:[15986..16015).13" />
<Link Source="25003:[15986..16015).15" Target="25003:[15899..15914).15" />
<Link Source="25003:[15986..16015).15" Target="25003:[15930..16520).14" />
<Link Source="25003:[16202..16218).34" Target="25003:[15930..16520).14" />
<Link Source="25003:[16202..16218).36" Target="25003:[14837..14866).9" />
<Link Source="25003:[16202..16218).36" Target="25003:[16202..16218).34" />
<Link Source="25003:[16202..16218).36" Target="25003:[15986..16015).15" />
<Link Source="25003:[16202..16218).36" Target="25003:[15930..16520).14" />
<Link Source="25003:[16240..16275).23" Target="25003:[15930..16520).14" />
<Link Source="25003:[16240..16275).24" Target="25003:[14837..14866).9" />
<Link Source="25003:[16240..16275).24" Target="25003:[16240..16275).23" />
<Link Source="25003:[16240..16275).24" Target="25003:[16202..16218).36" />
<Link Source="25003:[16240..16275).24" Target="25003:[15930..16520).14" />
<Link Source="25003:[16297..16313).34" Target="25003:[15930..16520).14" />
<Link Source="25003:[16297..16313).36" Target="25003:[14837..14866).9" />
<Link Source="25003:[16297..16313).36" Target="25003:[16297..16313).34" />
<Link Source="25003:[16297..16313).36" Target="25003:[16240..16275).24" />
<Link Source="25003:[16297..16313).36" Target="25003:[15930..16520).14" />
<Link Source="25003:[16335..16453).45" Target="25003:[15930..16520).14" />
<Link Source="25003:[16414..16430).22" Target="25003:[16335..16453).45" />
<Link Source="25003:[16414..16430).24" Target="25003:[14837..14866).9" />
<Link Source="25003:[16414..16430).24" Target="25003:[16414..16430).22" />
<Link Source="25003:[16414..16430).24" Target="25003:[16297..16313).36" />
<Link Source="25003:[16414..16430).24" Target="25003:[16335..16453).45" />
<Link Source="25003:[16490..16505).13" Target="25003:[15930..16520).14" />
<Link Source="25003:[16490..16505).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[16490..16505).15" Target="25003:[16490..16505).13" />
<Link Source="25003:[16490..16505).15" Target="25003:[16414..16430).24" />
<Link Source="25003:[16490..16505).15" Target="25003:[15930..16520).14" />
<Link Source="25003:[16536..16829).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[16536..16829).14" Target="25003:[22283..22306).5" />
<Link Source="25003:[16536..16829).14" Target="25003:[15930..16520).14" />
<Link Source="25003:[16536..16829).14" Target="25003:[16536..16829).13" />
<Link Source="25003:[16536..16829).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[16845..16954).5" Target="25003:[22283..22306).5" />
<Link Source="25003:[16845..16954).5" Target="25003:[15930..16520).14" />
<Link Source="25003:[16845..16954).5" Target="25003:[20867..20921).1" />
<Link Source="25003:[16970..17144).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[16970..17144).14" Target="25003:[22283..22306).5" />
<Link Source="25003:[16970..17144).14" Target="25003:[15930..16520).14" />
<Link Source="25003:[16970..17144).14" Target="25003:[16970..17144).13" />
<Link Source="25003:[16970..17144).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[17160..17340).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[17160..17340).14" Target="25003:[22283..22306).5" />
<Link Source="25003:[17160..17340).14" Target="25003:[15930..16520).14" />
<Link Source="25003:[17160..17340).14" Target="25003:[17160..17340).13" />
<Link Source="25003:[17160..17340).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[17356..17482).17" Target="25003:[20867..20921).1" />
<Link Source="25003:[17356..17482).18" Target="25003:[22283..22306).5" />
<Link Source="25003:[17356..17482).18" Target="25003:[15930..16520).14" />
<Link Source="25003:[17356..17482).18" Target="25003:[17356..17482).17" />
<Link Source="25003:[17356..17482).18" Target="25003:[20867..20921).1" />
<Link Source="25003:[17498..17519).9" Target="25003:[14837..14866).9" />
<Link Source="25003:[17498..17519).9" Target="25003:[16490..16505).15" />
<Link Source="25003:[17498..17519).9" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).43" Target="25003:[17498..17519).9" />
<Link Source="25003:[22349..22404).43" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).44" Target="25003:[22349..22404).40" />
<Link Source="25003:[22349..22404).44" Target="25003:[22349..22404).43" />
<Link Source="25003:[22349..22404).44" Target="25003:[20867..20921).1" />
<Link Source="25003:[20852..20923).5" Target="25003:[19153..19205).1" />
<Link Source="25003:[20852..20923).5" Target="25003:[22349..22404).44" />
<Link Source="25003:[20852..20923).5" Target="25003:[19264..20938).3" />
<Link Source="25003:[19418..19628).6" Target="25003:[15930..16520).14" />
<Link Source="25003:[19648..19745).4" Target="25003:[15930..16520).14" />
<Link Source="25003:[19699..19726).1" Target="25003:[19648..19745).4" />
<Link Source="25003:[19699..19726).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19699..19726).3" Target="25003:[19699..19726).1" />
<Link Source="25003:[19699..19726).3" Target="25003:[20764..20834).5" />
<Link Source="25003:[19699..19726).3" Target="25003:[19648..19745).4" />
<Link Source="25003:[19846..19878).4" Target="25003:[18506..18543).1" />
<Link Source="25003:[19846..19878).4" Target="25003:[15930..16520).14" />
<Link Source="25003:[19846..19878).5" Target="25003:[17936..17956).1" />
<Link Source="25003:[19846..19878).5" Target="25003:[15930..16520).14" />
<Link Source="25003:[19846..19877).2" Target="25003:[15930..16520).14" />
<Link Source="25003:[22454..22470).3" Target="25003:[19846..19878).4" />
<Link Source="25003:[22454..22470).3" Target="25003:[19846..19877).2" />
<Link Source="25003:[22472..22481).3" Target="25003:[19846..19878).5" />
<Link Source="25003:[22472..22481).3" Target="25003:[19846..19877).2" />
<Link Source="25003:[22507..22533).13" Target="25003:[19846..19877).2" />
<Link Source="25003:[22507..22533).16" Target="25003:[22507..22533).13" />
<Link Source="25003:[22507..22533).16" Target="25003:[22472..22481).3" />
<Link Source="25003:[22507..22533).16" Target="25003:[19846..19877).2" />
<Link Source="25003:[19846..19878).6" Target="25003:[15930..16520).14" />
<Link Source="25003:[19900..19925).4" Target="25003:[15930..16520).14" />
<Link Source="25003:[20112..20144).4" Target="25003:[18506..18543).1" />
<Link Source="25003:[20112..20144).4" Target="25003:[15930..16520).14" />
<Link Source="25003:[20112..20144).5" Target="25003:[17936..17956).1" />
<Link Source="25003:[20112..20144).5" Target="25003:[15930..16520).14" />
<Link Source="25003:[20112..20143).2" Target="25003:[15930..16520).14" />
<Link Source="25003:[22454..22470).4" Target="25003:[20112..20144).4" />
<Link Source="25003:[22454..22470).4" Target="25003:[20112..20143).2" />
<Link Source="25003:[22472..22481).4" Target="25003:[20112..20144).5" />
<Link Source="25003:[22472..22481).4" Target="25003:[20112..20143).2" />
<Link Source="25003:[22507..22533).19" Target="25003:[20112..20143).2" />
<Link Source="25003:[22507..22533).22" Target="25003:[22507..22533).19" />
<Link Source="25003:[22507..22533).22" Target="25003:[22472..22481).4" />
<Link Source="25003:[22507..22533).22" Target="25003:[20112..20143).2" />
<Link Source="25003:[20112..20144).6" Target="25003:[15930..16520).14" />
<Link Source="25003:[20170..20195).4" Target="25003:[15930..16520).14" />
<Link Source="25003:[912..917).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[950..967).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[1000..1013).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[1048..1062).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[1099..1109).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[1151..1165).31" Target="25003:[15930..16520).14" />
<Link Source="25003:[1336..1350).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[1460..1479).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[1527..1548).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[5067..5072).5" Target="25003:[15930..16520).14" />
<Link Source="25003:[5444..5476).9" Target="25003:[15930..16520).14" />
<Link Source="25003:[7118..7245).25" Target="25003:[15930..16520).14" />
<Link Source="25003:[20523..20557).2" Target="25003:[15930..16520).14" />
<Link Source="25003:[10680..10725).13" Target="25003:[15930..16520).14" />
<Link Source="25003:[10815..10891).9" Target="25003:[15930..16520).14" />
<Link Source="25003:[10907..10975).9" Target="25003:[15930..16520).14" />
<Link Source="25003:[10991..11148).5" Target="25003:[15930..16520).14" />
<Link Source="25003:[11059..11133).9" Target="25003:[15930..16520).14" />
<Link Source="25003:[11059..11133).9" Target="25003:[10991..11148).5" />
<Link Source="25003:[11120..11133).1" Target="25003:[11059..11133).9" />
<Link Source="25003:[10815..10891).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[10815..10891).11" Target="25003:[11120..11133).1" />
<Link Source="25003:[10907..10975).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[10907..10975).11" Target="25003:[11120..11133).1" />
<Link Source="25003:[11164..11464).13" Target="25003:[15930..16520).14" />
<Link Source="25003:[11164..11464).14" Target="25003:[15930..16520).14" />
<Link Source="25003:[11164..11464).14" Target="25003:[11120..11133).1" />
<Link Source="25003:[11164..11464).14" Target="25003:[11164..11464).13" />
<Link Source="25003:[11480..11903).13" Target="25003:[15930..16520).14" />
<Link Source="25003:[11480..11903).14" Target="25003:[15930..16520).14" />
<Link Source="25003:[11480..11903).14" Target="25003:[11120..11133).1" />
<Link Source="25003:[11480..11903).14" Target="25003:[11480..11903).13" />
<Link Source="25003:[11917..12344).13" Target="25003:[15930..16520).14" />
<Link Source="25003:[11917..12344).14" Target="25003:[15930..16520).14" />
<Link Source="25003:[11917..12344).14" Target="25003:[11120..11133).1" />
<Link Source="25003:[11917..12344).14" Target="25003:[11917..12344).13" />
<Link Source="25003:[12436..12535).9" Target="25003:[15930..16520).14" />
<Link Source="25003:[12436..12535).9" Target="25003:[11120..11133).1" />
<Link Source="25003:[12855..12915).13" Target="25003:[11120..11133).1" />
<Link Source="25003:[13514..13693).17" Target="25003:[15930..16520).14" />
<Link Source="25003:[13514..13693).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[20764..20834).7" Target="25003:[17936..17956).1" />
<Link Source="25003:[20764..20834).7" Target="25003:[15930..16520).14" />
<Link Source="25003:[22308..22323).6" Target="25003:[20764..20834).7" />
<Link Source="25003:[22308..22323).6" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).46" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).49" Target="25003:[22349..22404).46" />
<Link Source="25003:[22349..22404).49" Target="25003:[22308..22323).6" />
<Link Source="25003:[22349..22404).49" Target="25003:[15930..16520).14" />
<Link Source="25003:[14837..14866).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[14882..14907).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[14882..14907).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[14882..14907).18" Target="25003:[14882..14907).16" />
<Link Source="25003:[14882..14907).18" Target="25003:[15930..16520).14" />
<Link Source="25003:[14921..15244).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[14921..15244).17" Target="25003:[15930..16520).14" />
<Link Source="25003:[14921..15244).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[14921..15244).17" Target="25003:[14921..15244).16" />
<Link Source="25003:[15100..15131).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[15100..15131).11" Target="25003:[11120..11133).1" />
<Link Source="25003:[15100..15131).11" Target="25003:[14921..15244).17" />
<Link Source="25003:[15100..15131).12" Target="25003:[14837..14866).11" />
<Link Source="25003:[15100..15131).12" Target="25003:[15100..15131).11" />
<Link Source="25003:[15100..15131).12" Target="25003:[14882..14907).18" />
<Link Source="25003:[15100..15131).12" Target="25003:[14921..15244).17" />
<Link Source="25003:[15149..15164).16" Target="25003:[14921..15244).17" />
<Link Source="25003:[15149..15164).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[15149..15164).18" Target="25003:[15149..15164).16" />
<Link Source="25003:[15149..15164).18" Target="25003:[15100..15131).12" />
<Link Source="25003:[15149..15164).18" Target="25003:[14921..15244).17" />
<Link Source="25003:[15182..15229).26" Target="25003:[15930..16520).14" />
<Link Source="25003:[15182..15229).26" Target="25003:[11120..11133).1" />
<Link Source="25003:[15182..15229).26" Target="25003:[14921..15244).17" />
<Link Source="25003:[15182..15229).30" Target="25003:[14837..14866).11" />
<Link Source="25003:[15182..15229).30" Target="25003:[15182..15229).26" />
<Link Source="25003:[15182..15229).30" Target="25003:[15149..15164).18" />
<Link Source="25003:[15182..15229).30" Target="25003:[14921..15244).17" />
<Link Source="25003:[15260..15767).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[15260..15767).17" Target="25003:[15930..16520).14" />
<Link Source="25003:[15260..15767).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[15260..15767).17" Target="25003:[15260..15767).16" />
<Link Source="25003:[15320..15717).61" Target="25003:[15260..15767).17" />
<Link Source="25003:[15632..15650).16" Target="25003:[15320..15717).61" />
<Link Source="25003:[15632..15650).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[15632..15650).18" Target="25003:[15632..15650).16" />
<Link Source="25003:[15632..15650).18" Target="25003:[15182..15229).30" />
<Link Source="25003:[15632..15650).18" Target="25003:[15320..15717).61" />
<Link Source="25003:[15672..15698).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[15672..15698).11" Target="25003:[11120..11133).1" />
<Link Source="25003:[15672..15698).11" Target="25003:[15320..15717).61" />
<Link Source="25003:[15672..15698).12" Target="25003:[14837..14866).11" />
<Link Source="25003:[15672..15698).12" Target="25003:[15672..15698).11" />
<Link Source="25003:[15672..15698).12" Target="25003:[15632..15650).18" />
<Link Source="25003:[15672..15698).12" Target="25003:[15320..15717).61" />
<Link Source="25003:[15737..15752).16" Target="25003:[15260..15767).17" />
<Link Source="25003:[15737..15752).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[15737..15752).18" Target="25003:[15737..15752).16" />
<Link Source="25003:[15737..15752).18" Target="25003:[15672..15698).12" />
<Link Source="25003:[15737..15752).18" Target="25003:[15260..15767).17" />
<Link Source="25003:[15783..15883).6" Target="25003:[15930..16520).14" />
<Link Source="25003:[15783..15883).6" Target="25003:[11120..11133).1" />
<Link Source="25003:[15899..15914).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[15899..15914).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[15899..15914).18" Target="25003:[15899..15914).16" />
<Link Source="25003:[15899..15914).18" Target="25003:[15737..15752).18" />
<Link Source="25003:[15899..15914).18" Target="25003:[15930..16520).14" />
<Link Source="25003:[15986..16015).16" Target="25003:[11120..11133).1" />
<Link Source="25003:[15986..16015).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[15986..16015).18" Target="25003:[15986..16015).16" />
<Link Source="25003:[15986..16015).18" Target="25003:[15899..15914).18" />
<Link Source="25003:[15986..16015).18" Target="25003:[11120..11133).1" />
<Link Source="25003:[16202..16218).43" Target="25003:[11120..11133).1" />
<Link Source="25003:[16202..16218).45" Target="25003:[14837..14866).11" />
<Link Source="25003:[16202..16218).45" Target="25003:[16202..16218).43" />
<Link Source="25003:[16202..16218).45" Target="25003:[15986..16015).18" />
<Link Source="25003:[16202..16218).45" Target="25003:[11120..11133).1" />
<Link Source="25003:[16240..16275).29" Target="25003:[11120..11133).1" />
<Link Source="25003:[16240..16275).30" Target="25003:[14837..14866).11" />
<Link Source="25003:[16240..16275).30" Target="25003:[16240..16275).29" />
<Link Source="25003:[16240..16275).30" Target="25003:[16202..16218).45" />
<Link Source="25003:[16240..16275).30" Target="25003:[11120..11133).1" />
<Link Source="25003:[16297..16313).43" Target="25003:[11120..11133).1" />
<Link Source="25003:[16297..16313).45" Target="25003:[14837..14866).11" />
<Link Source="25003:[16297..16313).45" Target="25003:[16297..16313).43" />
<Link Source="25003:[16297..16313).45" Target="25003:[16240..16275).30" />
<Link Source="25003:[16297..16313).45" Target="25003:[11120..11133).1" />
<Link Source="25003:[16335..16453).57" Target="25003:[11120..11133).1" />
<Link Source="25003:[16414..16430).28" Target="25003:[16335..16453).57" />
<Link Source="25003:[16414..16430).30" Target="25003:[14837..14866).11" />
<Link Source="25003:[16414..16430).30" Target="25003:[16414..16430).28" />
<Link Source="25003:[16414..16430).30" Target="25003:[16297..16313).45" />
<Link Source="25003:[16414..16430).30" Target="25003:[16335..16453).57" />
<Link Source="25003:[16490..16505).16" Target="25003:[11120..11133).1" />
<Link Source="25003:[16490..16505).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[16490..16505).18" Target="25003:[16490..16505).16" />
<Link Source="25003:[16490..16505).18" Target="25003:[16414..16430).30" />
<Link Source="25003:[16490..16505).18" Target="25003:[11120..11133).1" />
<Link Source="25003:[16536..16829).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[16536..16829).17" Target="25003:[15930..16520).14" />
<Link Source="25003:[16536..16829).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[16536..16829).17" Target="25003:[16536..16829).16" />
<Link Source="25003:[16596..16624).4" Target="25003:[16536..16829).17" />
<Link Source="25003:[16596..16624).6" Target="25003:[14837..14866).11" />
<Link Source="25003:[16596..16624).6" Target="25003:[16596..16624).4" />
<Link Source="25003:[16596..16624).6" Target="25003:[16490..16505).18" />
<Link Source="25003:[16596..16624).6" Target="25003:[16536..16829).17" />
<Link Source="25003:[16642..16683).5" Target="25003:[16536..16829).17" />
<Link Source="25003:[16642..16683).8" Target="25003:[14837..14866).11" />
<Link Source="25003:[16642..16683).8" Target="25003:[16642..16683).5" />
<Link Source="25003:[16642..16683).8" Target="25003:[16596..16624).6" />
<Link Source="25003:[16642..16683).8" Target="25003:[16536..16829).17" />
<Link Source="25003:[16701..16717).4" Target="25003:[16536..16829).17" />
<Link Source="25003:[16701..16717).6" Target="25003:[14837..14866).11" />
<Link Source="25003:[16701..16717).6" Target="25003:[16701..16717).4" />
<Link Source="25003:[16701..16717).6" Target="25003:[16642..16683).8" />
<Link Source="25003:[16701..16717).6" Target="25003:[16536..16829).17" />
<Link Source="25003:[16735..16781).5" Target="25003:[16536..16829).17" />
<Link Source="25003:[16735..16781).8" Target="25003:[14837..14866).11" />
<Link Source="25003:[16735..16781).8" Target="25003:[16735..16781).5" />
<Link Source="25003:[16735..16781).8" Target="25003:[16701..16717).6" />
<Link Source="25003:[16735..16781).8" Target="25003:[16536..16829).17" />
<Link Source="25003:[16799..16814).4" Target="25003:[16536..16829).17" />
<Link Source="25003:[16799..16814).6" Target="25003:[14837..14866).11" />
<Link Source="25003:[16799..16814).6" Target="25003:[16799..16814).4" />
<Link Source="25003:[16799..16814).6" Target="25003:[16735..16781).8" />
<Link Source="25003:[16799..16814).6" Target="25003:[16536..16829).17" />
<Link Source="25003:[16845..16954).6" Target="25003:[15930..16520).14" />
<Link Source="25003:[16845..16954).6" Target="25003:[11120..11133).1" />
<Link Source="25003:[16970..17144).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[16970..17144).17" Target="25003:[15930..16520).14" />
<Link Source="25003:[16970..17144).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[16970..17144).17" Target="25003:[16970..17144).16" />
<Link Source="25003:[17160..17340).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[17160..17340).17" Target="25003:[15930..16520).14" />
<Link Source="25003:[17160..17340).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[17160..17340).17" Target="25003:[17160..17340).16" />
<Link Source="25003:[17356..17482).21" Target="25003:[15930..16520).14" />
<Link Source="25003:[17356..17482).22" Target="25003:[15930..16520).14" />
<Link Source="25003:[17356..17482).22" Target="25003:[11120..11133).1" />
<Link Source="25003:[17356..17482).22" Target="25003:[17356..17482).21" />
<Link Source="25003:[17498..17519).11" Target="25003:[14837..14866).11" />
<Link Source="25003:[17498..17519).11" Target="25003:[16799..16814).6" />
<Link Source="25003:[17498..17519).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).52" Target="25003:[17498..17519).11" />
<Link Source="25003:[22349..22404).52" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).53" Target="25003:[22349..22404).49" />
<Link Source="25003:[22349..22404).53" Target="25003:[22349..22404).52" />
<Link Source="25003:[22349..22404).53" Target="25003:[15930..16520).14" />
<Link Source="25003:[20764..20834).10" Target="25003:[18506..18543).1" />
<Link Source="25003:[20764..20834).10" Target="25003:[22349..22404).53" />
<Link Source="25003:[20764..20834).10" Target="25003:[19699..19726).3" />
<Link Source="25003:[20764..20834).10" Target="25003:[15930..16520).14" />
<Link Source="25003:[20852..20923).7" Target="25003:[17936..17956).1" />
<Link Source="25003:[20852..20923).7" Target="25003:[15930..16520).14" />
<Link Source="25003:[22308..22323).7" Target="25003:[20852..20923).7" />
<Link Source="25003:[22308..22323).7" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).58" Target="25003:[22349..22404).46" />
<Link Source="25003:[22349..22404).58" Target="25003:[22308..22323).7" />
<Link Source="25003:[22349..22404).58" Target="25003:[15930..16520).14" />
<Link Source="25003:[15100..15131).13" Target="25003:[11120..11133).1" />
<Link Source="25003:[15100..15131).13" Target="25003:[14921..15244).17" />
<Link Source="25003:[15100..15131).14" Target="25003:[14837..14866).11" />
<Link Source="25003:[15100..15131).14" Target="25003:[15100..15131).13" />
<Link Source="25003:[15100..15131).14" Target="25003:[14882..14907).18" />
<Link Source="25003:[15100..15131).14" Target="25003:[14921..15244).17" />
<Link Source="25003:[15149..15164).21" Target="25003:[14837..14866).11" />
<Link Source="25003:[15149..15164).21" Target="25003:[15149..15164).16" />
<Link Source="25003:[15149..15164).21" Target="25003:[15100..15131).14" />
<Link Source="25003:[15149..15164).21" Target="25003:[14921..15244).17" />
<Link Source="25003:[15182..15229).31" Target="25003:[11120..11133).1" />
<Link Source="25003:[15182..15229).31" Target="25003:[14921..15244).17" />
<Link Source="25003:[15182..15229).35" Target="25003:[14837..14866).11" />
<Link Source="25003:[15182..15229).35" Target="25003:[15182..15229).31" />
<Link Source="25003:[15182..15229).35" Target="25003:[15149..15164).21" />
<Link Source="25003:[15182..15229).35" Target="25003:[14921..15244).17" />
<Link Source="25003:[15632..15650).21" Target="25003:[14837..14866).11" />
<Link Source="25003:[15632..15650).21" Target="25003:[15632..15650).16" />
<Link Source="25003:[15632..15650).21" Target="25003:[15182..15229).35" />
<Link Source="25003:[15632..15650).21" Target="25003:[15320..15717).61" />
<Link Source="25003:[15672..15698).13" Target="25003:[11120..11133).1" />
<Link Source="25003:[15672..15698).13" Target="25003:[15320..15717).61" />
<Link Source="25003:[15672..15698).14" Target="25003:[14837..14866).11" />
<Link Source="25003:[15672..15698).14" Target="25003:[15672..15698).13" />
<Link Source="25003:[15672..15698).14" Target="25003:[15632..15650).21" />
<Link Source="25003:[15672..15698).14" Target="25003:[15320..15717).61" />
<Link Source="25003:[15737..15752).21" Target="25003:[14837..14866).11" />
<Link Source="25003:[15737..15752).21" Target="25003:[15737..15752).16" />
<Link Source="25003:[15737..15752).21" Target="25003:[15672..15698).14" />
<Link Source="25003:[15737..15752).21" Target="25003:[15260..15767).17" />
<Link Source="25003:[15899..15914).21" Target="25003:[14837..14866).11" />
<Link Source="25003:[15899..15914).21" Target="25003:[15899..15914).16" />
<Link Source="25003:[15899..15914).21" Target="25003:[15737..15752).21" />
<Link Source="25003:[15899..15914).21" Target="25003:[15930..16520).14" />
<Link Source="25003:[15986..16015).21" Target="25003:[14837..14866).11" />
<Link Source="25003:[15986..16015).21" Target="25003:[15986..16015).16" />
<Link Source="25003:[15986..16015).21" Target="25003:[15899..15914).21" />
<Link Source="25003:[15986..16015).21" Target="25003:[11120..11133).1" />
<Link Source="25003:[16202..16218).54" Target="25003:[14837..14866).11" />
<Link Source="25003:[16202..16218).54" Target="25003:[16202..16218).43" />
<Link Source="25003:[16202..16218).54" Target="25003:[15986..16015).21" />
<Link Source="25003:[16202..16218).54" Target="25003:[11120..11133).1" />
<Link Source="25003:[16240..16275).36" Target="25003:[14837..14866).11" />
<Link Source="25003:[16240..16275).36" Target="25003:[16240..16275).29" />
<Link Source="25003:[16240..16275).36" Target="25003:[16202..16218).54" />
<Link Source="25003:[16240..16275).36" Target="25003:[11120..11133).1" />
<Link Source="25003:[16297..16313).54" Target="25003:[14837..14866).11" />
<Link Source="25003:[16297..16313).54" Target="25003:[16297..16313).43" />
<Link Source="25003:[16297..16313).54" Target="25003:[16240..16275).36" />
<Link Source="25003:[16297..16313).54" Target="25003:[11120..11133).1" />
<Link Source="25003:[16414..16430).36" Target="25003:[14837..14866).11" />
<Link Source="25003:[16414..16430).36" Target="25003:[16414..16430).28" />
<Link Source="25003:[16414..16430).36" Target="25003:[16297..16313).54" />
<Link Source="25003:[16414..16430).36" Target="25003:[16335..16453).57" />
<Link Source="25003:[16490..16505).21" Target="25003:[14837..14866).11" />
<Link Source="25003:[16490..16505).21" Target="25003:[16490..16505).16" />
<Link Source="25003:[16490..16505).21" Target="25003:[16414..16430).36" />
<Link Source="25003:[16490..16505).21" Target="25003:[11120..11133).1" />
<Link Source="25003:[17498..17519).13" Target="25003:[14837..14866).11" />
<Link Source="25003:[17498..17519).13" Target="25003:[16490..16505).21" />
<Link Source="25003:[17498..17519).13" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).61" Target="25003:[17498..17519).13" />
<Link Source="25003:[22349..22404).61" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).62" Target="25003:[22349..22404).58" />
<Link Source="25003:[22349..22404).62" Target="25003:[22349..22404).61" />
<Link Source="25003:[22349..22404).62" Target="25003:[15930..16520).14" />
<Link Source="25003:[20852..20923).10" Target="25003:[19153..19205).1" />
<Link Source="25003:[20852..20923).10" Target="25003:[22349..22404).62" />
<Link Source="25003:[20852..20923).10" Target="25003:[20852..20923).5" />
<Link Source="25003:[20852..20923).10" Target="25003:[15930..16520).14" />
<Link Source="25003:[19418..19628).11" Target="25003:[11120..11133).1" />
<Link Source="25003:[19648..19745).7" Target="25003:[11120..11133).1" />
<Link Source="25003:[19699..19726).4" Target="25003:[19648..19745).7" />
<Link Source="25003:[19846..19878).7" Target="25003:[18506..18543).1" />
<Link Source="25003:[19846..19878).7" Target="25003:[11120..11133).1" />
<Link Source="25003:[19846..19878).8" Target="25003:[17936..17956).1" />
<Link Source="25003:[19846..19878).8" Target="25003:[11120..11133).1" />
<Link Source="25003:[19846..19877).3" Target="25003:[11120..11133).1" />
<Link Source="25003:[22454..22470).5" Target="25003:[19846..19878).7" />
<Link Source="25003:[22454..22470).5" Target="25003:[19846..19877).3" />
<Link Source="25003:[22472..22481).5" Target="25003:[19846..19878).8" />
<Link Source="25003:[22472..22481).5" Target="25003:[19846..19877).3" />
<Link Source="25003:[22507..22533).25" Target="25003:[19846..19877).3" />
<Link Source="25003:[22507..22533).28" Target="25003:[22507..22533).25" />
<Link Source="25003:[22507..22533).28" Target="25003:[22472..22481).5" />
<Link Source="25003:[22507..22533).28" Target="25003:[19846..19877).3" />
<Link Source="25003:[19846..19878).9" Target="25003:[11120..11133).1" />
<Link Source="25003:[19900..19925).7" Target="25003:[11120..11133).1" />
<Link Source="25003:[20112..20144).7" Target="25003:[18506..18543).1" />
<Link Source="25003:[20112..20144).7" Target="25003:[11120..11133).1" />
<Link Source="25003:[20112..20144).8" Target="25003:[17936..17956).1" />
<Link Source="25003:[20112..20144).8" Target="25003:[11120..11133).1" />
<Link Source="25003:[20112..20143).3" Target="25003:[11120..11133).1" />
<Link Source="25003:[22454..22470).6" Target="25003:[20112..20144).7" />
<Link Source="25003:[22454..22470).6" Target="25003:[20112..20143).3" />
<Link Source="25003:[22472..22481).6" Target="25003:[20112..20144).8" />
<Link Source="25003:[22472..22481).6" Target="25003:[20112..20143).3" />
<Link Source="25003:[22507..22533).31" Target="25003:[20112..20143).3" />
<Link Source="25003:[22507..22533).34" Target="25003:[22507..22533).31" />
<Link Source="25003:[22507..22533).34" Target="25003:[22472..22481).6" />
<Link Source="25003:[22507..22533).34" Target="25003:[20112..20143).3" />
<Link Source="25003:[20112..20144).9" Target="25003:[11120..11133).1" />
<Link Source="25003:[20170..20195).7" Target="25003:[11120..11133).1" />
<Link Source="25003:[912..917).12" Target="25003:[11120..11133).1" />
<Link Source="25003:[950..967).12" Target="25003:[11120..11133).1" />
<Link Source="25003:[1000..1013).12" Target="25003:[11120..11133).1" />
<Link Source="25003:[1048..1062).12" Target="25003:[11120..11133).1" />
<Link Source="25003:[1099..1109).12" Target="25003:[11120..11133).1" />
<Link Source="25003:[1151..1165).34" Target="25003:[11120..11133).1" />
<Link Source="25003:[1336..1350).12" Target="25003:[11120..11133).1" />
<Link Source="25003:[1460..1479).12" Target="25003:[11120..11133).1" />
<Link Source="25003:[1527..1548).12" Target="25003:[11120..11133).1" />
<Link Source="25003:[5067..5072).6" Target="25003:[11120..11133).1" />
<Link Source="25003:[5444..5476).11" Target="25003:[11120..11133).1" />
<Link Source="25003:[7118..7245).31" Target="25003:[11120..11133).1" />
<Link Source="25003:[20523..20557).3" Target="25003:[11120..11133).1" />
<Link Source="25003:[10680..10725).19" Target="25003:[11120..11133).1" />
<Link Source="25003:[10786..10799).1" Target="25003:[11120..11133).1" />
<Link Source="25003:[10680..10725).22" Target="25003:[10786..10799).1" />
<Link Source="25003:[10815..10891).13" Target="25003:[10786..10799).1" />
<Link Source="25003:[10907..10975).13" Target="25003:[10786..10799).1" />
<Link Source="25003:[11164..11464).16" Target="25003:[10786..10799).1" />
<Link Source="25003:[11480..11903).16" Target="25003:[10786..10799).1" />
<Link Source="25003:[11917..12344).16" Target="25003:[10786..10799).1" />
<Link Source="25003:[12436..12535).11" Target="25003:[10786..10799).1" />
<Link Source="25003:[12855..12915).16" Target="25003:[10786..10799).1" />
<Link Source="25003:[13514..13693).21" Target="25003:[10786..10799).1" />
<Link Source="25003:[20764..20834).12" Target="25003:[17936..17956).1" />
<Link Source="25003:[20764..20834).12" Target="25003:[11120..11133).1" />
<Link Source="25003:[22308..22323).8" Target="25003:[20764..20834).12" />
<Link Source="25003:[22308..22323).8" Target="25003:[11120..11133).1" />
<Link Source="25003:[22349..22404).64" Target="25003:[11120..11133).1" />
<Link Source="25003:[22349..22404).67" Target="25003:[22349..22404).64" />
<Link Source="25003:[22349..22404).67" Target="25003:[22308..22323).8" />
<Link Source="25003:[22349..22404).67" Target="25003:[11120..11133).1" />
<Link Source="25003:[14837..14866).15" Target="25003:[11120..11133).1" />
<Link Source="25003:[14882..14907).22" Target="25003:[11120..11133).1" />
<Link Source="25003:[14882..14907).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[14882..14907).24" Target="25003:[14882..14907).22" />
<Link Source="25003:[14882..14907).24" Target="25003:[11120..11133).1" />
<Link Source="25003:[14921..15244).22" Target="25003:[11120..11133).1" />
<Link Source="25003:[14921..15244).23" Target="25003:[11120..11133).1" />
<Link Source="25003:[14921..15244).23" Target="25003:[10786..10799).1" />
<Link Source="25003:[14921..15244).23" Target="25003:[14921..15244).22" />
<Link Source="25003:[15100..15131).15" Target="25003:[11120..11133).1" />
<Link Source="25003:[15100..15131).15" Target="25003:[10786..10799).1" />
<Link Source="25003:[15100..15131).15" Target="25003:[14921..15244).23" />
<Link Source="25003:[15100..15131).16" Target="25003:[14837..14866).15" />
<Link Source="25003:[15100..15131).16" Target="25003:[15100..15131).15" />
<Link Source="25003:[15100..15131).16" Target="25003:[14882..14907).24" />
<Link Source="25003:[15100..15131).16" Target="25003:[14921..15244).23" />
<Link Source="25003:[15149..15164).22" Target="25003:[14921..15244).23" />
<Link Source="25003:[15149..15164).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[15149..15164).24" Target="25003:[15149..15164).22" />
<Link Source="25003:[15149..15164).24" Target="25003:[15100..15131).16" />
<Link Source="25003:[15149..15164).24" Target="25003:[14921..15244).23" />
<Link Source="25003:[15182..15229).36" Target="25003:[11120..11133).1" />
<Link Source="25003:[15182..15229).36" Target="25003:[10786..10799).1" />
<Link Source="25003:[15182..15229).36" Target="25003:[14921..15244).23" />
<Link Source="25003:[15182..15229).40" Target="25003:[14837..14866).15" />
<Link Source="25003:[15182..15229).40" Target="25003:[15182..15229).36" />
<Link Source="25003:[15182..15229).40" Target="25003:[15149..15164).24" />
<Link Source="25003:[15182..15229).40" Target="25003:[14921..15244).23" />
<Link Source="25003:[15260..15767).22" Target="25003:[11120..11133).1" />
<Link Source="25003:[15260..15767).23" Target="25003:[11120..11133).1" />
<Link Source="25003:[15260..15767).23" Target="25003:[10786..10799).1" />
<Link Source="25003:[15260..15767).23" Target="25003:[15260..15767).22" />
<Link Source="25003:[15320..15717).85" Target="25003:[15260..15767).23" />
<Link Source="25003:[15632..15650).22" Target="25003:[15320..15717).85" />
<Link Source="25003:[15632..15650).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[15632..15650).24" Target="25003:[15632..15650).22" />
<Link Source="25003:[15632..15650).24" Target="25003:[15182..15229).40" />
<Link Source="25003:[15632..15650).24" Target="25003:[15320..15717).85" />
<Link Source="25003:[15672..15698).15" Target="25003:[11120..11133).1" />
<Link Source="25003:[15672..15698).15" Target="25003:[10786..10799).1" />
<Link Source="25003:[15672..15698).15" Target="25003:[15320..15717).85" />
<Link Source="25003:[15672..15698).16" Target="25003:[14837..14866).15" />
<Link Source="25003:[15672..15698).16" Target="25003:[15672..15698).15" />
<Link Source="25003:[15672..15698).16" Target="25003:[15632..15650).24" />
<Link Source="25003:[15672..15698).16" Target="25003:[15320..15717).85" />
<Link Source="25003:[15737..15752).22" Target="25003:[15260..15767).23" />
<Link Source="25003:[15737..15752).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[15737..15752).24" Target="25003:[15737..15752).22" />
<Link Source="25003:[15737..15752).24" Target="25003:[15672..15698).16" />
<Link Source="25003:[15737..15752).24" Target="25003:[15260..15767).23" />
<Link Source="25003:[15783..15883).8" Target="25003:[11120..11133).1" />
<Link Source="25003:[15783..15883).8" Target="25003:[10786..10799).1" />
<Link Source="25003:[15899..15914).22" Target="25003:[11120..11133).1" />
<Link Source="25003:[15899..15914).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[15899..15914).24" Target="25003:[15899..15914).22" />
<Link Source="25003:[15899..15914).24" Target="25003:[15737..15752).24" />
<Link Source="25003:[15899..15914).24" Target="25003:[11120..11133).1" />
<Link Source="25003:[15986..16015).22" Target="25003:[10786..10799).1" />
<Link Source="25003:[15986..16015).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[15986..16015).24" Target="25003:[15986..16015).22" />
<Link Source="25003:[15986..16015).24" Target="25003:[15899..15914).24" />
<Link Source="25003:[15986..16015).24" Target="25003:[10786..10799).1" />
<Link Source="25003:[16202..16218).61" Target="25003:[10786..10799).1" />
<Link Source="25003:[16202..16218).63" Target="25003:[14837..14866).15" />
<Link Source="25003:[16202..16218).63" Target="25003:[16202..16218).61" />
<Link Source="25003:[16202..16218).63" Target="25003:[15986..16015).24" />
<Link Source="25003:[16202..16218).63" Target="25003:[10786..10799).1" />
<Link Source="25003:[16240..16275).41" Target="25003:[10786..10799).1" />
<Link Source="25003:[16240..16275).42" Target="25003:[14837..14866).15" />
<Link Source="25003:[16240..16275).42" Target="25003:[16240..16275).41" />
<Link Source="25003:[16240..16275).42" Target="25003:[16202..16218).63" />
<Link Source="25003:[16240..16275).42" Target="25003:[10786..10799).1" />
<Link Source="25003:[16297..16313).61" Target="25003:[10786..10799).1" />
<Link Source="25003:[16297..16313).63" Target="25003:[14837..14866).15" />
<Link Source="25003:[16297..16313).63" Target="25003:[16297..16313).61" />
<Link Source="25003:[16297..16313).63" Target="25003:[16240..16275).42" />
<Link Source="25003:[16297..16313).63" Target="25003:[10786..10799).1" />
<Link Source="25003:[16335..16453).81" Target="25003:[10786..10799).1" />
<Link Source="25003:[16414..16430).40" Target="25003:[16335..16453).81" />
<Link Source="25003:[16414..16430).42" Target="25003:[14837..14866).15" />
<Link Source="25003:[16414..16430).42" Target="25003:[16414..16430).40" />
<Link Source="25003:[16414..16430).42" Target="25003:[16297..16313).63" />
<Link Source="25003:[16414..16430).42" Target="25003:[16335..16453).81" />
<Link Source="25003:[16490..16505).22" Target="25003:[10786..10799).1" />
<Link Source="25003:[16490..16505).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[16490..16505).24" Target="25003:[16490..16505).22" />
<Link Source="25003:[16490..16505).24" Target="25003:[16414..16430).42" />
<Link Source="25003:[16490..16505).24" Target="25003:[10786..10799).1" />
<Link Source="25003:[16536..16829).22" Target="25003:[11120..11133).1" />
<Link Source="25003:[16536..16829).23" Target="25003:[11120..11133).1" />
<Link Source="25003:[16536..16829).23" Target="25003:[10786..10799).1" />
<Link Source="25003:[16536..16829).23" Target="25003:[16536..16829).22" />
<Link Source="25003:[16596..16624).7" Target="25003:[16536..16829).23" />
<Link Source="25003:[16596..16624).9" Target="25003:[14837..14866).15" />
<Link Source="25003:[16596..16624).9" Target="25003:[16596..16624).7" />
<Link Source="25003:[16596..16624).9" Target="25003:[16490..16505).24" />
<Link Source="25003:[16596..16624).9" Target="25003:[16536..16829).23" />
<Link Source="25003:[16642..16683).9" Target="25003:[16536..16829).23" />
<Link Source="25003:[16642..16683).12" Target="25003:[14837..14866).15" />
<Link Source="25003:[16642..16683).12" Target="25003:[16642..16683).9" />
<Link Source="25003:[16642..16683).12" Target="25003:[16596..16624).9" />
<Link Source="25003:[16642..16683).12" Target="25003:[16536..16829).23" />
<Link Source="25003:[16701..16717).7" Target="25003:[16536..16829).23" />
<Link Source="25003:[16701..16717).9" Target="25003:[14837..14866).15" />
<Link Source="25003:[16701..16717).9" Target="25003:[16701..16717).7" />
<Link Source="25003:[16701..16717).9" Target="25003:[16642..16683).12" />
<Link Source="25003:[16701..16717).9" Target="25003:[16536..16829).23" />
<Link Source="25003:[16735..16781).9" Target="25003:[16536..16829).23" />
<Link Source="25003:[16735..16781).12" Target="25003:[14837..14866).15" />
<Link Source="25003:[16735..16781).12" Target="25003:[16735..16781).9" />
<Link Source="25003:[16735..16781).12" Target="25003:[16701..16717).9" />
<Link Source="25003:[16735..16781).12" Target="25003:[16536..16829).23" />
<Link Source="25003:[16799..16814).7" Target="25003:[16536..16829).23" />
<Link Source="25003:[16799..16814).9" Target="25003:[14837..14866).15" />
<Link Source="25003:[16799..16814).9" Target="25003:[16799..16814).7" />
<Link Source="25003:[16799..16814).9" Target="25003:[16735..16781).12" />
<Link Source="25003:[16799..16814).9" Target="25003:[16536..16829).23" />
<Link Source="25003:[16845..16954).8" Target="25003:[11120..11133).1" />
<Link Source="25003:[16845..16954).8" Target="25003:[10786..10799).1" />
<Link Source="25003:[16970..17144).22" Target="25003:[11120..11133).1" />
<Link Source="25003:[16970..17144).23" Target="25003:[11120..11133).1" />
<Link Source="25003:[16970..17144).23" Target="25003:[10786..10799).1" />
<Link Source="25003:[16970..17144).23" Target="25003:[16970..17144).22" />
<Link Source="25003:[17160..17340).22" Target="25003:[11120..11133).1" />
<Link Source="25003:[17160..17340).23" Target="25003:[11120..11133).1" />
<Link Source="25003:[17160..17340).23" Target="25003:[10786..10799).1" />
<Link Source="25003:[17160..17340).23" Target="25003:[17160..17340).22" />
<Link Source="25003:[17356..17482).29" Target="25003:[11120..11133).1" />
<Link Source="25003:[17356..17482).30" Target="25003:[11120..11133).1" />
<Link Source="25003:[17356..17482).30" Target="25003:[10786..10799).1" />
<Link Source="25003:[17356..17482).30" Target="25003:[17356..17482).29" />
<Link Source="25003:[17498..17519).15" Target="25003:[14837..14866).15" />
<Link Source="25003:[17498..17519).15" Target="25003:[16799..16814).9" />
<Link Source="25003:[17498..17519).15" Target="25003:[11120..11133).1" />
<Link Source="25003:[22349..22404).70" Target="25003:[17498..17519).15" />
<Link Source="25003:[22349..22404).70" Target="25003:[11120..11133).1" />
<Link Source="25003:[22349..22404).71" Target="25003:[22349..22404).67" />
<Link Source="25003:[22349..22404).71" Target="25003:[22349..22404).70" />
<Link Source="25003:[22349..22404).71" Target="25003:[11120..11133).1" />
<Link Source="25003:[20764..20834).15" Target="25003:[18506..18543).1" />
<Link Source="25003:[20764..20834).15" Target="25003:[22349..22404).71" />
<Link Source="25003:[20764..20834).15" Target="25003:[20764..20834).10" />
<Link Source="25003:[20764..20834).15" Target="25003:[11120..11133).1" />
<Link Source="25003:[20852..20923).12" Target="25003:[17936..17956).1" />
<Link Source="25003:[20852..20923).12" Target="25003:[11120..11133).1" />
<Link Source="25003:[22308..22323).9" Target="25003:[20852..20923).12" />
<Link Source="25003:[22308..22323).9" Target="25003:[11120..11133).1" />
<Link Source="25003:[22349..22404).76" Target="25003:[22349..22404).64" />
<Link Source="25003:[22349..22404).76" Target="25003:[22308..22323).9" />
<Link Source="25003:[22349..22404).76" Target="25003:[11120..11133).1" />
<Link Source="25003:[15100..15131).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[15100..15131).17" Target="25003:[14921..15244).23" />
<Link Source="25003:[15100..15131).18" Target="25003:[14837..14866).15" />
<Link Source="25003:[15100..15131).18" Target="25003:[15100..15131).17" />
<Link Source="25003:[15100..15131).18" Target="25003:[14882..14907).24" />
<Link Source="25003:[15100..15131).18" Target="25003:[14921..15244).23" />
<Link Source="25003:[15149..15164).27" Target="25003:[14837..14866).15" />
<Link Source="25003:[15149..15164).27" Target="25003:[15149..15164).22" />
<Link Source="25003:[15149..15164).27" Target="25003:[15100..15131).18" />
<Link Source="25003:[15149..15164).27" Target="25003:[14921..15244).23" />
<Link Source="25003:[15182..15229).41" Target="25003:[10786..10799).1" />
<Link Source="25003:[15182..15229).41" Target="25003:[14921..15244).23" />
<Link Source="25003:[15182..15229).45" Target="25003:[14837..14866).15" />
<Link Source="25003:[15182..15229).45" Target="25003:[15182..15229).41" />
<Link Source="25003:[15182..15229).45" Target="25003:[15149..15164).27" />
<Link Source="25003:[15182..15229).45" Target="25003:[14921..15244).23" />
<Link Source="25003:[15632..15650).27" Target="25003:[14837..14866).15" />
<Link Source="25003:[15632..15650).27" Target="25003:[15632..15650).22" />
<Link Source="25003:[15632..15650).27" Target="25003:[15182..15229).45" />
<Link Source="25003:[15632..15650).27" Target="25003:[15320..15717).85" />
<Link Source="25003:[15672..15698).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[15672..15698).17" Target="25003:[15320..15717).85" />
<Link Source="25003:[15672..15698).18" Target="25003:[14837..14866).15" />
<Link Source="25003:[15672..15698).18" Target="25003:[15672..15698).17" />
<Link Source="25003:[15672..15698).18" Target="25003:[15632..15650).27" />
<Link Source="25003:[15672..15698).18" Target="25003:[15320..15717).85" />
<Link Source="25003:[15737..15752).27" Target="25003:[14837..14866).15" />
<Link Source="25003:[15737..15752).27" Target="25003:[15737..15752).22" />
<Link Source="25003:[15737..15752).27" Target="25003:[15672..15698).18" />
<Link Source="25003:[15737..15752).27" Target="25003:[15260..15767).23" />
<Link Source="25003:[15899..15914).27" Target="25003:[14837..14866).15" />
<Link Source="25003:[15899..15914).27" Target="25003:[15899..15914).22" />
<Link Source="25003:[15899..15914).27" Target="25003:[15737..15752).27" />
<Link Source="25003:[15899..15914).27" Target="25003:[11120..11133).1" />
<Link Source="25003:[15986..16015).27" Target="25003:[14837..14866).15" />
<Link Source="25003:[15986..16015).27" Target="25003:[15986..16015).22" />
<Link Source="25003:[15986..16015).27" Target="25003:[15899..15914).27" />
<Link Source="25003:[15986..16015).27" Target="25003:[10786..10799).1" />
<Link Source="25003:[16202..16218).69" Target="25003:[14837..14866).15" />
<Link Source="25003:[16202..16218).69" Target="25003:[16202..16218).61" />
<Link Source="25003:[16202..16218).69" Target="25003:[15986..16015).27" />
<Link Source="25003:[16202..16218).69" Target="25003:[10786..10799).1" />
<Link Source="25003:[16240..16275).46" Target="25003:[14837..14866).15" />
<Link Source="25003:[16240..16275).46" Target="25003:[16240..16275).41" />
<Link Source="25003:[16240..16275).46" Target="25003:[16202..16218).69" />
<Link Source="25003:[16240..16275).46" Target="25003:[10786..10799).1" />
<Link Source="25003:[16297..16313).69" Target="25003:[14837..14866).15" />
<Link Source="25003:[16297..16313).69" Target="25003:[16297..16313).61" />
<Link Source="25003:[16297..16313).69" Target="25003:[16240..16275).46" />
<Link Source="25003:[16297..16313).69" Target="25003:[10786..10799).1" />
<Link Source="25003:[16414..16430).45" Target="25003:[14837..14866).15" />
<Link Source="25003:[16414..16430).45" Target="25003:[16414..16430).40" />
<Link Source="25003:[16414..16430).45" Target="25003:[16297..16313).69" />
<Link Source="25003:[16414..16430).45" Target="25003:[16335..16453).81" />
<Link Source="25003:[16490..16505).27" Target="25003:[14837..14866).15" />
<Link Source="25003:[16490..16505).27" Target="25003:[16490..16505).22" />
<Link Source="25003:[16490..16505).27" Target="25003:[16414..16430).45" />
<Link Source="25003:[16490..16505).27" Target="25003:[10786..10799).1" />
<Link Source="25003:[17498..17519).17" Target="25003:[14837..14866).15" />
<Link Source="25003:[17498..17519).17" Target="25003:[16490..16505).27" />
<Link Source="25003:[17498..17519).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[22349..22404).79" Target="25003:[17498..17519).17" />
<Link Source="25003:[22349..22404).79" Target="25003:[11120..11133).1" />
<Link Source="25003:[22349..22404).80" Target="25003:[22349..22404).76" />
<Link Source="25003:[22349..22404).80" Target="25003:[22349..22404).79" />
<Link Source="25003:[22349..22404).80" Target="25003:[11120..11133).1" />
<Link Source="25003:[20852..20923).15" Target="25003:[19153..19205).1" />
<Link Source="25003:[20852..20923).15" Target="25003:[22349..22404).80" />
<Link Source="25003:[20852..20923).15" Target="25003:[20852..20923).10" />
<Link Source="25003:[20852..20923).15" Target="25003:[11120..11133).1" />
<Link Source="25003:[20952..21034).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[11120..11133).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[20952..21034).1" />
<Link Source="25003:[20952..21034).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[20995..21019).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[20995..21019).1" Target="25003:[20764..20834).15" />
<Link Source="25003:[20995..21019).1" Target="25003:[20952..21034).2" />
<Link Source="25003:[21050..21081).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[21050..21081).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[20995..21019).1" />
<Link Source="25003:[21050..21081).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21095..21192).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).2" Target="25003:[19153..19205).1" />
<Link Source="25003:[21095..21192).2" Target="25002:[4126..4179).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3129..3133).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3121..3141).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3135..3139).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3121..3141).1" />
<Link Source="25012:[3102..3141).1" Target="25012:[3121..3141).1" />
<Link Source="25003:[21095..21192).3" Target="EXTERNAL" />
<Link Source="25003:[21095..21192).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[21113..21190).1" Target="25002:[4126..4179).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21095..21192).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2498..2519).1" Target="25003:[21095..21192).2" />
<Link Source="25012:[2498..2519).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2521..2537).1" Target="25003:[21095..21192).3" />
<Link Source="25012:[2521..2537).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2539..2575).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2539..2575).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2577..2608).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2577..2608).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2539..2575).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2634..2703).1" />
<Link Source="25012:[2634..2703).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2644..2662).1" Target="25012:[2634..2703).2" />
<Link Source="25012:[2644..2662).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1074..1101).1" Target="EXTERNAL" />
<Link Source="25012:[1194..1223).1" Target="25012:[1074..1101).1" />
<Link Source="25012:[1194..1223).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1183..1293).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[4217..4231).1" Target="25012:[4230..4231).1" />
<Link Source="25012:[4264..4278).1" Target="25012:[4277..4278).1" />
<Link Source="25012:[4311..4325).1" Target="25012:[4324..4325).1" />
<Link Source="25012:[3676..10647).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1194..1223).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1053..1102).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[2717..2783).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2717..2783).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2577..2608).1" />
<Link Source="25012:[2717..2783).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2799..2869).1" Target="25012:[2473..2496).1" />
<Link Source="25012:[2799..2869).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2883..2947).1" Target="25012:[2498..2519).1" />
<Link Source="25012:[2883..2947).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).1" Target="25012:[2521..2537).1" />
<Link Source="25012:[2963..3048).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[2963..3048).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2963..3048).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).4" Target="25012:[2717..2783).3" />
<Link Source="25012:[2963..3048).4" Target="25003:[21113..21190).1" />
<Link Source="25012:[2993..3046).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1574..1592).1" Target="25012:[2963..3048).2" />
<Link Source="25012:[1574..1592).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1594..1612).1" Target="25012:[2963..3048).3" />
<Link Source="25012:[1594..1612).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1614..1638).1" Target="25012:[2963..3048).4" />
<Link Source="25012:[1614..1638).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2644..2662).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2883..2947).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2993..3046).1" />
<Link Source="25012:[1693..1757).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1672..2400).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5415..5426).1" Target="25012:[1672..2400).2" />
<Link Source="25012:[5415..5426).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5428..5447).1" Target="25012:[1672..2400).3" />
<Link Source="25012:[5428..5447).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5449..5460).1" Target="25012:[1672..2400).4" />
<Link Source="25012:[5449..5460).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1533..2415).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[5394..5413).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[5415..5426).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[5428..5447).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[5449..5460).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5505..5562).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5494..5563).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9423..9434).1" Target="25012:[5494..5563).2" />
<Link Source="25012:[9423..9434).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9436..9455).1" Target="25012:[5494..5563).3" />
<Link Source="25012:[9436..9455).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9457..9468).1" Target="25012:[5494..5563).4" />
<Link Source="25012:[9457..9468).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5357..6686).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9423..9434).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9502..9523).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9457..9468).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9541..9562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9740..9764).1" Target="25012:[9502..9523).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[9541..9562).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9796).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9784..9796).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9814..9943).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[9889..9924).1" Target="25012:[9814..9943).3" />
<Link Source="25012:[9889..9924).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9889..9924).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9814..9943).3" />
<Link Source="25012:[9889..9896).1" Target="25012:[9889..9924).5" />
<Link Source="25012:[9889..9896).1" Target="25012:[9814..9943).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9889..9924).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9814..9943).3" />
<Link Source="25012:[9963..10092).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9963..10092).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10038..10073).1" Target="25012:[9963..10092).3" />
<Link Source="25012:[10038..10073).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9889..9896).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[10038..10073).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9963..10092).3" />
<Link Source="25012:[10038..10045).1" Target="25012:[10038..10073).5" />
<Link Source="25012:[10038..10045).1" Target="25012:[10038..10073).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9963..10092).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9963..10092).3" />
<Link Source="25012:[10112..10592).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10187..10573).1" Target="25012:[10112..10592).3" />
<Link Source="25012:[10187..10573).3" Target="25012:[10187..10573).1" />
<Link Source="25012:[10187..10573).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[10187..10573).3" Target="25012:[10112..10592).3" />
<Link Source="25012:[10270..10363).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[9889..9896).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10038..10045).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10270..10363).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).6" Target="25012:[9402..9421).1" />
<Link Source="25012:[10270..10363).6" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).10" Target="25012:[9436..9455).1" />
<Link Source="25012:[10270..10363).10" Target="25012:[10187..10573).3" />
<Link Source="25012:[10298..10344).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[1344..1362).1" Target="25012:[10270..10363).6" />
<Link Source="25012:[1344..1362).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1364..1374).1" Target="25012:[10270..10363).1" />
<Link Source="25012:[1364..1374).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1376..1394).1" Target="25012:[10270..10363).10" />
<Link Source="25012:[1376..1394).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1396..1406).1" Target="25012:[10270..10363).1" />
<Link Source="25012:[1396..1406).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1309..1517).1" Target="25012:[9369..10636).1" />
<Link Source="25012:[1309..1517).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[1344..1362).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[2799..2869).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[1364..1374).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[1376..1394).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[1396..1406).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[1309..1517).1" />
<Link Source="25012:[1440..1502).5" Target="EXTERNAL" />
<Link Source="25012:[1440..1502).5" Target="25012:[1440..1502).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[1440..1502).3" />
<Link Source="25012:[1440..1502).5" Target="25012:[2799..2869).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[2883..2947).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[10298..10344).1" />
<Link Source="25012:[10270..10363).17" Target="25012:[10270..10363).5" />
<Link Source="25012:[10270..10363).17" Target="25012:[1440..1502).5" />
<Link Source="25012:[10270..10363).17" Target="25012:[10187..10573).3" />
<Link Source="25012:[10389..10423).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10389..10423).3" Target="25012:[9740..9764).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[9784..9791).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[9889..9896).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10038..10045).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10389..10423).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10187..10573).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10449..10483).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10449..10483).3" Target="25012:[9740..9764).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[9784..9791).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[9889..9896).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10038..10045).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10449..10483).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).1" Target="25012:[10270..10363).17" />
<Link Source="25012:[10509..10550).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).2" Target="25012:[10389..10423).3" />
<Link Source="25012:[10509..10550).2" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).3" Target="25012:[10509..10550).1" />
<Link Source="25012:[10509..10550).3" Target="25012:[10509..10550).2" />
<Link Source="25012:[10509..10550).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).5" Target="25012:[10449..10483).3" />
<Link Source="25012:[10509..10550).5" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).6" Target="25012:[10509..10550).3" />
<Link Source="25012:[10509..10550).6" Target="25012:[10509..10550).5" />
<Link Source="25012:[10509..10550).6" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10516).1" Target="25012:[10509..10550).6" />
<Link Source="25012:[10509..10516).1" Target="25012:[10112..10592).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[10187..10573).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10612..10621).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10612..10621).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[5415..5426).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[5449..5460).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5581..5597).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[5615..5631).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).5" Target="25012:[5651..6341).2" />
<Link Source="25012:[5651..6341).5" Target="25012:[5651..6341).4" />
<Link Source="25012:[5651..6341).5" Target="25012:[1693..1757).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10612..10621).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9784..9791).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9889..9896).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10038..10045).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10509..10516).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5651..6341).5" />
<Link Source="25012:[5716..6322).2" Target="25012:[5651..6341).5" />
<Link Source="25012:[5716..6322).4" Target="25012:[10612..10621).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9740..9764).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9784..9791).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9889..9896).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[10038..10045).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[10509..10516).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[5716..6322).2" />
<Link Source="25012:[5716..6322).4" Target="25012:[5615..5631).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[5651..6341).5" />
<Link Source="25012:[5931..6322).1" Target="25012:[10612..10621).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9784..9791).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9889..9896).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[10038..10045).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[10509..10516).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5716..6322).4" />
<Link Source="25012:[5931..6322).2" Target="25012:[5716..6322).4" />
<Link Source="25012:[6194..6198).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[6194..6198).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6224..6228).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[6224..6228).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).2" Target="EXTERNAL" />
<Link Source="25012:[6254..6299).2" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).3" Target="25012:[6194..6198).1" />
<Link Source="25012:[6254..6299).3" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).4" Target="25012:[6224..6228).1" />
<Link Source="25012:[6254..6299).4" Target="25012:[5931..6322).2" />
<Link Source="25012:[6267..6298).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[3967..3980).1" Target="25012:[6254..6299).2" />
<Link Source="25012:[3967..3980).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3982..3992).1" Target="25012:[6254..6299).3" />
<Link Source="25012:[3982..3992).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3994..4004).1" Target="25012:[6254..6299).4" />
<Link Source="25012:[3994..4004).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3953..4168).1" Target="25012:[6254..6299).1" />
<Link Source="25012:[3953..4168).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[3967..3980).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[3982..3992).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[3994..4004).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[5651..6341).11" Target="25012:[6194..6198).1" />
<Link Source="25012:[5651..6341).11" Target="25012:[6224..6228).1" />
<Link Source="25012:[5651..6341).11" Target="25012:[1693..1757).1" />
<Link Source="25012:[6254..6299).7" Target="EXTERNAL" />
<Link Source="25012:[6254..6299).7" Target="25012:[5651..6341).11" />
<Link Source="25012:[6254..6299).8" Target="25012:[5651..6341).11" />
<Link Source="25012:[6267..6298).2" Target="25012:[5651..6341).11" />
<Link Source="25012:[3967..3980).2" Target="25012:[6254..6299).7" />
<Link Source="25012:[3967..3980).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[3982..3992).2" Target="25012:[6254..6299).8" />
<Link Source="25012:[3982..3992).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[3994..4004).2" Target="25012:[6254..6299).8" />
<Link Source="25012:[3994..4004).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[3953..4168).2" Target="25012:[6254..6299).8" />
<Link Source="25012:[3953..4168).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[4046..4055).2" Target="25012:[3967..3980).2" />
<Link Source="25012:[4046..4055).2" Target="25012:[3953..4168).2" />
<Link Source="25012:[4046..4055).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[4085..4096).2" Target="25012:[3982..3992).2" />
<Link Source="25012:[4085..4096).2" Target="25012:[3953..4168).2" />
<Link Source="25012:[4085..4096).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[4128..4139).2" Target="25012:[3994..4004).2" />
<Link Source="25012:[4128..4139).2" Target="25012:[3953..4168).2" />
<Link Source="25012:[4128..4139).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[6361..6506).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[5651..6341).11" />
<Link Source="25012:[6361..6506).2" Target="25012:[6361..6506).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[5651..6341).11" />
<Link Source="25012:[6526..6671).2" Target="25012:[6526..6671).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[6254..6299).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[6254..6299).8" />
<Link Source="25012:[1672..2400).7" Target="25012:[4046..4055).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4085..4096).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4128..4139).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4046..4055).2" />
<Link Source="25012:[1672..2400).7" Target="25012:[4085..4096).2" />
<Link Source="25012:[1672..2400).7" Target="25012:[4128..4139).2" />
<Link Source="25012:[1672..2400).7" Target="25012:[2993..3046).1" />
<Link Source="25012:[1809..2381).1" Target="25012:[1672..2400).7" />
<Link Source="25012:[2267..2322).1" Target="25012:[1809..2381).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[1440..1502).5" />
<Link Source="25012:[2267..2322).3" Target="25012:[1672..2400).7" />
<Link Source="25012:[2267..2322).3" Target="25012:[1809..2381).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[1614..1638).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[2267..2322).3" />
<Link Source="25012:[2267..2322).5" Target="25012:[2717..2783).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[1809..2381).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2963..3048).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2267..2322).1" />
<Link Source="25012:[2963..3048).7" Target="25003:[21113..21190).1" />
<Link Source="25003:[21095..21192).10" Target="25003:[18506..18543).1" />
<Link Source="25003:[21095..21192).10" Target="25012:[2963..3048).7" />
<Link Source="25003:[21095..21192).10" Target="25003:[21050..21081).3" />
<Link Source="25003:[21095..21192).10" Target="25002:[4126..4179).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[19153..19205).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[20852..20923).15" />
<Link Source="25003:[21208..21226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[22763..22783).1" />
<Link Source="25003:[21240..21260).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[21095..21192).10" />
<Link Source="25003:[21276..21305).1" Target="25002:[4126..4179).1" />
<Link Source="25002:[2401..2451).3" Target="25002:[4446..4474).1" />
<Link Source="25002:[4446..4475).3" Target="28001:[74563..75296).4" />
<Link Source="25002:[4489..4523).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4489..4523).1" Target="28001:[74563..75296).4" />
<Link Source="25002:[4489..4523).2" Target="10327:[1279..1312).2" />
<Link Source="25002:[4489..4523).2" Target="28001:[74563..75296).4" />
<Link Source="25002:[4489..4522).1" Target="28001:[74563..75296).4" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4523).1" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4523).2" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4653..4691).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[5097..5821).1" Target="25002:[4750..5836).1" />
<Link Source="25002:[5097..5821).1" Target="10327:[1279..1312).2" />
<Link Source="25002:[5097..5821).1" Target="25003:[10786..10799).1" />
<Link Source="25002:[5097..5821).2" Target="25002:[4637..4651).1" />
<Link Source="25002:[5097..5821).2" Target="25002:[5097..5821).1" />
<Link Source="25002:[5097..5821).2" Target="25003:[10786..10799).1" />
<Link Source="25002:[5097..5821).2" Target="25002:[4750..5836).1" />
<Link Source="25002:[5675..5741).1" Target="25002:[4750..5836).1" />
<Link Source="25002:[5675..5741).1" Target="25002:[5097..5821).2" />
<Link Source="25002:[5763..5802).1" Target="25002:[5675..5741).1" />
<Link Source="25002:[5763..5802).1" Target="25002:[5097..5821).2" />
<Link Source="25002:[5763..5802).3" Target="25002:[5675..5741).1" />
<Link Source="25002:[4489..4523).3" Target="28001:[74563..75296).4" />
<Link Source="25002:[4539..4548).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4539..4548).1" Target="28001:[74563..75296).4" />
</Links>
</DirectedGraph>
