<?xml version="1.0" encoding="utf-8"?>
<DirectedGraph Title="DG" xmlns="http://schemas.microsoft.com/vs/2009/dgml">
<Nodes>
<Node Id="EXTERNAL" Label="EXTERNAL" />
<Node Id="25014:[387..448).1" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 738456" />
<Node Id="25014:[390..448).1" Label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 738457" />
<Node Id="28001:[588..156578).1" Label="param BindingTests(this) 738458" />
<Node Id="21002:[790..793).1" Label="'C' 738459" />
<Node Id="21002:[772..793).1" Label="DefaultTypeName = 'C' 738460" />
<Node Id="21002:[845..848).1" Label="'M' 738461" />
<Node Id="21002:[825..848).1" Label="DefaultMethodName = 'M' 738462" />
<Node Id="21002:[3243..25375).1" Label="@'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 738463" />
<Node Id="21002:[3098..25375).1" Label="LINQ =
        #region the string LINQ defines a complete LINQ API called List1$T$ (for instance method) and List2$T$ (for extension methods)
 @'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 738464" />
<Node Id="21002:[678..25421).1" Label="param CompilingTestBase(this) 738465" />
<Node Id="21003:[1338..2835).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 738466" />
<Node Id="21003:[1308..2835).1" Label="NullableAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 738467" />
<Node Id="21003:[2908..3440).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 738468" />
<Node Id="21003:[2871..3440).1" Label="NullableContextAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 738469" />
<Node Id="21003:[3516..3915).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 738470" />
<Node Id="21003:[3476..3915).1" Label="NullablePublicOnlyAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 738471" />
<Node Id="21003:[4223..4448).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 738472" />
<Node Id="21003:[4192..4448).1" Label="AllowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 738473" />
<Node Id="21003:[4518..4746).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 738474" />
<Node Id="21003:[4484..4746).1" Label="DisallowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 738475" />
<Node Id="21003:[4813..5071).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 738476" />
<Node Id="21003:[4782..5071).1" Label="MaybeNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 738477" />
<Node Id="21003:[5142..5397).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 738478" />
<Node Id="21003:[5107..5397).1" Label="MaybeNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 738479" />
<Node Id="21003:[5462..5718).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 738480" />
<Node Id="21003:[5433..5718).1" Label="NotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 738481" />
<Node Id="21003:[5787..6038).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 738482" />
<Node Id="21003:[5754..6038).1" Label="NotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 738483" />
<Node Id="21003:[6109..6460).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 738484" />
<Node Id="21003:[6074..6460).1" Label="MemberNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 738485" />
<Node Id="21003:[6535..6920).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 738486" />
<Node Id="21003:[6496..6920).1" Label="MemberNotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 738487" />
<Node Id="21003:[6993..7250).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 738488" />
<Node Id="21003:[6956..7250).1" Label="DoesNotReturnIfAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 738489" />
<Node Id="21003:[7321..7557).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 738490" />
<Node Id="21003:[7286..7557).1" Label="DoesNotReturnAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 738491" />
<Node Id="21003:[7631..7980).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 738492" />
<Node Id="21003:[7593..7980).1" Label="NotNullIfNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 738493" />
<Node Id="21003:[8047..8155).1" Label="@'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 738494" />
<Node Id="21003:[8016..8155).1" Label="IsExternalInitTypeDefinition = @'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 738495" />
<Node Id="21003:[8220..8359).1" Label="@'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 738496" />
<Node Id="21003:[8191..8359).1" Label="IAsyncDisposableDefinition = @'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 738497" />
<Node Id="21003:[8415..20279).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 738498" />
<Node Id="21003:[8395..20279).1" Label="AsyncStreamsTypes = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 738499" />
<Node Id="21003:[20353..20617).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 738500" />
<Node Id="21003:[20315..20617).1" Label="EnumeratorCancellationAttributeType = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 738501" />
<Node Id="21003:[20689..21473).1" Label="@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 738502" />
<Node Id="21003:[20653..21473).1" Label="NativeIntegerAttributeDefinition =
@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 738503" />
<Node Id="25004:[2227..2317).1" Label="() =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 738504" />
<Node Id="25004:[2332..2368).1" Label="LazyThreadSafetyMode.PublicationOnly 738505" />
<Node Id="25004:[2183..2369).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 738506" />
<Node Id="25004:[2155..2369).1" Label="s_lazyDefaultVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 738507" />
<Node Id="25004:[2602..2696).1" Label="() =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 738508" />
<Node Id="25004:[2711..2747).1" Label="LazyThreadSafetyMode.PublicationOnly 738509" />
<Node Id="25004:[2558..2748).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 738510" />
<Node Id="25004:[2531..2748).1" Label="s_lazyLatestVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 738511" />
<Node Id="25004:[2914..2947).1" Label="RuntimeUtilities.IsCoreClrRuntime 738512" />
<Node Id="25004:[3094..3171).1" Label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 738513" />
<Node Id="25004:[3077..3172).1" Label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 738514" />
<Node Id="25004:[2894..3172).1" Label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime
            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')
            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 738515" />
<Node Id="25004:[3490..5167).1" Label="() =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            } 738516" />
<Node Id="25004:[5182..5218).1" Label="LazyThreadSafetyMode.PublicationOnly 738517" />
<Node Id="25004:[3446..5219).1" Label="new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 738518" />
<Node Id="25004:[3432..5219).1" Label="s_winRtRefs = new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 738519" />
<Node Id="25004:[5576..5645).1" Label="() =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 738520" />
<Node Id="25004:[5660..5696).1" Label="LazyThreadSafetyMode.PublicationOnly 738521" />
<Node Id="25004:[5532..5697).1" Label="new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 738522" />
<Node Id="25004:[5508..5697).1" Label="s_portableRefsMinimal = new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 738523" />
<Node Id="25004:[6321..6439).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 738524" />
<Node Id="25004:[6458..6494).1" Label="LazyThreadSafetyMode.PublicationOnly 738525" />
<Node Id="25004:[6275..6495).1" Label="new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 738526" />
<Node Id="25004:[6244..6495).1" Label="s_systemCoreRef =
            new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 738527" />
<Node Id="25004:[6714..6838).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 738528" />
<Node Id="25004:[6853..6889).1" Label="LazyThreadSafetyMode.PublicationOnly 738529" />
<Node Id="25004:[6672..6890).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738530" />
<Node Id="25004:[6637..6890).1" Label="s_systemCoreRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738531" />
<Node Id="25004:[7130..7249).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 738532" />
<Node Id="25004:[7264..7300).1" Label="LazyThreadSafetyMode.PublicationOnly 738533" />
<Node Id="25004:[7088..7301).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738534" />
<Node Id="25004:[7066..7301).1" Label="s_systemCoreRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738535" />
<Node Id="25004:[7532..7667).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 738536" />
<Node Id="25004:[7682..7718).1" Label="LazyThreadSafetyMode.PublicationOnly 738537" />
<Node Id="25004:[7490..7719).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738538" />
<Node Id="25004:[7464..7719).1" Label="s_systemWindowsFormsRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738539" />
<Node Id="25004:[7940..8064).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 738540" />
<Node Id="25004:[8079..8115).1" Label="LazyThreadSafetyMode.PublicationOnly 738541" />
<Node Id="25004:[7898..8116).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738542" />
<Node Id="25004:[7877..8116).1" Label="s_systemDrawingRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738543" />
<Node Id="25004:[8324..8442).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 738544" />
<Node Id="25004:[8457..8493).1" Label="LazyThreadSafetyMode.PublicationOnly 738545" />
<Node Id="25004:[8282..8494).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738546" />
<Node Id="25004:[8264..8494).1" Label="s_systemDataRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738547" />
<Node Id="25004:[8694..8807).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 738548" />
<Node Id="25004:[8822..8858).1" Label="LazyThreadSafetyMode.PublicationOnly 738549" />
<Node Id="25004:[8652..8859).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738550" />
<Node Id="25004:[8636..8859).1" Label="s_mscorlibRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738551" />
<Node Id="25004:[9063..9214).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 738552" />
<Node Id="25004:[9229..9265).1" Label="LazyThreadSafetyMode.PublicationOnly 738553" />
<Node Id="25004:[9021..9266).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738554" />
<Node Id="25004:[8997..9266).1" Label="s_mscorlibRefPortable = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738555" />
<Node Id="25004:[9478..10389).1" Label="() =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            } 738556" />
<Node Id="25004:[10404..10440).1" Label="LazyThreadSafetyMode.PublicationOnly 738557" />
<Node Id="25004:[9436..10441).1" Label="new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 738558" />
<Node Id="25004:[9420..10441).1" Label="s_aacorlibRef = new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 738559" />
<Node Id="25004:[10811..10967).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri') 738560" />
<Node Id="25004:[10982..11018).1" Label="LazyThreadSafetyMode.PublicationOnly 738561" />
<Node Id="25004:[10769..11019).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 738562" />
<Node Id="25004:[10749..11019).1" Label="s_mscorlibRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 738563" />
<Node Id="25004:[11415..11589).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 738564" />
<Node Id="25004:[11604..11640).1" Label="LazyThreadSafetyMode.PublicationOnly 738565" />
<Node Id="25004:[11373..11641).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738566" />
<Node Id="25004:[11345..11641).1" Label="s_mscorlibRef_silverlight = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738567" />
<Node Id="25004:[12432..12560).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 738568" />
<Node Id="25004:[12575..12611).1" Label="LazyThreadSafetyMode.PublicationOnly 738569" />
<Node Id="25004:[12390..12612).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738570" />
<Node Id="25004:[12369..12612).1" Label="s_desktopCSharpRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738571" />
<Node Id="25004:[12815..12944).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 738572" />
<Node Id="25004:[12959..12995).1" Label="LazyThreadSafetyMode.PublicationOnly 738573" />
<Node Id="25004:[12773..12996).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738574" />
<Node Id="25004:[12760..12996).1" Label="s_std20Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738575" />
<Node Id="25004:[13204..13343).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 738576" />
<Node Id="25004:[13358..13394).1" Label="LazyThreadSafetyMode.PublicationOnly 738577" />
<Node Id="25004:[13162..13395).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738578" />
<Node Id="25004:[13138..13395).1" Label="s_46NetStandardFacade = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738579" />
<Node Id="25004:[13621..13796).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 738580" />
<Node Id="25004:[13811..13847).1" Label="LazyThreadSafetyMode.PublicationOnly 738581" />
<Node Id="25004:[13579..13848).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 738582" />
<Node Id="25004:[13551..13848).1" Label="s_systemDynamicRuntimeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 738583" />
<Node Id="25004:[14066..14175).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 738584" />
<Node Id="25004:[14190..14226).1" Label="LazyThreadSafetyMode.PublicationOnly 738585" />
<Node Id="25004:[14024..14227).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738586" />
<Node Id="25004:[14010..14227).1" Label="s_systemRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738587" />
<Node Id="25004:[14421..14531).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 738588" />
<Node Id="25004:[14546..14582).1" Label="LazyThreadSafetyMode.PublicationOnly 738589" />
<Node Id="25004:[14379..14583).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738590" />
<Node Id="25004:[14361..14583).1" Label="s_systemRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738591" />
<Node Id="25004:[14798..14913).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 738592" />
<Node Id="25004:[14928..14964).1" Label="LazyThreadSafetyMode.PublicationOnly 738593" />
<Node Id="25004:[14756..14965).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738594" />
<Node Id="25004:[14725..14965).1" Label="s_systemRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738595" />
<Node Id="25004:[15193..15301).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 738596" />
<Node Id="25004:[15316..15352).1" Label="LazyThreadSafetyMode.PublicationOnly 738597" />
<Node Id="25004:[15151..15353).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738598" />
<Node Id="25004:[15133..15353).1" Label="s_systemRef_v20 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738599" />
<Node Id="25004:[15554..15670).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 738600" />
<Node Id="25004:[15685..15721).1" Label="LazyThreadSafetyMode.PublicationOnly 738601" />
<Node Id="25004:[15512..15722).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738602" />
<Node Id="25004:[15495..15722).1" Label="s_systemXmlRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738603" />
<Node Id="25004:[15925..16050).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 738604" />
<Node Id="25004:[16065..16101).1" Label="LazyThreadSafetyMode.PublicationOnly 738605" />
<Node Id="25004:[15883..16102).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738606" />
<Node Id="25004:[15862..16102).1" Label="s_systemXmlLinqRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738607" />
<Node Id="25004:[16314..16416).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 738608" />
<Node Id="25004:[16431..16467).1" Label="LazyThreadSafetyMode.PublicationOnly 738609" />
<Node Id="25004:[16272..16468).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738610" />
<Node Id="25004:[16250..16468).1" Label="s_mscorlibFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738611" />
<Node Id="25004:[16687..16800).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 738612" />
<Node Id="25004:[16815..16851).1" Label="LazyThreadSafetyMode.PublicationOnly 738613" />
<Node Id="25004:[16645..16852).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738614" />
<Node Id="25004:[16618..16852).1" Label="s_systemRuntimeFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738615" />
<Node Id="25004:[17083..17200).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 738616" />
<Node Id="25004:[17215..17251).1" Label="LazyThreadSafetyMode.PublicationOnly 738617" />
<Node Id="25004:[17041..17252).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738618" />
<Node Id="25004:[17012..17252).1" Label="s_systemThreadingFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738619" />
<Node Id="25004:[17497..17625).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 738620" />
<Node Id="25004:[17640..17676).1" Label="LazyThreadSafetyMode.PublicationOnly 738621" />
<Node Id="25004:[17455..17677).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738622" />
<Node Id="25004:[17421..17677).1" Label="s_systemThreadingTasksFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738623" />
<Node Id="25004:[17911..18059).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 738624" />
<Node Id="25004:[18074..18110).1" Label="LazyThreadSafetyMode.PublicationOnly 738625" />
<Node Id="25004:[17869..18111).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738626" />
<Node Id="25004:[17850..18111).1" Label="s_mscorlibPP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738627" />
<Node Id="25004:[18321..18481).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 738628" />
<Node Id="25004:[18496..18532).1" Label="LazyThreadSafetyMode.PublicationOnly 738629" />
<Node Id="25004:[18279..18533).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738630" />
<Node Id="25004:[18255..18533).1" Label="s_systemRuntimePP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738631" />
<Node Id="25004:[18754..18880).1" Label="() =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 738632" />
<Node Id="25004:[18895..18931).1" Label="LazyThreadSafetyMode.PublicationOnly 738633" />
<Node Id="25004:[18712..18932).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738634" />
<Node Id="25004:[18687..18932).1" Label="s_FSharpTestLibraryRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 738635" />
<Node Id="25004:[19130..19147).1" Label="@'R:\Invalid.dll' 738636" />
<Node Id="25004:[19120..19147).1" Label="fullPath: @'R:\Invalid.dll' 738637" />
<Node Id="25004:[19094..19148).1" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 738638" />
<Node Id="25004:[19094..19148).5" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 738639" />
<Node Id="25004:[19081..19148).1" Label="InvalidRef = new TestMetadataReference(fullPath: @'R:\Invalid.dll') 738640" />
<Node Id="21003:[51329..51357).1" Label="MscorlibRef_v4_0_30316_17626 738641" />
<Node Id="25004:[10673..10688).1" Label="Net451.mscorlib 738642" />
<Node Id="21003:[51307..51358).1" Label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 738643" />
<Node Id="21003:[51292..51358).1" Label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 738644" />
<Node Id="21003:[56538..56550).1" Label="'/*$bind$*/' 738645" />
<Node Id="21003:[56524..56550).1" Label="StartString = '/*$bind$*/' 738646" />
<Node Id="21003:[56596..56609).1" Label="'/*$/bind$*/' 738647" />
<Node Id="21003:[56584..56609).1" Label="EndString = '/*$/bind$*/' 738648" />
<Node Id="21003:[92394..99056).1" Label="@'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 738649" />
<Node Id="21003:[92381..99056).1" Label="SpanSource = @'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 738650" />
<Node Id="21003:[101764..102290).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 738651" />
<Node Id="21003:[101743..102290).1" Label="s_IAsyncEnumerable = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 738652" />
<Node Id="21003:[1215..102298).1" Label="param CSharpTestBase(this) 738653" />
<Node Id="25015:[917..26825).1" Label="param CommonTestBase(this) 738654" />
<Node Id="25004:[926..968).1" Label="param TestBase(this) 738655" />
<Node Id="25004:[908..913).1" Label="_temp 738656" />
<Node Id="25014:[387..448).372" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 738657" />
<Node Id="28001:[57220..59761).1" Label="param UseSiteErrorViaAliasTest06(this) 738658" />
<Node Id="28001:[57393..58688).1" Label="var testAssembly = CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ); 738659" />
<Node Id="28001:[57393..58688).5" Label="var testAssembly = CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ); 738660" />
<Node Id="28001:[57654..57705).1" Label="TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 738661" />
<Node Id="21004:[2251..2264).1" Label="param operator(string source) 738662" />
<Node Id="21004:[2290..2296).1" Label="source 738663" />
<Node Id="21004:[2269..2297).1" Label="new CSharpTestSource(source) 738664" />
<Node Id="21004:[839..851).1" Label="param CSharpTestSource(object value) 738665" />
<Node Id="21004:[814..902).1" Label="param CSharpTestSource(this) 738666" />
<Node Id="21004:[877..882).1" Label="Value 738667" />
<Node Id="28001:[57393..58688).6" Label="var testAssembly = CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ); 738668" />
<Node Id="21003:[44736..44759).1" Label="param CreateCompilation(CSharpTestSource source) 738669" />
<Node Id="21003:[44774..44822).1" Label="param CreateCompilation(IEnumerable$MetadataReference$ references = null) 738670" />
<Node Id="21003:[44837..44876).1" Label="param CreateCompilation(CSharpCompilationOptions options = null) 738671" />
<Node Id="21003:[44891..44929).1" Label="param CreateCompilation(CSharpParseOptions parseOptions = null) 738672" />
<Node Id="21003:[44944..45002).1" Label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 738673" />
<Node Id="21003:[45017..45041).1" Label="param CreateCompilation(string assemblyName = '') 738674" />
<Node Id="21003:[45056..45082).1" Label="param CreateCompilation(string sourceFileName = '') 738675" />
<Node Id="21003:[45097..45128).1" Label="param CreateCompilation(bool skipUsesIsNullable = false) 738676" />
<Node Id="21003:[45130..45300).1" Label="=$ CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 738677" />
<Node Id="21003:[45156..45162).1" Label="source 738678" />
<Node Id="21003:[45198..45213).1" Label="targetFramework 738679" />
<Node Id="21003:[45215..45225).1" Label="references 738680" />
<Node Id="21003:[45164..45226).1" Label="TargetFrameworkUtil.GetReferences(targetFramework, references) 738681" />
<Node Id="25005:[9600..9618).1" Label="param GetReferences(TargetFramework tf) 738682" />
<Node Id="25005:[9620..9671).1" Label="param GetReferences(IEnumerable$MetadataReference$ additionalReferences) 738683" />
<Node Id="25005:[9697..9732).1" Label="var references = GetReferences(tf); 738684" />
<Node Id="25005:[9714..9731).1" Label="GetReferences(tf) 738685" />
<Node Id="25005:[7569..7600).1" Label="param GetReferences(TargetFramework targetFramework) 738686" />
<Node Id="25005:[7605..9525).1" Label="targetFramework switch
        {
            TargetFramework.Empty =$ ImmutableArray$MetadataReference$.Empty,
            TargetFramework.Mscorlib40 =$ Mscorlib40References,
            TargetFramework.Mscorlib40Extended =$ Mscorlib40ExtendedReferences,
            TargetFramework.Mscorlib40AndSystemCore =$ Mscorlib40andSystemCoreReferences,
            TargetFramework.Mscorlib40AndVBRuntime =$ Mscorlib40andVBRuntimeReferences,
            TargetFramework.Mscorlib45 =$ Mscorlib45References,
            TargetFramework.Mscorlib45Extended =$ Mscorlib45ExtendedReferences,
            TargetFramework.Mscorlib45AndCSharp =$ Mscorlib45AndCSharpReferences,
            TargetFramework.Mscorlib45AndVBRuntime =$ Mscorlib45AndVBRuntimeReferences,
            TargetFramework.Mscorlib46 =$ Mscorlib46References,
            TargetFramework.Mscorlib46Extended =$ Mscorlib46ExtendedReferences,
            TargetFramework.Mscorlib461 =$ Mscorlib46References,
            TargetFramework.Mscorlib461Extended =$ Mscorlib461ExtendedReferences,
            TargetFramework.NetStandard20 =$ NetStandard20References,
            TargetFramework.NetCoreApp =$ NetCoreAppReferences,
            TargetFramework.WinRT =$ WinRTReferences,
            TargetFramework.Standard =$ StandardReferences,
            TargetFramework.StandardLatest =$ StandardLatestReferences,
            TargetFramework.StandardAndCSharp =$ StandardAndCSharpReferences,
            TargetFramework.StandardAndVBRuntime =$ StandardAndVBRuntimeReferences,
            TargetFramework.StandardCompat =$ StandardCompatReferences,
            TargetFramework.DefaultVb =$ DefaultVbReferences,
            TargetFramework.Minimal =$ MinimalReferences,
            TargetFramework.MinimalAsync =$ MinimalAsyncReferences,
            _ =$ throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),
        } 738687" />
<Node Id="25005:[8889..8907).1" Label="StandardReferences 738688" />
<Node Id="25005:[6208..6241).1" Label="RuntimeUtilities.IsCoreClrRuntime 738689" />
<Node Id="25005:[6270..6298).1" Label="Mscorlib46ExtendedReferences 738690" />
<Node Id="25005:[4543..4693).1" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 738691" />
<Node Id="25005:[4648..4670).1" Label="TestBase.ValueTupleRef 738692" />
<Node Id="25004:[12011..12051).1" Label="TestReferences.NetFx.ValueTuple.tuplelib 738693" />
<Node Id="25005:[4543..4693).7" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 738694" />
<Node Id="25005:[6208..6298).1" Label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 738695" />
<Node Id="25005:[9746..9845).1" Label="if (additionalReferences == null)
            {
                return references;
            } 738696" />
<Node Id="25005:[9746..9845).2" Label="if (additionalReferences == null)
            {
                return references;
            } 738697" />
<Node Id="25005:[9861..9923).1" Label="checkForDuplicateReferences(references, additionalReferences); 738698" />
<Node Id="25005:[9861..9923).2" Label="checkForDuplicateReferences(references, additionalReferences); 738699" />
<Node Id="25005:[9861..9922).1" Label="checkForDuplicateReferences(references, additionalReferences) 738700" />
<Node Id="25005:[10413..11177).1" Label="void checkForDuplicateReferences(ImmutableArray$MetadataReference$ refer, IEnumerable$MetadataReference$ additRef)
            {
                var nameSet = new HashSet$string$(getNames(refer), StringComparer.OrdinalIgnoreCase);
                foreach (var r in additRef)
                {
                    if (refer.Contains(r))
                    {
                        throw new Exception($'Duplicate reference detected {r.Display}');
                    }

                    var name = getName(r);
                    if (name != null && !nameSet.Add(name))
                    {
                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');
                    }
                }
            } 738701" />
<Node Id="25005:[10413..11177).2" Label="void checkForDuplicateReferences(ImmutableArray$MetadataReference$ refer, IEnumerable$MetadataReference$ additRef)
            {
                var nameSet = new HashSet$string$(getNames(refer), StringComparer.OrdinalIgnoreCase);
                foreach (var r in additRef)
                {
                    if (refer.Contains(r))
                    {
                        throw new Exception($'Duplicate reference detected {r.Display}');
                    }

                    var name = getName(r);
                    if (name != null && !nameSet.Add(name))
                    {
                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');
                    }
                }
            } 738702" />
<Node Id="25005:[10560..10645).1" Label="var nameSet = new HashSet$string$(getNames(refer), StringComparer.OrdinalIgnoreCase); 738703" />
<Node Id="25005:[10594..10609).1" Label="getNames(refer) 738704" />
<Node Id="25005:[11193..11534).1" Label="IEnumerable$string$ getNames(IEnumerable$MetadataReference$ e)
            {
                foreach (var r in e)
                {
                    var name = getName(r);
                    if (name != null)
                    {
                        yield return name;
                    }
                }
            } 738705" />
<Node Id="25005:[11288..11519).1" Label="foreach (var r in e)
                {
                    var name = getName(r);
                    if (name != null)
                    {
                        yield return name;
                    }
                } 738706" />
<Node Id="25005:[11349..11371).1" Label="var name = getName(r); 738707" />
<Node Id="25005:[11360..11370).1" Label="getName(r) 738708" />
<Node Id="25005:[11550..12243).1" Label="string getName(MetadataReference m)
            {
                if (m is PortableExecutableReference p &&
                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)
                {
                    try
                    {
                        var identity = assemblyMetadata.GetAssembly().Identity;
                        return identity?.Name;
                    }
                    catch (BadImageFormatException)
                    {
                        // Happens when a native image is incorrectly passed as a PE.
                        return null;
                    }
                }

                return null;
            } 738709" />
<Node Id="25005:[11618..12196).1" Label="if (m is PortableExecutableReference p &&
                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)
                {
                    try
                    {
                        var identity = assemblyMetadata.GetAssembly().Identity;
                        return identity?.Name;
                    }
                    catch (BadImageFormatException)
                    {
                        // Happens when a native image is incorrectly passed as a PE.
                        return null;
                    }
                } 738710" />
<Node Id="25005:[11827..11882).1" Label="var identity = assemblyMetadata.GetAssembly().Identity; 738711" />
<Node Id="25005:[11908..11930).1" Label="return identity?.Name; 738712" />
<Node Id="25005:[11393..11500).1" Label="if (name != null)
                    {
                        yield return name;
                    } 738713" />
<Node Id="25005:[11393..11500).2" Label="if (name != null)
                    {
                        yield return name;
                    } 738714" />
<Node Id="25005:[11459..11477).1" Label="yield return name; 738715" />
<Node Id="25005:[11459..11477).2" Label="yield return name; 738716" />
<Node Id="25005:[11908..11930).2" Label="return identity?.Name; 738717" />
<Node Id="25005:[11393..11500).4" Label="if (name != null)
                    {
                        yield return name;
                    } 738718" />
<Node Id="25005:[11393..11500).5" Label="if (name != null)
                    {
                        yield return name;
                    } 738719" />
<Node Id="25005:[11459..11477).3" Label="yield return name; 738720" />
<Node Id="25005:[11393..11500).10" Label="if (name != null)
                    {
                        yield return name;
                    } 738721" />
<Node Id="25005:[11459..11477).5" Label="yield return name; 738722" />
<Node Id="25005:[10560..10645).4" Label="var nameSet = new HashSet$string$(getNames(refer), StringComparer.OrdinalIgnoreCase); 738723" />
<Node Id="25005:[10663..11162).1" Label="foreach (var r in additRef)
                {
                    if (refer.Contains(r))
                    {
                        throw new Exception($'Duplicate reference detected {r.Display}');
                    }

                    var name = getName(r);
                    if (name != null && !nameSet.Add(name))
                    {
                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');
                    }
                } 738724" />
<Node Id="25005:[10731..10890).1" Label="if (refer.Contains(r))
                    {
                        throw new Exception($'Duplicate reference detected {r.Display}');
                    } 738725" />
<Node Id="25005:[10731..10890).2" Label="if (refer.Contains(r))
                    {
                        throw new Exception($'Duplicate reference detected {r.Display}');
                    } 738726" />
<Node Id="25005:[10914..10936).1" Label="var name = getName(r); 738727" />
<Node Id="25005:[10925..10935).1" Label="getName(r) 738728" />
<Node Id="25005:[11550..12243).6" Label="string getName(MetadataReference m)
            {
                if (m is PortableExecutableReference p &&
                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)
                {
                    try
                    {
                        var identity = assemblyMetadata.GetAssembly().Identity;
                        return identity?.Name;
                    }
                    catch (BadImageFormatException)
                    {
                        // Happens when a native image is incorrectly passed as a PE.
                        return null;
                    }
                }

                return null;
            } 738729" />
<Node Id="25005:[11618..12196).36" Label="if (m is PortableExecutableReference p &&
                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)
                {
                    try
                    {
                        var identity = assemblyMetadata.GetAssembly().Identity;
                        return identity?.Name;
                    }
                    catch (BadImageFormatException)
                    {
                        // Happens when a native image is incorrectly passed as a PE.
                        return null;
                    }
                } 738730" />
<Node Id="25005:[11618..12196).38" Label="if (m is PortableExecutableReference p &&
                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)
                {
                    try
                    {
                        var identity = assemblyMetadata.GetAssembly().Identity;
                        return identity?.Name;
                    }
                    catch (BadImageFormatException)
                    {
                        // Happens when a native image is incorrectly passed as a PE.
                        return null;
                    }
                } 738731" />
<Node Id="25005:[10958..11143).1" Label="if (name != null && !nameSet.Add(name))
                    {
                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');
                    } 738732" />
<Node Id="25005:[10958..11143).2" Label="if (name != null && !nameSet.Add(name))
                    {
                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');
                    } 738733" />
<Node Id="25005:[10958..11143).3" Label="if (name != null && !nameSet.Add(name))
                    {
                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');
                    } 738734" />
<Node Id="25005:[10958..11143).4" Label="if (name != null && !nameSet.Add(name))
                    {
                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');
                    } 738735" />
<Node Id="25005:[9861..9923).3" Label="checkForDuplicateReferences(references, additionalReferences); 738736" />
<Node Id="25005:[9937..9986).1" Label="return references.AddRange(additionalReferences); 738737" />
<Node Id="25005:[9937..9986).2" Label="return references.AddRange(additionalReferences); 738738" />
<Node Id="21003:[45228..45235).1" Label="options 738739" />
<Node Id="21003:[45237..45249).1" Label="parseOptions 738740" />
<Node Id="21003:[45251..45263).1" Label="assemblyName 738741" />
<Node Id="21003:[45265..45279).1" Label="sourceFileName 738742" />
<Node Id="21003:[45281..45299).1" Label="skipUsesIsNullable 738743" />
<Node Id="21003:[45133..45300).1" Label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 738744" />
<Node Id="21003:[45382..45405).1" Label="param CreateEmptyCompilation(CSharpTestSource source) 738745" />
<Node Id="21003:[45420..45468).1" Label="param CreateEmptyCompilation(IEnumerable$MetadataReference$ references = null) 738746" />
<Node Id="21003:[45483..45522).1" Label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 738747" />
<Node Id="21003:[45537..45575).1" Label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 738748" />
<Node Id="21003:[45590..45614).1" Label="param CreateEmptyCompilation(string assemblyName = '') 738749" />
<Node Id="21003:[45629..45655).1" Label="param CreateEmptyCompilation(string sourceFileName = '') 738750" />
<Node Id="21003:[45670..45701).1" Label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 738751" />
<Node Id="21003:[45728..45734).1" Label="source 738752" />
<Node Id="21003:[45736..45746).1" Label="references 738753" />
<Node Id="21003:[45748..45755).1" Label="options 738754" />
<Node Id="21003:[45757..45769).1" Label="parseOptions 738755" />
<Node Id="21003:[45771..45783).1" Label="assemblyName 738756" />
<Node Id="21003:[45785..45799).1" Label="sourceFileName 738757" />
<Node Id="21003:[45801..45819).1" Label="skipUsesIsNullable 738758" />
<Node Id="21003:[45842..45846).1" Label="null 738759" />
<Node Id="21003:[45821..45846).1" Label="experimentalFeature: null 738760" />
<Node Id="21003:[45706..45847).1" Label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 738761" />
<Node Id="21003:[45929..45952).1" Label="param CreateCompilationCore(CSharpTestSource source) 738762" />
<Node Id="21003:[45967..46008).1" Label="param CreateCompilationCore(IEnumerable$MetadataReference$ references) 738763" />
<Node Id="21003:[46023..46055).1" Label="param CreateCompilationCore(CSharpCompilationOptions options) 738764" />
<Node Id="21003:[46070..46101).1" Label="param CreateCompilationCore(CSharpParseOptions parseOptions) 738765" />
<Node Id="21003:[46116..46135).1" Label="param CreateCompilationCore(string assemblyName) 738766" />
<Node Id="21003:[46150..46171).1" Label="param CreateCompilationCore(string sourceFileName) 738767" />
<Node Id="21003:[46186..46209).1" Label="param CreateCompilationCore(bool skipUsesIsNullable) 738768" />
<Node Id="21003:[46224..46254).1" Label="param CreateCompilationCore(MessageID? experimentalFeature) 738769" />
<Node Id="21003:[46280..46350).1" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 738770" />
<Node Id="21003:[46280..46350).2" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 738771" />
<Node Id="21003:[46298..46349).1" Label="source.GetSyntaxTrees(parseOptions, sourceFileName) 738772" />
<Node Id="21004:[949..980).1" Label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 738773" />
<Node Id="21004:[982..1008).1" Label="param GetSyntaxTrees(string sourceFileName = '') 738774" />
<Node Id="21004:[914..2190).1" Label="param GetSyntaxTrees(this) 738775" />
<Node Id="21004:[1034..2179).1" Label="switch (Value)
            {
                case string source:
                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };
                case string[] sources:
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return CSharpTestBase.Parse(parseOptions, sources);
                case SyntaxTree tree:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return new[] { tree };
                case SyntaxTree[] trees:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return trees;
                case CSharpTestSource[] testSources:
                    return testSources.SelectMany(s =$ s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();
                case null:
                    return Array.Empty$SyntaxTree$();
                default:
                    throw new Exception($'Unexpected value: {Value}');
            } 738776" />
<Node Id="21004:[1122..1208).1" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 738777" />
<Node Id="21004:[1122..1208).3" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 738778" />
<Node Id="21004:[1122..1208).4" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 738779" />
<Node Id="21004:[1137..1205).1" Label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 738780" />
<Node Id="21003:[34078..34089).1" Label="param Parse(string text) 738781" />
<Node Id="21003:[34091..34111).1" Label="param Parse(string filename = '') 738782" />
<Node Id="21003:[34113..34146).1" Label="param Parse(CSharpParseOptions options = null) 738783" />
<Node Id="21003:[34148..34172).1" Label="param Parse(Encoding encoding = null) 738784" />
<Node Id="21003:[34198..34304).1" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 738785" />
<Node Id="21003:[34198..34304).2" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 738786" />
<Node Id="21010:[590..618).1" Label="kind: SourceCodeKind.Regular 738787" />
<Node Id="21010:[620..662).1" Label="documentationMode: DocumentationMode.Parse 738788" />
<Node Id="21010:[567..663).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 738789" />
<Node Id="21010:[567..663).5" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 738790" />
<Node Id="21010:[557..663).1" Label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 738791" />
<Node Id="21010:[742..763).1" Label="SourceCodeKind.Script 738792" />
<Node Id="21010:[725..764).1" Label="Regular.WithKind(SourceCodeKind.Script) 738793" />
<Node Id="21010:[716..764).1" Label="Script = Regular.WithKind(SourceCodeKind.Script) 738794" />
<Node Id="21010:[856..879).1" Label="LanguageVersion.CSharp6 738795" />
<Node Id="21010:[828..880).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 738796" />
<Node Id="21010:[817..880).1" Label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 738797" />
<Node Id="21010:[972..995).1" Label="LanguageVersion.CSharp7 738798" />
<Node Id="21010:[944..996).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 738799" />
<Node Id="21010:[933..996).1" Label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 738800" />
<Node Id="21010:[1090..1115).1" Label="LanguageVersion.CSharp7_1 738801" />
<Node Id="21010:[1062..1116).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 738802" />
<Node Id="21010:[1049..1116).1" Label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 738803" />
<Node Id="21010:[1210..1235).1" Label="LanguageVersion.CSharp7_2 738804" />
<Node Id="21010:[1182..1236).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 738805" />
<Node Id="21010:[1169..1236).1" Label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 738806" />
<Node Id="21010:[1330..1355).1" Label="LanguageVersion.CSharp7_3 738807" />
<Node Id="21010:[1302..1356).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 738808" />
<Node Id="21010:[1289..1356).1" Label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 738809" />
<Node Id="21010:[1454..1477).1" Label="LanguageVersion.Default 738810" />
<Node Id="21010:[1426..1478).1" Label="Regular.WithLanguageVersion(LanguageVersion.Default) 738811" />
<Node Id="21010:[1409..1478).1" Label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 738812" />
<Node Id="21010:[1576..1599).1" Label="LanguageVersion.Preview 738813" />
<Node Id="21010:[1548..1600).1" Label="Regular.WithLanguageVersion(LanguageVersion.Preview) 738814" />
<Node Id="21010:[1531..1600).1" Label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 738815" />
<Node Id="21010:[1692..1715).1" Label="LanguageVersion.CSharp8 738816" />
<Node Id="21010:[1664..1716).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 738817" />
<Node Id="21010:[1653..1716).1" Label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 738818" />
<Node Id="21010:[1808..1831).1" Label="LanguageVersion.CSharp9 738819" />
<Node Id="21010:[1780..1832).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 738820" />
<Node Id="21010:[1769..1832).1" Label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 738821" />
<Node Id="21010:[1950..1976).1" Label="DocumentationMode.Diagnose 738822" />
<Node Id="21010:[1920..1977).1" Label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 738823" />
<Node Id="21010:[1885..1977).1" Label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 738824" />
<Node Id="21010:[2060..2067).1" Label="Regular 738825" />
<Node Id="21010:[2080..2109).1" Label="'UseLegacyStrongNameProvider' 738826" />
<Node Id="21010:[2060..2110).1" Label="Regular.WithFeature('UseLegacyStrongNameProvider') 738827" />
<Node Id="21010:[7783..7814).1" Label="param WithFeature(this CSharpParseOptions options) 738828" />
<Node Id="21010:[7816..7830).1" Label="param WithFeature(string feature) 738829" />
<Node Id="21010:[7832..7853).1" Label="param WithFeature(string value = 'true') 738830" />
<Node Id="21010:[7879..7992).1" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 738831" />
<Node Id="21010:[7879..7992).2" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 738832" />
<Node Id="21010:[7879..7992).3" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 738833" />
<Node Id="21010:[7879..7992).4" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 738834" />
<Node Id="21010:[7879..7992).5" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 738835" />
<Node Id="21010:[7931..7989).1" Label="new[] { new KeyValuePair$string, string$(feature, value) } 738836" />
<Node Id="21010:[7879..7992).9" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 738837" />
<Node Id="21010:[2030..2110).1" Label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 738838" />
<Node Id="21010:[2227..2274).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates 738839" />
<Node Id="21010:[2227..2292).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 738840" />
<Node Id="21010:[2295..2296).1" Label="1 738841" />
<Node Id="21010:[2227..2296).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 738842" />
<Node Id="21010:[2199..2297).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 738843" />
<Node Id="21010:[2163..2297).1" Label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 738844" />
<Node Id="21010:[2401..2450).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides 738845" />
<Node Id="21010:[2401..2468).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 738846" />
<Node Id="21010:[2373..2469).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 738847" />
<Node Id="21010:[2350..2469).1" Label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 738848" />
<Node Id="21010:[2576..2599).1" Label="LanguageVersion.CSharp8 738849" />
<Node Id="21010:[2548..2600).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 738850" />
<Node Id="21010:[2522..2600).1" Label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 738851" />
<Node Id="21010:[2655..2705).1" Label="RegularWithExtendedPartialMethods = RegularPreview 738852" />
<Node Id="21010:[2799..2838).1" Label="new SmallDictionary$string, string$ { } 738853" />
<Node Id="21010:[2774..2838).1" Label="s_experimentalFeatures = new SmallDictionary$string, string$ { } 738854" />
<Node Id="21010:[2954..2982).1" Label="kind: SourceCodeKind.Regular 738855" />
<Node Id="21010:[2984..3025).1" Label="documentationMode: DocumentationMode.None 738856" />
<Node Id="21010:[3027..3067).1" Label="languageVersion: LanguageVersion.Preview 738857" />
<Node Id="21010:[2931..3068).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 738858" />
<Node Id="21010:[2931..3068).3" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 738859" />
<Node Id="21010:[3082..3104).1" Label="s_experimentalFeatures 738860" />
<Node Id="21010:[2931..3105).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 738861" />
<Node Id="21010:[2891..3105).1" Label="ExperimentalParseOptions =
            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 738862" />
<Node Id="21010:[3487..3556).1" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 738863" />
<Node Id="21010:[3524..3544).1" Label="'testV7SwitchBinder' 738864" />
<Node Id="21010:[3546..3552).1" Label="'true' 738865" />
<Node Id="21010:[3487..3556).2" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 738866" />
<Node Id="21010:[3465..3557).1" Label="Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 738867" />
<Node Id="21010:[3436..3557).1" Label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 738868" />
<Node Id="21010:[3612..3656).1" Label="RegularWithoutRecursivePatterns = Regular7_3 738869" />
<Node Id="21010:[3709..3748).1" Label="RegularWithRecursivePatterns = Regular8 738870" />
<Node Id="21010:[3801..3844).1" Label="RegularWithoutPatternCombinators = Regular8 738871" />
<Node Id="21010:[3897..3943).1" Label="RegularWithPatternCombinators = RegularPreview 738872" />
<Node Id="21010:[4035..4070).1" Label="OutputKind.DynamicallyLinkedLibrary 738873" />
<Node Id="21010:[4072..4097).1" Label="OptimizationLevel.Release 738874" />
<Node Id="21010:[4017..4098).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 738875" />
<Node Id="21010:[10204..10225).1" Label="param CreateTestOptions(OutputKind outputKind) 738876" />
<Node Id="21010:[10227..10262).1" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738877" />
<Node Id="21010:[10264..10288).1" Label="param CreateTestOptions(bool allowUnsafe = false) 738878" />
<Node Id="21010:[10335..10345).1" Label="outputKind 738879" />
<Node Id="21010:[10347..10383).1" Label="optimizationLevel: optimizationLevel 738880" />
<Node Id="21010:[10385..10425).1" Label="warningLevel: Diagnostic.MaxWarningLevel 738881" />
<Node Id="21010:[10427..10451).1" Label="allowUnsafe: allowUnsafe 738882" />
<Node Id="21010:[10306..10452).1" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738883" />
<Node Id="21010:[10306..10452).47" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738884" />
<Node Id="21010:[4004..4098).1" Label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 738885" />
<Node Id="21010:[4188..4217).1" Label="OutputKind.ConsoleApplication 738886" />
<Node Id="21010:[4219..4244).1" Label="OptimizationLevel.Release 738887" />
<Node Id="21010:[4170..4245).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 738888" />
<Node Id="21010:[10204..10225).2" Label="param CreateTestOptions(OutputKind outputKind) 738889" />
<Node Id="21010:[10227..10262).2" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738890" />
<Node Id="21010:[10264..10288).2" Label="param CreateTestOptions(bool allowUnsafe = false) 738891" />
<Node Id="21010:[10335..10345).2" Label="outputKind 738892" />
<Node Id="21010:[10347..10383).2" Label="optimizationLevel: optimizationLevel 738893" />
<Node Id="21010:[10385..10425).2" Label="warningLevel: Diagnostic.MaxWarningLevel 738894" />
<Node Id="21010:[10427..10451).2" Label="allowUnsafe: allowUnsafe 738895" />
<Node Id="21010:[10306..10452).49" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738896" />
<Node Id="21010:[10306..10452).95" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738897" />
<Node Id="21010:[4157..4245).1" Label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 738898" />
<Node Id="21010:[4353..4357).1" Label="true 738899" />
<Node Id="21010:[4324..4358).1" Label="ReleaseDll.WithDebugPlusMode(true) 738900" />
<Node Id="21010:[4306..4358).1" Label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 738901" />
<Node Id="21010:[4466..4470).1" Label="true 738902" />
<Node Id="21010:[4437..4471).1" Label="ReleaseExe.WithDebugPlusMode(true) 738903" />
<Node Id="21010:[4419..4471).1" Label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 738904" />
<Node Id="21010:[4561..4596).1" Label="OutputKind.DynamicallyLinkedLibrary 738905" />
<Node Id="21010:[4598..4621).1" Label="OptimizationLevel.Debug 738906" />
<Node Id="21010:[4543..4622).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 738907" />
<Node Id="21010:[10204..10225).3" Label="param CreateTestOptions(OutputKind outputKind) 738908" />
<Node Id="21010:[10227..10262).3" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738909" />
<Node Id="21010:[10264..10288).3" Label="param CreateTestOptions(bool allowUnsafe = false) 738910" />
<Node Id="21010:[10335..10345).3" Label="outputKind 738911" />
<Node Id="21010:[10347..10383).3" Label="optimizationLevel: optimizationLevel 738912" />
<Node Id="21010:[10385..10425).3" Label="warningLevel: Diagnostic.MaxWarningLevel 738913" />
<Node Id="21010:[10427..10451).3" Label="allowUnsafe: allowUnsafe 738914" />
<Node Id="21010:[10306..10452).97" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738915" />
<Node Id="21010:[10306..10452).143" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738916" />
<Node Id="21010:[4532..4622).1" Label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 738917" />
<Node Id="21010:[4710..4739).1" Label="OutputKind.ConsoleApplication 738918" />
<Node Id="21010:[4741..4764).1" Label="OptimizationLevel.Debug 738919" />
<Node Id="21010:[4692..4765).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 738920" />
<Node Id="21010:[10204..10225).4" Label="param CreateTestOptions(OutputKind outputKind) 738921" />
<Node Id="21010:[10227..10262).4" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738922" />
<Node Id="21010:[10264..10288).4" Label="param CreateTestOptions(bool allowUnsafe = false) 738923" />
<Node Id="21010:[10335..10345).4" Label="outputKind 738924" />
<Node Id="21010:[10347..10383).4" Label="optimizationLevel: optimizationLevel 738925" />
<Node Id="21010:[10385..10425).4" Label="warningLevel: Diagnostic.MaxWarningLevel 738926" />
<Node Id="21010:[10427..10451).4" Label="allowUnsafe: allowUnsafe 738927" />
<Node Id="21010:[10306..10452).145" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738928" />
<Node Id="21010:[10306..10452).191" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738929" />
<Node Id="21010:[4681..4765).1" Label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 738930" />
<Node Id="21010:[4859..4892).1" Label="OutputKind.WindowsRuntimeMetadata 738931" />
<Node Id="21010:[4894..4919).1" Label="OptimizationLevel.Release 738932" />
<Node Id="21010:[4841..4920).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 738933" />
<Node Id="21010:[10204..10225).5" Label="param CreateTestOptions(OutputKind outputKind) 738934" />
<Node Id="21010:[10227..10262).5" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738935" />
<Node Id="21010:[10264..10288).5" Label="param CreateTestOptions(bool allowUnsafe = false) 738936" />
<Node Id="21010:[10335..10345).5" Label="outputKind 738937" />
<Node Id="21010:[10347..10383).5" Label="optimizationLevel: optimizationLevel 738938" />
<Node Id="21010:[10385..10425).5" Label="warningLevel: Diagnostic.MaxWarningLevel 738939" />
<Node Id="21010:[10427..10451).5" Label="allowUnsafe: allowUnsafe 738940" />
<Node Id="21010:[10306..10452).193" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738941" />
<Node Id="21010:[10306..10452).239" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738942" />
<Node Id="21010:[4826..4920).1" Label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 738943" />
<Node Id="21010:[5010..5043).1" Label="OutputKind.WindowsRuntimeMetadata 738944" />
<Node Id="21010:[5045..5068).1" Label="OptimizationLevel.Debug 738945" />
<Node Id="21010:[4992..5069).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 738946" />
<Node Id="21010:[10204..10225).6" Label="param CreateTestOptions(OutputKind outputKind) 738947" />
<Node Id="21010:[10227..10262).6" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738948" />
<Node Id="21010:[10264..10288).6" Label="param CreateTestOptions(bool allowUnsafe = false) 738949" />
<Node Id="21010:[10335..10345).6" Label="outputKind 738950" />
<Node Id="21010:[10347..10383).6" Label="optimizationLevel: optimizationLevel 738951" />
<Node Id="21010:[10385..10425).6" Label="warningLevel: Diagnostic.MaxWarningLevel 738952" />
<Node Id="21010:[10427..10451).6" Label="allowUnsafe: allowUnsafe 738953" />
<Node Id="21010:[10306..10452).241" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738954" />
<Node Id="21010:[10306..10452).287" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738955" />
<Node Id="21010:[4979..5069).1" Label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 738956" />
<Node Id="21010:[5164..5184).1" Label="OutputKind.NetModule 738957" />
<Node Id="21010:[5186..5211).1" Label="OptimizationLevel.Release 738958" />
<Node Id="21010:[5146..5212).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 738959" />
<Node Id="21010:[10204..10225).7" Label="param CreateTestOptions(OutputKind outputKind) 738960" />
<Node Id="21010:[10227..10262).7" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738961" />
<Node Id="21010:[10264..10288).7" Label="param CreateTestOptions(bool allowUnsafe = false) 738962" />
<Node Id="21010:[10335..10345).7" Label="outputKind 738963" />
<Node Id="21010:[10347..10383).7" Label="optimizationLevel: optimizationLevel 738964" />
<Node Id="21010:[10385..10425).7" Label="warningLevel: Diagnostic.MaxWarningLevel 738965" />
<Node Id="21010:[10427..10451).7" Label="allowUnsafe: allowUnsafe 738966" />
<Node Id="21010:[10306..10452).289" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738967" />
<Node Id="21010:[10306..10452).335" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738968" />
<Node Id="21010:[5130..5212).1" Label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 738969" />
<Node Id="21010:[5303..5323).1" Label="OutputKind.NetModule 738970" />
<Node Id="21010:[5325..5348).1" Label="OptimizationLevel.Debug 738971" />
<Node Id="21010:[5285..5349).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 738972" />
<Node Id="21010:[10204..10225).8" Label="param CreateTestOptions(OutputKind outputKind) 738973" />
<Node Id="21010:[10227..10262).8" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738974" />
<Node Id="21010:[10264..10288).8" Label="param CreateTestOptions(bool allowUnsafe = false) 738975" />
<Node Id="21010:[10335..10345).8" Label="outputKind 738976" />
<Node Id="21010:[10347..10383).8" Label="optimizationLevel: optimizationLevel 738977" />
<Node Id="21010:[10385..10425).8" Label="warningLevel: Diagnostic.MaxWarningLevel 738978" />
<Node Id="21010:[10427..10451).8" Label="allowUnsafe: allowUnsafe 738979" />
<Node Id="21010:[10306..10452).337" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738980" />
<Node Id="21010:[10306..10452).383" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738981" />
<Node Id="21010:[5271..5349).1" Label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 738982" />
<Node Id="21010:[5456..5460).1" Label="true 738983" />
<Node Id="21010:[5429..5461).1" Label="ReleaseDll.WithAllowUnsafe(true) 738984" />
<Node Id="21010:[5410..5461).1" Label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 738985" />
<Node Id="21010:[5566..5570).1" Label="true 738986" />
<Node Id="21010:[5539..5571).1" Label="ReleaseExe.WithAllowUnsafe(true) 738987" />
<Node Id="21010:[5520..5571).1" Label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 738988" />
<Node Id="21010:[5674..5678).1" Label="true 738989" />
<Node Id="21010:[5649..5679).1" Label="DebugDll.WithAllowUnsafe(true) 738990" />
<Node Id="21010:[5632..5679).1" Label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 738991" />
<Node Id="21010:[5780..5784).1" Label="true 738992" />
<Node Id="21010:[5755..5785).1" Label="DebugExe.WithAllowUnsafe(true) 738993" />
<Node Id="21010:[5738..5785).1" Label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 738994" />
<Node Id="21010:[5900..5951).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 738995" />
<Node Id="21010:[5866..5952).1" Label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 738996" />
<Node Id="21010:[5846..5952).1" Label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 738997" />
<Node Id="21010:[6065..6116).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 738998" />
<Node Id="21010:[6031..6117).1" Label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 738999" />
<Node Id="21010:[6011..6117).1" Label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 739000" />
<Node Id="21010:[6236..6287).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 739001" />
<Node Id="21010:[6199..6288).1" Label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 739002" />
<Node Id="21010:[6176..6288).1" Label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 739003" />
<Node Id="21010:[6397..6448).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 739004" />
<Node Id="21010:[6365..6449).1" Label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 739005" />
<Node Id="21010:[6347..6449).1" Label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 739006" />
<Node Id="21010:[6560..6586).1" Label="DebugInformationFormat.Pdb 739007" />
<Node Id="21010:[6513..6587).1" Label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 739008" />
<Node Id="21010:[6497..6587).1" Label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 739009" />
<Node Id="21003:[34259..34289).1" Label="options = TestOptions.Regular; 739010" />
<Node Id="21003:[34320..34386).1" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 739011" />
<Node Id="21003:[34320..34386).2" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 739012" />
<Node Id="21003:[34320..34386).3" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 739013" />
<Node Id="21003:[34320..34386).5" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 739014" />
<Node Id="21003:[34320..34386).7" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 739015" />
<Node Id="21003:[34400..34487).1" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 739016" />
<Node Id="21003:[34400..34487).2" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 739017" />
<Node Id="21003:[34400..34487).3" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 739018" />
<Node Id="21003:[34400..34487).4" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 739019" />
<Node Id="21003:[34400..34487).6" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 739020" />
<Node Id="21003:[34407..34486).1" Label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 739021" />
<Node Id="21003:[34554..34569).1" Label="param CheckSerializable(SyntaxTree tree) 739022" />
<Node Id="21003:[34595..34627).1" Label="var stream = new MemoryStream(); 739023" />
<Node Id="21003:[34641..34667).1" Label="var root = tree.GetRoot(); 739024" />
<Node Id="21003:[34641..34667).3" Label="var root = tree.GetRoot(); 739025" />
<Node Id="21003:[34681..34706).1" Label="root.SerializeTo(stream); 739026" />
<Node Id="21003:[34681..34706).2" Label="root.SerializeTo(stream); 739027" />
<Node Id="21003:[34681..34706).4" Label="root.SerializeTo(stream); 739028" />
<Node Id="21003:[34720..34740).1" Label="stream.Position = 0; 739029" />
<Node Id="21003:[34720..34735).1" Label="stream.Position 739030" />
<Node Id="21003:[34754..34818).1" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 739031" />
<Node Id="21003:[34754..34818).2" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 739032" />
<Node Id="21003:[34754..34818).4" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 739033" />
<Node Id="21003:[34832..34844).1" Label="return tree; 739034" />
<Node Id="21004:[1129..1207).1" Label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 739035" />
<Node Id="21003:[46280..46350).3" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 739036" />
<Node Id="21003:[46366..46650).1" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 739037" />
<Node Id="21003:[46366..46650).2" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 739038" />
<Node Id="21003:[46419..46533).1" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 739039" />
<Node Id="21003:[46419..46533).2" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 739040" />
<Node Id="21003:[46419..46533).4" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 739041" />
<Node Id="21003:[46563..46584).1" Label="hasTopLevelStatements 739042" />
<Node Id="21003:[46553..46635).1" Label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 739043" />
<Node Id="21003:[46755..46872).1" Label="if (Debugger.IsAttached)
            {
                options = options.WithConcurrentBuild(false);
            } 739044" />
<Node Id="21003:[46888..47066).1" Label="if (experimentalFeature.HasValue)
            {
                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);
            } 739045" />
<Node Id="21003:[47082..47319).1" Label="Func$CSharpCompilation$ createCompilationLambda = () =$ CSharpCompilation.Create(
                assemblyName == '' ? GetUniqueName() : assemblyName,
                syntaxTrees,
                references,
                options); 739046" />
<Node Id="21003:[47333..47400).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 739047" />
<Node Id="21003:[47333..47399).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 739048" />
<Node Id="25006:[11552..11587).1" Label="param ValidateIOperations(Func$Compilation$ createCompilation) 739049" />
<Node Id="25006:[11613..11696).1" Label="if (!EnableVerifyIOperation)
            {
                return;
            } 739050" />
<Node Id="25006:[11674..11681).1" Label="return; 739051" />
<Node Id="21003:[47333..47400).2" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 739052" />
<Node Id="21003:[47414..47458).1" Label="var compilation = createCompilationLambda(); 739053" />
<Node Id="21003:[47414..47458).2" Label="var compilation = createCompilationLambda(); 739054" />
<Node Id="25004:[1041..1077).1" Label="return Guid.NewGuid().ToString('D'); 739055" />
<Node Id="21003:[47414..47458).4" Label="var compilation = createCompilationLambda(); 739056" />
<Node Id="21003:[47689..47930).1" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 739057" />
<Node Id="21003:[47717..47747).1" Label="IsNullableEnabled(compilation) 739058" />
<Node Id="21003:[48025..48054).1" Label="param IsNullableEnabled(CSharpCompilation compilation) 739059" />
<Node Id="21003:[48175..48211).1" Label="var trees = compilation.SyntaxTrees; 739060" />
<Node Id="21003:[48225..48313).1" Label="if (trees.IsDefaultOrEmpty)
            {
                return false;
            } 739061" />
<Node Id="21003:[48327..48378).1" Label="var options = (CSharpParseOptions)trees[0].Options; 739062" />
<Node Id="21003:[48327..48378).2" Label="var options = (CSharpParseOptions)trees[0].Options; 739063" />
<Node Id="21003:[48392..48469).1" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 739064" />
<Node Id="21003:[48392..48469).2" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 739065" />
<Node Id="21003:[47689..47930).3" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 739066" />
<Node Id="21003:[47944..47963).1" Label="return compilation; 739067" />
<Node Id="28001:[57393..58688).10" Label="var testAssembly = CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ); 739068" />
<Node Id="28001:[58056..58120).1" Label="Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1') 739069" />
<Node Id="25004:[19277..19288).1" Label="param Diagnostic(object code) 739070" />
<Node Id="25004:[19303..19330).1" Label="param Diagnostic(string squiggledText = null) 739071" />
<Node Id="25004:[19345..19370).1" Label="param Diagnostic(object[] arguments = null) 739072" />
<Node Id="25004:[19385..19419).1" Label="param Diagnostic(LinePosition? startLocation = null) 739073" />
<Node Id="25004:[19434..19483).1" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 739074" />
<Node Id="25004:[19498..19537).1" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 739075" />
<Node Id="25004:[19552..19577).1" Label="param Diagnostic(bool isSuppressed = false) 739076" />
<Node Id="25004:[19603..19877).1" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739077" />
<Node Id="25004:[19603..19877).2" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739078" />
<Node Id="25004:[19603..19877).3" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739079" />
<Node Id="25004:[19603..19877).4" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739080" />
<Node Id="25004:[19603..19877).5" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739081" />
<Node Id="25004:[19603..19877).6" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739082" />
<Node Id="25004:[19603..19877).7" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739083" />
<Node Id="25004:[19610..19876).1" Label="TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed) 739084" />
<Node Id="25007:[3334..3345).1" Label="param Diagnostic(object code) 739085" />
<Node Id="25007:[3360..3387).1" Label="param Diagnostic(string squiggledText = null) 739086" />
<Node Id="25007:[3402..3427).1" Label="param Diagnostic(object[] arguments = null) 739087" />
<Node Id="25007:[3442..3476).1" Label="param Diagnostic(LinePosition? startLocation = null) 739088" />
<Node Id="25007:[3491..3540).1" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 739089" />
<Node Id="25007:[3555..3594).1" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 739090" />
<Node Id="25007:[3609..3634).1" Label="param Diagnostic(bool isSuppressed = false) 739091" />
<Node Id="25007:[3660..3885).1" Label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||
                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||
                         code is int ||
                         code is string); 739092" />
<Node Id="25007:[3901..4266).1" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739093" />
<Node Id="25007:[3901..4266).4" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739094" />
<Node Id="25007:[3901..4266).6" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739095" />
<Node Id="25007:[3901..4266).7" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739096" />
<Node Id="25007:[3901..4266).8" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739097" />
<Node Id="25007:[3901..4266).9" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739098" />
<Node Id="25007:[3901..4266).10" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739099" />
<Node Id="25003:[747..750).1" Label="{ } 739100" />
<Node Id="25003:[740..750).1" Label="None = { } 739101" />
<Node Id="25003:[814..818).1" Label="null 739102" />
<Node Id="25003:[808..818).1" Label="Any = null 739103" />
<Node Id="25007:[3901..4266).13" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739104" />
<Node Id="25007:[3908..4265).1" Label="new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed) 739105" />
<Node Id="25003:[2816..2827).1" Label="param DiagnosticDescription(object code) 739106" />
<Node Id="25003:[2842..2863).1" Label="param DiagnosticDescription(bool isWarningAsError) 739107" />
<Node Id="25003:[2878..2898).1" Label="param DiagnosticDescription(string squiggledText) 739108" />
<Node Id="25003:[2913..2931).1" Label="param DiagnosticDescription(object[] arguments) 739109" />
<Node Id="25003:[2946..2973).1" Label="param DiagnosticDescription(LinePosition? startLocation) 739110" />
<Node Id="25003:[2988..3030).1" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 739111" />
<Node Id="25003:[3045..3076).1" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 739112" />
<Node Id="25003:[3091..3116).1" Label="param DiagnosticDescription(Type errorCodeType = null) 739113" />
<Node Id="25003:[3131..3176).1" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 739114" />
<Node Id="25003:[3191..3238).1" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 739115" />
<Node Id="25003:[3253..3278).1" Label="param DiagnosticDescription(bool isSuppressed = false) 739116" />
<Node Id="25003:[2773..3850).1" Label="param DiagnosticDescription(this) 739117" />
<Node Id="25003:[912..917).1" Label="_code 739118" />
<Node Id="25003:[950..967).1" Label="_isWarningAsError 739119" />
<Node Id="25003:[1000..1013).1" Label="_isSuppressed 739120" />
<Node Id="25003:[1048..1062).1" Label="_squiggledText 739121" />
<Node Id="25003:[1099..1109).1" Label="_arguments 739122" />
<Node Id="25003:[1151..1165).1" Label="_startPosition 739123" />
<Node Id="25003:[1276..1303).1" Label="_argumentOrderDoesNotMatter 739124" />
<Node Id="25003:[1336..1350).1" Label="_errorCodeType 739125" />
<Node Id="25003:[1383..1412).1" Label="_ignoreArgumentsWhenComparing 739126" />
<Node Id="25003:[1460..1479).1" Label="_defaultSeverityOpt 739127" />
<Node Id="25003:[1527..1548).1" Label="_effectiveSeverityOpt 739128" />
<Node Id="25003:[1673..1689).1" Label="_syntaxPredicate 739129" />
<Node Id="25003:[1713..1727).1" Label="_showPredicate 739130" />
<Node Id="25003:[1891..1900).1" Label="_location 739131" />
<Node Id="25003:[1941..1960).1" Label="_argumentsAsStrings 739132" />
<Node Id="25003:[3304..3309).1" Label="_code 739133" />
<Node Id="25003:[3331..3348).1" Label="_isWarningAsError 739134" />
<Node Id="25003:[3382..3396).1" Label="_squiggledText 739135" />
<Node Id="25003:[3427..3437).1" Label="_arguments 739136" />
<Node Id="25003:[3464..3478).1" Label="_startPosition 739137" />
<Node Id="25003:[3509..3525).1" Label="_syntaxPredicate 739138" />
<Node Id="25003:[3562..3589).1" Label="_argumentOrderDoesNotMatter 739139" />
<Node Id="25003:[3633..3682).1" Label="_errorCodeType = errorCodeType ?? code.GetType(); 739140" />
<Node Id="25003:[3633..3647).1" Label="_errorCodeType 739141" />
<Node Id="25003:[3696..3715).1" Label="_defaultSeverityOpt 739142" />
<Node Id="25003:[3751..3772).1" Label="_effectiveSeverityOpt 739143" />
<Node Id="25003:[3810..3823).1" Label="_isSuppressed 739144" />
<Node Id="25004:[19603..19877).8" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739145" />
<Node Id="28001:[57393..58688).41" Label="var testAssembly = CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ); 739146" />
<Node Id="28001:[58056..58258).1" Label="Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null') 739147" />
<Node Id="28001:[58056..58258).3" Label="Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null') 739148" />
<Node Id="25003:[7407..7432).1" Label="param WithArguments(params object[] arguments) 739149" />
<Node Id="25003:[7364..7671).1" Label="param WithArguments(this) 739150" />
<Node Id="25003:[7458..7660).1" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739151" />
<Node Id="25003:[7458..7660).2" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739152" />
<Node Id="25003:[7458..7660).3" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739153" />
<Node Id="25003:[7458..7660).4" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739154" />
<Node Id="25003:[7458..7660).5" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739155" />
<Node Id="25003:[7458..7660).6" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739156" />
<Node Id="25003:[7458..7660).7" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739157" />
<Node Id="25003:[7458..7660).9" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739158" />
<Node Id="25003:[7458..7660).10" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739159" />
<Node Id="25003:[7458..7660).11" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739160" />
<Node Id="25003:[7458..7660).12" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739161" />
<Node Id="25003:[7465..7659).1" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 739162" />
<Node Id="25003:[2816..2827).2" Label="param DiagnosticDescription(object code) 739163" />
<Node Id="25003:[2842..2863).2" Label="param DiagnosticDescription(bool isWarningAsError) 739164" />
<Node Id="25003:[2878..2898).2" Label="param DiagnosticDescription(string squiggledText) 739165" />
<Node Id="25003:[2913..2931).2" Label="param DiagnosticDescription(object[] arguments) 739166" />
<Node Id="25003:[2946..2973).2" Label="param DiagnosticDescription(LinePosition? startLocation) 739167" />
<Node Id="25003:[2988..3030).2" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 739168" />
<Node Id="25003:[3045..3076).2" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 739169" />
<Node Id="25003:[3091..3116).2" Label="param DiagnosticDescription(Type errorCodeType = null) 739170" />
<Node Id="25003:[3131..3176).2" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 739171" />
<Node Id="25003:[3191..3238).2" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 739172" />
<Node Id="25003:[3253..3278).2" Label="param DiagnosticDescription(bool isSuppressed = false) 739173" />
<Node Id="25003:[2773..3850).2" Label="param DiagnosticDescription(this) 739174" />
<Node Id="25003:[912..917).2" Label="_code 739175" />
<Node Id="25003:[950..967).2" Label="_isWarningAsError 739176" />
<Node Id="25003:[1000..1013).2" Label="_isSuppressed 739177" />
<Node Id="25003:[1048..1062).2" Label="_squiggledText 739178" />
<Node Id="25003:[1099..1109).2" Label="_arguments 739179" />
<Node Id="25003:[1151..1165).4" Label="_startPosition 739180" />
<Node Id="25003:[1276..1303).2" Label="_argumentOrderDoesNotMatter 739181" />
<Node Id="25003:[1336..1350).2" Label="_errorCodeType 739182" />
<Node Id="25003:[1383..1412).2" Label="_ignoreArgumentsWhenComparing 739183" />
<Node Id="25003:[1460..1479).2" Label="_defaultSeverityOpt 739184" />
<Node Id="25003:[1527..1548).2" Label="_effectiveSeverityOpt 739185" />
<Node Id="25003:[1673..1689).2" Label="_syntaxPredicate 739186" />
<Node Id="25003:[1713..1727).2" Label="_showPredicate 739187" />
<Node Id="25003:[1891..1900).2" Label="_location 739188" />
<Node Id="25003:[1941..1960).2" Label="_argumentsAsStrings 739189" />
<Node Id="25003:[3427..3437).2" Label="_arguments 739190" />
<Node Id="25003:[3562..3589).2" Label="_argumentOrderDoesNotMatter 739191" />
<Node Id="28001:[57393..58688).48" Label="var testAssembly = CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ); 739192" />
<Node Id="28001:[58389..58441).1" Label="Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b') 739193" />
<Node Id="25004:[19277..19288).2" Label="param Diagnostic(object code) 739194" />
<Node Id="25004:[19303..19330).2" Label="param Diagnostic(string squiggledText = null) 739195" />
<Node Id="25004:[19345..19370).2" Label="param Diagnostic(object[] arguments = null) 739196" />
<Node Id="25004:[19385..19419).2" Label="param Diagnostic(LinePosition? startLocation = null) 739197" />
<Node Id="25004:[19434..19483).2" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 739198" />
<Node Id="25004:[19498..19537).2" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 739199" />
<Node Id="25004:[19552..19577).2" Label="param Diagnostic(bool isSuppressed = false) 739200" />
<Node Id="25004:[19603..19877).10" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739201" />
<Node Id="25004:[19603..19877).11" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739202" />
<Node Id="25004:[19603..19877).12" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739203" />
<Node Id="25004:[19603..19877).13" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739204" />
<Node Id="25004:[19603..19877).14" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739205" />
<Node Id="25004:[19603..19877).15" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739206" />
<Node Id="25004:[19603..19877).16" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739207" />
<Node Id="25004:[19610..19876).2" Label="TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed) 739208" />
<Node Id="25007:[3334..3345).2" Label="param Diagnostic(object code) 739209" />
<Node Id="25007:[3360..3387).2" Label="param Diagnostic(string squiggledText = null) 739210" />
<Node Id="25007:[3402..3427).2" Label="param Diagnostic(object[] arguments = null) 739211" />
<Node Id="25007:[3442..3476).2" Label="param Diagnostic(LinePosition? startLocation = null) 739212" />
<Node Id="25007:[3491..3540).2" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 739213" />
<Node Id="25007:[3555..3594).2" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 739214" />
<Node Id="25007:[3609..3634).2" Label="param Diagnostic(bool isSuppressed = false) 739215" />
<Node Id="25007:[3660..3885).6" Label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||
                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||
                         code is int ||
                         code is string); 739216" />
<Node Id="25007:[3901..4266).20" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739217" />
<Node Id="25007:[3901..4266).23" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739218" />
<Node Id="25007:[3901..4266).25" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739219" />
<Node Id="25007:[3901..4266).26" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739220" />
<Node Id="25007:[3901..4266).27" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739221" />
<Node Id="25007:[3901..4266).28" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739222" />
<Node Id="25007:[3901..4266).29" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739223" />
<Node Id="25007:[3901..4266).32" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739224" />
<Node Id="25007:[3908..4265).2" Label="new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed) 739225" />
<Node Id="25003:[2816..2827).3" Label="param DiagnosticDescription(object code) 739226" />
<Node Id="25003:[2842..2863).3" Label="param DiagnosticDescription(bool isWarningAsError) 739227" />
<Node Id="25003:[2878..2898).3" Label="param DiagnosticDescription(string squiggledText) 739228" />
<Node Id="25003:[2913..2931).3" Label="param DiagnosticDescription(object[] arguments) 739229" />
<Node Id="25003:[2946..2973).3" Label="param DiagnosticDescription(LinePosition? startLocation) 739230" />
<Node Id="25003:[2988..3030).3" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 739231" />
<Node Id="25003:[3045..3076).3" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 739232" />
<Node Id="25003:[3091..3116).3" Label="param DiagnosticDescription(Type errorCodeType = null) 739233" />
<Node Id="25003:[3131..3176).3" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 739234" />
<Node Id="25003:[3191..3238).3" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 739235" />
<Node Id="25003:[3253..3278).3" Label="param DiagnosticDescription(bool isSuppressed = false) 739236" />
<Node Id="25003:[2773..3850).3" Label="param DiagnosticDescription(this) 739237" />
<Node Id="25003:[912..917).3" Label="_code 739238" />
<Node Id="25003:[950..967).3" Label="_isWarningAsError 739239" />
<Node Id="25003:[1000..1013).3" Label="_isSuppressed 739240" />
<Node Id="25003:[1048..1062).3" Label="_squiggledText 739241" />
<Node Id="25003:[1099..1109).3" Label="_arguments 739242" />
<Node Id="25003:[1151..1165).7" Label="_startPosition 739243" />
<Node Id="25003:[1276..1303).3" Label="_argumentOrderDoesNotMatter 739244" />
<Node Id="25003:[1336..1350).3" Label="_errorCodeType 739245" />
<Node Id="25003:[1383..1412).3" Label="_ignoreArgumentsWhenComparing 739246" />
<Node Id="25003:[1460..1479).3" Label="_defaultSeverityOpt 739247" />
<Node Id="25003:[1527..1548).3" Label="_effectiveSeverityOpt 739248" />
<Node Id="25003:[1673..1689).3" Label="_syntaxPredicate 739249" />
<Node Id="25003:[1713..1727).3" Label="_showPredicate 739250" />
<Node Id="25003:[1891..1900).3" Label="_location 739251" />
<Node Id="25003:[1941..1960).3" Label="_argumentsAsStrings 739252" />
<Node Id="25003:[3304..3309).3" Label="_code 739253" />
<Node Id="25003:[3331..3348).3" Label="_isWarningAsError 739254" />
<Node Id="25003:[3382..3396).3" Label="_squiggledText 739255" />
<Node Id="25003:[3427..3437).3" Label="_arguments 739256" />
<Node Id="25003:[3464..3478).3" Label="_startPosition 739257" />
<Node Id="25003:[3509..3525).3" Label="_syntaxPredicate 739258" />
<Node Id="25003:[3562..3589).3" Label="_argumentOrderDoesNotMatter 739259" />
<Node Id="25003:[3633..3682).3" Label="_errorCodeType = errorCodeType ?? code.GetType(); 739260" />
<Node Id="25003:[3633..3647).3" Label="_errorCodeType 739261" />
<Node Id="25003:[3696..3715).3" Label="_defaultSeverityOpt 739262" />
<Node Id="25003:[3751..3772).3" Label="_effectiveSeverityOpt 739263" />
<Node Id="25003:[3810..3823).3" Label="_isSuppressed 739264" />
<Node Id="25004:[19603..19877).17" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739265" />
<Node Id="28001:[57393..58688).62" Label="var testAssembly = CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ); 739266" />
<Node Id="28001:[58389..58465).1" Label="Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b') 739267" />
<Node Id="28001:[58389..58465).2" Label="Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b') 739268" />
<Node Id="25003:[7407..7432).2" Label="param WithArguments(params object[] arguments) 739269" />
<Node Id="25003:[7364..7671).2" Label="param WithArguments(this) 739270" />
<Node Id="25003:[7458..7660).15" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739271" />
<Node Id="25003:[7458..7660).16" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739272" />
<Node Id="25003:[7458..7660).17" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739273" />
<Node Id="25003:[7458..7660).18" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739274" />
<Node Id="25003:[7458..7660).19" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739275" />
<Node Id="25003:[7458..7660).20" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739276" />
<Node Id="25003:[7458..7660).21" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739277" />
<Node Id="25003:[7458..7660).23" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739278" />
<Node Id="25003:[7458..7660).24" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739279" />
<Node Id="25003:[7458..7660).25" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739280" />
<Node Id="25003:[7458..7660).26" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739281" />
<Node Id="25003:[7465..7659).2" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 739282" />
<Node Id="25003:[2816..2827).4" Label="param DiagnosticDescription(object code) 739283" />
<Node Id="25003:[2842..2863).4" Label="param DiagnosticDescription(bool isWarningAsError) 739284" />
<Node Id="25003:[2878..2898).4" Label="param DiagnosticDescription(string squiggledText) 739285" />
<Node Id="25003:[2913..2931).4" Label="param DiagnosticDescription(object[] arguments) 739286" />
<Node Id="25003:[2946..2973).4" Label="param DiagnosticDescription(LinePosition? startLocation) 739287" />
<Node Id="25003:[2988..3030).4" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 739288" />
<Node Id="25003:[3045..3076).4" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 739289" />
<Node Id="25003:[3091..3116).4" Label="param DiagnosticDescription(Type errorCodeType = null) 739290" />
<Node Id="25003:[3131..3176).4" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 739291" />
<Node Id="25003:[3191..3238).4" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 739292" />
<Node Id="25003:[3253..3278).4" Label="param DiagnosticDescription(bool isSuppressed = false) 739293" />
<Node Id="25003:[2773..3850).4" Label="param DiagnosticDescription(this) 739294" />
<Node Id="25003:[912..917).4" Label="_code 739295" />
<Node Id="25003:[950..967).4" Label="_isWarningAsError 739296" />
<Node Id="25003:[1000..1013).4" Label="_isSuppressed 739297" />
<Node Id="25003:[1048..1062).4" Label="_squiggledText 739298" />
<Node Id="25003:[1099..1109).4" Label="_arguments 739299" />
<Node Id="25003:[1151..1165).10" Label="_startPosition 739300" />
<Node Id="25003:[1276..1303).4" Label="_argumentOrderDoesNotMatter 739301" />
<Node Id="25003:[1336..1350).4" Label="_errorCodeType 739302" />
<Node Id="25003:[1383..1412).4" Label="_ignoreArgumentsWhenComparing 739303" />
<Node Id="25003:[1460..1479).4" Label="_defaultSeverityOpt 739304" />
<Node Id="25003:[1527..1548).4" Label="_effectiveSeverityOpt 739305" />
<Node Id="25003:[1673..1689).4" Label="_syntaxPredicate 739306" />
<Node Id="25003:[1713..1727).4" Label="_showPredicate 739307" />
<Node Id="25003:[1891..1900).4" Label="_location 739308" />
<Node Id="25003:[1941..1960).4" Label="_argumentsAsStrings 739309" />
<Node Id="25003:[3427..3437).4" Label="_arguments 739310" />
<Node Id="25003:[3562..3589).4" Label="_argumentOrderDoesNotMatter 739311" />
<Node Id="28001:[57393..58688).68" Label="var testAssembly = CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ); 739312" />
<Node Id="28001:[58596..58648).1" Label="Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a') 739313" />
<Node Id="25004:[19277..19288).3" Label="param Diagnostic(object code) 739314" />
<Node Id="25004:[19303..19330).3" Label="param Diagnostic(string squiggledText = null) 739315" />
<Node Id="25004:[19345..19370).3" Label="param Diagnostic(object[] arguments = null) 739316" />
<Node Id="25004:[19385..19419).3" Label="param Diagnostic(LinePosition? startLocation = null) 739317" />
<Node Id="25004:[19434..19483).3" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 739318" />
<Node Id="25004:[19498..19537).3" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 739319" />
<Node Id="25004:[19552..19577).3" Label="param Diagnostic(bool isSuppressed = false) 739320" />
<Node Id="25004:[19603..19877).19" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739321" />
<Node Id="25004:[19603..19877).20" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739322" />
<Node Id="25004:[19603..19877).21" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739323" />
<Node Id="25004:[19603..19877).22" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739324" />
<Node Id="25004:[19603..19877).23" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739325" />
<Node Id="25004:[19603..19877).24" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739326" />
<Node Id="25004:[19603..19877).25" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739327" />
<Node Id="25004:[19610..19876).3" Label="TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed) 739328" />
<Node Id="25007:[3334..3345).3" Label="param Diagnostic(object code) 739329" />
<Node Id="25007:[3360..3387).3" Label="param Diagnostic(string squiggledText = null) 739330" />
<Node Id="25007:[3402..3427).3" Label="param Diagnostic(object[] arguments = null) 739331" />
<Node Id="25007:[3442..3476).3" Label="param Diagnostic(LinePosition? startLocation = null) 739332" />
<Node Id="25007:[3491..3540).3" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 739333" />
<Node Id="25007:[3555..3594).3" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 739334" />
<Node Id="25007:[3609..3634).3" Label="param Diagnostic(bool isSuppressed = false) 739335" />
<Node Id="25007:[3660..3885).11" Label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||
                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||
                         code is int ||
                         code is string); 739336" />
<Node Id="25007:[3901..4266).39" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739337" />
<Node Id="25007:[3901..4266).42" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739338" />
<Node Id="25007:[3901..4266).44" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739339" />
<Node Id="25007:[3901..4266).45" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739340" />
<Node Id="25007:[3901..4266).46" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739341" />
<Node Id="25007:[3901..4266).47" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739342" />
<Node Id="25007:[3901..4266).48" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739343" />
<Node Id="25007:[3901..4266).51" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 739344" />
<Node Id="25007:[3908..4265).3" Label="new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed) 739345" />
<Node Id="25003:[2816..2827).5" Label="param DiagnosticDescription(object code) 739346" />
<Node Id="25003:[2842..2863).5" Label="param DiagnosticDescription(bool isWarningAsError) 739347" />
<Node Id="25003:[2878..2898).5" Label="param DiagnosticDescription(string squiggledText) 739348" />
<Node Id="25003:[2913..2931).5" Label="param DiagnosticDescription(object[] arguments) 739349" />
<Node Id="25003:[2946..2973).5" Label="param DiagnosticDescription(LinePosition? startLocation) 739350" />
<Node Id="25003:[2988..3030).5" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 739351" />
<Node Id="25003:[3045..3076).5" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 739352" />
<Node Id="25003:[3091..3116).5" Label="param DiagnosticDescription(Type errorCodeType = null) 739353" />
<Node Id="25003:[3131..3176).5" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 739354" />
<Node Id="25003:[3191..3238).5" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 739355" />
<Node Id="25003:[3253..3278).5" Label="param DiagnosticDescription(bool isSuppressed = false) 739356" />
<Node Id="25003:[2773..3850).5" Label="param DiagnosticDescription(this) 739357" />
<Node Id="25003:[912..917).5" Label="_code 739358" />
<Node Id="25003:[950..967).5" Label="_isWarningAsError 739359" />
<Node Id="25003:[1000..1013).5" Label="_isSuppressed 739360" />
<Node Id="25003:[1048..1062).5" Label="_squiggledText 739361" />
<Node Id="25003:[1099..1109).5" Label="_arguments 739362" />
<Node Id="25003:[1151..1165).13" Label="_startPosition 739363" />
<Node Id="25003:[1276..1303).5" Label="_argumentOrderDoesNotMatter 739364" />
<Node Id="25003:[1336..1350).5" Label="_errorCodeType 739365" />
<Node Id="25003:[1383..1412).5" Label="_ignoreArgumentsWhenComparing 739366" />
<Node Id="25003:[1460..1479).5" Label="_defaultSeverityOpt 739367" />
<Node Id="25003:[1527..1548).5" Label="_effectiveSeverityOpt 739368" />
<Node Id="25003:[1673..1689).5" Label="_syntaxPredicate 739369" />
<Node Id="25003:[1713..1727).5" Label="_showPredicate 739370" />
<Node Id="25003:[1891..1900).5" Label="_location 739371" />
<Node Id="25003:[1941..1960).5" Label="_argumentsAsStrings 739372" />
<Node Id="25003:[3304..3309).5" Label="_code 739373" />
<Node Id="25003:[3331..3348).5" Label="_isWarningAsError 739374" />
<Node Id="25003:[3382..3396).5" Label="_squiggledText 739375" />
<Node Id="25003:[3427..3437).5" Label="_arguments 739376" />
<Node Id="25003:[3464..3478).5" Label="_startPosition 739377" />
<Node Id="25003:[3509..3525).5" Label="_syntaxPredicate 739378" />
<Node Id="25003:[3562..3589).5" Label="_argumentOrderDoesNotMatter 739379" />
<Node Id="25003:[3633..3682).5" Label="_errorCodeType = errorCodeType ?? code.GetType(); 739380" />
<Node Id="25003:[3633..3647).5" Label="_errorCodeType 739381" />
<Node Id="25003:[3696..3715).5" Label="_defaultSeverityOpt 739382" />
<Node Id="25003:[3751..3772).5" Label="_effectiveSeverityOpt 739383" />
<Node Id="25003:[3810..3823).5" Label="_isSuppressed 739384" />
<Node Id="25004:[19603..19877).26" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 739385" />
<Node Id="28001:[57393..58688).82" Label="var testAssembly = CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ); 739386" />
<Node Id="28001:[58596..58672).1" Label="Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a') 739387" />
<Node Id="28001:[58596..58672).2" Label="Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a') 739388" />
<Node Id="25003:[7407..7432).3" Label="param WithArguments(params object[] arguments) 739389" />
<Node Id="25003:[7364..7671).3" Label="param WithArguments(this) 739390" />
<Node Id="25003:[7458..7660).29" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739391" />
<Node Id="25003:[7458..7660).30" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739392" />
<Node Id="25003:[7458..7660).31" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739393" />
<Node Id="25003:[7458..7660).32" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739394" />
<Node Id="25003:[7458..7660).33" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739395" />
<Node Id="25003:[7458..7660).34" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739396" />
<Node Id="25003:[7458..7660).35" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739397" />
<Node Id="25003:[7458..7660).37" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739398" />
<Node Id="25003:[7458..7660).38" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739399" />
<Node Id="25003:[7458..7660).39" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739400" />
<Node Id="25003:[7458..7660).40" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739401" />
<Node Id="25003:[7465..7659).3" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 739402" />
<Node Id="25003:[2816..2827).6" Label="param DiagnosticDescription(object code) 739403" />
<Node Id="25003:[2842..2863).6" Label="param DiagnosticDescription(bool isWarningAsError) 739404" />
<Node Id="25003:[2878..2898).6" Label="param DiagnosticDescription(string squiggledText) 739405" />
<Node Id="25003:[2913..2931).6" Label="param DiagnosticDescription(object[] arguments) 739406" />
<Node Id="25003:[2946..2973).6" Label="param DiagnosticDescription(LinePosition? startLocation) 739407" />
<Node Id="25003:[2988..3030).6" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 739408" />
<Node Id="25003:[3045..3076).6" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 739409" />
<Node Id="25003:[3091..3116).6" Label="param DiagnosticDescription(Type errorCodeType = null) 739410" />
<Node Id="25003:[3131..3176).6" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 739411" />
<Node Id="25003:[3191..3238).6" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 739412" />
<Node Id="25003:[3253..3278).6" Label="param DiagnosticDescription(bool isSuppressed = false) 739413" />
<Node Id="25003:[2773..3850).6" Label="param DiagnosticDescription(this) 739414" />
<Node Id="25003:[912..917).6" Label="_code 739415" />
<Node Id="25003:[950..967).6" Label="_isWarningAsError 739416" />
<Node Id="25003:[1000..1013).6" Label="_isSuppressed 739417" />
<Node Id="25003:[1048..1062).6" Label="_squiggledText 739418" />
<Node Id="25003:[1099..1109).6" Label="_arguments 739419" />
<Node Id="25003:[1151..1165).16" Label="_startPosition 739420" />
<Node Id="25003:[1276..1303).6" Label="_argumentOrderDoesNotMatter 739421" />
<Node Id="25003:[1336..1350).6" Label="_errorCodeType 739422" />
<Node Id="25003:[1383..1412).6" Label="_ignoreArgumentsWhenComparing 739423" />
<Node Id="25003:[1460..1479).6" Label="_defaultSeverityOpt 739424" />
<Node Id="25003:[1527..1548).6" Label="_effectiveSeverityOpt 739425" />
<Node Id="25003:[1673..1689).6" Label="_syntaxPredicate 739426" />
<Node Id="25003:[1713..1727).6" Label="_showPredicate 739427" />
<Node Id="25003:[1891..1900).6" Label="_location 739428" />
<Node Id="25003:[1941..1960).6" Label="_argumentsAsStrings 739429" />
<Node Id="25003:[3427..3437).6" Label="_arguments 739430" />
<Node Id="25003:[3562..3589).6" Label="_argumentOrderDoesNotMatter 739431" />
<Node Id="28001:[57393..58688).88" Label="var testAssembly = CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ); 739432" />
<Node Id="28001:[57412..58687).1" Label="CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ) 739433" />
<Node Id="28001:[57412..58687).2" Label="CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ) 739434" />
<Node Id="28001:[57412..58687).3" Label="CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ) 739435" />
<Node Id="28001:[57412..58687).4" Label="CreateCompilation(
@'
using ClassAlias = Class1;
public class Test
{
    ClassAlias a = null;
    ClassAlias b = null;
    ClassAlias m() { return null; }
    void m2(ClassAlias p) { }
}', references: new List$MetadataReference$() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })
.VerifyDiagnostics(
    // (2,20): error CS1769: Type 'System.Collections.Generic.List$FooStruct$' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.
    // using ClassAlias = Class1;
    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List$FooStruct$', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),
    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used
    //     ClassAlias b = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),
    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used
    //     ClassAlias a = null;
    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')
            ) 739436" />
<Node Id="25002:[4263..4282).1" Label="param VerifyDiagnostics(this TCompilation c) 739437" />
<Node Id="25002:[4284..4323).1" Label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 739438" />
<Node Id="25002:[4395..4432).1" Label="var diagnostics = c.GetDiagnostics(); 739439" />
<Node Id="10345:[956..960).1" Label="null 739440" />
<Node Id="10345:[975..1032).1" Label="ImmutableDictionary$string, AliasAndUsingDirective$.Empty 739441" />
<Node Id="10345:[1047..1101).1" Label="ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty 739442" />
<Node Id="10345:[1116..1166).1" Label="ImmutableArray$AliasAndExternAliasDirective$.Empty 739443" />
<Node Id="10345:[1181..1185).1" Label="null 739444" />
<Node Id="10345:[930..1186).1" Label="new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 739445" />
<Node Id="10345:[1753..1782).1" Label="param Imports(CSharpCompilation compilation) 739446" />
<Node Id="10345:[1797..1861).1" Label="param Imports(ImmutableDictionary$string, AliasAndUsingDirective$ usingAliases) 739447" />
<Node Id="10345:[1876..1931).1" Label="param Imports(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 739448" />
<Node Id="10345:[1946..1998).1" Label="param Imports(ImmutableArray$AliasAndExternAliasDirective$ externs) 739449" />
<Node Id="10345:[2013..2038).1" Label="param Imports(DiagnosticBag diagnostics) 739450" />
<Node Id="10345:[1723..2412).1" Label="param Imports(this) 739451" />
<Node Id="10345:[1234..1246).1" Label="_compilation 739452" />
<Node Id="10345:[1288..1300).1" Label="_diagnostics 739453" />
<Node Id="10345:[1531..1543).1" Label="UsingAliases 739454" />
<Node Id="10345:[2064..2099).1" Label="Debug.Assert(usingAliases != null); 739455" />
<Node Id="10345:[2064..2099).2" Label="Debug.Assert(usingAliases != null); 739456" />
<Node Id="10345:[2113..2145).1" Label="Debug.Assert(!usings.IsDefault); 739457" />
<Node Id="10345:[2159..2192).1" Label="Debug.Assert(!externs.IsDefault); 739458" />
<Node Id="10345:[2208..2220).1" Label="_compilation 739459" />
<Node Id="10345:[2249..2266).1" Label="this.UsingAliases 739460" />
<Node Id="10345:[2296..2307).1" Label="this.Usings 739461" />
<Node Id="10345:[2331..2343).1" Label="_diagnostics 739462" />
<Node Id="10345:[2372..2390).1" Label="this.ExternAliases 739463" />
<Node Id="10345:[922..1186).1" Label="Empty = new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 739464" />
<Node Id="25002:[4395..4432).3" Label="var diagnostics = c.GetDiagnostics(); 739465" />
<Node Id="10345:[13089..13118).1" Label="param FromGlobalUsings(CSharpCompilation compilation) 739466" />
<Node Id="10345:[13144..13184).1" Label="var usings = compilation.Options.Usings; 739467" />
<Node Id="10345:[13200..13326).1" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 739468" />
<Node Id="10345:[13200..13326).2" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 739469" />
<Node Id="10345:[13200..13326).4" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 739470" />
<Node Id="10345:[13298..13311).1" Label="return Empty; 739471" />
<Node Id="25002:[4395..4432).6" Label="var diagnostics = c.GetDiagnostics(); 739472" />
<Node Id="10345:[24530..24565).1" Label="param Complete(CancellationToken cancellationToken) 739473" />
<Node Id="10345:[24507..26254).1" Label="param Complete(this) 739474" />
<Node Id="10345:[24591..26243).1" Label="while (true)
            {
                cancellationToken.ThrowIfCancellationRequested();
                var incompletePart = _state.NextIncompletePart;
                switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                }

                _state.SpinWaitComplete(incompletePart, cancellationToken);
            } 739475" />
<Node Id="10345:[24636..24685).1" Label="cancellationToken.ThrowIfCancellationRequested(); 739476" />
<Node Id="10345:[24703..24750).1" Label="var incompletePart = _state.NextIncompletePart; 739477" />
<Node Id="10345:[24768..26149).1" Label="switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                } 739478" />
<Node Id="10345:[26025..26098).1" Label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 739479" />
<Node Id="10345:[26169..26228).1" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 739480" />
<Node Id="10345:[26169..26228).2" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 739481" />
<Node Id="10345:[26169..26228).3" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 739482" />
<Node Id="10345:[24932..25204).1" Label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            } 739483" />
<Node Id="10345:[25064..25074).1" Label="Validate() 739484" />
<Node Id="10345:[26266..28173).1" Label="param Validate(this) 739485" />
<Node Id="10345:[26314..26387).1" Label="if (this == Empty)
            {
                return;
            } 739486" />
<Node Id="10345:[26365..26372).1" Label="return; 739487" />
<Node Id="10345:[25064..25075).1" Label="Validate(); 739488" />
<Node Id="10345:[25109..25173).1" Label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 739489" />
<Node Id="10345:[25858..25865).1" Label="return; 739490" />
<Node Id="10298:[471..492).1" Label="param Includes(this BinderFlags self) 739491" />
<Node Id="10298:[494..511).1" Label="param Includes(BinderFlags other) 739492" />
<Node Id="10298:[537..568).1" Label="return (self & other) == other; 739493" />
<Node Id="25002:[4395..4432).10" Label="var diagnostics = c.GetDiagnostics(); 739494" />
<Node Id="10292:[1720..1721).1" Label="0 739495" />
<Node Id="10292:[1704..1721).1" Label="ExternalScope = 0 739496" />
<Node Id="10292:[1768..1769).1" Label="1 739497" />
<Node Id="10292:[1752..1769).1" Label="TopLevelScope = 1 739498" />
<Node Id="10292:[1992..1993).1" Label="2 739499" />
<Node Id="10292:[1963..1993).1" Label="ValueKindInsignificantBits = 2 739500" />
<Node Id="10292:[2032..2129).1" Label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 $$ ValueKindInsignificantBits) - 1)) 739501" />
<Node Id="10306:[388969..389344).1" Label="property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 739502" />
<Node Id="10306:[388923..389344).1" Label="s_isIndexedPropertyWithNonOptionalArguments = property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 739503" />
<Node Id="10306:[389480..389543).1" Label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 739504" />
<Node Id="10306:[389562..389646).1" Label="memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType 739505" />
<Node Id="10306:[389708..389839).1" Label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 739506" />
<Node Id="10306:[389665..389839).1" Label="miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 739507" />
<Node Id="10306:[389438..389840).1" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 739508" />
<Node Id="10306:[389438..389840).17" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 739509" />
<Node Id="10306:[389401..389840).1" Label="s_propertyGroupFormat =
            new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 739510" />
<Node Id="10310:[84494..84496).1" Label="10 739511" />
<Node Id="10310:[84458..84496).1" Label="MaxParameterListsForErrorRecovery = 10 739512" />
<Node Id="10316:[802..830).1" Label="'$$h__TransparentIdentifier' 739513" />
<Node Id="10316:[772..830).1" Label="transparentIdentifierPrefix = '$$h__TransparentIdentifier' 739514" />
<Node Id="10319:[69643..69663).1" Label="s =$ (MethodSymbol)s 739515" />
<Node Id="10319:[69620..69663).1" Label="s_toMethodSymbolFunc = s =$ (MethodSymbol)s 739516" />
<Node Id="10319:[69752..69774).1" Label="s =$ (PropertySymbol)s 739517" />
<Node Id="10319:[69727..69774).1" Label="s_toPropertySymbolFunc = s =$ (PropertySymbol)s 739518" />
<Node Id="10286:[30925..30954).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 739519" />
<Node Id="10286:[30969..31000).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 739520" />
<Node Id="10286:[31015..31040).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 739521" />
<Node Id="10286:[31055..31080).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 739522" />
<Node Id="10286:[31095..31126).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 739523" />
<Node Id="10286:[31152..31210).1" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 739524" />
<Node Id="10286:[31152..31210).2" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 739525" />
<Node Id="10286:[31152..31210).4" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 739526" />
<Node Id="10286:[31152..31210).5" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 739527" />
<Node Id="10286:[31515..31598).1" Label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 739528" />
<Node Id="10286:[31614..31710).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 739529" />
<Node Id="10286:[31614..31710).2" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 739530" />
<Node Id="10286:[31614..31710).3" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 739531" />
<Node Id="10286:[31614..31710).4" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 739532" />
<Node Id="10286:[31614..31710).5" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 739533" />
<Node Id="10286:[31614..31710).6" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 739534" />
<Node Id="10286:[31614..31709).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 739535" />
<Node Id="10319:[80080..80109).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 739536" />
<Node Id="10319:[80111..80133).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 739537" />
<Node Id="10319:[80135..80160).1" Label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 739538" />
<Node Id="10319:[80162..80186).1" Label="param GetWellKnownTypeMember(Location location = null) 739539" />
<Node Id="10319:[80188..80212).1" Label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 739540" />
<Node Id="10319:[80214..80237).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 739541" />
<Node Id="10319:[80263..80315).1" Label="Debug.Assert((syntax != null) ^ (location != null)); 739542" />
<Node Id="10319:[80263..80315).2" Label="Debug.Assert((syntax != null) ^ (location != null)); 739543" />
<Node Id="10319:[80263..80315).4" Label="Debug.Assert((syntax != null) ^ (location != null)); 739544" />
<Node Id="10319:[80263..80315).5" Label="Debug.Assert((syntax != null) ^ (location != null)); 739545" />
<Node Id="10319:[80331..80364).1" Label="DiagnosticInfo useSiteDiagnostic; 739546" />
<Node Id="10319:[80378..80479).1" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 739547" />
<Node Id="10319:[80378..80479).2" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 739548" />
<Node Id="10319:[80378..80479).3" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 739549" />
<Node Id="10319:[80378..80479).4" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 739550" />
<Node Id="10319:[80400..80478).1" Label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 739551" />
<Node Id="10319:[80843..80872).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 739552" />
<Node Id="10319:[80874..80896).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 739553" />
<Node Id="10319:[80898..80931).1" Label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 739554" />
<Node Id="10319:[80933..80956).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 739555" />
<Node Id="10319:[80982..81047).1" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 739556" />
<Node Id="10319:[80982..81047).2" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 739557" />
<Node Id="10319:[80982..81047).3" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 739558" />
<Node Id="10060:[2841..2854).1" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 739559" />
<Node Id="10060:[2856..2875).1" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 739560" />
<Node Id="10060:[2901..2932).1" Label="Debug.Assert(symbol is object); 739561" />
<Node Id="10060:[2948..3467).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 739562" />
<Node Id="10060:[3483..3502).1" Label="isInternal = false; 739563" />
<Node Id="10060:[3553..4223).1" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 739564" />
<Node Id="10060:[4243..4274).1" Label="symbol = symbol.ContainingType; 739565" />
<Node Id="10060:[3518..4328).1" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 739566" />
<Node Id="10060:[4344..4356).1" Label="return true; 739567" />
<Node Id="10319:[80982..81047).8" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 739568" />
<Node Id="10060:[2841..2854).2" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 739569" />
<Node Id="10060:[2856..2875).2" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 739570" />
<Node Id="10060:[2901..2932).3" Label="Debug.Assert(symbol is object); 739571" />
<Node Id="10060:[2948..3467).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 739572" />
<Node Id="10060:[3553..4223).2" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 739573" />
<Node Id="10060:[4243..4274).2" Label="symbol = symbol.ContainingType; 739574" />
<Node Id="10060:[3518..4328).2" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 739575" />
<Node Id="10060:[3553..4223).3" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 739576" />
<Node Id="10319:[80982..81047).15" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 739577" />
<Node Id="10319:[81063..82500).1" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 739578" />
<Node Id="10319:[81063..82500).2" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 739579" />
<Node Id="10319:[81129..81207).1" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 739580" />
<Node Id="10319:[81129..81207).2" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 739581" />
<Node Id="10060:[2841..2854).4" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 739582" />
<Node Id="10060:[2856..2875).4" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 739583" />
<Node Id="10060:[2901..2932).7" Label="Debug.Assert(symbol is object); 739584" />
<Node Id="10060:[2948..3467).4" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 739585" />
<Node Id="10060:[3483..3502).7" Label="isInternal = false; 739586" />
<Node Id="10060:[3553..4223).6" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 739587" />
<Node Id="10060:[4243..4274).6" Label="symbol = symbol.ContainingType; 739588" />
<Node Id="10060:[3518..4328).6" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 739589" />
<Node Id="10060:[2841..2854).5" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 739590" />
<Node Id="10060:[2856..2875).5" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 739591" />
<Node Id="10060:[2901..2932).9" Label="Debug.Assert(symbol is object); 739592" />
<Node Id="10060:[2948..3467).5" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 739593" />
<Node Id="10060:[3553..4223).7" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 739594" />
<Node Id="10060:[4243..4274).7" Label="symbol = symbol.ContainingType; 739595" />
<Node Id="10060:[3518..4328).7" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 739596" />
<Node Id="10319:[81225..82039).1" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 739597" />
<Node Id="10319:[81225..82039).2" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 739598" />
<Node Id="10319:[82516..82536).1" Label="return memberSymbol; 739599" />
<Node Id="10319:[80495..80738).1" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 739600" />
<Node Id="10319:[80495..80738).2" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 739601" />
<Node Id="10319:[80754..80774).1" Label="return memberSymbol; 739602" />
<Node Id="10060:[2841..2854).9" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 739603" />
<Node Id="10060:[2856..2875).9" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 739604" />
<Node Id="10060:[2901..2932).17" Label="Debug.Assert(symbol is object); 739605" />
<Node Id="10060:[2948..3467).9" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 739606" />
<Node Id="10060:[3553..4223).11" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 739607" />
<Node Id="10060:[4243..4274).11" Label="symbol = symbol.ContainingType; 739608" />
<Node Id="10060:[3518..4328).11" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 739609" />
<Node Id="10060:[2841..2854).10" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 739610" />
<Node Id="10060:[2856..2875).10" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 739611" />
<Node Id="10060:[2901..2932).19" Label="Debug.Assert(symbol is object); 739612" />
<Node Id="10060:[2948..3467).10" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 739613" />
<Node Id="10060:[3553..4223).12" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 739614" />
<Node Id="10060:[4243..4274).12" Label="symbol = symbol.ContainingType; 739615" />
<Node Id="10060:[3518..4328).12" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 739616" />
<Node Id="10319:[81225..82039).4" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 739617" />
<Node Id="10319:[81225..82039).5" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 739618" />
<Node Id="10319:[82516..82536).2" Label="return memberSymbol; 739619" />
<Node Id="10319:[80495..80738).5" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 739620" />
<Node Id="10319:[80754..80774).2" Label="return memberSymbol; 739621" />
<Node Id="10319:[81225..82039).7" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 739622" />
<Node Id="10319:[82516..82536).3" Label="return memberSymbol; 739623" />
<Node Id="10319:[80754..80774).3" Label="return memberSymbol; 739624" />
<Node Id="10076:[2308..2337).1" Label="param BinderFactory(CSharpCompilation compilation) 739625" />
<Node Id="10076:[2339..2360).1" Label="param BinderFactory(SyntaxTree syntaxTree) 739626" />
<Node Id="10076:[2362..2386).1" Label="param BinderFactory(bool ignoreAccessibility) 739627" />
<Node Id="10076:[2285..3386).1" Label="param BinderFactory(this) 739628" />
<Node Id="10076:[1715..1727).1" Label="_binderCache 739629" />
<Node Id="10076:[1773..1785).1" Label="_compilation 739630" />
<Node Id="10076:[1824..1835).1" Label="_syntaxTree 739631" />
<Node Id="10076:[1883..1903).1" Label="_buckStopsHereBinder 739632" />
<Node Id="10076:[1936..1956).1" Label="_ignoreAccessibility 739633" />
<Node Id="10076:[2247..2272).1" Label="_binderFactoryVisitorPool 739634" />
<Node Id="10076:[2412..2424).1" Label="_compilation 739635" />
<Node Id="10076:[2453..2464).1" Label="_syntaxTree 739636" />
<Node Id="10076:[2492..2512).1" Label="_ignoreAccessibility 739637" />
<Node Id="10076:[2551..2658).1" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 739638" />
<Node Id="10076:[2551..2658).3" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 739639" />
<Node Id="10076:[2551..2658).5" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 739640" />
<Node Id="10076:[2551..2576).1" Label="_binderFactoryVisitorPool 739641" />
<Node Id="10076:[3236..3299).1" Label="_binderCache = new ConcurrentCache$BinderCacheKey, Binder$(50); 739642" />
<Node Id="10076:[3236..3248).1" Label="_binderCache 739643" />
<Node Id="10076:[3315..3375).1" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 739644" />
<Node Id="10076:[3315..3375).2" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 739645" />
<Node Id="10076:[3338..3374).1" Label="new BuckStopsHereBinder(compilation) 739646" />
<Node Id="10325:[645..674).1" Label="param BuckStopsHereBinder(CSharpCompilation compilation) 739647" />
<Node Id="10325:[616..730).1" Label="param BuckStopsHereBinder(this) 739648" />
<Node Id="10325:[696..707).1" Label="compilation 739649" />
<Node Id="10325:[616..730).2" Label="param BuckStopsHereBinder(this) 739650" />
<Node Id="10286:[939..968).1" Label="param Binder(CSharpCompilation compilation) 739651" />
<Node Id="10286:[923..1219).1" Label="param Binder(this) 739652" />
<Node Id="10286:[726..773).1" Label="internal CSharpCompilation Compilation { get; } 739653" />
<Node Id="10286:[815..820).1" Label="Flags 739654" />
<Node Id="10286:[2975..3015).1" Label="protected internal Binder? Next { get; } 739655" />
<Node Id="10286:[17802..17818).1" Label="_lazyConversions 739656" />
<Node Id="10286:[18200..18223).1" Label="_lazyOverloadResolution 739657" />
<Node Id="10286:[994..1034).1" Label="RoslynDebug.Assert(compilation != null); 739658" />
<Node Id="10286:[994..1034).2" Label="RoslynDebug.Assert(compilation != null); 739659" />
<Node Id="10286:[1048..1096).1" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 739660" />
<Node Id="10286:[1048..1096).2" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 739661" />
<Node Id="10286:[1110..1120).1" Label="this.Flags 739662" />
<Node Id="10286:[1177..1193).1" Label="this.Compilation 739663" />
<Node Id="10076:[3315..3335).1" Label="_buckStopsHereBinder 739664" />
<Node Id="25002:[4395..4432).19" Label="var diagnostics = c.GetDiagnostics(); 739665" />
<Node Id="10076:[7557..7578).1" Label="param GetImportsBinder(CSharpSyntaxNode unit) 739666" />
<Node Id="10076:[7580..7600).1" Label="param GetImportsBinder(bool inUsing = false) 739667" />
<Node Id="10076:[7524..8834).1" Label="param GetImportsBinder(this) 739668" />
<Node Id="10076:[7626..8823).1" Label="switch (unit.Kind())
            {
                case SyntaxKind.NamespaceDeclaration:
                    {
                        BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate();
                        visitor.Initialize(0, null, null);
                        Binder result = visitor.VisitNamespaceDeclaration((NamespaceDeclarationSyntax)unit, unit.SpanStart, inBody: true, inUsing: inUsing);
                        _binderFactoryVisitorPool.Free(visitor);
                        return result;
                    }

                case SyntaxKind.CompilationUnit:
                    // imports are bound by the Script class binder:
                    {
                        BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate();
                        visitor.Initialize(0, null, null);
                        Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript);
                        _binderFactoryVisitorPool.Free(visitor);
                        return result;
                    }

                default:
                    return null;
            } 739669" />
<Node Id="10076:[8351..8419).1" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 739670" />
<Node Id="10076:[8351..8419).3" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 739671" />
<Node Id="10077:[909..930).1" Label="param BinderFactoryVisitor(BinderFactory factory) 739672" />
<Node Id="10077:[879..998).1" Label="param BinderFactoryVisitor(this) 739673" />
<Node Id="10077:[879..998).2" Label="param BinderFactoryVisitor(this) 739674" />
<Node Id="10077:[698..707).1" Label="_position 739675" />
<Node Id="10077:[747..768).1" Label="_memberDeclarationOpt 739676" />
<Node Id="10077:[798..808).1" Label="_memberOpt 739677" />
<Node Id="10077:[854..862).1" Label="_factory 739678" />
<Node Id="10077:[964..972).1" Label="_factory 739679" />
<Node Id="10076:[8351..8419).4" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 739680" />
<Node Id="10076:[8445..8479).1" Label="visitor.Initialize(0, null, null); 739681" />
<Node Id="10076:[8445..8478).1" Label="visitor.Initialize(0, null, null) 739682" />
<Node Id="10077:[1039..1051).1" Label="param Initialize(int position) 739683" />
<Node Id="10077:[1053..1090).1" Label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 739684" />
<Node Id="10077:[1092..1108).1" Label="param Initialize(Symbol memberOpt) 739685" />
<Node Id="10077:[1014..1370).1" Label="param Initialize(this) 739686" />
<Node Id="10077:[1142..1210).1" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 739687" />
<Node Id="10077:[1142..1210).2" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 739688" />
<Node Id="10077:[1142..1210).4" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 739689" />
<Node Id="10077:[1142..1210).5" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 739690" />
<Node Id="10077:[1230..1239).1" Label="_position 739691" />
<Node Id="10077:[1269..1290).1" Label="_memberDeclarationOpt 739692" />
<Node Id="10077:[1332..1342).1" Label="_memberOpt 739693" />
<Node Id="10076:[8505..8617).1" Label="Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript); 739694" />
<Node Id="10076:[8505..8617).2" Label="Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript); 739695" />
<Node Id="10076:[8607..8615).1" Label="InScript 739696" />
<Node Id="10076:[3592..3700).1" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 739697" />
<Node Id="10076:[3628..3685).1" Label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 739698" />
<Node Id="10076:[8505..8617).3" Label="Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript); 739699" />
<Node Id="10076:[8521..8616).1" Label="visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript) 739700" />
<Node Id="10077:[39298..39335).1" Label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 739701" />
<Node Id="10077:[39337..39349).1" Label="param VisitCompilationUnit(bool inUsing) 739702" />
<Node Id="10077:[39351..39364).1" Label="param VisitCompilationUnit(bool inScript) 739703" />
<Node Id="10077:[39261..44091).1" Label="param VisitCompilationUnit(this) 739704" />
<Node Id="10077:[39421..39431).1" Label="syntaxTree 739705" />
<Node Id="10077:[1641..1732).1" Label="get
                {
                    return _factory._syntaxTree;
                } 739706" />
<Node Id="10077:[1685..1713).1" Label="return _factory._syntaxTree; 739707" />
<Node Id="10077:[39398..39590).1" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 739708" />
<Node Id="10077:[39398..39590).2" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 739709" />
<Node Id="10077:[39398..39590).5" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 739710" />
<Node Id="10077:[39626..39633).1" Label="inUsing 739711" />
<Node Id="10077:[39766..39774).1" Label="inScript 739712" />
<Node Id="10077:[39610..39829).1" Label="var extraInfo = inUsing
                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)
                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 739713" />
<Node Id="10077:[39877..39936).1" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 739714" />
<Node Id="10077:[39877..39936).2" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 739715" />
<Node Id="10077:[39887..39935).1" Label="CreateBinderCacheKey(compilationUnit, extraInfo) 739716" />
<Node Id="10077:[44159..44180).1" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 739717" />
<Node Id="10077:[44182..44197).1" Label="param CreateBinderCacheKey(NodeUsage usage) 739718" />
<Node Id="10077:[44231..44317).1" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 739719" />
<Node Id="10077:[44231..44317).3" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 739720" />
<Node Id="10077:[44335..44374).1" Label="return new BinderCacheKey(node, usage); 739721" />
<Node Id="10077:[44335..44374).2" Label="return new BinderCacheKey(node, usage); 739722" />
<Node Id="10077:[44335..44374).3" Label="return new BinderCacheKey(node, usage); 739723" />
<Node Id="10077:[44342..44373).1" Label="new BinderCacheKey(node, usage) 739724" />
<Node Id="10076:[875..902).1" Label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 739725" />
<Node Id="10076:[904..919).1" Label="param BinderCacheKey(NodeUsage usage) 739726" />
<Node Id="10076:[853..1034).1" Label="param BinderCacheKey(this) 739727" />
<Node Id="10076:[953..968).1" Label="this.syntaxNode 739728" />
<Node Id="10076:[1000..1010).1" Label="this.usage 739729" />
<Node Id="10077:[39877..39936).3" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 739730" />
<Node Id="10077:[39956..39970).1" Label="Binder result; 739731" />
<Node Id="10077:[39993..40004).1" Label="binderCache 739732" />
<Node Id="10077:[2066..2158).1" Label="get
                {
                    return _factory._binderCache;
                } 739733" />
<Node Id="10077:[2110..2139).1" Label="return _factory._binderCache; 739734" />
<Node Id="10077:[39988..44042).1" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 739735" />
<Node Id="10077:[39988..44042).2" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 739736" />
<Node Id="10077:[39988..44042).3" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 739737" />
<Node Id="10077:[39988..44042).4" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 739738" />
<Node Id="10077:[39988..44042).5" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 739739" />
<Node Id="10076:[1241..1380).1" Label="param GetHashCode(this) 739740" />
<Node Id="10076:[1307..1365).1" Label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 739741" />
<Node Id="10077:[40084..40108).1" Label="this.buckStopsHereBinder 739742" />
<Node Id="10077:[1843..1943).1" Label="get
                {
                    return _factory._buckStopsHereBinder;
                } 739743" />
<Node Id="10077:[1887..1924).1" Label="return _factory._buckStopsHereBinder; 739744" />
<Node Id="10077:[40075..40109).1" Label="result = this.buckStopsHereBinder; 739745" />
<Node Id="10077:[40133..43967).1" Label="if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    } 739746" />
<Node Id="10077:[43302..43313).1" Label="compilation 739747" />
<Node Id="10077:[1456..1548).1" Label="get
                {
                    return _factory._compilation;
                } 739748" />
<Node Id="10077:[1500..1529).1" Label="return _factory._compilation; 739749" />
<Node Id="10077:[43271..43374).1" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 739750" />
<Node Id="10077:[43271..43374).3" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 739751" />
<Node Id="10077:[43271..43374).4" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 739752" />
<Node Id="10077:[43271..43374).5" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 739753" />
<Node Id="10077:[43271..43374).6" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 739754" />
<Node Id="10077:[43280..43373).1" Label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 739755" />
<Node Id="10346:[1426..1457).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 739756" />
<Node Id="10346:[1459..1470).1" Label="param InContainerBinder(Binder next) 739757" />
<Node Id="10346:[1472..1506).1" Label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 739758" />
<Node Id="10346:[1508..1520).1" Label="param InContainerBinder(bool inUsing) 739759" />
<Node Id="10346:[1399..2435).1" Label="param InContainerBinder(this) 739760" />
<Node Id="10346:[1542..1546).1" Label="next 739761" />
<Node Id="10346:[1399..2435).2" Label="param InContainerBinder(this) 739762" />
<Node Id="10286:[1247..1258).1" Label="param Binder(Binder next) 739763" />
<Node Id="10286:[1231..1520).1" Label="param Binder(this) 739764" />
<Node Id="10286:[1260..1291).1" Label="param Binder(Conversions? conversions = null) 739765" />
<Node Id="10286:[1317..1350).1" Label="RoslynDebug.Assert(next != null); 739766" />
<Node Id="10286:[1317..1350).2" Label="RoslynDebug.Assert(next != null); 739767" />
<Node Id="10286:[1364..1368).1" Label="Next 739768" />
<Node Id="10286:[1390..1400).1" Label="this.Flags 739769" />
<Node Id="10286:[1428..1444).1" Label="this.Compilation 739770" />
<Node Id="10286:[1478..1494).1" Label="_lazyConversions 739771" />
<Node Id="10346:[858..868).1" Label="_container 739772" />
<Node Id="10346:[932..947).1" Label="_computeImports 739773" />
<Node Id="10346:[974..986).1" Label="_lazyImports 739774" />
<Node Id="10346:[1017..1033).1" Label="_lazyImportChain 739775" />
<Node Id="10346:[1074..1100).1" Label="_lazyQuickAttributeChecker 739776" />
<Node Id="10346:[1572..1612).1" Label="Debug.Assert((object)container != null); 739777" />
<Node Id="10346:[1572..1612).2" Label="Debug.Assert((object)container != null); 739778" />
<Node Id="10346:[1626..1666).1" Label="Debug.Assert(declarationSyntax != null); 739779" />
<Node Id="10346:[1626..1666).2" Label="Debug.Assert(declarationSyntax != null); 739780" />
<Node Id="10346:[1682..1692).1" Label="_container 739781" />
<Node Id="10346:[1719..1832).1" Label="_computeImports = basesBeingResolved =$ Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 739782" />
<Node Id="10346:[1719..1734).1" Label="_computeImports 739783" />
<Node Id="10346:[1848..2424).1" Label="if (!inUsing)
            {
                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                }
            } 739784" />
<Node Id="10346:[1894..2409).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                } 739785" />
<Node Id="10346:[1994..2057).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 739786" />
<Node Id="10346:[2079..2092).1" Label="_usingsSyntax 739787" />
<Node Id="10077:[43503..43514).1" Label="compilation 739788" />
<Node Id="10077:[1456..1548).2" Label="get
                {
                    return _factory._compilation;
                } 739789" />
<Node Id="10077:[1500..1529).2" Label="return _factory._compilation; 739790" />
<Node Id="10077:[43402..43944).1" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 739791" />
<Node Id="10077:[43402..43944).3" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 739792" />
<Node Id="10077:[43402..43944).4" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 739793" />
<Node Id="10077:[43991..44002).1" Label="binderCache 739794" />
<Node Id="10077:[2110..2139).2" Label="return _factory._binderCache; 739795" />
<Node Id="10077:[43991..44023).1" Label="binderCache.TryAdd(key, result); 739796" />
<Node Id="10077:[43991..44023).2" Label="binderCache.TryAdd(key, result); 739797" />
<Node Id="10077:[43991..44023).3" Label="binderCache.TryAdd(key, result); 739798" />
<Node Id="10077:[43991..44023).4" Label="binderCache.TryAdd(key, result); 739799" />
<Node Id="10077:[43991..44023).5" Label="binderCache.TryAdd(key, result); 739800" />
<Node Id="10077:[44062..44076).1" Label="return result; 739801" />
<Node Id="10076:[8643..8683).1" Label="_binderFactoryVisitorPool.Free(visitor); 739802" />
<Node Id="10076:[8643..8683).2" Label="_binderFactoryVisitorPool.Free(visitor); 739803" />
<Node Id="10076:[8709..8723).1" Label="return result; 739804" />
<Node Id="25002:[4395..4432).22" Label="var diagnostics = c.GetDiagnostics(); 739805" />
<Node Id="10346:[3460..3499).1" Label="param GetImports(ConsList$TypeSymbol$ basesBeingResolved) 739806" />
<Node Id="10346:[3423..3863).1" Label="param GetImports(this) 739807" />
<Node Id="10346:[3525..3638).1" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 739808" />
<Node Id="10346:[3525..3638).2" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 739809" />
<Node Id="10346:[3654..3816).1" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 739810" />
<Node Id="10346:[3654..3816).2" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 739811" />
<Node Id="10346:[3712..3801).1" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 739812" />
<Node Id="10346:[3712..3801).2" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 739813" />
<Node Id="10346:[3712..3801).4" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 739814" />
<Node Id="10345:[2889..2923).1" Label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 739815" />
<Node Id="10345:[2938..2962).1" Label="param FromSyntax(InContainerBinder binder) 739816" />
<Node Id="10345:[2977..3016).1" Label="param FromSyntax(ConsList$TypeSymbol$ basesBeingResolved) 739817" />
<Node Id="10345:[3031..3043).1" Label="param FromSyntax(bool inUsing) 739818" />
<Node Id="10345:[3069..3118).1" Label="SyntaxList$UsingDirectiveSyntax$ usingDirectives; 739819" />
<Node Id="10345:[3102..3117).1" Label="usingDirectives 739820" />
<Node Id="10345:[3132..3193).1" Label="SyntaxList$ExternAliasDirectiveSyntax$ externAliasDirectives; 739821" />
<Node Id="10345:[3171..3192).1" Label="externAliasDirectives 739822" />
<Node Id="10345:[3207..4163).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
            {
                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                // using directives are not in scope within using directives
                usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : compilationUnit.Usings;
                externAliasDirectives = compilationUnit.Externs;
            }
            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
            {
                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                // using directives are not in scope within using directives
                usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : namespaceDecl.Usings;
                externAliasDirectives = namespaceDecl.Externs;
            }
            else
            {
                return Empty;
            } 739823" />
<Node Id="10345:[3299..3362).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 739824" />
<Node Id="10345:[3476..3483).1" Label="inUsing 739825" />
<Node Id="10345:[3530..3552).1" Label="compilationUnit.Usings 739826" />
<Node Id="10345:[3458..3553).1" Label="usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : compilationUnit.Usings; 739827" />
<Node Id="10345:[3571..3619).1" Label="externAliasDirectives = compilationUnit.Externs; 739828" />
<Node Id="10345:[4179..4307).1" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 739829" />
<Node Id="10345:[4179..4307).2" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 739830" />
<Node Id="10345:[4524..4562).1" Label="var diagnostics = new DiagnosticBag(); 739831" />
<Node Id="10345:[4578..4615).1" Label="var compilation = binder.Compilation; 739832" />
<Node Id="10345:[4631..4714).1" Label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 739833" />
<Node Id="10345:[4631..4714).2" Label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 739834" />
<Node Id="10345:[4631..4714).3" Label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 739835" />
<Node Id="10345:[4651..4713).1" Label="BuildExternAliases(externAliasDirectives, binder, diagnostics) 739836" />
<Node Id="10345:[22236..22285).1" Label="param BuildExternAliases(SyntaxList$ExternAliasDirectiveSyntax$ syntaxList) 739837" />
<Node Id="10345:[22300..22324).1" Label="param BuildExternAliases(InContainerBinder binder) 739838" />
<Node Id="10345:[22339..22364).1" Label="param BuildExternAliases(DiagnosticBag diagnostics) 739839" />
<Node Id="10345:[22390..22441).1" Label="CSharpCompilation compilation = binder.Compilation; 739840" />
<Node Id="10345:[22457..22528).1" Label="var builder = ArrayBuilder$AliasAndExternAliasDirective$.GetInstance(); 739841" />
<Node Id="10345:[22544..23796).1" Label="foreach (ExternAliasDirectiveSyntax aliasSyntax in syntaxList)
            {
                compilation.RecordImport(aliasSyntax);

                // Extern aliases not allowed in interactive submissions:
                if (compilation.IsSubmission)
                {
                    diagnostics.Add(ErrorCode.ERR_ExternAliasNotAllowed, aliasSyntax.Location);
                    continue;
                }

                // some n^2 action, but n should be very small.
                foreach (var existingAlias in builder)
                {
                    if (existingAlias.Alias.Name == aliasSyntax.Identifier.ValueText)
                    {
                        diagnostics.Add(ErrorCode.ERR_DuplicateAlias, existingAlias.Alias.Locations[0], existingAlias.Alias.Name);
                        break;
                    }
                }

                if (aliasSyntax.Identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                {
                    diagnostics.Add(ErrorCode.ERR_GlobalExternAlias, aliasSyntax.Identifier.GetLocation());
                }

                builder.Add(new AliasAndExternAliasDirective(new AliasSymbol(binder, aliasSyntax), aliasSyntax));
            } 739842" />
<Node Id="10345:[22544..23796).2" Label="foreach (ExternAliasDirectiveSyntax aliasSyntax in syntaxList)
            {
                compilation.RecordImport(aliasSyntax);

                // Extern aliases not allowed in interactive submissions:
                if (compilation.IsSubmission)
                {
                    diagnostics.Add(ErrorCode.ERR_ExternAliasNotAllowed, aliasSyntax.Location);
                    continue;
                }

                // some n^2 action, but n should be very small.
                foreach (var existingAlias in builder)
                {
                    if (existingAlias.Alias.Name == aliasSyntax.Identifier.ValueText)
                    {
                        diagnostics.Add(ErrorCode.ERR_DuplicateAlias, existingAlias.Alias.Locations[0], existingAlias.Alias.Name);
                        break;
                    }
                }

                if (aliasSyntax.Identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                {
                    diagnostics.Add(ErrorCode.ERR_GlobalExternAlias, aliasSyntax.Identifier.GetLocation());
                }

                builder.Add(new AliasAndExternAliasDirective(new AliasSymbol(binder, aliasSyntax), aliasSyntax));
            } 739843" />
<Node Id="10345:[23812..23848).1" Label="return builder.ToImmutableAndFree(); 739844" />
<Node Id="10345:[4631..4714).4" Label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 739845" />
<Node Id="10345:[4728..4802).1" Label="var usings = ArrayBuilder$NamespaceOrTypeAndUsingDirective$.GetInstance(); 739846" />
<Node Id="10345:[4816..4896).1" Label="ImmutableDictionary$string, AliasAndUsingDirective$.Builder usingAliases = null; 739847" />
<Node Id="10345:[4910..12753).1" Label="if (usingDirectives.Count $ 0)
            {
                // A binder that contains the extern aliases but not the usings. The resolution of the target of a using directive or alias 
                // should not make use of other peer usings.
                Binder usingsBinder;
                if (declarationSyntax.SyntaxTree.Options.Kind != SourceCodeKind.Regular)
                {
                    usingsBinder = compilation.GetBinderFactory(declarationSyntax.SyntaxTree).GetImportsBinder(declarationSyntax, inUsing: true);
                }
                else
                {
                    var imports = externAliases.Length == 0
                        ? Empty
                        : new Imports(
                            compilation,
                            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
                            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
                            externAliases,
                            diagnostics: null);
                    usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports);
                }

                var uniqueUsings = SpecializedSymbolCollections.GetPooledSymbolHashSetInstance$NamespaceOrTypeSymbol$();

                foreach (var usingDirective in usingDirectives)
                {
                    compilation.RecordImport(usingDirective);

                    if (usingDirective.Alias != null)
                    {
                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;
                        Location location = usingDirective.Alias.Name.Location;

                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                        {
                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);
                        }

                        if (usingDirective.StaticKeyword != default(SyntaxToken))
                        {
                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);
                        }

                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);

                        string identifierValueText = identifier.ValueText;
                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))
                        {
                            // Suppress diagnostics if we're already broken.
                            if (!usingDirective.Name.IsMissing)
                            {
                                // The using alias '{0}' appeared previously in this namespace
                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);
                            }
                        }
                        else
                        {
                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.
                            foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            }

                            if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            }

                            // construct the alias sym with the binder for which we are building imports. That
                            // way the alias target can make use of extern alias definitions.
                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));
                        }
                    }
                    else
                    {
                        if (usingDirective.Name.IsMissing)
                        {
                            //don't try to lookup namespaces inserted by parser error recovery
                            continue;
                        }

                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);
                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;
                        if (imported.Kind == SymbolKind.Namespace)
                        {
                            if (usingDirective.StaticKeyword != default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);
                            }
                            else if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            }
                        }
                        else if (imported.Kind == SymbolKind.NamedType)
                        {
                            if (usingDirective.StaticKeyword == default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                var importedType = (NamedTypeSymbol)imported;
                                if (uniqueUsings.Contains(importedType))
                                {
                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);
                                }
                                else
                                {
                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);

                                    uniqueUsings.Add(importedType);
                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));
                                }
                            }
                        }
                        else if (imported.Kind != SymbolKind.ErrorType)
                        {
                            // Do not report additional error if the symbol itself is erroneous.

                            // error: '$symbol$' is a '$symbol kind$' but is used as 'type or namespace'
                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,
                                usingDirective.Name,
                                imported.GetKindText(),
                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());
                        }
                    }
                }

                uniqueUsings.Free();
            } 739848" />
<Node Id="10345:[4910..12753).2" Label="if (usingDirectives.Count $ 0)
            {
                // A binder that contains the extern aliases but not the usings. The resolution of the target of a using directive or alias 
                // should not make use of other peer usings.
                Binder usingsBinder;
                if (declarationSyntax.SyntaxTree.Options.Kind != SourceCodeKind.Regular)
                {
                    usingsBinder = compilation.GetBinderFactory(declarationSyntax.SyntaxTree).GetImportsBinder(declarationSyntax, inUsing: true);
                }
                else
                {
                    var imports = externAliases.Length == 0
                        ? Empty
                        : new Imports(
                            compilation,
                            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
                            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
                            externAliases,
                            diagnostics: null);
                    usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports);
                }

                var uniqueUsings = SpecializedSymbolCollections.GetPooledSymbolHashSetInstance$NamespaceOrTypeSymbol$();

                foreach (var usingDirective in usingDirectives)
                {
                    compilation.RecordImport(usingDirective);

                    if (usingDirective.Alias != null)
                    {
                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;
                        Location location = usingDirective.Alias.Name.Location;

                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                        {
                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);
                        }

                        if (usingDirective.StaticKeyword != default(SyntaxToken))
                        {
                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);
                        }

                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);

                        string identifierValueText = identifier.ValueText;
                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))
                        {
                            // Suppress diagnostics if we're already broken.
                            if (!usingDirective.Name.IsMissing)
                            {
                                // The using alias '{0}' appeared previously in this namespace
                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);
                            }
                        }
                        else
                        {
                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.
                            foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            }

                            if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            }

                            // construct the alias sym with the binder for which we are building imports. That
                            // way the alias target can make use of extern alias definitions.
                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));
                        }
                    }
                    else
                    {
                        if (usingDirective.Name.IsMissing)
                        {
                            //don't try to lookup namespaces inserted by parser error recovery
                            continue;
                        }

                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);
                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;
                        if (imported.Kind == SymbolKind.Namespace)
                        {
                            if (usingDirective.StaticKeyword != default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);
                            }
                            else if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            }
                        }
                        else if (imported.Kind == SymbolKind.NamedType)
                        {
                            if (usingDirective.StaticKeyword == default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                var importedType = (NamedTypeSymbol)imported;
                                if (uniqueUsings.Contains(importedType))
                                {
                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);
                                }
                                else
                                {
                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);

                                    uniqueUsings.Add(importedType);
                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));
                                }
                            }
                        }
                        else if (imported.Kind != SymbolKind.ErrorType)
                        {
                            // Do not report additional error if the symbol itself is erroneous.

                            // error: '$symbol$' is a '$symbol kind$' but is used as 'type or namespace'
                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,
                                usingDirective.Name,
                                imported.GetKindText(),
                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());
                        }
                    }
                }

                uniqueUsings.Free();
            } 739849" />
<Node Id="10345:[5177..5197).1" Label="Binder usingsBinder; 739850" />
<Node Id="10345:[5215..6073).1" Label="if (declarationSyntax.SyntaxTree.Options.Kind != SourceCodeKind.Regular)
                {
                    usingsBinder = compilation.GetBinderFactory(declarationSyntax.SyntaxTree).GetImportsBinder(declarationSyntax, inUsing: true);
                }
                else
                {
                    var imports = externAliases.Length == 0
                        ? Empty
                        : new Imports(
                            compilation,
                            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
                            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
                            externAliases,
                            diagnostics: null);
                    usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports);
                } 739851" />
<Node Id="10345:[5535..5955).1" Label="var imports = externAliases.Length == 0
                        ? Empty
                        : new Imports(
                            compilation,
                            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
                            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
                            externAliases,
                            diagnostics: null); 739852" />
<Node Id="10345:[5535..5955).2" Label="var imports = externAliases.Length == 0
                        ? Empty
                        : new Imports(
                            compilation,
                            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
                            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
                            externAliases,
                            diagnostics: null); 739853" />
<Node Id="10345:[5549..5574).1" Label="externAliases.Length == 0 739854" />
<Node Id="10345:[6014..6030).1" Label="binder.Container 739855" />
<Node Id="10346:[3331..3400).1" Label="get
            {
                return _container;
            } 739856" />
<Node Id="10346:[3367..3385).1" Label="return _container; 739857" />
<Node Id="10345:[5977..6054).1" Label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 739858" />
<Node Id="10345:[5977..6054).3" Label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 739859" />
<Node Id="10345:[5977..6054).4" Label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 739860" />
<Node Id="10345:[5977..6054).5" Label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 739861" />
<Node Id="10345:[5992..6053).1" Label="new InContainerBinder(binder.Container, binder.Next, imports) 739862" />
<Node Id="10346:[2571..2602).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 739863" />
<Node Id="10346:[2604..2615).1" Label="param InContainerBinder(Binder next) 739864" />
<Node Id="10346:[2617..2639).1" Label="param InContainerBinder(Imports imports = null) 739865" />
<Node Id="10346:[2544..2854).1" Label="param InContainerBinder(this) 739866" />
<Node Id="10346:[2661..2665).1" Label="next 739867" />
<Node Id="10346:[2544..2854).2" Label="param InContainerBinder(this) 739868" />
<Node Id="10286:[1247..1258).2" Label="param Binder(Binder next) 739869" />
<Node Id="10286:[1317..1350).5" Label="RoslynDebug.Assert(next != null); 739870" />
<Node Id="10286:[1317..1350).6" Label="RoslynDebug.Assert(next != null); 739871" />
<Node Id="10346:[858..868).2" Label="_container 739872" />
<Node Id="10346:[932..947).2" Label="_computeImports 739873" />
<Node Id="10346:[2691..2750).1" Label="Debug.Assert((object)container != null || imports != null); 739874" />
<Node Id="10346:[2691..2750).2" Label="Debug.Assert((object)container != null || imports != null); 739875" />
<Node Id="10346:[2766..2776).1" Label="_container 739876" />
<Node Id="10346:[2803..2843).1" Label="_lazyImports = imports ?? Imports.Empty; 739877" />
<Node Id="10346:[2803..2815).1" Label="_lazyImports 739878" />
<Node Id="10345:[6093..6197).1" Label="var uniqueUsings = SpecializedSymbolCollections.GetPooledSymbolHashSetInstance$NamespaceOrTypeSymbol$(); 739879" />
<Node Id="10345:[6217..12698).1" Label="foreach (var usingDirective in usingDirectives)
                {
                    compilation.RecordImport(usingDirective);

                    if (usingDirective.Alias != null)
                    {
                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;
                        Location location = usingDirective.Alias.Name.Location;

                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                        {
                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);
                        }

                        if (usingDirective.StaticKeyword != default(SyntaxToken))
                        {
                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);
                        }

                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);

                        string identifierValueText = identifier.ValueText;
                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))
                        {
                            // Suppress diagnostics if we're already broken.
                            if (!usingDirective.Name.IsMissing)
                            {
                                // The using alias '{0}' appeared previously in this namespace
                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);
                            }
                        }
                        else
                        {
                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.
                            foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            }

                            if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            }

                            // construct the alias sym with the binder for which we are building imports. That
                            // way the alias target can make use of extern alias definitions.
                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));
                        }
                    }
                    else
                    {
                        if (usingDirective.Name.IsMissing)
                        {
                            //don't try to lookup namespaces inserted by parser error recovery
                            continue;
                        }

                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);
                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;
                        if (imported.Kind == SymbolKind.Namespace)
                        {
                            if (usingDirective.StaticKeyword != default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);
                            }
                            else if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            }
                        }
                        else if (imported.Kind == SymbolKind.NamedType)
                        {
                            if (usingDirective.StaticKeyword == default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                var importedType = (NamedTypeSymbol)imported;
                                if (uniqueUsings.Contains(importedType))
                                {
                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);
                                }
                                else
                                {
                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);

                                    uniqueUsings.Add(importedType);
                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));
                                }
                            }
                        }
                        else if (imported.Kind != SymbolKind.ErrorType)
                        {
                            // Do not report additional error if the symbol itself is erroneous.

                            // error: '$symbol$' is a '$symbol kind$' but is used as 'type or namespace'
                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,
                                usingDirective.Name,
                                imported.GetKindText(),
                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());
                        }
                    }
                } 739880" />
<Node Id="10345:[6305..6346).1" Label="compilation.RecordImport(usingDirective); 739881" />
<Node Id="10345:[6305..6346).2" Label="compilation.RecordImport(usingDirective); 739882" />
<Node Id="10345:[6370..12679).1" Label="if (usingDirective.Alias != null)
                    {
                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;
                        Location location = usingDirective.Alias.Name.Location;

                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                        {
                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);
                        }

                        if (usingDirective.StaticKeyword != default(SyntaxToken))
                        {
                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);
                        }

                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);

                        string identifierValueText = identifier.ValueText;
                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))
                        {
                            // Suppress diagnostics if we're already broken.
                            if (!usingDirective.Name.IsMissing)
                            {
                                // The using alias '{0}' appeared previously in this namespace
                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);
                            }
                        }
                        else
                        {
                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.
                            foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            }

                            if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            }

                            // construct the alias sym with the binder for which we are building imports. That
                            // way the alias target can make use of extern alias definitions.
                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));
                        }
                    }
                    else
                    {
                        if (usingDirective.Name.IsMissing)
                        {
                            //don't try to lookup namespaces inserted by parser error recovery
                            continue;
                        }

                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);
                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;
                        if (imported.Kind == SymbolKind.Namespace)
                        {
                            if (usingDirective.StaticKeyword != default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);
                            }
                            else if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            }
                        }
                        else if (imported.Kind == SymbolKind.NamedType)
                        {
                            if (usingDirective.StaticKeyword == default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                var importedType = (NamedTypeSymbol)imported;
                                if (uniqueUsings.Contains(importedType))
                                {
                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);
                                }
                                else
                                {
                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);

                                    uniqueUsings.Add(importedType);
                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));
                                }
                            }
                        }
                        else if (imported.Kind != SymbolKind.ErrorType)
                        {
                            // Do not report additional error if the symbol itself is erroneous.

                            // error: '$symbol$' is a '$symbol kind$' but is used as 'type or namespace'
                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,
                                usingDirective.Name,
                                imported.GetKindText(),
                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());
                        }
                    } 739883" />
<Node Id="10345:[6370..12679).2" Label="if (usingDirective.Alias != null)
                    {
                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;
                        Location location = usingDirective.Alias.Name.Location;

                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                        {
                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);
                        }

                        if (usingDirective.StaticKeyword != default(SyntaxToken))
                        {
                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);
                        }

                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);

                        string identifierValueText = identifier.ValueText;
                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))
                        {
                            // Suppress diagnostics if we're already broken.
                            if (!usingDirective.Name.IsMissing)
                            {
                                // The using alias '{0}' appeared previously in this namespace
                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);
                            }
                        }
                        else
                        {
                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.
                            foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            }

                            if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            }

                            // construct the alias sym with the binder for which we are building imports. That
                            // way the alias target can make use of extern alias definitions.
                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));
                        }
                    }
                    else
                    {
                        if (usingDirective.Name.IsMissing)
                        {
                            //don't try to lookup namespaces inserted by parser error recovery
                            continue;
                        }

                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);
                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;
                        if (imported.Kind == SymbolKind.Namespace)
                        {
                            if (usingDirective.StaticKeyword != default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);
                            }
                            else if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            }
                        }
                        else if (imported.Kind == SymbolKind.NamedType)
                        {
                            if (usingDirective.StaticKeyword == default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                var importedType = (NamedTypeSymbol)imported;
                                if (uniqueUsings.Contains(importedType))
                                {
                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);
                                }
                                else
                                {
                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);

                                    uniqueUsings.Add(importedType);
                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));
                                }
                            }
                        }
                        else if (imported.Kind != SymbolKind.ErrorType)
                        {
                            // Do not report additional error if the symbol itself is erroneous.

                            // error: '$symbol$' is a '$symbol kind$' but is used as 'type or namespace'
                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,
                                usingDirective.Name,
                                imported.GetKindText(),
                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());
                        }
                    } 739884" />
<Node Id="10345:[6452..6514).1" Label="SyntaxToken identifier = usingDirective.Alias.Name.Identifier; 739885" />
<Node Id="10345:[6540..6595).1" Label="Location location = usingDirective.Alias.Name.Location; 739886" />
<Node Id="10345:[6623..6824).1" Label="if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                        {
                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);
                        } 739887" />
<Node Id="10345:[6852..7046).1" Label="if (usingDirective.StaticKeyword != default(SyntaxToken))
                        {
                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);
                        } 739888" />
<Node Id="10345:[6852..7046).2" Label="if (usingDirective.StaticKeyword != default(SyntaxToken))
                        {
                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);
                        } 739889" />
<Node Id="10345:[7074..7181).1" Label="SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location); 739890" />
<Node Id="10345:[7074..7181).2" Label="SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location); 739891" />
<Node Id="10345:[7074..7181).3" Label="SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location); 739892" />
<Node Id="10345:[7074..7181).4" Label="SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location); 739893" />
<Node Id="10345:[7074..7181).5" Label="SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location); 739894" />
<Node Id="10345:[7209..7259).1" Label="string identifierValueText = identifier.ValueText; 739895" />
<Node Id="10345:[7285..9219).1" Label="if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))
                        {
                            // Suppress diagnostics if we're already broken.
                            if (!usingDirective.Name.IsMissing)
                            {
                                // The using alias '{0}' appeared previously in this namespace
                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);
                            }
                        }
                        else
                        {
                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.
                            foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            }

                            if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            }

                            // construct the alias sym with the binder for which we are building imports. That
                            // way the alias target can make use of extern alias definitions.
                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));
                        } 739896" />
<Node Id="10345:[7285..9219).2" Label="if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))
                        {
                            // Suppress diagnostics if we're already broken.
                            if (!usingDirective.Name.IsMissing)
                            {
                                // The using alias '{0}' appeared previously in this namespace
                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);
                            }
                        }
                        else
                        {
                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.
                            foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            }

                            if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            }

                            // construct the alias sym with the binder for which we are building imports. That
                            // way the alias target can make use of extern alias definitions.
                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));
                        } 739897" />
<Node Id="10345:[8029..8561).1" Label="foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            } 739898" />
<Node Id="10345:[8593..8797).1" Label="if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            } 739899" />
<Node Id="10345:[8683..8766).1" Label="usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$(); 739900" />
<Node Id="10345:[9036..9192).1" Label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739901" />
<Node Id="10345:[9036..9192).2" Label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739902" />
<Node Id="10345:[9036..9192).3" Label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739903" />
<Node Id="10345:[9036..9192).5" Label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739904" />
<Node Id="10345:[9036..9192).7" Label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739905" />
<Node Id="10345:[9036..9192).8" Label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739906" />
<Node Id="10345:[9074..9190).1" Label="new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective) 739907" />
<Node Id="10285:[563..580).1" Label="param AliasAndUsingDirective(AliasSymbol alias) 739908" />
<Node Id="10285:[582..617).1" Label="param AliasAndUsingDirective(UsingDirectiveSyntax usingDirective) 739909" />
<Node Id="10285:[533..724).1" Label="param AliasAndUsingDirective(this) 739910" />
<Node Id="10285:[643..653).1" Label="this.Alias 739911" />
<Node Id="10285:[676..695).1" Label="this.UsingDirective 739912" />
<Node Id="10345:[9036..9192).10" Label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739913" />
<Node Id="10345:[12718..12738).1" Label="uniqueUsings.Free(); 739914" />
<Node Id="10345:[12769..12877).1" Label="if (diagnostics.IsEmptyWithoutResolution)
            {
                diagnostics = null;
            } 739915" />
<Node Id="10345:[12843..12862).1" Label="diagnostics = null; 739916" />
<Node Id="10345:[12893..13027).1" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739917" />
<Node Id="10345:[12893..13027).2" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739918" />
<Node Id="10345:[12893..13027).3" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739919" />
<Node Id="10345:[12893..13027).5" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739920" />
<Node Id="10345:[12893..13027).7" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739921" />
<Node Id="10345:[12893..13027).8" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739922" />
<Node Id="10345:[12893..13027).9" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739923" />
<Node Id="10345:[12900..13026).1" Label="new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics) 739924" />
<Node Id="10345:[1753..1782).2" Label="param Imports(CSharpCompilation compilation) 739925" />
<Node Id="10345:[1797..1861).2" Label="param Imports(ImmutableDictionary$string, AliasAndUsingDirective$ usingAliases) 739926" />
<Node Id="10345:[1876..1931).2" Label="param Imports(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 739927" />
<Node Id="10345:[1946..1998).2" Label="param Imports(ImmutableArray$AliasAndExternAliasDirective$ externs) 739928" />
<Node Id="10345:[2013..2038).2" Label="param Imports(DiagnosticBag diagnostics) 739929" />
<Node Id="10345:[1723..2412).2" Label="param Imports(this) 739930" />
<Node Id="10345:[1234..1246).2" Label="_compilation 739931" />
<Node Id="10345:[1288..1300).2" Label="_diagnostics 739932" />
<Node Id="10345:[1531..1543).2" Label="UsingAliases 739933" />
<Node Id="10345:[2064..2099).5" Label="Debug.Assert(usingAliases != null); 739934" />
<Node Id="10345:[2064..2099).6" Label="Debug.Assert(usingAliases != null); 739935" />
<Node Id="10345:[2113..2145).3" Label="Debug.Assert(!usings.IsDefault); 739936" />
<Node Id="10345:[2159..2192).3" Label="Debug.Assert(!externs.IsDefault); 739937" />
<Node Id="10346:[3712..3801).6" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 739938" />
<Node Id="10346:[3832..3852).1" Label="return _lazyImports; 739939" />
<Node Id="10345:[25064..25074).2" Label="Validate() 739940" />
<Node Id="10345:[26266..28173).2" Label="param Validate(this) 739941" />
<Node Id="10345:[26314..26387).3" Label="if (this == Empty)
            {
                return;
            } 739942" />
<Node Id="10345:[26403..26475).1" Label="DiagnosticBag semanticDiagnostics = _compilation.DeclarationDiagnostics; 739943" />
<Node Id="10345:[26673..26726).1" Label="alias.Alias.GetAliasTarget(basesBeingResolved: null); 739944" />
<Node Id="10307:[2552..2569).1" Label="param WithAdditionalFlags(BinderFlags flags) 739945" />
<Node Id="10307:[2516..2720).1" Label="param WithAdditionalFlags(this) 739946" />
<Node Id="10307:[2595..2709).1" Label="return this.Flags.Includes(flags)
                ? this
                : new Binder(this, this.Flags | flags); 739947" />
<Node Id="10307:[2595..2709).2" Label="return this.Flags.Includes(flags)
                ? this
                : new Binder(this, this.Flags | flags); 739948" />
<Node Id="10307:[2602..2628).1" Label="this.Flags.Includes(flags) 739949" />
<Node Id="10298:[471..492).6" Label="param Includes(this BinderFlags self) 739950" />
<Node Id="10298:[494..511).6" Label="param Includes(BinderFlags other) 739951" />
<Node Id="10298:[537..568).16" Label="return (self & other) == other; 739952" />
<Node Id="10307:[2672..2708).1" Label="new Binder(this, this.Flags | flags) 739953" />
<Node Id="10286:[1549..1560).1" Label="param Binder(Binder next) 739954" />
<Node Id="10286:[1562..1579).1" Label="param Binder(BinderFlags flags) 739955" />
<Node Id="10286:[1532..2083).1" Label="param Binder(this) 739956" />
<Node Id="10286:[1605..1638).1" Label="RoslynDebug.Assert(next != null); 739957" />
<Node Id="10286:[1605..1638).2" Label="RoslynDebug.Assert(next != null); 739958" />
<Node Id="10286:[1688..1781).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 739959" />
<Node Id="10286:[1688..1781).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 739960" />
<Node Id="10286:[1708..1779).1" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 739961" />
<Node Id="10298:[471..492).7" Label="param Includes(this BinderFlags self) 739962" />
<Node Id="10298:[494..511).7" Label="param Includes(BinderFlags other) 739963" />
<Node Id="10286:[1820..1963).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 739964" />
<Node Id="10286:[1820..1963).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 739965" />
<Node Id="10286:[1840..1888).1" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 739966" />
<Node Id="10298:[471..492).8" Label="param Includes(this BinderFlags self) 739967" />
<Node Id="10298:[494..511).8" Label="param Includes(BinderFlags other) 739968" />
<Node Id="10286:[1977..1981).1" Label="Next 739969" />
<Node Id="10286:[2003..2013).1" Label="this.Flags 739970" />
<Node Id="10286:[2036..2052).1" Label="this.Compilation 739971" />
<Node Id="10345:[26673..26726).6" Label="alias.Alias.GetAliasTarget(basesBeingResolved: null); 739972" />
<Node Id="10319:[17798..17821).1" Label="param BindNamespaceOrTypeSymbol(ExpressionSyntax syntax) 739973" />
<Node Id="10319:[17823..17848).1" Label="param BindNamespaceOrTypeSymbol(DiagnosticBag diagnostics) 739974" />
<Node Id="10319:[17850..17896).1" Label="param BindNamespaceOrTypeSymbol(ConsList$TypeSymbol$ basesBeingResolved = null) 739975" />
<Node Id="10319:[17719..18035).1" Label="param BindNamespaceOrTypeSymbol(this) 739976" />
<Node Id="10319:[17922..18024).1" Label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 739977" />
<Node Id="10319:[17922..18024).2" Label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 739978" />
<Node Id="10319:[17922..18024).3" Label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 739979" />
<Node Id="10319:[17922..18024).4" Label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 739980" />
<Node Id="10319:[17922..18024).5" Label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 739981" />
<Node Id="10319:[17929..18023).1" Label="BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null) 739982" />
<Node Id="10319:[18431..18454).1" Label="param BindNamespaceOrTypeSymbol(ExpressionSyntax syntax) 739983" />
<Node Id="10319:[18456..18481).1" Label="param BindNamespaceOrTypeSymbol(DiagnosticBag diagnostics) 739984" />
<Node Id="10319:[18483..18522).1" Label="param BindNamespaceOrTypeSymbol(ConsList$TypeSymbol$ basesBeingResolved) 739985" />
<Node Id="10319:[18524..18555).1" Label="param BindNamespaceOrTypeSymbol(bool suppressUseSiteDiagnostics) 739986" />
<Node Id="10319:[18300..18837).1" Label="param BindNamespaceOrTypeSymbol(this) 739987" />
<Node Id="10319:[18581..18696).1" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 739988" />
<Node Id="10319:[18581..18696).2" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 739989" />
<Node Id="10319:[18581..18696).3" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 739990" />
<Node Id="10319:[18581..18696).4" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 739991" />
<Node Id="10319:[18594..18695).1" Label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 739992" />
<Node Id="10319:[20002..20025).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 739993" />
<Node Id="10319:[20027..20052).1" Label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 739994" />
<Node Id="10319:[20054..20093).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 739995" />
<Node Id="10319:[20095..20126).1" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 739996" />
<Node Id="10319:[19916..30085).1" Label="param BindNamespaceOrTypeOrAliasSymbol(this) 739997" />
<Node Id="10319:[20152..24647).1" Label="switch (syntax.Kind())
            {
                case SyntaxKind.NullableType:
                    return bindNullable(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.PredefinedType:
                    return bindPredefined(syntax, diagnostics);

                case SyntaxKind.IdentifierName:
                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);

                case SyntaxKind.GenericName:
                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);

                case SyntaxKind.AliasQualifiedName:
                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);

                case SyntaxKind.QualifiedName:
                    {
                        var node = (QualifiedNameSyntax)syntax;
                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.SimpleMemberAccessExpression:
                    {
                        var node = (MemberAccessExpressionSyntax)syntax;
                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.ArrayType:
                    {
                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);
                    }

                case SyntaxKind.PointerType:
                    return bindPointer(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.FunctionPointerType:
                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;
                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)
                    {
                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;
                        var asterisk = functionPointerTypeSyntax.AsteriskToken;
                        RoslynDebug.Assert(@delegate.SyntaxTree is object);
                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));
                    }

                    return TypeWithAnnotations.Create(
                        FunctionPointerTypeSymbol.CreateFromSource(
                            functionPointerTypeSyntax,
                            this,
                            diagnostics,
                            basesBeingResolved,
                            suppressUseSiteDiagnostics));

                case SyntaxKind.OmittedTypeArgument:
                    {
                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);
                    }

                case SyntaxKind.TupleType:
                    {
                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;
                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));
                    }

                case SyntaxKind.RefType:
                    {
                        // ref needs to be handled by the caller
                        var refTypeSyntax = (RefTypeSyntax)syntax;
                        var refToken = refTypeSyntax.RefKeyword;
                        if (!syntax.HasErrors)
                        {
                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());
                        }

                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                default:
                    {
                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind
                        // is attempted to be bound as a type pattern.
                        return createErrorType(syntax);
                    }
            } 739998" />
<Node Id="10319:[20508..20675).1" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 739999" />
<Node Id="10319:[20508..20675).2" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 740000" />
<Node Id="10319:[20508..20675).3" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 740001" />
<Node Id="10319:[20508..20675).4" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 740002" />
<Node Id="10319:[20508..20675).5" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 740003" />
<Node Id="10319:[20515..20674).1" Label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 740004" />
<Node Id="10319:[41849..41874).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 740005" />
<Node Id="10319:[41889..41914).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 740006" />
<Node Id="10319:[41929..41968).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 740007" />
<Node Id="10319:[41983..42014).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 740008" />
<Node Id="10319:[42029..42063).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 740009" />
<Node Id="10319:[41732..45579).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 740010" />
<Node Id="10319:[42089..42141).1" Label="var identifierValueText = node.Identifier.ValueText; 740011" />
<Node Id="10319:[42478..42805).1" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 740012" />
<Node Id="10319:[42821..42938).1" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 740013" />
<Node Id="10319:[42821..42938).2" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 740014" />
<Node Id="10319:[42821..42938).3" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 740015" />
<Node Id="10319:[42821..42938).4" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 740016" />
<Node Id="10319:[42821..42938).6" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 740017" />
<Node Id="10319:[42839..42937).1" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 740018" />
<Node Id="10319:[63849..63870).1" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 740019" />
<Node Id="10319:[63885..63919).1" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 740020" />
<Node Id="10319:[63934..63945).1" Label="param CreateErrorIfLookupOnTypeParameter(string name) 740021" />
<Node Id="10319:[63960..63969).1" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 740022" />
<Node Id="10319:[63984..64009).1" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 740023" />
<Node Id="10319:[63768..64484).1" Label="param CreateErrorIfLookupOnTypeParameter(this) 740024" />
<Node Id="10319:[64035..64445).1" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 740025" />
<Node Id="10319:[64035..64445).2" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 740026" />
<Node Id="10319:[64461..64473).1" Label="return null; 740027" />
<Node Id="10319:[42821..42938).7" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 740028" />
<Node Id="10319:[42952..43079).1" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 740029" />
<Node Id="10319:[42952..43079).2" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 740030" />
<Node Id="10354:[10826..10838).1" Label="CreatePool() 740031" />
<Node Id="10354:[10975..11012).1" Label="ObjectPool$LookupResult$ pool = null; 740032" />
<Node Id="10354:[11026..11097).1" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 740033" />
<Node Id="10354:[11026..11097).3" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 740034" />
<Node Id="10354:[11142..11154).1" Label="return pool; 740035" />
<Node Id="10354:[10809..10838).1" Label="s_poolInstance = CreatePool() 740036" />
<Node Id="10319:[43108..43134).1" Label="LookupResult.GetInstance() 740037" />
<Node Id="10354:[11244..11285).1" Label="var instance = s_poolInstance.Allocate(); 740038" />
<Node Id="10354:[11244..11285).2" Label="var instance = s_poolInstance.Allocate(); 740039" />
<Node Id="10354:[11244..11285).3" Label="var instance = s_poolInstance.Allocate(); 740040" />
<Node Id="10354:[3419..3448).1" Label="param LookupResult(ObjectPool$LookupResult$ pool) 740041" />
<Node Id="10354:[3398..3626).1" Label="param LookupResult(this) 740042" />
<Node Id="10354:[3068..3073).1" Label="_kind 740043" />
<Node Id="10354:[3200..3211).1" Label="_symbolList 740044" />
<Node Id="10354:[3319..3325).1" Label="_error 740045" />
<Node Id="10354:[3380..3385).1" Label="_pool 740046" />
<Node Id="10354:[3474..3479).1" Label="_pool 740047" />
<Node Id="10354:[3501..3506).1" Label="_kind 740048" />
<Node Id="10354:[3546..3587).1" Label="_symbolList = new ArrayBuilder$Symbol$(); 740049" />
<Node Id="10354:[3546..3557).1" Label="_symbolList 740050" />
<Node Id="10354:[3601..3615).1" Label="_error = null; 740051" />
<Node Id="10354:[3601..3607).1" Label="_error 740052" />
<Node Id="10354:[11244..11285).4" Label="var instance = s_poolInstance.Allocate(); 740053" />
<Node Id="10354:[11312..11328).1" Label="instance.IsClear 740054" />
<Node Id="10354:[3684..3818).1" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 740055" />
<Node Id="10354:[3720..3803).1" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740056" />
<Node Id="10354:[3720..3803).2" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740057" />
<Node Id="10354:[3720..3803).3" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740058" />
<Node Id="10354:[11299..11330).1" Label="Debug.Assert(instance.IsClear); 740059" />
<Node Id="10354:[11344..11360).1" Label="return instance; 740060" />
<Node Id="10319:[43095..43135).1" Label="var result = LookupResult.GetInstance(); 740061" />
<Node Id="10319:[43149..43246).1" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 740062" />
<Node Id="10319:[43149..43246).2" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 740063" />
<Node Id="10319:[43173..43245).1" Label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 740064" />
<Node Id="10319:[50313..50328).1" Label="param GetSimpleNameLookupOptions(NameSyntax node) 740065" />
<Node Id="10319:[50330..50355).1" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 740066" />
<Node Id="10319:[50381..51340).1" Label="if (SyntaxFacts.IsAttributeName(node))
            {
                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.
                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.
                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity
                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled
                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only
                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.

                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;
            }
            else
            {
                return LookupOptions.NamespacesOrTypesOnly;
            } 740067" />
<Node Id="10319:[51282..51325).1" Label="return LookupOptions.NamespacesOrTypesOnly; 740068" />
<Node Id="10319:[43262..43312).1" Label="HashSet$DiagnosticInfo$ useSiteDiagnostics = null; 740069" />
<Node Id="10319:[43326..43490).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740070" />
<Node Id="10319:[43326..43490).2" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740071" />
<Node Id="10319:[43326..43490).3" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740072" />
<Node Id="10319:[43326..43490).4" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740073" />
<Node Id="10319:[43326..43490).6" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740074" />
<Node Id="10319:[43326..43490).7" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740075" />
<Node Id="10319:[43326..43490).10" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740076" />
<Node Id="10319:[43326..43489).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 740077" />
<Node Id="10312:[994..1013).1" Label="param LookupSymbolsSimpleName(LookupResult result) 740078" />
<Node Id="10312:[1028..1062).1" Label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 740079" />
<Node Id="10312:[1077..1093).1" Label="param LookupSymbolsSimpleName(string plainName) 740080" />
<Node Id="10312:[1108..1117).1" Label="param LookupSymbolsSimpleName(int arity) 740081" />
<Node Id="10312:[1132..1171).1" Label="param LookupSymbolsSimpleName(ConsList$TypeSymbol$ basesBeingResolved) 740082" />
<Node Id="10312:[1186..1207).1" Label="param LookupSymbolsSimpleName(LookupOptions options) 740083" />
<Node Id="10312:[1222..1235).1" Label="param LookupSymbolsSimpleName(bool diagnose) 740084" />
<Node Id="10312:[1250..1296).1" Label="param LookupSymbolsSimpleName(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740085" />
<Node Id="10312:[942..1750).1" Label="param LookupSymbolsSimpleName(this) 740086" />
<Node Id="10312:[1322..1739).1" Label="if (options.IsAttributeTypeLookup())
            {
                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 740087" />
<Node Id="10312:[1326..1357).1" Label="options.IsAttributeTypeLookup() 740088" />
<Node Id="10353:[7504..7530).1" Label="param IsAttributeTypeLookup(this LookupOptions options) 740089" />
<Node Id="10353:[7556..7642).1" Label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 740090" />
<Node Id="10312:[1585..1724).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740091" />
<Node Id="10312:[1585..1724).2" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740092" />
<Node Id="10312:[1585..1724).3" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740093" />
<Node Id="10312:[1585..1724).4" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740094" />
<Node Id="10312:[1585..1724).5" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740095" />
<Node Id="10312:[1585..1724).6" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740096" />
<Node Id="10312:[1585..1724).7" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740097" />
<Node Id="10312:[1585..1724).8" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740098" />
<Node Id="10312:[1585..1723).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 740099" />
<Node Id="10312:[5721..5740).1" Label="param LookupSymbolsOrMembersInternal(LookupResult result) 740100" />
<Node Id="10312:[5755..5789).1" Label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 740101" />
<Node Id="10312:[5804..5815).1" Label="param LookupSymbolsOrMembersInternal(string name) 740102" />
<Node Id="10312:[5830..5839).1" Label="param LookupSymbolsOrMembersInternal(int arity) 740103" />
<Node Id="10312:[5854..5893).1" Label="param LookupSymbolsOrMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 740104" />
<Node Id="10312:[5908..5929).1" Label="param LookupSymbolsOrMembersInternal(LookupOptions options) 740105" />
<Node Id="10312:[5944..5957).1" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 740106" />
<Node Id="10312:[5972..6018).1" Label="param LookupSymbolsOrMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740107" />
<Node Id="10312:[5663..6444).1" Label="param LookupSymbolsOrMembersInternal(this) 740108" />
<Node Id="10312:[6044..6433).1" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 740109" />
<Node Id="10312:[6044..6433).2" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 740110" />
<Node Id="10312:[6110..6221).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740111" />
<Node Id="10312:[6110..6221).2" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740112" />
<Node Id="10312:[6110..6221).3" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740113" />
<Node Id="10312:[6110..6221).4" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740114" />
<Node Id="10312:[6110..6221).5" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740115" />
<Node Id="10312:[6110..6221).6" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740116" />
<Node Id="10312:[6110..6221).7" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740117" />
<Node Id="10312:[6110..6220).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 740118" />
<Node Id="10312:[3696..3715).1" Label="param LookupSymbolsInternal(LookupResult result) 740119" />
<Node Id="10312:[3717..3728).1" Label="param LookupSymbolsInternal(string name) 740120" />
<Node Id="10312:[3730..3739).1" Label="param LookupSymbolsInternal(int arity) 740121" />
<Node Id="10312:[3741..3780).1" Label="param LookupSymbolsInternal(ConsList$TypeSymbol$ basesBeingResolved) 740122" />
<Node Id="10312:[3782..3803).1" Label="param LookupSymbolsInternal(LookupOptions options) 740123" />
<Node Id="10312:[3805..3818).1" Label="param LookupSymbolsInternal(bool diagnose) 740124" />
<Node Id="10312:[3820..3866).1" Label="param LookupSymbolsInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740125" />
<Node Id="10312:[3645..5112).1" Label="param LookupSymbolsInternal(this) 740126" />
<Node Id="10312:[3905..3919).1" Label="result.IsClear 740127" />
<Node Id="10354:[3684..3818).2" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 740128" />
<Node Id="10354:[3720..3803).9" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740129" />
<Node Id="10354:[3720..3803).10" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740130" />
<Node Id="10354:[3720..3803).11" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740131" />
<Node Id="10312:[3892..3921).1" Label="Debug.Assert(result.IsClear); 740132" />
<Node Id="10312:[3935..3968).1" Label="Debug.Assert(options.AreValid()); 740133" />
<Node Id="10312:[3948..3966).1" Label="options.AreValid() 740134" />
<Node Id="10353:[4698..4724).1" Label="param AreValid(this LookupOptions options) 740135" />
<Node Id="10353:[4750..4847).1" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 740136" />
<Node Id="10353:[4863..5000).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 740137" />
<Node Id="10353:[4863..5000).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 740138" />
<Node Id="10353:[5079..5183).1" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 740139" />
<Node Id="10353:[5197..5323).1" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 740140" />
<Node Id="10353:[5485..5759).1" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 740141" />
<Node Id="10353:[5485..5759).2" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 740142" />
<Node Id="10353:[5485..5759).3" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 740143" />
<Node Id="10353:[5775..5979).1" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 740144" />
<Node Id="10353:[5775..5979).3" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 740145" />
<Node Id="10353:[5995..6029).1" Label="return OnlyOneBitSet(onlyOptions); 740146" />
<Node Id="10353:[6002..6028).1" Label="OnlyOneBitSet(onlyOptions) 740147" />
<Node Id="10353:[6343..6358).1" Label="param OnlyOneBitSet(LookupOptions o) 740148" />
<Node Id="10353:[6384..6410).1" Label="return (o & (o - 1)) == 0; 740149" />
<Node Id="10353:[6384..6410).2" Label="return (o & (o - 1)) == 0; 740150" />
<Node Id="10312:[3984..4005).1" Label="Binder binder = null; 740151" />
<Node Id="10312:[4019..5073).1" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 740152" />
<Node Id="10312:[4019..5073).2" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 740153" />
<Node Id="10312:[4060..4080).1" Label="result.IsMultiViable 740154" />
<Node Id="10354:[4919..5009).1" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 740155" />
<Node Id="10354:[4962..4966).1" Label="Kind 740156" />
<Node Id="10354:[4058..4122).1" Label="get
            {
                return _kind;
            } 740157" />
<Node Id="10354:[4094..4107).1" Label="return _kind; 740158" />
<Node Id="10354:[4955..4994).1" Label="return Kind == LookupResultKind.Viable; 740159" />
<Node Id="10312:[4019..5073).4" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 740160" />
<Node Id="10312:[4019..5073).5" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 740161" />
<Node Id="10312:[4134..4806).1" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 740162" />
<Node Id="10312:[4134..4806).2" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 740163" />
<Node Id="10312:[4534..4658).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740164" />
<Node Id="10312:[4534..4658).2" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740165" />
<Node Id="10312:[4534..4658).3" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740166" />
<Node Id="10312:[4534..4658).4" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740167" />
<Node Id="10312:[4534..4658).5" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740168" />
<Node Id="10312:[4534..4658).6" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740169" />
<Node Id="10312:[4534..4658).7" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740170" />
<Node Id="10312:[4534..4658).8" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740171" />
<Node Id="10312:[4534..4657).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 740172" />
<Node Id="10312:[5188..5207).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 740173" />
<Node Id="10312:[5209..5220).1" Label="param LookupSymbolsInSingleBinder(string name) 740174" />
<Node Id="10312:[5222..5231).1" Label="param LookupSymbolsInSingleBinder(int arity) 740175" />
<Node Id="10312:[5233..5272).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 740176" />
<Node Id="10312:[5274..5295).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 740177" />
<Node Id="10312:[5297..5318).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 740178" />
<Node Id="10312:[5320..5333).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 740179" />
<Node Id="10312:[5335..5381).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740180" />
<Node Id="10312:[5124..5404).1" Label="param LookupSymbolsInSingleBinder(this) 740181" />
<Node Id="10312:[4534..4658).9" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740182" />
<Node Id="10312:[4685..4699).1" Label="result.IsClear 740183" />
<Node Id="10354:[3684..3818).3" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 740184" />
<Node Id="10354:[3720..3803).17" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740185" />
<Node Id="10354:[3720..3803).18" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740186" />
<Node Id="10354:[3720..3803).19" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740187" />
<Node Id="10312:[4680..4787).1" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 740188" />
<Node Id="10312:[4826..5058).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 740189" />
<Node Id="10312:[4826..5058).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 740190" />
<Node Id="10346:[10629..10648).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 740191" />
<Node Id="10346:[10650..10661).1" Label="param LookupSymbolsInSingleBinder(string name) 740192" />
<Node Id="10346:[10663..10672).1" Label="param LookupSymbolsInSingleBinder(int arity) 740193" />
<Node Id="10346:[10674..10713).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 740194" />
<Node Id="10346:[10715..10736).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 740195" />
<Node Id="10346:[10738..10759).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 740196" />
<Node Id="10346:[10761..10774).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 740197" />
<Node Id="10346:[10776..10822).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740198" />
<Node Id="10346:[10564..12467).1" Label="param LookupSymbolsInSingleBinder(this) 740199" />
<Node Id="10346:[10861..10875).1" Label="result.IsClear 740200" />
<Node Id="10354:[3684..3818).4" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 740201" />
<Node Id="10354:[3720..3803).25" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740202" />
<Node Id="10354:[3720..3803).26" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740203" />
<Node Id="10354:[3720..3803).27" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740204" />
<Node Id="10346:[10848..10877).1" Label="Debug.Assert(result.IsClear); 740205" />
<Node Id="10346:[10897..10914).1" Label="IsSubmissionClass 740206" />
<Node Id="10346:[7666..7775).1" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 740207" />
<Node Id="10346:[7672..7773).1" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 740208" />
<Node Id="10346:[10893..11127).1" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 740209" />
<Node Id="10346:[11143..11188).1" Label="var imports = GetImports(basesBeingResolved); 740210" />
<Node Id="10346:[11157..11187).1" Label="GetImports(basesBeingResolved) 740211" />
<Node Id="10346:[3460..3499).2" Label="param GetImports(ConsList$TypeSymbol$ basesBeingResolved) 740212" />
<Node Id="10346:[3423..3863).2" Label="param GetImports(this) 740213" />
<Node Id="10346:[3525..3638).10" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 740214" />
<Node Id="10346:[3525..3638).11" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 740215" />
<Node Id="10346:[11143..11188).2" Label="var imports = GetImports(basesBeingResolved); 740216" />
<Node Id="10346:[11258..12246).1" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 740217" />
<Node Id="10346:[11258..12246).2" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 740218" />
<Node Id="10346:[11258..12246).5" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 740219" />
<Node Id="10346:[11258..12246).6" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 740220" />
<Node Id="10346:[11369..11508).1" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740221" />
<Node Id="10346:[11369..11508).2" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740222" />
<Node Id="10346:[11369..11508).3" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740223" />
<Node Id="10346:[11369..11508).4" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740224" />
<Node Id="10346:[11369..11508).5" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740225" />
<Node Id="10346:[11369..11508).6" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740226" />
<Node Id="10346:[11369..11508).7" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740227" />
<Node Id="10346:[11369..11508).8" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740228" />
<Node Id="10346:[11369..11508).9" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740229" />
<Node Id="10346:[11369..11507).1" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 740230" />
<Node Id="10312:[7652..7671).1" Label="param LookupMembersInternal(LookupResult result) 740231" />
<Node Id="10312:[7673..7703).1" Label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 740232" />
<Node Id="10312:[7705..7716).1" Label="param LookupMembersInternal(string name) 740233" />
<Node Id="10312:[7718..7727).1" Label="param LookupMembersInternal(int arity) 740234" />
<Node Id="10312:[7729..7768).1" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 740235" />
<Node Id="10312:[7770..7791).1" Label="param LookupMembersInternal(LookupOptions options) 740236" />
<Node Id="10312:[7793..7814).1" Label="param LookupMembersInternal(Binder originalBinder) 740237" />
<Node Id="10312:[7816..7829).1" Label="param LookupMembersInternal(bool diagnose) 740238" />
<Node Id="10312:[7831..7877).1" Label="param LookupMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740239" />
<Node Id="10312:[7615..8420).1" Label="param LookupMembersInternal(this) 740240" />
<Node Id="10312:[7903..7936).1" Label="Debug.Assert(options.AreValid()); 740241" />
<Node Id="10312:[7916..7934).1" Label="options.AreValid() 740242" />
<Node Id="10353:[4698..4724).2" Label="param AreValid(this LookupOptions options) 740243" />
<Node Id="10353:[4750..4847).3" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 740244" />
<Node Id="10353:[4863..5000).5" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 740245" />
<Node Id="10353:[4863..5000).6" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 740246" />
<Node Id="10353:[5079..5183).3" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 740247" />
<Node Id="10353:[5197..5323).4" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 740248" />
<Node Id="10353:[5485..5759).7" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 740249" />
<Node Id="10353:[5485..5759).8" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 740250" />
<Node Id="10353:[5485..5759).9" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 740251" />
<Node Id="10353:[5775..5979).5" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 740252" />
<Node Id="10353:[5775..5979).7" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 740253" />
<Node Id="10353:[5995..6029).4" Label="return OnlyOneBitSet(onlyOptions); 740254" />
<Node Id="10353:[6002..6028).2" Label="OnlyOneBitSet(onlyOptions) 740255" />
<Node Id="10353:[6343..6358).2" Label="param OnlyOneBitSet(LookupOptions o) 740256" />
<Node Id="10353:[6384..6410).7" Label="return (o & (o - 1)) == 0; 740257" />
<Node Id="10353:[6384..6410).8" Label="return (o & (o - 1)) == 0; 740258" />
<Node Id="10312:[7952..7977).1" Label="Debug.Assert(arity $= 0); 740259" />
<Node Id="10312:[7952..7977).2" Label="Debug.Assert(arity $= 0); 740260" />
<Node Id="10312:[7991..8409).1" Label="if (nsOrType.IsNamespace)
            {
                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
            } 740261" />
<Node Id="10312:[8049..8181).1" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740262" />
<Node Id="10312:[8049..8181).2" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740263" />
<Node Id="10312:[8049..8181).3" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740264" />
<Node Id="10312:[8049..8181).4" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740265" />
<Node Id="10312:[8049..8181).5" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740266" />
<Node Id="10312:[8049..8181).6" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740267" />
<Node Id="10312:[8049..8181).7" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740268" />
<Node Id="10312:[8049..8181).8" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740269" />
<Node Id="10312:[8049..8180).1" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 740270" />
<Node Id="10312:[18976..18995).1" Label="param LookupMembersInNamespace(LookupResult result) 740271" />
<Node Id="10312:[18997..19015).1" Label="param LookupMembersInNamespace(NamespaceSymbol ns) 740272" />
<Node Id="10312:[19017..19028).1" Label="param LookupMembersInNamespace(string name) 740273" />
<Node Id="10312:[19030..19039).1" Label="param LookupMembersInNamespace(int arity) 740274" />
<Node Id="10312:[19041..19062).1" Label="param LookupMembersInNamespace(LookupOptions options) 740275" />
<Node Id="10312:[19064..19085).1" Label="param LookupMembersInNamespace(Binder originalBinder) 740276" />
<Node Id="10312:[19087..19100).1" Label="param LookupMembersInNamespace(bool diagnose) 740277" />
<Node Id="10312:[19102..19148).1" Label="param LookupMembersInNamespace(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740278" />
<Node Id="10312:[19174..19243).1" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 740279" />
<Node Id="10312:[19174..19243).2" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 740280" />
<Node Id="10312:[19174..19243).3" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 740281" />
<Node Id="10312:[19174..19243).4" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 740282" />
<Node Id="10312:[19188..19242).1" Label="GetCandidateMembers(ns, name, options, originalBinder) 740283" />
<Node Id="10312:[61540..61570).1" Label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 740284" />
<Node Id="10312:[61572..61583).1" Label="param GetCandidateMembers(string name) 740285" />
<Node Id="10312:[61585..61606).1" Label="param GetCandidateMembers(LookupOptions options) 740286" />
<Node Id="10312:[61608..61629).1" Label="param GetCandidateMembers(Binder originalBinder) 740287" />
<Node Id="10312:[61655..62327).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 740288" />
<Node Id="10312:[61655..62327).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 740289" />
<Node Id="10312:[61655..62327).4" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 740290" />
<Node Id="10312:[61874..62327).1" Label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 740291" />
<Node Id="10312:[62098..62327).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 740292" />
<Node Id="10312:[62098..62327).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 740293" />
<Node Id="10312:[62279..62312).1" Label="return nsOrType.GetMembers(name); 740294" />
<Node Id="10312:[19259..19531).1" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 740295" />
<Node Id="10312:[19326..19460).1" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 740296" />
<Node Id="10312:[19326..19460).2" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 740297" />
<Node Id="10312:[19326..19460).3" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 740298" />
<Node Id="10312:[19326..19460).6" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 740299" />
<Node Id="10312:[19326..19460).7" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 740300" />
<Node Id="10312:[19366..19459).1" Label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 740301" />
<Node Id="10312:[63424..63437).1" Label="param CheckViability(Symbol symbol) 740302" />
<Node Id="10312:[63439..63448).1" Label="param CheckViability(int arity) 740303" />
<Node Id="10312:[63450..63471).1" Label="param CheckViability(LookupOptions options) 740304" />
<Node Id="10312:[63473..63501).1" Label="param CheckViability(TypeSymbol accessThroughType) 740305" />
<Node Id="10312:[63503..63516).1" Label="param CheckViability(bool diagnose) 740306" />
<Node Id="10312:[63518..63564).1" Label="param CheckViability(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740307" />
<Node Id="10312:[63566..63612).1" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 740308" />
<Node Id="10312:[63381..70761).1" Label="param CheckViability(this) 740309" />
<Node Id="10312:[63638..63668).1" Label="bool inaccessibleViaQualifier; 740310" />
<Node Id="10312:[63682..63706).1" Label="DiagnosticInfo diagInfo; 740311" />
<Node Id="10312:[63859..64015).1" Label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias
                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)
                : symbol; 740312" />
<Node Id="10312:[63881..63912).1" Label="symbol.Kind == SymbolKind.Alias 740313" />
<Node Id="10312:[64121..69285).1" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740314" />
<Node Id="10312:[64121..69285).2" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740315" />
<Node Id="10312:[64121..69285).3" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740316" />
<Node Id="10312:[64353..69285).1" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740317" />
<Node Id="10312:[64353..69285).2" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740318" />
<Node Id="10312:[64353..69285).3" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740319" />
<Node Id="10312:[64353..69285).4" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740320" />
<Node Id="10312:[64353..69285).5" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740321" />
<Node Id="10312:[64357..64415).1" Label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 740322" />
<Node Id="10312:[80978..80991).1" Label="param WrongArity(Symbol symbol) 740323" />
<Node Id="10312:[80993..81002).1" Label="param WrongArity(int arity) 740324" />
<Node Id="10312:[81004..81017).1" Label="param WrongArity(bool diagnose) 740325" />
<Node Id="10312:[81019..81040).1" Label="param WrongArity(LookupOptions options) 740326" />
<Node Id="10312:[81042..81069).1" Label="param WrongArity(out DiagnosticInfo diagInfo) 740327" />
<Node Id="10312:[81095..84034).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 740328" />
<Node Id="10312:[81196..82523).1" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 740329" />
<Node Id="10312:[81196..82523).2" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 740330" />
<Node Id="10312:[81196..82523).3" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 740331" />
<Node Id="10312:[81196..82523).6" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 740332" />
<Node Id="10312:[81319..81371).1" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 740333" />
<Node Id="10312:[81495..81570).1" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 740334" />
<Node Id="10312:[81495..81570).2" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 740335" />
<Node Id="10312:[81596..82500).1" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 740336" />
<Node Id="10312:[81596..82500).2" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 740337" />
<Node Id="10312:[81628..81659).1" Label="options.IsAttributeTypeLookup() 740338" />
<Node Id="10353:[7504..7530).2" Label="param IsAttributeTypeLookup(this LookupOptions options) 740339" />
<Node Id="10312:[81596..82500).5" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 740340" />
<Node Id="10312:[84050..84066).1" Label="diagInfo = null; 740341" />
<Node Id="10312:[84080..84093).1" Label="return false; 740342" />
<Node Id="10312:[64353..69285).6" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740343" />
<Node Id="10312:[64537..64543).1" Label="InCref 740344" />
<Node Id="10306:[3196..3249).1" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 740345" />
<Node Id="10306:[3202..3247).1" Label="return this.Flags.Includes(BinderFlags.Cref); 740346" />
<Node Id="10306:[3202..3247).2" Label="return this.Flags.Includes(BinderFlags.Cref); 740347" />
<Node Id="10306:[3209..3246).1" Label="this.Flags.Includes(BinderFlags.Cref) 740348" />
<Node Id="10298:[471..492).9" Label="param Includes(this BinderFlags self) 740349" />
<Node Id="10298:[494..511).9" Label="param Includes(BinderFlags other) 740350" />
<Node Id="10312:[64532..69285).1" Label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740351" />
<Node Id="10312:[65229..69285).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740352" />
<Node Id="10312:[65229..69285).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740353" />
<Node Id="10312:[65474..69285).1" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740354" />
<Node Id="10312:[65474..69285).2" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740355" />
<Node Id="10312:[65730..65736).1" Label="InCref 740356" />
<Node Id="10312:[65726..69285).1" Label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740357" />
<Node Id="10312:[66182..66188).1" Label="InCref 740358" />
<Node Id="10312:[66177..69285).1" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740359" />
<Node Id="10312:[66177..69285).2" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740360" />
<Node Id="10312:[66177..69285).3" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740361" />
<Node Id="10312:[66177..69285).4" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740362" />
<Node Id="10312:[66291..66342).1" Label="RefineAccessThroughType(options, accessThroughType) 740363" />
<Node Id="10312:[75301..75322).1" Label="param RefineAccessThroughType(LookupOptions options) 740364" />
<Node Id="10312:[75324..75352).1" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 740365" />
<Node Id="10312:[75735..75866).1" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 740366" />
<Node Id="10312:[75735..75866).2" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 740367" />
<Node Id="10312:[75742..75804).1" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 740368" />
<Node Id="10312:[75735..75866).4" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 740369" />
<Node Id="10312:[66177..69285).7" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740370" />
<Node Id="10312:[66177..69285).8" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740371" />
<Node Id="10312:[66177..69285).9" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740372" />
<Node Id="10312:[66215..66540).1" Label="this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved) 740373" />
<Node Id="10312:[77528..77541).1" Label="param IsAccessible(Symbol symbol) 740374" />
<Node Id="10312:[77543..77571).1" Label="param IsAccessible(TypeSymbol accessThroughType) 740375" />
<Node Id="10312:[77573..77604).1" Label="param IsAccessible(out bool failedThroughTypeCheck) 740376" />
<Node Id="10312:[77606..77652).1" Label="param IsAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740377" />
<Node Id="10312:[77654..77700).1" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 740378" />
<Node Id="10312:[77501..78044).1" Label="param IsAccessible(this) 740379" />
<Node Id="10312:[77726..77892).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 740380" />
<Node Id="10312:[77726..77892).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 740381" />
<Node Id="10312:[77730..77782).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 740382" />
<Node Id="10298:[471..492).12" Label="param Includes(this BinderFlags self) 740383" />
<Node Id="10298:[494..511).12" Label="param Includes(BinderFlags other) 740384" />
<Node Id="10312:[77908..78033).1" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740385" />
<Node Id="10312:[77908..78033).2" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740386" />
<Node Id="10312:[77908..78033).3" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740387" />
<Node Id="10312:[77908..78033).4" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740388" />
<Node Id="10312:[77908..78033).5" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740389" />
<Node Id="10312:[77915..78032).1" Label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 740390" />
<Node Id="10312:[78387..78400).1" Label="param IsAccessibleHelper(Symbol symbol) 740391" />
<Node Id="10312:[78402..78430).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 740392" />
<Node Id="10312:[78432..78463).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 740393" />
<Node Id="10312:[78465..78511).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740394" />
<Node Id="10312:[78513..78552).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 740395" />
<Node Id="10312:[78346..78783).1" Label="param IsAccessibleHelper(this) 740396" />
<Node Id="10312:[78642..78772).1" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740397" />
<Node Id="10312:[78642..78772).2" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740398" />
<Node Id="10312:[78642..78772).3" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740399" />
<Node Id="10312:[78642..78772).4" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740400" />
<Node Id="10312:[78642..78772).5" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740401" />
<Node Id="10312:[78649..78771).1" Label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 740402" />
<Node Id="10346:[8019..8032).1" Label="param IsAccessibleHelper(Symbol symbol) 740403" />
<Node Id="10346:[8034..8062).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 740404" />
<Node Id="10346:[8064..8095).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 740405" />
<Node Id="10346:[8097..8143).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740406" />
<Node Id="10346:[8145..8184).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 740407" />
<Node Id="10346:[7977..8737).1" Label="param IsAccessibleHelper(this) 740408" />
<Node Id="10346:[8210..8251).1" Label="var type = _container as NamedTypeSymbol; 740409" />
<Node Id="10346:[8265..8726).1" Label="if ((object)type != null)
            {
                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);
            }
            else
            {
                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.
            } 740410" />
<Node Id="10346:[8265..8726).2" Label="if ((object)type != null)
            {
                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);
            }
            else
            {
                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.
            } 740411" />
<Node Id="10346:[8516..8646).1" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740412" />
<Node Id="10346:[8516..8646).2" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740413" />
<Node Id="10346:[8516..8646).3" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740414" />
<Node Id="10346:[8516..8646).4" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740415" />
<Node Id="10346:[8516..8646).5" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740416" />
<Node Id="10346:[8523..8645).1" Label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 740417" />
<Node Id="10325:[1906..1919).1" Label="param IsAccessibleHelper(Symbol symbol) 740418" />
<Node Id="10325:[1921..1949).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 740419" />
<Node Id="10325:[1951..1982).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 740420" />
<Node Id="10325:[1984..2031).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 740421" />
<Node Id="10325:[2033..2072).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 740422" />
<Node Id="10325:[1864..2245).1" Label="param IsAccessibleHelper(this) 740423" />
<Node Id="10325:[2098..2129).1" Label="failedThroughTypeCheck = false; 740424" />
<Node Id="10325:[2143..2234).1" Label="return IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics); 740425" />
<Node Id="10325:[2143..2234).2" Label="return IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics); 740426" />
<Node Id="10325:[2143..2234).3" Label="return IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics); 740427" />
<Node Id="10325:[2150..2233).1" Label="IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics) 740428" />
<Node Id="10286:[29357..29370).1" Label="param IsSymbolAccessibleConditional(Symbol symbol) 740429" />
<Node Id="10286:[29385..29406).1" Label="param IsSymbolAccessibleConditional(AssemblySymbol within) 740430" />
<Node Id="10286:[29421..29468).1" Label="param IsSymbolAccessibleConditional(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 740431" />
<Node Id="10286:[29494..29572).1" Label="return AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics); 740432" />
<Node Id="10286:[29494..29572).2" Label="return AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics); 740433" />
<Node Id="10286:[29494..29572).3" Label="return AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics); 740434" />
<Node Id="10286:[29501..29571).1" Label="AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics) 740435" />
<Node Id="10060:[826..839).1" Label="param IsSymbolAccessible(Symbol symbol) 740436" />
<Node Id="10060:[854..875).1" Label="param IsSymbolAccessible(AssemblySymbol within) 740437" />
<Node Id="10060:[890..936).1" Label="param IsSymbolAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740438" />
<Node Id="10060:[962..990).1" Label="bool failedThroughTypeCheck; 740439" />
<Node Id="10060:[1004..1137).1" Label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 740440" />
<Node Id="10060:[1004..1137).2" Label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 740441" />
<Node Id="10060:[1004..1137).3" Label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 740442" />
<Node Id="10060:[1004..1137).5" Label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 740443" />
<Node Id="10060:[1004..1137).6" Label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 740444" />
<Node Id="10060:[1004..1137).7" Label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 740445" />
<Node Id="10060:[1011..1136).1" Label="IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics) 740446" />
<Node Id="10060:[5593..5606).1" Label="param IsSymbolAccessibleCore(Symbol symbol) 740447" />
<Node Id="10060:[5621..5634).1" Label="param IsSymbolAccessibleCore(Symbol within) 740448" />
<Node Id="10060:[5691..5716).1" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 740449" />
<Node Id="10060:[5731..5762).1" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 740450" />
<Node Id="10060:[5777..5806).1" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 740451" />
<Node Id="10060:[5821..5867).1" Label="param IsSymbolAccessibleCore(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740452" />
<Node Id="10060:[5882..5928).1" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 740453" />
<Node Id="10060:[5954..5991).1" Label="Debug.Assert((object)symbol != null); 740454" />
<Node Id="10060:[5954..5991).2" Label="Debug.Assert((object)symbol != null); 740455" />
<Node Id="10060:[6005..6042).1" Label="Debug.Assert((object)within != null); 740456" />
<Node Id="10060:[6005..6042).2" Label="Debug.Assert((object)within != null); 740457" />
<Node Id="10060:[6056..6090).1" Label="Debug.Assert(within.IsDefinition); 740458" />
<Node Id="10060:[6104..6172).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 740459" />
<Node Id="10060:[6188..6219).1" Label="failedThroughTypeCheck = false; 740460" />
<Node Id="10060:[6235..9907).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.ArrayType:
                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.PointerType:
                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.NamedType:
                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Alias:
                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Discard:
                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.FunctionPointerType:
                    var funcPtr = (FunctionPointerTypeSymbol)symbol;
                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }

                    foreach (var param in funcPtr.Signature.Parameters)
                    {
                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                        {
                            return false;
                        }
                    }

                    return true;

                case SymbolKind.ErrorType:
                    // Always assume that error types are accessible.
                    return true;

                case SymbolKind.TypeParameter:
                case SymbolKind.Parameter:
                case SymbolKind.Local:
                case SymbolKind.Label:
                case SymbolKind.Namespace:
                case SymbolKind.DynamicType:
                case SymbolKind.Assembly:
                case SymbolKind.NetModule:
                case SymbolKind.RangeVariable:
                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:
                    // These types of symbols are always accessible (if visible).
                    return true;

                case SymbolKind.Method:
                case SymbolKind.Property:
                case SymbolKind.Event:
                case SymbolKind.Field:
                    if (!symbol.RequiresInstanceReceiver())
                    {
                        // static members aren't accessed 'through' an 'instance' of any type.  So we
                        // null out the 'through' instance here.  This ensures that we'll understand
                        // accessing protected statics properly.
                        throughTypeOpt = null;
                    }

                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);

                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 740461" />
<Node Id="10060:[6814..6920).1" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 740462" />
<Node Id="10060:[6814..6920).2" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 740463" />
<Node Id="10060:[6814..6920).3" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 740464" />
<Node Id="10060:[6814..6920).4" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 740465" />
<Node Id="10060:[6821..6919).1" Label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 740466" />
<Node Id="10060:[10180..10200).1" Label="param IsNamedTypeAccessible(NamedTypeSymbol type) 740467" />
<Node Id="10060:[10202..10215).1" Label="param IsNamedTypeAccessible(Symbol within) 740468" />
<Node Id="10060:[10217..10263).1" Label="param IsNamedTypeAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 740469" />
<Node Id="10060:[10265..10311).1" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 740470" />
<Node Id="10060:[10337..10405).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 740471" />
<Node Id="10060:[10419..10454).1" Label="Debug.Assert((object)type != null); 740472" />
<Node Id="10060:[10419..10454).2" Label="Debug.Assert((object)type != null); 740473" />
<Node Id="10060:[10470..10516).1" Label="var compilation = within.DeclaringCompilation; 740474" />
<Node Id="10060:[10532..10544).1" Label="bool unused; 740475" />
<Node Id="10060:[10558..11295).1" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 740476" />
<Node Id="10060:[11311..11352).1" Label="var containingType = type.ContainingType; 740477" />
<Node Id="10060:[11366..11675).1" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 740478" />
<Node Id="10060:[11366..11675).2" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 740479" />
<Node Id="10060:[11373..11403).1" Label="(object)containingType == null 740480" />
<Node Id="10060:[11366..11675).5" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 740481" />
<Node Id="10060:[11423..11509).1" Label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 740482" />
<Node Id="10060:[11990..12013).1" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 740483" />
<Node Id="10060:[12028..12063).1" Label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 740484" />
<Node Id="10060:[12078..12091).1" Label="param IsNonNestedTypeAccessible(Symbol within) 740485" />
<Node Id="10060:[12117..12185).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 740486" />
<Node Id="10060:[12199..12238).1" Label="Debug.Assert((object)assembly != null); 740487" />
<Node Id="10060:[12199..12238).2" Label="Debug.Assert((object)assembly != null); 740488" />
<Node Id="10060:[12254..13527).1" Label="switch (declaredAccessibility)
            {
                case Accessibility.NotApplicable:
                case Accessibility.Public:
                    // Public symbols are always accessible from any context
                    return true;

                case Accessibility.Private:
                case Accessibility.Protected:
                case Accessibility.ProtectedAndInternal:
                    // Shouldn't happen except in error cases.
                    return false;

                case Accessibility.Internal:
                case Accessibility.ProtectedOrInternal:

                    // within is typically a type
                    var withinType = within as NamedTypeSymbol;
                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;

                    // An internal type is accessible if we're in the same assembly or we have
                    // friend access to the assembly it was defined in.
                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);

                default:
                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);
            } 740489" />
<Node Id="10060:[12494..12506).1" Label="return true; 740490" />
<Node Id="10312:[66177..69285).11" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740491" />
<Node Id="10312:[67587..67593).1" Label="InCref 740492" />
<Node Id="10312:[67582..69285).1" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740493" />
<Node Id="10312:[67582..69285).2" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740494" />
<Node Id="10312:[67858..69285).1" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740495" />
<Node Id="10312:[67858..69285).2" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740496" />
<Node Id="10312:[68183..69285).1" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740497" />
<Node Id="10312:[68183..69285).2" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740498" />
<Node Id="10312:[68512..69285).1" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740499" />
<Node Id="10312:[68512..69285).2" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740500" />
<Node Id="10312:[68882..69285).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740501" />
<Node Id="10312:[68882..69285).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 740502" />
<Node Id="10312:[69237..69270).1" Label="return LookupResult.Good(symbol); 740503" />
<Node Id="10312:[69244..69269).1" Label="LookupResult.Good(symbol) 740504" />
<Node Id="10354:[5400..5413).1" Label="param Good(Symbol symbol) 740505" />
<Node Id="10354:[5439..5508).1" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 740506" />
<Node Id="10354:[5439..5508).2" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 740507" />
<Node Id="10354:[5439..5508).3" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 740508" />
<Node Id="10354:[5446..5507).1" Label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 740509" />
<Node Id="10368:[1076..1097).1" Label="param SingleLookupResult(LookupResultKind kind) 740510" />
<Node Id="10368:[1099..1112).1" Label="param SingleLookupResult(Symbol symbol) 740511" />
<Node Id="10368:[1114..1134).1" Label="param SingleLookupResult(DiagnosticInfo error) 740512" />
<Node Id="10368:[1048..1256).1" Label="param SingleLookupResult(this) 740513" />
<Node Id="10368:[1160..1169).1" Label="this.Kind 740514" />
<Node Id="10368:[1191..1202).1" Label="this.Symbol 740515" />
<Node Id="10368:[1226..1236).1" Label="this.Error 740516" />
<Node Id="10312:[69237..69270).2" Label="return LookupResult.Good(symbol); 740517" />
<Node Id="10312:[19478..19516).1" Label="result.MergeEqual(resultOfThisMember); 740518" />
<Node Id="10312:[19478..19515).1" Label="result.MergeEqual(resultOfThisMember) 740519" />
<Node Id="10354:[10217..10242).1" Label="param MergeEqual(SingleLookupResult result) 740520" />
<Node Id="10354:[10192..10676).1" Label="param MergeEqual(this) 740521" />
<Node Id="10354:[10272..10276).1" Label="Kind 740522" />
<Node Id="10354:[4058..4122).3" Label="get
            {
                return _kind;
            } 740523" />
<Node Id="10354:[10268..10665).1" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 740524" />
<Node Id="10354:[10268..10665).2" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 740525" />
<Node Id="10354:[10404..10408).1" Label="Kind 740526" />
<Node Id="10354:[10386..10665).1" Label="if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 740527" />
<Node Id="10354:[10442..10463).1" Label="this.SetFrom(result); 740528" />
<Node Id="10354:[10442..10462).1" Label="this.SetFrom(result) 740529" />
<Node Id="10354:[8131..8155).1" Label="param SetFrom(SingleLookupResult other) 740530" />
<Node Id="10354:[8109..8324).1" Label="param SetFrom(this) 740531" />
<Node Id="10354:[8181..8186).1" Label="_kind 740532" />
<Node Id="10354:[8214..8234).1" Label="_symbolList.Clear(); 740533" />
<Node Id="10354:[8248..8278).1" Label="_symbolList.Add(other.Symbol); 740534" />
<Node Id="10354:[8248..8278).2" Label="_symbolList.Add(other.Symbol); 740535" />
<Node Id="10354:[8292..8298).1" Label="_error 740536" />
<Node Id="10354:[10442..10463).2" Label="this.SetFrom(result); 740537" />
<Node Id="10312:[19478..19516).2" Label="result.MergeEqual(resultOfThisMember); 740538" />
<Node Id="10312:[19259..19531).4" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 740539" />
<Node Id="10312:[8049..8181).9" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740540" />
<Node Id="10346:[11369..11508).10" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740541" />
<Node Id="10346:[11532..11552).1" Label="result.IsMultiViable 740542" />
<Node Id="10354:[4919..5009).3" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 740543" />
<Node Id="10354:[4094..4107).5" Label="return _kind; 740544" />
<Node Id="10346:[11528..12231).1" Label="if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                } 740545" />
<Node Id="10346:[11665..12181).1" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 740546" />
<Node Id="10346:[11665..12181).2" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 740547" />
<Node Id="10346:[11665..12181).3" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 740548" />
<Node Id="10346:[11710..11746).1" Label="originalBinder.IsSemanticModelBinder 740549" />
<Node Id="10286:[2155..2260).1" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 740550" />
<Node Id="10286:[2191..2245).1" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 740551" />
<Node Id="10286:[2191..2245).2" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 740552" />
<Node Id="10286:[2198..2244).1" Label="this.Flags.Includes(BinderFlags.SemanticModel) 740553" />
<Node Id="10298:[471..492).14" Label="param Includes(this BinderFlags self) 740554" />
<Node Id="10298:[494..511).14" Label="param Includes(BinderFlags other) 740555" />
<Node Id="10346:[11665..12181).4" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 740556" />
<Node Id="10346:[11683..11747).1" Label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 740557" />
<Node Id="10345:[28212..28223).1" Label="param IsUsingAlias(string name) 740558" />
<Node Id="10345:[28225..28251).1" Label="param IsUsingAlias(bool callerIsSemanticModel) 740559" />
<Node Id="10345:[28185..28951).1" Label="param IsUsingAlias(this) 740560" />
<Node Id="10345:[28277..28305).1" Label="AliasAndUsingDirective node; 740561" />
<Node Id="10345:[28300..28304).1" Label="node 740562" />
<Node Id="10345:[28319..28911).1" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 740563" />
<Node Id="10345:[28319..28911).2" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 740564" />
<Node Id="10345:[28319..28911).3" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 740565" />
<Node Id="10345:[28927..28940).1" Label="return false; 740566" />
<Node Id="10346:[11665..12181).6" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 740567" />
<Node Id="10346:[11665..12181).7" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 740568" />
<Node Id="10346:[12205..12212).1" Label="return; 740569" />
<Node Id="10354:[3720..3803).33" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740570" />
<Node Id="10312:[4680..4787).3" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 740571" />
<Node Id="10312:[4749..4764).1" Label="binder = scope; 740572" />
<Node Id="10312:[5087..5101).1" Label="return binder; 740573" />
<Node Id="10312:[1585..1724).9" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740574" />
<Node Id="10319:[43504..43546).1" Label="diagnostics.Add(node, useSiteDiagnostics); 740575" />
<Node Id="10319:[43504..43546).2" Label="diagnostics.Add(node, useSiteDiagnostics); 740576" />
<Node Id="10319:[43504..43546).3" Label="diagnostics.Add(node, useSiteDiagnostics); 740577" />
<Node Id="10319:[43504..43546).4" Label="diagnostics.Add(node, useSiteDiagnostics); 740578" />
<Node Id="10319:[43562..43590).1" Label="Symbol bindingResult = null; 740579" />
<Node Id="10319:[43799..44676).1" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 740580" />
<Node Id="10319:[43799..44676).2" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 740581" />
<Node Id="10319:[43799..44676).3" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 740582" />
<Node Id="10319:[43853..43873).1" Label="IsViableType(result) 740583" />
<Node Id="10319:[41088..41107).1" Label="param IsViableType(LookupResult result) 740584" />
<Node Id="10319:[41138..41158).1" Label="result.IsMultiViable 740585" />
<Node Id="10354:[4919..5009).5" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 740586" />
<Node Id="10354:[4962..4966).5" Label="Kind 740587" />
<Node Id="10354:[4058..4122).7" Label="get
            {
                return _kind;
            } 740588" />
<Node Id="10354:[4094..4107).7" Label="return _kind; 740589" />
<Node Id="10319:[41133..41220).1" Label="if (!result.IsMultiViable)
            {
                return false;
            } 740590" />
<Node Id="10319:[41254..41268).1" Label="result.Symbols 740591" />
<Node Id="10354:[4525..4595).1" Label="get
            {
                return _symbolList;
            } 740592" />
<Node Id="10354:[4561..4580).1" Label="return _symbolList; 740593" />
<Node Id="10319:[41236..41680).1" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 740594" />
<Node Id="10319:[41302..41665).1" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 740595" />
<Node Id="10319:[41634..41646).1" Label="return true; 740596" />
<Node Id="10319:[44692..45392).1" Label="if (bindingResult is null)
            {
                bool wasError;

                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);
                if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
            } 740597" />
<Node Id="10319:[44751..44765).1" Label="bool wasError; 740598" />
<Node Id="10319:[44785..44930).1" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740599" />
<Node Id="10319:[44785..44930).2" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740600" />
<Node Id="10319:[44785..44930).3" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740601" />
<Node Id="10319:[44785..44930).5" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740602" />
<Node Id="10319:[44785..44930).6" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740603" />
<Node Id="10319:[44785..44930).7" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740604" />
<Node Id="10319:[44785..44930).8" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740605" />
<Node Id="10319:[44785..44930).9" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740606" />
<Node Id="10319:[44785..44930).10" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740607" />
<Node Id="10319:[44801..44929).1" Label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 740608" />
<Node Id="10319:[84167..84186).1" Label="param ResultSymbol(LookupResult result) 740609" />
<Node Id="10319:[84201..84218).1" Label="param ResultSymbol(string simpleName) 740610" />
<Node Id="10319:[84233..84242).1" Label="param ResultSymbol(int arity) 740611" />
<Node Id="10319:[84257..84273).1" Label="param ResultSymbol(SyntaxNode where) 740612" />
<Node Id="10319:[84288..84313).1" Label="param ResultSymbol(DiagnosticBag diagnostics) 740613" />
<Node Id="10319:[84328..84359).1" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 740614" />
<Node Id="10319:[84374..84391).1" Label="param ResultSymbol(out bool wasError) 740615" />
<Node Id="10319:[84406..84447).1" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 740616" />
<Node Id="10319:[84462..84508).1" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 740617" />
<Node Id="10319:[84124..109887).1" Label="param ResultSymbol(this) 740618" />
<Node Id="10319:[84534..84675).1" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740619" />
<Node Id="10319:[84534..84675).2" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740620" />
<Node Id="10319:[84534..84675).3" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740621" />
<Node Id="10319:[84534..84675).4" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740622" />
<Node Id="10319:[84534..84675).5" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740623" />
<Node Id="10319:[84534..84675).6" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740624" />
<Node Id="10319:[84534..84675).7" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740625" />
<Node Id="10319:[84534..84675).8" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740626" />
<Node Id="10319:[84534..84675).9" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740627" />
<Node Id="10319:[84550..84674).1" Label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 740628" />
<Node Id="10319:[84907..109876).1" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 740629" />
<Node Id="10319:[84907..109876).2" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 740630" />
<Node Id="10319:[84907..109876).3" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 740631" />
<Node Id="10319:[84907..109876).4" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 740632" />
<Node Id="10319:[84907..109876).5" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 740633" />
<Node Id="10319:[84907..109876).6" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 740634" />
<Node Id="10319:[84907..109876).7" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 740635" />
<Node Id="10319:[84907..109876).8" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 740636" />
<Node Id="10319:[84907..109876).9" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 740637" />
<Node Id="10319:[84907..109876).10" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 740638" />
<Node Id="10319:[85320..85348).1" Label="Debug.Assert(where != null); 740639" />
<Node Id="10319:[85320..85348).2" Label="Debug.Assert(where != null); 740640" />
<Node Id="10319:[85366..85400).1" Label="Debug.Assert(diagnostics != null); 740641" />
<Node Id="10319:[85366..85400).2" Label="Debug.Assert(diagnostics != null); 740642" />
<Node Id="10319:[85434..85448).1" Label="result.Symbols 740643" />
<Node Id="10354:[4525..4595).2" Label="get
            {
                return _symbolList;
            } 740644" />
<Node Id="10354:[4561..4580).2" Label="return _symbolList; 740645" />
<Node Id="10319:[85420..85449).1" Label="var symbols = result.Symbols; 740646" />
<Node Id="10319:[85467..85484).1" Label="wasError = false; 740647" />
<Node Id="10319:[85508..85528).1" Label="result.IsMultiViable 740648" />
<Node Id="10354:[4919..5009).6" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 740649" />
<Node Id="10354:[4962..4966).6" Label="Kind 740650" />
<Node Id="10354:[4058..4122).8" Label="get
            {
                return _kind;
            } 740651" />
<Node Id="10354:[4094..4107).8" Label="return _kind; 740652" />
<Node Id="10319:[85504..106825).1" Label="if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                } 740653" />
<Node Id="10319:[85570..106806).1" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 740654" />
<Node Id="10319:[85570..106806).2" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 740655" />
<Node Id="10319:[103953..103983).1" Label="var singleResult = symbols[0]; 740656" />
<Node Id="10319:[104078..104122).1" Label="var singleType = singleResult as TypeSymbol; 740657" />
<Node Id="10319:[104148..106735).1" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 740658" />
<Node Id="10319:[104148..106735).2" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 740659" />
<Node Id="10319:[104148..106735).3" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 740660" />
<Node Id="10319:[104874..105336).1" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 740661" />
<Node Id="10319:[104874..105336).2" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 740662" />
<Node Id="10319:[105368..106708).1" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 740663" />
<Node Id="10319:[105465..105535).1" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 740664" />
<Node Id="10319:[105465..105535).2" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 740665" />
<Node Id="10319:[105465..105535).3" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 740666" />
<Node Id="10319:[105476..105534).1" Label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 740667" />
<Node Id="10319:[76345..76358).1" Label="param ReportUseSiteDiagnostics(Symbol symbol) 740668" />
<Node Id="10319:[76360..76385).1" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 740669" />
<Node Id="10319:[76387..76402).1" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 740670" />
<Node Id="10319:[76428..76480).1" Label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 740671" />
<Node Id="10319:[76428..76480).2" Label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 740672" />
<Node Id="10060:[2841..2854).12" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 740673" />
<Node Id="10060:[2856..2875).12" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 740674" />
<Node Id="10060:[2901..2932).23" Label="Debug.Assert(symbol is object); 740675" />
<Node Id="10060:[2948..3467).12" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 740676" />
<Node Id="10060:[3553..4223).14" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 740677" />
<Node Id="10060:[4243..4274).14" Label="symbol = symbol.ContainingType; 740678" />
<Node Id="10060:[3518..4328).14" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 740679" />
<Node Id="10319:[76494..76582).1" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 740680" />
<Node Id="10319:[76494..76582).2" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 740681" />
<Node Id="10319:[76494..76582).3" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 740682" />
<Node Id="10319:[76494..76582).4" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 740683" />
<Node Id="10319:[76494..76582).5" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 740684" />
<Node Id="10319:[76494..76582).6" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 740685" />
<Node Id="10319:[106763..106783).1" Label="return singleResult; 740686" />
<Node Id="10319:[84691..84861).1" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 740687" />
<Node Id="10319:[84764..84846).1" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 740688" />
<Node Id="10319:[84764..84846).2" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 740689" />
<Node Id="10319:[84764..84846).4" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 740690" />
<Node Id="10319:[84764..84846).5" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 740691" />
<Node Id="10319:[84764..84845).1" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 740692" />
<Node Id="10306:[358886..358901).1" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 740693" />
<Node Id="10306:[358903..358930).1" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 740694" />
<Node Id="10306:[358932..358945).1" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 740695" />
<Node Id="10306:[358947..358972).1" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 740696" />
<Node Id="10306:[358838..360009).1" Label="param CheckRuntimeSupportForSymbolAccess(this) 740697" />
<Node Id="10306:[358998..359998).1" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 740698" />
<Node Id="10306:[358998..359998).2" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 740699" />
<Node Id="10319:[84877..84891).1" Label="return symbol; 740700" />
<Node Id="10319:[44948..45377).1" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 740701" />
<Node Id="10319:[45408..45421).1" Label="result.Free() 740702" />
<Node Id="10354:[11383..11549).1" Label="param Free(this) 740703" />
<Node Id="10354:[11428..11440).1" Label="this.Clear() 740704" />
<Node Id="10354:[3841..3991).1" Label="param Clear(this) 740705" />
<Node Id="10354:[3887..3892).1" Label="_kind 740706" />
<Node Id="10354:[3932..3952).1" Label="_symbolList.Clear(); 740707" />
<Node Id="10354:[3966..3980).1" Label="_error = null; 740708" />
<Node Id="10354:[3966..3972).1" Label="_error 740709" />
<Node Id="10354:[11428..11441).1" Label="this.Clear(); 740710" />
<Node Id="10354:[11455..11538).1" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 740711" />
<Node Id="10354:[11455..11538).2" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 740712" />
<Node Id="10354:[11506..11523).1" Label="_pool.Free(this); 740713" />
<Node Id="10354:[11506..11523).2" Label="_pool.Free(this); 740714" />
<Node Id="10319:[45408..45422).1" Label="result.Free(); 740715" />
<Node Id="10319:[45436..45568).1" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 740716" />
<Node Id="10319:[45505..45551).1" Label="AreNullableAnnotationsEnabled(node.Identifier) 740717" />
<Node Id="10286:[10010..10027).1" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 740718" />
<Node Id="10286:[9966..10197).1" Label="param AreNullableAnnotationsEnabled(this) 740719" />
<Node Id="10286:[10053..10100).1" Label="RoslynDebug.Assert(token.SyntaxTree is object); 740720" />
<Node Id="10286:[10114..10186).1" Label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 740721" />
<Node Id="10286:[10121..10185).1" Label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 740722" />
<Node Id="10286:[9073..9094).1" Label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 740723" />
<Node Id="10286:[9096..9108).1" Label="param AreNullableAnnotationsEnabled(int position) 740724" />
<Node Id="10286:[9029..9954).1" Label="param AreNullableAnnotationsEnabled(this) 740725" />
<Node Id="10286:[9134..9189).1" Label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 740726" />
<Node Id="10286:[9203..9282).1" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 740727" />
<Node Id="10286:[9203..9282).2" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 740728" />
<Node Id="10286:[9305..9942).1" Label="context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            } 740729" />
<Node Id="10286:[9298..9943).1" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 740730" />
<Node Id="10286:[9298..9943).2" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 740731" />
<Node Id="10286:[9798..9837).1" Label="AreNullableAnnotationsGloballyEnabled() 740732" />
<Node Id="10286:[10465..10663).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 740733" />
<Node Id="10286:[10551..10586).1" Label="RoslynDebug.Assert(Next is object); 740734" />
<Node Id="10286:[10607..10651).1" Label="Next.AreNullableAnnotationsGloballyEnabled() 740735" />
<Node Id="10286:[10465..10663).2" Label="param AreNullableAnnotationsGloballyEnabled(this) 740736" />
<Node Id="10325:[4462..4594).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 740737" />
<Node Id="10325:[4556..4582).1" Label="GetGlobalAnnotationState() 740738" />
<Node Id="10286:[10675..11259).1" Label="param GetGlobalAnnotationState(this) 740739" />
<Node Id="10286:[10741..11248).1" Label="switch (Compilation.Options.NullableContextOptions)
            {
                case NullableContextOptions.Enable:
                case NullableContextOptions.Annotations:
                    return true;

                case NullableContextOptions.Disable:
                case NullableContextOptions.Warnings:
                    return false;

                default:
                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);
            } 740740" />
<Node Id="10286:[11085..11098).1" Label="return false; 740741" />
<Node Id="10325:[4549..4583).1" Label="return GetGlobalAnnotationState(); 740742" />
<Node Id="10286:[10600..10652).1" Label="return Next.AreNullableAnnotationsGloballyEnabled(); 740743" />
<Node Id="10319:[45436..45568).4" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 740744" />
<Node Id="10319:[45443..45567).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 740745" />
<Node Id="10287:[2306..2328).1" Label="param CreateUnannotated(bool isNullableEnabled) 740746" />
<Node Id="10287:[2330..2343).1" Label="param CreateUnannotated(Symbol symbol) 740747" />
<Node Id="10287:[2377..2471).1" Label="if (symbol is null)
                {
                    return default;
                } 740748" />
<Node Id="10287:[2489..2521).1" Label="var type = symbol as TypeSymbol; 740749" />
<Node Id="10287:[2539..2781).1" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 740750" />
<Node Id="10287:[2546..2558).1" Label="type is null 740751" />
<Node Id="10287:[2539..2781).2" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 740752" />
<Node Id="10287:[2680..2780).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 740753" />
<Node Id="10287:[718..757).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 740754" />
<Node Id="10287:[666..1076).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 740755" />
<Node Id="10287:[791..833).1" Label="Debug.Assert(typeWithAnnotations.HasType); 740756" />
<Node Id="10287:[851..871).1" Label="_typeWithAnnotations 740757" />
<Node Id="10287:[912..927).1" Label="_symbol = null; 740758" />
<Node Id="10287:[912..919).1" Label="_symbol 740759" />
<Node Id="10287:[945..972).1" Label="_isNullableEnabled = false; 740760" />
<Node Id="10287:[945..963).1" Label="_isNullableEnabled 740761" />
<Node Id="10319:[18724..18740).1" Label="result.IsDefault 740762" />
<Node Id="10287:[1857..1908).1" Label="=$ !_typeWithAnnotations.HasType && _symbol is null 740763" />
<Node Id="10287:[1860..1908).1" Label="!_typeWithAnnotations.HasType && _symbol is null 740764" />
<Node Id="10319:[18710..18742).1" Label="Debug.Assert(!result.IsDefault); 740765" />
<Node Id="10319:[18758..18826).1" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 740766" />
<Node Id="10319:[18758..18826).2" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 740767" />
<Node Id="10319:[18758..18826).3" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 740768" />
<Node Id="10319:[18758..18826).4" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 740769" />
<Node Id="10319:[18765..18825).1" Label="UnwrapAlias(result, diagnostics, syntax, basesBeingResolved) 740770" />
<Node Id="10319:[51762..51815).1" Label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 740771" />
<Node Id="10319:[51817..51842).1" Label="param UnwrapAlias(DiagnosticBag diagnostics) 740772" />
<Node Id="10319:[51844..51861).1" Label="param UnwrapAlias(SyntaxNode syntax) 740773" />
<Node Id="10319:[51863..51909).1" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 740774" />
<Node Id="10319:[51698..52285).1" Label="param UnwrapAlias(this) 740775" />
<Node Id="10319:[51939..51953).1" Label="symbol.IsAlias 740776" />
<Node Id="10287:[1680..1716).1" Label="=$ _symbol?.Kind == SymbolKind.Alias 740777" />
<Node Id="10287:[1683..1690).1" Label="_symbol 740778" />
<Node Id="10287:[1683..1716).1" Label="_symbol?.Kind == SymbolKind.Alias 740779" />
<Node Id="10319:[51935..52244).1" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 740780" />
<Node Id="10319:[52260..52274).1" Label="return symbol; 740781" />
<Node Id="10345:[26673..26726).9" Label="alias.Alias.GetAliasTarget(basesBeingResolved: null); 740782" />
<Node Id="10287:[1784..1818).1" Label="=$ Symbol as NamespaceOrTypeSymbol 740783" />
<Node Id="10287:[1787..1793).1" Label="Symbol 740784" />
<Node Id="10287:[1535..1573).1" Label="=$ _symbol ?? TypeWithAnnotations.Type 740785" />
<Node Id="10287:[1549..1568).1" Label="TypeWithAnnotations 740786" />
<Node Id="10287:[1474..1497).1" Label="=$ _typeWithAnnotations 740787" />
<Node Id="10287:[1477..1497).1" Label="_typeWithAnnotations 740788" />
<Node Id="10287:[1538..1573).1" Label="_symbol ?? TypeWithAnnotations.Type 740789" />
<Node Id="10287:[1787..1818).1" Label="Symbol as NamespaceOrTypeSymbol 740790" />
<Node Id="10345:[26744..26809).1" Label="semanticDiagnostics.AddRange(alias.Alias.AliasTargetDiagnostics); 740791" />
<Node Id="10345:[26744..26809).2" Label="semanticDiagnostics.AddRange(alias.Alias.AliasTargetDiagnostics); 740792" />
<Node Id="10345:[26913..26963).1" Label="alias.Alias.CheckConstraints(semanticDiagnostics); 740793" />
<Node Id="10345:[26913..26963).2" Label="alias.Alias.CheckConstraints(semanticDiagnostics); 740794" />
<Node Id="10345:[26913..26963).3" Label="alias.Alias.CheckConstraints(semanticDiagnostics); 740795" />
<Node Id="10346:[7369..7588).1" Label="get
            {
                var merged = _container as MergedNamespaceSymbol;
                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;
            } 740796" />
<Node Id="10346:[7405..7454).1" Label="var merged = _container as MergedNamespaceSymbol; 740797" />
<Node Id="10346:[7472..7573).1" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 740798" />
<Node Id="10346:[7472..7573).2" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 740799" />
<Node Id="10346:[7479..7503).1" Label="((object)merged != null) 740800" />
<Node Id="10845:[522..547).1" Label="param TypeConversions(AssemblySymbol corLibrary) 740801" />
<Node Id="10845:[549..580).1" Label="param TypeConversions(bool includeNullability = false) 740802" />
<Node Id="10845:[499..728).1" Label="param TypeConversions(this) 740803" />
<Node Id="10845:[602..612).1" Label="corLibrary 740804" />
<Node Id="10845:[637..638).1" Label="0 740805" />
<Node Id="10845:[660..678).1" Label="includeNullability 740806" />
<Node Id="10845:[701..705).1" Label="null 740807" />
<Node Id="10845:[499..728).2" Label="param TypeConversions(this) 740808" />
<Node Id="10845:[764..789).1" Label="param TypeConversions(AssemblySymbol corLibrary) 740809" />
<Node Id="10845:[791..816).1" Label="param TypeConversions(int currentRecursionDepth) 740810" />
<Node Id="10845:[818..841).1" Label="param TypeConversions(bool includeNullability) 740811" />
<Node Id="10845:[843..878).1" Label="param TypeConversions(TypeConversions otherNullabilityOpt) 740812" />
<Node Id="10845:[740..997).1" Label="param TypeConversions(this) 740813" />
<Node Id="10843:[685..687).1" Label="50 740814" />
<Node Id="10843:[661..687).1" Label="MaximumRecursionDepth = 50 740815" />
<Node Id="10843:[82075..82080).1" Label="false 740816" />
<Node Id="10843:[82071..82080).1" Label="F = false 740817" />
<Node Id="10843:[82114..82118).1" Label="true 740818" />
<Node Id="10843:[82110..82118).1" Label="T = true 740819" />
<Node Id="10843:[82447..82485).1" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 740820" />
<Node Id="10843:[82447..82485).2" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 740821" />
<Node Id="10843:[82447..82485).4" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 740822" />
<Node Id="10843:[82519..82557).1" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 740823" />
<Node Id="10843:[82519..82557).2" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 740824" />
<Node Id="10843:[82519..82557).4" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 740825" />
<Node Id="10843:[82591..82629).1" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 740826" />
<Node Id="10843:[82591..82629).2" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 740827" />
<Node Id="10843:[82591..82629).6" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 740828" />
<Node Id="10843:[82663..82701).1" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 740829" />
<Node Id="10843:[82663..82701).2" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 740830" />
<Node Id="10843:[82663..82701).6" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 740831" />
<Node Id="10843:[82735..82773).1" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 740832" />
<Node Id="10843:[82735..82773).2" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 740833" />
<Node Id="10843:[82735..82773).8" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 740834" />
<Node Id="10843:[82807..82845).1" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 740835" />
<Node Id="10843:[82807..82845).2" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 740836" />
<Node Id="10843:[82807..82845).8" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 740837" />
<Node Id="10843:[82879..82917).1" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 740838" />
<Node Id="10843:[82879..82917).2" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 740839" />
<Node Id="10843:[82879..82917).11" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 740840" />
<Node Id="10843:[82951..82989).1" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 740841" />
<Node Id="10843:[82951..82989).2" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 740842" />
<Node Id="10843:[82951..82989).11" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 740843" />
<Node Id="10843:[83023..83061).1" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 740844" />
<Node Id="10843:[83023..83061).2" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 740845" />
<Node Id="10843:[83023..83061).5" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 740846" />
<Node Id="10843:[83095..83133).1" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 740847" />
<Node Id="10843:[83095..83133).2" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 740848" />
<Node Id="10843:[83095..83133).12" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 740849" />
<Node Id="10843:[83167..83205).1" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 740850" />
<Node Id="10843:[83167..83205).2" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 740851" />
<Node Id="10843:[83239..83277).1" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 740852" />
<Node Id="10843:[83239..83277).2" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 740853" />
<Node Id="10843:[82333..83288).1" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740854" />
<Node Id="10843:[82333..83288).2" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740855" />
<Node Id="10843:[82333..83288).3" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740856" />
<Node Id="10843:[82333..83288).4" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740857" />
<Node Id="10843:[82333..83288).5" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740858" />
<Node Id="10843:[82333..83288).6" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740859" />
<Node Id="10843:[82333..83288).7" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740860" />
<Node Id="10843:[82333..83288).8" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740861" />
<Node Id="10843:[82333..83288).9" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740862" />
<Node Id="10843:[82333..83288).10" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740863" />
<Node Id="10843:[82333..83288).11" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740864" />
<Node Id="10843:[82333..83288).12" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740865" />
<Node Id="10843:[82333..83288).13" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740866" />
<Node Id="10843:[82293..83288).1" Label="s_implicitNumericConversions =
        {
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 740867" />
<Node Id="10843:[83487..83525).1" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 740868" />
<Node Id="10843:[83487..83525).2" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 740869" />
<Node Id="10843:[83487..83525).3" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 740870" />
<Node Id="10843:[83559..83597).1" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 740871" />
<Node Id="10843:[83559..83597).2" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 740872" />
<Node Id="10843:[83559..83597).3" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 740873" />
<Node Id="10843:[83631..83669).1" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 740874" />
<Node Id="10843:[83631..83669).2" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 740875" />
<Node Id="10843:[83631..83669).4" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 740876" />
<Node Id="10843:[83703..83741).1" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 740877" />
<Node Id="10843:[83703..83741).2" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 740878" />
<Node Id="10843:[83703..83741).5" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 740879" />
<Node Id="10843:[83775..83813).1" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 740880" />
<Node Id="10843:[83775..83813).2" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 740881" />
<Node Id="10843:[83775..83813).6" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 740882" />
<Node Id="10843:[83847..83885).1" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 740883" />
<Node Id="10843:[83847..83885).2" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 740884" />
<Node Id="10843:[83847..83885).7" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 740885" />
<Node Id="10843:[83919..83957).1" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 740886" />
<Node Id="10843:[83919..83957).2" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 740887" />
<Node Id="10843:[83919..83957).8" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 740888" />
<Node Id="10843:[83991..84029).1" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 740889" />
<Node Id="10843:[83991..84029).2" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 740890" />
<Node Id="10843:[83991..84029).9" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 740891" />
<Node Id="10843:[84063..84101).1" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 740892" />
<Node Id="10843:[84063..84101).2" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 740893" />
<Node Id="10843:[84063..84101).5" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 740894" />
<Node Id="10843:[84135..84173).1" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 740895" />
<Node Id="10843:[84135..84173).2" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 740896" />
<Node Id="10843:[84135..84173).11" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 740897" />
<Node Id="10843:[84207..84245).1" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 740898" />
<Node Id="10843:[84207..84245).2" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 740899" />
<Node Id="10843:[84207..84245).12" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 740900" />
<Node Id="10843:[84279..84317).1" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 740901" />
<Node Id="10843:[84279..84317).2" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 740902" />
<Node Id="10843:[84279..84317).13" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 740903" />
<Node Id="10843:[83373..84328).1" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740904" />
<Node Id="10843:[83373..84328).2" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740905" />
<Node Id="10843:[83373..84328).3" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740906" />
<Node Id="10843:[83373..84328).4" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740907" />
<Node Id="10843:[83373..84328).5" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740908" />
<Node Id="10843:[83373..84328).6" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740909" />
<Node Id="10843:[83373..84328).7" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740910" />
<Node Id="10843:[83373..84328).8" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740911" />
<Node Id="10843:[83373..84328).9" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740912" />
<Node Id="10843:[83373..84328).10" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740913" />
<Node Id="10843:[83373..84328).11" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740914" />
<Node Id="10843:[83373..84328).12" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740915" />
<Node Id="10843:[83373..84328).13" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740916" />
<Node Id="10843:[83333..84328).1" Label="s_explicitNumericConversions =
        {
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 740917" />
<Node Id="10845:[900..910).1" Label="corLibrary 740918" />
<Node Id="10845:[912..933).1" Label="currentRecursionDepth 740919" />
<Node Id="10845:[935..953).1" Label="includeNullability 740920" />
<Node Id="10845:[955..974).1" Label="otherNullabilityOpt 740921" />
<Node Id="10845:[740..997).2" Label="param TypeConversions(this) 740922" />
<Node Id="10843:[1173..1198).1" Label="param ConversionsBase(AssemblySymbol corLibrary) 740923" />
<Node Id="10843:[1200..1225).1" Label="param ConversionsBase(int currentRecursionDepth) 740924" />
<Node Id="10843:[1227..1250).1" Label="param ConversionsBase(bool includeNullability) 740925" />
<Node Id="10843:[1252..1287).1" Label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 740926" />
<Node Id="10843:[1147..1833).1" Label="param ConversionsBase(this) 740927" />
<Node Id="10843:[734..744).1" Label="corLibrary 740928" />
<Node Id="10843:[778..799).1" Label="currentRecursionDepth 740929" />
<Node Id="10843:[835..853).1" Label="IncludeNullability 740930" />
<Node Id="10843:[1113..1134).1" Label="_lazyOtherNullability 740931" />
<Node Id="10843:[1313..1354).1" Label="Debug.Assert((object)corLibrary != null); 740932" />
<Node Id="10843:[1313..1354).2" Label="Debug.Assert((object)corLibrary != null); 740933" />
<Node Id="10843:[1368..1474).1" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 740934" />
<Node Id="10843:[1368..1474).2" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 740935" />
<Node Id="10843:[1488..1600).1" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 740936" />
<Node Id="10843:[1488..1600).2" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 740937" />
<Node Id="10843:[1616..1631).1" Label="this.corLibrary 740938" />
<Node Id="10843:[1659..1685).1" Label="this.currentRecursionDepth 740939" />
<Node Id="10843:[1724..1742).1" Label="IncludeNullability 740940" />
<Node Id="10843:[1778..1799).1" Label="_lazyOtherNullability 740941" />
<Node Id="10345:[26913..26963).8" Label="alias.Alias.CheckConstraints(semanticDiagnostics); 740942" />
<Node Id="10345:[26994..27050).1" Label="var corLibrary = _compilation.SourceAssembly.CorLibrary; 740943" />
<Node Id="10345:[27064..27114).1" Label="var conversions = new TypeConversions(corLibrary); 740944" />
<Node Id="10345:[27064..27114).2" Label="var conversions = new TypeConversions(corLibrary); 740945" />
<Node Id="10345:[27082..27113).1" Label="new TypeConversions(corLibrary) 740946" />
<Node Id="10845:[522..547).2" Label="param TypeConversions(AssemblySymbol corLibrary) 740947" />
<Node Id="10845:[549..580).2" Label="param TypeConversions(bool includeNullability = false) 740948" />
<Node Id="10845:[499..728).3" Label="param TypeConversions(this) 740949" />
<Node Id="10845:[637..638).3" Label="0 740950" />
<Node Id="10845:[660..678).2" Label="includeNullability 740951" />
<Node Id="10845:[701..705).3" Label="null 740952" />
<Node Id="10845:[499..728).4" Label="param TypeConversions(this) 740953" />
<Node Id="10845:[791..816).2" Label="param TypeConversions(int currentRecursionDepth) 740954" />
<Node Id="10845:[818..841).2" Label="param TypeConversions(bool includeNullability) 740955" />
<Node Id="10845:[843..878).2" Label="param TypeConversions(TypeConversions otherNullabilityOpt) 740956" />
<Node Id="10845:[740..997).3" Label="param TypeConversions(this) 740957" />
<Node Id="10845:[912..933).2" Label="currentRecursionDepth 740958" />
<Node Id="10845:[935..953).2" Label="includeNullability 740959" />
<Node Id="10845:[955..974).2" Label="otherNullabilityOpt 740960" />
<Node Id="10845:[740..997).4" Label="param TypeConversions(this) 740961" />
<Node Id="10843:[1200..1225).2" Label="param ConversionsBase(int currentRecursionDepth) 740962" />
<Node Id="10843:[1227..1250).2" Label="param ConversionsBase(bool includeNullability) 740963" />
<Node Id="10843:[1252..1287).2" Label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 740964" />
<Node Id="10843:[1147..1833).2" Label="param ConversionsBase(this) 740965" />
<Node Id="10843:[734..744).2" Label="corLibrary 740966" />
<Node Id="10843:[778..799).2" Label="currentRecursionDepth 740967" />
<Node Id="10843:[835..853).2" Label="IncludeNullability 740968" />
<Node Id="10843:[1113..1134).2" Label="_lazyOtherNullability 740969" />
<Node Id="10843:[1313..1354).5" Label="Debug.Assert((object)corLibrary != null); 740970" />
<Node Id="10843:[1313..1354).6" Label="Debug.Assert((object)corLibrary != null); 740971" />
<Node Id="10843:[1368..1474).6" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 740972" />
<Node Id="10843:[1368..1474).7" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 740973" />
<Node Id="10843:[1488..1600).6" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 740974" />
<Node Id="10843:[1488..1600).7" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 740975" />
<Node Id="10843:[1659..1685).2" Label="this.currentRecursionDepth 740976" />
<Node Id="10843:[1724..1742).2" Label="IncludeNullability 740977" />
<Node Id="10843:[1778..1799).2" Label="_lazyOtherNullability 740978" />
<Node Id="10345:[27128..27705).1" Label="foreach (var @using in Usings)
            {
                // Check if `using static` directives meet constraints.
                if (@using.NamespaceOrType.IsType)
                {
                    var typeSymbol = (TypeSymbol)@using.NamespaceOrType;
                    // LAFHIS
                    var location = (@using.UsingDirective != null ? @using.UsingDirective.Name.Location : null) ?? NoLocation.Singleton;
                    typeSymbol.CheckAllConstraints(_compilation, conversions, location, semanticDiagnostics);
                }
            } 740979" />
<Node Id="10345:[27773..27973).1" Label="foreach (var alias in ExternAliases)
            {
                alias.Alias.GetAliasTarget(null);
                semanticDiagnostics.AddRange(alias.Alias.AliasTargetDiagnostics);
            } 740980" />
<Node Id="10345:[27989..28162).1" Label="if (_diagnostics != null && !_diagnostics.IsEmptyWithoutResolution)
            {
                semanticDiagnostics.AddRange(_diagnostics.AsEnumerable());
            } 740981" />
<Node Id="10345:[27989..28162).2" Label="if (_diagnostics != null && !_diagnostics.IsEmptyWithoutResolution)
            {
                semanticDiagnostics.AddRange(_diagnostics.AsEnumerable());
            } 740982" />
<Node Id="10345:[25064..25075).2" Label="Validate(); 740983" />
<Node Id="10345:[25858..25865).2" Label="return; 740984" />
<Node Id="10076:[4437..4452).1" Label="param GetBinder(SyntaxNode node) 740985" />
<Node Id="10076:[4454..4498).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 740986" />
<Node Id="10076:[4500..4523).1" Label="param GetBinder(Symbol memberOpt = null) 740987" />
<Node Id="10076:[4411..5059).1" Label="param GetBinder(this) 740988" />
<Node Id="10076:[4549..4579).1" Label="int position = node.SpanStart; 740989" />
<Node Id="10076:[4821..4829).1" Label="InScript 740990" />
<Node Id="10076:[3592..3700).2" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 740991" />
<Node Id="10076:[3628..3685).3" Label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 740992" />
<Node Id="10076:[4815..4966).1" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 740993" />
<Node Id="10076:[4815..4966).3" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 740994" />
<Node Id="10076:[4815..4966).4" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 740995" />
<Node Id="10076:[4815..4966).5" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 740996" />
<Node Id="10076:[4932..4951).1" Label="node = node.Parent; 740997" />
<Node Id="10076:[4982..5048).1" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 740998" />
<Node Id="10076:[4982..5048).2" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 740999" />
<Node Id="10076:[4982..5048).3" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 741000" />
<Node Id="10076:[4982..5048).4" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 741001" />
<Node Id="10076:[4989..5047).1" Label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 741002" />
<Node Id="10076:[5097..5112).1" Label="param GetBinder(SyntaxNode node) 741003" />
<Node Id="10076:[5114..5126).1" Label="param GetBinder(int position) 741004" />
<Node Id="10076:[5128..5172).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 741005" />
<Node Id="10076:[5174..5197).1" Label="param GetBinder(Symbol memberOpt = null) 741006" />
<Node Id="10076:[5071..5759).1" Label="param GetBinder(this) 741007" />
<Node Id="10076:[5223..5250).1" Label="Debug.Assert(node != null); 741008" />
<Node Id="10076:[5223..5250).2" Label="Debug.Assert(node != null); 741009" />
<Node Id="10076:[5277..5448).1" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 741010" />
<Node Id="10076:[5277..5448).2" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 741011" />
<Node Id="10076:[5470..5538).1" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 741012" />
<Node Id="10076:[5552..5614).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 741013" />
<Node Id="10076:[5552..5614).2" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 741014" />
<Node Id="10076:[5552..5614).3" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 741015" />
<Node Id="10076:[5552..5613).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 741016" />
<Node Id="10077:[1039..1051).2" Label="param Initialize(int position) 741017" />
<Node Id="10077:[1053..1090).2" Label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 741018" />
<Node Id="10077:[1092..1108).2" Label="param Initialize(Symbol memberOpt) 741019" />
<Node Id="10077:[1014..1370).2" Label="param Initialize(this) 741020" />
<Node Id="10077:[1142..1210).8" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 741021" />
<Node Id="10077:[1142..1210).9" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 741022" />
<Node Id="10077:[1142..1210).11" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 741023" />
<Node Id="10077:[1142..1210).12" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 741024" />
<Node Id="10077:[1230..1239).2" Label="_position 741025" />
<Node Id="10077:[1269..1290).2" Label="_memberDeclarationOpt 741026" />
<Node Id="10077:[1332..1342).2" Label="_memberOpt 741027" />
<Node Id="10076:[5552..5614).4" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 741028" />
<Node Id="10076:[5628..5664).1" Label="Binder result = visitor.Visit(node); 741029" />
<Node Id="10076:[5644..5663).1" Label="visitor.Visit(node) 741030" />
<Node Id="10077:[2693..2708).1" Label="param Visit(SyntaxNode node) 741031" />
<Node Id="10077:[2664..2780).1" Label="param Visit(this) 741032" />
<Node Id="10077:[2742..2765).1" Label="return VisitCore(node); 741033" />
<Node Id="10077:[2749..2764).1" Label="VisitCore(node) 741034" />
<Node Id="10077:[2877..2892).1" Label="param VisitCore(SyntaxNode node) 741035" />
<Node Id="10077:[2852..2986).1" Label="param VisitCore(this) 741036" />
<Node Id="10077:[2926..2971).1" Label="return ((CSharpSyntaxNode)node).Accept(this); 741037" />
<Node Id="10077:[2926..2971).2" Label="return ((CSharpSyntaxNode)node).Accept(this); 741038" />
<Node Id="10077:[2926..2971).3" Label="return ((CSharpSyntaxNode)node).Accept(this); 741039" />
<Node Id="10077:[34617..34644).1" Label="param VisitClassDeclaration(ClassDeclarationSyntax node) 741040" />
<Node Id="10077:[34572..34731).1" Label="param VisitClassDeclaration(this) 741041" />
<Node Id="10077:[34678..34716).1" Label="return VisitTypeDeclarationCore(node); 741042" />
<Node Id="10077:[34685..34715).1" Label="VisitTypeDeclarationCore(node) 741043" />
<Node Id="10077:[31025..31053).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 741044" />
<Node Id="10077:[30985..32417).1" Label="param VisitTypeDeclarationCore(this) 741045" />
<Node Id="10077:[31087..31238).1" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 741046" />
<Node Id="10077:[31087..31238).2" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 741047" />
<Node Id="10077:[31087..31238).3" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 741048" />
<Node Id="10077:[31258..31297).1" Label="NodeUsage extraInfo = NodeUsage.Normal; 741049" />
<Node Id="10077:[31490..32331).1" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 741050" />
<Node Id="10077:[31490..32331).2" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 741051" />
<Node Id="10077:[31490..32331).6" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 741052" />
<Node Id="10077:[31490..32331).7" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 741053" />
<Node Id="10077:[31842..31894).1" Label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 741054" />
<Node Id="10077:[32351..32402).1" Label="return VisitTypeDeclarationCore(parent, extraInfo); 741055" />
<Node Id="10077:[32351..32402).2" Label="return VisitTypeDeclarationCore(parent, extraInfo); 741056" />
<Node Id="10077:[32358..32401).1" Label="VisitTypeDeclarationCore(parent, extraInfo) 741057" />
<Node Id="10077:[32474..32502).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 741058" />
<Node Id="10077:[32504..32523).1" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 741059" />
<Node Id="10077:[32433..34556).1" Label="param VisitTypeDeclarationCore(this) 741060" />
<Node Id="10077:[32557..32607).1" Label="var key = CreateBinderCacheKey(parent, extraInfo); 741061" />
<Node Id="10077:[32557..32607).2" Label="var key = CreateBinderCacheKey(parent, extraInfo); 741062" />
<Node Id="10077:[32567..32606).1" Label="CreateBinderCacheKey(parent, extraInfo) 741063" />
<Node Id="10077:[44159..44180).2" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 741064" />
<Node Id="10077:[44182..44197).2" Label="param CreateBinderCacheKey(NodeUsage usage) 741065" />
<Node Id="10077:[44231..44317).9" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 741066" />
<Node Id="10077:[44231..44317).11" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 741067" />
<Node Id="10077:[44335..44374).7" Label="return new BinderCacheKey(node, usage); 741068" />
<Node Id="10077:[44342..44373).2" Label="new BinderCacheKey(node, usage) 741069" />
<Node Id="10076:[853..1034).2" Label="param BinderCacheKey(this) 741070" />
<Node Id="10077:[32557..32607).3" Label="var key = CreateBinderCacheKey(parent, extraInfo); 741071" />
<Node Id="10077:[32627..32647).1" Label="Binder resultBinder; 741072" />
<Node Id="10077:[32670..32681).1" Label="binderCache 741073" />
<Node Id="10077:[2066..2158).3" Label="get
                {
                    return _factory._binderCache;
                } 741074" />
<Node Id="10077:[2110..2139).3" Label="return _factory._binderCache; 741075" />
<Node Id="10077:[32665..34501).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 741076" />
<Node Id="10077:[32665..34501).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 741077" />
<Node Id="10077:[32665..34501).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 741078" />
<Node Id="10077:[32665..34501).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 741079" />
<Node Id="10077:[32665..34501).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 741080" />
<Node Id="10077:[33226..33266).1" Label="resultBinder = VisitCore(parent.Parent); 741081" />
<Node Id="10077:[33241..33265).1" Label="VisitCore(parent.Parent) 741082" />
<Node Id="10077:[2877..2892).2" Label="param VisitCore(SyntaxNode node) 741083" />
<Node Id="10077:[39020..39048).1" Label="param VisitCompilationUnit(CompilationUnitSyntax parent) 741084" />
<Node Id="10077:[38976..39245).1" Label="param VisitCompilationUnit(this) 741085" />
<Node Id="10077:[39082..39230).1" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 741086" />
<Node Id="10077:[39170..39187).1" Label="IsInUsing(parent) 741087" />
<Node Id="10077:[44823..44854).1" Label="param IsInUsing(CSharpSyntaxNode containingNode) 741088" />
<Node Id="10077:[44800..46356).1" Label="param IsInUsing(this) 741089" />
<Node Id="10077:[44888..44934).1" Label="TextSpan containingSpan = containingNode.Span; 741090" />
<Node Id="10077:[44954..44972).1" Label="SyntaxToken token; 741091" />
<Node Id="10077:[44966..44971).1" Label="token 741092" />
<Node Id="10077:[44990..45616).1" Label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)
                {
                    // This occurs at EOF
                    token = containingNode.GetLastToken();
                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());
                }
                else if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 741093" />
<Node Id="10077:[45331..45616).1" Label="if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 741094" />
<Node Id="10077:[45553..45597).1" Label="token = containingNode.FindToken(_position); 741095" />
<Node Id="10077:[45553..45597).2" Label="token = containingNode.FindToken(_position); 741096" />
<Node Id="10077:[45636..45660).1" Label="var node = token.Parent; 741097" />
<Node Id="10077:[45678..46310).1" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 741098" />
<Node Id="10077:[45678..46310).2" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 741099" />
<Node Id="10077:[45678..46310).3" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 741100" />
<Node Id="10077:[46088..46248).1" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 741101" />
<Node Id="10077:[46088..46248).2" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 741102" />
<Node Id="10077:[46272..46291).1" Label="node = node.Parent; 741103" />
<Node Id="10077:[46328..46341).1" Label="return false; 741104" />
<Node Id="10077:[39082..39230).3" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 741105" />
<Node Id="10077:[39220..39228).1" Label="InScript 741106" />
<Node Id="10077:[2243..2331).1" Label="get
                {
                    return _factory.InScript;
                } 741107" />
<Node Id="10077:[2294..2311).1" Label="_factory.InScript 741108" />
<Node Id="10076:[3592..3700).3" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 741109" />
<Node Id="10077:[2287..2312).1" Label="return _factory.InScript; 741110" />
<Node Id="10077:[39089..39229).1" Label="VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript) 741111" />
<Node Id="10077:[39298..39335).2" Label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 741112" />
<Node Id="10077:[39337..39349).2" Label="param VisitCompilationUnit(bool inUsing) 741113" />
<Node Id="10077:[39351..39364).2" Label="param VisitCompilationUnit(bool inScript) 741114" />
<Node Id="10077:[39261..44091).2" Label="param VisitCompilationUnit(this) 741115" />
<Node Id="10077:[39421..39431).2" Label="syntaxTree 741116" />
<Node Id="10077:[1641..1732).2" Label="get
                {
                    return _factory._syntaxTree;
                } 741117" />
<Node Id="10077:[1685..1713).2" Label="return _factory._syntaxTree; 741118" />
<Node Id="10077:[39398..39590).7" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 741119" />
<Node Id="10077:[39398..39590).8" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 741120" />
<Node Id="10077:[39766..39774).2" Label="inScript 741121" />
<Node Id="10077:[44231..44317).17" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 741122" />
<Node Id="10077:[44231..44317).19" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 741123" />
<Node Id="10077:[2110..2139).4" Label="return _factory._binderCache; 741124" />
<Node Id="10076:[1089..1109).1" Label="param Equals(BinderCacheKey other) 741125" />
<Node Id="10076:[1050..1225).1" Label="param Equals(this) 741126" />
<Node Id="10076:[1143..1210).1" Label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 741127" />
<Node Id="10077:[33290..34322).1" Label="if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    } 741128" />
<Node Id="10077:[33414..33451).1" Label="resultBinder.ContainingMemberOrLambda 741129" />
<Node Id="10346:[7369..7588).3" Label="get
            {
                var merged = _container as MergedNamespaceSymbol;
                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;
            } 741130" />
<Node Id="10077:[33373..33481).1" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 741131" />
<Node Id="10077:[33373..33481).2" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 741132" />
<Node Id="10077:[33509..34299).1" Label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        } 741133" />
<Node Id="10077:[33969..34032).1" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 741134" />
<Node Id="10077:[33969..34032).2" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 741135" />
<Node Id="10077:[33969..34032).3" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 741136" />
<Node Id="10077:[33984..34031).1" Label="new InContainerBinder(typeSymbol, resultBinder) 741137" />
<Node Id="10346:[2571..2602).2" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 741138" />
<Node Id="10346:[2604..2615).2" Label="param InContainerBinder(Binder next) 741139" />
<Node Id="10346:[2617..2639).2" Label="param InContainerBinder(Imports imports = null) 741140" />
<Node Id="10346:[2544..2854).3" Label="param InContainerBinder(this) 741141" />
<Node Id="10286:[1317..1350).9" Label="RoslynDebug.Assert(next != null); 741142" />
<Node Id="10286:[1317..1350).10" Label="RoslynDebug.Assert(next != null); 741143" />
<Node Id="10286:[1390..1400).3" Label="this.Flags 741144" />
<Node Id="10286:[1428..1444).3" Label="this.Compilation 741145" />
<Node Id="10346:[858..868).3" Label="_container 741146" />
<Node Id="10346:[2691..2750).6" Label="Debug.Assert((object)container != null || imports != null); 741147" />
<Node Id="10346:[2691..2750).7" Label="Debug.Assert((object)container != null || imports != null); 741148" />
<Node Id="10077:[34064..34272).1" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 741149" />
<Node Id="10077:[34064..34272).2" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 741150" />
<Node Id="10077:[34346..34420).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 741151" />
<Node Id="10077:[34361..34419).1" Label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 741152" />
<Node Id="10307:[3496..3521).1" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 741153" />
<Node Id="10307:[3452..3756).1" Label="param WithUnsafeRegionIfNecessary(this) 741154" />
<Node Id="10307:[3547..3745).1" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 741155" />
<Node Id="10307:[3547..3745).2" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 741156" />
<Node Id="10307:[3555..3600).1" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 741157" />
<Node Id="10298:[471..492).15" Label="param Includes(this BinderFlags self) 741158" />
<Node Id="10298:[494..511).15" Label="param Includes(BinderFlags other) 741159" />
<Node Id="10307:[3547..3745).4" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 741160" />
<Node Id="10307:[3547..3745).7" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 741161" />
<Node Id="10307:[3554..3645).1" Label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 741162" />
<Node Id="10077:[34444..34455).1" Label="binderCache 741163" />
<Node Id="10077:[2110..2139).5" Label="return _factory._binderCache; 741164" />
<Node Id="10077:[34444..34482).1" Label="binderCache.TryAdd(key, resultBinder); 741165" />
<Node Id="10077:[34444..34482).2" Label="binderCache.TryAdd(key, resultBinder); 741166" />
<Node Id="10077:[34444..34482).3" Label="binderCache.TryAdd(key, resultBinder); 741167" />
<Node Id="10077:[34444..34482).4" Label="binderCache.TryAdd(key, resultBinder); 741168" />
<Node Id="10077:[34444..34482).5" Label="binderCache.TryAdd(key, resultBinder); 741169" />
<Node Id="10077:[34521..34541).1" Label="return resultBinder; 741170" />
<Node Id="10077:[2926..2971).12" Label="return ((CSharpSyntaxNode)node).Accept(this); 741171" />
<Node Id="10076:[5678..5718).1" Label="_binderFactoryVisitorPool.Free(visitor); 741172" />
<Node Id="10076:[5678..5718).2" Label="_binderFactoryVisitorPool.Free(visitor); 741173" />
<Node Id="10076:[5734..5748).1" Label="return result; 741174" />
<Node Id="25002:[4395..4432).29" Label="var diagnostics = c.GetDiagnostics(); 741175" />
<Node Id="10076:[5223..5250).6" Label="Debug.Assert(node != null); 741176" />
<Node Id="10076:[5277..5448).6" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 741177" />
<Node Id="10076:[5391..5433).1" Label="container.AssertMemberExposure(memberOpt); 741178" />
<Node Id="10076:[5391..5433).2" Label="container.AssertMemberExposure(memberOpt); 741179" />
<Node Id="10077:[4637..4671).1" Label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 741180" />
<Node Id="10077:[4591..7075).1" Label="param VisitMethodDeclaration(this) 741181" />
<Node Id="10077:[4705..4866).1" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 741182" />
<Node Id="10077:[4705..4866).2" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 741183" />
<Node Id="10077:[4705..4866).3" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 741184" />
<Node Id="10077:[4886..4902).1" Label="NodeUsage usage; 741185" />
<Node Id="10077:[4920..5555).1" Label="if (LookupPosition.IsInBody(_position, methodDecl))
                {
                    usage = NodeUsage.MethodBody;
                }
                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 741186" />
<Node Id="10077:[4920..5555).2" Label="if (LookupPosition.IsInBody(_position, methodDecl))
                {
                    usage = NodeUsage.MethodBody;
                }
                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 741187" />
<Node Id="10077:[5083..5555).1" Label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 741188" />
<Node Id="10077:[5083..5555).2" Label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 741189" />
<Node Id="10077:[5511..5536).1" Label="usage = NodeUsage.Normal; 741190" />
<Node Id="10077:[5575..5625).1" Label="var key = CreateBinderCacheKey(methodDecl, usage); 741191" />
<Node Id="10077:[5575..5625).2" Label="var key = CreateBinderCacheKey(methodDecl, usage); 741192" />
<Node Id="10077:[5585..5624).1" Label="CreateBinderCacheKey(methodDecl, usage) 741193" />
<Node Id="10077:[44159..44180).4" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 741194" />
<Node Id="10077:[44182..44197).4" Label="param CreateBinderCacheKey(NodeUsage usage) 741195" />
<Node Id="10077:[44231..44317).25" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 741196" />
<Node Id="10077:[44231..44317).27" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 741197" />
<Node Id="10077:[44335..44374).15" Label="return new BinderCacheKey(node, usage); 741198" />
<Node Id="10077:[44342..44373).4" Label="new BinderCacheKey(node, usage) 741199" />
<Node Id="10076:[853..1034).4" Label="param BinderCacheKey(this) 741200" />
<Node Id="10077:[5575..5625).3" Label="var key = CreateBinderCacheKey(methodDecl, usage); 741201" />
<Node Id="10077:[5645..5665).1" Label="Binder resultBinder; 741202" />
<Node Id="10077:[5688..5699).1" Label="binderCache 741203" />
<Node Id="10077:[2066..2158).6" Label="get
                {
                    return _factory._binderCache;
                } 741204" />
<Node Id="10077:[2110..2139).6" Label="return _factory._binderCache; 741205" />
<Node Id="10077:[5683..7020).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 741206" />
<Node Id="10077:[5683..7020).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 741207" />
<Node Id="10077:[5683..7020).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 741208" />
<Node Id="10077:[5683..7020).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 741209" />
<Node Id="10077:[5683..7020).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 741210" />
<Node Id="10077:[5776..5836).1" Label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 741211" />
<Node Id="10077:[5858..6188).1" Label="if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    } 741212" />
<Node Id="10077:[5858..6188).2" Label="if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    } 741213" />
<Node Id="10077:[5930..6023).1" Label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 741214" />
<Node Id="10077:[5930..6023).2" Label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 741215" />
<Node Id="10077:[5945..6022).1" Label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 741216" />
<Node Id="10077:[32474..32502).2" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 741217" />
<Node Id="10077:[32504..32523).2" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 741218" />
<Node Id="10077:[44231..44317).33" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 741219" />
<Node Id="10077:[44231..44317).35" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 741220" />
<Node Id="10077:[6212..6251).1" Label="SourceMemberMethodSymbol method = null; 741221" />
<Node Id="10077:[6275..6566).1" Label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    } 741222" />
<Node Id="10077:[6590..6839).1" Label="if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    } 741223" />
<Node Id="10077:[6863..6941).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 741224" />
<Node Id="10077:[6878..6940).1" Label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 741225" />
<Node Id="10307:[3496..3521).2" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 741226" />
<Node Id="10307:[3452..3756).2" Label="param WithUnsafeRegionIfNecessary(this) 741227" />
<Node Id="10077:[6963..6974).1" Label="binderCache 741228" />
<Node Id="10077:[2110..2139).8" Label="return _factory._binderCache; 741229" />
<Node Id="10077:[6963..7001).1" Label="binderCache.TryAdd(key, resultBinder); 741230" />
<Node Id="10077:[6963..7001).2" Label="binderCache.TryAdd(key, resultBinder); 741231" />
<Node Id="10077:[6963..7001).3" Label="binderCache.TryAdd(key, resultBinder); 741232" />
<Node Id="10077:[6963..7001).5" Label="binderCache.TryAdd(key, resultBinder); 741233" />
<Node Id="10077:[7040..7060).1" Label="return resultBinder; 741234" />
<Node Id="10077:[2926..2971).19" Label="return ((CSharpSyntaxNode)node).Accept(this); 741235" />
<Node Id="10307:[3228..3245).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 741236" />
<Node Id="10307:[3247..3264).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 741237" />
<Node Id="10307:[3165..3440).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 741238" />
<Node Id="10307:[3290..3331).1" Label="Debug.Assert((object)containing != null); 741239" />
<Node Id="10307:[3290..3331).2" Label="Debug.Assert((object)containing != null); 741240" />
<Node Id="10307:[3345..3429).1" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 741241" />
<Node Id="10307:[3345..3429).2" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 741242" />
<Node Id="10307:[3345..3429).4" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 741243" />
<Node Id="10307:[3345..3429).5" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 741244" />
<Node Id="10307:[3352..3428).1" Label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 741245" />
<Node Id="10307:[1072..1083).1" Label="param BinderWithContainingMemberOrLambda(Binder next) 741246" />
<Node Id="10307:[1085..1102).1" Label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 741247" />
<Node Id="10307:[1104..1135).1" Label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 741248" />
<Node Id="10307:[1028..1341).1" Label="param BinderWithContainingMemberOrLambda(this) 741249" />
<Node Id="10307:[1161..1165).1" Label="next 741250" />
<Node Id="10307:[1167..1172).1" Label="flags 741251" />
<Node Id="10307:[1028..1341).2" Label="param BinderWithContainingMemberOrLambda(this) 741252" />
<Node Id="10286:[1549..1560).2" Label="param Binder(Binder next) 741253" />
<Node Id="10286:[1562..1579).2" Label="param Binder(BinderFlags flags) 741254" />
<Node Id="10286:[1532..2083).2" Label="param Binder(this) 741255" />
<Node Id="10286:[726..773).6" Label="internal CSharpCompilation Compilation { get; } 741256" />
<Node Id="10286:[815..820).6" Label="Flags 741257" />
<Node Id="10286:[2975..3015).6" Label="protected internal Binder? Next { get; } 741258" />
<Node Id="10286:[17802..17818).6" Label="_lazyConversions 741259" />
<Node Id="10286:[18200..18223).6" Label="_lazyOverloadResolution 741260" />
<Node Id="10286:[1605..1638).5" Label="RoslynDebug.Assert(next != null); 741261" />
<Node Id="10286:[1605..1638).6" Label="RoslynDebug.Assert(next != null); 741262" />
<Node Id="10286:[1688..1781).7" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 741263" />
<Node Id="10286:[1688..1781).8" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 741264" />
<Node Id="10286:[1708..1779).2" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 741265" />
<Node Id="10298:[471..492).17" Label="param Includes(this BinderFlags self) 741266" />
<Node Id="10298:[494..511).17" Label="param Includes(BinderFlags other) 741267" />
<Node Id="10286:[1820..1963).7" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 741268" />
<Node Id="10286:[1820..1963).8" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 741269" />
<Node Id="10286:[1840..1888).2" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 741270" />
<Node Id="10298:[471..492).18" Label="param Includes(this BinderFlags self) 741271" />
<Node Id="10298:[494..511).18" Label="param Includes(BinderFlags other) 741272" />
<Node Id="10286:[1977..1981).2" Label="Next 741273" />
<Node Id="10286:[2003..2013).2" Label="this.Flags 741274" />
<Node Id="10286:[2036..2052).2" Label="this.Compilation 741275" />
<Node Id="10307:[683..708).1" Label="_containingMemberOrLambda 741276" />
<Node Id="10307:[1206..1253).1" Label="Debug.Assert(containingMemberOrLambda != null); 741277" />
<Node Id="10307:[1206..1253).2" Label="Debug.Assert(containingMemberOrLambda != null); 741278" />
<Node Id="10307:[1273..1298).1" Label="_containingMemberOrLambda 741279" />
<Node Id="25002:[4395..4432).35" Label="var diagnostics = c.GetDiagnostics(); 741280" />
<Node Id="10313:[1230..1280).1" Label="param ValidateParameterNameConflicts(ImmutableArray$TypeParameterSymbol$ typeParameters) 741281" />
<Node Id="10313:[1295..1337).1" Label="param ValidateParameterNameConflicts(ImmutableArray$ParameterSymbol$ parameters) 741282" />
<Node Id="10313:[1352..1376).1" Label="param ValidateParameterNameConflicts(bool allowShadowingNames) 741283" />
<Node Id="10313:[1391..1416).1" Label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 741284" />
<Node Id="10313:[1171..3563).1" Label="param ValidateParameterNameConflicts(this) 741285" />
<Node Id="10313:[1442..1480).1" Label="PooledHashSet$string$? tpNames = null; 741286" />
<Node Id="10313:[1494..2257).1" Label="if (!typeParameters.IsDefaultOrEmpty)
            {
                tpNames = PooledHashSet$string$.GetInstance();
                foreach (var tp in typeParameters)
                {
                    var name = tp.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (!tpNames.Add(name))
                    {
                        // Type parameter declaration name conflicts are detected elsewhere
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);
                    }
                }
            } 741287" />
<Node Id="10313:[2273..2310).1" Label="PooledHashSet$string$? pNames = null; 741288" />
<Node Id="10313:[2324..3491).1" Label="if (!parameters.IsDefaultOrEmpty)
            {
                pNames = PooledHashSet$string$.GetInstance();
                foreach (var p in parameters)
                {
                    var name = p.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    }

                    if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    }
                }
            } 741289" />
<Node Id="10313:[3507..3523).1" Label="tpNames?.Free(); 741290" />
<Node Id="10313:[3537..3552).1" Label="pNames?.Free(); 741291" />
<Node Id="10319:[13685..13708).1" Label="param BindType(ExpressionSyntax syntax) 741292" />
<Node Id="10319:[13710..13735).1" Label="param BindType(DiagnosticBag diagnostics) 741293" />
<Node Id="10319:[13737..13783).1" Label="param BindType(ConsList$TypeSymbol$ basesBeingResolved = null) 741294" />
<Node Id="10319:[13785..13824).1" Label="param BindType(bool suppressUseSiteDiagnostics = false) 741295" />
<Node Id="10319:[13647..14061).1" Label="param BindType(this) 741296" />
<Node Id="10319:[13850..13948).1" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 741297" />
<Node Id="10319:[13850..13948).2" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 741298" />
<Node Id="10319:[13850..13948).3" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 741299" />
<Node Id="10319:[13850..13948).4" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 741300" />
<Node Id="10319:[13863..13947).1" Label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 741301" />
<Node Id="10319:[14931..14954).1" Label="param BindTypeOrAlias(ExpressionSyntax syntax) 741302" />
<Node Id="10319:[14956..14981).1" Label="param BindTypeOrAlias(DiagnosticBag diagnostics) 741303" />
<Node Id="10319:[14983..15029).1" Label="param BindTypeOrAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 741304" />
<Node Id="10319:[15031..15070).1" Label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 741305" />
<Node Id="10319:[14862..16302).1" Label="param BindTypeOrAlias(this) 741306" />
<Node Id="10319:[15096..15130).1" Label="Debug.Assert(diagnostics != null); 741307" />
<Node Id="10319:[15096..15130).2" Label="Debug.Assert(diagnostics != null); 741308" />
<Node Id="10319:[15146..15291).1" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 741309" />
<Node Id="10319:[15146..15291).2" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 741310" />
<Node Id="10319:[15146..15291).3" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 741311" />
<Node Id="10319:[15146..15291).4" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 741312" />
<Node Id="10319:[15146..15291).5" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 741313" />
<Node Id="10319:[15146..15291).6" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 741314" />
<Node Id="10319:[15159..15290).1" Label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 741315" />
<Node Id="10319:[20002..20025).2" Label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 741316" />
<Node Id="10319:[20027..20052).2" Label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 741317" />
<Node Id="10319:[20054..20093).2" Label="param BindNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 741318" />
<Node Id="10319:[20095..20126).2" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 741319" />
<Node Id="10319:[19916..30085).2" Label="param BindNamespaceOrTypeOrAliasSymbol(this) 741320" />
<Node Id="10319:[20152..24647).3" Label="switch (syntax.Kind())
            {
                case SyntaxKind.NullableType:
                    return bindNullable(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.PredefinedType:
                    return bindPredefined(syntax, diagnostics);

                case SyntaxKind.IdentifierName:
                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);

                case SyntaxKind.GenericName:
                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);

                case SyntaxKind.AliasQualifiedName:
                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);

                case SyntaxKind.QualifiedName:
                    {
                        var node = (QualifiedNameSyntax)syntax;
                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.SimpleMemberAccessExpression:
                    {
                        var node = (MemberAccessExpressionSyntax)syntax;
                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.ArrayType:
                    {
                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);
                    }

                case SyntaxKind.PointerType:
                    return bindPointer(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.FunctionPointerType:
                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;
                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)
                    {
                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;
                        var asterisk = functionPointerTypeSyntax.AsteriskToken;
                        RoslynDebug.Assert(@delegate.SyntaxTree is object);
                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));
                    }

                    return TypeWithAnnotations.Create(
                        FunctionPointerTypeSymbol.CreateFromSource(
                            functionPointerTypeSyntax,
                            this,
                            diagnostics,
                            basesBeingResolved,
                            suppressUseSiteDiagnostics));

                case SyntaxKind.OmittedTypeArgument:
                    {
                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);
                    }

                case SyntaxKind.TupleType:
                    {
                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;
                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));
                    }

                case SyntaxKind.RefType:
                    {
                        // ref needs to be handled by the caller
                        var refTypeSyntax = (RefTypeSyntax)syntax;
                        var refToken = refTypeSyntax.RefKeyword;
                        if (!syntax.HasErrors)
                        {
                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());
                        }

                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                default:
                    {
                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind
                        // is attempted to be bound as a type pattern.
                        return createErrorType(syntax);
                    }
            } 741321" />
<Node Id="10319:[20508..20675).9" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 741322" />
<Node Id="10319:[20508..20675).10" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 741323" />
<Node Id="10319:[20508..20675).11" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 741324" />
<Node Id="10319:[20508..20675).12" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 741325" />
<Node Id="10319:[20508..20675).13" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 741326" />
<Node Id="10319:[20515..20674).2" Label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 741327" />
<Node Id="10319:[41849..41874).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 741328" />
<Node Id="10319:[41889..41914).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 741329" />
<Node Id="10319:[41929..41968).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 741330" />
<Node Id="10319:[41983..42014).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 741331" />
<Node Id="10319:[42029..42063).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 741332" />
<Node Id="10319:[41732..45579).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 741333" />
<Node Id="10319:[42089..42141).2" Label="var identifierValueText = node.Identifier.ValueText; 741334" />
<Node Id="10319:[42478..42805).4" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 741335" />
<Node Id="10319:[42821..42938).9" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 741336" />
<Node Id="10319:[42821..42938).10" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 741337" />
<Node Id="10319:[42821..42938).11" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 741338" />
<Node Id="10319:[42821..42938).12" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 741339" />
<Node Id="10319:[42821..42938).14" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 741340" />
<Node Id="10319:[42839..42937).2" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 741341" />
<Node Id="10319:[63849..63870).2" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 741342" />
<Node Id="10319:[63885..63919).2" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 741343" />
<Node Id="10319:[63934..63945).2" Label="param CreateErrorIfLookupOnTypeParameter(string name) 741344" />
<Node Id="10319:[63960..63969).2" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 741345" />
<Node Id="10319:[63984..64009).2" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 741346" />
<Node Id="10319:[63768..64484).2" Label="param CreateErrorIfLookupOnTypeParameter(this) 741347" />
<Node Id="10319:[64035..64445).5" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 741348" />
<Node Id="10319:[64035..64445).6" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 741349" />
<Node Id="10319:[64461..64473).3" Label="return null; 741350" />
<Node Id="10319:[42821..42938).15" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 741351" />
<Node Id="10319:[42952..43079).4" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 741352" />
<Node Id="10319:[42952..43079).5" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 741353" />
<Node Id="10319:[43108..43134).2" Label="LookupResult.GetInstance() 741354" />
<Node Id="10354:[11244..11285).7" Label="var instance = s_poolInstance.Allocate(); 741355" />
<Node Id="10354:[11312..11328).2" Label="instance.IsClear 741356" />
<Node Id="10354:[3684..3818).6" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 741357" />
<Node Id="10354:[3720..3803).37" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741358" />
<Node Id="10354:[3720..3803).38" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741359" />
<Node Id="10354:[3720..3803).39" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741360" />
<Node Id="10354:[11299..11330).4" Label="Debug.Assert(instance.IsClear); 741361" />
<Node Id="10319:[43149..43246).7" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 741362" />
<Node Id="10319:[43149..43246).8" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 741363" />
<Node Id="10319:[43173..43245).2" Label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 741364" />
<Node Id="10319:[50313..50328).2" Label="param GetSimpleNameLookupOptions(NameSyntax node) 741365" />
<Node Id="10319:[50330..50355).2" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 741366" />
<Node Id="10319:[50381..51340).4" Label="if (SyntaxFacts.IsAttributeName(node))
            {
                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.
                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.
                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity
                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled
                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only
                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.

                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;
            }
            else
            {
                return LookupOptions.NamespacesOrTypesOnly;
            } 741367" />
<Node Id="10319:[51282..51325).2" Label="return LookupOptions.NamespacesOrTypesOnly; 741368" />
<Node Id="10319:[43262..43312).3" Label="HashSet$DiagnosticInfo$ useSiteDiagnostics = null; 741369" />
<Node Id="10319:[43326..43490).13" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 741370" />
<Node Id="10319:[43326..43490).14" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 741371" />
<Node Id="10319:[43326..43490).15" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 741372" />
<Node Id="10319:[43326..43490).17" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 741373" />
<Node Id="10319:[43326..43490).18" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 741374" />
<Node Id="10319:[43326..43490).21" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 741375" />
<Node Id="10319:[43326..43489).2" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 741376" />
<Node Id="10312:[1028..1062).2" Label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 741377" />
<Node Id="10312:[1077..1093).2" Label="param LookupSymbolsSimpleName(string plainName) 741378" />
<Node Id="10312:[1108..1117).2" Label="param LookupSymbolsSimpleName(int arity) 741379" />
<Node Id="10312:[1132..1171).2" Label="param LookupSymbolsSimpleName(ConsList$TypeSymbol$ basesBeingResolved) 741380" />
<Node Id="10312:[1186..1207).2" Label="param LookupSymbolsSimpleName(LookupOptions options) 741381" />
<Node Id="10312:[1222..1235).2" Label="param LookupSymbolsSimpleName(bool diagnose) 741382" />
<Node Id="10312:[1250..1296).2" Label="param LookupSymbolsSimpleName(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741383" />
<Node Id="10312:[942..1750).2" Label="param LookupSymbolsSimpleName(this) 741384" />
<Node Id="10312:[1322..1739).4" Label="if (options.IsAttributeTypeLookup())
            {
                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 741385" />
<Node Id="10312:[1326..1357).2" Label="options.IsAttributeTypeLookup() 741386" />
<Node Id="10353:[7504..7530).3" Label="param IsAttributeTypeLookup(this LookupOptions options) 741387" />
<Node Id="10353:[7556..7642).7" Label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 741388" />
<Node Id="10312:[1585..1724).11" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741389" />
<Node Id="10312:[1585..1724).12" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741390" />
<Node Id="10312:[1585..1724).13" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741391" />
<Node Id="10312:[1585..1724).14" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741392" />
<Node Id="10312:[1585..1724).15" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741393" />
<Node Id="10312:[1585..1724).16" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741394" />
<Node Id="10312:[1585..1724).17" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741395" />
<Node Id="10312:[1585..1723).2" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 741396" />
<Node Id="10312:[5755..5789).2" Label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 741397" />
<Node Id="10312:[5804..5815).2" Label="param LookupSymbolsOrMembersInternal(string name) 741398" />
<Node Id="10312:[5830..5839).2" Label="param LookupSymbolsOrMembersInternal(int arity) 741399" />
<Node Id="10312:[5854..5893).2" Label="param LookupSymbolsOrMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 741400" />
<Node Id="10312:[5908..5929).2" Label="param LookupSymbolsOrMembersInternal(LookupOptions options) 741401" />
<Node Id="10312:[5944..5957).2" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 741402" />
<Node Id="10312:[5972..6018).2" Label="param LookupSymbolsOrMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741403" />
<Node Id="10312:[5663..6444).2" Label="param LookupSymbolsOrMembersInternal(this) 741404" />
<Node Id="10312:[6044..6433).4" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 741405" />
<Node Id="10312:[6044..6433).5" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 741406" />
<Node Id="10312:[6110..6221).10" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741407" />
<Node Id="10312:[6110..6221).11" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741408" />
<Node Id="10312:[6110..6221).12" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741409" />
<Node Id="10312:[6110..6221).13" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741410" />
<Node Id="10312:[6110..6221).14" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741411" />
<Node Id="10312:[6110..6221).15" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741412" />
<Node Id="10312:[6110..6220).2" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 741413" />
<Node Id="10312:[3717..3728).2" Label="param LookupSymbolsInternal(string name) 741414" />
<Node Id="10312:[3730..3739).2" Label="param LookupSymbolsInternal(int arity) 741415" />
<Node Id="10312:[3741..3780).2" Label="param LookupSymbolsInternal(ConsList$TypeSymbol$ basesBeingResolved) 741416" />
<Node Id="10312:[3782..3803).2" Label="param LookupSymbolsInternal(LookupOptions options) 741417" />
<Node Id="10312:[3805..3818).2" Label="param LookupSymbolsInternal(bool diagnose) 741418" />
<Node Id="10312:[3820..3866).2" Label="param LookupSymbolsInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741419" />
<Node Id="10312:[3645..5112).2" Label="param LookupSymbolsInternal(this) 741420" />
<Node Id="10312:[3905..3919).2" Label="result.IsClear 741421" />
<Node Id="10354:[3684..3818).7" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 741422" />
<Node Id="10354:[3720..3803).45" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741423" />
<Node Id="10354:[3720..3803).46" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741424" />
<Node Id="10354:[3720..3803).47" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741425" />
<Node Id="10312:[3892..3921).4" Label="Debug.Assert(result.IsClear); 741426" />
<Node Id="10312:[3935..3968).5" Label="Debug.Assert(options.AreValid()); 741427" />
<Node Id="10312:[3948..3966).2" Label="options.AreValid() 741428" />
<Node Id="10353:[4698..4724).3" Label="param AreValid(this LookupOptions options) 741429" />
<Node Id="10353:[4750..4847).5" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 741430" />
<Node Id="10353:[4863..5000).9" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 741431" />
<Node Id="10353:[4863..5000).10" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 741432" />
<Node Id="10353:[5079..5183).5" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 741433" />
<Node Id="10353:[5197..5323).7" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 741434" />
<Node Id="10353:[5485..5759).13" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 741435" />
<Node Id="10353:[5485..5759).14" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 741436" />
<Node Id="10353:[5485..5759).15" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 741437" />
<Node Id="10353:[5775..5979).9" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 741438" />
<Node Id="10353:[5775..5979).11" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 741439" />
<Node Id="10353:[5995..6029).7" Label="return OnlyOneBitSet(onlyOptions); 741440" />
<Node Id="10353:[6002..6028).3" Label="OnlyOneBitSet(onlyOptions) 741441" />
<Node Id="10353:[6343..6358).3" Label="param OnlyOneBitSet(LookupOptions o) 741442" />
<Node Id="10353:[6384..6410).13" Label="return (o & (o - 1)) == 0; 741443" />
<Node Id="10353:[6384..6410).14" Label="return (o & (o - 1)) == 0; 741444" />
<Node Id="10312:[3984..4005).3" Label="Binder binder = null; 741445" />
<Node Id="10312:[4019..5073).19" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 741446" />
<Node Id="10312:[4019..5073).20" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 741447" />
<Node Id="10312:[4060..4080).4" Label="result.IsMultiViable 741448" />
<Node Id="10354:[4962..4966).7" Label="Kind 741449" />
<Node Id="10312:[4019..5073).23" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 741450" />
<Node Id="10312:[4534..4658).21" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 741451" />
<Node Id="10312:[4534..4658).22" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 741452" />
<Node Id="10312:[4534..4658).25" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 741453" />
<Node Id="10312:[5188..5207).2" Label="param LookupSymbolsInSingleBinder(LookupResult result) 741454" />
<Node Id="10312:[5209..5220).2" Label="param LookupSymbolsInSingleBinder(string name) 741455" />
<Node Id="10312:[5222..5231).2" Label="param LookupSymbolsInSingleBinder(int arity) 741456" />
<Node Id="10312:[5233..5272).2" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 741457" />
<Node Id="10312:[5274..5295).2" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 741458" />
<Node Id="10312:[5297..5318).2" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 741459" />
<Node Id="10312:[5320..5333).2" Label="param LookupSymbolsInSingleBinder(bool diagnose) 741460" />
<Node Id="10312:[5124..5404).2" Label="param LookupSymbolsInSingleBinder(this) 741461" />
<Node Id="10312:[4685..4699).3" Label="result.IsClear 741462" />
<Node Id="10354:[3684..3818).8" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 741463" />
<Node Id="10354:[3720..3803).53" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741464" />
<Node Id="10354:[3720..3803).54" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741465" />
<Node Id="10354:[3720..3803).55" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741466" />
<Node Id="10312:[4680..4787).5" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 741467" />
<Node Id="10312:[4826..5058).11" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 741468" />
<Node Id="10312:[4826..5058).12" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 741469" />
<Node Id="10346:[10663..10672).2" Label="param LookupSymbolsInSingleBinder(int arity) 741470" />
<Node Id="10346:[10674..10713).2" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 741471" />
<Node Id="10346:[10761..10774).2" Label="param LookupSymbolsInSingleBinder(bool diagnose) 741472" />
<Node Id="10346:[10861..10875).2" Label="result.IsClear 741473" />
<Node Id="10354:[3684..3818).9" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 741474" />
<Node Id="10354:[3720..3803).61" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741475" />
<Node Id="10354:[3720..3803).62" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741476" />
<Node Id="10354:[3720..3803).63" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741477" />
<Node Id="10346:[10848..10877).4" Label="Debug.Assert(result.IsClear); 741478" />
<Node Id="10346:[10897..10914).2" Label="IsSubmissionClass 741479" />
<Node Id="10346:[7666..7775).2" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 741480" />
<Node Id="10346:[7672..7773).4" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 741481" />
<Node Id="10346:[10893..11127).3" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 741482" />
<Node Id="10346:[3525..3638).17" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 741483" />
<Node Id="10312:[7718..7727).2" Label="param LookupMembersInternal(int arity) 741484" />
<Node Id="10312:[7729..7768).2" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 741485" />
<Node Id="10312:[7816..7829).2" Label="param LookupMembersInternal(bool diagnose) 741486" />
<Node Id="10312:[7615..8420).2" Label="param LookupMembersInternal(this) 741487" />
<Node Id="10312:[7903..7936).5" Label="Debug.Assert(options.AreValid()); 741488" />
<Node Id="10312:[7916..7934).2" Label="options.AreValid() 741489" />
<Node Id="10353:[4698..4724).4" Label="param AreValid(this LookupOptions options) 741490" />
<Node Id="10353:[4750..4847).7" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 741491" />
<Node Id="10353:[4863..5000).13" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 741492" />
<Node Id="10353:[4863..5000).14" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 741493" />
<Node Id="10353:[5079..5183).7" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 741494" />
<Node Id="10353:[5197..5323).10" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 741495" />
<Node Id="10353:[5485..5759).19" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 741496" />
<Node Id="10353:[5485..5759).20" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 741497" />
<Node Id="10353:[5485..5759).21" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 741498" />
<Node Id="10353:[5775..5979).13" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 741499" />
<Node Id="10353:[5775..5979).15" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 741500" />
<Node Id="10353:[5995..6029).10" Label="return OnlyOneBitSet(onlyOptions); 741501" />
<Node Id="10353:[6002..6028).4" Label="OnlyOneBitSet(onlyOptions) 741502" />
<Node Id="10353:[6343..6358).4" Label="param OnlyOneBitSet(LookupOptions o) 741503" />
<Node Id="10353:[6384..6410).19" Label="return (o & (o - 1)) == 0; 741504" />
<Node Id="10353:[6384..6410).20" Label="return (o & (o - 1)) == 0; 741505" />
<Node Id="10312:[7952..7977).5" Label="Debug.Assert(arity $= 0); 741506" />
<Node Id="10312:[7952..7977).6" Label="Debug.Assert(arity $= 0); 741507" />
<Node Id="10312:[8247..8394).1" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741508" />
<Node Id="10312:[8247..8394).4" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741509" />
<Node Id="10312:[8247..8394).5" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741510" />
<Node Id="10312:[8247..8394).8" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741511" />
<Node Id="10312:[8247..8393).1" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 741512" />
<Node Id="10312:[8543..8562).1" Label="param LookupMembersInType(LookupResult result) 741513" />
<Node Id="10312:[8564..8579).1" Label="param LookupMembersInType(TypeSymbol type) 741514" />
<Node Id="10312:[8581..8592).1" Label="param LookupMembersInType(string name) 741515" />
<Node Id="10312:[8594..8603).1" Label="param LookupMembersInType(int arity) 741516" />
<Node Id="10312:[8605..8644).1" Label="param LookupMembersInType(ConsList$TypeSymbol$ basesBeingResolved) 741517" />
<Node Id="10312:[8646..8667).1" Label="param LookupMembersInType(LookupOptions options) 741518" />
<Node Id="10312:[8669..8690).1" Label="param LookupMembersInType(Binder originalBinder) 741519" />
<Node Id="10312:[8692..8705).1" Label="param LookupMembersInType(bool diagnose) 741520" />
<Node Id="10312:[8707..8753).1" Label="param LookupMembersInType(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741521" />
<Node Id="10312:[8508..10685).1" Label="param LookupMembersInType(this) 741522" />
<Node Id="10312:[8779..10524).1" Label="switch (type.TypeKind)
            {
                case TypeKind.TypeParameter:
                    this.LookupMembersInTypeParameter(result, (TypeParameterSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Interface:
                    this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Class:
                case TypeKind.Struct:
                case TypeKind.Enum:
                case TypeKind.Delegate:
                case TypeKind.Array:
                case TypeKind.Dynamic:
                    this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Submission:
                    this.LookupMembersInSubmissions(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Error:
                    LookupMembersInErrorType(result, (ErrorTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Pointer:
                case TypeKind.FunctionPointer:
                    result.Clear();
                    break;

                case TypeKind.Unknown:
                default:
                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);
            } 741523" />
<Node Id="10312:[9577..9709).1" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741524" />
<Node Id="10312:[9577..9709).2" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741525" />
<Node Id="10312:[9577..9709).3" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741526" />
<Node Id="10312:[9577..9709).4" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741527" />
<Node Id="10312:[9577..9709).5" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741528" />
<Node Id="10312:[9577..9709).6" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741529" />
<Node Id="10312:[9577..9709).7" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741530" />
<Node Id="10312:[9577..9709).8" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741531" />
<Node Id="10312:[9577..9709).9" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741532" />
<Node Id="10312:[9577..9708).1" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 741533" />
<Node Id="10312:[34707..34726).1" Label="param LookupMembersInClass(LookupResult result) 741534" />
<Node Id="10312:[34741..34756).1" Label="param LookupMembersInClass(TypeSymbol type) 741535" />
<Node Id="10312:[34771..34782).1" Label="param LookupMembersInClass(string name) 741536" />
<Node Id="10312:[34797..34806).1" Label="param LookupMembersInClass(int arity) 741537" />
<Node Id="10312:[34821..34860).1" Label="param LookupMembersInClass(ConsList$TypeSymbol$ basesBeingResolved) 741538" />
<Node Id="10312:[34875..34896).1" Label="param LookupMembersInClass(LookupOptions options) 741539" />
<Node Id="10312:[34911..34932).1" Label="param LookupMembersInClass(Binder originalBinder) 741540" />
<Node Id="10312:[34947..34960).1" Label="param LookupMembersInClass(bool diagnose) 741541" />
<Node Id="10312:[34975..35021).1" Label="param LookupMembersInClass(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741542" />
<Node Id="10312:[34659..35191).1" Label="param LookupMembersInClass(this) 741543" />
<Node Id="10312:[35047..35180).1" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741544" />
<Node Id="10312:[35047..35180).2" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741545" />
<Node Id="10312:[35047..35180).3" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741546" />
<Node Id="10312:[35047..35180).4" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741547" />
<Node Id="10312:[35047..35180).5" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741548" />
<Node Id="10312:[35047..35180).6" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741549" />
<Node Id="10312:[35047..35180).7" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741550" />
<Node Id="10312:[35047..35180).9" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741551" />
<Node Id="10312:[35047..35180).10" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741552" />
<Node Id="10312:[35047..35179).1" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics) 741553" />
<Node Id="10312:[35313..35332).1" Label="param LookupMembersInClass(LookupResult result) 741554" />
<Node Id="10312:[35347..35362).1" Label="param LookupMembersInClass(TypeSymbol type) 741555" />
<Node Id="10312:[35377..35388).1" Label="param LookupMembersInClass(string name) 741556" />
<Node Id="10312:[35403..35412).1" Label="param LookupMembersInClass(int arity) 741557" />
<Node Id="10312:[35427..35466).1" Label="param LookupMembersInClass(ConsList$TypeSymbol$ basesBeingResolved) 741558" />
<Node Id="10312:[35481..35502).1" Label="param LookupMembersInClass(LookupOptions options) 741559" />
<Node Id="10312:[35517..35538).1" Label="param LookupMembersInClass(Binder originalBinder) 741560" />
<Node Id="10312:[35553..35581).1" Label="param LookupMembersInClass(TypeSymbol accessThroughType) 741561" />
<Node Id="10312:[35596..35609).1" Label="param LookupMembersInClass(bool diagnose) 741562" />
<Node Id="10312:[35624..35670).1" Label="param LookupMembersInClass(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741563" />
<Node Id="10312:[35265..38808).1" Label="param LookupMembersInClass(this) 741564" />
<Node Id="10312:[35696..35731).1" Label="Debug.Assert((object)type != null); 741565" />
<Node Id="10312:[35696..35731).2" Label="Debug.Assert((object)type != null); 741566" />
<Node Id="10312:[35745..35826).1" Label="Debug.Assert(!type.IsInterfaceType() && type.TypeKind != TypeKind.TypeParameter); 741567" />
<Node Id="10312:[35842..35872).1" Label="TypeSymbol currentType = type; 741568" />
<Node Id="10312:[35898..35924).1" Label="LookupResult.GetInstance() 741569" />
<Node Id="10354:[3068..3073).2" Label="_kind 741570" />
<Node Id="10354:[3200..3211).2" Label="_symbolList 741571" />
<Node Id="10354:[3319..3325).2" Label="_error 741572" />
<Node Id="10354:[3380..3385).2" Label="_pool 741573" />
<Node Id="10354:[11312..11328).3" Label="instance.IsClear 741574" />
<Node Id="10354:[3684..3818).10" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 741575" />
<Node Id="10354:[3720..3803).69" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741576" />
<Node Id="10354:[3720..3803).70" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741577" />
<Node Id="10354:[3720..3803).71" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741578" />
<Node Id="10354:[11299..11330).7" Label="Debug.Assert(instance.IsClear); 741579" />
<Node Id="10312:[35888..35925).1" Label="var tmp = LookupResult.GetInstance(); 741580" />
<Node Id="10312:[35939..35985).1" Label="PooledHashSet$NamedTypeSymbol$ visited = null; 741581" />
<Node Id="10312:[35999..38740).1" Label="while ((object)currentType != null)
            {
                tmp.Clear();
                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);

                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);

                // If the type is from a winmd and implements any of the special WinRT collection
                // projections then we may need to add underlying interface members. 
                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;
                if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                }

                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes
                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);

                // short circuit looking up bases if we already have a viable result and we won't be adding on more
                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                }

                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                }

                // As in dev11, we don't consider inherited members within crefs.
                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,
                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.
                if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                }

                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);
                if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                }
            } 741582" />
<Node Id="10312:[35999..38740).2" Label="while ((object)currentType != null)
            {
                tmp.Clear();
                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);

                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);

                // If the type is from a winmd and implements any of the special WinRT collection
                // projections then we may need to add underlying interface members. 
                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;
                if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                }

                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes
                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);

                // short circuit looking up bases if we already have a viable result and we won't be adding on more
                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                }

                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                }

                // As in dev11, we don't consider inherited members within crefs.
                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,
                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.
                if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                }

                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);
                if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                }
            } 741583" />
<Node Id="10312:[36067..36078).1" Label="tmp.Clear() 741584" />
<Node Id="10354:[3841..3991).2" Label="param Clear(this) 741585" />
<Node Id="10312:[36067..36079).1" Label="tmp.Clear(); 741586" />
<Node Id="10312:[36097..36258).1" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741587" />
<Node Id="10312:[36097..36258).2" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741588" />
<Node Id="10312:[36097..36258).3" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741589" />
<Node Id="10312:[36097..36258).4" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741590" />
<Node Id="10312:[36097..36258).5" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741591" />
<Node Id="10312:[36097..36258).6" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741592" />
<Node Id="10312:[36097..36258).7" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741593" />
<Node Id="10312:[36097..36258).8" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741594" />
<Node Id="10312:[36097..36258).9" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741595" />
<Node Id="10312:[36097..36258).10" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741596" />
<Node Id="10312:[36097..36257).1" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved) 741597" />
<Node Id="10312:[33656..33675).1" Label="param LookupMembersWithoutInheritance(LookupResult result) 741598" />
<Node Id="10312:[33677..33692).1" Label="param LookupMembersWithoutInheritance(TypeSymbol type) 741599" />
<Node Id="10312:[33694..33705).1" Label="param LookupMembersWithoutInheritance(string name) 741600" />
<Node Id="10312:[33707..33716).1" Label="param LookupMembersWithoutInheritance(int arity) 741601" />
<Node Id="10312:[33731..33752).1" Label="param LookupMembersWithoutInheritance(LookupOptions options) 741602" />
<Node Id="10312:[33754..33775).1" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 741603" />
<Node Id="10312:[33777..33805).1" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 741604" />
<Node Id="10312:[33807..33820).1" Label="param LookupMembersWithoutInheritance(bool diagnose) 741605" />
<Node Id="10312:[33822..33868).1" Label="param LookupMembersWithoutInheritance(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741606" />
<Node Id="10312:[33870..33909).1" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 741607" />
<Node Id="10312:[33935..34006).1" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 741608" />
<Node Id="10312:[33935..34006).2" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 741609" />
<Node Id="10312:[33935..34006).3" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 741610" />
<Node Id="10312:[33935..34006).4" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 741611" />
<Node Id="10312:[33949..34005).1" Label="GetCandidateMembers(type, name, options, originalBinder) 741612" />
<Node Id="10312:[61540..61570).2" Label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 741613" />
<Node Id="10312:[61572..61583).2" Label="param GetCandidateMembers(string name) 741614" />
<Node Id="10312:[61585..61606).2" Label="param GetCandidateMembers(LookupOptions options) 741615" />
<Node Id="10312:[61608..61629).2" Label="param GetCandidateMembers(Binder originalBinder) 741616" />
<Node Id="10312:[61655..62327).9" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 741617" />
<Node Id="10312:[61771..61840).1" Label="return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$(); 741618" />
<Node Id="10312:[61771..61840).2" Label="return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$(); 741619" />
<Node Id="10312:[34022..34574).1" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 741620" />
<Node Id="10312:[36097..36258).11" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741621" />
<Node Id="10312:[36278..36360).1" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 741622" />
<Node Id="10312:[36278..36360).2" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 741623" />
<Node Id="10312:[36278..36360).3" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 741624" />
<Node Id="10312:[36278..36360).4" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 741625" />
<Node Id="10312:[36278..36360).5" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 741626" />
<Node Id="10312:[36278..36360).6" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 741627" />
<Node Id="10354:[9012..9030).1" Label="param MergePrioritized(LookupResult other) 741628" />
<Node Id="10354:[8981..9152).1" Label="param MergePrioritized(this) 741629" />
<Node Id="10354:[9060..9070).1" Label="other.Kind 741630" />
<Node Id="10354:[4058..4122).12" Label="get
            {
                return _kind;
            } 741631" />
<Node Id="10354:[9056..9141).1" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 741632" />
<Node Id="10354:[9073..9077).1" Label="Kind 741633" />
<Node Id="10354:[4058..4122).13" Label="get
            {
                return _kind;
            } 741634" />
<Node Id="10354:[9056..9141).2" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 741635" />
<Node Id="10354:[9056..9141).3" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 741636" />
<Node Id="10312:[36566..36625).1" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 741637" />
<Node Id="10312:[36643..36855).1" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 741638" />
<Node Id="10312:[36643..36855).2" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 741639" />
<Node Id="10312:[37061..37078).1" Label="tmp.IsMultiViable 741640" />
<Node Id="10354:[4919..5009).10" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 741641" />
<Node Id="10354:[4094..4107).14" Label="return _kind; 741642" />
<Node Id="10312:[37029..37117).1" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 741643" />
<Node Id="10312:[37258..37278).1" Label="result.IsMultiViable 741644" />
<Node Id="10354:[4919..5009).11" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 741645" />
<Node Id="10354:[4094..4107).15" Label="return _kind; 741646" />
<Node Id="10312:[37254..37416).1" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 741647" />
<Node Id="10312:[37436..37988).1" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 741648" />
<Node Id="10312:[37436..37988).2" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 741649" />
<Node Id="10312:[38290..38338).1" Label="originalBinder.InCrefButNotParameterOrReturnType 741650" />
<Node Id="10306:[3345..3430).1" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 741651" />
<Node Id="10306:[3358..3364).1" Label="InCref 741652" />
<Node Id="10306:[3196..3249).5" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 741653" />
<Node Id="10306:[3202..3247).17" Label="return this.Flags.Includes(BinderFlags.Cref); 741654" />
<Node Id="10306:[3351..3428).1" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 741655" />
<Node Id="10312:[38286..38405).1" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 741656" />
<Node Id="10312:[38425..38538).1" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 741657" />
<Node Id="10312:[38425..38538).2" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 741658" />
<Node Id="10312:[38425..38538).3" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 741659" />
<Node Id="10312:[38425..38538).4" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 741660" />
<Node Id="10312:[38425..38538).5" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 741661" />
<Node Id="10312:[38556..38725).1" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 741662" />
<Node Id="10312:[38556..38725).2" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 741663" />
<Node Id="10312:[38629..38706).1" Label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 741664" />
<Node Id="10312:[38629..38706).2" Label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 741665" />
<Node Id="10312:[36067..36079).2" Label="tmp.Clear(); 741666" />
<Node Id="10312:[36097..36258).15" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741667" />
<Node Id="10312:[36097..36258).17" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741668" />
<Node Id="10312:[36097..36258).18" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741669" />
<Node Id="10312:[36097..36258).19" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741670" />
<Node Id="10312:[33656..33675).2" Label="param LookupMembersWithoutInheritance(LookupResult result) 741671" />
<Node Id="10312:[33707..33716).2" Label="param LookupMembersWithoutInheritance(int arity) 741672" />
<Node Id="10312:[33754..33775).2" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 741673" />
<Node Id="10312:[33777..33805).2" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 741674" />
<Node Id="10312:[33807..33820).2" Label="param LookupMembersWithoutInheritance(bool diagnose) 741675" />
<Node Id="10312:[33870..33909).2" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 741676" />
<Node Id="10312:[61608..61629).3" Label="param GetCandidateMembers(Binder originalBinder) 741677" />
<Node Id="10312:[34022..34574).4" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 741678" />
<Node Id="10354:[9012..9030).2" Label="param MergePrioritized(LookupResult other) 741679" />
<Node Id="10354:[8981..9152).2" Label="param MergePrioritized(this) 741680" />
<Node Id="10354:[9060..9070).2" Label="other.Kind 741681" />
<Node Id="10354:[4058..4122).17" Label="get
            {
                return _kind;
            } 741682" />
<Node Id="10354:[9056..9141).5" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 741683" />
<Node Id="10354:[9073..9077).2" Label="Kind 741684" />
<Node Id="10354:[4058..4122).18" Label="get
            {
                return _kind;
            } 741685" />
<Node Id="10354:[9056..9141).6" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 741686" />
<Node Id="10354:[9056..9141).7" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 741687" />
<Node Id="10312:[36566..36625).2" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 741688" />
<Node Id="10312:[36643..36855).4" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 741689" />
<Node Id="10312:[36643..36855).5" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 741690" />
<Node Id="10312:[37061..37078).2" Label="tmp.IsMultiViable 741691" />
<Node Id="10354:[4094..4107).19" Label="return _kind; 741692" />
<Node Id="10312:[37029..37117).4" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 741693" />
<Node Id="10312:[37258..37278).2" Label="result.IsMultiViable 741694" />
<Node Id="10354:[4094..4107).20" Label="return _kind; 741695" />
<Node Id="10312:[37254..37416).4" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 741696" />
<Node Id="10312:[37436..37988).5" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 741697" />
<Node Id="10312:[38290..38338).2" Label="originalBinder.InCrefButNotParameterOrReturnType 741698" />
<Node Id="10306:[3345..3430).2" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 741699" />
<Node Id="10306:[3358..3364).2" Label="InCref 741700" />
<Node Id="10306:[3196..3249).6" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 741701" />
<Node Id="10306:[3202..3247).21" Label="return this.Flags.Includes(BinderFlags.Cref); 741702" />
<Node Id="10306:[3351..3428).4" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 741703" />
<Node Id="10312:[38286..38405).3" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 741704" />
<Node Id="10312:[38556..38725).4" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 741705" />
<Node Id="10312:[38756..38772).1" Label="visited?.Free(); 741706" />
<Node Id="10312:[38786..38796).1" Label="tmp.Free() 741707" />
<Node Id="10354:[11383..11549).2" Label="param Free(this) 741708" />
<Node Id="10354:[3932..3952).4" Label="_symbolList.Clear(); 741709" />
<Node Id="10354:[11428..11441).2" Label="this.Clear(); 741710" />
<Node Id="10312:[38786..38797).1" Label="tmp.Free(); 741711" />
<Node Id="10312:[35047..35180).11" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741712" />
<Node Id="10312:[9577..9709).10" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741713" />
<Node Id="10346:[12335..12456).1" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741714" />
<Node Id="10346:[12335..12456).4" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741715" />
<Node Id="10346:[12335..12456).5" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741716" />
<Node Id="10346:[12335..12456).7" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741717" />
<Node Id="10346:[12335..12456).8" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741718" />
<Node Id="10346:[12335..12455).1" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 741719" />
<Node Id="10345:[29004..29025).1" Label="param LookupSymbol(Binder originalBinder) 741720" />
<Node Id="10345:[29040..29059).1" Label="param LookupSymbol(LookupResult result) 741721" />
<Node Id="10345:[29074..29085).1" Label="param LookupSymbol(string name) 741722" />
<Node Id="10345:[29100..29109).1" Label="param LookupSymbol(int arity) 741723" />
<Node Id="10345:[29124..29163).1" Label="param LookupSymbol(ConsList$TypeSymbol$ basesBeingResolved) 741724" />
<Node Id="10345:[29178..29199).1" Label="param LookupSymbol(LookupOptions options) 741725" />
<Node Id="10345:[29214..29227).1" Label="param LookupSymbol(bool diagnose) 741726" />
<Node Id="10345:[29242..29288).1" Label="param LookupSymbol(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741727" />
<Node Id="10345:[28963..29726).1" Label="param LookupSymbol(this) 741728" />
<Node Id="10345:[29314..29436).1" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741729" />
<Node Id="10345:[29314..29436).2" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741730" />
<Node Id="10345:[29314..29436).3" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741731" />
<Node Id="10345:[29314..29436).4" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741732" />
<Node Id="10345:[29314..29436).5" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741733" />
<Node Id="10345:[29314..29436).6" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741734" />
<Node Id="10345:[29314..29436).7" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741735" />
<Node Id="10345:[29314..29436).8" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741736" />
<Node Id="10345:[29314..29435).1" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 741737" />
<Node Id="10345:[29788..29809).1" Label="param LookupSymbolInAliases(Binder originalBinder) 741738" />
<Node Id="10345:[29824..29843).1" Label="param LookupSymbolInAliases(LookupResult result) 741739" />
<Node Id="10345:[29858..29869).1" Label="param LookupSymbolInAliases(string name) 741740" />
<Node Id="10345:[29884..29893).1" Label="param LookupSymbolInAliases(int arity) 741741" />
<Node Id="10345:[29908..29947).1" Label="param LookupSymbolInAliases(ConsList$TypeSymbol$ basesBeingResolved) 741742" />
<Node Id="10345:[29962..29983).1" Label="param LookupSymbolInAliases(LookupOptions options) 741743" />
<Node Id="10345:[29998..30011).1" Label="param LookupSymbolInAliases(bool diagnose) 741744" />
<Node Id="10345:[30026..30072).1" Label="param LookupSymbolInAliases(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741745" />
<Node Id="10345:[29738..31666).1" Label="param LookupSymbolInAliases(this) 741746" />
<Node Id="10345:[30127..30163).1" Label="originalBinder.IsSemanticModelBinder 741747" />
<Node Id="10286:[2155..2260).2" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 741748" />
<Node Id="10286:[2191..2245).5" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 741749" />
<Node Id="10286:[2191..2245).6" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 741750" />
<Node Id="10286:[2198..2244).2" Label="this.Flags.Includes(BinderFlags.SemanticModel) 741751" />
<Node Id="10298:[471..492).21" Label="param Includes(this BinderFlags self) 741752" />
<Node Id="10298:[494..511).21" Label="param Includes(BinderFlags other) 741753" />
<Node Id="10345:[30098..30164).1" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 741754" />
<Node Id="10345:[30180..30209).1" Label="AliasAndUsingDirective alias; 741755" />
<Node Id="10345:[30203..30208).1" Label="alias 741756" />
<Node Id="10345:[30223..30867).1" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 741757" />
<Node Id="10345:[30223..30867).2" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 741758" />
<Node Id="10345:[30223..30867).3" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 741759" />
<Node Id="10345:[30883..31655).1" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 741760" />
<Node Id="10345:[29314..29436).9" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741761" />
<Node Id="10345:[29457..29477).1" Label="result.IsMultiViable 741762" />
<Node Id="10354:[4919..5009).16" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 741763" />
<Node Id="10354:[4094..4107).22" Label="return _kind; 741764" />
<Node Id="10345:[29452..29715).1" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 741765" />
<Node Id="10345:[29452..29715).2" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 741766" />
<Node Id="10345:[29452..29715).3" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 741767" />
<Node Id="10345:[29452..29715).5" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 741768" />
<Node Id="10345:[29566..29700).1" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741769" />
<Node Id="10345:[29566..29700).2" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741770" />
<Node Id="10345:[29566..29700).3" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741771" />
<Node Id="10345:[29566..29700).4" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741772" />
<Node Id="10345:[29566..29700).5" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741773" />
<Node Id="10345:[29566..29700).6" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741774" />
<Node Id="10345:[29566..29700).7" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741775" />
<Node Id="10345:[29566..29700).8" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741776" />
<Node Id="10345:[29566..29700).9" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741777" />
<Node Id="10345:[29566..29699).1" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 741778" />
<Node Id="10345:[31734..31789).1" Label="param LookupSymbolInUsings(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 741779" />
<Node Id="10345:[31804..31825).1" Label="param LookupSymbolInUsings(Binder originalBinder) 741780" />
<Node Id="10345:[31840..31859).1" Label="param LookupSymbolInUsings(LookupResult result) 741781" />
<Node Id="10345:[31874..31885).1" Label="param LookupSymbolInUsings(string name) 741782" />
<Node Id="10345:[31900..31909).1" Label="param LookupSymbolInUsings(int arity) 741783" />
<Node Id="10345:[31924..31963).1" Label="param LookupSymbolInUsings(ConsList$TypeSymbol$ basesBeingResolved) 741784" />
<Node Id="10345:[31978..31999).1" Label="param LookupSymbolInUsings(LookupOptions options) 741785" />
<Node Id="10345:[32014..32027).1" Label="param LookupSymbolInUsings(bool diagnose) 741786" />
<Node Id="10345:[32042..32088).1" Label="param LookupSymbolInUsings(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741787" />
<Node Id="10345:[32114..32230).1" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 741788" />
<Node Id="10345:[32114..32230).2" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 741789" />
<Node Id="10345:[32118..32174).1" Label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 741790" />
<Node Id="10298:[471..492).22" Label="param Includes(this BinderFlags self) 741791" />
<Node Id="10298:[494..511).22" Label="param Includes(BinderFlags other) 741792" />
<Node Id="10345:[32275..32311).1" Label="originalBinder.IsSemanticModelBinder 741793" />
<Node Id="10286:[2155..2260).3" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 741794" />
<Node Id="10286:[2191..2245).9" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 741795" />
<Node Id="10286:[2191..2245).10" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 741796" />
<Node Id="10286:[2198..2244).3" Label="this.Flags.Includes(BinderFlags.SemanticModel) 741797" />
<Node Id="10298:[471..492).23" Label="param Includes(this BinderFlags self) 741798" />
<Node Id="10298:[494..511).23" Label="param Includes(BinderFlags other) 741799" />
<Node Id="10345:[32246..32312).1" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 741800" />
<Node Id="10345:[32328..33465).1" Label="foreach (var typeOrNamespace in usings)
            {
                ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);
                foreach (Symbol symbol in candidates)
                {
                    if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    }

                    // Found a match in our list of normal using directives.  Mark the directive
                    // as being seen so that it won't be reported to the user as something that
                    // can be removed.
                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 741801" />
<Node Id="10345:[29566..29700).10" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741802" />
<Node Id="10354:[3720..3803).77" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741803" />
<Node Id="10354:[3720..3803).79" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741804" />
<Node Id="10312:[4680..4787).7" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 741805" />
<Node Id="10312:[4534..4658).39" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 741806" />
<Node Id="10312:[4534..4658).43" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 741807" />
<Node Id="10346:[10663..10672).3" Label="param LookupSymbolsInSingleBinder(int arity) 741808" />
<Node Id="10346:[10761..10774).3" Label="param LookupSymbolsInSingleBinder(bool diagnose) 741809" />
<Node Id="10346:[10861..10875).3" Label="result.IsClear 741810" />
<Node Id="10354:[3684..3818).12" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 741811" />
<Node Id="10354:[3720..3803).85" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741812" />
<Node Id="10354:[3720..3803).86" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741813" />
<Node Id="10354:[3720..3803).87" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741814" />
<Node Id="10346:[10848..10877).7" Label="Debug.Assert(result.IsClear); 741815" />
<Node Id="10346:[10897..10914).3" Label="IsSubmissionClass 741816" />
<Node Id="10346:[7666..7775).3" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 741817" />
<Node Id="10346:[7672..7773).7" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 741818" />
<Node Id="10346:[10893..11127).5" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 741819" />
<Node Id="10346:[3525..3638).24" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 741820" />
<Node Id="10312:[7718..7727).3" Label="param LookupMembersInternal(int arity) 741821" />
<Node Id="10312:[7816..7829).3" Label="param LookupMembersInternal(bool diagnose) 741822" />
<Node Id="10312:[7903..7936).9" Label="Debug.Assert(options.AreValid()); 741823" />
<Node Id="10312:[7916..7934).3" Label="options.AreValid() 741824" />
<Node Id="10353:[4698..4724).5" Label="param AreValid(this LookupOptions options) 741825" />
<Node Id="10353:[4750..4847).9" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 741826" />
<Node Id="10353:[4863..5000).17" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 741827" />
<Node Id="10353:[4863..5000).18" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 741828" />
<Node Id="10353:[5079..5183).9" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 741829" />
<Node Id="10353:[5197..5323).13" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 741830" />
<Node Id="10353:[5485..5759).25" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 741831" />
<Node Id="10353:[5485..5759).26" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 741832" />
<Node Id="10353:[5485..5759).27" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 741833" />
<Node Id="10353:[5775..5979).17" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 741834" />
<Node Id="10353:[5775..5979).19" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 741835" />
<Node Id="10353:[5995..6029).13" Label="return OnlyOneBitSet(onlyOptions); 741836" />
<Node Id="10353:[6002..6028).5" Label="OnlyOneBitSet(onlyOptions) 741837" />
<Node Id="10353:[6343..6358).5" Label="param OnlyOneBitSet(LookupOptions o) 741838" />
<Node Id="10353:[6384..6410).25" Label="return (o & (o - 1)) == 0; 741839" />
<Node Id="10353:[6384..6410).26" Label="return (o & (o - 1)) == 0; 741840" />
<Node Id="10312:[7952..7977).9" Label="Debug.Assert(arity $= 0); 741841" />
<Node Id="10312:[7952..7977).10" Label="Debug.Assert(arity $= 0); 741842" />
<Node Id="10312:[19030..19039).2" Label="param LookupMembersInNamespace(int arity) 741843" />
<Node Id="10312:[19087..19100).2" Label="param LookupMembersInNamespace(bool diagnose) 741844" />
<Node Id="10312:[61608..61629).4" Label="param GetCandidateMembers(Binder originalBinder) 741845" />
<Node Id="10345:[29004..29025).2" Label="param LookupSymbol(Binder originalBinder) 741846" />
<Node Id="10345:[29040..29059).2" Label="param LookupSymbol(LookupResult result) 741847" />
<Node Id="10345:[29100..29109).2" Label="param LookupSymbol(int arity) 741848" />
<Node Id="10345:[29124..29163).2" Label="param LookupSymbol(ConsList$TypeSymbol$ basesBeingResolved) 741849" />
<Node Id="10345:[29178..29199).2" Label="param LookupSymbol(LookupOptions options) 741850" />
<Node Id="10345:[29214..29227).2" Label="param LookupSymbol(bool diagnose) 741851" />
<Node Id="10345:[29788..29809).2" Label="param LookupSymbolInAliases(Binder originalBinder) 741852" />
<Node Id="10345:[29824..29843).2" Label="param LookupSymbolInAliases(LookupResult result) 741853" />
<Node Id="10345:[29884..29893).2" Label="param LookupSymbolInAliases(int arity) 741854" />
<Node Id="10345:[29908..29947).2" Label="param LookupSymbolInAliases(ConsList$TypeSymbol$ basesBeingResolved) 741855" />
<Node Id="10345:[29962..29983).2" Label="param LookupSymbolInAliases(LookupOptions options) 741856" />
<Node Id="10345:[29998..30011).2" Label="param LookupSymbolInAliases(bool diagnose) 741857" />
<Node Id="10345:[30127..30163).2" Label="originalBinder.IsSemanticModelBinder 741858" />
<Node Id="10286:[2155..2260).4" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 741859" />
<Node Id="10286:[2191..2245).13" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 741860" />
<Node Id="10286:[2191..2245).14" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 741861" />
<Node Id="10286:[2198..2244).4" Label="this.Flags.Includes(BinderFlags.SemanticModel) 741862" />
<Node Id="10298:[471..492).24" Label="param Includes(this BinderFlags self) 741863" />
<Node Id="10298:[494..511).24" Label="param Includes(BinderFlags other) 741864" />
<Node Id="10345:[30098..30164).3" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 741865" />
<Node Id="10345:[30497..30626).1" Label="var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741866" />
<Node Id="10345:[30497..30626).2" Label="var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741867" />
<Node Id="10345:[30497..30626).3" Label="var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741868" />
<Node Id="10345:[30497..30626).6" Label="var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741869" />
<Node Id="10345:[30497..30626).7" Label="var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741870" />
<Node Id="10345:[30497..30626).8" Label="var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741871" />
<Node Id="10345:[30507..30625).1" Label="originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved) 741872" />
<Node Id="10312:[63424..63437).2" Label="param CheckViability(Symbol symbol) 741873" />
<Node Id="10312:[63439..63448).2" Label="param CheckViability(int arity) 741874" />
<Node Id="10312:[63450..63471).2" Label="param CheckViability(LookupOptions options) 741875" />
<Node Id="10312:[63473..63501).2" Label="param CheckViability(TypeSymbol accessThroughType) 741876" />
<Node Id="10312:[63503..63516).2" Label="param CheckViability(bool diagnose) 741877" />
<Node Id="10312:[63518..63564).2" Label="param CheckViability(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741878" />
<Node Id="10312:[63566..63612).2" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 741879" />
<Node Id="10312:[63381..70761).2" Label="param CheckViability(this) 741880" />
<Node Id="10312:[63638..63668).2" Label="bool inaccessibleViaQualifier; 741881" />
<Node Id="10312:[63682..63706).2" Label="DiagnosticInfo diagInfo; 741882" />
<Node Id="10312:[64121..69285).8" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 741883" />
<Node Id="10312:[64353..69285).9" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 741884" />
<Node Id="10312:[64353..69285).10" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 741885" />
<Node Id="10312:[64353..69285).11" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 741886" />
<Node Id="10312:[64353..69285).12" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 741887" />
<Node Id="10312:[80978..80991).2" Label="param WrongArity(Symbol symbol) 741888" />
<Node Id="10312:[80993..81002).2" Label="param WrongArity(int arity) 741889" />
<Node Id="10312:[81004..81017).2" Label="param WrongArity(bool diagnose) 741890" />
<Node Id="10312:[81019..81040).2" Label="param WrongArity(LookupOptions options) 741891" />
<Node Id="10312:[81042..81069).2" Label="param WrongArity(out DiagnosticInfo diagInfo) 741892" />
<Node Id="10312:[81095..84034).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 741893" />
<Node Id="10312:[83750..83991).1" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 741894" />
<Node Id="10312:[83750..83991).2" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 741895" />
<Node Id="10312:[84050..84066).3" Label="diagInfo = null; 741896" />
<Node Id="10312:[65229..69285).6" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 741897" />
<Node Id="10312:[66177..69285).16" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 741898" />
<Node Id="10312:[66291..66342).2" Label="RefineAccessThroughType(options, accessThroughType) 741899" />
<Node Id="10312:[75301..75322).2" Label="param RefineAccessThroughType(LookupOptions options) 741900" />
<Node Id="10312:[75324..75352).2" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 741901" />
<Node Id="10312:[75735..75866).6" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 741902" />
<Node Id="10312:[75735..75866).7" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 741903" />
<Node Id="10312:[75742..75804).2" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 741904" />
<Node Id="10312:[75735..75866).9" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 741905" />
<Node Id="10312:[66177..69285).19" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 741906" />
<Node Id="10312:[66177..69285).20" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 741907" />
<Node Id="10312:[77543..77571).2" Label="param IsAccessible(TypeSymbol accessThroughType) 741908" />
<Node Id="10312:[77573..77604).2" Label="param IsAccessible(out bool failedThroughTypeCheck) 741909" />
<Node Id="10312:[77654..77700).2" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 741910" />
<Node Id="10312:[77726..77892).5" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 741911" />
<Node Id="10312:[77726..77892).6" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 741912" />
<Node Id="10312:[77730..77782).2" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 741913" />
<Node Id="10298:[471..492).28" Label="param Includes(this BinderFlags self) 741914" />
<Node Id="10298:[494..511).28" Label="param Includes(BinderFlags other) 741915" />
<Node Id="10312:[78402..78430).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 741916" />
<Node Id="10312:[78432..78463).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 741917" />
<Node Id="10312:[78513..78552).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 741918" />
<Node Id="10346:[8034..8062).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 741919" />
<Node Id="10346:[8064..8095).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 741920" />
<Node Id="10346:[8145..8184).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 741921" />
<Node Id="10346:[8323..8450).1" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 741922" />
<Node Id="10346:[8323..8450).3" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 741923" />
<Node Id="10346:[8323..8450).4" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 741924" />
<Node Id="10346:[8323..8450).5" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 741925" />
<Node Id="10346:[8330..8449).1" Label="this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics) 741926" />
<Node Id="10286:[30070..30083).1" Label="param IsSymbolAccessibleConditional(Symbol symbol) 741927" />
<Node Id="10286:[30098..30120).1" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 741928" />
<Node Id="10286:[30135..30160).1" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 741929" />
<Node Id="10286:[30175..30206).1" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 741930" />
<Node Id="10286:[30221..30268).1" Label="param IsSymbolAccessibleConditional(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 741931" />
<Node Id="10286:[30283..30330).1" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 741932" />
<Node Id="10286:[30012..30691).1" Label="param IsSymbolAccessibleConditional(this) 741933" />
<Node Id="10286:[30356..30522).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 741934" />
<Node Id="10286:[30356..30522).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 741935" />
<Node Id="10286:[30360..30412).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 741936" />
<Node Id="10298:[471..492).29" Label="param Includes(this BinderFlags self) 741937" />
<Node Id="10298:[494..511).29" Label="param Includes(BinderFlags other) 741938" />
<Node Id="10286:[30538..30680).1" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 741939" />
<Node Id="10286:[30538..30680).2" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 741940" />
<Node Id="10286:[30538..30680).3" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 741941" />
<Node Id="10286:[30538..30680).4" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 741942" />
<Node Id="10286:[30538..30680).5" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 741943" />
<Node Id="10286:[30538..30680).6" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 741944" />
<Node Id="10286:[30545..30679).1" Label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 741945" />
<Node Id="10060:[2108..2121).1" Label="param IsSymbolAccessible(Symbol symbol) 741946" />
<Node Id="10060:[2136..2158).1" Label="param IsSymbolAccessible(NamedTypeSymbol within) 741947" />
<Node Id="10060:[2173..2198).1" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 741948" />
<Node Id="10060:[2213..2244).1" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 741949" />
<Node Id="10060:[2259..2305).1" Label="param IsSymbolAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741950" />
<Node Id="10060:[2320..2366).1" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 741951" />
<Node Id="10060:[2392..2555).1" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741952" />
<Node Id="10060:[2392..2555).2" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741953" />
<Node Id="10060:[2392..2555).3" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741954" />
<Node Id="10060:[2392..2555).4" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741955" />
<Node Id="10060:[2392..2555).5" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741956" />
<Node Id="10060:[2392..2555).6" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741957" />
<Node Id="10060:[2392..2555).7" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741958" />
<Node Id="10060:[2399..2554).1" Label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 741959" />
<Node Id="10060:[5593..5606).2" Label="param IsSymbolAccessibleCore(Symbol symbol) 741960" />
<Node Id="10060:[5621..5634).2" Label="param IsSymbolAccessibleCore(Symbol within) 741961" />
<Node Id="10060:[5691..5716).2" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 741962" />
<Node Id="10060:[5731..5762).2" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 741963" />
<Node Id="10060:[5777..5806).2" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 741964" />
<Node Id="10060:[5821..5867).2" Label="param IsSymbolAccessibleCore(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 741965" />
<Node Id="10060:[5882..5928).2" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 741966" />
<Node Id="10060:[5954..5991).5" Label="Debug.Assert((object)symbol != null); 741967" />
<Node Id="10060:[5954..5991).6" Label="Debug.Assert((object)symbol != null); 741968" />
<Node Id="10060:[6005..6042).5" Label="Debug.Assert((object)within != null); 741969" />
<Node Id="10060:[6005..6042).6" Label="Debug.Assert((object)within != null); 741970" />
<Node Id="10060:[6056..6090).3" Label="Debug.Assert(within.IsDefinition); 741971" />
<Node Id="10060:[6104..6172).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 741972" />
<Node Id="10060:[6188..6219).3" Label="failedThroughTypeCheck = false; 741973" />
<Node Id="10060:[6814..6920).8" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 741974" />
<Node Id="10060:[6814..6920).9" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 741975" />
<Node Id="10060:[6814..6920).10" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 741976" />
<Node Id="10060:[10202..10215).2" Label="param IsNamedTypeAccessible(Symbol within) 741977" />
<Node Id="10060:[10265..10311).2" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 741978" />
<Node Id="10060:[10337..10405).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 741979" />
<Node Id="10060:[10419..10454).5" Label="Debug.Assert((object)type != null); 741980" />
<Node Id="10060:[10470..10516).2" Label="var compilation = within.DeclaringCompilation; 741981" />
<Node Id="10060:[10532..10544).2" Label="bool unused; 741982" />
<Node Id="10060:[10558..11295).2" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 741983" />
<Node Id="10060:[11990..12013).2" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 741984" />
<Node Id="10060:[12078..12091).2" Label="param IsNonNestedTypeAccessible(Symbol within) 741985" />
<Node Id="10060:[12117..12185).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 741986" />
<Node Id="10060:[12199..12238).5" Label="Debug.Assert((object)assembly != null); 741987" />
<Node Id="10060:[12199..12238).6" Label="Debug.Assert((object)assembly != null); 741988" />
<Node Id="10345:[30644..30809).1" Label="if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                } 741989" />
<Node Id="10345:[30725..30790).1" Label="MarkImportDirective(alias.UsingDirective, callerIsSemanticModel); 741990" />
<Node Id="10345:[30725..30790).2" Label="MarkImportDirective(alias.UsingDirective, callerIsSemanticModel); 741991" />
<Node Id="10345:[30725..30789).1" Label="MarkImportDirective(alias.UsingDirective, callerIsSemanticModel) 741992" />
<Node Id="10345:[23904..23930).1" Label="param MarkImportDirective(CSharpSyntaxNode directive) 741993" />
<Node Id="10345:[23932..23958).1" Label="param MarkImportDirective(bool callerIsSemanticModel) 741994" />
<Node Id="10345:[23871..24063).1" Label="param MarkImportDirective(this) 741995" />
<Node Id="10345:[23984..24052).1" Label="MarkImportDirective(_compilation, directive, callerIsSemanticModel); 741996" />
<Node Id="10345:[23984..24052).2" Label="MarkImportDirective(_compilation, directive, callerIsSemanticModel); 741997" />
<Node Id="10345:[23984..24052).3" Label="MarkImportDirective(_compilation, directive, callerIsSemanticModel); 741998" />
<Node Id="10345:[23984..24051).1" Label="MarkImportDirective(_compilation, directive, callerIsSemanticModel) 741999" />
<Node Id="10345:[24115..24144).1" Label="param MarkImportDirective(CSharpCompilation compilation) 742000" />
<Node Id="10345:[24146..24172).1" Label="param MarkImportDirective(CSharpSyntaxNode directive) 742001" />
<Node Id="10345:[24174..24200).1" Label="param MarkImportDirective(bool callerIsSemanticModel) 742002" />
<Node Id="10345:[24226..24260).1" Label="Debug.Assert(compilation != null); 742003" />
<Node Id="10345:[24226..24260).2" Label="Debug.Assert(compilation != null); 742004" />
<Node Id="10345:[24339..24484).1" Label="if (directive != null && !callerIsSemanticModel)
            {
                compilation.MarkImportDirectiveAsUsed(directive);
            } 742005" />
<Node Id="10345:[24339..24484).2" Label="if (directive != null && !callerIsSemanticModel)
            {
                compilation.MarkImportDirectiveAsUsed(directive);
            } 742006" />
<Node Id="10345:[24339..24484).3" Label="if (directive != null && !callerIsSemanticModel)
            {
                compilation.MarkImportDirectiveAsUsed(directive);
            } 742007" />
<Node Id="10345:[24420..24469).1" Label="compilation.MarkImportDirectiveAsUsed(directive); 742008" />
<Node Id="10345:[24420..24469).2" Label="compilation.MarkImportDirectiveAsUsed(directive); 742009" />
<Node Id="10345:[23984..24052).4" Label="MarkImportDirective(_compilation, directive, callerIsSemanticModel); 742010" />
<Node Id="10345:[30725..30790).3" Label="MarkImportDirective(alias.UsingDirective, callerIsSemanticModel); 742011" />
<Node Id="10345:[30829..30852).1" Label="result.MergeEqual(res); 742012" />
<Node Id="10345:[30829..30851).1" Label="result.MergeEqual(res) 742013" />
<Node Id="10354:[10217..10242).2" Label="param MergeEqual(SingleLookupResult result) 742014" />
<Node Id="10354:[10192..10676).2" Label="param MergeEqual(this) 742015" />
<Node Id="10354:[4094..4107).25" Label="return _kind; 742016" />
<Node Id="10354:[10268..10665).5" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 742017" />
<Node Id="10345:[30829..30852).2" Label="result.MergeEqual(res); 742018" />
<Node Id="10345:[30883..31655).4" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 742019" />
<Node Id="10345:[29457..29477).2" Label="result.IsMultiViable 742020" />
<Node Id="10354:[4919..5009).19" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 742021" />
<Node Id="10354:[4094..4107).27" Label="return _kind; 742022" />
<Node Id="10345:[29452..29715).7" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 742023" />
<Node Id="10312:[4685..4699).5" Label="result.IsClear 742024" />
<Node Id="10354:[3684..3818).13" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 742025" />
<Node Id="10354:[3720..3803).93" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742026" />
<Node Id="10312:[4680..4787).9" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 742027" />
<Node Id="10312:[4749..4764).2" Label="binder = scope; 742028" />
<Node Id="10312:[4826..5058).21" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 742029" />
<Node Id="10312:[4826..5058).22" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 742030" />
<Node Id="10312:[5087..5101).2" Label="return binder; 742031" />
<Node Id="10312:[1585..1724).18" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 742032" />
<Node Id="10319:[43504..43546).5" Label="diagnostics.Add(node, useSiteDiagnostics); 742033" />
<Node Id="10319:[43504..43546).6" Label="diagnostics.Add(node, useSiteDiagnostics); 742034" />
<Node Id="10319:[43504..43546).8" Label="diagnostics.Add(node, useSiteDiagnostics); 742035" />
<Node Id="10319:[43562..43590).3" Label="Symbol bindingResult = null; 742036" />
<Node Id="10319:[43799..44676).7" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 742037" />
<Node Id="10319:[43799..44676).8" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 742038" />
<Node Id="10319:[43799..44676).9" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 742039" />
<Node Id="10319:[43853..43873).2" Label="IsViableType(result) 742040" />
<Node Id="10319:[41088..41107).2" Label="param IsViableType(LookupResult result) 742041" />
<Node Id="10319:[41138..41158).2" Label="result.IsMultiViable 742042" />
<Node Id="10354:[4919..5009).21" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 742043" />
<Node Id="10354:[4962..4966).21" Label="Kind 742044" />
<Node Id="10354:[4094..4107).29" Label="return _kind; 742045" />
<Node Id="10319:[41133..41220).3" Label="if (!result.IsMultiViable)
            {
                return false;
            } 742046" />
<Node Id="10319:[41254..41268).2" Label="result.Symbols 742047" />
<Node Id="10354:[4525..4595).3" Label="get
            {
                return _symbolList;
            } 742048" />
<Node Id="10354:[4561..4580).3" Label="return _symbolList; 742049" />
<Node Id="10319:[41236..41680).5" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 742050" />
<Node Id="10319:[41302..41665).2" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 742051" />
<Node Id="10319:[41406..41476).1" Label="if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true; 742052" />
<Node Id="10319:[41464..41476).1" Label="return true; 742053" />
<Node Id="10319:[44692..45392).3" Label="if (bindingResult is null)
            {
                bool wasError;

                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);
                if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
            } 742054" />
<Node Id="10319:[44751..44765).2" Label="bool wasError; 742055" />
<Node Id="10319:[44785..44930).14" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742056" />
<Node Id="10319:[44785..44930).15" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742057" />
<Node Id="10319:[44785..44930).17" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742058" />
<Node Id="10319:[44785..44930).18" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742059" />
<Node Id="10319:[44785..44930).19" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742060" />
<Node Id="10319:[44785..44930).20" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742061" />
<Node Id="10319:[44785..44930).21" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742062" />
<Node Id="10319:[44785..44930).22" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742063" />
<Node Id="10319:[44801..44929).2" Label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 742064" />
<Node Id="10319:[84201..84218).2" Label="param ResultSymbol(string simpleName) 742065" />
<Node Id="10319:[84233..84242).2" Label="param ResultSymbol(int arity) 742066" />
<Node Id="10319:[84257..84273).2" Label="param ResultSymbol(SyntaxNode where) 742067" />
<Node Id="10319:[84288..84313).2" Label="param ResultSymbol(DiagnosticBag diagnostics) 742068" />
<Node Id="10319:[84328..84359).2" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 742069" />
<Node Id="10319:[84374..84391).2" Label="param ResultSymbol(out bool wasError) 742070" />
<Node Id="10319:[84406..84447).2" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 742071" />
<Node Id="10319:[84462..84508).2" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 742072" />
<Node Id="10319:[84124..109887).2" Label="param ResultSymbol(this) 742073" />
<Node Id="10319:[84534..84675).13" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742074" />
<Node Id="10319:[84534..84675).14" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742075" />
<Node Id="10319:[84534..84675).15" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742076" />
<Node Id="10319:[84534..84675).16" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742077" />
<Node Id="10319:[84534..84675).17" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742078" />
<Node Id="10319:[84534..84675).18" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742079" />
<Node Id="10319:[84534..84675).19" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742080" />
<Node Id="10319:[84534..84675).20" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742081" />
<Node Id="10319:[84550..84674).2" Label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 742082" />
<Node Id="10319:[84907..109876).12" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 742083" />
<Node Id="10319:[84907..109876).13" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 742084" />
<Node Id="10319:[84907..109876).14" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 742085" />
<Node Id="10319:[84907..109876).15" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 742086" />
<Node Id="10319:[84907..109876).16" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 742087" />
<Node Id="10319:[84907..109876).17" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 742088" />
<Node Id="10319:[84907..109876).18" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 742089" />
<Node Id="10319:[84907..109876).19" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 742090" />
<Node Id="10319:[84907..109876).20" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 742091" />
<Node Id="10319:[85320..85348).5" Label="Debug.Assert(where != null); 742092" />
<Node Id="10319:[85320..85348).6" Label="Debug.Assert(where != null); 742093" />
<Node Id="10319:[85366..85400).5" Label="Debug.Assert(diagnostics != null); 742094" />
<Node Id="10319:[85366..85400).6" Label="Debug.Assert(diagnostics != null); 742095" />
<Node Id="10319:[85434..85448).2" Label="result.Symbols 742096" />
<Node Id="10319:[85467..85484).3" Label="wasError = false; 742097" />
<Node Id="10319:[85508..85528).2" Label="result.IsMultiViable 742098" />
<Node Id="10354:[4962..4966).22" Label="Kind 742099" />
<Node Id="10319:[104874..105336).4" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 742100" />
<Node Id="10319:[105368..106708).2" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 742101" />
<Node Id="10319:[84691..84861).3" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 742102" />
<Node Id="10319:[44948..45377).3" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 742103" />
<Node Id="10319:[45032..45114).1" Label="var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved); 742104" />
<Node Id="10319:[45136..45358).1" Label="if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    } 742105" />
<Node Id="10319:[45136..45358).2" Label="if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    } 742106" />
<Node Id="10319:[45408..45421).2" Label="result.Free() 742107" />
<Node Id="10354:[11428..11440).3" Label="this.Clear() 742108" />
<Node Id="10354:[3966..3980).5" Label="_error = null; 742109" />
<Node Id="10354:[11428..11441).3" Label="this.Clear(); 742110" />
<Node Id="10354:[11455..11538).7" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 742111" />
<Node Id="10319:[45408..45422).2" Label="result.Free(); 742112" />
<Node Id="10319:[45505..45551).2" Label="AreNullableAnnotationsEnabled(node.Identifier) 742113" />
<Node Id="10286:[9966..10197).2" Label="param AreNullableAnnotationsEnabled(this) 742114" />
<Node Id="10286:[10121..10185).2" Label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 742115" />
<Node Id="10286:[9029..9954).2" Label="param AreNullableAnnotationsEnabled(this) 742116" />
<Node Id="10319:[45443..45567).2" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 742117" />
<Node Id="10287:[2377..2471).3" Label="if (symbol is null)
                {
                    return default;
                } 742118" />
<Node Id="10287:[2582..2656).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) 742119" />
<Node Id="10287:[1144..1157).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(Symbol symbol) 742120" />
<Node Id="10287:[1159..1181).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(bool isNullableEnabled) 742121" />
<Node Id="10287:[1092..1409).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 742122" />
<Node Id="10287:[1215..1253).1" Label="Debug.Assert(!(symbol is TypeSymbol)); 742123" />
<Node Id="10287:[1271..1302).1" Label="_typeWithAnnotations = default; 742124" />
<Node Id="10287:[1271..1291).1" Label="_typeWithAnnotations 742125" />
<Node Id="10287:[1320..1327).1" Label="_symbol 742126" />
<Node Id="10287:[1355..1373).1" Label="_isNullableEnabled 742127" />
<Node Id="10319:[15383..15396).1" Label="symbol.IsType 742128" />
<Node Id="10287:[1609..1643).1" Label="=$ !_typeWithAnnotations.IsDefault 742129" />
<Node Id="10287:[1612..1643).1" Label="!_typeWithAnnotations.IsDefault 742130" />
<Node Id="10319:[15379..15933).1" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 742131" />
<Node Id="10319:[15418..15432).1" Label="symbol.IsAlias 742132" />
<Node Id="10287:[1680..1716).2" Label="=$ _symbol?.Kind == SymbolKind.Alias 742133" />
<Node Id="10287:[1683..1716).3" Label="_symbol?.Kind == SymbolKind.Alias 742134" />
<Node Id="10319:[15379..15933).2" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 742135" />
<Node Id="10319:[15461..15474).1" Label="symbol.Symbol 742136" />
<Node Id="10287:[1535..1573).2" Label="=$ _symbol ?? TypeWithAnnotations.Type 742137" />
<Node Id="10287:[1538..1573).4" Label="_symbol ?? TypeWithAnnotations.Type 742138" />
<Node Id="10319:[15379..15933).3" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 742139" />
<Node Id="10319:[15379..15933).5" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 742140" />
<Node Id="10319:[15436..15495).1" Label="UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) 742141" />
<Node Id="10319:[51410..51423).1" Label="param UnwrapAliasNoDiagnostics(Symbol symbol) 742142" />
<Node Id="10319:[51425..51471).1" Label="param UnwrapAliasNoDiagnostics(ConsList$TypeSymbol$ basesBeingResolved = null) 742143" />
<Node Id="10319:[51497..51645).1" Label="if (symbol.Kind == SymbolKind.Alias)
            {
                return ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved);
            } 742144" />
<Node Id="10319:[51566..51630).1" Label="return ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved); 742145" />
<Node Id="10319:[15379..15933).7" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 742146" />
<Node Id="10319:[15379..15933).8" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 742147" />
<Node Id="10319:[15548..15561).1" Label="symbol.IsType 742148" />
<Node Id="10319:[15544..15884).1" Label="if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                } 742149" />
<Node Id="10319:[15904..15918).1" Label="return symbol; 742150" />
<Node Id="10319:[13962..14050).1" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 742151" />
<Node Id="10319:[13962..14050).2" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 742152" />
<Node Id="10319:[13962..14050).3" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 742153" />
<Node Id="10319:[13962..14050).4" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 742154" />
<Node Id="10319:[13969..14029).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 742155" />
<Node Id="10319:[51762..51815).2" Label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 742156" />
<Node Id="10319:[51817..51842).2" Label="param UnwrapAlias(DiagnosticBag diagnostics) 742157" />
<Node Id="10319:[51844..51861).2" Label="param UnwrapAlias(SyntaxNode syntax) 742158" />
<Node Id="10319:[51863..51909).2" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 742159" />
<Node Id="10319:[51698..52285).2" Label="param UnwrapAlias(this) 742160" />
<Node Id="10319:[51939..51953).2" Label="symbol.IsAlias 742161" />
<Node Id="10287:[1680..1716).3" Label="=$ _symbol?.Kind == SymbolKind.Alias 742162" />
<Node Id="10319:[51935..52244).3" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 742163" />
<Node Id="10319:[51987..52009).1" Label="AliasSymbol discarded; 742164" />
<Node Id="10319:[52096..52120).1" Label="symbol.IsNullableEnabled 742165" />
<Node Id="10287:[1989..2197).1" Label="get
                {
                    Debug.Assert(_symbol?.Kind == SymbolKind.Alias); // Not meaningful to use this property otherwise
                    return _isNullableEnabled;
                } 742166" />
<Node Id="10287:[2033..2081).1" Label="Debug.Assert(_symbol?.Kind == SymbolKind.Alias); 742167" />
<Node Id="10287:[2152..2178).1" Label="return _isNullableEnabled; 742168" />
<Node Id="10319:[52027..52229).1" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)); 742169" />
<Node Id="10319:[52157..52170).1" Label="symbol.Symbol 742170" />
<Node Id="10319:[52027..52229).3" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)); 742171" />
<Node Id="10319:[52027..52229).5" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)); 742172" />
<Node Id="10319:[52027..52229).6" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)); 742173" />
<Node Id="10319:[52027..52229).7" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)); 742174" />
<Node Id="10319:[52027..52229).8" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)); 742175" />
<Node Id="10319:[52145..52227).1" Label="UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved) 742176" />
<Node Id="10319:[53231..53244).1" Label="param UnwrapAlias(Symbol symbol) 742177" />
<Node Id="10319:[53246..53267).1" Label="param UnwrapAlias(out AliasSymbol alias) 742178" />
<Node Id="10319:[53269..53294).1" Label="param UnwrapAlias(DiagnosticBag diagnostics) 742179" />
<Node Id="10319:[53296..53313).1" Label="param UnwrapAlias(SyntaxNode syntax) 742180" />
<Node Id="10319:[53315..53361).1" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 742181" />
<Node Id="10319:[53204..54344).1" Label="param UnwrapAlias(this) 742182" />
<Node Id="10319:[53387..53416).1" Label="Debug.Assert(syntax != null); 742183" />
<Node Id="10319:[53387..53416).2" Label="Debug.Assert(syntax != null); 742184" />
<Node Id="10319:[53430..53464).1" Label="Debug.Assert(diagnostics != null); 742185" />
<Node Id="10319:[53430..53464).2" Label="Debug.Assert(diagnostics != null); 742186" />
<Node Id="10319:[53480..54276).1" Label="if (symbol.Kind == SymbolKind.Alias)
            {
                alias = (AliasSymbol)symbol;
                var result = alias.GetAliasTarget(basesBeingResolved);
                var type = result as TypeSymbol;
                if ((object)type != null)
                {
                    // pass args in a value tuple to avoid allocating a closure
                    var args = (this, diagnostics, syntax);
                    type.VisitType((typePart, argTuple, isNested) =$
                    {
                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);
                        return false;
                    }, args);
                }

                return result;
            } 742187" />
<Node Id="10319:[53549..53577).1" Label="alias = (AliasSymbol)symbol; 742188" />
<Node Id="10319:[53595..53649).1" Label="var result = alias.GetAliasTarget(basesBeingResolved); 742189" />
<Node Id="10319:[53595..53649).2" Label="var result = alias.GetAliasTarget(basesBeingResolved); 742190" />
<Node Id="10319:[53667..53699).1" Label="var type = result as TypeSymbol; 742191" />
<Node Id="10319:[53717..54227).1" Label="if ((object)type != null)
                {
                    // pass args in a value tuple to avoid allocating a closure
                    var args = (this, diagnostics, syntax);
                    type.VisitType((typePart, argTuple, isNested) =$
                    {
                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);
                        return false;
                    }, args);
                } 742192" />
<Node Id="10319:[53717..54227).2" Label="if ((object)type != null)
                {
                    // pass args in a value tuple to avoid allocating a closure
                    var args = (this, diagnostics, syntax);
                    type.VisitType((typePart, argTuple, isNested) =$
                    {
                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);
                        return false;
                    }, args);
                } 742193" />
<Node Id="10319:[53864..53903).1" Label="var args = (this, diagnostics, syntax); 742194" />
<Node Id="10319:[53876..53880).1" Label="this 742195" />
<Node Id="10319:[53882..53893).1" Label="diagnostics 742196" />
<Node Id="10319:[53895..53901).1" Label="syntax 742197" />
<Node Id="10319:[53925..54208).1" Label="type.VisitType((typePart, argTuple, isNested) =$
                    {
                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);
                        return false;
                    }, args); 742198" />
<Node Id="10319:[53925..54208).2" Label="type.VisitType((typePart, argTuple, isNested) =$
                    {
                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);
                        return false;
                    }, args); 742199" />
<Node Id="10319:[53925..54208).4" Label="type.VisitType((typePart, argTuple, isNested) =$
                    {
                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);
                        return false;
                    }, args); 742200" />
<Node Id="10319:[53925..54208).7" Label="type.VisitType((typePart, argTuple, isNested) =$
                    {
                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);
                        return false;
                    }, args); 742201" />
<Node Id="10286:[21504..21529).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742202" />
<Node Id="10286:[21531..21544).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 742203" />
<Node Id="10286:[21546..21561).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 742204" />
<Node Id="10286:[21563..21583).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742205" />
<Node Id="10286:[21462..21711).1" Label="param ReportDiagnosticsIfObsolete(this) 742206" />
<Node Id="10286:[21609..21700).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 742207" />
<Node Id="10286:[21609..21700).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 742208" />
<Node Id="10286:[21609..21700).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 742209" />
<Node Id="10286:[21609..21700).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 742210" />
<Node Id="10286:[21609..21699).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 742211" />
<Node Id="10286:[22044..22069).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742212" />
<Node Id="10286:[22071..22084).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 742213" />
<Node Id="10286:[22086..22108).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 742214" />
<Node Id="10286:[22110..22130).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742215" />
<Node Id="10286:[22002..22611).1" Label="param ReportDiagnosticsIfObsolete(this) 742216" />
<Node Id="10286:[22156..22600).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Event:
                case SymbolKind.Property:
                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);
                    break;
            } 742217" />
<Node Id="10286:[22421..22557).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742218" />
<Node Id="10286:[22421..22557).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742219" />
<Node Id="10286:[22421..22557).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742220" />
<Node Id="10286:[22421..22557).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742221" />
<Node Id="10286:[22493..22522).1" Label="this.ContainingMemberOrLambda 742222" />
<Node Id="10307:[1439..1480).1" Label="get { return _containingMemberOrLambda; } 742223" />
<Node Id="10307:[1445..1478).1" Label="return _containingMemberOrLambda; 742224" />
<Node Id="10286:[22421..22557).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742225" />
<Node Id="10286:[22524..22543).1" Label="this.ContainingType 742226" />
<Node Id="10286:[15519..15926).1" Label="get
            {
                var member = this.ContainingMemberOrLambda;
                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);
                return member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                };
            } 742227" />
<Node Id="10286:[15568..15597).1" Label="this.ContainingMemberOrLambda 742228" />
<Node Id="10307:[1439..1480).2" Label="get { return _containingMemberOrLambda; } 742229" />
<Node Id="10307:[1445..1478).2" Label="return _containingMemberOrLambda; 742230" />
<Node Id="10286:[15555..15598).1" Label="var member = this.ContainingMemberOrLambda; 742231" />
<Node Id="10286:[15616..15690).1" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 742232" />
<Node Id="10286:[15616..15690).2" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 742233" />
<Node Id="10286:[15715..15910).1" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 742234" />
<Node Id="10286:[15708..15911).1" Label="return member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                }; 742235" />
<Node Id="10286:[22421..22557).7" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742236" />
<Node Id="10286:[22421..22557).9" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742237" />
<Node Id="10286:[22421..22556).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 742238" />
<Node Id="10286:[23056..23081).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742239" />
<Node Id="10286:[23096..23109).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 742240" />
<Node Id="10286:[23124..23146).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 742241" />
<Node Id="10286:[23161..23181).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742242" />
<Node Id="10286:[23196..23220).1" Label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 742243" />
<Node Id="10286:[23235..23266).1" Label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 742244" />
<Node Id="10286:[23281..23301).1" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 742245" />
<Node Id="10286:[23327..23364).1" Label="RoslynDebug.Assert(symbol is object); 742246" />
<Node Id="10286:[23380..23684).1" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 742247" />
<Node Id="10286:[23893..24026).1" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 742248" />
<Node Id="10286:[24450..24529).1" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 742249" />
<Node Id="10286:[24450..24529).2" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 742250" />
<Node Id="10286:[24450..24529).3" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 742251" />
<Node Id="10286:[24545..24641).1" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 742252" />
<Node Id="10286:[24655..25349).1" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 742253" />
<Node Id="10286:[25365..25492).1" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 742254" />
<Node Id="10286:[25365..25492).2" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 742255" />
<Node Id="10286:[25365..25492).3" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 742256" />
<Node Id="10286:[25365..25492).4" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 742257" />
<Node Id="10286:[25365..25492).5" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 742258" />
<Node Id="10286:[25386..25491).1" Label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 742259" />
<Node Id="10286:[26910..26935).1" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 742260" />
<Node Id="10286:[26937..26950).1" Label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 742261" />
<Node Id="10286:[26952..26974).1" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 742262" />
<Node Id="10286:[26976..27000).1" Label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 742263" />
<Node Id="10286:[27002..27022).1" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 742264" />
<Node Id="10286:[27048..27088).1" Label="RoslynDebug.Assert(diagnostics != null); 742265" />
<Node Id="10286:[27048..27088).2" Label="RoslynDebug.Assert(diagnostics != null); 742266" />
<Node Id="10286:[27104..27192).1" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 742267" />
<Node Id="10286:[27104..27192).2" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 742268" />
<Node Id="10286:[27104..27192).3" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 742269" />
<Node Id="10286:[27104..27192).5" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 742270" />
<Node Id="10286:[27208..27236).1" Label="DiagnosticInfo? info = null; 742271" />
<Node Id="10286:[27250..27722).1" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 742272" />
<Node Id="10286:[27738..27845).1" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 742273" />
<Node Id="10286:[27738..27845).2" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 742274" />
<Node Id="10286:[27861..27873).1" Label="return kind; 742275" />
<Node Id="10286:[26281..26812).1" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 742276" />
<Node Id="10286:[26450..26769).1" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 742277" />
<Node Id="10286:[22421..22557).10" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742278" />
<Node Id="10286:[21609..21700).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 742279" />
<Node Id="10319:[54247..54261).1" Label="return result; 742280" />
<Node Id="10319:[52034..52228).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)) 742281" />
<Node Id="10287:[2306..2328).3" Label="param CreateUnannotated(bool isNullableEnabled) 742282" />
<Node Id="10287:[2330..2343).3" Label="param CreateUnannotated(Symbol symbol) 742283" />
<Node Id="10287:[2377..2471).5" Label="if (symbol is null)
                {
                    return default;
                } 742284" />
<Node Id="10287:[2539..2781).18" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 742285" />
<Node Id="10287:[2539..2781).22" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 742286" />
<Node Id="10287:[791..833).3" Label="Debug.Assert(typeWithAnnotations.HasType); 742287" />
<Node Id="10319:[13969..14049).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 742288" />
<Node Id="10287:[1474..1497).2" Label="=$ _typeWithAnnotations 742289" />
<Node Id="10287:[1477..1497).2" Label="_typeWithAnnotations 742290" />
<Node Id="10076:[5223..5250).10" Label="Debug.Assert(node != null); 742291" />
<Node Id="10077:[44231..44317).41" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 742292" />
<Node Id="10077:[44231..44317).49" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 742293" />
<Node Id="10077:[6212..6251).3" Label="SourceMemberMethodSymbol method = null; 742294" />
<Node Id="10077:[6275..6566).4" Label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    } 742295" />
<Node Id="10077:[6590..6839).3" Label="if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    } 742296" />
<Node Id="10286:[1688..1781).13" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 742297" />
<Node Id="10298:[471..492).32" Label="param Includes(this BinderFlags self) 742298" />
<Node Id="10286:[1820..1963).13" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 742299" />
<Node Id="10298:[471..492).33" Label="param Includes(this BinderFlags self) 742300" />
<Node Id="10319:[42478..42805).7" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 742301" />
<Node Id="10319:[42821..42938).17" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 742302" />
<Node Id="10319:[42839..42937).3" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 742303" />
<Node Id="10319:[63849..63870).3" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 742304" />
<Node Id="10319:[63885..63919).3" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 742305" />
<Node Id="10319:[63934..63945).3" Label="param CreateErrorIfLookupOnTypeParameter(string name) 742306" />
<Node Id="10319:[63960..63969).3" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 742307" />
<Node Id="10319:[63984..64009).3" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 742308" />
<Node Id="10319:[63768..64484).3" Label="param CreateErrorIfLookupOnTypeParameter(this) 742309" />
<Node Id="10319:[64035..64445).9" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 742310" />
<Node Id="10319:[64035..64445).10" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 742311" />
<Node Id="10319:[64461..64473).5" Label="return null; 742312" />
<Node Id="10319:[42821..42938).23" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 742313" />
<Node Id="10319:[42952..43079).7" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 742314" />
<Node Id="10319:[42952..43079).8" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 742315" />
<Node Id="10354:[11312..11328).4" Label="instance.IsClear 742316" />
<Node Id="10354:[3684..3818).14" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 742317" />
<Node Id="10354:[3720..3803).97" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742318" />
<Node Id="10354:[3720..3803).98" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742319" />
<Node Id="10354:[3720..3803).99" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742320" />
<Node Id="10354:[11299..11330).10" Label="Debug.Assert(instance.IsClear); 742321" />
<Node Id="10319:[50330..50355).3" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 742322" />
<Node Id="10312:[1108..1117).3" Label="param LookupSymbolsSimpleName(int arity) 742323" />
<Node Id="10312:[1222..1235).3" Label="param LookupSymbolsSimpleName(bool diagnose) 742324" />
<Node Id="10312:[5830..5839).3" Label="param LookupSymbolsOrMembersInternal(int arity) 742325" />
<Node Id="10312:[5944..5957).3" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 742326" />
<Node Id="10312:[3730..3739).3" Label="param LookupSymbolsInternal(int arity) 742327" />
<Node Id="10312:[3805..3818).3" Label="param LookupSymbolsInternal(bool diagnose) 742328" />
<Node Id="10312:[3905..3919).3" Label="result.IsClear 742329" />
<Node Id="10354:[3684..3818).15" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 742330" />
<Node Id="10354:[3720..3803).105" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742331" />
<Node Id="10354:[3720..3803).106" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742332" />
<Node Id="10354:[3720..3803).107" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742333" />
<Node Id="10312:[3892..3921).7" Label="Debug.Assert(result.IsClear); 742334" />
<Node Id="10312:[3935..3968).9" Label="Debug.Assert(options.AreValid()); 742335" />
<Node Id="10312:[3948..3966).3" Label="options.AreValid() 742336" />
<Node Id="10353:[4698..4724).6" Label="param AreValid(this LookupOptions options) 742337" />
<Node Id="10353:[4750..4847).11" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 742338" />
<Node Id="10353:[4863..5000).21" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 742339" />
<Node Id="10353:[4863..5000).22" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 742340" />
<Node Id="10353:[5079..5183).11" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 742341" />
<Node Id="10353:[5197..5323).16" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 742342" />
<Node Id="10353:[5485..5759).31" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 742343" />
<Node Id="10353:[5485..5759).32" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 742344" />
<Node Id="10353:[5485..5759).33" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 742345" />
<Node Id="10353:[5775..5979).21" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 742346" />
<Node Id="10353:[5775..5979).23" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 742347" />
<Node Id="10353:[5995..6029).16" Label="return OnlyOneBitSet(onlyOptions); 742348" />
<Node Id="10353:[6002..6028).6" Label="OnlyOneBitSet(onlyOptions) 742349" />
<Node Id="10353:[6343..6358).6" Label="param OnlyOneBitSet(LookupOptions o) 742350" />
<Node Id="10353:[6384..6410).31" Label="return (o & (o - 1)) == 0; 742351" />
<Node Id="10353:[6384..6410).32" Label="return (o & (o - 1)) == 0; 742352" />
<Node Id="10312:[5188..5207).3" Label="param LookupSymbolsInSingleBinder(LookupResult result) 742353" />
<Node Id="10312:[5209..5220).3" Label="param LookupSymbolsInSingleBinder(string name) 742354" />
<Node Id="10312:[5222..5231).3" Label="param LookupSymbolsInSingleBinder(int arity) 742355" />
<Node Id="10312:[5233..5272).3" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 742356" />
<Node Id="10312:[5274..5295).3" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 742357" />
<Node Id="10312:[5297..5318).3" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 742358" />
<Node Id="10312:[5320..5333).3" Label="param LookupSymbolsInSingleBinder(bool diagnose) 742359" />
<Node Id="10312:[5124..5404).3" Label="param LookupSymbolsInSingleBinder(this) 742360" />
<Node Id="10312:[4685..4699).6" Label="result.IsClear 742361" />
<Node Id="10354:[3684..3818).16" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 742362" />
<Node Id="10354:[3720..3803).113" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742363" />
<Node Id="10354:[3720..3803).114" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742364" />
<Node Id="10354:[3720..3803).115" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742365" />
<Node Id="10312:[4680..4787).11" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 742366" />
<Node Id="10312:[4826..5058).26" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 742367" />
<Node Id="10312:[4826..5058).27" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 742368" />
<Node Id="10346:[10663..10672).4" Label="param LookupSymbolsInSingleBinder(int arity) 742369" />
<Node Id="10346:[10761..10774).4" Label="param LookupSymbolsInSingleBinder(bool diagnose) 742370" />
<Node Id="10346:[10861..10875).4" Label="result.IsClear 742371" />
<Node Id="10354:[3684..3818).17" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 742372" />
<Node Id="10354:[3720..3803).121" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742373" />
<Node Id="10354:[3720..3803).122" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742374" />
<Node Id="10354:[3720..3803).123" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742375" />
<Node Id="10346:[10848..10877).10" Label="Debug.Assert(result.IsClear); 742376" />
<Node Id="10346:[10897..10914).4" Label="IsSubmissionClass 742377" />
<Node Id="10346:[7666..7775).4" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 742378" />
<Node Id="10346:[7672..7773).10" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 742379" />
<Node Id="10346:[10893..11127).7" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 742380" />
<Node Id="10346:[3525..3638).31" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 742381" />
<Node Id="10346:[11369..11508).38" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 742382" />
<Node Id="10312:[7718..7727).4" Label="param LookupMembersInternal(int arity) 742383" />
<Node Id="10312:[7816..7829).4" Label="param LookupMembersInternal(bool diagnose) 742384" />
<Node Id="10312:[7903..7936).13" Label="Debug.Assert(options.AreValid()); 742385" />
<Node Id="10312:[7916..7934).4" Label="options.AreValid() 742386" />
<Node Id="10353:[4698..4724).7" Label="param AreValid(this LookupOptions options) 742387" />
<Node Id="10353:[4750..4847).13" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 742388" />
<Node Id="10353:[4863..5000).25" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 742389" />
<Node Id="10353:[4863..5000).26" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 742390" />
<Node Id="10353:[5079..5183).13" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 742391" />
<Node Id="10353:[5197..5323).19" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 742392" />
<Node Id="10353:[5485..5759).37" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 742393" />
<Node Id="10353:[5485..5759).38" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 742394" />
<Node Id="10353:[5485..5759).39" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 742395" />
<Node Id="10353:[5775..5979).25" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 742396" />
<Node Id="10353:[5775..5979).27" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 742397" />
<Node Id="10353:[5995..6029).19" Label="return OnlyOneBitSet(onlyOptions); 742398" />
<Node Id="10353:[6002..6028).7" Label="OnlyOneBitSet(onlyOptions) 742399" />
<Node Id="10353:[6343..6358).7" Label="param OnlyOneBitSet(LookupOptions o) 742400" />
<Node Id="10353:[6384..6410).37" Label="return (o & (o - 1)) == 0; 742401" />
<Node Id="10353:[6384..6410).38" Label="return (o & (o - 1)) == 0; 742402" />
<Node Id="10312:[7952..7977).13" Label="Debug.Assert(arity $= 0); 742403" />
<Node Id="10312:[7952..7977).14" Label="Debug.Assert(arity $= 0); 742404" />
<Node Id="10312:[8594..8603).2" Label="param LookupMembersInType(int arity) 742405" />
<Node Id="10312:[8669..8690).2" Label="param LookupMembersInType(Binder originalBinder) 742406" />
<Node Id="10312:[8692..8705).2" Label="param LookupMembersInType(bool diagnose) 742407" />
<Node Id="10312:[34797..34806).2" Label="param LookupMembersInClass(int arity) 742408" />
<Node Id="10312:[34911..34932).2" Label="param LookupMembersInClass(Binder originalBinder) 742409" />
<Node Id="10312:[34947..34960).2" Label="param LookupMembersInClass(bool diagnose) 742410" />
<Node Id="10312:[35403..35412).2" Label="param LookupMembersInClass(int arity) 742411" />
<Node Id="10312:[35517..35538).2" Label="param LookupMembersInClass(Binder originalBinder) 742412" />
<Node Id="10312:[35553..35581).2" Label="param LookupMembersInClass(TypeSymbol accessThroughType) 742413" />
<Node Id="10312:[35596..35609).2" Label="param LookupMembersInClass(bool diagnose) 742414" />
<Node Id="10312:[35696..35731).5" Label="Debug.Assert((object)type != null); 742415" />
<Node Id="10354:[11312..11328).5" Label="instance.IsClear 742416" />
<Node Id="10354:[3684..3818).18" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 742417" />
<Node Id="10354:[3720..3803).129" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742418" />
<Node Id="10354:[3720..3803).130" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742419" />
<Node Id="10354:[3720..3803).131" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742420" />
<Node Id="10354:[11299..11330).13" Label="Debug.Assert(instance.IsClear); 742421" />
<Node Id="10312:[36067..36079).3" Label="tmp.Clear(); 742422" />
<Node Id="10312:[33656..33675).3" Label="param LookupMembersWithoutInheritance(LookupResult result) 742423" />
<Node Id="10312:[33707..33716).3" Label="param LookupMembersWithoutInheritance(int arity) 742424" />
<Node Id="10312:[33754..33775).3" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 742425" />
<Node Id="10312:[33777..33805).3" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 742426" />
<Node Id="10312:[33807..33820).3" Label="param LookupMembersWithoutInheritance(bool diagnose) 742427" />
<Node Id="10312:[33870..33909).3" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 742428" />
<Node Id="10312:[61608..61629).5" Label="param GetCandidateMembers(Binder originalBinder) 742429" />
<Node Id="10312:[34022..34574).7" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 742430" />
<Node Id="10354:[9012..9030).3" Label="param MergePrioritized(LookupResult other) 742431" />
<Node Id="10354:[8981..9152).3" Label="param MergePrioritized(this) 742432" />
<Node Id="10354:[9060..9070).3" Label="other.Kind 742433" />
<Node Id="10354:[4058..4122).34" Label="get
            {
                return _kind;
            } 742434" />
<Node Id="10354:[9056..9141).9" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 742435" />
<Node Id="10354:[9073..9077).3" Label="Kind 742436" />
<Node Id="10354:[4058..4122).35" Label="get
            {
                return _kind;
            } 742437" />
<Node Id="10354:[9056..9141).10" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 742438" />
<Node Id="10354:[9056..9141).11" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 742439" />
<Node Id="10312:[36566..36625).3" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 742440" />
<Node Id="10312:[36643..36855).7" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 742441" />
<Node Id="10312:[36643..36855).8" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 742442" />
<Node Id="10312:[37061..37078).3" Label="tmp.IsMultiViable 742443" />
<Node Id="10354:[4094..4107).36" Label="return _kind; 742444" />
<Node Id="10312:[37029..37117).7" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 742445" />
<Node Id="10312:[37258..37278).3" Label="result.IsMultiViable 742446" />
<Node Id="10354:[4094..4107).37" Label="return _kind; 742447" />
<Node Id="10312:[37254..37416).7" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 742448" />
<Node Id="10312:[37436..37988).9" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 742449" />
<Node Id="10312:[38290..38338).3" Label="originalBinder.InCrefButNotParameterOrReturnType 742450" />
<Node Id="10306:[3345..3430).3" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 742451" />
<Node Id="10306:[3358..3364).3" Label="InCref 742452" />
<Node Id="10306:[3196..3249).11" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 742453" />
<Node Id="10306:[3202..3247).41" Label="return this.Flags.Includes(BinderFlags.Cref); 742454" />
<Node Id="10306:[3351..3428).7" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 742455" />
<Node Id="10312:[38286..38405).5" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 742456" />
<Node Id="10312:[36067..36079).4" Label="tmp.Clear(); 742457" />
<Node Id="10312:[36097..36258).37" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 742458" />
<Node Id="10312:[36097..36258).39" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 742459" />
<Node Id="10312:[36097..36258).41" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 742460" />
<Node Id="10312:[33656..33675).4" Label="param LookupMembersWithoutInheritance(LookupResult result) 742461" />
<Node Id="10312:[33707..33716).4" Label="param LookupMembersWithoutInheritance(int arity) 742462" />
<Node Id="10312:[33754..33775).4" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 742463" />
<Node Id="10312:[33777..33805).4" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 742464" />
<Node Id="10312:[33807..33820).4" Label="param LookupMembersWithoutInheritance(bool diagnose) 742465" />
<Node Id="10312:[33870..33909).4" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 742466" />
<Node Id="10312:[61608..61629).6" Label="param GetCandidateMembers(Binder originalBinder) 742467" />
<Node Id="10312:[34022..34574).10" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 742468" />
<Node Id="10312:[36566..36625).4" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 742469" />
<Node Id="10312:[36643..36855).10" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 742470" />
<Node Id="10312:[36643..36855).11" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 742471" />
<Node Id="10312:[37061..37078).4" Label="tmp.IsMultiViable 742472" />
<Node Id="10312:[37029..37117).10" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 742473" />
<Node Id="10312:[37258..37278).4" Label="result.IsMultiViable 742474" />
<Node Id="10312:[37254..37416).10" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 742475" />
<Node Id="10312:[37436..37988).13" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 742476" />
<Node Id="10312:[38290..38338).4" Label="originalBinder.InCrefButNotParameterOrReturnType 742477" />
<Node Id="10306:[3345..3430).4" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 742478" />
<Node Id="10306:[3358..3364).4" Label="InCref 742479" />
<Node Id="10306:[3196..3249).12" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 742480" />
<Node Id="10306:[3351..3428).10" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 742481" />
<Node Id="10312:[38286..38405).7" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 742482" />
<Node Id="10312:[38756..38772).2" Label="visited?.Free(); 742483" />
<Node Id="10354:[11428..11441).4" Label="this.Clear(); 742484" />
<Node Id="10312:[38786..38797).2" Label="tmp.Free(); 742485" />
<Node Id="10345:[29100..29109).3" Label="param LookupSymbol(int arity) 742486" />
<Node Id="10345:[29214..29227).3" Label="param LookupSymbol(bool diagnose) 742487" />
<Node Id="10345:[29884..29893).3" Label="param LookupSymbolInAliases(int arity) 742488" />
<Node Id="10345:[29998..30011).3" Label="param LookupSymbolInAliases(bool diagnose) 742489" />
<Node Id="10345:[30883..31655).7" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 742490" />
<Node Id="10345:[29452..29715).14" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 742491" />
<Node Id="10345:[29566..29700).15" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 742492" />
<Node Id="10345:[29566..29700).18" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 742493" />
<Node Id="10345:[31734..31789).2" Label="param LookupSymbolInUsings(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 742494" />
<Node Id="10345:[31804..31825).2" Label="param LookupSymbolInUsings(Binder originalBinder) 742495" />
<Node Id="10345:[31840..31859).2" Label="param LookupSymbolInUsings(LookupResult result) 742496" />
<Node Id="10345:[31874..31885).2" Label="param LookupSymbolInUsings(string name) 742497" />
<Node Id="10345:[31900..31909).2" Label="param LookupSymbolInUsings(int arity) 742498" />
<Node Id="10345:[31924..31963).2" Label="param LookupSymbolInUsings(ConsList$TypeSymbol$ basesBeingResolved) 742499" />
<Node Id="10345:[31978..31999).2" Label="param LookupSymbolInUsings(LookupOptions options) 742500" />
<Node Id="10345:[32014..32027).2" Label="param LookupSymbolInUsings(bool diagnose) 742501" />
<Node Id="10345:[32114..32230).5" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 742502" />
<Node Id="10345:[32114..32230).6" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 742503" />
<Node Id="10345:[32118..32174).2" Label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 742504" />
<Node Id="10298:[471..492).37" Label="param Includes(this BinderFlags self) 742505" />
<Node Id="10298:[494..511).37" Label="param Includes(BinderFlags other) 742506" />
<Node Id="10345:[32275..32311).2" Label="originalBinder.IsSemanticModelBinder 742507" />
<Node Id="10286:[2155..2260).6" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 742508" />
<Node Id="10345:[32246..32312).3" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 742509" />
<Node Id="10345:[32328..33465).4" Label="foreach (var typeOrNamespace in usings)
            {
                ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);
                foreach (Symbol symbol in candidates)
                {
                    if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    }

                    // Found a match in our list of normal using directives.  Mark the directive
                    // as being seen so that it won't be reported to the user as something that
                    // can be removed.
                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 742510" />
<Node Id="10354:[3720..3803).137" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742511" />
<Node Id="10354:[3720..3803).139" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742512" />
<Node Id="10312:[4680..4787).13" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 742513" />
<Node Id="10312:[4534..4658).70" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 742514" />
<Node Id="10346:[10663..10672).5" Label="param LookupSymbolsInSingleBinder(int arity) 742515" />
<Node Id="10346:[10761..10774).5" Label="param LookupSymbolsInSingleBinder(bool diagnose) 742516" />
<Node Id="10346:[10861..10875).5" Label="result.IsClear 742517" />
<Node Id="10354:[3684..3818).20" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 742518" />
<Node Id="10354:[3720..3803).145" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742519" />
<Node Id="10354:[3720..3803).146" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742520" />
<Node Id="10354:[3720..3803).147" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742521" />
<Node Id="10346:[10848..10877).13" Label="Debug.Assert(result.IsClear); 742522" />
<Node Id="10346:[10897..10914).5" Label="IsSubmissionClass 742523" />
<Node Id="10346:[7666..7775).5" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 742524" />
<Node Id="10346:[7672..7773).13" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 742525" />
<Node Id="10346:[10893..11127).9" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 742526" />
<Node Id="10346:[3525..3638).38" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 742527" />
<Node Id="10312:[7718..7727).5" Label="param LookupMembersInternal(int arity) 742528" />
<Node Id="10312:[7816..7829).5" Label="param LookupMembersInternal(bool diagnose) 742529" />
<Node Id="10312:[7903..7936).17" Label="Debug.Assert(options.AreValid()); 742530" />
<Node Id="10312:[7916..7934).5" Label="options.AreValid() 742531" />
<Node Id="10353:[4698..4724).8" Label="param AreValid(this LookupOptions options) 742532" />
<Node Id="10353:[4750..4847).15" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 742533" />
<Node Id="10353:[4863..5000).29" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 742534" />
<Node Id="10353:[4863..5000).30" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 742535" />
<Node Id="10353:[5079..5183).15" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 742536" />
<Node Id="10353:[5197..5323).22" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 742537" />
<Node Id="10353:[5485..5759).43" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 742538" />
<Node Id="10353:[5485..5759).44" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 742539" />
<Node Id="10353:[5485..5759).45" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 742540" />
<Node Id="10353:[5775..5979).29" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 742541" />
<Node Id="10353:[5775..5979).31" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 742542" />
<Node Id="10353:[5995..6029).22" Label="return OnlyOneBitSet(onlyOptions); 742543" />
<Node Id="10353:[6002..6028).8" Label="OnlyOneBitSet(onlyOptions) 742544" />
<Node Id="10353:[6343..6358).8" Label="param OnlyOneBitSet(LookupOptions o) 742545" />
<Node Id="10353:[6384..6410).43" Label="return (o & (o - 1)) == 0; 742546" />
<Node Id="10353:[6384..6410).44" Label="return (o & (o - 1)) == 0; 742547" />
<Node Id="10312:[7952..7977).17" Label="Debug.Assert(arity $= 0); 742548" />
<Node Id="10312:[7952..7977).18" Label="Debug.Assert(arity $= 0); 742549" />
<Node Id="10312:[19030..19039).3" Label="param LookupMembersInNamespace(int arity) 742550" />
<Node Id="10312:[19087..19100).3" Label="param LookupMembersInNamespace(bool diagnose) 742551" />
<Node Id="10312:[61608..61629).7" Label="param GetCandidateMembers(Binder originalBinder) 742552" />
<Node Id="10345:[29100..29109).4" Label="param LookupSymbol(int arity) 742553" />
<Node Id="10345:[29214..29227).4" Label="param LookupSymbol(bool diagnose) 742554" />
<Node Id="10345:[29884..29893).4" Label="param LookupSymbolInAliases(int arity) 742555" />
<Node Id="10345:[29998..30011).4" Label="param LookupSymbolInAliases(bool diagnose) 742556" />
<Node Id="10312:[63439..63448).3" Label="param CheckViability(int arity) 742557" />
<Node Id="10312:[63473..63501).3" Label="param CheckViability(TypeSymbol accessThroughType) 742558" />
<Node Id="10312:[63503..63516).3" Label="param CheckViability(bool diagnose) 742559" />
<Node Id="10312:[63638..63668).3" Label="bool inaccessibleViaQualifier; 742560" />
<Node Id="10312:[63682..63706).3" Label="DiagnosticInfo diagInfo; 742561" />
<Node Id="10312:[64353..69285).17" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 742562" />
<Node Id="10312:[64353..69285).19" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 742563" />
<Node Id="10312:[80978..80991).3" Label="param WrongArity(Symbol symbol) 742564" />
<Node Id="10312:[80993..81002).3" Label="param WrongArity(int arity) 742565" />
<Node Id="10312:[81004..81017).3" Label="param WrongArity(bool diagnose) 742566" />
<Node Id="10312:[81019..81040).3" Label="param WrongArity(LookupOptions options) 742567" />
<Node Id="10312:[81042..81069).3" Label="param WrongArity(out DiagnosticInfo diagInfo) 742568" />
<Node Id="10312:[81095..84034).3" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 742569" />
<Node Id="10312:[83750..83991).4" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 742570" />
<Node Id="10312:[83750..83991).5" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 742571" />
<Node Id="10312:[84050..84066).5" Label="diagInfo = null; 742572" />
<Node Id="10312:[66177..69285).28" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 742573" />
<Node Id="10312:[66291..66342).3" Label="RefineAccessThroughType(options, accessThroughType) 742574" />
<Node Id="10312:[75301..75322).3" Label="param RefineAccessThroughType(LookupOptions options) 742575" />
<Node Id="10312:[75324..75352).3" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 742576" />
<Node Id="10312:[75735..75866).11" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 742577" />
<Node Id="10312:[75735..75866).12" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 742578" />
<Node Id="10312:[75742..75804).3" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 742579" />
<Node Id="10312:[75735..75866).14" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 742580" />
<Node Id="10312:[66177..69285).31" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 742581" />
<Node Id="10312:[77543..77571).3" Label="param IsAccessible(TypeSymbol accessThroughType) 742582" />
<Node Id="10312:[77573..77604).3" Label="param IsAccessible(out bool failedThroughTypeCheck) 742583" />
<Node Id="10312:[77654..77700).3" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 742584" />
<Node Id="10312:[77726..77892).9" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 742585" />
<Node Id="10312:[77726..77892).10" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 742586" />
<Node Id="10312:[77730..77782).3" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 742587" />
<Node Id="10298:[471..492).43" Label="param Includes(this BinderFlags self) 742588" />
<Node Id="10298:[494..511).43" Label="param Includes(BinderFlags other) 742589" />
<Node Id="10312:[78402..78430).3" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 742590" />
<Node Id="10312:[78432..78463).3" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 742591" />
<Node Id="10312:[78513..78552).3" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 742592" />
<Node Id="10346:[8034..8062).3" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 742593" />
<Node Id="10346:[8064..8095).3" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 742594" />
<Node Id="10346:[8145..8184).3" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 742595" />
<Node Id="10286:[30098..30120).2" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 742596" />
<Node Id="10286:[30135..30160).2" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 742597" />
<Node Id="10286:[30175..30206).2" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 742598" />
<Node Id="10286:[30283..30330).2" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 742599" />
<Node Id="10286:[30012..30691).2" Label="param IsSymbolAccessibleConditional(this) 742600" />
<Node Id="10286:[30356..30522).5" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 742601" />
<Node Id="10286:[30356..30522).6" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 742602" />
<Node Id="10286:[30360..30412).2" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 742603" />
<Node Id="10298:[471..492).44" Label="param Includes(this BinderFlags self) 742604" />
<Node Id="10298:[494..511).44" Label="param Includes(BinderFlags other) 742605" />
<Node Id="10060:[2136..2158).2" Label="param IsSymbolAccessible(NamedTypeSymbol within) 742606" />
<Node Id="10060:[2173..2198).2" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 742607" />
<Node Id="10060:[2213..2244).2" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 742608" />
<Node Id="10060:[2320..2366).2" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 742609" />
<Node Id="10060:[5621..5634).3" Label="param IsSymbolAccessibleCore(Symbol within) 742610" />
<Node Id="10060:[5691..5716).3" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 742611" />
<Node Id="10060:[5731..5762).3" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 742612" />
<Node Id="10060:[5777..5806).3" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 742613" />
<Node Id="10060:[5882..5928).3" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 742614" />
<Node Id="10060:[5954..5991).9" Label="Debug.Assert((object)symbol != null); 742615" />
<Node Id="10060:[6005..6042).9" Label="Debug.Assert((object)within != null); 742616" />
<Node Id="10060:[6005..6042).10" Label="Debug.Assert((object)within != null); 742617" />
<Node Id="10060:[6056..6090).5" Label="Debug.Assert(within.IsDefinition); 742618" />
<Node Id="10060:[6104..6172).7" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 742619" />
<Node Id="10060:[6188..6219).5" Label="failedThroughTypeCheck = false; 742620" />
<Node Id="10060:[10202..10215).3" Label="param IsNamedTypeAccessible(Symbol within) 742621" />
<Node Id="10060:[10265..10311).3" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 742622" />
<Node Id="10060:[10337..10405).7" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 742623" />
<Node Id="10060:[10419..10454).9" Label="Debug.Assert((object)type != null); 742624" />
<Node Id="10060:[10470..10516).3" Label="var compilation = within.DeclaringCompilation; 742625" />
<Node Id="10060:[10532..10544).3" Label="bool unused; 742626" />
<Node Id="10060:[10558..11295).3" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 742627" />
<Node Id="10060:[11990..12013).3" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 742628" />
<Node Id="10060:[12078..12091).3" Label="param IsNonNestedTypeAccessible(Symbol within) 742629" />
<Node Id="10060:[12117..12185).7" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 742630" />
<Node Id="10060:[12199..12238).9" Label="Debug.Assert((object)assembly != null); 742631" />
<Node Id="10060:[12199..12238).10" Label="Debug.Assert((object)assembly != null); 742632" />
<Node Id="10345:[24226..24260).5" Label="Debug.Assert(compilation != null); 742633" />
<Node Id="10354:[4094..4107).47" Label="return _kind; 742634" />
<Node Id="10345:[30883..31655).10" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 742635" />
<Node Id="10312:[4685..4699).8" Label="result.IsClear 742636" />
<Node Id="10354:[3684..3818).21" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 742637" />
<Node Id="10354:[3720..3803).153" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742638" />
<Node Id="10312:[4680..4787).15" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 742639" />
<Node Id="10312:[4749..4764).3" Label="binder = scope; 742640" />
<Node Id="10312:[4826..5058).36" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 742641" />
<Node Id="10312:[4826..5058).37" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 742642" />
<Node Id="10312:[5087..5101).3" Label="return binder; 742643" />
<Node Id="10319:[43504..43546).12" Label="diagnostics.Add(node, useSiteDiagnostics); 742644" />
<Node Id="10319:[43799..44676).13" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 742645" />
<Node Id="10319:[43853..43873).3" Label="IsViableType(result) 742646" />
<Node Id="10319:[41088..41107).3" Label="param IsViableType(LookupResult result) 742647" />
<Node Id="10319:[41138..41158).3" Label="result.IsMultiViable 742648" />
<Node Id="10354:[4919..5009).37" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 742649" />
<Node Id="10354:[4094..4107).51" Label="return _kind; 742650" />
<Node Id="10319:[41133..41220).5" Label="if (!result.IsMultiViable)
            {
                return false;
            } 742651" />
<Node Id="10319:[41254..41268).3" Label="result.Symbols 742652" />
<Node Id="10354:[4525..4595).5" Label="get
            {
                return _symbolList;
            } 742653" />
<Node Id="10354:[4561..4580).5" Label="return _symbolList; 742654" />
<Node Id="10319:[41236..41680).9" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 742655" />
<Node Id="10319:[41302..41665).3" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 742656" />
<Node Id="10319:[41406..41476).3" Label="if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true; 742657" />
<Node Id="10319:[41464..41476).3" Label="return true; 742658" />
<Node Id="10319:[44751..44765).3" Label="bool wasError; 742659" />
<Node Id="10319:[84201..84218).3" Label="param ResultSymbol(string simpleName) 742660" />
<Node Id="10319:[84233..84242).3" Label="param ResultSymbol(int arity) 742661" />
<Node Id="10319:[84374..84391).3" Label="param ResultSymbol(out bool wasError) 742662" />
<Node Id="10319:[84406..84447).3" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 742663" />
<Node Id="10319:[84462..84508).3" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 742664" />
<Node Id="10319:[84124..109887).3" Label="param ResultSymbol(this) 742665" />
<Node Id="10319:[85320..85348).9" Label="Debug.Assert(where != null); 742666" />
<Node Id="10319:[85320..85348).10" Label="Debug.Assert(where != null); 742667" />
<Node Id="10319:[85366..85400).9" Label="Debug.Assert(diagnostics != null); 742668" />
<Node Id="10319:[85366..85400).10" Label="Debug.Assert(diagnostics != null); 742669" />
<Node Id="10319:[85467..85484).5" Label="wasError = false; 742670" />
<Node Id="10319:[104874..105336).7" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 742671" />
<Node Id="10319:[105368..106708).3" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 742672" />
<Node Id="10319:[84691..84861).5" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 742673" />
<Node Id="10354:[11428..11441).5" Label="this.Clear(); 742674" />
<Node Id="10319:[45408..45422).3" Label="result.Free(); 742675" />
<Node Id="10287:[2377..2471).7" Label="if (symbol is null)
                {
                    return default;
                } 742676" />
<Node Id="10287:[1215..1253).3" Label="Debug.Assert(!(symbol is TypeSymbol)); 742677" />
<Node Id="10319:[15548..15561).2" Label="symbol.IsType 742678" />
<Node Id="10319:[15544..15884).3" Label="if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                } 742679" />
<Node Id="10319:[51987..52009).2" Label="AliasSymbol discarded; 742680" />
<Node Id="10287:[2033..2081).4" Label="Debug.Assert(_symbol?.Kind == SymbolKind.Alias); 742681" />
<Node Id="10319:[53246..53267).2" Label="param UnwrapAlias(out AliasSymbol alias) 742682" />
<Node Id="10319:[53387..53416).5" Label="Debug.Assert(syntax != null); 742683" />
<Node Id="10319:[53430..53464).5" Label="Debug.Assert(diagnostics != null); 742684" />
<Node Id="10286:[21504..21529).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742685" />
<Node Id="10286:[21546..21561).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 742686" />
<Node Id="10286:[21563..21583).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742687" />
<Node Id="10286:[22044..22069).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742688" />
<Node Id="10286:[22086..22108).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 742689" />
<Node Id="10286:[22110..22130).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742690" />
<Node Id="10286:[22421..22557).13" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742691" />
<Node Id="10286:[22421..22557).14" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742692" />
<Node Id="10286:[15616..15690).6" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 742693" />
<Node Id="10286:[15616..15690).7" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 742694" />
<Node Id="10286:[15715..15910).2" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 742695" />
<Node Id="10286:[23056..23081).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742696" />
<Node Id="10286:[23124..23146).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 742697" />
<Node Id="10286:[23161..23181).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742698" />
<Node Id="10286:[23281..23301).2" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 742699" />
<Node Id="10286:[23380..23684).8" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 742700" />
<Node Id="10286:[23893..24026).3" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 742701" />
<Node Id="10286:[24545..24641).3" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 742702" />
<Node Id="10286:[24655..25349).2" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 742703" />
<Node Id="10286:[26910..26935).2" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 742704" />
<Node Id="10286:[26952..26974).2" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 742705" />
<Node Id="10286:[27002..27022).2" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 742706" />
<Node Id="10286:[27048..27088).5" Label="RoslynDebug.Assert(diagnostics != null); 742707" />
<Node Id="10286:[27048..27088).6" Label="RoslynDebug.Assert(diagnostics != null); 742708" />
<Node Id="10286:[27208..27236).3" Label="DiagnosticInfo? info = null; 742709" />
<Node Id="10286:[27250..27722).2" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 742710" />
<Node Id="10286:[27738..27845).4" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 742711" />
<Node Id="10286:[27738..27845).5" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 742712" />
<Node Id="10286:[27861..27873).2" Label="return kind; 742713" />
<Node Id="10286:[26281..26812).2" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 742714" />
<Node Id="10286:[26450..26769).2" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 742715" />
<Node Id="10287:[2377..2471).9" Label="if (symbol is null)
                {
                    return default;
                } 742716" />
<Node Id="10287:[2539..2781).38" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 742717" />
<Node Id="10287:[791..833).5" Label="Debug.Assert(typeWithAnnotations.HasType); 742718" />
<Node Id="10313:[1494..2257).2" Label="if (!typeParameters.IsDefaultOrEmpty)
            {
                tpNames = PooledHashSet$string$.GetInstance();
                foreach (var tp in typeParameters)
                {
                    var name = tp.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (!tpNames.Add(name))
                    {
                        // Type parameter declaration name conflicts are detected elsewhere
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);
                    }
                }
            } 742719" />
<Node Id="10313:[2324..3491).2" Label="if (!parameters.IsDefaultOrEmpty)
            {
                pNames = PooledHashSet$string$.GetInstance();
                foreach (var p in parameters)
                {
                    var name = p.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    }

                    if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    }
                }
            } 742720" />
<Node Id="10313:[2390..2435).1" Label="pNames = PooledHashSet$string$.GetInstance(); 742721" />
<Node Id="10313:[2453..3476).1" Label="foreach (var p in parameters)
                {
                    var name = p.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    }

                    if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    }
                } 742722" />
<Node Id="10313:[2523..2541).1" Label="var name = p.Name; 742723" />
<Node Id="10313:[2563..2675).1" Label="if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    } 742724" />
<Node Id="10313:[2699..3019).1" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 742725" />
<Node Id="10313:[2699..3019).2" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 742726" />
<Node Id="10313:[3043..3457).1" Label="if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    } 742727" />
<Node Id="10313:[3043..3457).2" Label="if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    } 742728" />
<Node Id="10313:[3304..3457).1" Label="if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    } 742729" />
<Node Id="10313:[3378..3434).1" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 742730" />
<Node Id="10313:[3378..3434).2" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 742731" />
<Node Id="10313:[3378..3433).1" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics) 742732" />
<Node Id="10313:[720..733).1" Label="param ValidateDeclarationNameConflictsInScope(Symbol symbol) 742733" />
<Node Id="10313:[735..760).1" Label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 742734" />
<Node Id="10313:[666..931).1" Label="param ValidateDeclarationNameConflictsInScope(this) 742735" />
<Node Id="10313:[786..826).1" Label="Location location = GetLocation(symbol); 742736" />
<Node Id="10313:[806..825).1" Label="GetLocation(symbol) 742737" />
<Node Id="10313:[979..992).1" Label="param GetLocation(Symbol symbol) 742738" />
<Node Id="10313:[1018..1051).1" Label="var locations = symbol.Locations; 742739" />
<Node Id="10313:[1065..1148).1" Label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 742740" />
<Node Id="10313:[1065..1148).2" Label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 742741" />
<Node Id="10313:[1072..1093).1" Label="locations.Length != 0 742742" />
<Node Id="10313:[840..920).1" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 742743" />
<Node Id="10313:[840..920).2" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 742744" />
<Node Id="10313:[840..920).3" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 742745" />
<Node Id="10313:[840..920).4" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 742746" />
<Node Id="10313:[847..919).1" Label="ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics) 742747" />
<Node Id="10313:[3733..3747).1" Label="param ValidateNameConflictsInScope(Symbol? symbol) 742748" />
<Node Id="10313:[3749..3766).1" Label="param ValidateNameConflictsInScope(Location location) 742749" />
<Node Id="10313:[3768..3779).1" Label="param ValidateNameConflictsInScope(string name) 742750" />
<Node Id="10313:[3781..3806).1" Label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 742751" />
<Node Id="10313:[3691..5083).1" Label="param ValidateNameConflictsInScope(this) 742752" />
<Node Id="10313:[3832..3924).1" Label="if (string.IsNullOrEmpty(name))
            {
                return false;
            } 742753" />
<Node Id="10313:[3940..4044).1" Label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 742754" />
<Node Id="10313:[3940..4044).2" Label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 742755" />
<Node Id="10313:[4060..5043).1" Label="for (Binder? binder = this; binder != null; binder = binder.Next)
            {
                // no local scopes enclose members
                if (binder is InContainerBinder)
                {
                    return false;
                }

                var scope = binder as LocalScopeBinder;
                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                }

                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.
                if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                }

                if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                }
            } 742756" />
<Node Id="10313:[4060..5043).2" Label="for (Binder? binder = this; binder != null; binder = binder.Next)
            {
                // no local scopes enclose members
                if (binder is InContainerBinder)
                {
                    return false;
                }

                var scope = binder as LocalScopeBinder;
                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                }

                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.
                if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                }

                if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                }
            } 742757" />
<Node Id="10313:[4210..4315).1" Label="if (binder is InContainerBinder)
                {
                    return false;
                } 742758" />
<Node Id="10313:[4335..4374).1" Label="var scope = binder as LocalScopeBinder; 742759" />
<Node Id="10313:[4392..4543).1" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 742760" />
<Node Id="10313:[4392..4543).2" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 742761" />
<Node Id="10313:[4698..4727).1" Label="binder.IsNestedFunctionBinder 742762" />
<Node Id="10286:[8381..8389).1" Label="=$ false 742763" />
<Node Id="10286:[8384..8389).1" Label="false 742764" />
<Node Id="10313:[4676..4801).1" Label="if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                } 742765" />
<Node Id="10313:[4676..4801).2" Label="if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                } 742766" />
<Node Id="10313:[4825..4858).1" Label="binder.IsLastBinderWithinMember() 742767" />
<Node Id="10313:[5095..5688).1" Label="param IsLastBinderWithinMember(this) 742768" />
<Node Id="10313:[5190..5219).1" Label="this.ContainingMemberOrLambda 742769" />
<Node Id="10307:[1439..1480).5" Label="get { return _containingMemberOrLambda; } 742770" />
<Node Id="10307:[1445..1478).5" Label="return _containingMemberOrLambda; 742771" />
<Node Id="10313:[5159..5220).1" Label="var containingMemberOrLambda = this.ContainingMemberOrLambda; 742772" />
<Node Id="10313:[5236..5677).1" Label="switch (containingMemberOrLambda?.Kind)
            {
                case null:
                case SymbolKind.NamedType:
                case SymbolKind.Namespace:
                    return true;
                default:
                    return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda;
            } 742773" />
<Node Id="10313:[5488..5662).1" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 742774" />
<Node Id="10313:[5608..5633).1" Label=".ContainingMemberOrLambda 742775" />
<Node Id="10346:[7562..7572).1" Label="_container 742776" />
<Node Id="10313:[5488..5662).2" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 742777" />
<Node Id="10313:[4821..5028).1" Label="if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                } 742778" />
<Node Id="10313:[4996..5009).1" Label="return false; 742779" />
<Node Id="10313:[840..920).5" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 742780" />
<Node Id="10313:[3537..3552).2" Label="pNames?.Free(); 742781" />
<Node Id="10319:[20392..20435).1" Label="return bindPredefined(syntax, diagnostics); 742782" />
<Node Id="10319:[20392..20435).2" Label="return bindPredefined(syntax, diagnostics); 742783" />
<Node Id="10319:[20399..20434).1" Label="bindPredefined(syntax, diagnostics) 742784" />
<Node Id="10319:[27647..28051).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 742785" />
<Node Id="10319:[27647..28051).2" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 742786" />
<Node Id="10319:[27647..28051).3" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 742787" />
<Node Id="10319:[27790..27840).1" Label="var predefinedType = (PredefinedTypeSyntax)syntax; 742788" />
<Node Id="10319:[27858..27923).1" Label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 742789" />
<Node Id="10319:[27858..27923).2" Label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 742790" />
<Node Id="10319:[27869..27922).1" Label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 742791" />
<Node Id="10319:[39111..39136).1" Label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 742792" />
<Node Id="10319:[39138..39163).1" Label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 742793" />
<Node Id="10319:[39062..39279).1" Label="param BindPredefinedTypeSymbol(this) 742794" />
<Node Id="10319:[39189..39268).1" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 742795" />
<Node Id="10319:[39189..39268).6" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 742796" />
<Node Id="10319:[39189..39268).7" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 742797" />
<Node Id="10319:[39196..39267).1" Label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 742798" />
<Node Id="10319:[73460..73478).1" Label="param GetSpecialType(SpecialType typeId) 742799" />
<Node Id="10319:[73480..73505).1" Label="param GetSpecialType(DiagnosticBag diagnostics) 742800" />
<Node Id="10319:[73507..73522).1" Label="param GetSpecialType(SyntaxNode node) 742801" />
<Node Id="10319:[73420..73626).1" Label="param GetSpecialType(this) 742802" />
<Node Id="10319:[73548..73615).1" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 742803" />
<Node Id="10319:[73548..73615).2" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 742804" />
<Node Id="10319:[73548..73615).3" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 742805" />
<Node Id="10319:[73548..73615).4" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 742806" />
<Node Id="10319:[73555..73614).1" Label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 742807" />
<Node Id="10319:[73685..73714).1" Label="param GetSpecialType(CSharpCompilation compilation) 742808" />
<Node Id="10319:[73716..73734).1" Label="param GetSpecialType(SpecialType typeId) 742809" />
<Node Id="10319:[73736..73751).1" Label="param GetSpecialType(SyntaxNode node) 742810" />
<Node Id="10319:[73753..73778).1" Label="param GetSpecialType(DiagnosticBag diagnostics) 742811" />
<Node Id="10319:[73804..73868).1" Label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 742812" />
<Node Id="10319:[73804..73868).2" Label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 742813" />
<Node Id="10319:[73882..73975).1" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 742814" />
<Node Id="10319:[73882..73975).2" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 742815" />
<Node Id="10319:[73989..74045).1" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 742816" />
<Node Id="10319:[73989..74045).2" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 742817" />
<Node Id="10319:[73989..74045).3" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 742818" />
<Node Id="10319:[73989..74044).1" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 742819" />
<Node Id="10319:[76345..76358).4" Label="param ReportUseSiteDiagnostics(Symbol symbol) 742820" />
<Node Id="10319:[76360..76385).4" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 742821" />
<Node Id="10319:[76387..76402).4" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 742822" />
<Node Id="10319:[74059..74077).1" Label="return typeSymbol; 742823" />
<Node Id="10319:[27941..28036).1" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 742824" />
<Node Id="10319:[27975..28028).1" Label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 742825" />
<Node Id="10286:[10010..10027).4" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 742826" />
<Node Id="10286:[9966..10197).4" Label="param AreNullableAnnotationsEnabled(this) 742827" />
<Node Id="10319:[27941..28036).4" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 742828" />
<Node Id="10319:[28030..28034).1" Label="type 742829" />
<Node Id="10287:[2888..2927).1" Label="param operator(TypeWithAnnotations typeWithAnnotations) 742830" />
<Node Id="10287:[2961..3037).1" Label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 742831" />
<Node Id="10287:[2961..3037).2" Label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 742832" />
<Node Id="10287:[2968..3036).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 742833" />
<Node Id="10287:[718..757).4" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 742834" />
<Node Id="10287:[666..1076).4" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 742835" />
<Node Id="10287:[791..833).7" Label="Debug.Assert(typeWithAnnotations.HasType); 742836" />
<Node Id="10319:[27941..28036).5" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 742837" />
<Node Id="10319:[27941..28036).7" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 742838" />
<Node Id="10319:[27941..28036).9" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 742839" />
<Node Id="10319:[15548..15561).3" Label="symbol.IsType 742840" />
<Node Id="10319:[15544..15884).5" Label="if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                } 742841" />
<Node Id="10319:[15783..15809).1" Label="symbol.TypeWithAnnotations 742842" />
<Node Id="10319:[15783..15865).1" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 742843" />
<Node Id="10319:[15783..15865).2" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 742844" />
<Node Id="10319:[15783..15865).3" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 742845" />
<Node Id="10319:[15783..15865).4" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 742846" />
<Node Id="10319:[15783..15865).6" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 742847" />
<Node Id="10286:[21546..21561).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 742848" />
<Node Id="10286:[21563..21583).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742849" />
<Node Id="10286:[22044..22069).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742850" />
<Node Id="10286:[22086..22108).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 742851" />
<Node Id="10286:[22110..22130).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742852" />
<Node Id="10286:[15616..15690).11" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 742853" />
<Node Id="10286:[15616..15690).12" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 742854" />
<Node Id="10286:[15715..15910).3" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 742855" />
<Node Id="10286:[23056..23081).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742856" />
<Node Id="10286:[23124..23146).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 742857" />
<Node Id="10286:[23161..23181).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742858" />
<Node Id="10286:[23281..23301).3" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 742859" />
<Node Id="10286:[23380..23684).15" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 742860" />
<Node Id="10286:[23893..24026).5" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 742861" />
<Node Id="10286:[24545..24641).5" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 742862" />
<Node Id="10286:[24655..25349).3" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 742863" />
<Node Id="10286:[26910..26935).3" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 742864" />
<Node Id="10286:[26952..26974).3" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 742865" />
<Node Id="10286:[27002..27022).3" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 742866" />
<Node Id="10286:[27048..27088).9" Label="RoslynDebug.Assert(diagnostics != null); 742867" />
<Node Id="10286:[27048..27088).10" Label="RoslynDebug.Assert(diagnostics != null); 742868" />
<Node Id="10286:[27208..27236).5" Label="DiagnosticInfo? info = null; 742869" />
<Node Id="10286:[27250..27722).3" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 742870" />
<Node Id="10286:[27738..27845).7" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 742871" />
<Node Id="10286:[27738..27845).8" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 742872" />
<Node Id="10286:[27861..27873).3" Label="return kind; 742873" />
<Node Id="10286:[26281..26812).3" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 742874" />
<Node Id="10286:[26450..26769).3" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 742875" />
<Node Id="10287:[1683..1690).2" Label="_symbol 742876" />
<Node Id="10845:[522..547).3" Label="param TypeConversions(AssemblySymbol corLibrary) 742877" />
<Node Id="10845:[549..580).3" Label="param TypeConversions(bool includeNullability = false) 742878" />
<Node Id="10845:[499..728).5" Label="param TypeConversions(this) 742879" />
<Node Id="10845:[602..612).3" Label="corLibrary 742880" />
<Node Id="10845:[637..638).5" Label="0 742881" />
<Node Id="10845:[660..678).3" Label="includeNullability 742882" />
<Node Id="10845:[701..705).5" Label="null 742883" />
<Node Id="10845:[499..728).6" Label="param TypeConversions(this) 742884" />
<Node Id="10845:[764..789).3" Label="param TypeConversions(AssemblySymbol corLibrary) 742885" />
<Node Id="10845:[791..816).3" Label="param TypeConversions(int currentRecursionDepth) 742886" />
<Node Id="10845:[818..841).3" Label="param TypeConversions(bool includeNullability) 742887" />
<Node Id="10845:[843..878).3" Label="param TypeConversions(TypeConversions otherNullabilityOpt) 742888" />
<Node Id="10845:[740..997).5" Label="param TypeConversions(this) 742889" />
<Node Id="10845:[900..910).3" Label="corLibrary 742890" />
<Node Id="10845:[912..933).3" Label="currentRecursionDepth 742891" />
<Node Id="10845:[935..953).3" Label="includeNullability 742892" />
<Node Id="10845:[955..974).3" Label="otherNullabilityOpt 742893" />
<Node Id="10845:[740..997).6" Label="param TypeConversions(this) 742894" />
<Node Id="10843:[1173..1198).3" Label="param ConversionsBase(AssemblySymbol corLibrary) 742895" />
<Node Id="10843:[1200..1225).3" Label="param ConversionsBase(int currentRecursionDepth) 742896" />
<Node Id="10843:[1227..1250).3" Label="param ConversionsBase(bool includeNullability) 742897" />
<Node Id="10843:[1252..1287).3" Label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 742898" />
<Node Id="10843:[1147..1833).3" Label="param ConversionsBase(this) 742899" />
<Node Id="10843:[734..744).3" Label="corLibrary 742900" />
<Node Id="10843:[778..799).3" Label="currentRecursionDepth 742901" />
<Node Id="10843:[835..853).3" Label="IncludeNullability 742902" />
<Node Id="10843:[1113..1134).3" Label="_lazyOtherNullability 742903" />
<Node Id="10843:[1313..1354).9" Label="Debug.Assert((object)corLibrary != null); 742904" />
<Node Id="10843:[1313..1354).10" Label="Debug.Assert((object)corLibrary != null); 742905" />
<Node Id="10843:[1368..1474).11" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 742906" />
<Node Id="10843:[1368..1474).12" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 742907" />
<Node Id="10843:[1488..1600).11" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 742908" />
<Node Id="10843:[1488..1600).12" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 742909" />
<Node Id="10843:[1616..1631).3" Label="this.corLibrary 742910" />
<Node Id="10843:[1659..1685).3" Label="this.currentRecursionDepth 742911" />
<Node Id="10843:[1724..1742).3" Label="IncludeNullability 742912" />
<Node Id="10843:[1778..1799).3" Label="_lazyOtherNullability 742913" />
<Node Id="10076:[5223..5250).14" Label="Debug.Assert(node != null); 742914" />
<Node Id="10077:[2398..2415).1" Label="param DefaultVisit(SyntaxNode parent) 742915" />
<Node Id="10077:[2362..2496).1" Label="param DefaultVisit(this) 742916" />
<Node Id="10077:[2449..2481).1" Label="return VisitCore(parent.Parent); 742917" />
<Node Id="10077:[2456..2480).1" Label="VisitCore(parent.Parent) 742918" />
<Node Id="10077:[2877..2892).6" Label="param VisitCore(SyntaxNode node) 742919" />
<Node Id="10077:[2852..2986).6" Label="param VisitCore(this) 742920" />
<Node Id="10077:[2926..2971).33" Label="return ((CSharpSyntaxNode)node).Accept(this); 742921" />
<Node Id="10077:[15216..15245).1" Label="param VisitFieldDeclaration(FieldDeclarationSyntax parent) 742922" />
<Node Id="10077:[15171..15372).1" Label="param VisitFieldDeclaration(this) 742923" />
<Node Id="10077:[15279..15357).1" Label="return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers); 742924" />
<Node Id="10077:[15286..15310).1" Label="VisitCore(parent.Parent) 742925" />
<Node Id="10077:[2877..2892).7" Label="param VisitCore(SyntaxNode node) 742926" />
<Node Id="10077:[2852..2986).7" Label="param VisitCore(this) 742927" />
<Node Id="10077:[2926..2971).36" Label="return ((CSharpSyntaxNode)node).Accept(this); 742928" />
<Node Id="10077:[34685..34715).2" Label="VisitTypeDeclarationCore(node) 742929" />
<Node Id="10077:[31258..31297).2" Label="NodeUsage extraInfo = NodeUsage.Normal; 742930" />
<Node Id="10077:[31490..32331).13" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 742931" />
<Node Id="10077:[32358..32401).2" Label="VisitTypeDeclarationCore(parent, extraInfo) 742932" />
<Node Id="10077:[32567..32606).4" Label="CreateBinderCacheKey(parent, extraInfo) 742933" />
<Node Id="10077:[44231..44317).57" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 742934" />
<Node Id="10077:[44231..44317).59" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 742935" />
<Node Id="10077:[44335..44374).31" Label="return new BinderCacheKey(node, usage); 742936" />
<Node Id="10077:[44342..44373).8" Label="new BinderCacheKey(node, usage) 742937" />
<Node Id="10076:[853..1034).8" Label="param BinderCacheKey(this) 742938" />
<Node Id="10077:[32557..32607).15" Label="var key = CreateBinderCacheKey(parent, extraInfo); 742939" />
<Node Id="10077:[32627..32647).4" Label="Binder resultBinder; 742940" />
<Node Id="10077:[32670..32681).4" Label="binderCache 742941" />
<Node Id="10077:[32665..34501).35" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 742942" />
<Node Id="10077:[32665..34501).36" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 742943" />
<Node Id="10077:[32665..34501).38" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 742944" />
<Node Id="10077:[15286..15356).1" Label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 742945" />
<Node Id="10307:[3496..3521).4" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 742946" />
<Node Id="10307:[3452..3756).4" Label="param WithUnsafeRegionIfNecessary(this) 742947" />
<Node Id="10307:[3547..3745).29" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 742948" />
<Node Id="10307:[3555..3600).4" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 742949" />
<Node Id="10298:[494..511).46" Label="param Includes(BinderFlags other) 742950" />
<Node Id="10286:[1688..1781).19" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 742951" />
<Node Id="10298:[471..492).47" Label="param Includes(this BinderFlags self) 742952" />
<Node Id="10286:[1820..1963).19" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 742953" />
<Node Id="10298:[471..492).48" Label="param Includes(this BinderFlags self) 742954" />
<Node Id="10319:[42478..42805).10" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 742955" />
<Node Id="10319:[42821..42938).25" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 742956" />
<Node Id="10319:[42839..42937).4" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 742957" />
<Node Id="10319:[63849..63870).4" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 742958" />
<Node Id="10319:[63885..63919).4" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 742959" />
<Node Id="10319:[63934..63945).4" Label="param CreateErrorIfLookupOnTypeParameter(string name) 742960" />
<Node Id="10319:[63960..63969).4" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 742961" />
<Node Id="10319:[63984..64009).4" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 742962" />
<Node Id="10319:[63768..64484).4" Label="param CreateErrorIfLookupOnTypeParameter(this) 742963" />
<Node Id="10319:[64035..64445).13" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 742964" />
<Node Id="10319:[64035..64445).14" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 742965" />
<Node Id="10319:[64461..64473).7" Label="return null; 742966" />
<Node Id="10319:[42821..42938).31" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 742967" />
<Node Id="10319:[42952..43079).10" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 742968" />
<Node Id="10319:[42952..43079).11" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 742969" />
<Node Id="10354:[11312..11328).6" Label="instance.IsClear 742970" />
<Node Id="10354:[3684..3818).22" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 742971" />
<Node Id="10354:[3720..3803).157" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742972" />
<Node Id="10354:[3720..3803).158" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742973" />
<Node Id="10354:[3720..3803).159" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742974" />
<Node Id="10354:[11299..11330).16" Label="Debug.Assert(instance.IsClear); 742975" />
<Node Id="10319:[50330..50355).4" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 742976" />
<Node Id="10312:[1222..1235).4" Label="param LookupSymbolsSimpleName(bool diagnose) 742977" />
<Node Id="10312:[5944..5957).4" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 742978" />
<Node Id="10312:[3805..3818).4" Label="param LookupSymbolsInternal(bool diagnose) 742979" />
<Node Id="10312:[3905..3919).4" Label="result.IsClear 742980" />
<Node Id="10354:[3684..3818).23" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 742981" />
<Node Id="10354:[3720..3803).165" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742982" />
<Node Id="10354:[3720..3803).166" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742983" />
<Node Id="10354:[3720..3803).167" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742984" />
<Node Id="10312:[3892..3921).10" Label="Debug.Assert(result.IsClear); 742985" />
<Node Id="10312:[3935..3968).13" Label="Debug.Assert(options.AreValid()); 742986" />
<Node Id="10312:[3948..3966).4" Label="options.AreValid() 742987" />
<Node Id="10353:[4698..4724).9" Label="param AreValid(this LookupOptions options) 742988" />
<Node Id="10353:[4750..4847).17" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 742989" />
<Node Id="10353:[4863..5000).33" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 742990" />
<Node Id="10353:[4863..5000).34" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 742991" />
<Node Id="10353:[5079..5183).17" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 742992" />
<Node Id="10353:[5197..5323).25" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 742993" />
<Node Id="10353:[5485..5759).49" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 742994" />
<Node Id="10353:[5485..5759).50" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 742995" />
<Node Id="10353:[5485..5759).51" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 742996" />
<Node Id="10353:[5775..5979).33" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 742997" />
<Node Id="10353:[5775..5979).35" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 742998" />
<Node Id="10353:[5995..6029).25" Label="return OnlyOneBitSet(onlyOptions); 742999" />
<Node Id="10353:[6002..6028).9" Label="OnlyOneBitSet(onlyOptions) 743000" />
<Node Id="10353:[6343..6358).9" Label="param OnlyOneBitSet(LookupOptions o) 743001" />
<Node Id="10353:[6384..6410).49" Label="return (o & (o - 1)) == 0; 743002" />
<Node Id="10353:[6384..6410).50" Label="return (o & (o - 1)) == 0; 743003" />
<Node Id="10312:[5188..5207).4" Label="param LookupSymbolsInSingleBinder(LookupResult result) 743004" />
<Node Id="10312:[5209..5220).4" Label="param LookupSymbolsInSingleBinder(string name) 743005" />
<Node Id="10312:[5222..5231).4" Label="param LookupSymbolsInSingleBinder(int arity) 743006" />
<Node Id="10312:[5233..5272).4" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 743007" />
<Node Id="10312:[5274..5295).4" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 743008" />
<Node Id="10312:[5297..5318).4" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 743009" />
<Node Id="10312:[5320..5333).4" Label="param LookupSymbolsInSingleBinder(bool diagnose) 743010" />
<Node Id="10312:[5124..5404).4" Label="param LookupSymbolsInSingleBinder(this) 743011" />
<Node Id="10312:[4685..4699).9" Label="result.IsClear 743012" />
<Node Id="10354:[3684..3818).24" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 743013" />
<Node Id="10354:[3720..3803).173" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743014" />
<Node Id="10354:[3720..3803).174" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743015" />
<Node Id="10354:[3720..3803).175" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743016" />
<Node Id="10312:[4680..4787).17" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 743017" />
<Node Id="10312:[4826..5058).41" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 743018" />
<Node Id="10312:[4826..5058).42" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 743019" />
<Node Id="10346:[10761..10774).6" Label="param LookupSymbolsInSingleBinder(bool diagnose) 743020" />
<Node Id="10346:[10861..10875).6" Label="result.IsClear 743021" />
<Node Id="10354:[3684..3818).25" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 743022" />
<Node Id="10354:[3720..3803).181" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743023" />
<Node Id="10354:[3720..3803).182" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743024" />
<Node Id="10354:[3720..3803).183" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743025" />
<Node Id="10346:[10848..10877).16" Label="Debug.Assert(result.IsClear); 743026" />
<Node Id="10346:[10897..10914).6" Label="IsSubmissionClass 743027" />
<Node Id="10346:[7666..7775).6" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 743028" />
<Node Id="10346:[7672..7773).16" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 743029" />
<Node Id="10346:[10893..11127).11" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 743030" />
<Node Id="10346:[3525..3638).45" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 743031" />
<Node Id="10312:[7718..7727).6" Label="param LookupMembersInternal(int arity) 743032" />
<Node Id="10312:[7816..7829).6" Label="param LookupMembersInternal(bool diagnose) 743033" />
<Node Id="10312:[7903..7936).21" Label="Debug.Assert(options.AreValid()); 743034" />
<Node Id="10312:[7916..7934).6" Label="options.AreValid() 743035" />
<Node Id="10353:[4698..4724).10" Label="param AreValid(this LookupOptions options) 743036" />
<Node Id="10353:[4750..4847).19" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 743037" />
<Node Id="10353:[4863..5000).37" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 743038" />
<Node Id="10353:[4863..5000).38" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 743039" />
<Node Id="10353:[5079..5183).19" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 743040" />
<Node Id="10353:[5197..5323).28" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 743041" />
<Node Id="10353:[5485..5759).55" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743042" />
<Node Id="10353:[5485..5759).56" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743043" />
<Node Id="10353:[5485..5759).57" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743044" />
<Node Id="10353:[5775..5979).37" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 743045" />
<Node Id="10353:[5775..5979).39" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 743046" />
<Node Id="10353:[5995..6029).28" Label="return OnlyOneBitSet(onlyOptions); 743047" />
<Node Id="10353:[6002..6028).10" Label="OnlyOneBitSet(onlyOptions) 743048" />
<Node Id="10353:[6343..6358).10" Label="param OnlyOneBitSet(LookupOptions o) 743049" />
<Node Id="10353:[6384..6410).55" Label="return (o & (o - 1)) == 0; 743050" />
<Node Id="10353:[6384..6410).56" Label="return (o & (o - 1)) == 0; 743051" />
<Node Id="10312:[7952..7977).21" Label="Debug.Assert(arity $= 0); 743052" />
<Node Id="10312:[7952..7977).22" Label="Debug.Assert(arity $= 0); 743053" />
<Node Id="10312:[8594..8603).3" Label="param LookupMembersInType(int arity) 743054" />
<Node Id="10312:[8669..8690).3" Label="param LookupMembersInType(Binder originalBinder) 743055" />
<Node Id="10312:[8692..8705).3" Label="param LookupMembersInType(bool diagnose) 743056" />
<Node Id="10312:[34797..34806).3" Label="param LookupMembersInClass(int arity) 743057" />
<Node Id="10312:[34911..34932).3" Label="param LookupMembersInClass(Binder originalBinder) 743058" />
<Node Id="10312:[34947..34960).3" Label="param LookupMembersInClass(bool diagnose) 743059" />
<Node Id="10312:[35403..35412).3" Label="param LookupMembersInClass(int arity) 743060" />
<Node Id="10312:[35517..35538).3" Label="param LookupMembersInClass(Binder originalBinder) 743061" />
<Node Id="10312:[35596..35609).3" Label="param LookupMembersInClass(bool diagnose) 743062" />
<Node Id="10312:[35696..35731).9" Label="Debug.Assert((object)type != null); 743063" />
<Node Id="10312:[36067..36079).5" Label="tmp.Clear(); 743064" />
<Node Id="10312:[33656..33675).5" Label="param LookupMembersWithoutInheritance(LookupResult result) 743065" />
<Node Id="10312:[33707..33716).5" Label="param LookupMembersWithoutInheritance(int arity) 743066" />
<Node Id="10312:[33754..33775).5" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 743067" />
<Node Id="10312:[33777..33805).5" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 743068" />
<Node Id="10312:[33807..33820).5" Label="param LookupMembersWithoutInheritance(bool diagnose) 743069" />
<Node Id="10312:[33870..33909).5" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 743070" />
<Node Id="10312:[61608..61629).8" Label="param GetCandidateMembers(Binder originalBinder) 743071" />
<Node Id="10312:[34022..34574).13" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 743072" />
<Node Id="10312:[36278..36360).45" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 743073" />
<Node Id="10354:[9012..9030).5" Label="param MergePrioritized(LookupResult other) 743074" />
<Node Id="10354:[8981..9152).5" Label="param MergePrioritized(this) 743075" />
<Node Id="10354:[9060..9070).5" Label="other.Kind 743076" />
<Node Id="10354:[4058..4122).56" Label="get
            {
                return _kind;
            } 743077" />
<Node Id="10354:[9056..9141).17" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 743078" />
<Node Id="10354:[9073..9077).5" Label="Kind 743079" />
<Node Id="10354:[4058..4122).57" Label="get
            {
                return _kind;
            } 743080" />
<Node Id="10354:[9056..9141).18" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 743081" />
<Node Id="10354:[9056..9141).19" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 743082" />
<Node Id="10312:[36566..36625).5" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 743083" />
<Node Id="10312:[36643..36855).13" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 743084" />
<Node Id="10312:[36643..36855).14" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 743085" />
<Node Id="10312:[37029..37117).13" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 743086" />
<Node Id="10312:[37258..37278).5" Label="result.IsMultiViable 743087" />
<Node Id="10354:[4094..4107).59" Label="return _kind; 743088" />
<Node Id="10312:[37254..37416).13" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 743089" />
<Node Id="10312:[37436..37988).17" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 743090" />
<Node Id="10312:[37436..37988).18" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 743091" />
<Node Id="10312:[38290..38338).5" Label="originalBinder.InCrefButNotParameterOrReturnType 743092" />
<Node Id="10306:[3345..3430).5" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 743093" />
<Node Id="10306:[3358..3364).5" Label="InCref 743094" />
<Node Id="10306:[3196..3249).17" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 743095" />
<Node Id="10306:[3202..3247).65" Label="return this.Flags.Includes(BinderFlags.Cref); 743096" />
<Node Id="10306:[3351..3428).13" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 743097" />
<Node Id="10312:[38286..38405).9" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 743098" />
<Node Id="10312:[36067..36079).6" Label="tmp.Clear(); 743099" />
<Node Id="10312:[36097..36258).61" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 743100" />
<Node Id="10312:[33656..33675).6" Label="param LookupMembersWithoutInheritance(LookupResult result) 743101" />
<Node Id="10312:[33707..33716).6" Label="param LookupMembersWithoutInheritance(int arity) 743102" />
<Node Id="10312:[33754..33775).6" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 743103" />
<Node Id="10312:[33777..33805).6" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 743104" />
<Node Id="10312:[33807..33820).6" Label="param LookupMembersWithoutInheritance(bool diagnose) 743105" />
<Node Id="10312:[33870..33909).6" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 743106" />
<Node Id="10312:[61608..61629).9" Label="param GetCandidateMembers(Binder originalBinder) 743107" />
<Node Id="10312:[34022..34574).16" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 743108" />
<Node Id="10354:[9012..9030).6" Label="param MergePrioritized(LookupResult other) 743109" />
<Node Id="10354:[8981..9152).6" Label="param MergePrioritized(this) 743110" />
<Node Id="10354:[9060..9070).6" Label="other.Kind 743111" />
<Node Id="10354:[4058..4122).61" Label="get
            {
                return _kind;
            } 743112" />
<Node Id="10354:[9056..9141).21" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 743113" />
<Node Id="10354:[9073..9077).6" Label="Kind 743114" />
<Node Id="10354:[4058..4122).62" Label="get
            {
                return _kind;
            } 743115" />
<Node Id="10354:[9056..9141).22" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 743116" />
<Node Id="10354:[9056..9141).23" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 743117" />
<Node Id="10312:[36566..36625).6" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 743118" />
<Node Id="10312:[36643..36855).16" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 743119" />
<Node Id="10312:[36643..36855).17" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 743120" />
<Node Id="10312:[37029..37117).16" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 743121" />
<Node Id="10312:[37258..37278).6" Label="result.IsMultiViable 743122" />
<Node Id="10312:[37254..37416).16" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 743123" />
<Node Id="10312:[37436..37988).21" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 743124" />
<Node Id="10312:[38290..38338).6" Label="originalBinder.InCrefButNotParameterOrReturnType 743125" />
<Node Id="10306:[3345..3430).6" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 743126" />
<Node Id="10306:[3358..3364).6" Label="InCref 743127" />
<Node Id="10306:[3196..3249).18" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 743128" />
<Node Id="10306:[3351..3428).16" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 743129" />
<Node Id="10312:[38286..38405).11" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 743130" />
<Node Id="10312:[38756..38772).3" Label="visited?.Free(); 743131" />
<Node Id="10354:[11428..11441).6" Label="this.Clear(); 743132" />
<Node Id="10312:[38786..38797).3" Label="tmp.Free(); 743133" />
<Node Id="10345:[29214..29227).5" Label="param LookupSymbol(bool diagnose) 743134" />
<Node Id="10345:[29998..30011).5" Label="param LookupSymbolInAliases(bool diagnose) 743135" />
<Node Id="10345:[30883..31655).13" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 743136" />
<Node Id="10345:[29566..29700).28" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 743137" />
<Node Id="10345:[31734..31789).3" Label="param LookupSymbolInUsings(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 743138" />
<Node Id="10345:[31804..31825).3" Label="param LookupSymbolInUsings(Binder originalBinder) 743139" />
<Node Id="10345:[31840..31859).3" Label="param LookupSymbolInUsings(LookupResult result) 743140" />
<Node Id="10345:[31874..31885).3" Label="param LookupSymbolInUsings(string name) 743141" />
<Node Id="10345:[31900..31909).3" Label="param LookupSymbolInUsings(int arity) 743142" />
<Node Id="10345:[31924..31963).3" Label="param LookupSymbolInUsings(ConsList$TypeSymbol$ basesBeingResolved) 743143" />
<Node Id="10345:[31978..31999).3" Label="param LookupSymbolInUsings(LookupOptions options) 743144" />
<Node Id="10345:[32014..32027).3" Label="param LookupSymbolInUsings(bool diagnose) 743145" />
<Node Id="10345:[32114..32230).9" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 743146" />
<Node Id="10345:[32114..32230).10" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 743147" />
<Node Id="10345:[32118..32174).3" Label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 743148" />
<Node Id="10298:[471..492).52" Label="param Includes(this BinderFlags self) 743149" />
<Node Id="10298:[494..511).52" Label="param Includes(BinderFlags other) 743150" />
<Node Id="10345:[32275..32311).3" Label="originalBinder.IsSemanticModelBinder 743151" />
<Node Id="10286:[2155..2260).9" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 743152" />
<Node Id="10345:[32246..32312).5" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 743153" />
<Node Id="10345:[32328..33465).7" Label="foreach (var typeOrNamespace in usings)
            {
                ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);
                foreach (Symbol symbol in candidates)
                {
                    if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    }

                    // Found a match in our list of normal using directives.  Mark the directive
                    // as being seen so that it won't be reported to the user as something that
                    // can be removed.
                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 743154" />
<Node Id="10354:[3720..3803).197" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743155" />
<Node Id="10354:[3720..3803).199" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743156" />
<Node Id="10312:[4680..4787).19" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 743157" />
<Node Id="10346:[10861..10875).7" Label="result.IsClear 743158" />
<Node Id="10354:[3684..3818).28" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 743159" />
<Node Id="10354:[3720..3803).205" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743160" />
<Node Id="10354:[3720..3803).206" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743161" />
<Node Id="10354:[3720..3803).207" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743162" />
<Node Id="10346:[10848..10877).19" Label="Debug.Assert(result.IsClear); 743163" />
<Node Id="10346:[10897..10914).7" Label="IsSubmissionClass 743164" />
<Node Id="10346:[7666..7775).7" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 743165" />
<Node Id="10346:[7672..7773).19" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 743166" />
<Node Id="10346:[10893..11127).13" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 743167" />
<Node Id="10346:[3525..3638).52" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 743168" />
<Node Id="10312:[7903..7936).25" Label="Debug.Assert(options.AreValid()); 743169" />
<Node Id="10312:[7916..7934).7" Label="options.AreValid() 743170" />
<Node Id="10353:[4698..4724).11" Label="param AreValid(this LookupOptions options) 743171" />
<Node Id="10353:[4750..4847).21" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 743172" />
<Node Id="10353:[4863..5000).41" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 743173" />
<Node Id="10353:[4863..5000).42" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 743174" />
<Node Id="10353:[5079..5183).21" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 743175" />
<Node Id="10353:[5197..5323).31" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 743176" />
<Node Id="10353:[5485..5759).61" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743177" />
<Node Id="10353:[5485..5759).62" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743178" />
<Node Id="10353:[5485..5759).63" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743179" />
<Node Id="10353:[5775..5979).41" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 743180" />
<Node Id="10353:[5775..5979).43" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 743181" />
<Node Id="10353:[5995..6029).31" Label="return OnlyOneBitSet(onlyOptions); 743182" />
<Node Id="10353:[6002..6028).11" Label="OnlyOneBitSet(onlyOptions) 743183" />
<Node Id="10353:[6343..6358).11" Label="param OnlyOneBitSet(LookupOptions o) 743184" />
<Node Id="10353:[6384..6410).61" Label="return (o & (o - 1)) == 0; 743185" />
<Node Id="10353:[6384..6410).62" Label="return (o & (o - 1)) == 0; 743186" />
<Node Id="10312:[7952..7977).25" Label="Debug.Assert(arity $= 0); 743187" />
<Node Id="10312:[19030..19039).4" Label="param LookupMembersInNamespace(int arity) 743188" />
<Node Id="10312:[19087..19100).4" Label="param LookupMembersInNamespace(bool diagnose) 743189" />
<Node Id="10312:[61608..61629).10" Label="param GetCandidateMembers(Binder originalBinder) 743190" />
<Node Id="10345:[29214..29227).6" Label="param LookupSymbol(bool diagnose) 743191" />
<Node Id="10345:[29998..30011).6" Label="param LookupSymbolInAliases(bool diagnose) 743192" />
<Node Id="10312:[63439..63448).4" Label="param CheckViability(int arity) 743193" />
<Node Id="10312:[63473..63501).4" Label="param CheckViability(TypeSymbol accessThroughType) 743194" />
<Node Id="10312:[63503..63516).4" Label="param CheckViability(bool diagnose) 743195" />
<Node Id="10312:[63638..63668).4" Label="bool inaccessibleViaQualifier; 743196" />
<Node Id="10312:[63682..63706).4" Label="DiagnosticInfo diagInfo; 743197" />
<Node Id="10312:[80978..80991).4" Label="param WrongArity(Symbol symbol) 743198" />
<Node Id="10312:[80993..81002).4" Label="param WrongArity(int arity) 743199" />
<Node Id="10312:[81004..81017).4" Label="param WrongArity(bool diagnose) 743200" />
<Node Id="10312:[81019..81040).4" Label="param WrongArity(LookupOptions options) 743201" />
<Node Id="10312:[81042..81069).4" Label="param WrongArity(out DiagnosticInfo diagInfo) 743202" />
<Node Id="10312:[81095..84034).4" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 743203" />
<Node Id="10312:[83750..83991).7" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 743204" />
<Node Id="10312:[83750..83991).8" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 743205" />
<Node Id="10312:[84050..84066).7" Label="diagInfo = null; 743206" />
<Node Id="10312:[66177..69285).40" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 743207" />
<Node Id="10312:[66291..66342).4" Label="RefineAccessThroughType(options, accessThroughType) 743208" />
<Node Id="10312:[75301..75322).4" Label="param RefineAccessThroughType(LookupOptions options) 743209" />
<Node Id="10312:[75324..75352).4" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 743210" />
<Node Id="10312:[75735..75866).16" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 743211" />
<Node Id="10312:[75735..75866).17" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 743212" />
<Node Id="10312:[75742..75804).4" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 743213" />
<Node Id="10312:[75735..75866).19" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 743214" />
<Node Id="10312:[66177..69285).43" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 743215" />
<Node Id="10312:[66177..69285).44" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 743216" />
<Node Id="10312:[77543..77571).4" Label="param IsAccessible(TypeSymbol accessThroughType) 743217" />
<Node Id="10312:[77573..77604).4" Label="param IsAccessible(out bool failedThroughTypeCheck) 743218" />
<Node Id="10312:[77654..77700).4" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 743219" />
<Node Id="10312:[77726..77892).13" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 743220" />
<Node Id="10312:[77726..77892).14" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 743221" />
<Node Id="10312:[77730..77782).4" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 743222" />
<Node Id="10298:[471..492).58" Label="param Includes(this BinderFlags self) 743223" />
<Node Id="10298:[494..511).58" Label="param Includes(BinderFlags other) 743224" />
<Node Id="10312:[78402..78430).4" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 743225" />
<Node Id="10312:[78432..78463).4" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 743226" />
<Node Id="10312:[78513..78552).4" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 743227" />
<Node Id="10346:[8034..8062).4" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 743228" />
<Node Id="10346:[8064..8095).4" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 743229" />
<Node Id="10346:[8145..8184).4" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 743230" />
<Node Id="10286:[30135..30160).3" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 743231" />
<Node Id="10286:[30175..30206).3" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 743232" />
<Node Id="10286:[30283..30330).3" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 743233" />
<Node Id="10286:[30012..30691).3" Label="param IsSymbolAccessibleConditional(this) 743234" />
<Node Id="10286:[30356..30522).9" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 743235" />
<Node Id="10286:[30356..30522).10" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 743236" />
<Node Id="10286:[30360..30412).3" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 743237" />
<Node Id="10298:[471..492).59" Label="param Includes(this BinderFlags self) 743238" />
<Node Id="10298:[494..511).59" Label="param Includes(BinderFlags other) 743239" />
<Node Id="10060:[2173..2198).3" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 743240" />
<Node Id="10060:[2213..2244).3" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 743241" />
<Node Id="10060:[2320..2366).3" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 743242" />
<Node Id="10060:[5691..5716).4" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 743243" />
<Node Id="10060:[5731..5762).4" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 743244" />
<Node Id="10060:[5777..5806).4" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 743245" />
<Node Id="10060:[5882..5928).4" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 743246" />
<Node Id="10060:[5954..5991).13" Label="Debug.Assert((object)symbol != null); 743247" />
<Node Id="10060:[6005..6042).13" Label="Debug.Assert((object)within != null); 743248" />
<Node Id="10060:[6056..6090).7" Label="Debug.Assert(within.IsDefinition); 743249" />
<Node Id="10060:[6104..6172).10" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 743250" />
<Node Id="10060:[6188..6219).7" Label="failedThroughTypeCheck = false; 743251" />
<Node Id="10060:[10202..10215).4" Label="param IsNamedTypeAccessible(Symbol within) 743252" />
<Node Id="10060:[10265..10311).4" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 743253" />
<Node Id="10060:[10337..10405).10" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 743254" />
<Node Id="10060:[10419..10454).13" Label="Debug.Assert((object)type != null); 743255" />
<Node Id="10060:[10470..10516).4" Label="var compilation = within.DeclaringCompilation; 743256" />
<Node Id="10060:[10532..10544).4" Label="bool unused; 743257" />
<Node Id="10060:[10558..11295).4" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 743258" />
<Node Id="10060:[11990..12013).4" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 743259" />
<Node Id="10060:[12078..12091).4" Label="param IsNonNestedTypeAccessible(Symbol within) 743260" />
<Node Id="10060:[12117..12185).10" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 743261" />
<Node Id="10060:[12199..12238).13" Label="Debug.Assert((object)assembly != null); 743262" />
<Node Id="10060:[12199..12238).14" Label="Debug.Assert((object)assembly != null); 743263" />
<Node Id="10345:[30725..30790).8" Label="MarkImportDirective(alias.UsingDirective, callerIsSemanticModel); 743264" />
<Node Id="10345:[24226..24260).9" Label="Debug.Assert(compilation != null); 743265" />
<Node Id="10345:[30883..31655).16" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 743266" />
<Node Id="10312:[4685..4699).11" Label="result.IsClear 743267" />
<Node Id="10354:[3684..3818).29" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 743268" />
<Node Id="10354:[3720..3803).213" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743269" />
<Node Id="10312:[4680..4787).21" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 743270" />
<Node Id="10312:[4749..4764).4" Label="binder = scope; 743271" />
<Node Id="10312:[4826..5058).51" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 743272" />
<Node Id="10312:[4826..5058).52" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 743273" />
<Node Id="10312:[5087..5101).4" Label="return binder; 743274" />
<Node Id="10319:[43504..43546).16" Label="diagnostics.Add(node, useSiteDiagnostics); 743275" />
<Node Id="10319:[43799..44676).19" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 743276" />
<Node Id="10319:[43853..43873).4" Label="IsViableType(result) 743277" />
<Node Id="10319:[41088..41107).4" Label="param IsViableType(LookupResult result) 743278" />
<Node Id="10319:[41138..41158).4" Label="result.IsMultiViable 743279" />
<Node Id="10354:[4919..5009).53" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 743280" />
<Node Id="10354:[4094..4107).73" Label="return _kind; 743281" />
<Node Id="10319:[41133..41220).7" Label="if (!result.IsMultiViable)
            {
                return false;
            } 743282" />
<Node Id="10319:[41254..41268).4" Label="result.Symbols 743283" />
<Node Id="10354:[4525..4595).7" Label="get
            {
                return _symbolList;
            } 743284" />
<Node Id="10354:[4561..4580).7" Label="return _symbolList; 743285" />
<Node Id="10319:[41236..41680).13" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 743286" />
<Node Id="10319:[41302..41665).4" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 743287" />
<Node Id="10319:[41406..41476).5" Label="if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true; 743288" />
<Node Id="10319:[41464..41476).5" Label="return true; 743289" />
<Node Id="10319:[44751..44765).4" Label="bool wasError; 743290" />
<Node Id="10319:[84233..84242).4" Label="param ResultSymbol(int arity) 743291" />
<Node Id="10319:[84374..84391).4" Label="param ResultSymbol(out bool wasError) 743292" />
<Node Id="10319:[84406..84447).4" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 743293" />
<Node Id="10319:[84462..84508).4" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 743294" />
<Node Id="10319:[84124..109887).4" Label="param ResultSymbol(this) 743295" />
<Node Id="10319:[85320..85348).13" Label="Debug.Assert(where != null); 743296" />
<Node Id="10319:[85320..85348).14" Label="Debug.Assert(where != null); 743297" />
<Node Id="10319:[85366..85400).13" Label="Debug.Assert(diagnostics != null); 743298" />
<Node Id="10319:[85366..85400).14" Label="Debug.Assert(diagnostics != null); 743299" />
<Node Id="10319:[85467..85484).7" Label="wasError = false; 743300" />
<Node Id="10319:[104874..105336).10" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 743301" />
<Node Id="10319:[105368..106708).4" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 743302" />
<Node Id="10319:[84691..84861).7" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 743303" />
<Node Id="10319:[45408..45422).4" Label="result.Free(); 743304" />
<Node Id="10287:[2377..2471).11" Label="if (symbol is null)
                {
                    return default;
                } 743305" />
<Node Id="10287:[1215..1253).5" Label="Debug.Assert(!(symbol is TypeSymbol)); 743306" />
<Node Id="10287:[2033..2081).7" Label="Debug.Assert(_symbol?.Kind == SymbolKind.Alias); 743307" />
<Node Id="10319:[53246..53267).3" Label="param UnwrapAlias(out AliasSymbol alias) 743308" />
<Node Id="10319:[53387..53416).9" Label="Debug.Assert(syntax != null); 743309" />
<Node Id="10319:[53430..53464).9" Label="Debug.Assert(diagnostics != null); 743310" />
<Node Id="10286:[21546..21561).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 743311" />
<Node Id="10286:[21563..21583).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 743312" />
<Node Id="10286:[22044..22069).4" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 743313" />
<Node Id="10286:[22086..22108).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 743314" />
<Node Id="10286:[22110..22130).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 743315" />
<Node Id="10286:[15616..15690).16" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 743316" />
<Node Id="10286:[15616..15690).17" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 743317" />
<Node Id="10286:[15715..15910).4" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 743318" />
<Node Id="10286:[23056..23081).4" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 743319" />
<Node Id="10286:[23124..23146).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 743320" />
<Node Id="10286:[23161..23181).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 743321" />
<Node Id="10286:[23281..23301).4" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 743322" />
<Node Id="10286:[23380..23684).22" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 743323" />
<Node Id="10286:[23893..24026).7" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 743324" />
<Node Id="10286:[24545..24641).7" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 743325" />
<Node Id="10286:[24655..25349).4" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 743326" />
<Node Id="10286:[26910..26935).4" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 743327" />
<Node Id="10286:[26952..26974).4" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 743328" />
<Node Id="10286:[27002..27022).4" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 743329" />
<Node Id="10286:[27048..27088).13" Label="RoslynDebug.Assert(diagnostics != null); 743330" />
<Node Id="10286:[27048..27088).14" Label="RoslynDebug.Assert(diagnostics != null); 743331" />
<Node Id="10286:[27208..27236).7" Label="DiagnosticInfo? info = null; 743332" />
<Node Id="10286:[27250..27722).4" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 743333" />
<Node Id="10286:[27738..27845).10" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 743334" />
<Node Id="10286:[27738..27845).11" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 743335" />
<Node Id="10286:[27861..27873).4" Label="return kind; 743336" />
<Node Id="10286:[26281..26812).4" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 743337" />
<Node Id="10286:[26450..26769).4" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 743338" />
<Node Id="10287:[2377..2471).13" Label="if (symbol is null)
                {
                    return default;
                } 743339" />
<Node Id="10287:[791..833).9" Label="Debug.Assert(typeWithAnnotations.HasType); 743340" />
<Node Id="10076:[5223..5250).18" Label="Debug.Assert(node != null); 743341" />
<Node Id="10077:[44231..44317).65" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 743342" />
<Node Id="10077:[15286..15356).2" Label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 743343" />
<Node Id="10307:[3547..3745).38" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 743344" />
<Node Id="10307:[3555..3600).5" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 743345" />
<Node Id="10298:[494..511).61" Label="param Includes(BinderFlags other) 743346" />
<Node Id="10286:[1688..1781).25" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 743347" />
<Node Id="10298:[471..492).62" Label="param Includes(this BinderFlags self) 743348" />
<Node Id="10286:[1820..1963).25" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 743349" />
<Node Id="10298:[471..492).63" Label="param Includes(this BinderFlags self) 743350" />
<Node Id="10319:[42478..42805).13" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 743351" />
<Node Id="10319:[42821..42938).33" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 743352" />
<Node Id="10319:[42839..42937).5" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 743353" />
<Node Id="10319:[63849..63870).5" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 743354" />
<Node Id="10319:[63885..63919).5" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 743355" />
<Node Id="10319:[63934..63945).5" Label="param CreateErrorIfLookupOnTypeParameter(string name) 743356" />
<Node Id="10319:[63960..63969).5" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 743357" />
<Node Id="10319:[63984..64009).5" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 743358" />
<Node Id="10319:[63768..64484).5" Label="param CreateErrorIfLookupOnTypeParameter(this) 743359" />
<Node Id="10319:[64035..64445).17" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 743360" />
<Node Id="10319:[64035..64445).18" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 743361" />
<Node Id="10319:[64461..64473).9" Label="return null; 743362" />
<Node Id="10319:[42821..42938).39" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 743363" />
<Node Id="10319:[42952..43079).13" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 743364" />
<Node Id="10319:[42952..43079).14" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 743365" />
<Node Id="10354:[11312..11328).8" Label="instance.IsClear 743366" />
<Node Id="10354:[3684..3818).30" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 743367" />
<Node Id="10354:[3720..3803).217" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743368" />
<Node Id="10354:[3720..3803).218" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743369" />
<Node Id="10354:[3720..3803).219" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743370" />
<Node Id="10354:[11299..11330).22" Label="Debug.Assert(instance.IsClear); 743371" />
<Node Id="10319:[50330..50355).5" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 743372" />
<Node Id="10312:[3905..3919).5" Label="result.IsClear 743373" />
<Node Id="10354:[3684..3818).31" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 743374" />
<Node Id="10354:[3720..3803).225" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743375" />
<Node Id="10354:[3720..3803).226" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743376" />
<Node Id="10354:[3720..3803).227" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743377" />
<Node Id="10312:[3892..3921).13" Label="Debug.Assert(result.IsClear); 743378" />
<Node Id="10312:[3935..3968).17" Label="Debug.Assert(options.AreValid()); 743379" />
<Node Id="10312:[3948..3966).5" Label="options.AreValid() 743380" />
<Node Id="10353:[4698..4724).12" Label="param AreValid(this LookupOptions options) 743381" />
<Node Id="10353:[4750..4847).23" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 743382" />
<Node Id="10353:[4863..5000).45" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 743383" />
<Node Id="10353:[4863..5000).46" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 743384" />
<Node Id="10353:[5079..5183).23" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 743385" />
<Node Id="10353:[5197..5323).34" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 743386" />
<Node Id="10353:[5485..5759).67" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743387" />
<Node Id="10353:[5485..5759).68" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743388" />
<Node Id="10353:[5485..5759).69" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743389" />
<Node Id="10353:[5775..5979).45" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 743390" />
<Node Id="10353:[5775..5979).47" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 743391" />
<Node Id="10353:[5995..6029).34" Label="return OnlyOneBitSet(onlyOptions); 743392" />
<Node Id="10353:[6002..6028).12" Label="OnlyOneBitSet(onlyOptions) 743393" />
<Node Id="10353:[6343..6358).12" Label="param OnlyOneBitSet(LookupOptions o) 743394" />
<Node Id="10353:[6384..6410).67" Label="return (o & (o - 1)) == 0; 743395" />
<Node Id="10353:[6384..6410).68" Label="return (o & (o - 1)) == 0; 743396" />
<Node Id="10312:[5188..5207).5" Label="param LookupSymbolsInSingleBinder(LookupResult result) 743397" />
<Node Id="10312:[5209..5220).5" Label="param LookupSymbolsInSingleBinder(string name) 743398" />
<Node Id="10312:[5222..5231).5" Label="param LookupSymbolsInSingleBinder(int arity) 743399" />
<Node Id="10312:[5233..5272).5" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 743400" />
<Node Id="10312:[5274..5295).5" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 743401" />
<Node Id="10312:[5297..5318).5" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 743402" />
<Node Id="10312:[5320..5333).5" Label="param LookupSymbolsInSingleBinder(bool diagnose) 743403" />
<Node Id="10312:[5124..5404).5" Label="param LookupSymbolsInSingleBinder(this) 743404" />
<Node Id="10312:[4685..4699).12" Label="result.IsClear 743405" />
<Node Id="10354:[3684..3818).32" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 743406" />
<Node Id="10354:[3720..3803).233" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743407" />
<Node Id="10354:[3720..3803).234" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743408" />
<Node Id="10354:[3720..3803).235" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743409" />
<Node Id="10312:[4680..4787).23" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 743410" />
<Node Id="10312:[4826..5058).56" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 743411" />
<Node Id="10312:[4826..5058).57" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 743412" />
<Node Id="10346:[10861..10875).8" Label="result.IsClear 743413" />
<Node Id="10354:[3684..3818).33" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 743414" />
<Node Id="10354:[3720..3803).241" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743415" />
<Node Id="10354:[3720..3803).242" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743416" />
<Node Id="10354:[3720..3803).243" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743417" />
<Node Id="10346:[10848..10877).22" Label="Debug.Assert(result.IsClear); 743418" />
<Node Id="10346:[10897..10914).8" Label="IsSubmissionClass 743419" />
<Node Id="10346:[7666..7775).8" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 743420" />
<Node Id="10346:[7672..7773).22" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 743421" />
<Node Id="10346:[10893..11127).15" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 743422" />
<Node Id="10346:[3525..3638).59" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 743423" />
<Node Id="10312:[7903..7936).29" Label="Debug.Assert(options.AreValid()); 743424" />
<Node Id="10312:[7916..7934).8" Label="options.AreValid() 743425" />
<Node Id="10353:[4698..4724).13" Label="param AreValid(this LookupOptions options) 743426" />
<Node Id="10353:[4750..4847).25" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 743427" />
<Node Id="10353:[4863..5000).49" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 743428" />
<Node Id="10353:[4863..5000).50" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 743429" />
<Node Id="10353:[5079..5183).25" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 743430" />
<Node Id="10353:[5197..5323).37" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 743431" />
<Node Id="10353:[5485..5759).73" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743432" />
<Node Id="10353:[5485..5759).74" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743433" />
<Node Id="10353:[5485..5759).75" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743434" />
<Node Id="10353:[5775..5979).49" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 743435" />
<Node Id="10353:[5775..5979).51" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 743436" />
<Node Id="10353:[5995..6029).37" Label="return OnlyOneBitSet(onlyOptions); 743437" />
<Node Id="10353:[6002..6028).13" Label="OnlyOneBitSet(onlyOptions) 743438" />
<Node Id="10353:[6343..6358).13" Label="param OnlyOneBitSet(LookupOptions o) 743439" />
<Node Id="10353:[6384..6410).73" Label="return (o & (o - 1)) == 0; 743440" />
<Node Id="10353:[6384..6410).74" Label="return (o & (o - 1)) == 0; 743441" />
<Node Id="10312:[7952..7977).29" Label="Debug.Assert(arity $= 0); 743442" />
<Node Id="10312:[8669..8690).4" Label="param LookupMembersInType(Binder originalBinder) 743443" />
<Node Id="10312:[34911..34932).4" Label="param LookupMembersInClass(Binder originalBinder) 743444" />
<Node Id="10312:[35517..35538).4" Label="param LookupMembersInClass(Binder originalBinder) 743445" />
<Node Id="10312:[35696..35731).13" Label="Debug.Assert((object)type != null); 743446" />
<Node Id="10312:[36067..36079).7" Label="tmp.Clear(); 743447" />
<Node Id="10312:[33656..33675).7" Label="param LookupMembersWithoutInheritance(LookupResult result) 743448" />
<Node Id="10312:[33707..33716).7" Label="param LookupMembersWithoutInheritance(int arity) 743449" />
<Node Id="10312:[33754..33775).7" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 743450" />
<Node Id="10312:[33777..33805).7" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 743451" />
<Node Id="10312:[33807..33820).7" Label="param LookupMembersWithoutInheritance(bool diagnose) 743452" />
<Node Id="10312:[33870..33909).7" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 743453" />
<Node Id="10312:[61608..61629).11" Label="param GetCandidateMembers(Binder originalBinder) 743454" />
<Node Id="10312:[34022..34574).19" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 743455" />
<Node Id="10354:[9012..9030).7" Label="param MergePrioritized(LookupResult other) 743456" />
<Node Id="10354:[8981..9152).7" Label="param MergePrioritized(this) 743457" />
<Node Id="10354:[9060..9070).7" Label="other.Kind 743458" />
<Node Id="10354:[4058..4122).78" Label="get
            {
                return _kind;
            } 743459" />
<Node Id="10354:[9056..9141).25" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 743460" />
<Node Id="10354:[9073..9077).7" Label="Kind 743461" />
<Node Id="10354:[4058..4122).79" Label="get
            {
                return _kind;
            } 743462" />
<Node Id="10354:[9056..9141).26" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 743463" />
<Node Id="10354:[9056..9141).27" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 743464" />
<Node Id="10312:[36566..36625).7" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 743465" />
<Node Id="10312:[36643..36855).19" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 743466" />
<Node Id="10312:[36643..36855).20" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 743467" />
<Node Id="10312:[37029..37117).19" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 743468" />
<Node Id="10312:[37254..37416).19" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 743469" />
<Node Id="10312:[37436..37988).25" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 743470" />
<Node Id="10312:[38290..38338).7" Label="originalBinder.InCrefButNotParameterOrReturnType 743471" />
<Node Id="10306:[3345..3430).7" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 743472" />
<Node Id="10306:[3358..3364).7" Label="InCref 743473" />
<Node Id="10306:[3196..3249).23" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 743474" />
<Node Id="10306:[3351..3428).19" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 743475" />
<Node Id="10312:[38286..38405).13" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 743476" />
<Node Id="10312:[36067..36079).8" Label="tmp.Clear(); 743477" />
<Node Id="10312:[33656..33675).8" Label="param LookupMembersWithoutInheritance(LookupResult result) 743478" />
<Node Id="10312:[33707..33716).8" Label="param LookupMembersWithoutInheritance(int arity) 743479" />
<Node Id="10312:[33754..33775).8" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 743480" />
<Node Id="10312:[33777..33805).8" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 743481" />
<Node Id="10312:[33807..33820).8" Label="param LookupMembersWithoutInheritance(bool diagnose) 743482" />
<Node Id="10312:[33870..33909).8" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 743483" />
<Node Id="10312:[61608..61629).12" Label="param GetCandidateMembers(Binder originalBinder) 743484" />
<Node Id="10312:[34022..34574).22" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 743485" />
<Node Id="10354:[9012..9030).8" Label="param MergePrioritized(LookupResult other) 743486" />
<Node Id="10354:[8981..9152).8" Label="param MergePrioritized(this) 743487" />
<Node Id="10354:[9060..9070).8" Label="other.Kind 743488" />
<Node Id="10354:[4058..4122).83" Label="get
            {
                return _kind;
            } 743489" />
<Node Id="10354:[9056..9141).29" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 743490" />
<Node Id="10354:[9073..9077).8" Label="Kind 743491" />
<Node Id="10354:[4058..4122).84" Label="get
            {
                return _kind;
            } 743492" />
<Node Id="10354:[9056..9141).30" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 743493" />
<Node Id="10354:[9056..9141).31" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 743494" />
<Node Id="10312:[36566..36625).8" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 743495" />
<Node Id="10312:[36643..36855).22" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 743496" />
<Node Id="10312:[36643..36855).23" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 743497" />
<Node Id="10312:[37029..37117).22" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 743498" />
<Node Id="10312:[37254..37416).22" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 743499" />
<Node Id="10312:[37436..37988).29" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 743500" />
<Node Id="10312:[38290..38338).8" Label="originalBinder.InCrefButNotParameterOrReturnType 743501" />
<Node Id="10306:[3345..3430).8" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 743502" />
<Node Id="10306:[3358..3364).8" Label="InCref 743503" />
<Node Id="10306:[3196..3249).24" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 743504" />
<Node Id="10306:[3351..3428).22" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 743505" />
<Node Id="10312:[38286..38405).15" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 743506" />
<Node Id="10312:[38756..38772).4" Label="visited?.Free(); 743507" />
<Node Id="10354:[11428..11441).8" Label="this.Clear(); 743508" />
<Node Id="10312:[38786..38797).4" Label="tmp.Free(); 743509" />
<Node Id="10345:[30883..31655).19" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 743510" />
<Node Id="10345:[31734..31789).4" Label="param LookupSymbolInUsings(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 743511" />
<Node Id="10345:[31804..31825).4" Label="param LookupSymbolInUsings(Binder originalBinder) 743512" />
<Node Id="10345:[31840..31859).4" Label="param LookupSymbolInUsings(LookupResult result) 743513" />
<Node Id="10345:[31874..31885).4" Label="param LookupSymbolInUsings(string name) 743514" />
<Node Id="10345:[31900..31909).4" Label="param LookupSymbolInUsings(int arity) 743515" />
<Node Id="10345:[31924..31963).4" Label="param LookupSymbolInUsings(ConsList$TypeSymbol$ basesBeingResolved) 743516" />
<Node Id="10345:[31978..31999).4" Label="param LookupSymbolInUsings(LookupOptions options) 743517" />
<Node Id="10345:[32014..32027).4" Label="param LookupSymbolInUsings(bool diagnose) 743518" />
<Node Id="10345:[32114..32230).13" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 743519" />
<Node Id="10345:[32114..32230).14" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 743520" />
<Node Id="10345:[32118..32174).4" Label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 743521" />
<Node Id="10298:[471..492).67" Label="param Includes(this BinderFlags self) 743522" />
<Node Id="10298:[494..511).67" Label="param Includes(BinderFlags other) 743523" />
<Node Id="10345:[32246..32312).7" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 743524" />
<Node Id="10345:[32328..33465).10" Label="foreach (var typeOrNamespace in usings)
            {
                ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);
                foreach (Symbol symbol in candidates)
                {
                    if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    }

                    // Found a match in our list of normal using directives.  Mark the directive
                    // as being seen so that it won't be reported to the user as something that
                    // can be removed.
                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 743525" />
<Node Id="10354:[3720..3803).257" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743526" />
<Node Id="10354:[3720..3803).259" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743527" />
<Node Id="10312:[4680..4787).25" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 743528" />
<Node Id="10346:[10861..10875).9" Label="result.IsClear 743529" />
<Node Id="10354:[3684..3818).36" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 743530" />
<Node Id="10354:[3720..3803).265" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743531" />
<Node Id="10354:[3720..3803).266" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743532" />
<Node Id="10354:[3720..3803).267" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743533" />
<Node Id="10346:[10848..10877).25" Label="Debug.Assert(result.IsClear); 743534" />
<Node Id="10346:[10897..10914).9" Label="IsSubmissionClass 743535" />
<Node Id="10346:[7666..7775).9" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 743536" />
<Node Id="10346:[7672..7773).25" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 743537" />
<Node Id="10346:[10893..11127).17" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 743538" />
<Node Id="10346:[3525..3638).66" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 743539" />
<Node Id="10312:[7903..7936).33" Label="Debug.Assert(options.AreValid()); 743540" />
<Node Id="10312:[7916..7934).9" Label="options.AreValid() 743541" />
<Node Id="10353:[4698..4724).14" Label="param AreValid(this LookupOptions options) 743542" />
<Node Id="10353:[4750..4847).27" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 743543" />
<Node Id="10353:[4863..5000).53" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 743544" />
<Node Id="10353:[4863..5000).54" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 743545" />
<Node Id="10353:[5079..5183).27" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 743546" />
<Node Id="10353:[5197..5323).40" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 743547" />
<Node Id="10353:[5485..5759).79" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743548" />
<Node Id="10353:[5485..5759).80" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743549" />
<Node Id="10353:[5485..5759).81" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 743550" />
<Node Id="10353:[5775..5979).53" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 743551" />
<Node Id="10353:[5775..5979).55" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 743552" />
<Node Id="10353:[5995..6029).40" Label="return OnlyOneBitSet(onlyOptions); 743553" />
<Node Id="10353:[6002..6028).14" Label="OnlyOneBitSet(onlyOptions) 743554" />
<Node Id="10353:[6343..6358).14" Label="param OnlyOneBitSet(LookupOptions o) 743555" />
<Node Id="10353:[6384..6410).79" Label="return (o & (o - 1)) == 0; 743556" />
<Node Id="10353:[6384..6410).80" Label="return (o & (o - 1)) == 0; 743557" />
<Node Id="10312:[7952..7977).33" Label="Debug.Assert(arity $= 0); 743558" />
<Node Id="10312:[19030..19039).5" Label="param LookupMembersInNamespace(int arity) 743559" />
<Node Id="10312:[19087..19100).5" Label="param LookupMembersInNamespace(bool diagnose) 743560" />
<Node Id="10312:[61608..61629).13" Label="param GetCandidateMembers(Binder originalBinder) 743561" />
<Node Id="10312:[63473..63501).5" Label="param CheckViability(TypeSymbol accessThroughType) 743562" />
<Node Id="10312:[63503..63516).5" Label="param CheckViability(bool diagnose) 743563" />
<Node Id="10312:[63638..63668).5" Label="bool inaccessibleViaQualifier; 743564" />
<Node Id="10312:[63682..63706).5" Label="DiagnosticInfo diagInfo; 743565" />
<Node Id="10312:[80978..80991).5" Label="param WrongArity(Symbol symbol) 743566" />
<Node Id="10312:[80993..81002).5" Label="param WrongArity(int arity) 743567" />
<Node Id="10312:[81004..81017).5" Label="param WrongArity(bool diagnose) 743568" />
<Node Id="10312:[81019..81040).5" Label="param WrongArity(LookupOptions options) 743569" />
<Node Id="10312:[81042..81069).5" Label="param WrongArity(out DiagnosticInfo diagInfo) 743570" />
<Node Id="10312:[81095..84034).5" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 743571" />
<Node Id="10312:[83750..83991).10" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 743572" />
<Node Id="10312:[83750..83991).11" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 743573" />
<Node Id="10312:[84050..84066).9" Label="diagInfo = null; 743574" />
<Node Id="10312:[66177..69285).52" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 743575" />
<Node Id="10312:[66291..66342).5" Label="RefineAccessThroughType(options, accessThroughType) 743576" />
<Node Id="10312:[75301..75322).5" Label="param RefineAccessThroughType(LookupOptions options) 743577" />
<Node Id="10312:[75324..75352).5" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 743578" />
<Node Id="10312:[75735..75866).21" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 743579" />
<Node Id="10312:[75735..75866).22" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 743580" />
<Node Id="10312:[75742..75804).5" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 743581" />
<Node Id="10312:[75735..75866).24" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 743582" />
<Node Id="10312:[66177..69285).55" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 743583" />
<Node Id="10312:[77543..77571).5" Label="param IsAccessible(TypeSymbol accessThroughType) 743584" />
<Node Id="10312:[77573..77604).5" Label="param IsAccessible(out bool failedThroughTypeCheck) 743585" />
<Node Id="10312:[77654..77700).5" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 743586" />
<Node Id="10312:[77726..77892).17" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 743587" />
<Node Id="10312:[77726..77892).18" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 743588" />
<Node Id="10312:[77730..77782).5" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 743589" />
<Node Id="10298:[471..492).73" Label="param Includes(this BinderFlags self) 743590" />
<Node Id="10298:[494..511).73" Label="param Includes(BinderFlags other) 743591" />
<Node Id="10312:[78402..78430).5" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 743592" />
<Node Id="10312:[78432..78463).5" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 743593" />
<Node Id="10312:[78513..78552).5" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 743594" />
<Node Id="10346:[8034..8062).5" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 743595" />
<Node Id="10346:[8064..8095).5" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 743596" />
<Node Id="10346:[8145..8184).5" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 743597" />
<Node Id="10286:[30135..30160).4" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 743598" />
<Node Id="10286:[30175..30206).4" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 743599" />
<Node Id="10286:[30283..30330).4" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 743600" />
<Node Id="10286:[30012..30691).4" Label="param IsSymbolAccessibleConditional(this) 743601" />
<Node Id="10286:[30356..30522).13" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 743602" />
<Node Id="10286:[30356..30522).14" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 743603" />
<Node Id="10286:[30360..30412).4" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 743604" />
<Node Id="10298:[471..492).74" Label="param Includes(this BinderFlags self) 743605" />
<Node Id="10298:[494..511).74" Label="param Includes(BinderFlags other) 743606" />
<Node Id="10060:[2173..2198).4" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 743607" />
<Node Id="10060:[2213..2244).4" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 743608" />
<Node Id="10060:[2320..2366).4" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 743609" />
<Node Id="10060:[5691..5716).5" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 743610" />
<Node Id="10060:[5731..5762).5" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 743611" />
<Node Id="10060:[5777..5806).5" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 743612" />
<Node Id="10060:[5882..5928).5" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 743613" />
<Node Id="10060:[5954..5991).17" Label="Debug.Assert((object)symbol != null); 743614" />
<Node Id="10060:[6005..6042).17" Label="Debug.Assert((object)within != null); 743615" />
<Node Id="10060:[6056..6090).9" Label="Debug.Assert(within.IsDefinition); 743616" />
<Node Id="10060:[6104..6172).13" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 743617" />
<Node Id="10060:[6188..6219).9" Label="failedThroughTypeCheck = false; 743618" />
<Node Id="10060:[10265..10311).5" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 743619" />
<Node Id="10060:[10337..10405).13" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 743620" />
<Node Id="10060:[10419..10454).17" Label="Debug.Assert((object)type != null); 743621" />
<Node Id="10060:[10470..10516).5" Label="var compilation = within.DeclaringCompilation; 743622" />
<Node Id="10060:[10532..10544).5" Label="bool unused; 743623" />
<Node Id="10060:[10558..11295).5" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 743624" />
<Node Id="10060:[11990..12013).5" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 743625" />
<Node Id="10060:[12078..12091).5" Label="param IsNonNestedTypeAccessible(Symbol within) 743626" />
<Node Id="10060:[12117..12185).13" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 743627" />
<Node Id="10060:[12199..12238).17" Label="Debug.Assert((object)assembly != null); 743628" />
<Node Id="10060:[12199..12238).18" Label="Debug.Assert((object)assembly != null); 743629" />
<Node Id="10345:[30725..30790).11" Label="MarkImportDirective(alias.UsingDirective, callerIsSemanticModel); 743630" />
<Node Id="10345:[24226..24260).13" Label="Debug.Assert(compilation != null); 743631" />
<Node Id="10345:[30883..31655).22" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 743632" />
<Node Id="10312:[4685..4699).14" Label="result.IsClear 743633" />
<Node Id="10354:[3684..3818).37" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 743634" />
<Node Id="10354:[3720..3803).273" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743635" />
<Node Id="10312:[4680..4787).27" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 743636" />
<Node Id="10312:[4749..4764).5" Label="binder = scope; 743637" />
<Node Id="10312:[4826..5058).66" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 743638" />
<Node Id="10312:[4826..5058).67" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 743639" />
<Node Id="10312:[5087..5101).5" Label="return binder; 743640" />
<Node Id="10319:[43799..44676).25" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 743641" />
<Node Id="10319:[43853..43873).5" Label="IsViableType(result) 743642" />
<Node Id="10319:[41088..41107).5" Label="param IsViableType(LookupResult result) 743643" />
<Node Id="10319:[41138..41158).5" Label="result.IsMultiViable 743644" />
<Node Id="10354:[4919..5009).69" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 743645" />
<Node Id="10354:[4094..4107).95" Label="return _kind; 743646" />
<Node Id="10319:[41133..41220).9" Label="if (!result.IsMultiViable)
            {
                return false;
            } 743647" />
<Node Id="10319:[41254..41268).5" Label="result.Symbols 743648" />
<Node Id="10354:[4525..4595).9" Label="get
            {
                return _symbolList;
            } 743649" />
<Node Id="10354:[4561..4580).9" Label="return _symbolList; 743650" />
<Node Id="10319:[41236..41680).17" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 743651" />
<Node Id="10319:[41302..41665).5" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 743652" />
<Node Id="10319:[41406..41476).7" Label="if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true; 743653" />
<Node Id="10319:[41464..41476).7" Label="return true; 743654" />
<Node Id="10319:[44751..44765).5" Label="bool wasError; 743655" />
<Node Id="10319:[84374..84391).5" Label="param ResultSymbol(out bool wasError) 743656" />
<Node Id="10319:[84406..84447).5" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 743657" />
<Node Id="10319:[84462..84508).5" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 743658" />
<Node Id="10319:[84124..109887).5" Label="param ResultSymbol(this) 743659" />
<Node Id="10319:[85320..85348).17" Label="Debug.Assert(where != null); 743660" />
<Node Id="10319:[85366..85400).17" Label="Debug.Assert(diagnostics != null); 743661" />
<Node Id="10319:[85467..85484).9" Label="wasError = false; 743662" />
<Node Id="10319:[104874..105336).13" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 743663" />
<Node Id="10319:[84691..84861).9" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 743664" />
<Node Id="10319:[45408..45422).5" Label="result.Free(); 743665" />
<Node Id="10287:[2377..2471).15" Label="if (symbol is null)
                {
                    return default;
                } 743666" />
<Node Id="10287:[1215..1253).7" Label="Debug.Assert(!(symbol is TypeSymbol)); 743667" />
<Node Id="10287:[2033..2081).10" Label="Debug.Assert(_symbol?.Kind == SymbolKind.Alias); 743668" />
<Node Id="10319:[53246..53267).4" Label="param UnwrapAlias(out AliasSymbol alias) 743669" />
<Node Id="10319:[53387..53416).13" Label="Debug.Assert(syntax != null); 743670" />
<Node Id="10319:[53430..53464).13" Label="Debug.Assert(diagnostics != null); 743671" />
<Node Id="10286:[21546..21561).5" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 743672" />
<Node Id="10286:[21563..21583).5" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 743673" />
<Node Id="10286:[22086..22108).5" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 743674" />
<Node Id="10286:[22110..22130).5" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 743675" />
<Node Id="10286:[15616..15690).21" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 743676" />
<Node Id="10286:[15616..15690).22" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 743677" />
<Node Id="10286:[15715..15910).5" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 743678" />
<Node Id="10286:[23124..23146).5" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 743679" />
<Node Id="10286:[23161..23181).5" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 743680" />
<Node Id="10286:[23281..23301).5" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 743681" />
<Node Id="10286:[23380..23684).29" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 743682" />
<Node Id="10286:[23893..24026).9" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 743683" />
<Node Id="10286:[24545..24641).9" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 743684" />
<Node Id="10286:[24655..25349).5" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 743685" />
<Node Id="10286:[26910..26935).5" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 743686" />
<Node Id="10286:[26952..26974).5" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 743687" />
<Node Id="10286:[27002..27022).5" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 743688" />
<Node Id="10286:[27048..27088).17" Label="RoslynDebug.Assert(diagnostics != null); 743689" />
<Node Id="10286:[27048..27088).18" Label="RoslynDebug.Assert(diagnostics != null); 743690" />
<Node Id="10286:[27208..27236).9" Label="DiagnosticInfo? info = null; 743691" />
<Node Id="10286:[27250..27722).5" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 743692" />
<Node Id="10286:[27738..27845).13" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 743693" />
<Node Id="10286:[27738..27845).14" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 743694" />
<Node Id="10286:[27861..27873).5" Label="return kind; 743695" />
<Node Id="10286:[26281..26812).5" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 743696" />
<Node Id="10286:[26450..26769).5" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 743697" />
<Node Id="10287:[2377..2471).17" Label="if (symbol is null)
                {
                    return default;
                } 743698" />
<Node Id="10287:[791..833).11" Label="Debug.Assert(typeWithAnnotations.HasType); 743699" />
<Node Id="10327:[945..949).1" Label="null 743700" />
<Node Id="10327:[951..955).1" Label="null 743701" />
<Node Id="10327:[916..956).1" Label="new ConstantFieldsInProgress(null, null) 743702" />
<Node Id="10327:[1017..1043).1" Label="param ConstantFieldsInProgress(SourceFieldSymbol fieldOpt) 743703" />
<Node Id="10327:[1058..1116).1" Label="param ConstantFieldsInProgress(HashSet$SourceFieldSymbolWithSyntaxReference$ dependencies) 743704" />
<Node Id="10327:[969..1217).1" Label="param ConstantFieldsInProgress(this) 743705" />
<Node Id="10327:[749..758).1" Label="_fieldOpt 743706" />
<Node Id="10327:[832..845).1" Label="_dependencies 743707" />
<Node Id="10327:[1142..1151).1" Label="_fieldOpt 743708" />
<Node Id="10327:[1177..1190).1" Label="_dependencies 743709" />
<Node Id="10327:[908..956).1" Label="Empty = new ConstantFieldsInProgress(null, null) 743710" />
<Node Id="10327:[1273..1314).1" Label="get { return (object)_fieldOpt == null; } 743711" />
<Node Id="10327:[1279..1312).1" Label="return (object)_fieldOpt == null; 743712" />
<Node Id="10327:[1279..1312).2" Label="return (object)_fieldOpt == null; 743713" />
<Node Id="25002:[4446..4475).1" Label="diagnostics.Verify(expected); 743714" />
<Node Id="25002:[4446..4475).2" Label="diagnostics.Verify(expected); 743715" />
<Node Id="25002:[4446..4474).1" Label="diagnostics.Verify(expected) 743716" />
<Node Id="25002:[2296..2334).1" Label="param Verify(this ImmutableArray$Diagnostic$ actual) 743717" />
<Node Id="25002:[2336..2375).1" Label="param Verify(params DiagnosticDescription[] expected) 743718" />
<Node Id="25002:[2401..2451).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 743719" />
<Node Id="25002:[2401..2451).2" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 743720" />
<Node Id="25002:[2401..2450).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected) 743721" />
<Node Id="25002:[1554..1589).1" Label="param Verify(this IEnumerable$Diagnostic$ actual) 743722" />
<Node Id="25002:[1591..1630).1" Label="param Verify(params DiagnosticDescription[] expected) 743723" />
<Node Id="25002:[1656..1703).1" Label="Verify(actual, expected, errorCodeOnly: false); 743724" />
<Node Id="25002:[1656..1703).2" Label="Verify(actual, expected, errorCodeOnly: false); 743725" />
<Node Id="25002:[1656..1703).3" Label="Verify(actual, expected, errorCodeOnly: false); 743726" />
<Node Id="25002:[1656..1702).1" Label="Verify(actual, expected, errorCodeOnly: false) 743727" />
<Node Id="25002:[2501..2531).1" Label="param Verify(IEnumerable$Diagnostic$ actual) 743728" />
<Node Id="25002:[2533..2565).1" Label="param Verify(DiagnosticDescription[] expected) 743729" />
<Node Id="25002:[2567..2585).1" Label="param Verify(bool errorCodeOnly) 743730" />
<Node Id="25002:[2611..2759).1" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 743731" />
<Node Id="25002:[2611..2759).2" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 743732" />
<Node Id="25002:[2775..2867).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 743733" />
<Node Id="25002:[2775..2867).2" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 743734" />
<Node Id="25002:[2775..2867).4" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 743735" />
<Node Id="25002:[2775..2867).6" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 743736" />
<Node Id="25003:[10448..10470).1" Label="=$ _defaultSeverityOpt 743737" />
<Node Id="25003:[10451..10470).1" Label="_defaultSeverityOpt 743738" />
<Node Id="25002:[2881..2977).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 743739" />
<Node Id="25002:[2881..2977).2" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 743740" />
<Node Id="25002:[2881..2977).4" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 743741" />
<Node Id="25002:[2881..2977).6" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 743742" />
<Node Id="25003:[10526..10550).1" Label="=$ _effectiveSeverityOpt 743743" />
<Node Id="25003:[10529..10550).1" Label="_effectiveSeverityOpt 743744" />
<Node Id="25002:[2991..3166).1" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 743745" />
<Node Id="25002:[2991..3166).2" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 743746" />
<Node Id="25002:[2991..3166).4" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 743747" />
<Node Id="25002:[2991..3166).8" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 743748" />
<Node Id="25003:[4933..4945).1" Label="param DiagnosticDescription(Diagnostic d) 743749" />
<Node Id="25003:[4947..4965).1" Label="param DiagnosticDescription(bool errorCodeOnly) 743750" />
<Node Id="25003:[4967..5002).1" Label="param DiagnosticDescription(bool includeDefaultSeverity = false) 743751" />
<Node Id="25003:[5004..5041).1" Label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 743752" />
<Node Id="25003:[4904..7352).1" Label="param DiagnosticDescription(this) 743753" />
<Node Id="25003:[912..917).7" Label="_code 743754" />
<Node Id="25003:[950..967).7" Label="_isWarningAsError 743755" />
<Node Id="25003:[1000..1013).7" Label="_isSuppressed 743756" />
<Node Id="25003:[1048..1062).7" Label="_squiggledText 743757" />
<Node Id="25003:[1099..1109).7" Label="_arguments 743758" />
<Node Id="25003:[1151..1165).19" Label="_startPosition 743759" />
<Node Id="25003:[1276..1303).7" Label="_argumentOrderDoesNotMatter 743760" />
<Node Id="25003:[1336..1350).7" Label="_errorCodeType 743761" />
<Node Id="25003:[1460..1479).7" Label="_defaultSeverityOpt 743762" />
<Node Id="25003:[1527..1548).7" Label="_effectiveSeverityOpt 743763" />
<Node Id="25003:[1673..1689).7" Label="_syntaxPredicate 743764" />
<Node Id="25003:[5067..5072).1" Label="_code 743765" />
<Node Id="25003:[5096..5113).1" Label="_isWarningAsError 743766" />
<Node Id="25003:[5149..5162).1" Label="_isSuppressed 743767" />
<Node Id="25003:[5194..5203).1" Label="_location 743768" />
<Node Id="25003:[5253..5275).1" Label="includeDefaultSeverity 743769" />
<Node Id="25003:[5231..5324).1" Label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 743770" />
<Node Id="25003:[5231..5250).1" Label="_defaultSeverityOpt 743771" />
<Node Id="25003:[5362..5386).1" Label="includeEffectiveSeverity 743772" />
<Node Id="25003:[5338..5428).1" Label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 743773" />
<Node Id="25003:[5338..5359).1" Label="_effectiveSeverityOpt 743774" />
<Node Id="25003:[5444..5476).1" Label="DiagnosticWithInfo dinfo = null; 743775" />
<Node Id="25003:[5490..6130).1" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 743776" />
<Node Id="25003:[5490..6130).2" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 743777" />
<Node Id="25003:[5490..6130).3" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 743778" />
<Node Id="25003:[5490..6130).4" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 743779" />
<Node Id="25003:[5744..5776).1" Label="dinfo = d as DiagnosticWithInfo; 743780" />
<Node Id="25003:[5794..6115).1" Label="if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                } 743781" />
<Node Id="25003:[5794..6115).2" Label="if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                } 743782" />
<Node Id="25003:[6001..6015).1" Label="_errorCodeType 743783" />
<Node Id="25003:[6081..6086).1" Label="_code 743784" />
<Node Id="25003:[6146..6175).1" Label="_ignoreArgumentsWhenComparing 743785" />
<Node Id="25003:[6208..7260).1" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_location.IsInSource)
                {
                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API
                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);
                }

                if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                }

                if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                }
            } 743786" />
<Node Id="25003:[6276..6580).1" Label="if (_location.IsInSource)
                {
                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API
                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);
                } 743787" />
<Node Id="25003:[6482..6561).1" Label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 743788" />
<Node Id="25003:[6482..6496).1" Label="_squiggledText 743789" />
<Node Id="25003:[6600..7098).1" Label="if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                } 743790" />
<Node Id="25003:[6600..7098).2" Label="if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                } 743791" />
<Node Id="25003:[6659..6669).1" Label="_arguments 743792" />
<Node Id="25003:[7118..7245).1" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 743793" />
<Node Id="25003:[7118..7245).2" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 743794" />
<Node Id="25003:[7118..7245).4" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 743795" />
<Node Id="25003:[7276..7341).1" Label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 743796" />
<Node Id="25003:[7276..7290).1" Label="_startPosition 743797" />
<Node Id="25002:[2991..3166).9" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 743798" />
<Node Id="25003:[5067..5072).2" Label="_code 743799" />
<Node Id="25003:[7118..7245).8" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 743800" />
<Node Id="25002:[3341..3730).1" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 743801" />
<Node Id="25002:[3341..3730).2" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 743802" />
<Node Id="25002:[3401..3434).1" Label="int index = unmatched.IndexOf(d); 743803" />
<Node Id="25002:[3401..3434).2" Label="int index = unmatched.IndexOf(d); 743804" />
<Node Id="25003:[10591..10601).1" Label="param Equals(object obj) 743805" />
<Node Id="25003:[10563..13732).1" Label="param Equals(this) 743806" />
<Node Id="25003:[10627..10664).1" Label="var d = obj as DiagnosticDescription; 743807" />
<Node Id="25003:[10680..10725).1" Label="if (d == null)
                return false; 743808" />
<Node Id="25003:[10680..10725).2" Label="if (d == null)
                return false; 743809" />
<Node Id="25003:[10741..10799).1" Label="if (!_code.Equals(d._code))
                return false; 743810" />
<Node Id="25003:[10741..10799).2" Label="if (!_code.Equals(d._code))
                return false; 743811" />
<Node Id="25003:[10815..10891).1" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 743812" />
<Node Id="25003:[10907..10975).1" Label="if (_isSuppressed != d._isSuppressed)
                return false; 743813" />
<Node Id="25003:[10991..11148).1" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 743814" />
<Node Id="25003:[11059..11133).1" Label="if (_squiggledText != d._squiggledText)
                    return false; 743815" />
<Node Id="25003:[11164..11464).1" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 743816" />
<Node Id="25003:[11164..11464).2" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 743817" />
<Node Id="25003:[11224..11449).1" Label="if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                } 743818" />
<Node Id="25003:[11480..11903).1" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 743819" />
<Node Id="25003:[11480..11903).2" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 743820" />
<Node Id="25003:[11917..12344).1" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 743821" />
<Node Id="25003:[11917..12344).2" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 743822" />
<Node Id="25003:[12436..12535).1" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 743823" />
<Node Id="25003:[12651..13498).1" Label="if (_arguments == null)
            {
                if (d._arguments != null)
                    return false;
            }
            else // _arguments != null
            {
                if (d._arguments == null)
                    return false;

                // we'll compare the arguments as strings
                var args1 = GetArgumentsAsStrings();
                var args2 = d.GetArgumentsAsStrings();
                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                }
            } 743824" />
<Node Id="25003:[12651..13498).2" Label="if (_arguments == null)
            {
                if (d._arguments != null)
                    return false;
            }
            else // _arguments != null
            {
                if (d._arguments == null)
                    return false;

                // we'll compare the arguments as strings
                var args1 = GetArgumentsAsStrings();
                var args2 = d.GetArgumentsAsStrings();
                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                }
            } 743825" />
<Node Id="25003:[12855..12915).1" Label="if (d._arguments == null)
                    return false; 743826" />
<Node Id="25003:[13006..13029).1" Label="GetArgumentsAsStrings() 743827" />
<Node Id="25003:[1971..2761).1" Label="param GetArgumentsAsStrings(this) 743828" />
<Node Id="25003:[2047..2709).1" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 743829" />
<Node Id="25003:[2047..2709).2" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 743830" />
<Node Id="25003:[2321..2694).1" Label="_argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                }); 743831" />
<Node Id="25003:[2321..2694).2" Label="_argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                }); 743832" />
<Node Id="25003:[2321..2340).1" Label="_argumentsAsStrings 743833" />
<Node Id="25003:[2723..2750).1" Label="return _argumentsAsStrings; 743834" />
<Node Id="25003:[12994..13030).1" Label="var args1 = GetArgumentsAsStrings(); 743835" />
<Node Id="25003:[13060..13085).1" Label="d.GetArgumentsAsStrings() 743836" />
<Node Id="25003:[1971..2761).2" Label="param GetArgumentsAsStrings(this) 743837" />
<Node Id="25003:[2047..2709).4" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 743838" />
<Node Id="25003:[2047..2709).5" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 743839" />
<Node Id="25003:[2723..2750).2" Label="return _argumentsAsStrings; 743840" />
<Node Id="25003:[13048..13086).1" Label="var args2 = d.GetArgumentsAsStrings(); 743841" />
<Node Id="25003:[13104..13483).1" Label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                } 743842" />
<Node Id="25003:[13393..13464).1" Label="if (!args1.SequenceEqual(args2))
                        return false; 743843" />
<Node Id="25003:[13393..13464).2" Label="if (!args1.SequenceEqual(args2))
                        return false; 743844" />
<Node Id="25003:[13393..13464).3" Label="if (!args1.SequenceEqual(args2))
                        return false; 743845" />
<Node Id="25003:[13514..13693).1" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 743846" />
<Node Id="25003:[13709..13721).1" Label="return true; 743847" />
<Node Id="25002:[3401..3434).5" Label="int index = unmatched.IndexOf(d); 743848" />
<Node Id="25002:[3452..3715).1" Label="if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                } 743849" />
<Node Id="25002:[3452..3715).2" Label="if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                } 743850" />
<Node Id="25002:[3508..3534).1" Label="unmatched.RemoveAt(index); 743851" />
<Node Id="25003:[10680..10725).4" Label="if (d == null)
                return false; 743852" />
<Node Id="25003:[10815..10891).3" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 743853" />
<Node Id="25003:[10907..10975).3" Label="if (_isSuppressed != d._isSuppressed)
                return false; 743854" />
<Node Id="25003:[10991..11148).2" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 743855" />
<Node Id="25003:[11059..11133).3" Label="if (_squiggledText != d._squiggledText)
                    return false; 743856" />
<Node Id="25003:[11164..11464).4" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 743857" />
<Node Id="25003:[11224..11449).4" Label="if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                } 743858" />
<Node Id="25003:[11480..11903).4" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 743859" />
<Node Id="25003:[11917..12344).4" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 743860" />
<Node Id="25003:[12436..12535).3" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 743861" />
<Node Id="25003:[12855..12915).4" Label="if (d._arguments == null)
                    return false; 743862" />
<Node Id="25003:[13514..13693).5" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 743863" />
<Node Id="25002:[3840..3992).1" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 743864" />
<Node Id="25002:[3840..3992).2" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 743865" />
<Node Id="25002:[4102..4181).1" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 743866" />
<Node Id="25002:[4102..4181).3" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 743867" />
<Node Id="25002:[4102..4181).4" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 743868" />
<Node Id="25002:[4126..4179).1" Label="DiagnosticDescription.GetAssertText(expected, actual) 743869" />
<Node Id="25003:[17577..17609).1" Label="param GetAssertText(DiagnosticDescription[] expected) 743870" />
<Node Id="25003:[17611..17641).1" Label="param GetAssertText(IEnumerable$Diagnostic$ actual) 743871" />
<Node Id="25003:[17667..17688).1" Label="const int CSharp = 1; 743872" />
<Node Id="25003:[17702..17728).1" Label="const int VisualBasic = 2; 743873" />
<Node Id="25003:[17742..17827).1" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 743874" />
<Node Id="25003:[17742..17827).2" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 743875" />
<Node Id="25003:[17742..17827).4" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 743876" />
<Node Id="25003:[17757..17803).1" Label="actual.Any() && actual.First() is CSDiagnostic 743877" />
<Node Id="25003:[17742..17827).6" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 743878" />
<Node Id="25003:[17841..17904).1" Label="var includeDiagnosticMessagesAsComments = (language == CSharp); 743879" />
<Node Id="25003:[17918..17965).1" Label="int indentDepth = (language == CSharp) ? 4 : 1; 743880" />
<Node Id="25003:[17936..17956).1" Label="(language == CSharp) 743881" />
<Node Id="25003:[17979..18071).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 743882" />
<Node Id="25003:[17979..18071).2" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 743883" />
<Node Id="25003:[17979..18071).4" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 743884" />
<Node Id="25003:[17979..18071).6" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 743885" />
<Node Id="25003:[18085..18181).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 743886" />
<Node Id="25003:[18085..18181).2" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 743887" />
<Node Id="25003:[18085..18181).4" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 743888" />
<Node Id="25003:[18085..18181).6" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 743889" />
<Node Id="25003:[18197..18490).1" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 743890" />
<Node Id="25003:[18201..18226).1" Label="IsSortedOrEmpty(expected) 743891" />
<Node Id="25003:[21605..21640).1" Label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 743892" />
<Node Id="25003:[23096..23122).1" Label="new LinePositionComparer() 743893" />
<Node Id="25003:[22962..23812).1" Label="param LinePositionComparer(this) 743894" />
<Node Id="25003:[23085..23122).1" Label="Instance = new LinePositionComparer() 743895" />
<Node Id="25003:[21666..21711).1" Label="var comparer = LinePositionComparer.Instance; 743896" />
<Node Id="25003:[21725..21759).1" Label="DiagnosticDescription last = null; 743897" />
<Node Id="25003:[21773..22187).1" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 743898" />
<Node Id="25003:[21773..22187).2" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 743899" />
<Node Id="25003:[21845..21956).1" Label="if (diagnostic._startPosition == null)
                {
                    return false;
                } 743900" />
<Node Id="25003:[21924..21937).1" Label="return false; 743901" />
<Node Id="25003:[18506..18543).1" Label="var assertText = new StringBuilder(); 743902" />
<Node Id="25003:[18557..18581).1" Label="assertText.AppendLine(); 743903" />
<Node Id="25003:[18658..18664).1" Label="int i; 743904" />
<Node Id="25003:[18678..18713).1" Label="assertText.AppendLine('Expected:'); 743905" />
<Node Id="25003:[18678..18713).3" Label="assertText.AppendLine('Expected:'); 743906" />
<Node Id="25003:[18727..18781).1" Label="var expectedText = ArrayBuilder$string$.GetInstance(); 743907" />
<Node Id="25003:[18795..18929).1" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 743908" />
<Node Id="25003:[18795..18929).2" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 743909" />
<Node Id="25003:[18855..18914).1" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 743910" />
<Node Id="25003:[18855..18914).2" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 743911" />
<Node Id="25003:[18872..18912).1" Label="GetDiagnosticDescription(d, indentDepth) 743912" />
<Node Id="25003:[22283..22306).1" Label="param GetDiagnosticDescription(DiagnosticDescription d) 743913" />
<Node Id="25003:[22308..22323).1" Label="param GetDiagnosticDescription(int indentDepth) 743914" />
<Node Id="25003:[22349..22404).1" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 743915" />
<Node Id="25003:[22349..22404).4" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 743916" />
<Node Id="25003:[22391..22403).1" Label="d.ToString() 743917" />
<Node Id="25003:[14779..17530).1" Label="param ToString(this) 743918" />
<Node Id="25003:[14837..14866).1" Label="var sb = new StringBuilder(); 743919" />
<Node Id="25003:[14882..14907).1" Label="sb.Append('Diagnostic('); 743920" />
<Node Id="25003:[14882..14907).3" Label="sb.Append('Diagnostic('); 743921" />
<Node Id="25003:[14921..15244).1" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 743922" />
<Node Id="25003:[14921..15244).2" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 743923" />
<Node Id="25003:[15100..15131).1" Label="sb.Append(_errorCodeType.Name); 743924" />
<Node Id="25003:[15100..15131).2" Label="sb.Append(_errorCodeType.Name); 743925" />
<Node Id="25003:[15149..15164).1" Label="sb.Append('.'); 743926" />
<Node Id="25003:[15149..15164).3" Label="sb.Append('.'); 743927" />
<Node Id="25003:[15182..15229).1" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 743928" />
<Node Id="25003:[15182..15229).5" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 743929" />
<Node Id="25003:[15260..15767).1" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 743930" />
<Node Id="25003:[15260..15767).2" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 743931" />
<Node Id="25003:[15320..15717).1" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 743932" />
<Node Id="25003:[15632..15650).1" Label="sb.Append(', \''); 743933" />
<Node Id="25003:[15632..15650).3" Label="sb.Append(', \''); 743934" />
<Node Id="25003:[15672..15698).1" Label="sb.Append(_squiggledText); 743935" />
<Node Id="25003:[15672..15698).2" Label="sb.Append(_squiggledText); 743936" />
<Node Id="25003:[15737..15752).1" Label="sb.Append('''); 743937" />
<Node Id="25003:[15737..15752).3" Label="sb.Append('''); 743938" />
<Node Id="25003:[15783..15883).1" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 743939" />
<Node Id="25003:[15899..15914).1" Label="sb.Append(')'); 743940" />
<Node Id="25003:[15899..15914).3" Label="sb.Append(')'); 743941" />
<Node Id="25003:[15930..16520).1" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 743942" />
<Node Id="25003:[15930..16520).2" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 743943" />
<Node Id="25003:[15986..16015).1" Label="sb.Append('.WithArguments('); 743944" />
<Node Id="25003:[15986..16015).3" Label="sb.Append('.WithArguments('); 743945" />
<Node Id="25003:[16055..16078).1" Label="GetArgumentsAsStrings() 743946" />
<Node Id="25003:[16033..16095).1" Label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 743947" />
<Node Id="25003:[16113..16472).1" Label="for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                } 743948" />
<Node Id="25003:[16113..16472).3" Label="for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                } 743949" />
<Node Id="25003:[16202..16218).1" Label="sb.Append('\''); 743950" />
<Node Id="25003:[16202..16218).3" Label="sb.Append('\''); 743951" />
<Node Id="25003:[16240..16275).1" Label="sb.Append(argumentStrings.Current); 743952" />
<Node Id="25003:[16240..16275).2" Label="sb.Append(argumentStrings.Current); 743953" />
<Node Id="25003:[16297..16313).1" Label="sb.Append('\''); 743954" />
<Node Id="25003:[16297..16313).3" Label="sb.Append('\''); 743955" />
<Node Id="25003:[16335..16453).1" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 743956" />
<Node Id="25003:[16414..16430).1" Label="sb.Append(', '); 743957" />
<Node Id="25003:[16414..16430).3" Label="sb.Append(', '); 743958" />
<Node Id="25003:[16490..16505).1" Label="sb.Append(')'); 743959" />
<Node Id="25003:[16490..16505).3" Label="sb.Append(')'); 743960" />
<Node Id="25003:[16536..16829).1" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 743961" />
<Node Id="25003:[16536..16829).2" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 743962" />
<Node Id="25003:[16845..16954).1" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 743963" />
<Node Id="25003:[16970..17144).1" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 743964" />
<Node Id="25003:[16970..17144).2" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 743965" />
<Node Id="25003:[17160..17340).1" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 743966" />
<Node Id="25003:[17160..17340).2" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 743967" />
<Node Id="25003:[17356..17482).1" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 743968" />
<Node Id="25003:[17356..17482).2" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 743969" />
<Node Id="25003:[17498..17519).1" Label="return sb.ToString(); 743970" />
<Node Id="25003:[22349..22404).7" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 743971" />
<Node Id="25003:[22349..22404).8" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 743972" />
<Node Id="25003:[18855..18914).5" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 743973" />
<Node Id="25003:[18855..18914).7" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 743974" />
<Node Id="25003:[22308..22323).2" Label="param GetDiagnosticDescription(int indentDepth) 743975" />
<Node Id="25003:[22349..22404).10" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 743976" />
<Node Id="25003:[22349..22404).13" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 743977" />
<Node Id="25003:[14837..14866).3" Label="var sb = new StringBuilder(); 743978" />
<Node Id="25003:[14882..14907).4" Label="sb.Append('Diagnostic('); 743979" />
<Node Id="25003:[14882..14907).6" Label="sb.Append('Diagnostic('); 743980" />
<Node Id="25003:[14921..15244).4" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 743981" />
<Node Id="25003:[15100..15131).3" Label="sb.Append(_errorCodeType.Name); 743982" />
<Node Id="25003:[15100..15131).4" Label="sb.Append(_errorCodeType.Name); 743983" />
<Node Id="25003:[15149..15164).4" Label="sb.Append('.'); 743984" />
<Node Id="25003:[15149..15164).6" Label="sb.Append('.'); 743985" />
<Node Id="25003:[15182..15229).6" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 743986" />
<Node Id="25003:[15182..15229).10" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 743987" />
<Node Id="25003:[15260..15767).4" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 743988" />
<Node Id="25003:[15320..15717).13" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 743989" />
<Node Id="25003:[15632..15650).4" Label="sb.Append(', \''); 743990" />
<Node Id="25003:[15632..15650).6" Label="sb.Append(', \''); 743991" />
<Node Id="25003:[15672..15698).3" Label="sb.Append(_squiggledText); 743992" />
<Node Id="25003:[15672..15698).4" Label="sb.Append(_squiggledText); 743993" />
<Node Id="25003:[15737..15752).4" Label="sb.Append('''); 743994" />
<Node Id="25003:[15737..15752).6" Label="sb.Append('''); 743995" />
<Node Id="25003:[15783..15883).2" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 743996" />
<Node Id="25003:[15899..15914).4" Label="sb.Append(')'); 743997" />
<Node Id="25003:[15899..15914).6" Label="sb.Append(')'); 743998" />
<Node Id="25003:[15986..16015).4" Label="sb.Append('.WithArguments('); 743999" />
<Node Id="25003:[15986..16015).6" Label="sb.Append('.WithArguments('); 744000" />
<Node Id="25003:[16202..16218).9" Label="sb.Append('\''); 744001" />
<Node Id="25003:[16240..16275).5" Label="sb.Append(argumentStrings.Current); 744002" />
<Node Id="25003:[16240..16275).6" Label="sb.Append(argumentStrings.Current); 744003" />
<Node Id="25003:[16297..16313).9" Label="sb.Append('\''); 744004" />
<Node Id="25003:[16490..16505).4" Label="sb.Append(')'); 744005" />
<Node Id="25003:[16490..16505).6" Label="sb.Append(')'); 744006" />
<Node Id="25003:[16536..16829).4" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 744007" />
<Node Id="25003:[16845..16954).2" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 744008" />
<Node Id="25003:[16970..17144).4" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 744009" />
<Node Id="25003:[17160..17340).4" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 744010" />
<Node Id="25003:[17356..17482).5" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 744011" />
<Node Id="25003:[17498..17519).3" Label="return sb.ToString(); 744012" />
<Node Id="25003:[22349..22404).16" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744013" />
<Node Id="25003:[22349..22404).17" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744014" />
<Node Id="25003:[18943..18992).1" Label="GetCommaSeparatedLines(assertText, expectedText); 744015" />
<Node Id="25003:[18943..18992).2" Label="GetCommaSeparatedLines(assertText, expectedText); 744016" />
<Node Id="25003:[18943..18991).1" Label="GetCommaSeparatedLines(assertText, expectedText) 744017" />
<Node Id="25003:[22599..22615).1" Label="param GetCommaSeparatedLines(StringBuilder sb) 744018" />
<Node Id="25003:[22617..22643).1" Label="param GetCommaSeparatedLines(ArrayBuilder$string$ lines) 744019" />
<Node Id="25003:[22669..22689).1" Label="int n = lines.Count; 744020" />
<Node Id="25003:[22703..22939).1" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 744021" />
<Node Id="25003:[22703..22939).3" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 744022" />
<Node Id="25003:[22763..22783).1" Label="sb.Append(lines[i]); 744023" />
<Node Id="25003:[22763..22783).3" Label="sb.Append(lines[i]); 744024" />
<Node Id="25003:[22801..22890).1" Label="if (i $ n - 1)
                {
                    sb.Append(',');
                } 744025" />
<Node Id="25003:[22856..22871).1" Label="sb.Append(','); 744026" />
<Node Id="25003:[22856..22871).3" Label="sb.Append(','); 744027" />
<Node Id="25003:[22908..22924).1" Label="sb.AppendLine(); 744028" />
<Node Id="25003:[18943..18992).3" Label="GetCommaSeparatedLines(assertText, expectedText); 744029" />
<Node Id="25003:[19106..19139).1" Label="assertText.AppendLine('Actual:'); 744030" />
<Node Id="25003:[19106..19139).3" Label="assertText.AppendLine('Actual:'); 744031" />
<Node Id="25003:[19153..19205).1" Label="var actualText = ArrayBuilder$string$.GetInstance(); 744032" />
<Node Id="25003:[19219..19250).1" Label="var e = actual.GetEnumerator(); 744033" />
<Node Id="25003:[19264..20938).1" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 744034" />
<Node Id="25003:[19264..20938).3" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 744035" />
<Node Id="25003:[19327..19352).1" Label="Diagnostic d = e.Current; 744036" />
<Node Id="25003:[19370..19400).1" Label="string message = d.ToString(); 744037" />
<Node Id="25003:[19418..19628).1" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 744038" />
<Node Id="25003:[19418..19628).2" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 744039" />
<Node Id="25003:[19648..19745).1" Label="if (i $ 0)
                {
                    assertText.AppendLine(',');
                } 744040" />
<Node Id="25003:[19765..20366).1" Label="if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                } 744041" />
<Node Id="25003:[19846..19878).1" Label="Indent(assertText, indentDepth); 744042" />
<Node Id="25003:[19846..19878).2" Label="Indent(assertText, indentDepth); 744043" />
<Node Id="25003:[19846..19877).1" Label="Indent(assertText, indentDepth) 744044" />
<Node Id="25003:[22454..22470).1" Label="param Indent(StringBuilder sb) 744045" />
<Node Id="25003:[22472..22481).1" Label="param Indent(int count) 744046" />
<Node Id="25003:[22507..22533).1" Label="sb.Append(' ', 4 * count); 744047" />
<Node Id="25003:[22507..22533).4" Label="sb.Append(' ', 4 * count); 744048" />
<Node Id="25003:[22507..22533).6" Label="sb.Append(' ', 4 * count); 744049" />
<Node Id="25003:[19846..19878).3" Label="Indent(assertText, indentDepth); 744050" />
<Node Id="25003:[19900..19925).1" Label="assertText.Append('// '); 744051" />
<Node Id="25003:[19900..19925).3" Label="assertText.Append('// '); 744052" />
<Node Id="25003:[19947..19983).1" Label="assertText.AppendLine(d.ToString()); 744053" />
<Node Id="25003:[19947..19983).3" Label="assertText.AppendLine(d.ToString()); 744054" />
<Node Id="25003:[20005..20024).1" Label="var l = d.Location; 744055" />
<Node Id="25003:[20046..20347).1" Label="if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    } 744056" />
<Node Id="25003:[20112..20144).1" Label="Indent(assertText, indentDepth); 744057" />
<Node Id="25003:[20112..20144).2" Label="Indent(assertText, indentDepth); 744058" />
<Node Id="25003:[20112..20143).1" Label="Indent(assertText, indentDepth) 744059" />
<Node Id="25003:[22454..22470).2" Label="param Indent(StringBuilder sb) 744060" />
<Node Id="25003:[22472..22481).2" Label="param Indent(int count) 744061" />
<Node Id="25003:[22507..22533).7" Label="sb.Append(' ', 4 * count); 744062" />
<Node Id="25003:[22507..22533).10" Label="sb.Append(' ', 4 * count); 744063" />
<Node Id="25003:[22507..22533).12" Label="sb.Append(' ', 4 * count); 744064" />
<Node Id="25003:[20112..20144).3" Label="Indent(assertText, indentDepth); 744065" />
<Node Id="25003:[20170..20195).1" Label="assertText.Append('// '); 744066" />
<Node Id="25003:[20170..20195).3" Label="assertText.Append('// '); 744067" />
<Node Id="25003:[20221..20324).1" Label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 744068" />
<Node Id="25003:[20221..20324).8" Label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 744069" />
<Node Id="25003:[20386..20505).1" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 744070" />
<Node Id="25003:[20386..20505).2" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 744071" />
<Node Id="25003:[20386..20505).4" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 744072" />
<Node Id="25003:[20386..20505).5" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 744073" />
<Node Id="25003:[20404..20504).1" Label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 744074" />
<Node Id="25003:[4933..4945).4" Label="param DiagnosticDescription(Diagnostic d) 744075" />
<Node Id="25003:[4947..4965).4" Label="param DiagnosticDescription(bool errorCodeOnly) 744076" />
<Node Id="25003:[4967..5002).4" Label="param DiagnosticDescription(bool includeDefaultSeverity = false) 744077" />
<Node Id="25003:[5004..5041).4" Label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 744078" />
<Node Id="25003:[4904..7352).4" Label="param DiagnosticDescription(this) 744079" />
<Node Id="25003:[912..917).10" Label="_code 744080" />
<Node Id="25003:[950..967).10" Label="_isWarningAsError 744081" />
<Node Id="25003:[1000..1013).10" Label="_isSuppressed 744082" />
<Node Id="25003:[1048..1062).10" Label="_squiggledText 744083" />
<Node Id="25003:[1099..1109).10" Label="_arguments 744084" />
<Node Id="25003:[1151..1165).28" Label="_startPosition 744085" />
<Node Id="25003:[1336..1350).10" Label="_errorCodeType 744086" />
<Node Id="25003:[1460..1479).10" Label="_defaultSeverityOpt 744087" />
<Node Id="25003:[1527..1548).10" Label="_effectiveSeverityOpt 744088" />
<Node Id="25003:[5067..5072).4" Label="_code 744089" />
<Node Id="25003:[5096..5113).4" Label="_isWarningAsError 744090" />
<Node Id="25003:[5149..5162).4" Label="_isSuppressed 744091" />
<Node Id="25003:[5194..5203).4" Label="_location 744092" />
<Node Id="25003:[5444..5476).7" Label="DiagnosticWithInfo dinfo = null; 744093" />
<Node Id="25003:[5490..6130).23" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 744094" />
<Node Id="25003:[7118..7245).19" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 744095" />
<Node Id="25003:[7118..7245).20" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 744096" />
<Node Id="25003:[7118..7245).22" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 744097" />
<Node Id="25003:[20523..20557).1" Label="var diffDescription = description; 744098" />
<Node Id="25003:[20575..20622).1" Label="var idx = Array.IndexOf(expected, description); 744099" />
<Node Id="25003:[20575..20622).2" Label="var idx = Array.IndexOf(expected, description); 744100" />
<Node Id="25003:[20575..20622).3" Label="var idx = Array.IndexOf(expected, description); 744101" />
<Node Id="25003:[20575..20622).4" Label="var idx = Array.IndexOf(expected, description); 744102" />
<Node Id="25003:[10680..10725).10" Label="if (d == null)
                return false; 744103" />
<Node Id="25003:[10680..10725).11" Label="if (d == null)
                return false; 744104" />
<Node Id="25003:[10815..10891).7" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 744105" />
<Node Id="25003:[10907..10975).7" Label="if (_isSuppressed != d._isSuppressed)
                return false; 744106" />
<Node Id="25003:[10991..11148).4" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 744107" />
<Node Id="25003:[11059..11133).7" Label="if (_squiggledText != d._squiggledText)
                    return false; 744108" />
<Node Id="25003:[11164..11464).10" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 744109" />
<Node Id="25003:[11164..11464).11" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 744110" />
<Node Id="25003:[11480..11903).10" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 744111" />
<Node Id="25003:[11480..11903).11" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 744112" />
<Node Id="25003:[11917..12344).10" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 744113" />
<Node Id="25003:[11917..12344).11" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 744114" />
<Node Id="25003:[12436..12535).7" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 744115" />
<Node Id="25003:[12855..12915).10" Label="if (d._arguments == null)
                    return false; 744116" />
<Node Id="25003:[13514..13693).13" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 744117" />
<Node Id="25003:[20640..20746).1" Label="if (idx != -1)
                {
                    diffDescription = expected[idx];
                } 744118" />
<Node Id="25003:[20640..20746).2" Label="if (idx != -1)
                {
                    diffDescription = expected[idx];
                } 744119" />
<Node Id="25003:[20695..20727).1" Label="diffDescription = expected[idx]; 744120" />
<Node Id="25003:[20764..20834).1" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744121" />
<Node Id="25003:[20764..20834).2" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744122" />
<Node Id="25003:[20782..20832).1" Label="GetDiagnosticDescription(description, indentDepth) 744123" />
<Node Id="25003:[22283..22306).4" Label="param GetDiagnosticDescription(DiagnosticDescription d) 744124" />
<Node Id="25003:[22308..22323).4" Label="param GetDiagnosticDescription(int indentDepth) 744125" />
<Node Id="25003:[22349..22404).28" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744126" />
<Node Id="25003:[22349..22404).31" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744127" />
<Node Id="25003:[14837..14866).7" Label="var sb = new StringBuilder(); 744128" />
<Node Id="25003:[14882..14907).10" Label="sb.Append('Diagnostic('); 744129" />
<Node Id="25003:[14882..14907).12" Label="sb.Append('Diagnostic('); 744130" />
<Node Id="25003:[14921..15244).10" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 744131" />
<Node Id="25003:[14921..15244).11" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 744132" />
<Node Id="25003:[15100..15131).7" Label="sb.Append(_errorCodeType.Name); 744133" />
<Node Id="25003:[15100..15131).8" Label="sb.Append(_errorCodeType.Name); 744134" />
<Node Id="25003:[15149..15164).10" Label="sb.Append('.'); 744135" />
<Node Id="25003:[15149..15164).12" Label="sb.Append('.'); 744136" />
<Node Id="25003:[15182..15229).16" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744137" />
<Node Id="25003:[15182..15229).20" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744138" />
<Node Id="25003:[15260..15767).10" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 744139" />
<Node Id="25003:[15260..15767).11" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 744140" />
<Node Id="25003:[15320..15717).37" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 744141" />
<Node Id="25003:[15632..15650).10" Label="sb.Append(', \''); 744142" />
<Node Id="25003:[15632..15650).12" Label="sb.Append(', \''); 744143" />
<Node Id="25003:[15672..15698).7" Label="sb.Append(_squiggledText); 744144" />
<Node Id="25003:[15672..15698).8" Label="sb.Append(_squiggledText); 744145" />
<Node Id="25003:[15737..15752).10" Label="sb.Append('''); 744146" />
<Node Id="25003:[15737..15752).12" Label="sb.Append('''); 744147" />
<Node Id="25003:[15783..15883).4" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 744148" />
<Node Id="25003:[15899..15914).10" Label="sb.Append(')'); 744149" />
<Node Id="25003:[15899..15914).12" Label="sb.Append(')'); 744150" />
<Node Id="25003:[15930..16520).11" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 744151" />
<Node Id="25003:[15986..16015).10" Label="sb.Append('.WithArguments('); 744152" />
<Node Id="25003:[15986..16015).12" Label="sb.Append('.WithArguments('); 744153" />
<Node Id="25003:[16202..16218).13" Label="sb.Append('\''); 744154" />
<Node Id="25003:[16202..16218).15" Label="sb.Append('\''); 744155" />
<Node Id="25003:[16240..16275).9" Label="sb.Append(argumentStrings.Current); 744156" />
<Node Id="25003:[16240..16275).10" Label="sb.Append(argumentStrings.Current); 744157" />
<Node Id="25003:[16297..16313).13" Label="sb.Append('\''); 744158" />
<Node Id="25003:[16297..16313).15" Label="sb.Append('\''); 744159" />
<Node Id="25003:[16335..16453).17" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 744160" />
<Node Id="25003:[16414..16430).4" Label="sb.Append(', '); 744161" />
<Node Id="25003:[16414..16430).6" Label="sb.Append(', '); 744162" />
<Node Id="25003:[16490..16505).10" Label="sb.Append(')'); 744163" />
<Node Id="25003:[16490..16505).12" Label="sb.Append(')'); 744164" />
<Node Id="25003:[16536..16829).10" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 744165" />
<Node Id="25003:[16536..16829).11" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 744166" />
<Node Id="25003:[16596..16624).1" Label="sb.Append('.WithLocation('); 744167" />
<Node Id="25003:[16596..16624).3" Label="sb.Append('.WithLocation('); 744168" />
<Node Id="25003:[16642..16683).1" Label="sb.Append(_startPosition.Value.Line + 1); 744169" />
<Node Id="25003:[16642..16683).4" Label="sb.Append(_startPosition.Value.Line + 1); 744170" />
<Node Id="25003:[16701..16717).1" Label="sb.Append(', '); 744171" />
<Node Id="25003:[16701..16717).3" Label="sb.Append(', '); 744172" />
<Node Id="25003:[16735..16781).1" Label="sb.Append(_startPosition.Value.Character + 1); 744173" />
<Node Id="25003:[16735..16781).4" Label="sb.Append(_startPosition.Value.Character + 1); 744174" />
<Node Id="25003:[16799..16814).1" Label="sb.Append(')'); 744175" />
<Node Id="25003:[16799..16814).3" Label="sb.Append(')'); 744176" />
<Node Id="25003:[16845..16954).4" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 744177" />
<Node Id="25003:[16970..17144).10" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 744178" />
<Node Id="25003:[16970..17144).11" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 744179" />
<Node Id="25003:[17160..17340).10" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 744180" />
<Node Id="25003:[17160..17340).11" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 744181" />
<Node Id="25003:[17356..17482).13" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 744182" />
<Node Id="25003:[17356..17482).14" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 744183" />
<Node Id="25003:[17498..17519).7" Label="return sb.ToString(); 744184" />
<Node Id="25003:[22349..22404).34" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744185" />
<Node Id="25003:[22349..22404).35" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744186" />
<Node Id="25003:[20764..20834).5" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744187" />
<Node Id="25003:[20852..20923).1" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744188" />
<Node Id="25003:[20852..20923).2" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744189" />
<Node Id="25003:[20867..20921).1" Label="GetDiagnosticDescription(diffDescription, indentDepth) 744190" />
<Node Id="25003:[22283..22306).5" Label="param GetDiagnosticDescription(DiagnosticDescription d) 744191" />
<Node Id="25003:[22308..22323).5" Label="param GetDiagnosticDescription(int indentDepth) 744192" />
<Node Id="25003:[22349..22404).37" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744193" />
<Node Id="25003:[22349..22404).40" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744194" />
<Node Id="25003:[14837..14866).9" Label="var sb = new StringBuilder(); 744195" />
<Node Id="25003:[14882..14907).13" Label="sb.Append('Diagnostic('); 744196" />
<Node Id="25003:[14882..14907).15" Label="sb.Append('Diagnostic('); 744197" />
<Node Id="25003:[14921..15244).13" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 744198" />
<Node Id="25003:[14921..15244).14" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 744199" />
<Node Id="25003:[15100..15131).9" Label="sb.Append(_errorCodeType.Name); 744200" />
<Node Id="25003:[15100..15131).10" Label="sb.Append(_errorCodeType.Name); 744201" />
<Node Id="25003:[15149..15164).13" Label="sb.Append('.'); 744202" />
<Node Id="25003:[15149..15164).15" Label="sb.Append('.'); 744203" />
<Node Id="25003:[15182..15229).21" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744204" />
<Node Id="25003:[15182..15229).25" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744205" />
<Node Id="25003:[15260..15767).13" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 744206" />
<Node Id="25003:[15260..15767).14" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 744207" />
<Node Id="25003:[15320..15717).49" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 744208" />
<Node Id="25003:[15632..15650).13" Label="sb.Append(', \''); 744209" />
<Node Id="25003:[15632..15650).15" Label="sb.Append(', \''); 744210" />
<Node Id="25003:[15672..15698).9" Label="sb.Append(_squiggledText); 744211" />
<Node Id="25003:[15672..15698).10" Label="sb.Append(_squiggledText); 744212" />
<Node Id="25003:[15737..15752).13" Label="sb.Append('''); 744213" />
<Node Id="25003:[15737..15752).15" Label="sb.Append('''); 744214" />
<Node Id="25003:[15783..15883).5" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 744215" />
<Node Id="25003:[15899..15914).13" Label="sb.Append(')'); 744216" />
<Node Id="25003:[15899..15914).15" Label="sb.Append(')'); 744217" />
<Node Id="25003:[15930..16520).14" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 744218" />
<Node Id="25003:[15986..16015).13" Label="sb.Append('.WithArguments('); 744219" />
<Node Id="25003:[15986..16015).15" Label="sb.Append('.WithArguments('); 744220" />
<Node Id="25003:[16202..16218).19" Label="sb.Append('\''); 744221" />
<Node Id="25003:[16202..16218).21" Label="sb.Append('\''); 744222" />
<Node Id="25003:[16240..16275).13" Label="sb.Append(argumentStrings.Current); 744223" />
<Node Id="25003:[16240..16275).14" Label="sb.Append(argumentStrings.Current); 744224" />
<Node Id="25003:[16297..16313).19" Label="sb.Append('\''); 744225" />
<Node Id="25003:[16297..16313).21" Label="sb.Append('\''); 744226" />
<Node Id="25003:[16335..16453).25" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 744227" />
<Node Id="25003:[16414..16430).7" Label="sb.Append(', '); 744228" />
<Node Id="25003:[16414..16430).9" Label="sb.Append(', '); 744229" />
<Node Id="25003:[16490..16505).13" Label="sb.Append(')'); 744230" />
<Node Id="25003:[16490..16505).15" Label="sb.Append(')'); 744231" />
<Node Id="25003:[16536..16829).13" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 744232" />
<Node Id="25003:[16536..16829).14" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 744233" />
<Node Id="25003:[16845..16954).5" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 744234" />
<Node Id="25003:[16970..17144).13" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 744235" />
<Node Id="25003:[16970..17144).14" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 744236" />
<Node Id="25003:[17160..17340).13" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 744237" />
<Node Id="25003:[17160..17340).14" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 744238" />
<Node Id="25003:[17356..17482).17" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 744239" />
<Node Id="25003:[17356..17482).18" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 744240" />
<Node Id="25003:[17498..17519).9" Label="return sb.ToString(); 744241" />
<Node Id="25003:[22349..22404).43" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744242" />
<Node Id="25003:[22349..22404).44" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744243" />
<Node Id="25003:[20852..20923).5" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744244" />
<Node Id="25003:[19418..19628).6" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 744245" />
<Node Id="25003:[19648..19745).4" Label="if (i $ 0)
                {
                    assertText.AppendLine(',');
                } 744246" />
<Node Id="25003:[19699..19726).1" Label="assertText.AppendLine(','); 744247" />
<Node Id="25003:[19699..19726).3" Label="assertText.AppendLine(','); 744248" />
<Node Id="25003:[19846..19878).4" Label="Indent(assertText, indentDepth); 744249" />
<Node Id="25003:[19846..19878).5" Label="Indent(assertText, indentDepth); 744250" />
<Node Id="25003:[19846..19877).2" Label="Indent(assertText, indentDepth) 744251" />
<Node Id="25003:[22454..22470).3" Label="param Indent(StringBuilder sb) 744252" />
<Node Id="25003:[22472..22481).3" Label="param Indent(int count) 744253" />
<Node Id="25003:[22507..22533).13" Label="sb.Append(' ', 4 * count); 744254" />
<Node Id="25003:[22507..22533).16" Label="sb.Append(' ', 4 * count); 744255" />
<Node Id="25003:[19846..19878).6" Label="Indent(assertText, indentDepth); 744256" />
<Node Id="25003:[19900..19925).4" Label="assertText.Append('// '); 744257" />
<Node Id="25003:[20112..20144).4" Label="Indent(assertText, indentDepth); 744258" />
<Node Id="25003:[20112..20144).5" Label="Indent(assertText, indentDepth); 744259" />
<Node Id="25003:[20112..20143).2" Label="Indent(assertText, indentDepth) 744260" />
<Node Id="25003:[22454..22470).4" Label="param Indent(StringBuilder sb) 744261" />
<Node Id="25003:[22472..22481).4" Label="param Indent(int count) 744262" />
<Node Id="25003:[22507..22533).19" Label="sb.Append(' ', 4 * count); 744263" />
<Node Id="25003:[22507..22533).22" Label="sb.Append(' ', 4 * count); 744264" />
<Node Id="25003:[20112..20144).6" Label="Indent(assertText, indentDepth); 744265" />
<Node Id="25003:[20170..20195).4" Label="assertText.Append('// '); 744266" />
<Node Id="25003:[912..917).11" Label="_code 744267" />
<Node Id="25003:[950..967).11" Label="_isWarningAsError 744268" />
<Node Id="25003:[1000..1013).11" Label="_isSuppressed 744269" />
<Node Id="25003:[1048..1062).11" Label="_squiggledText 744270" />
<Node Id="25003:[1099..1109).11" Label="_arguments 744271" />
<Node Id="25003:[1151..1165).31" Label="_startPosition 744272" />
<Node Id="25003:[1336..1350).11" Label="_errorCodeType 744273" />
<Node Id="25003:[1460..1479).11" Label="_defaultSeverityOpt 744274" />
<Node Id="25003:[1527..1548).11" Label="_effectiveSeverityOpt 744275" />
<Node Id="25003:[5067..5072).5" Label="_code 744276" />
<Node Id="25003:[5444..5476).9" Label="DiagnosticWithInfo dinfo = null; 744277" />
<Node Id="25003:[7118..7245).25" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 744278" />
<Node Id="25003:[20523..20557).2" Label="var diffDescription = description; 744279" />
<Node Id="25003:[10680..10725).13" Label="if (d == null)
                return false; 744280" />
<Node Id="25003:[10786..10799).1" Label="return false; 744281" />
<Node Id="25003:[10680..10725).16" Label="if (d == null)
                return false; 744282" />
<Node Id="25003:[10815..10891).9" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 744283" />
<Node Id="25003:[10907..10975).9" Label="if (_isSuppressed != d._isSuppressed)
                return false; 744284" />
<Node Id="25003:[10991..11148).5" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 744285" />
<Node Id="25003:[11059..11133).9" Label="if (_squiggledText != d._squiggledText)
                    return false; 744286" />
<Node Id="25003:[11164..11464).13" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 744287" />
<Node Id="25003:[11480..11903).13" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 744288" />
<Node Id="25003:[11917..12344).13" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 744289" />
<Node Id="25003:[12436..12535).9" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 744290" />
<Node Id="25003:[12855..12915).13" Label="if (d._arguments == null)
                    return false; 744291" />
<Node Id="25003:[13514..13693).17" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 744292" />
<Node Id="25003:[20764..20834).7" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744293" />
<Node Id="25003:[22308..22323).6" Label="param GetDiagnosticDescription(int indentDepth) 744294" />
<Node Id="25003:[22349..22404).46" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744295" />
<Node Id="25003:[22349..22404).49" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744296" />
<Node Id="25003:[14837..14866).11" Label="var sb = new StringBuilder(); 744297" />
<Node Id="25003:[14882..14907).16" Label="sb.Append('Diagnostic('); 744298" />
<Node Id="25003:[14882..14907).18" Label="sb.Append('Diagnostic('); 744299" />
<Node Id="25003:[14921..15244).16" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 744300" />
<Node Id="25003:[14921..15244).17" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 744301" />
<Node Id="25003:[15100..15131).11" Label="sb.Append(_errorCodeType.Name); 744302" />
<Node Id="25003:[15100..15131).12" Label="sb.Append(_errorCodeType.Name); 744303" />
<Node Id="25003:[15149..15164).16" Label="sb.Append('.'); 744304" />
<Node Id="25003:[15149..15164).18" Label="sb.Append('.'); 744305" />
<Node Id="25003:[15182..15229).26" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744306" />
<Node Id="25003:[15182..15229).30" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744307" />
<Node Id="25003:[15260..15767).16" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 744308" />
<Node Id="25003:[15260..15767).17" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 744309" />
<Node Id="25003:[15320..15717).61" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 744310" />
<Node Id="25003:[15632..15650).16" Label="sb.Append(', \''); 744311" />
<Node Id="25003:[15632..15650).18" Label="sb.Append(', \''); 744312" />
<Node Id="25003:[15672..15698).11" Label="sb.Append(_squiggledText); 744313" />
<Node Id="25003:[15672..15698).12" Label="sb.Append(_squiggledText); 744314" />
<Node Id="25003:[15737..15752).16" Label="sb.Append('''); 744315" />
<Node Id="25003:[15737..15752).18" Label="sb.Append('''); 744316" />
<Node Id="25003:[15783..15883).6" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 744317" />
<Node Id="25003:[15899..15914).16" Label="sb.Append(')'); 744318" />
<Node Id="25003:[15899..15914).18" Label="sb.Append(')'); 744319" />
<Node Id="25003:[15986..16015).16" Label="sb.Append('.WithArguments('); 744320" />
<Node Id="25003:[15986..16015).18" Label="sb.Append('.WithArguments('); 744321" />
<Node Id="25003:[16202..16218).25" Label="sb.Append('\''); 744322" />
<Node Id="25003:[16202..16218).27" Label="sb.Append('\''); 744323" />
<Node Id="25003:[16240..16275).17" Label="sb.Append(argumentStrings.Current); 744324" />
<Node Id="25003:[16240..16275).18" Label="sb.Append(argumentStrings.Current); 744325" />
<Node Id="25003:[16297..16313).25" Label="sb.Append('\''); 744326" />
<Node Id="25003:[16297..16313).27" Label="sb.Append('\''); 744327" />
<Node Id="25003:[16335..16453).33" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 744328" />
<Node Id="25003:[16490..16505).16" Label="sb.Append(')'); 744329" />
<Node Id="25003:[16490..16505).18" Label="sb.Append(')'); 744330" />
<Node Id="25003:[16536..16829).16" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 744331" />
<Node Id="25003:[16536..16829).17" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 744332" />
<Node Id="25003:[16596..16624).4" Label="sb.Append('.WithLocation('); 744333" />
<Node Id="25003:[16596..16624).6" Label="sb.Append('.WithLocation('); 744334" />
<Node Id="25003:[16642..16683).5" Label="sb.Append(_startPosition.Value.Line + 1); 744335" />
<Node Id="25003:[16642..16683).8" Label="sb.Append(_startPosition.Value.Line + 1); 744336" />
<Node Id="25003:[16701..16717).4" Label="sb.Append(', '); 744337" />
<Node Id="25003:[16701..16717).6" Label="sb.Append(', '); 744338" />
<Node Id="25003:[16735..16781).5" Label="sb.Append(_startPosition.Value.Character + 1); 744339" />
<Node Id="25003:[16735..16781).8" Label="sb.Append(_startPosition.Value.Character + 1); 744340" />
<Node Id="25003:[16799..16814).4" Label="sb.Append(')'); 744341" />
<Node Id="25003:[16799..16814).6" Label="sb.Append(')'); 744342" />
<Node Id="25003:[16845..16954).6" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 744343" />
<Node Id="25003:[16970..17144).16" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 744344" />
<Node Id="25003:[16970..17144).17" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 744345" />
<Node Id="25003:[17160..17340).16" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 744346" />
<Node Id="25003:[17160..17340).17" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 744347" />
<Node Id="25003:[17356..17482).21" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 744348" />
<Node Id="25003:[17356..17482).22" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 744349" />
<Node Id="25003:[17498..17519).11" Label="return sb.ToString(); 744350" />
<Node Id="25003:[22349..22404).52" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744351" />
<Node Id="25003:[22349..22404).53" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744352" />
<Node Id="25003:[20764..20834).10" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744353" />
<Node Id="25003:[20852..20923).7" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744354" />
<Node Id="25003:[22308..22323).7" Label="param GetDiagnosticDescription(int indentDepth) 744355" />
<Node Id="25003:[22349..22404).58" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744356" />
<Node Id="25003:[15100..15131).13" Label="sb.Append(_errorCodeType.Name); 744357" />
<Node Id="25003:[15100..15131).14" Label="sb.Append(_errorCodeType.Name); 744358" />
<Node Id="25003:[15149..15164).21" Label="sb.Append('.'); 744359" />
<Node Id="25003:[15182..15229).31" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744360" />
<Node Id="25003:[15182..15229).35" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744361" />
<Node Id="25003:[15632..15650).21" Label="sb.Append(', \''); 744362" />
<Node Id="25003:[15672..15698).13" Label="sb.Append(_squiggledText); 744363" />
<Node Id="25003:[15672..15698).14" Label="sb.Append(_squiggledText); 744364" />
<Node Id="25003:[15737..15752).21" Label="sb.Append('''); 744365" />
<Node Id="25003:[15899..15914).21" Label="sb.Append(')'); 744366" />
<Node Id="25003:[15986..16015).21" Label="sb.Append('.WithArguments('); 744367" />
<Node Id="25003:[16202..16218).30" Label="sb.Append('\''); 744368" />
<Node Id="25003:[16240..16275).20" Label="sb.Append(argumentStrings.Current); 744369" />
<Node Id="25003:[16297..16313).30" Label="sb.Append('\''); 744370" />
<Node Id="25003:[16490..16505).21" Label="sb.Append(')'); 744371" />
<Node Id="25003:[17498..17519).13" Label="return sb.ToString(); 744372" />
<Node Id="25003:[22349..22404).61" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744373" />
<Node Id="25003:[22349..22404).62" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744374" />
<Node Id="25003:[20852..20923).10" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744375" />
<Node Id="25003:[19418..19628).11" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 744376" />
<Node Id="25003:[19648..19745).7" Label="if (i $ 0)
                {
                    assertText.AppendLine(',');
                } 744377" />
<Node Id="25003:[19699..19726).4" Label="assertText.AppendLine(','); 744378" />
<Node Id="25003:[19846..19878).7" Label="Indent(assertText, indentDepth); 744379" />
<Node Id="25003:[19846..19878).8" Label="Indent(assertText, indentDepth); 744380" />
<Node Id="25003:[19846..19877).3" Label="Indent(assertText, indentDepth) 744381" />
<Node Id="25003:[22454..22470).5" Label="param Indent(StringBuilder sb) 744382" />
<Node Id="25003:[22472..22481).5" Label="param Indent(int count) 744383" />
<Node Id="25003:[22507..22533).25" Label="sb.Append(' ', 4 * count); 744384" />
<Node Id="25003:[22507..22533).28" Label="sb.Append(' ', 4 * count); 744385" />
<Node Id="25003:[19846..19878).9" Label="Indent(assertText, indentDepth); 744386" />
<Node Id="25003:[19900..19925).7" Label="assertText.Append('// '); 744387" />
<Node Id="25003:[20112..20144).7" Label="Indent(assertText, indentDepth); 744388" />
<Node Id="25003:[20112..20144).8" Label="Indent(assertText, indentDepth); 744389" />
<Node Id="25003:[20112..20143).3" Label="Indent(assertText, indentDepth) 744390" />
<Node Id="25003:[22454..22470).6" Label="param Indent(StringBuilder sb) 744391" />
<Node Id="25003:[22472..22481).6" Label="param Indent(int count) 744392" />
<Node Id="25003:[22507..22533).31" Label="sb.Append(' ', 4 * count); 744393" />
<Node Id="25003:[22507..22533).34" Label="sb.Append(' ', 4 * count); 744394" />
<Node Id="25003:[20112..20144).9" Label="Indent(assertText, indentDepth); 744395" />
<Node Id="25003:[20170..20195).7" Label="assertText.Append('// '); 744396" />
<Node Id="25003:[912..917).12" Label="_code 744397" />
<Node Id="25003:[950..967).12" Label="_isWarningAsError 744398" />
<Node Id="25003:[1000..1013).12" Label="_isSuppressed 744399" />
<Node Id="25003:[1048..1062).12" Label="_squiggledText 744400" />
<Node Id="25003:[1099..1109).12" Label="_arguments 744401" />
<Node Id="25003:[1151..1165).34" Label="_startPosition 744402" />
<Node Id="25003:[1336..1350).12" Label="_errorCodeType 744403" />
<Node Id="25003:[1460..1479).12" Label="_defaultSeverityOpt 744404" />
<Node Id="25003:[1527..1548).12" Label="_effectiveSeverityOpt 744405" />
<Node Id="25003:[5067..5072).6" Label="_code 744406" />
<Node Id="25003:[5444..5476).11" Label="DiagnosticWithInfo dinfo = null; 744407" />
<Node Id="25003:[7118..7245).31" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 744408" />
<Node Id="25003:[20523..20557).3" Label="var diffDescription = description; 744409" />
<Node Id="25003:[11120..11133).1" Label="return false; 744410" />
<Node Id="25003:[10815..10891).13" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 744411" />
<Node Id="25003:[10907..10975).13" Label="if (_isSuppressed != d._isSuppressed)
                return false; 744412" />
<Node Id="25003:[11164..11464).17" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 744413" />
<Node Id="25003:[11480..11903).17" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 744414" />
<Node Id="25003:[11917..12344).17" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 744415" />
<Node Id="25003:[12436..12535).11" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 744416" />
<Node Id="25003:[12855..12915).16" Label="if (d._arguments == null)
                    return false; 744417" />
<Node Id="25003:[13514..13693).21" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 744418" />
<Node Id="25003:[20764..20834).12" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744419" />
<Node Id="25003:[22308..22323).8" Label="param GetDiagnosticDescription(int indentDepth) 744420" />
<Node Id="25003:[22349..22404).64" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744421" />
<Node Id="25003:[22349..22404).67" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744422" />
<Node Id="25003:[14837..14866).15" Label="var sb = new StringBuilder(); 744423" />
<Node Id="25003:[14882..14907).22" Label="sb.Append('Diagnostic('); 744424" />
<Node Id="25003:[14882..14907).24" Label="sb.Append('Diagnostic('); 744425" />
<Node Id="25003:[14921..15244).22" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 744426" />
<Node Id="25003:[14921..15244).23" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 744427" />
<Node Id="25003:[15100..15131).15" Label="sb.Append(_errorCodeType.Name); 744428" />
<Node Id="25003:[15100..15131).16" Label="sb.Append(_errorCodeType.Name); 744429" />
<Node Id="25003:[15149..15164).22" Label="sb.Append('.'); 744430" />
<Node Id="25003:[15149..15164).24" Label="sb.Append('.'); 744431" />
<Node Id="25003:[15182..15229).36" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744432" />
<Node Id="25003:[15182..15229).40" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744433" />
<Node Id="25003:[15260..15767).22" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 744434" />
<Node Id="25003:[15260..15767).23" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 744435" />
<Node Id="25003:[15320..15717).85" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 744436" />
<Node Id="25003:[15632..15650).22" Label="sb.Append(', \''); 744437" />
<Node Id="25003:[15632..15650).24" Label="sb.Append(', \''); 744438" />
<Node Id="25003:[15672..15698).15" Label="sb.Append(_squiggledText); 744439" />
<Node Id="25003:[15672..15698).16" Label="sb.Append(_squiggledText); 744440" />
<Node Id="25003:[15737..15752).22" Label="sb.Append('''); 744441" />
<Node Id="25003:[15737..15752).24" Label="sb.Append('''); 744442" />
<Node Id="25003:[15783..15883).8" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 744443" />
<Node Id="25003:[15899..15914).22" Label="sb.Append(')'); 744444" />
<Node Id="25003:[15899..15914).24" Label="sb.Append(')'); 744445" />
<Node Id="25003:[15986..16015).22" Label="sb.Append('.WithArguments('); 744446" />
<Node Id="25003:[15986..16015).24" Label="sb.Append('.WithArguments('); 744447" />
<Node Id="25003:[16202..16218).31" Label="sb.Append('\''); 744448" />
<Node Id="25003:[16202..16218).33" Label="sb.Append('\''); 744449" />
<Node Id="25003:[16240..16275).21" Label="sb.Append(argumentStrings.Current); 744450" />
<Node Id="25003:[16240..16275).22" Label="sb.Append(argumentStrings.Current); 744451" />
<Node Id="25003:[16297..16313).31" Label="sb.Append('\''); 744452" />
<Node Id="25003:[16297..16313).33" Label="sb.Append('\''); 744453" />
<Node Id="25003:[16335..16453).41" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 744454" />
<Node Id="25003:[16490..16505).22" Label="sb.Append(')'); 744455" />
<Node Id="25003:[16490..16505).24" Label="sb.Append(')'); 744456" />
<Node Id="25003:[16536..16829).22" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 744457" />
<Node Id="25003:[16536..16829).23" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 744458" />
<Node Id="25003:[16596..16624).7" Label="sb.Append('.WithLocation('); 744459" />
<Node Id="25003:[16596..16624).9" Label="sb.Append('.WithLocation('); 744460" />
<Node Id="25003:[16642..16683).9" Label="sb.Append(_startPosition.Value.Line + 1); 744461" />
<Node Id="25003:[16642..16683).12" Label="sb.Append(_startPosition.Value.Line + 1); 744462" />
<Node Id="25003:[16701..16717).7" Label="sb.Append(', '); 744463" />
<Node Id="25003:[16701..16717).9" Label="sb.Append(', '); 744464" />
<Node Id="25003:[16735..16781).9" Label="sb.Append(_startPosition.Value.Character + 1); 744465" />
<Node Id="25003:[16735..16781).12" Label="sb.Append(_startPosition.Value.Character + 1); 744466" />
<Node Id="25003:[16799..16814).7" Label="sb.Append(')'); 744467" />
<Node Id="25003:[16799..16814).9" Label="sb.Append(')'); 744468" />
<Node Id="25003:[16845..16954).8" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 744469" />
<Node Id="25003:[16970..17144).22" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 744470" />
<Node Id="25003:[16970..17144).23" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 744471" />
<Node Id="25003:[17160..17340).22" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 744472" />
<Node Id="25003:[17160..17340).23" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 744473" />
<Node Id="25003:[17356..17482).29" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 744474" />
<Node Id="25003:[17356..17482).30" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 744475" />
<Node Id="25003:[17498..17519).15" Label="return sb.ToString(); 744476" />
<Node Id="25003:[22349..22404).70" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744477" />
<Node Id="25003:[22349..22404).71" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744478" />
<Node Id="25003:[20764..20834).15" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744479" />
<Node Id="25003:[20852..20923).12" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744480" />
<Node Id="25003:[22308..22323).9" Label="param GetDiagnosticDescription(int indentDepth) 744481" />
<Node Id="25003:[22349..22404).76" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744482" />
<Node Id="25003:[15100..15131).17" Label="sb.Append(_errorCodeType.Name); 744483" />
<Node Id="25003:[15100..15131).18" Label="sb.Append(_errorCodeType.Name); 744484" />
<Node Id="25003:[15149..15164).27" Label="sb.Append('.'); 744485" />
<Node Id="25003:[15182..15229).41" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744486" />
<Node Id="25003:[15182..15229).45" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744487" />
<Node Id="25003:[15632..15650).27" Label="sb.Append(', \''); 744488" />
<Node Id="25003:[15672..15698).17" Label="sb.Append(_squiggledText); 744489" />
<Node Id="25003:[15672..15698).18" Label="sb.Append(_squiggledText); 744490" />
<Node Id="25003:[15737..15752).27" Label="sb.Append('''); 744491" />
<Node Id="25003:[15899..15914).27" Label="sb.Append(')'); 744492" />
<Node Id="25003:[15986..16015).27" Label="sb.Append('.WithArguments('); 744493" />
<Node Id="25003:[16202..16218).36" Label="sb.Append('\''); 744494" />
<Node Id="25003:[16240..16275).24" Label="sb.Append(argumentStrings.Current); 744495" />
<Node Id="25003:[16297..16313).36" Label="sb.Append('\''); 744496" />
<Node Id="25003:[16490..16505).27" Label="sb.Append(')'); 744497" />
<Node Id="25003:[17498..17519).17" Label="return sb.ToString(); 744498" />
<Node Id="25003:[22349..22404).79" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744499" />
<Node Id="25003:[22349..22404).80" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 744500" />
<Node Id="25003:[20852..20923).15" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744501" />
<Node Id="25003:[20952..21034).1" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 744502" />
<Node Id="25003:[20952..21034).2" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 744503" />
<Node Id="25003:[20995..21019).1" Label="assertText.AppendLine(); 744504" />
<Node Id="25003:[21050..21081).1" Label="assertText.AppendLine('Diff:'); 744505" />
<Node Id="25003:[21050..21081).3" Label="assertText.AppendLine('Diff:'); 744506" />
<Node Id="25003:[21095..21192).1" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 744507" />
<Node Id="25003:[21095..21192).2" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 744508" />
<Node Id="25012:[3121..3141).1" Label="new[] { '\r', '\n' } 744509" />
<Node Id="25012:[3129..3133).1" Label="'\r' 744510" />
<Node Id="25012:[3135..3139).1" Label="'\n' 744511" />
<Node Id="25012:[3121..3141).4" Label="new[] { '\r', '\n' } 744512" />
<Node Id="25012:[3121..3141).5" Label="new[] { '\r', '\n' } 744513" />
<Node Id="25012:[3102..3141).1" Label="s_lineSplitChars = new[] { '\r', '\n' } 744514" />
<Node Id="25003:[21095..21192).3" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 744515" />
<Node Id="25003:[21095..21192).4" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 744516" />
<Node Id="25003:[21113..21190).1" Label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 744517" />
<Node Id="25012:[2473..2496).1" Label="param DiffReport(IEnumerable$T$ expected) 744518" />
<Node Id="25012:[2498..2519).1" Label="param DiffReport(IEnumerable$T$ actual) 744519" />
<Node Id="25012:[2521..2537).1" Label="param DiffReport(string separator) 744520" />
<Node Id="25012:[2539..2575).1" Label="param DiffReport(IEqualityComparer$T$ comparer = null) 744521" />
<Node Id="25012:[2577..2608).1" Label="param DiffReport(Func$T, string$ toString = null) 744522" />
<Node Id="25012:[2634..2703).1" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 744523" />
<Node Id="25012:[2634..2703).2" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 744524" />
<Node Id="25012:[2644..2662).1" Label="(comparer != null) 744525" />
<Node Id="25012:[1074..1101).1" Label="EqualityComparer$T$.Default 744526" />
<Node Id="25012:[1063..1102).1" Label="new LCS$T$(EqualityComparer$T$.Default) 744527" />
<Node Id="25012:[1194..1223).1" Label="param LCS(IEqualityComparer$T$ comparer) 744528" />
<Node Id="25012:[1183..1293).1" Label="param LCS(this) 744529" />
<Node Id="25012:[4230..4231).1" Label="1 744530" />
<Node Id="25012:[4217..4231).1" Label="DeleteCost = 1 744531" />
<Node Id="25012:[4277..4278).1" Label="1 744532" />
<Node Id="25012:[4264..4278).1" Label="InsertCost = 1 744533" />
<Node Id="25012:[4324..4325).1" Label="2 744534" />
<Node Id="25012:[4311..4325).1" Label="UpdateCost = 2 744535" />
<Node Id="25012:[3676..10647).1" Label="param LongestCommonSubsequence(this) 744536" />
<Node Id="25012:[1157..1166).1" Label="_comparer 744537" />
<Node Id="25012:[1257..1266).1" Label="_comparer 744538" />
<Node Id="25012:[1053..1102).1" Label="Default = new LCS$T$(EqualityComparer$T$.Default) 744539" />
<Node Id="25012:[2717..2783).1" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 744540" />
<Node Id="25012:[2717..2783).3" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 744541" />
<Node Id="25012:[2799..2869).1" Label="IList$T$ expectedList = expected as IList$T$ ?? new List$T$(expected); 744542" />
<Node Id="25012:[2883..2947).1" Label="IList$T$ actualList = actual as IList$T$ ?? new List$T$(actual); 744543" />
<Node Id="25012:[2963..3048).1" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 744544" />
<Node Id="25012:[2963..3048).2" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 744545" />
<Node Id="25012:[2963..3048).3" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 744546" />
<Node Id="25012:[2963..3048).4" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 744547" />
<Node Id="25012:[2993..3046).1" Label="lcs.CalculateDiff(expectedList, actualList, toString) 744548" />
<Node Id="25012:[1574..1592).1" Label="param CalculateDiff(IList$T$ sequenceA) 744549" />
<Node Id="25012:[1594..1612).1" Label="param CalculateDiff(IList$T$ sequenceB) 744550" />
<Node Id="25012:[1614..1638).1" Label="param CalculateDiff(Func$T, string$ toString) 744551" />
<Node Id="25012:[1533..2415).1" Label="param CalculateDiff(this) 744552" />
<Node Id="25012:[1672..2400).1" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 744553" />
<Node Id="25012:[1672..2400).2" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 744554" />
<Node Id="25012:[1672..2400).3" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 744555" />
<Node Id="25012:[1672..2400).4" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 744556" />
<Node Id="25012:[1693..1757).1" Label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 744557" />
<Node Id="25012:[5394..5413).1" Label="param GetEdits(TSequence sequenceA) 744558" />
<Node Id="25012:[5415..5426).1" Label="param GetEdits(int lengthA) 744559" />
<Node Id="25012:[5428..5447).1" Label="param GetEdits(TSequence sequenceB) 744560" />
<Node Id="25012:[5449..5460).1" Label="param GetEdits(int lengthB) 744561" />
<Node Id="25012:[5357..6686).1" Label="param GetEdits(this) 744562" />
<Node Id="25012:[5494..5563).1" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 744563" />
<Node Id="25012:[5494..5563).2" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 744564" />
<Node Id="25012:[5494..5563).3" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 744565" />
<Node Id="25012:[5494..5563).4" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 744566" />
<Node Id="25012:[5505..5562).1" Label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 744567" />
<Node Id="25012:[9402..9421).1" Label="param ComputeCostMatrix(TSequence sequenceA) 744568" />
<Node Id="25012:[9423..9434).1" Label="param ComputeCostMatrix(int lengthA) 744569" />
<Node Id="25012:[9436..9455).1" Label="param ComputeCostMatrix(TSequence sequenceB) 744570" />
<Node Id="25012:[9457..9468).1" Label="param ComputeCostMatrix(int lengthB) 744571" />
<Node Id="25012:[9369..10636).1" Label="param ComputeCostMatrix(this) 744572" />
<Node Id="25012:[9502..9523).1" Label="var la = lengthA + 1; 744573" />
<Node Id="25012:[9502..9523).2" Label="var la = lengthA + 1; 744574" />
<Node Id="25012:[9541..9562).1" Label="var lb = lengthB + 1; 744575" />
<Node Id="25012:[9541..9562).2" Label="var lb = lengthB + 1; 744576" />
<Node Id="25012:[9740..9764).1" Label="var d = new int[la, lb]; 744577" />
<Node Id="25012:[9784..9796).1" Label="d[0, 0] = 0; 744578" />
<Node Id="25012:[9784..9791).1" Label="d[0, 0] 744579" />
<Node Id="25012:[9814..9943).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 744580" />
<Node Id="25012:[9814..9943).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 744581" />
<Node Id="25012:[9889..9924).1" Label="d[i, 0] = d[i - 1, 0] + DeleteCost; 744582" />
<Node Id="25012:[9889..9924).5" Label="d[i, 0] = d[i - 1, 0] + DeleteCost; 744583" />
<Node Id="25012:[9889..9896).1" Label="d[i, 0] 744584" />
<Node Id="25012:[9963..10092).1" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 744585" />
<Node Id="25012:[9963..10092).3" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 744586" />
<Node Id="25012:[10038..10073).1" Label="d[0, j] = d[0, j - 1] + InsertCost; 744587" />
<Node Id="25012:[10038..10073).5" Label="d[0, j] = d[0, j - 1] + InsertCost; 744588" />
<Node Id="25012:[10038..10045).1" Label="d[0, j] 744589" />
<Node Id="25012:[10112..10592).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 744590" />
<Node Id="25012:[10112..10592).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 744591" />
<Node Id="25012:[10187..10573).1" Label="for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    } 744592" />
<Node Id="25012:[10187..10573).3" Label="for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    } 744593" />
<Node Id="25012:[10270..10363).1" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 744594" />
<Node Id="25012:[10270..10363).5" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 744595" />
<Node Id="25012:[10270..10363).6" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 744596" />
<Node Id="25012:[10270..10363).10" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 744597" />
<Node Id="25012:[10298..10344).1" Label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 744598" />
<Node Id="25012:[1344..1362).1" Label="param ItemsEqual(IList$T$ sequenceA) 744599" />
<Node Id="25012:[1364..1374).1" Label="param ItemsEqual(int indexA) 744600" />
<Node Id="25012:[1376..1394).1" Label="param ItemsEqual(IList$T$ sequenceB) 744601" />
<Node Id="25012:[1396..1406).1" Label="param ItemsEqual(int indexB) 744602" />
<Node Id="25012:[1309..1517).1" Label="param ItemsEqual(this) 744603" />
<Node Id="25012:[1440..1502).1" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 744604" />
<Node Id="25012:[1440..1502).3" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 744605" />
<Node Id="25012:[1440..1502).5" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 744606" />
<Node Id="25012:[10270..10363).17" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 744607" />
<Node Id="25012:[10389..10423).1" Label="int m2 = d[i - 1, j] + DeleteCost; 744608" />
<Node Id="25012:[10389..10423).3" Label="int m2 = d[i - 1, j] + DeleteCost; 744609" />
<Node Id="25012:[10449..10483).1" Label="int m3 = d[i, j - 1] + InsertCost; 744610" />
<Node Id="25012:[10449..10483).3" Label="int m3 = d[i, j - 1] + InsertCost; 744611" />
<Node Id="25012:[10509..10550).1" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 744612" />
<Node Id="25012:[10509..10550).2" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 744613" />
<Node Id="25012:[10509..10550).3" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 744614" />
<Node Id="25012:[10509..10550).5" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 744615" />
<Node Id="25012:[10509..10550).6" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 744616" />
<Node Id="25012:[10509..10516).1" Label="d[i, j] 744617" />
<Node Id="25012:[10612..10621).1" Label="return d; 744618" />
<Node Id="25012:[5581..5597).1" Label="int i = lengthA; 744619" />
<Node Id="25012:[5615..5631).1" Label="int j = lengthB; 744620" />
<Node Id="25012:[5651..6341).1" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 744621" />
<Node Id="25012:[5651..6341).2" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 744622" />
<Node Id="25012:[5651..6341).4" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 744623" />
<Node Id="25012:[5651..6341).5" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 744624" />
<Node Id="25012:[5716..6322).1" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 744625" />
<Node Id="25012:[5716..6322).2" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 744626" />
<Node Id="25012:[5716..6322).4" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 744627" />
<Node Id="25012:[5931..6322).1" Label="if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 744628" />
<Node Id="25012:[5931..6322).2" Label="if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 744629" />
<Node Id="25012:[6194..6198).1" Label="i--; 744630" />
<Node Id="25012:[6224..6228).1" Label="j--; 744631" />
<Node Id="25012:[6254..6299).1" Label="yield return new Edit(EditKind.Update, i, j); 744632" />
<Node Id="25012:[6254..6299).2" Label="yield return new Edit(EditKind.Update, i, j); 744633" />
<Node Id="25012:[6254..6299).3" Label="yield return new Edit(EditKind.Update, i, j); 744634" />
<Node Id="25012:[6254..6299).4" Label="yield return new Edit(EditKind.Update, i, j); 744635" />
<Node Id="25012:[6267..6298).1" Label="new Edit(EditKind.Update, i, j) 744636" />
<Node Id="25012:[3967..3980).1" Label="param Edit(EditKind kind) 744637" />
<Node Id="25012:[3982..3992).1" Label="param Edit(int indexA) 744638" />
<Node Id="25012:[3994..4004).1" Label="param Edit(int indexB) 744639" />
<Node Id="25012:[3953..4168).1" Label="param Edit(this) 744640" />
<Node Id="25012:[4046..4055).1" Label="this.Kind 744641" />
<Node Id="25012:[4085..4096).1" Label="this.IndexA 744642" />
<Node Id="25012:[4128..4139).1" Label="this.IndexB 744643" />
<Node Id="25012:[5651..6341).11" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 744644" />
<Node Id="25012:[6254..6299).7" Label="yield return new Edit(EditKind.Update, i, j); 744645" />
<Node Id="25012:[6254..6299).8" Label="yield return new Edit(EditKind.Update, i, j); 744646" />
<Node Id="25012:[6267..6298).2" Label="new Edit(EditKind.Update, i, j) 744647" />
<Node Id="25012:[3967..3980).2" Label="param Edit(EditKind kind) 744648" />
<Node Id="25012:[3982..3992).2" Label="param Edit(int indexA) 744649" />
<Node Id="25012:[3994..4004).2" Label="param Edit(int indexB) 744650" />
<Node Id="25012:[3953..4168).2" Label="param Edit(this) 744651" />
<Node Id="25012:[4046..4055).2" Label="this.Kind 744652" />
<Node Id="25012:[4085..4096).2" Label="this.IndexA 744653" />
<Node Id="25012:[4128..4139).2" Label="this.IndexB 744654" />
<Node Id="25012:[6361..6506).1" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 744655" />
<Node Id="25012:[6361..6506).2" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 744656" />
<Node Id="25012:[6526..6671).1" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 744657" />
<Node Id="25012:[6526..6671).2" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 744658" />
<Node Id="25012:[1672..2400).7" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 744659" />
<Node Id="25012:[1809..2381).1" Label="switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    } 744660" />
<Node Id="25012:[2267..2322).1" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 744661" />
<Node Id="25012:[2267..2322).3" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 744662" />
<Node Id="25012:[2267..2322).5" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 744663" />
<Node Id="25012:[2963..3048).7" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 744664" />
<Node Id="25003:[21095..21192).10" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 744665" />
<Node Id="25003:[21208..21226).1" Label="actualText.Free(); 744666" />
<Node Id="25003:[21240..21260).1" Label="expectedText.Free(); 744667" />
<Node Id="25003:[21276..21305).1" Label="return assertText.ToString(); 744668" />
<Node Id="25002:[2401..2451).3" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 744669" />
<Node Id="25002:[4446..4475).3" Label="diagnostics.Verify(expected); 744670" />
<Node Id="25002:[4489..4523).1" Label="VerifyAssemblyIds(c, diagnostics); 744671" />
<Node Id="25002:[4489..4523).2" Label="VerifyAssemblyIds(c, diagnostics); 744672" />
<Node Id="25002:[4489..4522).1" Label="VerifyAssemblyIds(c, diagnostics) 744673" />
<Node Id="25002:[4637..4651).1" Label="param VerifyAssemblyIds(TCompilation c) 744674" />
<Node Id="25002:[4653..4691).1" Label="param VerifyAssemblyIds(ImmutableArray$Diagnostic$ diagnostics) 744675" />
<Node Id="25002:[4750..5836).1" Label="foreach (var diagnostic in diagnostics)
            {
                // If this is a diagnostic about a missing assembly, make sure that we can get back
                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about
                // a missing assembly, make sure we get no results back.
                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                }
            } 744676" />
<Node Id="25002:[5097..5821).1" Label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                } 744677" />
<Node Id="25002:[5097..5821).2" Label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                } 744678" />
<Node Id="25002:[5675..5741).1" Label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 744679" />
<Node Id="25002:[5763..5802).1" Label="CustomAssert.True(assemblyIds.IsEmpty); 744680" />
<Node Id="25002:[5763..5802).3" Label="CustomAssert.True(assemblyIds.IsEmpty); 744681" />
<Node Id="25002:[4489..4523).3" Label="VerifyAssemblyIds(c, diagnostics); 744682" />
<Node Id="25002:[4539..4548).1" Label="return c; 744683" />
</Nodes>
<Links>
<Link Source="25014:[390..448).1" Target="EXTERNAL" />
<Link Source="25014:[390..448).1" Target="25014:[387..448).1" />
<Link Source="28001:[588..156578).1" Target="25014:[387..448).1" />
<Link Source="21002:[772..793).1" Target="21002:[790..793).1" />
<Link Source="21002:[825..848).1" Target="21002:[845..848).1" />
<Link Source="21002:[3098..25375).1" Target="21002:[3243..25375).1" />
<Link Source="21002:[678..25421).1" Target="28001:[588..156578).1" />
<Link Source="21003:[1308..2835).1" Target="21003:[1338..2835).1" />
<Link Source="21003:[2871..3440).1" Target="21003:[2908..3440).1" />
<Link Source="21003:[3476..3915).1" Target="21003:[3516..3915).1" />
<Link Source="21003:[4192..4448).1" Target="21003:[4223..4448).1" />
<Link Source="21003:[4484..4746).1" Target="21003:[4518..4746).1" />
<Link Source="21003:[4782..5071).1" Target="21003:[4813..5071).1" />
<Link Source="21003:[5107..5397).1" Target="21003:[5142..5397).1" />
<Link Source="21003:[5433..5718).1" Target="21003:[5462..5718).1" />
<Link Source="21003:[5754..6038).1" Target="21003:[5787..6038).1" />
<Link Source="21003:[6074..6460).1" Target="21003:[6109..6460).1" />
<Link Source="21003:[6496..6920).1" Target="21003:[6535..6920).1" />
<Link Source="21003:[6956..7250).1" Target="21003:[6993..7250).1" />
<Link Source="21003:[7286..7557).1" Target="21003:[7321..7557).1" />
<Link Source="21003:[7593..7980).1" Target="21003:[7631..7980).1" />
<Link Source="21003:[8016..8155).1" Target="21003:[8047..8155).1" />
<Link Source="21003:[8191..8359).1" Target="21003:[8220..8359).1" />
<Link Source="21003:[8395..20279).1" Target="21003:[8415..20279).1" />
<Link Source="21003:[20315..20617).1" Target="21003:[20353..20617).1" />
<Link Source="21003:[20653..21473).1" Target="21003:[20689..21473).1" />
<Link Source="25004:[2227..2317).1" Target="EXTERNAL" />
<Link Source="25004:[2332..2368).1" Target="EXTERNAL" />
<Link Source="25004:[2183..2369).1" Target="25004:[2227..2317).1" />
<Link Source="25004:[2183..2369).1" Target="25004:[2332..2368).1" />
<Link Source="25004:[2183..2369).1" Target="EXTERNAL" />
<Link Source="25004:[2155..2369).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2602..2696).1" Target="EXTERNAL" />
<Link Source="25004:[2711..2747).1" Target="EXTERNAL" />
<Link Source="25004:[2558..2748).1" Target="25004:[2602..2696).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2711..2747).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2531..2748).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[2914..2947).1" Target="EXTERNAL" />
<Link Source="25004:[3094..3171).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[3094..3171).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[2894..3172).1" Target="25004:[3077..3172).1" />
<Link Source="25004:[5182..5218).1" Target="EXTERNAL" />
<Link Source="25004:[3446..5219).1" Target="25004:[3490..5167).1" />
<Link Source="25004:[3446..5219).1" Target="25004:[5182..5218).1" />
<Link Source="25004:[3432..5219).1" Target="25004:[3446..5219).1" />
<Link Source="25004:[5576..5645).1" Target="EXTERNAL" />
<Link Source="25004:[5660..5696).1" Target="EXTERNAL" />
<Link Source="25004:[5532..5697).1" Target="25004:[5576..5645).1" />
<Link Source="25004:[5532..5697).1" Target="25004:[5660..5696).1" />
<Link Source="25004:[5532..5697).1" Target="EXTERNAL" />
<Link Source="25004:[5508..5697).1" Target="25004:[5532..5697).1" />
<Link Source="25004:[6321..6439).1" Target="EXTERNAL" />
<Link Source="25004:[6458..6494).1" Target="EXTERNAL" />
<Link Source="25004:[6275..6495).1" Target="25004:[6321..6439).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[6458..6494).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[6244..6495).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6714..6838).1" Target="EXTERNAL" />
<Link Source="25004:[6853..6889).1" Target="EXTERNAL" />
<Link Source="25004:[6672..6890).1" Target="25004:[6714..6838).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6853..6889).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6637..6890).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7130..7249).1" Target="EXTERNAL" />
<Link Source="25004:[7264..7300).1" Target="EXTERNAL" />
<Link Source="25004:[7088..7301).1" Target="25004:[7130..7249).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[7264..7300).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7066..7301).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[7532..7667).1" Target="EXTERNAL" />
<Link Source="25004:[7682..7718).1" Target="EXTERNAL" />
<Link Source="25004:[7490..7719).1" Target="25004:[7532..7667).1" />
<Link Source="25004:[7490..7719).1" Target="25004:[7682..7718).1" />
<Link Source="25004:[7490..7719).1" Target="EXTERNAL" />
<Link Source="25004:[7464..7719).1" Target="25004:[7490..7719).1" />
<Link Source="25004:[7940..8064).1" Target="EXTERNAL" />
<Link Source="25004:[8079..8115).1" Target="EXTERNAL" />
<Link Source="25004:[7898..8116).1" Target="25004:[7940..8064).1" />
<Link Source="25004:[7898..8116).1" Target="25004:[8079..8115).1" />
<Link Source="25004:[7898..8116).1" Target="EXTERNAL" />
<Link Source="25004:[7877..8116).1" Target="25004:[7898..8116).1" />
<Link Source="25004:[8324..8442).1" Target="EXTERNAL" />
<Link Source="25004:[8457..8493).1" Target="EXTERNAL" />
<Link Source="25004:[8282..8494).1" Target="25004:[8324..8442).1" />
<Link Source="25004:[8282..8494).1" Target="25004:[8457..8493).1" />
<Link Source="25004:[8282..8494).1" Target="EXTERNAL" />
<Link Source="25004:[8264..8494).1" Target="25004:[8282..8494).1" />
<Link Source="25004:[8694..8807).1" Target="EXTERNAL" />
<Link Source="25004:[8822..8858).1" Target="EXTERNAL" />
<Link Source="25004:[8652..8859).1" Target="25004:[8694..8807).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[8822..8858).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[8636..8859).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[9063..9214).1" Target="EXTERNAL" />
<Link Source="25004:[9229..9265).1" Target="EXTERNAL" />
<Link Source="25004:[9021..9266).1" Target="25004:[9063..9214).1" />
<Link Source="25004:[9021..9266).1" Target="25004:[9229..9265).1" />
<Link Source="25004:[9021..9266).1" Target="EXTERNAL" />
<Link Source="25004:[8997..9266).1" Target="25004:[9021..9266).1" />
<Link Source="25004:[10404..10440).1" Target="EXTERNAL" />
<Link Source="25004:[9436..10441).1" Target="25004:[9478..10389).1" />
<Link Source="25004:[9436..10441).1" Target="25004:[10404..10440).1" />
<Link Source="25004:[9420..10441).1" Target="25004:[9436..10441).1" />
<Link Source="25004:[10811..10967).1" Target="EXTERNAL" />
<Link Source="25004:[10982..11018).1" Target="EXTERNAL" />
<Link Source="25004:[10769..11019).1" Target="25004:[10811..10967).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[10982..11018).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[10749..11019).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[11415..11589).1" Target="EXTERNAL" />
<Link Source="25004:[11604..11640).1" Target="EXTERNAL" />
<Link Source="25004:[11373..11641).1" Target="25004:[11415..11589).1" />
<Link Source="25004:[11373..11641).1" Target="25004:[11604..11640).1" />
<Link Source="25004:[11373..11641).1" Target="EXTERNAL" />
<Link Source="25004:[11345..11641).1" Target="25004:[11373..11641).1" />
<Link Source="25004:[12432..12560).1" Target="EXTERNAL" />
<Link Source="25004:[12575..12611).1" Target="EXTERNAL" />
<Link Source="25004:[12390..12612).1" Target="25004:[12432..12560).1" />
<Link Source="25004:[12390..12612).1" Target="25004:[12575..12611).1" />
<Link Source="25004:[12390..12612).1" Target="EXTERNAL" />
<Link Source="25004:[12369..12612).1" Target="25004:[12390..12612).1" />
<Link Source="25004:[12815..12944).1" Target="EXTERNAL" />
<Link Source="25004:[12959..12995).1" Target="EXTERNAL" />
<Link Source="25004:[12773..12996).1" Target="25004:[12815..12944).1" />
<Link Source="25004:[12773..12996).1" Target="25004:[12959..12995).1" />
<Link Source="25004:[12773..12996).1" Target="EXTERNAL" />
<Link Source="25004:[12760..12996).1" Target="25004:[12773..12996).1" />
<Link Source="25004:[13204..13343).1" Target="EXTERNAL" />
<Link Source="25004:[13358..13394).1" Target="EXTERNAL" />
<Link Source="25004:[13162..13395).1" Target="25004:[13204..13343).1" />
<Link Source="25004:[13162..13395).1" Target="25004:[13358..13394).1" />
<Link Source="25004:[13162..13395).1" Target="EXTERNAL" />
<Link Source="25004:[13138..13395).1" Target="25004:[13162..13395).1" />
<Link Source="25004:[13621..13796).1" Target="EXTERNAL" />
<Link Source="25004:[13811..13847).1" Target="EXTERNAL" />
<Link Source="25004:[13579..13848).1" Target="25004:[13621..13796).1" />
<Link Source="25004:[13579..13848).1" Target="25004:[13811..13847).1" />
<Link Source="25004:[13579..13848).1" Target="EXTERNAL" />
<Link Source="25004:[13551..13848).1" Target="25004:[13579..13848).1" />
<Link Source="25004:[14066..14175).1" Target="EXTERNAL" />
<Link Source="25004:[14190..14226).1" Target="EXTERNAL" />
<Link Source="25004:[14024..14227).1" Target="25004:[14066..14175).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[14190..14226).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[14010..14227).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14421..14531).1" Target="EXTERNAL" />
<Link Source="25004:[14546..14582).1" Target="EXTERNAL" />
<Link Source="25004:[14379..14583).1" Target="25004:[14421..14531).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14546..14582).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14361..14583).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14798..14913).1" Target="EXTERNAL" />
<Link Source="25004:[14928..14964).1" Target="EXTERNAL" />
<Link Source="25004:[14756..14965).1" Target="25004:[14798..14913).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14928..14964).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14725..14965).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15193..15301).1" Target="EXTERNAL" />
<Link Source="25004:[15316..15352).1" Target="EXTERNAL" />
<Link Source="25004:[15151..15353).1" Target="25004:[15193..15301).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[15316..15352).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15133..15353).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[15554..15670).1" Target="EXTERNAL" />
<Link Source="25004:[15685..15721).1" Target="EXTERNAL" />
<Link Source="25004:[15512..15722).1" Target="25004:[15554..15670).1" />
<Link Source="25004:[15512..15722).1" Target="25004:[15685..15721).1" />
<Link Source="25004:[15512..15722).1" Target="EXTERNAL" />
<Link Source="25004:[15495..15722).1" Target="25004:[15512..15722).1" />
<Link Source="25004:[15925..16050).1" Target="EXTERNAL" />
<Link Source="25004:[16065..16101).1" Target="EXTERNAL" />
<Link Source="25004:[15883..16102).1" Target="25004:[15925..16050).1" />
<Link Source="25004:[15883..16102).1" Target="25004:[16065..16101).1" />
<Link Source="25004:[15883..16102).1" Target="EXTERNAL" />
<Link Source="25004:[15862..16102).1" Target="25004:[15883..16102).1" />
<Link Source="25004:[16314..16416).1" Target="EXTERNAL" />
<Link Source="25004:[16431..16467).1" Target="EXTERNAL" />
<Link Source="25004:[16272..16468).1" Target="25004:[16314..16416).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[16431..16467).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[16250..16468).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[16687..16800).1" Target="EXTERNAL" />
<Link Source="25004:[16815..16851).1" Target="EXTERNAL" />
<Link Source="25004:[16645..16852).1" Target="25004:[16687..16800).1" />
<Link Source="25004:[16645..16852).1" Target="25004:[16815..16851).1" />
<Link Source="25004:[16645..16852).1" Target="EXTERNAL" />
<Link Source="25004:[16618..16852).1" Target="25004:[16645..16852).1" />
<Link Source="25004:[17083..17200).1" Target="EXTERNAL" />
<Link Source="25004:[17215..17251).1" Target="EXTERNAL" />
<Link Source="25004:[17041..17252).1" Target="25004:[17083..17200).1" />
<Link Source="25004:[17041..17252).1" Target="25004:[17215..17251).1" />
<Link Source="25004:[17041..17252).1" Target="EXTERNAL" />
<Link Source="25004:[17012..17252).1" Target="25004:[17041..17252).1" />
<Link Source="25004:[17497..17625).1" Target="EXTERNAL" />
<Link Source="25004:[17640..17676).1" Target="EXTERNAL" />
<Link Source="25004:[17455..17677).1" Target="25004:[17497..17625).1" />
<Link Source="25004:[17455..17677).1" Target="25004:[17640..17676).1" />
<Link Source="25004:[17455..17677).1" Target="EXTERNAL" />
<Link Source="25004:[17421..17677).1" Target="25004:[17455..17677).1" />
<Link Source="25004:[17911..18059).1" Target="EXTERNAL" />
<Link Source="25004:[18074..18110).1" Target="EXTERNAL" />
<Link Source="25004:[17869..18111).1" Target="25004:[17911..18059).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[18074..18110).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[17850..18111).1" Target="25004:[17869..18111).1" />
<Link Source="25004:[18321..18481).1" Target="EXTERNAL" />
<Link Source="25004:[18496..18532).1" Target="EXTERNAL" />
<Link Source="25004:[18279..18533).1" Target="25004:[18321..18481).1" />
<Link Source="25004:[18279..18533).1" Target="25004:[18496..18532).1" />
<Link Source="25004:[18279..18533).1" Target="EXTERNAL" />
<Link Source="25004:[18255..18533).1" Target="25004:[18279..18533).1" />
<Link Source="25004:[18754..18880).1" Target="EXTERNAL" />
<Link Source="25004:[18895..18931).1" Target="EXTERNAL" />
<Link Source="25004:[18712..18932).1" Target="25004:[18754..18880).1" />
<Link Source="25004:[18712..18932).1" Target="25004:[18895..18931).1" />
<Link Source="25004:[18712..18932).1" Target="EXTERNAL" />
<Link Source="25004:[18687..18932).1" Target="25004:[18712..18932).1" />
<Link Source="25004:[19120..19147).1" Target="25004:[19130..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19120..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19094..19148).1" />
<Link Source="25004:[19081..19148).1" Target="25004:[19094..19148).5" />
<Link Source="25004:[10673..10688).1" Target="EXTERNAL" />
<Link Source="25004:[10673..10688).1" Target="21003:[51329..51357).1" />
<Link Source="21003:[51307..51358).1" Target="25004:[10673..10688).1" />
<Link Source="21003:[51307..51358).1" Target="EXTERNAL" />
<Link Source="21003:[51292..51358).1" Target="21003:[51307..51358).1" />
<Link Source="21003:[56524..56550).1" Target="21003:[56538..56550).1" />
<Link Source="21003:[56584..56609).1" Target="21003:[56596..56609).1" />
<Link Source="21003:[92381..99056).1" Target="21003:[92394..99056).1" />
<Link Source="21003:[101743..102290).1" Target="21003:[101764..102290).1" />
<Link Source="21003:[1215..102298).1" Target="21002:[678..25421).1" />
<Link Source="25015:[917..26825).1" Target="21003:[1215..102298).1" />
<Link Source="25004:[926..968).1" Target="25015:[917..26825).1" />
<Link Source="25004:[908..913).1" Target="25004:[926..968).1" />
<Link Source="25004:[908..913).1" Target="25015:[917..26825).1" />
<Link Source="25014:[387..448).372" Target="25014:[387..448).1" />
<Link Source="25014:[387..448).372" Target="25014:[390..448).1" />
<Link Source="25014:[387..448).372" Target="25004:[908..913).1" />
<Link Source="28001:[57220..59761).1" Target="25014:[387..448).1" />
<Link Source="28001:[57393..58688).1" Target="25014:[387..448).1" />
<Link Source="28001:[57393..58688).5" Target="EXTERNAL" />
<Link Source="28001:[57393..58688).5" Target="25014:[387..448).1" />
<Link Source="28001:[57654..57705).1" Target="25014:[387..448).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[57393..58688).5" />
<Link Source="21004:[2251..2264).1" Target="28001:[57654..57705).1" />
<Link Source="21004:[2290..2296).1" Target="21004:[2251..2264).1" />
<Link Source="21004:[2290..2296).1" Target="28001:[57654..57705).1" />
<Link Source="21004:[2269..2297).1" Target="28001:[57654..57705).1" />
<Link Source="21004:[839..851).1" Target="21004:[2290..2296).1" />
<Link Source="21004:[839..851).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[814..902).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[877..882).1" Target="21004:[839..851).1" />
<Link Source="21004:[877..882).1" Target="21004:[814..902).1" />
<Link Source="21004:[877..882).1" Target="21004:[2269..2297).1" />
<Link Source="28001:[57393..58688).6" Target="21004:[2269..2297).1" />
<Link Source="28001:[57393..58688).6" Target="25014:[387..448).1" />
<Link Source="21003:[44736..44759).1" Target="21004:[877..882).1" />
<Link Source="21003:[44736..44759).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[44774..44822).1" Target="21004:[877..882).1" />
<Link Source="21003:[44774..44822).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[44837..44876).1" Target="21004:[877..882).1" />
<Link Source="21003:[44837..44876).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[44891..44929).1" Target="21004:[877..882).1" />
<Link Source="21003:[44891..44929).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[44944..45002).1" Target="21004:[877..882).1" />
<Link Source="21003:[44944..45002).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45017..45041).1" Target="21004:[877..882).1" />
<Link Source="21003:[45017..45041).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45056..45082).1" Target="21004:[877..882).1" />
<Link Source="21003:[45056..45082).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45097..45128).1" Target="21004:[877..882).1" />
<Link Source="21003:[45097..45128).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45130..45300).1" Target="21004:[877..882).1" />
<Link Source="21003:[45130..45300).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45156..45162).1" Target="21003:[44736..44759).1" />
<Link Source="21003:[45156..45162).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45198..45213).1" Target="21003:[44944..45002).1" />
<Link Source="21003:[45198..45213).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45215..45225).1" Target="21003:[44774..44822).1" />
<Link Source="21003:[45215..45225).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45164..45226).1" Target="28001:[57393..58688).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45198..45213).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45215..45225).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9697..9732).1" Target="25005:[9600..9618).1" />
<Link Source="25005:[9697..9732).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9714..9731).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9697..9732).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[7569..7600).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[8889..8907).1" Target="25005:[7605..9525).1" />
<Link Source="25005:[6208..6241).1" Target="EXTERNAL" />
<Link Source="25005:[6208..6241).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[6270..6298).1" Target="25005:[6208..6241).1" />
<Link Source="25005:[4543..4693).1" Target="25005:[6270..6298).1" />
<Link Source="25005:[4648..4670).1" Target="25005:[6270..6298).1" />
<Link Source="25004:[12011..12051).1" Target="EXTERNAL" />
<Link Source="25004:[12011..12051).1" Target="25005:[4648..4670).1" />
<Link Source="25005:[4543..4693).7" Target="25004:[12011..12051).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[4543..4693).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[6270..6298).1" />
<Link Source="25005:[6208..6298).1" Target="25005:[4543..4693).7" />
<Link Source="25005:[6208..6298).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[9746..9845).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9620..9671).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9746..9845).1" />
<Link Source="25005:[9746..9845).2" Target="21003:[45164..45226).1" />
<Link Source="25005:[9861..9923).1" Target="25005:[6208..6298).1" />
<Link Source="25005:[9861..9923).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9861..9923).2" Target="25005:[9620..9671).1" />
<Link Source="25005:[9861..9923).2" Target="21003:[45164..45226).1" />
<Link Source="25005:[9861..9922).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[10413..11177).1" Target="25005:[9861..9923).1" />
<Link Source="25005:[10413..11177).1" Target="25005:[9861..9922).1" />
<Link Source="25005:[10413..11177).2" Target="25005:[9861..9923).2" />
<Link Source="25005:[10413..11177).2" Target="25005:[9861..9922).1" />
<Link Source="25005:[10560..10645).1" Target="25005:[10413..11177).1" />
<Link Source="25005:[10560..10645).1" Target="25005:[9861..9922).1" />
<Link Source="25005:[10594..10609).1" Target="25005:[9861..9922).1" />
<Link Source="25005:[11193..11534).1" Target="25005:[10560..10645).1" />
<Link Source="25005:[11193..11534).1" Target="25005:[10594..10609).1" />
<Link Source="25005:[11288..11519).1" Target="25005:[11193..11534).1" />
<Link Source="25005:[11288..11519).1" Target="25005:[10594..10609).1" />
<Link Source="25005:[11349..11371).1" Target="25005:[11288..11519).1" />
<Link Source="25005:[11360..11370).1" Target="25005:[11288..11519).1" />
<Link Source="25005:[11550..12243).1" Target="25005:[11349..11371).1" />
<Link Source="25005:[11550..12243).1" Target="25005:[11360..11370).1" />
<Link Source="25005:[11618..12196).1" Target="25005:[11550..12243).1" />
<Link Source="25005:[11618..12196).1" Target="25005:[11360..11370).1" />
<Link Source="25005:[11827..11882).1" Target="25005:[11618..12196).1" />
<Link Source="25005:[11908..11930).1" Target="25005:[11827..11882).1" />
<Link Source="25005:[11908..11930).1" Target="25005:[11618..12196).1" />
<Link Source="25005:[11393..11500).1" Target="25005:[11288..11519).1" />
<Link Source="25005:[11393..11500).2" Target="25005:[11908..11930).1" />
<Link Source="25005:[11393..11500).2" Target="25005:[11393..11500).1" />
<Link Source="25005:[11393..11500).2" Target="25005:[11288..11519).1" />
<Link Source="25005:[11459..11477).1" Target="25005:[11393..11500).2" />
<Link Source="25005:[11459..11477).2" Target="25005:[11908..11930).1" />
<Link Source="25005:[11459..11477).2" Target="25005:[11393..11500).2" />
<Link Source="25005:[11908..11930).2" Target="25005:[11827..11882).1" />
<Link Source="25005:[11393..11500).4" Target="25005:[11827..11882).1" />
<Link Source="25005:[11393..11500).5" Target="25005:[11908..11930).2" />
<Link Source="25005:[11393..11500).5" Target="25005:[11393..11500).4" />
<Link Source="25005:[11393..11500).5" Target="25005:[11827..11882).1" />
<Link Source="25005:[11459..11477).3" Target="25005:[11908..11930).2" />
<Link Source="25005:[11459..11477).3" Target="25005:[11393..11500).5" />
<Link Source="25005:[11393..11500).10" Target="25005:[11908..11930).2" />
<Link Source="25005:[11459..11477).5" Target="25005:[11908..11930).2" />
<Link Source="25005:[11459..11477).5" Target="25005:[11393..11500).10" />
<Link Source="25005:[10560..10645).4" Target="EXTERNAL" />
<Link Source="25005:[10560..10645).4" Target="25005:[9861..9922).1" />
<Link Source="25005:[10663..11162).1" Target="25005:[10413..11177).2" />
<Link Source="25005:[10663..11162).1" Target="25005:[9861..9922).1" />
<Link Source="25005:[10731..10890).1" Target="25005:[10663..11162).1" />
<Link Source="25005:[10731..10890).2" Target="25005:[10413..11177).1" />
<Link Source="25005:[10731..10890).2" Target="25005:[10731..10890).1" />
<Link Source="25005:[10731..10890).2" Target="21004:[877..882).1" />
<Link Source="25005:[10731..10890).2" Target="25005:[4543..4693).7" />
<Link Source="25005:[10731..10890).2" Target="25005:[11908..11930).2" />
<Link Source="25005:[10731..10890).2" Target="25005:[10663..11162).1" />
<Link Source="25005:[10914..10936).1" Target="25005:[10663..11162).1" />
<Link Source="25005:[10925..10935).1" Target="25005:[10663..11162).1" />
<Link Source="25005:[11550..12243).6" Target="25005:[10914..10936).1" />
<Link Source="25005:[11550..12243).6" Target="25005:[10925..10935).1" />
<Link Source="25005:[11618..12196).36" Target="25005:[11550..12243).6" />
<Link Source="25005:[11618..12196).36" Target="25005:[10925..10935).1" />
<Link Source="25005:[11618..12196).38" Target="25005:[11618..12196).36" />
<Link Source="25005:[11618..12196).38" Target="25005:[10731..10890).2" />
<Link Source="25005:[11618..12196).38" Target="25005:[10925..10935).1" />
<Link Source="25005:[10958..11143).1" Target="25005:[10663..11162).1" />
<Link Source="25005:[10958..11143).2" Target="25005:[11618..12196).38" />
<Link Source="25005:[10958..11143).2" Target="25005:[10958..11143).1" />
<Link Source="25005:[10958..11143).2" Target="25005:[10663..11162).1" />
<Link Source="25005:[10958..11143).3" Target="25005:[11618..12196).38" />
<Link Source="25005:[10958..11143).3" Target="25005:[10663..11162).1" />
<Link Source="25005:[10958..11143).4" Target="25005:[11459..11477).1" />
<Link Source="25005:[10958..11143).4" Target="25005:[10958..11143).3" />
<Link Source="25005:[10958..11143).4" Target="25005:[11459..11477).2" />
<Link Source="25005:[10958..11143).4" Target="25005:[11459..11477).3" />
<Link Source="25005:[10958..11143).4" Target="25005:[11459..11477).5" />
<Link Source="25005:[10958..11143).4" Target="EXTERNAL" />
<Link Source="25005:[10958..11143).4" Target="25005:[10663..11162).1" />
<Link Source="25005:[9861..9923).3" Target="21003:[45164..45226).1" />
<Link Source="25005:[9937..9986).1" Target="25005:[9620..9671).1" />
<Link Source="25005:[9937..9986).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9937..9986).2" Target="25005:[6208..6298).1" />
<Link Source="25005:[9937..9986).2" Target="25005:[9937..9986).1" />
<Link Source="25005:[9937..9986).2" Target="25005:[4543..4693).7" />
<Link Source="25005:[9937..9986).2" Target="25005:[11618..12196).38" />
<Link Source="25005:[9937..9986).2" Target="21003:[45164..45226).1" />
<Link Source="21003:[45228..45235).1" Target="21003:[44837..44876).1" />
<Link Source="21003:[45228..45235).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45237..45249).1" Target="21003:[44891..44929).1" />
<Link Source="21003:[45237..45249).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45251..45263).1" Target="21003:[45017..45041).1" />
<Link Source="21003:[45251..45263).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45265..45279).1" Target="21003:[45056..45082).1" />
<Link Source="21003:[45265..45279).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45281..45299).1" Target="21003:[45097..45128).1" />
<Link Source="21003:[45281..45299).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45133..45300).1" Target="28001:[57393..58688).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45156..45162).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45420..45468).1" Target="25005:[9937..9986).2" />
<Link Source="21003:[45420..45468).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45228..45235).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45237..45249).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45251..45263).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45265..45279).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45281..45299).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45382..45405).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45420..45468).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45483..45522).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45537..45575).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45590..45614).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45629..45655).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45670..45701).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45842..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45842..45846).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45706..45847).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45728..45734).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45736..45746).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45748..45755).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45757..45769).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45771..45783).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45785..45799).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45801..45819).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45821..45846).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[46070..46101).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[46150..46171).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46298..46349).1" Target="21003:[45706..45847).1" />
<Link Source="21004:[949..980).1" Target="21003:[46280..46350).1" />
<Link Source="21004:[949..980).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[982..1008).1" Target="21003:[46280..46350).2" />
<Link Source="21004:[982..1008).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[914..2190).1" Target="21003:[45929..45952).1" />
<Link Source="21004:[914..2190).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[914..2190).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[877..882).1" />
<Link Source="21004:[1034..2179).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1122..1208).1" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[982..1008).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[949..980).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[1034..2179).1" />
<Link Source="21004:[1137..1205).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34091..34111).1" Target="21004:[1122..1208).3" />
<Link Source="21003:[34091..34111).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34113..34146).1" Target="21004:[1122..1208).4" />
<Link Source="21003:[34113..34146).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34113..34146).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34198..34304).1" />
<Link Source="21003:[34198..34304).2" Target="21004:[1137..1205).1" />
<Link Source="21010:[590..618).1" Target="EXTERNAL" />
<Link Source="21010:[620..662).1" Target="EXTERNAL" />
<Link Source="21010:[567..663).5" Target="21010:[590..618).1" />
<Link Source="21010:[567..663).5" Target="21010:[620..662).1" />
<Link Source="21010:[567..663).5" Target="21010:[567..663).1" />
<Link Source="21010:[557..663).1" Target="21010:[567..663).5" />
<Link Source="21010:[742..763).1" Target="EXTERNAL" />
<Link Source="21010:[725..764).1" Target="21010:[557..663).1" />
<Link Source="21010:[725..764).1" Target="21010:[567..663).5" />
<Link Source="21010:[725..764).1" Target="21010:[742..763).1" />
<Link Source="21010:[716..764).1" Target="21010:[725..764).1" />
<Link Source="21010:[856..879).1" Target="EXTERNAL" />
<Link Source="21010:[828..880).1" Target="21010:[557..663).1" />
<Link Source="21010:[828..880).1" Target="21010:[567..663).5" />
<Link Source="21010:[828..880).1" Target="21010:[856..879).1" />
<Link Source="21010:[817..880).1" Target="21010:[828..880).1" />
<Link Source="21010:[972..995).1" Target="EXTERNAL" />
<Link Source="21010:[944..996).1" Target="21010:[557..663).1" />
<Link Source="21010:[944..996).1" Target="21010:[567..663).5" />
<Link Source="21010:[944..996).1" Target="21010:[972..995).1" />
<Link Source="21010:[933..996).1" Target="21010:[944..996).1" />
<Link Source="21010:[1090..1115).1" Target="EXTERNAL" />
<Link Source="21010:[1062..1116).1" Target="21010:[557..663).1" />
<Link Source="21010:[1062..1116).1" Target="21010:[567..663).5" />
<Link Source="21010:[1062..1116).1" Target="21010:[1090..1115).1" />
<Link Source="21010:[1049..1116).1" Target="21010:[1062..1116).1" />
<Link Source="21010:[1210..1235).1" Target="EXTERNAL" />
<Link Source="21010:[1182..1236).1" Target="21010:[557..663).1" />
<Link Source="21010:[1182..1236).1" Target="21010:[567..663).5" />
<Link Source="21010:[1182..1236).1" Target="21010:[1210..1235).1" />
<Link Source="21010:[1169..1236).1" Target="21010:[1182..1236).1" />
<Link Source="21010:[1330..1355).1" Target="EXTERNAL" />
<Link Source="21010:[1302..1356).1" Target="21010:[557..663).1" />
<Link Source="21010:[1302..1356).1" Target="21010:[567..663).5" />
<Link Source="21010:[1302..1356).1" Target="21010:[1330..1355).1" />
<Link Source="21010:[1289..1356).1" Target="21010:[1302..1356).1" />
<Link Source="21010:[1454..1477).1" Target="EXTERNAL" />
<Link Source="21010:[1426..1478).1" Target="21010:[557..663).1" />
<Link Source="21010:[1426..1478).1" Target="21010:[567..663).5" />
<Link Source="21010:[1426..1478).1" Target="21010:[1454..1477).1" />
<Link Source="21010:[1409..1478).1" Target="21010:[1426..1478).1" />
<Link Source="21010:[1576..1599).1" Target="EXTERNAL" />
<Link Source="21010:[1548..1600).1" Target="21010:[557..663).1" />
<Link Source="21010:[1548..1600).1" Target="21010:[567..663).5" />
<Link Source="21010:[1548..1600).1" Target="21010:[1576..1599).1" />
<Link Source="21010:[1531..1600).1" Target="21010:[1548..1600).1" />
<Link Source="21010:[1692..1715).1" Target="EXTERNAL" />
<Link Source="21010:[1664..1716).1" Target="21010:[557..663).1" />
<Link Source="21010:[1664..1716).1" Target="21010:[567..663).5" />
<Link Source="21010:[1664..1716).1" Target="21010:[1692..1715).1" />
<Link Source="21010:[1653..1716).1" Target="21010:[1664..1716).1" />
<Link Source="21010:[1808..1831).1" Target="EXTERNAL" />
<Link Source="21010:[1780..1832).1" Target="21010:[557..663).1" />
<Link Source="21010:[1780..1832).1" Target="21010:[567..663).5" />
<Link Source="21010:[1780..1832).1" Target="21010:[1808..1831).1" />
<Link Source="21010:[1769..1832).1" Target="21010:[1780..1832).1" />
<Link Source="21010:[1950..1976).1" Target="EXTERNAL" />
<Link Source="21010:[1920..1977).1" Target="21010:[557..663).1" />
<Link Source="21010:[1920..1977).1" Target="21010:[567..663).5" />
<Link Source="21010:[1920..1977).1" Target="21010:[1950..1976).1" />
<Link Source="21010:[1885..1977).1" Target="21010:[1920..1977).1" />
<Link Source="21010:[2060..2067).1" Target="21010:[557..663).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2067).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2080..2109).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7832..7853).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[7783..7814).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).2" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[7816..7830).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[7832..7853).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).3" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).4" />
<Link Source="21010:[7879..7992).5" Target="21010:[2060..2110).1" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).5" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).2" />
<Link Source="21010:[7931..7989).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).2" />
<Link Source="21010:[7879..7992).9" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[7931..7989).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[2060..2110).1" />
<Link Source="21010:[2030..2110).1" Target="21010:[7879..7992).9" />
<Link Source="21010:[2227..2274).1" Target="EXTERNAL" />
<Link Source="21010:[2227..2292).1" Target="21010:[2227..2274).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2227..2292).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2295..2296).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[557..663).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[567..663).5" />
<Link Source="21010:[2199..2297).1" Target="21010:[2227..2296).1" />
<Link Source="21010:[2163..2297).1" Target="21010:[2199..2297).1" />
<Link Source="21010:[2401..2450).1" Target="EXTERNAL" />
<Link Source="21010:[2401..2468).1" Target="21010:[2401..2450).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[557..663).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[567..663).5" />
<Link Source="21010:[2373..2469).1" Target="21010:[2401..2468).1" />
<Link Source="21010:[2350..2469).1" Target="21010:[2373..2469).1" />
<Link Source="21010:[2576..2599).1" Target="EXTERNAL" />
<Link Source="21010:[2548..2600).1" Target="21010:[557..663).1" />
<Link Source="21010:[2548..2600).1" Target="21010:[567..663).5" />
<Link Source="21010:[2548..2600).1" Target="21010:[2576..2599).1" />
<Link Source="21010:[2522..2600).1" Target="21010:[2548..2600).1" />
<Link Source="21010:[2655..2705).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[2774..2838).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2954..2982).1" Target="EXTERNAL" />
<Link Source="21010:[2984..3025).1" Target="EXTERNAL" />
<Link Source="21010:[3027..3067).1" Target="EXTERNAL" />
<Link Source="21010:[2931..3068).3" Target="21010:[2954..2982).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2984..3025).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[3027..3067).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2931..3068).1" />
<Link Source="21010:[3082..3104).1" Target="21010:[2774..2838).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2931..3068).3" />
<Link Source="21010:[2931..3105).1" Target="21010:[3082..3104).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2891..3105).1" Target="21010:[2931..3105).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3487..3556).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3524..3544).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3546..3552).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[817..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[567..663).5" />
<Link Source="21010:[3465..3557).1" Target="21010:[828..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).2" />
<Link Source="21010:[3436..3557).1" Target="21010:[3465..3557).1" />
<Link Source="21010:[3612..3656).1" Target="21010:[1289..1356).1" />
<Link Source="21010:[3709..3748).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3801..3844).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3897..3943).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[4035..4070).1" Target="EXTERNAL" />
<Link Source="21010:[4072..4097).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).1" Target="21010:[4035..4070).1" />
<Link Source="21010:[10204..10225).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4072..4097).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10264..10288).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[10204..10225).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[10227..10262).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10385..10425).1" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[10264..10288).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10335..10345).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10347..10383).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10385..10425).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10427..10451).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10306..10452).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[4017..4098).1" />
<Link Source="21010:[4004..4098).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4188..4217).1" Target="EXTERNAL" />
<Link Source="21010:[4219..4244).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).2" Target="21010:[4188..4217).1" />
<Link Source="21010:[10204..10225).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4219..4244).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10264..10288).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10335..10345).2" Target="21010:[10204..10225).2" />
<Link Source="21010:[10335..10345).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10347..10383).2" Target="21010:[10227..10262).2" />
<Link Source="21010:[10347..10383).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10385..10425).2" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10427..10451).2" Target="21010:[10264..10288).2" />
<Link Source="21010:[10427..10451).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).49" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).95" Target="21010:[10335..10345).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10347..10383).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10385..10425).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10427..10451).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10306..10452).49" />
<Link Source="21010:[10306..10452).95" Target="21010:[4170..4245).1" />
<Link Source="21010:[4157..4245).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4324..4358).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[4324..4358).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4324..4358).1" Target="21010:[4353..4357).1" />
<Link Source="21010:[4306..4358).1" Target="21010:[4324..4358).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4437..4471).1" Target="21010:[4466..4470).1" />
<Link Source="21010:[4419..4471).1" Target="21010:[4437..4471).1" />
<Link Source="21010:[4561..4596).1" Target="EXTERNAL" />
<Link Source="21010:[4598..4621).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).3" Target="21010:[4561..4596).1" />
<Link Source="21010:[10204..10225).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4598..4621).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10264..10288).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10335..10345).3" Target="21010:[10204..10225).3" />
<Link Source="21010:[10335..10345).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10347..10383).3" Target="21010:[10227..10262).3" />
<Link Source="21010:[10347..10383).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10385..10425).3" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10427..10451).3" Target="21010:[10264..10288).3" />
<Link Source="21010:[10427..10451).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).97" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).143" Target="21010:[10335..10345).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10347..10383).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10385..10425).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10427..10451).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10306..10452).97" />
<Link Source="21010:[10306..10452).143" Target="21010:[4543..4622).1" />
<Link Source="21010:[4532..4622).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[4710..4739).1" Target="EXTERNAL" />
<Link Source="21010:[4741..4764).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).4" Target="21010:[4710..4739).1" />
<Link Source="21010:[10204..10225).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4741..4764).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10264..10288).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10335..10345).4" Target="21010:[10204..10225).4" />
<Link Source="21010:[10335..10345).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10347..10383).4" Target="21010:[10227..10262).4" />
<Link Source="21010:[10347..10383).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10385..10425).4" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10427..10451).4" Target="21010:[10264..10288).4" />
<Link Source="21010:[10427..10451).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).145" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).191" Target="21010:[10335..10345).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10347..10383).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10385..10425).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10427..10451).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10306..10452).145" />
<Link Source="21010:[10306..10452).191" Target="21010:[4692..4765).1" />
<Link Source="21010:[4681..4765).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[4859..4892).1" Target="EXTERNAL" />
<Link Source="21010:[4894..4919).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).5" Target="21010:[4859..4892).1" />
<Link Source="21010:[10204..10225).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4894..4919).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10264..10288).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10335..10345).5" Target="21010:[10204..10225).5" />
<Link Source="21010:[10335..10345).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10347..10383).5" Target="21010:[10227..10262).5" />
<Link Source="21010:[10347..10383).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10385..10425).5" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10427..10451).5" Target="21010:[10264..10288).5" />
<Link Source="21010:[10427..10451).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).193" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).239" Target="21010:[10335..10345).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10347..10383).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10385..10425).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10427..10451).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10306..10452).193" />
<Link Source="21010:[10306..10452).239" Target="21010:[4841..4920).1" />
<Link Source="21010:[4826..4920).1" Target="21010:[10306..10452).239" />
<Link Source="21010:[5010..5043).1" Target="EXTERNAL" />
<Link Source="21010:[5045..5068).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).6" Target="21010:[5010..5043).1" />
<Link Source="21010:[10204..10225).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[5045..5068).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10264..10288).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10335..10345).6" Target="21010:[10204..10225).6" />
<Link Source="21010:[10335..10345).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10347..10383).6" Target="21010:[10227..10262).6" />
<Link Source="21010:[10347..10383).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10385..10425).6" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10427..10451).6" Target="21010:[10264..10288).6" />
<Link Source="21010:[10427..10451).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).241" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).287" Target="21010:[10335..10345).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10347..10383).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10385..10425).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10427..10451).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10306..10452).241" />
<Link Source="21010:[10306..10452).287" Target="21010:[4992..5069).1" />
<Link Source="21010:[4979..5069).1" Target="21010:[10306..10452).287" />
<Link Source="21010:[5164..5184).1" Target="EXTERNAL" />
<Link Source="21010:[5186..5211).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).7" Target="21010:[5164..5184).1" />
<Link Source="21010:[10204..10225).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5186..5211).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10264..10288).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10335..10345).7" Target="21010:[10204..10225).7" />
<Link Source="21010:[10335..10345).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10347..10383).7" Target="21010:[10227..10262).7" />
<Link Source="21010:[10347..10383).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10385..10425).7" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10427..10451).7" Target="21010:[10264..10288).7" />
<Link Source="21010:[10427..10451).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).289" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).335" Target="21010:[10335..10345).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10347..10383).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10385..10425).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10427..10451).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10306..10452).289" />
<Link Source="21010:[10306..10452).335" Target="21010:[5146..5212).1" />
<Link Source="21010:[5130..5212).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[5303..5323).1" Target="EXTERNAL" />
<Link Source="21010:[5325..5348).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).8" Target="21010:[5303..5323).1" />
<Link Source="21010:[10204..10225).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5325..5348).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10264..10288).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10335..10345).8" Target="21010:[10204..10225).8" />
<Link Source="21010:[10335..10345).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10347..10383).8" Target="21010:[10227..10262).8" />
<Link Source="21010:[10347..10383).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10385..10425).8" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10427..10451).8" Target="21010:[10264..10288).8" />
<Link Source="21010:[10427..10451).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).337" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).383" Target="21010:[10335..10345).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10347..10383).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10385..10425).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10427..10451).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10306..10452).337" />
<Link Source="21010:[10306..10452).383" Target="21010:[5285..5349).1" />
<Link Source="21010:[5271..5349).1" Target="21010:[10306..10452).383" />
<Link Source="21010:[5429..5461).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5429..5461).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5429..5461).1" Target="21010:[5456..5460).1" />
<Link Source="21010:[5410..5461).1" Target="21010:[5429..5461).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[5539..5571).1" Target="21010:[5566..5570).1" />
<Link Source="21010:[5520..5571).1" Target="21010:[5539..5571).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[5649..5679).1" Target="21010:[5674..5678).1" />
<Link Source="21010:[5632..5679).1" Target="21010:[5649..5679).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[4681..4765).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[5755..5785).1" Target="21010:[5780..5784).1" />
<Link Source="21010:[5738..5785).1" Target="21010:[5755..5785).1" />
<Link Source="21010:[5900..5951).1" Target="EXTERNAL" />
<Link Source="21010:[5866..5952).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5866..5952).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5866..5952).1" Target="21010:[5900..5951).1" />
<Link Source="21010:[5866..5952).1" Target="EXTERNAL" />
<Link Source="21010:[5846..5952).1" Target="21010:[5866..5952).1" />
<Link Source="21010:[6065..6116).1" Target="EXTERNAL" />
<Link Source="21010:[6031..6117).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[6031..6117).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[6031..6117).1" Target="21010:[6065..6116).1" />
<Link Source="21010:[6031..6117).1" Target="EXTERNAL" />
<Link Source="21010:[6011..6117).1" Target="21010:[6031..6117).1" />
<Link Source="21010:[6236..6287).1" Target="EXTERNAL" />
<Link Source="21010:[6199..6288).1" Target="21010:[5130..5212).1" />
<Link Source="21010:[6199..6288).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[6199..6288).1" Target="21010:[6236..6287).1" />
<Link Source="21010:[6199..6288).1" Target="EXTERNAL" />
<Link Source="21010:[6176..6288).1" Target="21010:[6199..6288).1" />
<Link Source="21010:[6397..6448).1" Target="EXTERNAL" />
<Link Source="21010:[6365..6449).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[6365..6449).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[6365..6449).1" Target="21010:[6397..6448).1" />
<Link Source="21010:[6365..6449).1" Target="EXTERNAL" />
<Link Source="21010:[6347..6449).1" Target="21010:[6365..6449).1" />
<Link Source="21010:[6560..6586).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="21010:[6560..6586).1" />
<Link Source="21010:[6497..6587).1" Target="21010:[6513..6587).1" />
<Link Source="21003:[34259..34289).1" Target="21010:[557..663).1" />
<Link Source="21003:[34259..34289).1" Target="21003:[34198..34304).2" />
<Link Source="21003:[34320..34386).1" Target="21003:[34078..34089).1" />
<Link Source="21003:[34320..34386).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).2" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).3" Target="21003:[34320..34386).2" />
<Link Source="21003:[34320..34386).3" Target="21003:[34148..34172).1" />
<Link Source="21003:[34320..34386).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).5" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).3" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).5" />
<Link Source="21003:[34320..34386).7" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).7" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).1" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).2" Target="21003:[34259..34289).1" />
<Link Source="21003:[34400..34487).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).3" Target="21003:[34091..34111).1" />
<Link Source="21003:[34400..34487).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).4" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).2" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).3" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).4" />
<Link Source="21003:[34400..34487).6" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).6" Target="21010:[567..663).5" />
<Link Source="21003:[34400..34487).6" Target="21004:[1137..1205).1" />
<Link Source="21003:[34407..34486).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34554..34569).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[34554..34569).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34595..34627).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34554..34569).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34400..34487).6" />
<Link Source="21003:[34641..34667).3" Target="21003:[34641..34667).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).3" />
<Link Source="21003:[34681..34706).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).2" />
<Link Source="21003:[34681..34706).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34740).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34720..34740).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).2" />
<Link Source="21003:[34754..34818).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34720..34735).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34554..34569).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34407..34486).1" />
<Link Source="21004:[1129..1207).1" Target="21003:[34832..34844).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1122..1208).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[46280..46350).3" Target="21004:[1122..1208).1" />
<Link Source="21003:[46280..46350).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46023..46055).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46366..46650).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46419..46533).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[46419..46533).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).2" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).2" />
<Link Source="21003:[46419..46533).4" Target="21004:[1122..1208).1" />
<Link Source="21003:[46419..46533).4" Target="21004:[1129..1207).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[46419..46533).4" Target="21003:[46366..46650).2" />
<Link Source="21003:[46563..46584).1" Target="21003:[46419..46533).4" />
<Link Source="21003:[46563..46584).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46553..46635).1" Target="21010:[4004..4098).1" />
<Link Source="21003:[46553..46635).1" Target="21003:[46563..46584).1" />
<Link Source="21003:[46755..46872).1" Target="EXTERNAL" />
<Link Source="21003:[46755..46872).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[46224..46254).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46116..46135).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[47082..47319).1" Target="21003:[45967..46008).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46553..46635).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47399).1" Target="21003:[45706..45847).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47400).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11613..11696).1" Target="EXTERNAL" />
<Link Source="25006:[11613..11696).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11674..11681).1" Target="25006:[11613..11696).1" />
<Link Source="21003:[47333..47400).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1129..1207).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[47414..47458).1" Target="25005:[9937..9986).2" />
<Link Source="21003:[47414..47458).1" Target="21010:[10306..10452).47" />
<Link Source="21003:[47414..47458).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).2" Target="21003:[45706..45847).1" />
<Link Source="25004:[1041..1077).1" Target="21003:[47414..47458).2" />
<Link Source="21003:[47414..47458).4" Target="21003:[47414..47458).1" />
<Link Source="21003:[47414..47458).4" Target="25004:[1041..1077).1" />
<Link Source="21003:[47414..47458).4" Target="21003:[45706..45847).1" />
<Link Source="21003:[47689..47930).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47689..47930).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47717..47747).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47689..47930).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[48025..48054).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48175..48211).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[48175..48211).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48225..48313).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48175..48211).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48327..48378).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[47414..47458).4" />
<Link Source="21003:[48327..48378).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).1" Target="EXTERNAL" />
<Link Source="21003:[48392..48469).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[48327..48378).2" />
<Link Source="21003:[48392..48469).2" Target="21003:[48392..48469).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[46186..46209).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[48392..48469).2" />
<Link Source="21003:[47689..47930).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[47944..47963).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47944..47963).1" Target="21003:[45706..45847).1" />
<Link Source="28001:[57393..58688).10" Target="21004:[877..882).1" />
<Link Source="28001:[57393..58688).10" Target="21003:[47944..47963).1" />
<Link Source="28001:[57393..58688).10" Target="21003:[48392..48469).2" />
<Link Source="28001:[57393..58688).10" Target="25014:[387..448).1" />
<Link Source="28001:[58056..58120).1" Target="25014:[387..448).1" />
<Link Source="25004:[19277..19288).1" Target="28001:[57393..58688).5" />
<Link Source="25004:[19277..19288).1" Target="28001:[58056..58120).1" />
<Link Source="25004:[19303..19330).1" Target="28001:[57393..58688).1" />
<Link Source="25004:[19303..19330).1" Target="28001:[58056..58120).1" />
<Link Source="25004:[19345..19370).1" Target="28001:[57393..58688).1" />
<Link Source="25004:[19345..19370).1" Target="28001:[58056..58120).1" />
<Link Source="25004:[19385..19419).1" Target="28001:[57393..58688).1" />
<Link Source="25004:[19385..19419).1" Target="28001:[58056..58120).1" />
<Link Source="25004:[19434..19483).1" Target="28001:[57393..58688).1" />
<Link Source="25004:[19434..19483).1" Target="28001:[58056..58120).1" />
<Link Source="25004:[19498..19537).1" Target="28001:[57393..58688).1" />
<Link Source="25004:[19498..19537).1" Target="28001:[58056..58120).1" />
<Link Source="25004:[19552..19577).1" Target="28001:[57393..58688).1" />
<Link Source="25004:[19552..19577).1" Target="28001:[58056..58120).1" />
<Link Source="25004:[19603..19877).1" Target="25004:[19277..19288).1" />
<Link Source="25004:[19603..19877).1" Target="28001:[58056..58120).1" />
<Link Source="25004:[19603..19877).2" Target="25004:[19303..19330).1" />
<Link Source="25004:[19603..19877).2" Target="28001:[58056..58120).1" />
<Link Source="25004:[19603..19877).3" Target="25004:[19345..19370).1" />
<Link Source="25004:[19603..19877).3" Target="28001:[58056..58120).1" />
<Link Source="25004:[19603..19877).4" Target="25004:[19385..19419).1" />
<Link Source="25004:[19603..19877).4" Target="28001:[58056..58120).1" />
<Link Source="25004:[19603..19877).5" Target="25004:[19434..19483).1" />
<Link Source="25004:[19603..19877).5" Target="28001:[58056..58120).1" />
<Link Source="25004:[19603..19877).6" Target="25004:[19498..19537).1" />
<Link Source="25004:[19603..19877).6" Target="28001:[58056..58120).1" />
<Link Source="25004:[19603..19877).7" Target="25004:[19552..19577).1" />
<Link Source="25004:[19603..19877).7" Target="28001:[58056..58120).1" />
<Link Source="25004:[19610..19876).1" Target="28001:[58056..58120).1" />
<Link Source="25007:[3334..3345).1" Target="25004:[19603..19877).1" />
<Link Source="25007:[3334..3345).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3360..3387).1" Target="25004:[19603..19877).2" />
<Link Source="25007:[3360..3387).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3402..3427).1" Target="25004:[19603..19877).3" />
<Link Source="25007:[3402..3427).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3442..3476).1" Target="25004:[19603..19877).4" />
<Link Source="25007:[3442..3476).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3491..3540).1" Target="25004:[19603..19877).5" />
<Link Source="25007:[3491..3540).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3555..3594).1" Target="25004:[19603..19877).6" />
<Link Source="25007:[3555..3594).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3609..3634).1" Target="25004:[19603..19877).7" />
<Link Source="25007:[3609..3634).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3660..3885).1" Target="25007:[3334..3345).1" />
<Link Source="25007:[3660..3885).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).1" Target="25007:[3334..3345).1" />
<Link Source="25007:[3901..4266).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).4" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).6" Target="25007:[3360..3387).1" />
<Link Source="25007:[3901..4266).6" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).7" Target="25007:[3402..3427).1" />
<Link Source="25007:[3901..4266).7" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).8" Target="25007:[3442..3476).1" />
<Link Source="25007:[3901..4266).8" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).9" Target="25007:[3491..3540).1" />
<Link Source="25007:[3901..4266).9" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).10" Target="25007:[3555..3594).1" />
<Link Source="25007:[3901..4266).10" Target="25004:[19610..19876).1" />
<Link Source="25003:[740..750).1" Target="25003:[747..750).1" />
<Link Source="25003:[808..818).1" Target="25003:[814..818).1" />
<Link Source="25007:[3901..4266).13" Target="25007:[3609..3634).1" />
<Link Source="25007:[3901..4266).13" Target="25004:[19610..19876).1" />
<Link Source="25007:[3908..4265).1" Target="25004:[19610..19876).1" />
<Link Source="25003:[2816..2827).1" Target="25007:[3901..4266).1" />
<Link Source="25003:[2816..2827).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2842..2863).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[2842..2863).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2878..2898).1" Target="25007:[3901..4266).6" />
<Link Source="25003:[2878..2898).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2913..2931).1" Target="25007:[3901..4266).7" />
<Link Source="25003:[2913..2931).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2946..2973).1" Target="25007:[3901..4266).8" />
<Link Source="25003:[2946..2973).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2988..3030).1" Target="25007:[3901..4266).9" />
<Link Source="25003:[2988..3030).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3045..3076).1" Target="25007:[3901..4266).10" />
<Link Source="25003:[3045..3076).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3091..3116).1" Target="25007:[3901..4266).1" />
<Link Source="25003:[3091..3116).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3131..3176).1" Target="25007:[3901..4266).13" />
<Link Source="25003:[3131..3176).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3191..3238).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[3191..3238).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3253..3278).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[3253..3278).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2773..3850).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[2773..3850).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[912..917).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[912..917).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[950..967).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[950..967).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1000..1013).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1000..1013).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1048..1062).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1048..1062).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1099..1109).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1099..1109).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1151..1165).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1151..1165).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1276..1303).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1276..1303).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1336..1350).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1336..1350).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1383..1412).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1383..1412).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1460..1479).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1460..1479).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1527..1548).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1527..1548).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1673..1689).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1673..1689).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1713..1727).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1713..1727).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1891..1900).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1891..1900).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1941..1960).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1941..1960).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3304..3309).1" Target="25003:[2816..2827).1" />
<Link Source="25003:[3304..3309).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3304..3309).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3331..3348).1" Target="25003:[2842..2863).1" />
<Link Source="25003:[3331..3348).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3331..3348).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3382..3396).1" Target="25003:[2878..2898).1" />
<Link Source="25003:[3382..3396).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3382..3396).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3427..3437).1" Target="25003:[2913..2931).1" />
<Link Source="25003:[3427..3437).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3427..3437).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3464..3478).1" Target="25003:[2946..2973).1" />
<Link Source="25003:[3464..3478).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3464..3478).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3509..3525).1" Target="25003:[2988..3030).1" />
<Link Source="25003:[3509..3525).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3509..3525).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3562..3589).1" Target="25003:[3045..3076).1" />
<Link Source="25003:[3562..3589).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3562..3589).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3633..3682).1" Target="25003:[3091..3116).1" />
<Link Source="25003:[3633..3682).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3633..3647).1" Target="25003:[3633..3682).1" />
<Link Source="25003:[3633..3647).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3633..3647).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3696..3715).1" Target="25003:[3131..3176).1" />
<Link Source="25003:[3696..3715).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3696..3715).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3751..3772).1" Target="25003:[3191..3238).1" />
<Link Source="25003:[3751..3772).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3751..3772).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3810..3823).1" Target="25003:[3253..3278).1" />
<Link Source="25003:[3810..3823).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3810..3823).1" Target="25007:[3908..4265).1" />
<Link Source="25004:[19603..19877).8" Target="25007:[3901..4266).4" />
<Link Source="25004:[19603..19877).8" Target="28001:[58056..58120).1" />
<Link Source="28001:[57393..58688).41" Target="25004:[19603..19877).8" />
<Link Source="28001:[57393..58688).41" Target="25014:[387..448).1" />
<Link Source="28001:[58056..58258).1" Target="28001:[57393..58688).1" />
<Link Source="28001:[58056..58258).1" Target="25014:[387..448).1" />
<Link Source="28001:[58056..58258).3" Target="25014:[387..448).1" />
<Link Source="25003:[7407..7432).1" Target="28001:[57393..58688).1" />
<Link Source="25003:[7407..7432).1" Target="28001:[58056..58258).3" />
<Link Source="25003:[7364..7671).1" Target="28001:[57393..58688).41" />
<Link Source="25003:[7364..7671).1" Target="28001:[58056..58258).3" />
<Link Source="25003:[7458..7660).1" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).1" Target="25003:[3304..3309).1" />
<Link Source="25003:[7458..7660).1" Target="28001:[58056..58258).3" />
<Link Source="25003:[7458..7660).2" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).2" Target="25003:[3331..3348).1" />
<Link Source="25003:[7458..7660).2" Target="28001:[58056..58258).3" />
<Link Source="25003:[7458..7660).3" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).3" Target="25003:[3382..3396).1" />
<Link Source="25003:[7458..7660).3" Target="28001:[58056..58258).3" />
<Link Source="25003:[7458..7660).4" Target="25003:[7407..7432).1" />
<Link Source="25003:[7458..7660).4" Target="28001:[58056..58258).3" />
<Link Source="25003:[7458..7660).5" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).5" Target="25003:[3464..3478).1" />
<Link Source="25003:[7458..7660).5" Target="28001:[58056..58258).3" />
<Link Source="25003:[7458..7660).6" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).6" Target="25003:[3509..3525).1" />
<Link Source="25003:[7458..7660).6" Target="28001:[58056..58258).3" />
<Link Source="25003:[7458..7660).7" Target="28001:[58056..58258).3" />
<Link Source="25003:[7458..7660).9" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).9" Target="25003:[3633..3647).1" />
<Link Source="25003:[7458..7660).9" Target="28001:[58056..58258).3" />
<Link Source="25003:[7458..7660).10" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).10" Target="25003:[3696..3715).1" />
<Link Source="25003:[7458..7660).10" Target="28001:[58056..58258).3" />
<Link Source="25003:[7458..7660).11" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).11" Target="25003:[3751..3772).1" />
<Link Source="25003:[7458..7660).11" Target="28001:[58056..58258).3" />
<Link Source="25003:[7458..7660).12" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).12" Target="25003:[3810..3823).1" />
<Link Source="25003:[7458..7660).12" Target="28001:[58056..58258).3" />
<Link Source="25003:[7465..7659).1" Target="28001:[58056..58258).3" />
<Link Source="25003:[2816..2827).2" Target="25003:[7458..7660).1" />
<Link Source="25003:[2816..2827).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2842..2863).2" Target="25003:[7458..7660).2" />
<Link Source="25003:[2842..2863).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2878..2898).2" Target="25003:[7458..7660).3" />
<Link Source="25003:[2878..2898).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2913..2931).2" Target="25003:[7458..7660).4" />
<Link Source="25003:[2913..2931).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2946..2973).2" Target="25003:[7458..7660).5" />
<Link Source="25003:[2946..2973).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2988..3030).2" Target="25003:[7458..7660).6" />
<Link Source="25003:[2988..3030).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3045..3076).2" Target="25003:[7458..7660).7" />
<Link Source="25003:[3045..3076).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3091..3116).2" Target="25003:[7458..7660).9" />
<Link Source="25003:[3091..3116).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3131..3176).2" Target="25003:[7458..7660).10" />
<Link Source="25003:[3131..3176).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3191..3238).2" Target="25003:[7458..7660).11" />
<Link Source="25003:[3191..3238).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3253..3278).2" Target="25003:[7458..7660).12" />
<Link Source="25003:[3253..3278).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2773..3850).2" Target="25003:[7458..7660).7" />
<Link Source="25003:[2773..3850).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[912..917).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[912..917).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[950..967).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[950..967).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1000..1013).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1000..1013).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1048..1062).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1048..1062).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1099..1109).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1099..1109).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1151..1165).4" Target="25003:[2773..3850).2" />
<Link Source="25003:[1151..1165).4" Target="25003:[7465..7659).1" />
<Link Source="25003:[1276..1303).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1276..1303).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1336..1350).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1336..1350).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1383..1412).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1383..1412).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1460..1479).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1460..1479).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1527..1548).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1527..1548).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1673..1689).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1673..1689).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1713..1727).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1713..1727).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1891..1900).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1891..1900).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1941..1960).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1941..1960).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3427..3437).2" Target="25003:[2913..2931).2" />
<Link Source="25003:[3427..3437).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[3427..3437).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3562..3589).2" Target="25003:[3045..3076).2" />
<Link Source="25003:[3562..3589).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[3562..3589).2" Target="25003:[7465..7659).1" />
<Link Source="28001:[57393..58688).48" Target="25003:[7458..7660).7" />
<Link Source="28001:[57393..58688).48" Target="25014:[387..448).1" />
<Link Source="28001:[58389..58441).1" Target="25014:[387..448).1" />
<Link Source="25004:[19277..19288).2" Target="28001:[57393..58688).5" />
<Link Source="25004:[19277..19288).2" Target="28001:[58389..58441).1" />
<Link Source="25004:[19303..19330).2" Target="28001:[57393..58688).1" />
<Link Source="25004:[19303..19330).2" Target="28001:[58389..58441).1" />
<Link Source="25004:[19345..19370).2" Target="28001:[57393..58688).1" />
<Link Source="25004:[19345..19370).2" Target="28001:[58389..58441).1" />
<Link Source="25004:[19385..19419).2" Target="28001:[57393..58688).1" />
<Link Source="25004:[19385..19419).2" Target="28001:[58389..58441).1" />
<Link Source="25004:[19434..19483).2" Target="28001:[57393..58688).1" />
<Link Source="25004:[19434..19483).2" Target="28001:[58389..58441).1" />
<Link Source="25004:[19498..19537).2" Target="28001:[57393..58688).1" />
<Link Source="25004:[19498..19537).2" Target="28001:[58389..58441).1" />
<Link Source="25004:[19552..19577).2" Target="28001:[57393..58688).1" />
<Link Source="25004:[19552..19577).2" Target="28001:[58389..58441).1" />
<Link Source="25004:[19603..19877).10" Target="25004:[19277..19288).2" />
<Link Source="25004:[19603..19877).10" Target="28001:[58389..58441).1" />
<Link Source="25004:[19603..19877).11" Target="25004:[19303..19330).2" />
<Link Source="25004:[19603..19877).11" Target="28001:[58389..58441).1" />
<Link Source="25004:[19603..19877).12" Target="25004:[19345..19370).2" />
<Link Source="25004:[19603..19877).12" Target="28001:[58389..58441).1" />
<Link Source="25004:[19603..19877).13" Target="25004:[19385..19419).2" />
<Link Source="25004:[19603..19877).13" Target="28001:[58389..58441).1" />
<Link Source="25004:[19603..19877).14" Target="25004:[19434..19483).2" />
<Link Source="25004:[19603..19877).14" Target="28001:[58389..58441).1" />
<Link Source="25004:[19603..19877).15" Target="25004:[19498..19537).2" />
<Link Source="25004:[19603..19877).15" Target="28001:[58389..58441).1" />
<Link Source="25004:[19603..19877).16" Target="25004:[19552..19577).2" />
<Link Source="25004:[19603..19877).16" Target="28001:[58389..58441).1" />
<Link Source="25004:[19610..19876).2" Target="28001:[58389..58441).1" />
<Link Source="25007:[3334..3345).2" Target="25004:[19603..19877).10" />
<Link Source="25007:[3334..3345).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3360..3387).2" Target="25004:[19603..19877).11" />
<Link Source="25007:[3360..3387).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3402..3427).2" Target="25004:[19603..19877).12" />
<Link Source="25007:[3402..3427).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3442..3476).2" Target="25004:[19603..19877).13" />
<Link Source="25007:[3442..3476).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3491..3540).2" Target="25004:[19603..19877).14" />
<Link Source="25007:[3491..3540).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3555..3594).2" Target="25004:[19603..19877).15" />
<Link Source="25007:[3555..3594).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3609..3634).2" Target="25004:[19603..19877).16" />
<Link Source="25007:[3609..3634).2" Target="25004:[19610..19876).2" />
<Link Source="25007:[3660..3885).6" Target="25007:[3334..3345).2" />
<Link Source="25007:[3660..3885).6" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).20" Target="25007:[3334..3345).2" />
<Link Source="25007:[3901..4266).20" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).23" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).25" Target="25007:[3360..3387).2" />
<Link Source="25007:[3901..4266).25" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).26" Target="25007:[3402..3427).2" />
<Link Source="25007:[3901..4266).26" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).27" Target="25007:[3442..3476).2" />
<Link Source="25007:[3901..4266).27" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).28" Target="25007:[3491..3540).2" />
<Link Source="25007:[3901..4266).28" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).29" Target="25007:[3555..3594).2" />
<Link Source="25007:[3901..4266).29" Target="25004:[19610..19876).2" />
<Link Source="25007:[3901..4266).32" Target="25007:[3609..3634).2" />
<Link Source="25007:[3901..4266).32" Target="25004:[19610..19876).2" />
<Link Source="25007:[3908..4265).2" Target="25004:[19610..19876).2" />
<Link Source="25003:[2816..2827).3" Target="25007:[3901..4266).20" />
<Link Source="25003:[2816..2827).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[2842..2863).3" Target="25007:[3901..4266).23" />
<Link Source="25003:[2842..2863).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[2878..2898).3" Target="25007:[3901..4266).25" />
<Link Source="25003:[2878..2898).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[2913..2931).3" Target="25007:[3901..4266).26" />
<Link Source="25003:[2913..2931).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[2946..2973).3" Target="25007:[3901..4266).27" />
<Link Source="25003:[2946..2973).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[2988..3030).3" Target="25007:[3901..4266).28" />
<Link Source="25003:[2988..3030).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3045..3076).3" Target="25007:[3901..4266).29" />
<Link Source="25003:[3045..3076).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3091..3116).3" Target="25007:[3901..4266).20" />
<Link Source="25003:[3091..3116).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3131..3176).3" Target="25007:[3901..4266).32" />
<Link Source="25003:[3131..3176).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3191..3238).3" Target="25007:[3901..4266).23" />
<Link Source="25003:[3191..3238).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3253..3278).3" Target="25007:[3901..4266).23" />
<Link Source="25003:[3253..3278).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[2773..3850).3" Target="25007:[3901..4266).23" />
<Link Source="25003:[2773..3850).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[912..917).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[912..917).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[950..967).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[950..967).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1000..1013).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1000..1013).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1048..1062).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1048..1062).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1099..1109).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1099..1109).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1151..1165).7" Target="25003:[2773..3850).3" />
<Link Source="25003:[1151..1165).7" Target="25007:[3908..4265).2" />
<Link Source="25003:[1276..1303).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1276..1303).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1336..1350).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1336..1350).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1383..1412).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1383..1412).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1460..1479).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1460..1479).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1527..1548).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1527..1548).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1673..1689).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1673..1689).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1713..1727).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1713..1727).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1891..1900).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1891..1900).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[1941..1960).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1941..1960).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3304..3309).3" Target="25003:[2816..2827).3" />
<Link Source="25003:[3304..3309).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3304..3309).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3331..3348).3" Target="25003:[2842..2863).3" />
<Link Source="25003:[3331..3348).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3331..3348).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3382..3396).3" Target="25003:[2878..2898).3" />
<Link Source="25003:[3382..3396).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3382..3396).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3427..3437).3" Target="25003:[2913..2931).3" />
<Link Source="25003:[3427..3437).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3427..3437).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3464..3478).3" Target="25003:[2946..2973).3" />
<Link Source="25003:[3464..3478).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3464..3478).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3509..3525).3" Target="25003:[2988..3030).3" />
<Link Source="25003:[3509..3525).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3509..3525).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3562..3589).3" Target="25003:[3045..3076).3" />
<Link Source="25003:[3562..3589).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3562..3589).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3633..3682).3" Target="25003:[3091..3116).3" />
<Link Source="25003:[3633..3682).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3633..3647).3" Target="25003:[3633..3682).3" />
<Link Source="25003:[3633..3647).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3633..3647).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3696..3715).3" Target="25003:[3131..3176).3" />
<Link Source="25003:[3696..3715).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3696..3715).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3751..3772).3" Target="25003:[3191..3238).3" />
<Link Source="25003:[3751..3772).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3751..3772).3" Target="25007:[3908..4265).2" />
<Link Source="25003:[3810..3823).3" Target="25003:[3253..3278).3" />
<Link Source="25003:[3810..3823).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3810..3823).3" Target="25007:[3908..4265).2" />
<Link Source="25004:[19603..19877).17" Target="25007:[3901..4266).23" />
<Link Source="25004:[19603..19877).17" Target="28001:[58389..58441).1" />
<Link Source="28001:[57393..58688).62" Target="25004:[19603..19877).17" />
<Link Source="28001:[57393..58688).62" Target="25014:[387..448).1" />
<Link Source="28001:[58389..58465).1" Target="28001:[57393..58688).1" />
<Link Source="28001:[58389..58465).1" Target="25014:[387..448).1" />
<Link Source="28001:[58389..58465).2" Target="25014:[387..448).1" />
<Link Source="25003:[7407..7432).2" Target="28001:[57393..58688).1" />
<Link Source="25003:[7407..7432).2" Target="28001:[58389..58465).2" />
<Link Source="25003:[7364..7671).2" Target="28001:[57393..58688).62" />
<Link Source="25003:[7364..7671).2" Target="28001:[58389..58465).2" />
<Link Source="25003:[7458..7660).15" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).15" Target="25003:[3304..3309).3" />
<Link Source="25003:[7458..7660).15" Target="28001:[58389..58465).2" />
<Link Source="25003:[7458..7660).16" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).16" Target="25003:[3331..3348).3" />
<Link Source="25003:[7458..7660).16" Target="28001:[58389..58465).2" />
<Link Source="25003:[7458..7660).17" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).17" Target="25003:[3382..3396).3" />
<Link Source="25003:[7458..7660).17" Target="28001:[58389..58465).2" />
<Link Source="25003:[7458..7660).18" Target="25003:[7407..7432).2" />
<Link Source="25003:[7458..7660).18" Target="28001:[58389..58465).2" />
<Link Source="25003:[7458..7660).19" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).19" Target="25003:[3464..3478).3" />
<Link Source="25003:[7458..7660).19" Target="28001:[58389..58465).2" />
<Link Source="25003:[7458..7660).20" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).20" Target="25003:[3509..3525).3" />
<Link Source="25003:[7458..7660).20" Target="28001:[58389..58465).2" />
<Link Source="25003:[7458..7660).21" Target="28001:[58389..58465).2" />
<Link Source="25003:[7458..7660).23" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).23" Target="25003:[3633..3647).3" />
<Link Source="25003:[7458..7660).23" Target="28001:[58389..58465).2" />
<Link Source="25003:[7458..7660).24" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).24" Target="25003:[3696..3715).3" />
<Link Source="25003:[7458..7660).24" Target="28001:[58389..58465).2" />
<Link Source="25003:[7458..7660).25" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).25" Target="25003:[3751..3772).3" />
<Link Source="25003:[7458..7660).25" Target="28001:[58389..58465).2" />
<Link Source="25003:[7458..7660).26" Target="25003:[7364..7671).2" />
<Link Source="25003:[7458..7660).26" Target="25003:[3810..3823).3" />
<Link Source="25003:[7458..7660).26" Target="28001:[58389..58465).2" />
<Link Source="25003:[7465..7659).2" Target="28001:[58389..58465).2" />
<Link Source="25003:[2816..2827).4" Target="25003:[7458..7660).15" />
<Link Source="25003:[2816..2827).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[2842..2863).4" Target="25003:[7458..7660).16" />
<Link Source="25003:[2842..2863).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[2878..2898).4" Target="25003:[7458..7660).17" />
<Link Source="25003:[2878..2898).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[2913..2931).4" Target="25003:[7458..7660).18" />
<Link Source="25003:[2913..2931).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[2946..2973).4" Target="25003:[7458..7660).19" />
<Link Source="25003:[2946..2973).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[2988..3030).4" Target="25003:[7458..7660).20" />
<Link Source="25003:[2988..3030).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3045..3076).4" Target="25003:[7458..7660).21" />
<Link Source="25003:[3045..3076).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3091..3116).4" Target="25003:[7458..7660).23" />
<Link Source="25003:[3091..3116).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3131..3176).4" Target="25003:[7458..7660).24" />
<Link Source="25003:[3131..3176).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3191..3238).4" Target="25003:[7458..7660).25" />
<Link Source="25003:[3191..3238).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3253..3278).4" Target="25003:[7458..7660).26" />
<Link Source="25003:[3253..3278).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[2773..3850).4" Target="25003:[7458..7660).21" />
<Link Source="25003:[2773..3850).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[912..917).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[912..917).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[950..967).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[950..967).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1000..1013).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1000..1013).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1048..1062).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1048..1062).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1099..1109).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1099..1109).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1151..1165).10" Target="25003:[2773..3850).4" />
<Link Source="25003:[1151..1165).10" Target="25003:[7465..7659).2" />
<Link Source="25003:[1276..1303).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1276..1303).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1336..1350).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1336..1350).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1383..1412).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1383..1412).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1460..1479).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1460..1479).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1527..1548).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1527..1548).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1673..1689).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1673..1689).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1713..1727).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1713..1727).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1891..1900).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1891..1900).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[1941..1960).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[1941..1960).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3427..3437).4" Target="25003:[2913..2931).4" />
<Link Source="25003:[3427..3437).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3427..3437).4" Target="25003:[7465..7659).2" />
<Link Source="25003:[3562..3589).4" Target="25003:[3045..3076).4" />
<Link Source="25003:[3562..3589).4" Target="25003:[2773..3850).4" />
<Link Source="25003:[3562..3589).4" Target="25003:[7465..7659).2" />
<Link Source="28001:[57393..58688).68" Target="25003:[7458..7660).21" />
<Link Source="28001:[57393..58688).68" Target="25014:[387..448).1" />
<Link Source="28001:[58596..58648).1" Target="25014:[387..448).1" />
<Link Source="25004:[19277..19288).3" Target="28001:[57393..58688).5" />
<Link Source="25004:[19277..19288).3" Target="28001:[58596..58648).1" />
<Link Source="25004:[19303..19330).3" Target="28001:[57393..58688).1" />
<Link Source="25004:[19303..19330).3" Target="28001:[58596..58648).1" />
<Link Source="25004:[19345..19370).3" Target="28001:[57393..58688).1" />
<Link Source="25004:[19345..19370).3" Target="28001:[58596..58648).1" />
<Link Source="25004:[19385..19419).3" Target="28001:[57393..58688).1" />
<Link Source="25004:[19385..19419).3" Target="28001:[58596..58648).1" />
<Link Source="25004:[19434..19483).3" Target="28001:[57393..58688).1" />
<Link Source="25004:[19434..19483).3" Target="28001:[58596..58648).1" />
<Link Source="25004:[19498..19537).3" Target="28001:[57393..58688).1" />
<Link Source="25004:[19498..19537).3" Target="28001:[58596..58648).1" />
<Link Source="25004:[19552..19577).3" Target="28001:[57393..58688).1" />
<Link Source="25004:[19552..19577).3" Target="28001:[58596..58648).1" />
<Link Source="25004:[19603..19877).19" Target="25004:[19277..19288).3" />
<Link Source="25004:[19603..19877).19" Target="28001:[58596..58648).1" />
<Link Source="25004:[19603..19877).20" Target="25004:[19303..19330).3" />
<Link Source="25004:[19603..19877).20" Target="28001:[58596..58648).1" />
<Link Source="25004:[19603..19877).21" Target="25004:[19345..19370).3" />
<Link Source="25004:[19603..19877).21" Target="28001:[58596..58648).1" />
<Link Source="25004:[19603..19877).22" Target="25004:[19385..19419).3" />
<Link Source="25004:[19603..19877).22" Target="28001:[58596..58648).1" />
<Link Source="25004:[19603..19877).23" Target="25004:[19434..19483).3" />
<Link Source="25004:[19603..19877).23" Target="28001:[58596..58648).1" />
<Link Source="25004:[19603..19877).24" Target="25004:[19498..19537).3" />
<Link Source="25004:[19603..19877).24" Target="28001:[58596..58648).1" />
<Link Source="25004:[19603..19877).25" Target="25004:[19552..19577).3" />
<Link Source="25004:[19603..19877).25" Target="28001:[58596..58648).1" />
<Link Source="25004:[19610..19876).3" Target="28001:[58596..58648).1" />
<Link Source="25007:[3334..3345).3" Target="25004:[19603..19877).19" />
<Link Source="25007:[3334..3345).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3360..3387).3" Target="25004:[19603..19877).20" />
<Link Source="25007:[3360..3387).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3402..3427).3" Target="25004:[19603..19877).21" />
<Link Source="25007:[3402..3427).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3442..3476).3" Target="25004:[19603..19877).22" />
<Link Source="25007:[3442..3476).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3491..3540).3" Target="25004:[19603..19877).23" />
<Link Source="25007:[3491..3540).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3555..3594).3" Target="25004:[19603..19877).24" />
<Link Source="25007:[3555..3594).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3609..3634).3" Target="25004:[19603..19877).25" />
<Link Source="25007:[3609..3634).3" Target="25004:[19610..19876).3" />
<Link Source="25007:[3660..3885).11" Target="25007:[3334..3345).3" />
<Link Source="25007:[3660..3885).11" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).39" Target="25007:[3334..3345).3" />
<Link Source="25007:[3901..4266).39" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).42" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).44" Target="25007:[3360..3387).3" />
<Link Source="25007:[3901..4266).44" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).45" Target="25007:[3402..3427).3" />
<Link Source="25007:[3901..4266).45" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).46" Target="25007:[3442..3476).3" />
<Link Source="25007:[3901..4266).46" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).47" Target="25007:[3491..3540).3" />
<Link Source="25007:[3901..4266).47" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).48" Target="25007:[3555..3594).3" />
<Link Source="25007:[3901..4266).48" Target="25004:[19610..19876).3" />
<Link Source="25007:[3901..4266).51" Target="25007:[3609..3634).3" />
<Link Source="25007:[3901..4266).51" Target="25004:[19610..19876).3" />
<Link Source="25007:[3908..4265).3" Target="25004:[19610..19876).3" />
<Link Source="25003:[2816..2827).5" Target="25007:[3901..4266).39" />
<Link Source="25003:[2816..2827).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[2842..2863).5" Target="25007:[3901..4266).42" />
<Link Source="25003:[2842..2863).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[2878..2898).5" Target="25007:[3901..4266).44" />
<Link Source="25003:[2878..2898).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[2913..2931).5" Target="25007:[3901..4266).45" />
<Link Source="25003:[2913..2931).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[2946..2973).5" Target="25007:[3901..4266).46" />
<Link Source="25003:[2946..2973).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[2988..3030).5" Target="25007:[3901..4266).47" />
<Link Source="25003:[2988..3030).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3045..3076).5" Target="25007:[3901..4266).48" />
<Link Source="25003:[3045..3076).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3091..3116).5" Target="25007:[3901..4266).39" />
<Link Source="25003:[3091..3116).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3131..3176).5" Target="25007:[3901..4266).51" />
<Link Source="25003:[3131..3176).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3191..3238).5" Target="25007:[3901..4266).42" />
<Link Source="25003:[3191..3238).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3253..3278).5" Target="25007:[3901..4266).42" />
<Link Source="25003:[3253..3278).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[2773..3850).5" Target="25007:[3901..4266).42" />
<Link Source="25003:[2773..3850).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[912..917).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[912..917).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[950..967).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[950..967).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1000..1013).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1000..1013).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1048..1062).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1048..1062).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1099..1109).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1099..1109).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1151..1165).13" Target="25003:[2773..3850).5" />
<Link Source="25003:[1151..1165).13" Target="25007:[3908..4265).3" />
<Link Source="25003:[1276..1303).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1276..1303).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1336..1350).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1336..1350).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1383..1412).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1383..1412).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1460..1479).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1460..1479).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1527..1548).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1527..1548).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1673..1689).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1673..1689).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1713..1727).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1713..1727).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1891..1900).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1891..1900).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[1941..1960).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[1941..1960).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3304..3309).5" Target="25003:[2816..2827).5" />
<Link Source="25003:[3304..3309).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3304..3309).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3331..3348).5" Target="25003:[2842..2863).5" />
<Link Source="25003:[3331..3348).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3331..3348).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3382..3396).5" Target="25003:[2878..2898).5" />
<Link Source="25003:[3382..3396).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3382..3396).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3427..3437).5" Target="25003:[2913..2931).5" />
<Link Source="25003:[3427..3437).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3427..3437).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3464..3478).5" Target="25003:[2946..2973).5" />
<Link Source="25003:[3464..3478).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3464..3478).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3509..3525).5" Target="25003:[2988..3030).5" />
<Link Source="25003:[3509..3525).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3509..3525).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3562..3589).5" Target="25003:[3045..3076).5" />
<Link Source="25003:[3562..3589).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3562..3589).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3633..3682).5" Target="25003:[3091..3116).5" />
<Link Source="25003:[3633..3682).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3633..3647).5" Target="25003:[3633..3682).5" />
<Link Source="25003:[3633..3647).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3633..3647).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3696..3715).5" Target="25003:[3131..3176).5" />
<Link Source="25003:[3696..3715).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3696..3715).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3751..3772).5" Target="25003:[3191..3238).5" />
<Link Source="25003:[3751..3772).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3751..3772).5" Target="25007:[3908..4265).3" />
<Link Source="25003:[3810..3823).5" Target="25003:[3253..3278).5" />
<Link Source="25003:[3810..3823).5" Target="25003:[2773..3850).5" />
<Link Source="25003:[3810..3823).5" Target="25007:[3908..4265).3" />
<Link Source="25004:[19603..19877).26" Target="25007:[3901..4266).42" />
<Link Source="25004:[19603..19877).26" Target="28001:[58596..58648).1" />
<Link Source="28001:[57393..58688).82" Target="25004:[19603..19877).26" />
<Link Source="28001:[57393..58688).82" Target="25014:[387..448).1" />
<Link Source="28001:[58596..58672).1" Target="28001:[57393..58688).1" />
<Link Source="28001:[58596..58672).1" Target="25014:[387..448).1" />
<Link Source="28001:[58596..58672).2" Target="25014:[387..448).1" />
<Link Source="25003:[7407..7432).3" Target="28001:[57393..58688).1" />
<Link Source="25003:[7407..7432).3" Target="28001:[58596..58672).2" />
<Link Source="25003:[7364..7671).3" Target="28001:[57393..58688).82" />
<Link Source="25003:[7364..7671).3" Target="28001:[58596..58672).2" />
<Link Source="25003:[7458..7660).29" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).29" Target="25003:[3304..3309).5" />
<Link Source="25003:[7458..7660).29" Target="28001:[58596..58672).2" />
<Link Source="25003:[7458..7660).30" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).30" Target="25003:[3331..3348).5" />
<Link Source="25003:[7458..7660).30" Target="28001:[58596..58672).2" />
<Link Source="25003:[7458..7660).31" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).31" Target="25003:[3382..3396).5" />
<Link Source="25003:[7458..7660).31" Target="28001:[58596..58672).2" />
<Link Source="25003:[7458..7660).32" Target="25003:[7407..7432).3" />
<Link Source="25003:[7458..7660).32" Target="28001:[58596..58672).2" />
<Link Source="25003:[7458..7660).33" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).33" Target="25003:[3464..3478).5" />
<Link Source="25003:[7458..7660).33" Target="28001:[58596..58672).2" />
<Link Source="25003:[7458..7660).34" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).34" Target="25003:[3509..3525).5" />
<Link Source="25003:[7458..7660).34" Target="28001:[58596..58672).2" />
<Link Source="25003:[7458..7660).35" Target="28001:[58596..58672).2" />
<Link Source="25003:[7458..7660).37" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).37" Target="25003:[3633..3647).5" />
<Link Source="25003:[7458..7660).37" Target="28001:[58596..58672).2" />
<Link Source="25003:[7458..7660).38" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).38" Target="25003:[3696..3715).5" />
<Link Source="25003:[7458..7660).38" Target="28001:[58596..58672).2" />
<Link Source="25003:[7458..7660).39" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).39" Target="25003:[3751..3772).5" />
<Link Source="25003:[7458..7660).39" Target="28001:[58596..58672).2" />
<Link Source="25003:[7458..7660).40" Target="25003:[7364..7671).3" />
<Link Source="25003:[7458..7660).40" Target="25003:[3810..3823).5" />
<Link Source="25003:[7458..7660).40" Target="28001:[58596..58672).2" />
<Link Source="25003:[7465..7659).3" Target="28001:[58596..58672).2" />
<Link Source="25003:[2816..2827).6" Target="25003:[7458..7660).29" />
<Link Source="25003:[2816..2827).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[2842..2863).6" Target="25003:[7458..7660).30" />
<Link Source="25003:[2842..2863).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[2878..2898).6" Target="25003:[7458..7660).31" />
<Link Source="25003:[2878..2898).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[2913..2931).6" Target="25003:[7458..7660).32" />
<Link Source="25003:[2913..2931).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[2946..2973).6" Target="25003:[7458..7660).33" />
<Link Source="25003:[2946..2973).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[2988..3030).6" Target="25003:[7458..7660).34" />
<Link Source="25003:[2988..3030).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3045..3076).6" Target="25003:[7458..7660).35" />
<Link Source="25003:[3045..3076).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3091..3116).6" Target="25003:[7458..7660).37" />
<Link Source="25003:[3091..3116).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3131..3176).6" Target="25003:[7458..7660).38" />
<Link Source="25003:[3131..3176).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3191..3238).6" Target="25003:[7458..7660).39" />
<Link Source="25003:[3191..3238).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3253..3278).6" Target="25003:[7458..7660).40" />
<Link Source="25003:[3253..3278).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[2773..3850).6" Target="25003:[7458..7660).35" />
<Link Source="25003:[2773..3850).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[912..917).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[912..917).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[950..967).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[950..967).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1000..1013).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1000..1013).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1048..1062).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1048..1062).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1099..1109).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1099..1109).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1151..1165).16" Target="25003:[2773..3850).6" />
<Link Source="25003:[1151..1165).16" Target="25003:[7465..7659).3" />
<Link Source="25003:[1276..1303).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1276..1303).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1336..1350).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1336..1350).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1383..1412).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1383..1412).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1460..1479).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1460..1479).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1527..1548).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1527..1548).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1673..1689).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1673..1689).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1713..1727).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1713..1727).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1891..1900).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1891..1900).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[1941..1960).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[1941..1960).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3427..3437).6" Target="25003:[2913..2931).6" />
<Link Source="25003:[3427..3437).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[3427..3437).6" Target="25003:[7465..7659).3" />
<Link Source="25003:[3562..3589).6" Target="25003:[3045..3076).6" />
<Link Source="25003:[3562..3589).6" Target="25003:[2773..3850).6" />
<Link Source="25003:[3562..3589).6" Target="25003:[7465..7659).3" />
<Link Source="28001:[57393..58688).88" Target="25003:[7458..7660).35" />
<Link Source="28001:[57393..58688).88" Target="25014:[387..448).1" />
<Link Source="28001:[57412..58687).1" Target="28001:[57393..58688).48" />
<Link Source="28001:[57412..58687).1" Target="28001:[57393..58688).1" />
<Link Source="28001:[57412..58687).1" Target="25014:[387..448).1" />
<Link Source="28001:[57412..58687).2" Target="28001:[57393..58688).68" />
<Link Source="28001:[57412..58687).2" Target="28001:[57393..58688).1" />
<Link Source="28001:[57412..58687).2" Target="25014:[387..448).1" />
<Link Source="28001:[57412..58687).3" Target="28001:[57393..58688).88" />
<Link Source="28001:[57412..58687).3" Target="28001:[57393..58688).1" />
<Link Source="28001:[57412..58687).3" Target="25014:[387..448).1" />
<Link Source="28001:[57412..58687).4" Target="25014:[387..448).1" />
<Link Source="25002:[4263..4282).1" Target="28001:[57393..58688).10" />
<Link Source="25002:[4263..4282).1" Target="28001:[57412..58687).4" />
<Link Source="25002:[4284..4323).1" Target="28001:[57393..58688).1" />
<Link Source="25002:[4284..4323).1" Target="28001:[57412..58687).4" />
<Link Source="25002:[4395..4432).1" Target="28001:[57412..58687).4" />
<Link Source="10345:[975..1032).1" Target="EXTERNAL" />
<Link Source="10345:[1047..1101).1" Target="EXTERNAL" />
<Link Source="10345:[1116..1166).1" Target="EXTERNAL" />
<Link Source="10345:[1753..1782).1" Target="10345:[956..960).1" />
<Link Source="10345:[1753..1782).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[975..1032).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[1047..1101).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[1116..1166).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[1181..1185).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1723..2412).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[1797..1861).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[2064..2099).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[930..1186).1" />
<Link Source="10345:[2113..2145).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2113..2145).1" Target="EXTERNAL" />
<Link Source="10345:[2113..2145).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2159..2192).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2159..2192).1" Target="EXTERNAL" />
<Link Source="10345:[2159..2192).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1753..1782).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1797..1861).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[2013..2038).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[930..1186).1" />
<Link Source="10345:[922..1186).1" Target="10345:[930..1186).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4263..4282).1" />
<Link Source="25002:[4395..4432).3" Target="28001:[57393..58688).10" />
<Link Source="25002:[4395..4432).3" Target="28001:[57412..58687).4" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13144..13184).1" Target="10345:[13089..13118).1" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).2" Target="10345:[13144..13184).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).2" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).4" Target="10345:[13089..13118).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).4" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[922..1186).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[13200..13326).2" />
<Link Source="25002:[4395..4432).6" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).6" Target="10345:[13298..13311).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2208..2220).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2331..2343).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2249..2266).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2296..2307).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2372..2390).1" />
<Link Source="25002:[4395..4432).6" Target="EXTERNAL" />
<Link Source="25002:[4395..4432).6" Target="28001:[57412..58687).4" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24591..26243).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24636..24685).1" Target="10345:[24530..24565).1" />
<Link Source="10345:[24636..24685).1" Target="25002:[4395..4432).6" />
<Link Source="10345:[24636..24685).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24636..24685).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26025..26098).1" Target="EXTERNAL" />
<Link Source="10345:[26025..26098).1" Target="10345:[24768..26149).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24530..24565).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[24507..26254).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26025..26098).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).2" />
<Link Source="10345:[26169..26228).3" Target="10345:[24591..26243).1" />
<Link Source="10345:[24932..25204).1" Target="EXTERNAL" />
<Link Source="10345:[24932..25204).1" Target="10345:[26169..26228).3" />
<Link Source="10345:[25064..25074).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[26266..28173).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[922..1186).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26365..26372).1" Target="10345:[26314..26387).1" />
<Link Source="10345:[25064..25075).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25109..25173).1" Target="EXTERNAL" />
<Link Source="10345:[25109..25173).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25858..25865).1" Target="10345:[25109..25173).1" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[537..568).1" Target="10298:[471..492).1" />
<Link Source="10298:[537..568).1" Target="10298:[494..511).1" />
<Link Source="10298:[537..568).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).10" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).10" Target="10298:[537..568).1" />
<Link Source="25002:[4395..4432).10" Target="10345:[25109..25173).1" />
<Link Source="25002:[4395..4432).10" Target="28001:[57412..58687).4" />
<Link Source="10292:[1704..1721).1" Target="10292:[1720..1721).1" />
<Link Source="10292:[1752..1769).1" Target="10292:[1768..1769).1" />
<Link Source="10292:[1963..1993).1" Target="10292:[1992..1993).1" />
<Link Source="10306:[388923..389344).1" Target="10306:[388969..389344).1" />
<Link Source="10306:[389480..389543).1" Target="EXTERNAL" />
<Link Source="10306:[389562..389646).1" Target="EXTERNAL" />
<Link Source="10306:[389708..389839).1" Target="EXTERNAL" />
<Link Source="10306:[389665..389839).1" Target="10306:[389708..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389480..389543).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389562..389646).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389665..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389438..389840).1" />
<Link Source="10306:[389401..389840).1" Target="10306:[389438..389840).17" />
<Link Source="10310:[84458..84496).1" Target="10310:[84494..84496).1" />
<Link Source="10316:[772..830).1" Target="10316:[802..830).1" />
<Link Source="10319:[69620..69663).1" Target="10319:[69643..69663).1" />
<Link Source="10319:[69727..69774).1" Target="10319:[69752..69774).1" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31055..31080).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31095..31126).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).2" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).4" />
<Link Source="10286:[31152..31210).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31515..31598).1" Target="10286:[30969..31000).1" />
<Link Source="10286:[31515..31598).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).1" Target="10286:[30925..30954).1" />
<Link Source="10286:[31614..31710).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).2" Target="10286:[30969..31000).1" />
<Link Source="10286:[31614..31710).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).3" Target="10286:[31015..31040).1" />
<Link Source="10286:[31614..31710).3" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).4" Target="10286:[31055..31080).1" />
<Link Source="10286:[31614..31710).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).5" Target="10286:[31095..31126).1" />
<Link Source="10286:[31614..31710).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).6" Target="10286:[31515..31598).1" />
<Link Source="10286:[31614..31710).6" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31709).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31710).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31710).2" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31710).3" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31710).4" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31710).5" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31710).6" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80188..80212).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80162..80186).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).2" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).4" />
<Link Source="10319:[80263..80315).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80331..80364).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).1" Target="10319:[80080..80109).1" />
<Link Source="10319:[80378..80479).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).2" Target="10319:[80111..80133).1" />
<Link Source="10319:[80378..80479).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).3" Target="10319:[80331..80364).1" />
<Link Source="10319:[80378..80479).3" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).4" Target="10319:[80214..80237).1" />
<Link Source="10319:[80378..80479).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80400..80478).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80378..80479).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80874..80896).1" Target="10319:[80378..80479).2" />
<Link Source="10319:[80874..80896).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80898..80931).1" Target="10319:[80378..80479).3" />
<Link Source="10319:[80898..80931).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80933..80956).1" Target="10319:[80378..80479).4" />
<Link Source="10319:[80933..80956).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80874..80896).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).2" Target="25002:[4395..4432).10" />
<Link Source="10319:[80982..81047).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).3" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2901..2932).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3483..3502).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).1" Target="10060:[4243..4274).1" />
<Link Source="10060:[3518..4328).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4344..4356).1" Target="10319:[80982..81047).3" />
<Link Source="10319:[80982..81047).8" Target="10060:[3483..3502).1" />
<Link Source="10319:[80982..81047).8" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).8" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2841..2854).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2856..2875).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).3" Target="10060:[2841..2854).2" />
<Link Source="10060:[2901..2932).3" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[2948..3467).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[3553..4223).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[4243..4274).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).2" Target="10060:[4243..4274).2" />
<Link Source="10060:[3518..4328).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).3" Target="10060:[4243..4274).2" />
<Link Source="10060:[3553..4223).3" Target="10060:[3518..4328).2" />
<Link Source="10319:[80982..81047).15" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).2" />
<Link Source="10319:[80982..81047).15" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80982..81047).15" />
<Link Source="10319:[81063..82500).2" Target="10319:[81063..82500).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[81129..81207).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[81129..81207).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81129..81207).2" Target="10319:[81063..82500).2" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).7" Target="10060:[2841..2854).4" />
<Link Source="10060:[2901..2932).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).4" Target="10060:[2841..2854).4" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[3483..3502).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).6" Target="10060:[4243..4274).6" />
<Link Source="10060:[3518..4328).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2841..2854).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).9" Target="10060:[2841..2854).5" />
<Link Source="10060:[2901..2932).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).5" Target="10060:[2841..2854).5" />
<Link Source="10060:[2948..3467).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[3553..4223).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[4243..4274).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).7" Target="10060:[4243..4274).7" />
<Link Source="10060:[3518..4328).7" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81225..82039).1" />
<Link Source="10319:[81225..82039).2" Target="10319:[81063..82500).2" />
<Link Source="10319:[82516..82536).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[82516..82536).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80495..80738).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[80495..80738).2" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).1" Target="10319:[82516..82536).1" />
<Link Source="10319:[80754..80774).1" Target="10286:[31614..31709).1" />
<Link Source="10060:[2841..2854).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).17" Target="10060:[2841..2854).9" />
<Link Source="10060:[2901..2932).17" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).9" Target="10060:[2841..2854).9" />
<Link Source="10060:[2948..3467).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[3553..4223).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[4243..4274).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).11" Target="10060:[4243..4274).11" />
<Link Source="10060:[3518..4328).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[2841..2854).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2901..2932).19" Target="10060:[2841..2854).10" />
<Link Source="10060:[2901..2932).19" Target="10060:[3483..3502).7" />
<Link Source="10060:[2948..3467).10" Target="10060:[2841..2854).10" />
<Link Source="10060:[2948..3467).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[3553..4223).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[3553..4223).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[4243..4274).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[4243..4274).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[3518..4328).12" Target="10060:[4243..4274).12" />
<Link Source="10060:[3518..4328).12" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).4" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).5" Target="10319:[81225..82039).4" />
<Link Source="10319:[81225..82039).5" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[80495..80738).5" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).2" Target="10319:[82516..82536).2" />
<Link Source="10319:[80754..80774).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[81225..82039).7" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10319:[80400..80478).1" />
<Link Source="10319:[80754..80774).3" Target="10319:[82516..82536).3" />
<Link Source="10319:[80754..80774).3" Target="10286:[31614..31709).1" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1715..1727).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1715..1727).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1773..1785).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1773..1785).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1824..1835).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1824..1835).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1883..1903).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1883..1903).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1936..1956).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1936..1956).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2247..2272).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2247..2272).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2412..2424).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2339..2360).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2453..2464).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2362..2386).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2492..2512).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2658).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).3" />
<Link Source="10076:[2551..2658).5" Target="10076:[1715..1727).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2412..2424).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2453..2464).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[1883..1903).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2492..2512).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2247..2272).1" />
<Link Source="10076:[2551..2658).5" Target="10060:[3483..3502).7" />
<Link Source="10076:[2551..2658).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2576).1" Target="10076:[2551..2658).5" />
<Link Source="10076:[2551..2576).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2576).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3299).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[3236..3299).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3236..3248).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[3315..3375).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[3338..3374).1" Target="25002:[4395..4432).1" />
<Link Source="10325:[645..674).1" Target="10076:[3315..3375).1" />
<Link Source="10325:[645..674).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).1" Target="10076:[3315..3375).2" />
<Link Source="10325:[616..730).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[696..707).1" Target="10325:[645..674).1" />
<Link Source="10325:[696..707).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).2" Target="10076:[3338..3374).1" />
<Link Source="10286:[939..968).1" Target="10325:[696..707).1" />
<Link Source="10286:[939..968).1" Target="10325:[616..730).2" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).1" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).2" />
<Link Source="10286:[726..773).1" Target="10286:[923..1219).1" />
<Link Source="10286:[726..773).1" Target="10325:[616..730).2" />
<Link Source="10286:[815..820).1" Target="10286:[923..1219).1" />
<Link Source="10286:[815..820).1" Target="10325:[616..730).2" />
<Link Source="10286:[2975..3015).1" Target="10286:[923..1219).1" />
<Link Source="10286:[2975..3015).1" Target="10325:[616..730).2" />
<Link Source="10286:[17802..17818).1" Target="10286:[923..1219).1" />
<Link Source="10286:[17802..17818).1" Target="10325:[616..730).2" />
<Link Source="10286:[18200..18223).1" Target="10286:[923..1219).1" />
<Link Source="10286:[18200..18223).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).2" Target="10286:[939..968).1" />
<Link Source="10286:[994..1034).2" Target="10286:[994..1034).1" />
<Link Source="10286:[994..1034).2" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1048..1096).1" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).2" Target="10286:[1048..1096).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[726..773).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[815..820).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[2975..3015).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[17802..17818).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[18200..18223).1" />
<Link Source="10286:[1048..1096).2" Target="10325:[616..730).2" />
<Link Source="10286:[1110..1120).1" Target="10286:[939..968).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2658).5" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2576).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[3236..3248).1" />
<Link Source="10286:[1110..1120).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1110..1120).1" Target="10325:[616..730).2" />
<Link Source="10286:[1177..1193).1" Target="10286:[939..968).1" />
<Link Source="10286:[1177..1193).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1177..1193).1" Target="10325:[616..730).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[3315..3375).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3315..3335).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).19" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).19" Target="10076:[2551..2658).5" />
<Link Source="25002:[4395..4432).19" Target="10076:[2551..2576).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3236..3248).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3315..3335).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3236..3299).1" />
<Link Source="25002:[4395..4432).19" Target="10286:[1048..1096).2" />
<Link Source="25002:[4395..4432).19" Target="10286:[1110..1120).1" />
<Link Source="25002:[4395..4432).19" Target="10286:[1177..1193).1" />
<Link Source="25002:[4395..4432).19" Target="28001:[57412..58687).4" />
<Link Source="10076:[7557..7578).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[7557..7578).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[7580..7600).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[7580..7600).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[7524..8834).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[7524..8834).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[7626..8823).1" Target="10076:[7557..7578).1" />
<Link Source="10076:[7626..8823).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[7626..8823).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[8351..8419).1" Target="10076:[7524..8834).1" />
<Link Source="10076:[8351..8419).1" Target="10076:[7626..8823).1" />
<Link Source="10076:[8351..8419).3" Target="10076:[7626..8823).1" />
<Link Source="10077:[909..930).1" Target="10076:[8351..8419).1" />
<Link Source="10077:[909..930).1" Target="10076:[8351..8419).3" />
<Link Source="10077:[879..998).1" Target="10076:[8351..8419).1" />
<Link Source="10077:[879..998).1" Target="10076:[8351..8419).3" />
<Link Source="10077:[879..998).2" Target="10076:[8351..8419).3" />
<Link Source="10077:[698..707).1" Target="10077:[879..998).2" />
<Link Source="10077:[698..707).1" Target="10076:[8351..8419).3" />
<Link Source="10077:[747..768).1" Target="10077:[879..998).2" />
<Link Source="10077:[747..768).1" Target="10076:[8351..8419).3" />
<Link Source="10077:[798..808).1" Target="10077:[879..998).2" />
<Link Source="10077:[798..808).1" Target="10076:[8351..8419).3" />
<Link Source="10077:[854..862).1" Target="10077:[879..998).2" />
<Link Source="10077:[854..862).1" Target="10076:[8351..8419).3" />
<Link Source="10077:[964..972).1" Target="10077:[909..930).1" />
<Link Source="10077:[964..972).1" Target="10077:[879..998).2" />
<Link Source="10077:[964..972).1" Target="10076:[8351..8419).3" />
<Link Source="10076:[8351..8419).4" Target="10076:[8351..8419).1" />
<Link Source="10076:[8351..8419).4" Target="10077:[879..998).2" />
<Link Source="10076:[8351..8419).4" Target="10077:[698..707).1" />
<Link Source="10076:[8351..8419).4" Target="10077:[747..768).1" />
<Link Source="10076:[8351..8419).4" Target="10077:[798..808).1" />
<Link Source="10076:[8351..8419).4" Target="10077:[854..862).1" />
<Link Source="10076:[8351..8419).4" Target="10077:[964..972).1" />
<Link Source="10076:[8351..8419).4" Target="10076:[7626..8823).1" />
<Link Source="10076:[8445..8479).1" Target="10076:[7626..8823).1" />
<Link Source="10076:[8445..8478).1" Target="10076:[7626..8823).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[8445..8479).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1053..1090).1" Target="10076:[8445..8479).1" />
<Link Source="10077:[1053..1090).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1092..1108).1" Target="10076:[8445..8479).1" />
<Link Source="10077:[1092..1108).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1014..1370).1" Target="10076:[8351..8419).4" />
<Link Source="10077:[1014..1370).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1142..1210).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1053..1090).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).2" Target="10076:[8445..8478).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1092..1108).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).4" Target="10076:[8445..8478).1" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).2" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).4" />
<Link Source="10077:[1142..1210).5" Target="10076:[8445..8478).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1039..1051).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1230..1239).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1053..1090).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1269..1290).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1092..1108).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1332..1342).1" Target="10076:[8445..8478).1" />
<Link Source="10076:[8505..8617).1" Target="10076:[7557..7578).1" />
<Link Source="10076:[8505..8617).1" Target="10076:[7626..8823).1" />
<Link Source="10076:[8505..8617).2" Target="10076:[7580..7600).1" />
<Link Source="10076:[8505..8617).2" Target="10076:[7626..8823).1" />
<Link Source="10076:[8607..8615).1" Target="10076:[7626..8823).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[7524..8834).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[8607..8615).1" />
<Link Source="10076:[3628..3685).1" Target="10076:[3592..3700).1" />
<Link Source="10076:[3628..3685).1" Target="10076:[8351..8419).4" />
<Link Source="10076:[3628..3685).1" Target="10077:[1230..1239).1" />
<Link Source="10076:[3628..3685).1" Target="10077:[1269..1290).1" />
<Link Source="10076:[3628..3685).1" Target="10077:[1332..1342).1" />
<Link Source="10076:[3628..3685).1" Target="EXTERNAL" />
<Link Source="10076:[3628..3685).1" Target="10076:[8607..8615).1" />
<Link Source="10076:[8505..8617).3" Target="10076:[3628..3685).1" />
<Link Source="10076:[8505..8617).3" Target="10076:[7626..8823).1" />
<Link Source="10076:[8521..8616).1" Target="10076:[7626..8823).1" />
<Link Source="10077:[39298..39335).1" Target="10076:[8505..8617).1" />
<Link Source="10077:[39298..39335).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39337..39349).1" Target="10076:[8505..8617).2" />
<Link Source="10077:[39337..39349).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39351..39364).1" Target="10076:[8505..8617).3" />
<Link Source="10077:[39351..39364).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39261..44091).1" Target="10076:[8351..8419).4" />
<Link Source="10077:[39261..44091).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39421..39431).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[1641..1732).1" />
<Link Source="10077:[1685..1713).1" Target="10076:[8351..8419).4" />
<Link Source="10077:[1685..1713).1" Target="10077:[1230..1239).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[1269..1290).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[1332..1342).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[1685..1713).1" />
<Link Source="10077:[39398..39590).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39398..39590).2" Target="10076:[8521..8616).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39298..39335).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39398..39590).1" />
<Link Source="10077:[39398..39590).5" Target="10076:[8521..8616).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39337..39349).1" />
<Link Source="10077:[39626..39633).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39626..39633).1" />
<Link Source="10077:[39610..39829).1" Target="EXTERNAL" />
<Link Source="10077:[39610..39829).1" Target="10077:[39766..39774).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39298..39335).1" />
<Link Source="10077:[39877..39936).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39610..39829).1" />
<Link Source="10077:[39877..39936).2" Target="10076:[8521..8616).1" />
<Link Source="10077:[39887..39935).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[39877..39936).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[39887..39935).1" />
<Link Source="10077:[44182..44197).1" Target="10077:[39877..39936).2" />
<Link Source="10077:[44182..44197).1" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[44182..44197).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[44159..44180).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[39887..39935).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[44182..44197).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[39887..39935).1" />
<Link Source="10077:[44335..44374).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[44342..44373).1" Target="10077:[39887..39935).1" />
<Link Source="10076:[875..902).1" Target="10077:[44335..44374).1" />
<Link Source="10076:[875..902).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[904..919).1" Target="10077:[44335..44374).2" />
<Link Source="10076:[904..919).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[853..1034).1" Target="10077:[44335..44374).3" />
<Link Source="10076:[853..1034).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[953..968).1" Target="10076:[875..902).1" />
<Link Source="10076:[953..968).1" Target="10076:[853..1034).1" />
<Link Source="10076:[953..968).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[904..919).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[853..1034).1" />
<Link Source="10076:[1000..1010).1" Target="10077:[44342..44373).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[44335..44374).3" />
<Link Source="10077:[39877..39936).3" Target="10076:[8521..8616).1" />
<Link Source="10077:[39956..39970).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39993..40004).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[39993..40004).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[2066..2158).1" />
<Link Source="10077:[2110..2139).1" Target="10076:[8351..8419).4" />
<Link Source="10077:[2110..2139).1" Target="10077:[1230..1239).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[1269..1290).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[1332..1342).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[39993..40004).1" />
<Link Source="10077:[39988..44042).1" Target="10077:[2110..2139).1" />
<Link Source="10077:[39988..44042).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39988..44042).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[39988..44042).2" Target="10076:[8521..8616).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39956..39970).1" />
<Link Source="10077:[39988..44042).3" Target="10076:[8521..8616).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).3" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).1" />
<Link Source="10077:[39988..44042).4" Target="10076:[953..968).1" />
<Link Source="10077:[39988..44042).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[39988..44042).4" Target="10076:[8351..8419).4" />
<Link Source="10077:[39988..44042).4" Target="10077:[1230..1239).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[1269..1290).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[1332..1342).1" />
<Link Source="10077:[39988..44042).4" Target="10076:[8521..8616).1" />
<Link Source="10077:[39988..44042).5" Target="10076:[8521..8616).1" />
<Link Source="10076:[1241..1380).1" Target="10077:[39988..44042).4" />
<Link Source="10076:[1241..1380).1" Target="10077:[39988..44042).5" />
<Link Source="10076:[1307..1365).1" Target="10076:[1241..1380).1" />
<Link Source="10076:[1307..1365).1" Target="10077:[39988..44042).4" />
<Link Source="10076:[1307..1365).1" Target="10077:[39988..44042).5" />
<Link Source="10077:[40084..40108).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[1843..1943).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1843..1943).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[1843..1943).1" />
<Link Source="10077:[1887..1924).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[1887..1924).1" />
<Link Source="10077:[40075..40109).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[40133..43967).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[40133..43967).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[43302..43313).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[1456..1548).1" />
<Link Source="10077:[1500..1529).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[1500..1529).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40075..40109).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[39298..39335).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[39337..39349).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).6" Target="10077:[40133..43967).1" />
<Link Source="10077:[43280..43373).1" Target="10077:[40133..43967).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43271..43374).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1459..1470).1" Target="10077:[43271..43374).3" />
<Link Source="10346:[1459..1470).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1472..1506).1" Target="10077:[43271..43374).4" />
<Link Source="10346:[1472..1506).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1508..1520).1" Target="10077:[43271..43374).5" />
<Link Source="10346:[1508..1520).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).1" Target="10077:[43271..43374).6" />
<Link Source="10346:[1399..2435).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1542..1546).1" Target="10346:[1459..1470).1" />
<Link Source="10346:[1542..1546).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).2" Target="10077:[43280..43373).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1542..1546).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).1" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1260..1291).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).2" Target="10286:[1247..1258).1" />
<Link Source="10286:[1317..1350).2" Target="10286:[1317..1350).1" />
<Link Source="10286:[1317..1350).2" Target="10346:[1399..2435).2" />
<Link Source="10286:[1364..1368).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1364..1368).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1364..1368).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1390..1400).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1390..1400).1" Target="10076:[1307..1365).1" />
<Link Source="10286:[1390..1400).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1390..1400).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1428..1444).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1428..1444).1" Target="10076:[1307..1365).1" />
<Link Source="10286:[1428..1444).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1428..1444).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1478..1494).1" Target="10286:[1260..1291).1" />
<Link Source="10286:[1478..1494).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1478..1494).1" Target="10346:[1399..2435).2" />
<Link Source="10346:[858..868).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[858..868).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[932..947).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[932..947).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[974..986).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[974..986).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1017..1033).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1017..1033).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1074..1100).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1074..1100).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1426..1457).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1572..1612).1" />
<Link Source="10346:[1572..1612).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1472..1506).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1626..1666).1" />
<Link Source="10346:[1626..1666).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1426..1457).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1682..1692).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1719..1832).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1719..1832).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1734).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1848..2424).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1848..2424).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1894..2409).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1894..2409).1" Target="10076:[1307..1365).1" />
<Link Source="10346:[1894..2409).1" Target="10346:[1848..2424).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1994..2057).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1399..2435).1" />
<Link Source="10077:[43503..43514).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[1456..1548).2" />
<Link Source="10077:[1500..1529).2" Target="10346:[1894..2409).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[43402..43944).1" Target="10077:[1500..1529).2" />
<Link Source="10077:[43402..43944).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[39298..39335).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43991..44002).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[43991..44002).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).1" Target="10077:[2110..2139).2" />
<Link Source="10077:[43991..44023).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[43991..44023).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[43991..44023).2" Target="10076:[1307..1365).1" />
<Link Source="10077:[43991..44023).3" Target="10077:[43271..43374).6" />
<Link Source="10077:[43991..44023).3" Target="10076:[1307..1365).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).2" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).3" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).1" />
<Link Source="10077:[43991..44023).4" Target="10076:[953..968).1" />
<Link Source="10077:[43991..44023).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1428..1444).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1390..1400).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1364..1368).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1478..1494).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1231..1520).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1682..1692).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1734).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[974..986).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1017..1033).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1074..1100).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[2079..2092).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1832).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1894..2409).1" />
<Link Source="10077:[43991..44023).4" Target="10076:[1307..1365).1" />
<Link Source="10077:[43991..44023).5" Target="10076:[1307..1365).1" />
<Link Source="10077:[44062..44076).1" Target="10077:[43271..43374).6" />
<Link Source="10077:[44062..44076).1" Target="10076:[8521..8616).1" />
<Link Source="10076:[8643..8683).1" Target="10076:[8351..8419).4" />
<Link Source="10076:[8643..8683).1" Target="10076:[7626..8823).1" />
<Link Source="10076:[8643..8683).2" Target="10076:[7524..8834).1" />
<Link Source="10076:[8643..8683).2" Target="10077:[43991..44023).4" />
<Link Source="10076:[8643..8683).2" Target="10076:[8643..8683).1" />
<Link Source="10076:[8643..8683).2" Target="10076:[7626..8823).1" />
<Link Source="10076:[8709..8723).1" Target="10077:[44062..44076).1" />
<Link Source="10076:[8709..8723).1" Target="10076:[7626..8823).1" />
<Link Source="25002:[4395..4432).22" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).22" Target="10076:[8709..8723).1" />
<Link Source="25002:[4395..4432).22" Target="10076:[8643..8683).2" />
<Link Source="25002:[4395..4432).22" Target="28001:[57412..58687).4" />
<Link Source="10346:[3460..3499).1" Target="25002:[4395..4432).3" />
<Link Source="10346:[3460..3499).1" Target="25002:[4395..4432).1" />
<Link Source="10346:[3423..3863).1" Target="25002:[4395..4432).3" />
<Link Source="10346:[3423..3863).1" Target="25002:[4395..4432).1" />
<Link Source="10346:[3525..3638).1" Target="25002:[4395..4432).1" />
<Link Source="10346:[3525..3638).2" Target="10346:[3423..3863).1" />
<Link Source="10346:[3525..3638).2" Target="25002:[4395..4432).22" />
<Link Source="10346:[3525..3638).2" Target="10346:[3525..3638).1" />
<Link Source="10346:[3525..3638).2" Target="25002:[4395..4432).1" />
<Link Source="10346:[3654..3816).1" Target="25002:[4395..4432).1" />
<Link Source="10346:[3654..3816).2" Target="10346:[3423..3863).1" />
<Link Source="10346:[3654..3816).2" Target="25002:[4395..4432).22" />
<Link Source="10346:[3654..3816).2" Target="10346:[3654..3816).1" />
<Link Source="10346:[3654..3816).2" Target="25002:[4395..4432).1" />
<Link Source="10346:[3712..3801).1" Target="10346:[3423..3863).1" />
<Link Source="10346:[3712..3801).1" Target="25002:[4395..4432).22" />
<Link Source="10346:[3712..3801).1" Target="10346:[3654..3816).2" />
<Link Source="10346:[3712..3801).2" Target="10346:[3460..3499).1" />
<Link Source="10346:[3712..3801).2" Target="10346:[3654..3816).2" />
<Link Source="10346:[3712..3801).4" Target="10346:[3654..3816).2" />
<Link Source="10345:[2889..2923).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2889..2923).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[2938..2962).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2938..2962).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[2977..3016).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2977..3016).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3031..3043).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[3031..3043).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3069..3118).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3102..3117).1" Target="10345:[3069..3118).1" />
<Link Source="10345:[3102..3117).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3132..3193).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3171..3192).1" Target="10345:[3132..3193).1" />
<Link Source="10345:[3171..3192).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3207..4163).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[3207..4163).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[3207..4163).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3299..3362).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[3299..3362).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3476..3483).1" Target="10345:[3031..3043).1" />
<Link Source="10345:[3476..3483).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3476..3483).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3530..3552).1" />
<Link Source="10345:[3571..3619).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3571..3619).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).2" Target="10345:[3458..3553).1" />
<Link Source="10345:[4179..4307).2" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).2" Target="10345:[4179..4307).1" />
<Link Source="10345:[4179..4307).2" Target="10346:[3712..3801).4" />
<Link Source="10345:[4524..4562).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4578..4615).1" Target="10345:[2938..2962).1" />
<Link Source="10345:[4578..4615).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[4578..4615).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4631..4714).1" Target="10345:[3571..3619).1" />
<Link Source="10345:[4631..4714).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4631..4714).2" Target="10345:[2938..2962).1" />
<Link Source="10345:[4631..4714).2" Target="10346:[3712..3801).4" />
<Link Source="10345:[4631..4714).3" Target="10345:[4524..4562).1" />
<Link Source="10345:[4631..4714).3" Target="10346:[3712..3801).4" />
<Link Source="10345:[4651..4713).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[22236..22285).1" Target="10345:[4631..4714).1" />
<Link Source="10345:[22236..22285).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[22300..22324).1" Target="10345:[4631..4714).2" />
<Link Source="10345:[22300..22324).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[22339..22364).1" Target="10345:[4631..4714).3" />
<Link Source="10345:[22339..22364).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[22390..22441).1" Target="10345:[22300..22324).1" />
<Link Source="10345:[22390..22441).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[22390..22441).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[22457..22528).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[22544..23796).1" Target="10345:[22236..22285).1" />
<Link Source="10345:[22544..23796).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[22544..23796).2" Target="10345:[22544..23796).1" />
<Link Source="10345:[22544..23796).2" Target="10345:[3207..4163).1" />
<Link Source="10345:[22544..23796).2" Target="10345:[3530..3552).1" />
<Link Source="10345:[22544..23796).2" Target="10345:[4651..4713).1" />
<Link Source="10345:[23812..23848).1" Target="10345:[22457..22528).1" />
<Link Source="10345:[23812..23848).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[4631..4714).4" Target="10345:[23812..23848).1" />
<Link Source="10345:[4631..4714).4" Target="10346:[3712..3801).4" />
<Link Source="10345:[4728..4802).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4816..4896).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4910..12753).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4910..12753).2" Target="10345:[3458..3553).1" />
<Link Source="10345:[4910..12753).2" Target="10345:[3207..4163).1" />
<Link Source="10345:[4910..12753).2" Target="10345:[4910..12753).1" />
<Link Source="10345:[4910..12753).2" Target="10346:[3712..3801).4" />
<Link Source="10345:[5177..5197).1" Target="10345:[4910..12753).2" />
<Link Source="10345:[5215..6073).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[5215..6073).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[5215..6073).1" Target="10345:[3530..3552).1" />
<Link Source="10345:[5215..6073).1" Target="EXTERNAL" />
<Link Source="10345:[5215..6073).1" Target="10345:[4910..12753).2" />
<Link Source="10345:[5535..5955).1" Target="10345:[5215..6073).1" />
<Link Source="10345:[5535..5955).2" Target="10345:[4631..4714).4" />
<Link Source="10345:[5535..5955).2" Target="10345:[23812..23848).1" />
<Link Source="10345:[5535..5955).2" Target="10345:[5535..5955).1" />
<Link Source="10345:[5535..5955).2" Target="10345:[5215..6073).1" />
<Link Source="10345:[5549..5574).1" Target="10345:[5535..5955).2" />
<Link Source="10345:[5549..5574).1" Target="10345:[5215..6073).1" />
<Link Source="10345:[6014..6030).1" Target="10345:[5215..6073).1" />
<Link Source="10346:[3331..3400).1" Target="10345:[2938..2962).1" />
<Link Source="10346:[3331..3400).1" Target="10345:[6014..6030).1" />
<Link Source="10346:[3367..3385).1" Target="10346:[3331..3400).1" />
<Link Source="10346:[3367..3385).1" Target="10345:[3207..4163).1" />
<Link Source="10346:[3367..3385).1" Target="10345:[6014..6030).1" />
<Link Source="10345:[5977..6054).1" Target="10346:[3367..3385).1" />
<Link Source="10345:[5977..6054).1" Target="10345:[5215..6073).1" />
<Link Source="10345:[5977..6054).3" Target="10345:[2938..2962).1" />
<Link Source="10345:[5977..6054).3" Target="10345:[3207..4163).1" />
<Link Source="10345:[5977..6054).3" Target="10345:[5215..6073).1" />
<Link Source="10345:[5977..6054).4" Target="10345:[5549..5574).1" />
<Link Source="10345:[5977..6054).4" Target="10345:[5215..6073).1" />
<Link Source="10345:[5977..6054).5" Target="10345:[5215..6073).1" />
<Link Source="10345:[5992..6053).1" Target="10345:[5215..6073).1" />
<Link Source="10346:[2571..2602).1" Target="10345:[5977..6054).1" />
<Link Source="10346:[2571..2602).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2604..2615).1" Target="10345:[5977..6054).3" />
<Link Source="10346:[2604..2615).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2617..2639).1" Target="10345:[5977..6054).4" />
<Link Source="10346:[2617..2639).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2544..2854).1" Target="10345:[5977..6054).5" />
<Link Source="10346:[2544..2854).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2661..2665).1" Target="10346:[2604..2615).1" />
<Link Source="10346:[2661..2665).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2544..2854).2" Target="10345:[5992..6053).1" />
<Link Source="10286:[1247..1258).2" Target="10346:[2661..2665).1" />
<Link Source="10286:[1247..1258).2" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).5" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1247..1258).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1317..1350).5" />
<Link Source="10286:[1317..1350).6" Target="10346:[2544..2854).2" />
<Link Source="10346:[858..868).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[858..868).2" Target="10345:[5992..6053).1" />
<Link Source="10346:[932..947).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[932..947).2" Target="10345:[5992..6053).1" />
<Link Source="10346:[2691..2750).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2571..2602).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2691..2750).1" />
<Link Source="10346:[2691..2750).2" Target="10345:[5992..6053).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2571..2602).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2766..2776).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2803..2843).1" Target="10346:[2617..2639).1" />
<Link Source="10346:[2803..2843).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2803..2815).1" Target="10346:[2803..2843).1" />
<Link Source="10346:[2803..2815).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2803..2815).1" Target="10345:[5992..6053).1" />
<Link Source="10345:[6093..6197).1" Target="10345:[4910..12753).2" />
<Link Source="10345:[6217..12698).1" Target="10345:[3458..3553).1" />
<Link Source="10345:[6217..12698).1" Target="10345:[4910..12753).2" />
<Link Source="10345:[6305..6346).1" Target="10345:[6217..12698).1" />
<Link Source="10345:[6305..6346).2" Target="10345:[4578..4615).1" />
<Link Source="10345:[6305..6346).2" Target="10345:[6305..6346).1" />
<Link Source="10345:[6305..6346).2" Target="10345:[3207..4163).1" />
<Link Source="10345:[6305..6346).2" Target="10345:[3530..3552).1" />
<Link Source="10345:[6305..6346).2" Target="10345:[6217..12698).1" />
<Link Source="10345:[6370..12679).1" Target="10345:[6217..12698).1" />
<Link Source="10345:[6370..12679).2" Target="10345:[6217..12698).1" />
<Link Source="10345:[6370..12679).2" Target="10345:[6305..6346).2" />
<Link Source="10345:[6370..12679).2" Target="10345:[6370..12679).1" />
<Link Source="10345:[6452..6514).1" Target="10345:[6217..12698).1" />
<Link Source="10345:[6452..6514).1" Target="10345:[6305..6346).2" />
<Link Source="10345:[6452..6514).1" Target="10345:[6370..12679).2" />
<Link Source="10345:[6540..6595).1" Target="10345:[6217..12698).1" />
<Link Source="10345:[6540..6595).1" Target="10345:[6305..6346).2" />
<Link Source="10345:[6540..6595).1" Target="10345:[6370..12679).2" />
<Link Source="10345:[6623..6824).1" Target="10345:[6452..6514).1" />
<Link Source="10345:[6623..6824).1" Target="10345:[6370..12679).2" />
<Link Source="10345:[6852..7046).1" Target="10345:[6370..12679).2" />
<Link Source="10345:[6852..7046).2" Target="10345:[6217..12698).1" />
<Link Source="10345:[6852..7046).2" Target="10345:[6623..6824).1" />
<Link Source="10345:[6852..7046).2" Target="10345:[6852..7046).1" />
<Link Source="10345:[6852..7046).2" Target="10345:[6370..12679).2" />
<Link Source="10345:[7074..7181).1" Target="10345:[6452..6514).1" />
<Link Source="10345:[7074..7181).1" Target="10345:[6305..6346).2" />
<Link Source="10345:[7074..7181).1" Target="10345:[6370..12679).2" />
<Link Source="10345:[7074..7181).2" Target="10345:[4578..4615).1" />
<Link Source="10345:[7074..7181).2" Target="10345:[6370..12679).2" />
<Link Source="10345:[7074..7181).3" Target="10345:[4524..4562).1" />
<Link Source="10345:[7074..7181).3" Target="10345:[6370..12679).2" />
<Link Source="10345:[7074..7181).4" Target="10345:[6540..6595).1" />
<Link Source="10345:[7074..7181).4" Target="10345:[6370..12679).2" />
<Link Source="10345:[7074..7181).5" Target="10345:[7074..7181).1" />
<Link Source="10345:[7074..7181).5" Target="10345:[7074..7181).2" />
<Link Source="10345:[7074..7181).5" Target="10345:[7074..7181).3" />
<Link Source="10345:[7074..7181).5" Target="10345:[7074..7181).4" />
<Link Source="10345:[7074..7181).5" Target="10345:[6623..6824).1" />
<Link Source="10345:[7074..7181).5" Target="10345:[4524..4562).1" />
<Link Source="10345:[7074..7181).5" Target="10345:[6370..12679).2" />
<Link Source="10345:[7209..7259).1" Target="10345:[6452..6514).1" />
<Link Source="10345:[7209..7259).1" Target="10345:[6305..6346).2" />
<Link Source="10345:[7209..7259).1" Target="10345:[6370..12679).2" />
<Link Source="10345:[7285..9219).1" Target="10345:[6370..12679).2" />
<Link Source="10345:[7285..9219).2" Target="10345:[4816..4896).1" />
<Link Source="10345:[7285..9219).2" Target="10345:[7285..9219).1" />
<Link Source="10345:[7285..9219).2" Target="10345:[6370..12679).2" />
<Link Source="10345:[8029..8561).1" Target="10345:[4631..4714).4" />
<Link Source="10345:[8029..8561).1" Target="10345:[7285..9219).2" />
<Link Source="10345:[8593..8797).1" Target="10345:[7285..9219).2" />
<Link Source="10345:[8683..8766).1" Target="10345:[8593..8797).1" />
<Link Source="10345:[9036..9192).1" Target="10345:[7209..7259).1" />
<Link Source="10345:[9036..9192).1" Target="10345:[7285..9219).2" />
<Link Source="10345:[9036..9192).2" Target="10345:[5977..6054).5" />
<Link Source="10345:[9036..9192).2" Target="10345:[7285..9219).2" />
<Link Source="10345:[9036..9192).3" Target="10345:[6217..12698).1" />
<Link Source="10345:[9036..9192).3" Target="10345:[7074..7181).5" />
<Link Source="10345:[9036..9192).3" Target="10345:[7285..9219).2" />
<Link Source="10345:[9036..9192).5" Target="10345:[9036..9192).2" />
<Link Source="10345:[9036..9192).5" Target="10345:[9036..9192).3" />
<Link Source="10345:[9036..9192).5" Target="10286:[1247..1258).2" />
<Link Source="10345:[9036..9192).5" Target="10346:[2544..2854).1" />
<Link Source="10345:[9036..9192).5" Target="10346:[2766..2776).1" />
<Link Source="10345:[9036..9192).5" Target="10346:[932..947).2" />
<Link Source="10345:[9036..9192).5" Target="10346:[2803..2815).1" />
<Link Source="10345:[9036..9192).5" Target="10345:[7074..7181).5" />
<Link Source="10345:[9036..9192).5" Target="10345:[7285..9219).2" />
<Link Source="10345:[9036..9192).7" Target="10345:[6217..12698).1" />
<Link Source="10345:[9036..9192).7" Target="10345:[7285..9219).2" />
<Link Source="10345:[9036..9192).8" Target="10345:[7285..9219).2" />
<Link Source="10345:[9074..9190).1" Target="10345:[7285..9219).2" />
<Link Source="10285:[563..580).1" Target="10345:[9036..9192).5" />
<Link Source="10285:[563..580).1" Target="10345:[9074..9190).1" />
<Link Source="10285:[582..617).1" Target="10345:[9036..9192).7" />
<Link Source="10285:[582..617).1" Target="10345:[9074..9190).1" />
<Link Source="10285:[533..724).1" Target="10345:[9036..9192).8" />
<Link Source="10285:[533..724).1" Target="10345:[9074..9190).1" />
<Link Source="10285:[643..653).1" Target="10285:[563..580).1" />
<Link Source="10285:[643..653).1" Target="10285:[533..724).1" />
<Link Source="10285:[643..653).1" Target="10345:[9074..9190).1" />
<Link Source="10285:[676..695).1" Target="10285:[582..617).1" />
<Link Source="10285:[676..695).1" Target="10285:[533..724).1" />
<Link Source="10285:[676..695).1" Target="10345:[9074..9190).1" />
<Link Source="10345:[9036..9192).10" Target="10345:[8683..8766).1" />
<Link Source="10345:[9036..9192).10" Target="10345:[9036..9192).1" />
<Link Source="10345:[9036..9192).10" Target="10345:[9036..9192).8" />
<Link Source="10345:[9036..9192).10" Target="10285:[643..653).1" />
<Link Source="10345:[9036..9192).10" Target="10285:[676..695).1" />
<Link Source="10345:[9036..9192).10" Target="10345:[9036..9192).5" />
<Link Source="10345:[9036..9192).10" Target="10345:[7285..9219).2" />
<Link Source="10345:[12718..12738).1" Target="10345:[6093..6197).1" />
<Link Source="10345:[12718..12738).1" Target="10345:[4910..12753).2" />
<Link Source="10345:[12769..12877).1" Target="10345:[4524..4562).1" />
<Link Source="10345:[12769..12877).1" Target="10345:[9036..9192).10" />
<Link Source="10345:[12769..12877).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[12843..12862).1" Target="10345:[12769..12877).1" />
<Link Source="10345:[12893..13027).1" Target="10345:[4578..4615).1" />
<Link Source="10345:[12893..13027).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[12893..13027).2" Target="10345:[8683..8766).1" />
<Link Source="10345:[12893..13027).2" Target="10346:[3712..3801).4" />
<Link Source="10345:[12893..13027).3" Target="10345:[12893..13027).2" />
<Link Source="10345:[12893..13027).3" Target="10345:[9036..9192).10" />
<Link Source="10345:[12893..13027).3" Target="10346:[3712..3801).4" />
<Link Source="10345:[12893..13027).5" Target="10345:[4728..4802).1" />
<Link Source="10345:[12893..13027).5" Target="10346:[3712..3801).4" />
<Link Source="10345:[12893..13027).7" Target="10345:[4631..4714).4" />
<Link Source="10345:[12893..13027).7" Target="10346:[3712..3801).4" />
<Link Source="10345:[12893..13027).8" Target="10345:[12843..12862).1" />
<Link Source="10345:[12893..13027).8" Target="10346:[3712..3801).4" />
<Link Source="10345:[12893..13027).9" Target="10346:[3712..3801).4" />
<Link Source="10345:[12900..13026).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[1753..1782).2" Target="10345:[12893..13027).1" />
<Link Source="10345:[1753..1782).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1797..1861).2" Target="10345:[12893..13027).3" />
<Link Source="10345:[1797..1861).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1876..1931).2" Target="10345:[12893..13027).5" />
<Link Source="10345:[1876..1931).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1946..1998).2" Target="10345:[12893..13027).7" />
<Link Source="10345:[1946..1998).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[2013..2038).2" Target="10345:[12893..13027).8" />
<Link Source="10345:[2013..2038).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1723..2412).2" Target="10345:[12893..13027).9" />
<Link Source="10345:[1723..2412).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1234..1246).2" Target="10345:[1723..2412).2" />
<Link Source="10345:[1234..1246).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1288..1300).2" Target="10345:[1723..2412).2" />
<Link Source="10345:[1288..1300).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1531..1543).2" Target="10345:[1723..2412).2" />
<Link Source="10345:[1531..1543).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[2064..2099).5" Target="10345:[12900..13026).1" />
<Link Source="10345:[2064..2099).6" Target="10345:[1797..1861).2" />
<Link Source="10345:[2064..2099).6" Target="10345:[2064..2099).5" />
<Link Source="10345:[2064..2099).6" Target="10345:[12900..13026).1" />
<Link Source="10345:[2113..2145).3" Target="10345:[1876..1931).2" />
<Link Source="10345:[2113..2145).3" Target="10345:[12893..13027).5" />
<Link Source="10345:[2113..2145).3" Target="10345:[12900..13026).1" />
<Link Source="10345:[2159..2192).3" Target="10345:[1946..1998).2" />
<Link Source="10345:[2159..2192).3" Target="10345:[23812..23848).1" />
<Link Source="10345:[2159..2192).3" Target="10345:[12900..13026).1" />
<Link Source="10346:[3712..3801).6" Target="10346:[3712..3801).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[12893..13027).9" />
<Link Source="10346:[3712..3801).6" Target="10345:[12893..13027).3" />
<Link Source="10346:[3712..3801).6" Target="10345:[1753..1782).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[2013..2038).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[1797..1861).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[1876..1931).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[1946..1998).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[12893..13027).5" />
<Link Source="10346:[3712..3801).6" Target="10345:[4728..4802).1" />
<Link Source="10346:[3712..3801).6" Target="10345:[23812..23848).1" />
<Link Source="10346:[3712..3801).6" Target="10345:[22457..22528).1" />
<Link Source="10346:[3712..3801).6" Target="10346:[3654..3816).2" />
<Link Source="10346:[3832..3852).1" Target="10346:[3423..3863).1" />
<Link Source="10346:[3832..3852).1" Target="10346:[3712..3801).6" />
<Link Source="10346:[3832..3852).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[25064..25074).2" Target="10346:[3832..3852).1" />
<Link Source="10345:[26266..28173).2" Target="10345:[24507..26254).1" />
<Link Source="10345:[26266..28173).2" Target="10345:[25064..25074).2" />
<Link Source="10345:[26314..26387).3" Target="10345:[26266..28173).2" />
<Link Source="10345:[26314..26387).3" Target="10345:[5549..5574).1" />
<Link Source="10345:[26314..26387).3" Target="10345:[25064..25074).2" />
<Link Source="10345:[26403..26475).1" Target="10345:[26266..28173).2" />
<Link Source="10345:[26403..26475).1" Target="10346:[3832..3852).1" />
<Link Source="10345:[26403..26475).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[26673..26726).1" Target="10345:[25064..25074).2" />
<Link Source="10307:[2552..2569).1" Target="10345:[26673..26726).1" />
<Link Source="10307:[2516..2720).1" Target="10345:[26673..26726).1" />
<Link Source="10307:[2595..2709).1" Target="10307:[2516..2720).1" />
<Link Source="10307:[2595..2709).1" Target="10345:[26673..26726).1" />
<Link Source="10307:[2595..2709).2" Target="10307:[2552..2569).1" />
<Link Source="10307:[2595..2709).2" Target="10345:[26673..26726).1" />
<Link Source="10307:[2602..2628).1" Target="10345:[26673..26726).1" />
<Link Source="10298:[471..492).6" Target="10307:[2595..2709).1" />
<Link Source="10298:[471..492).6" Target="10307:[2602..2628).1" />
<Link Source="10298:[494..511).6" Target="10307:[2595..2709).2" />
<Link Source="10298:[494..511).6" Target="10307:[2602..2628).1" />
<Link Source="10298:[537..568).16" Target="10298:[471..492).6" />
<Link Source="10298:[537..568).16" Target="10298:[494..511).6" />
<Link Source="10298:[537..568).16" Target="10307:[2602..2628).1" />
<Link Source="10307:[2672..2708).1" Target="10298:[537..568).16" />
<Link Source="10286:[1549..1560).1" Target="10298:[537..568).16" />
<Link Source="10286:[1549..1560).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[1562..1579).1" Target="10298:[537..568).16" />
<Link Source="10286:[1562..1579).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[1532..2083).1" Target="10298:[537..568).16" />
<Link Source="10286:[1532..2083).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[1605..1638).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[1605..1638).2" Target="10286:[1549..1560).1" />
<Link Source="10286:[1605..1638).2" Target="10286:[1605..1638).1" />
<Link Source="10286:[1605..1638).2" Target="10307:[2672..2708).1" />
<Link Source="10286:[1688..1781).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1688..1781).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[1688..1781).2" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).2" Target="10307:[2672..2708).1" />
<Link Source="10286:[1708..1779).1" Target="10307:[2672..2708).1" />
<Link Source="10298:[471..492).7" Target="10286:[1688..1781).1" />
<Link Source="10298:[471..492).7" Target="10286:[1708..1779).1" />
<Link Source="10298:[494..511).7" Target="10286:[1688..1781).2" />
<Link Source="10298:[494..511).7" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1820..1963).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[1820..1963).2" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).2" Target="10307:[2672..2708).1" />
<Link Source="10286:[1840..1888).1" Target="10307:[2672..2708).1" />
<Link Source="10298:[471..492).8" Target="10286:[1820..1963).1" />
<Link Source="10298:[471..492).8" Target="10286:[1840..1888).1" />
<Link Source="10298:[494..511).8" Target="10286:[1820..1963).2" />
<Link Source="10298:[494..511).8" Target="10286:[1840..1888).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[1977..1981).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[2003..2013).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[2003..2013).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2003..2013).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[2036..2052).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[2036..2052).1" Target="10345:[26673..26726).1" />
<Link Source="10286:[2036..2052).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2036..2052).1" Target="10307:[2672..2708).1" />
<Link Source="10345:[26673..26726).6" Target="10345:[26673..26726).1" />
<Link Source="10345:[26673..26726).6" Target="10298:[537..568).16" />
<Link Source="10345:[26673..26726).6" Target="10286:[2036..2052).1" />
<Link Source="10345:[26673..26726).6" Target="10286:[2003..2013).1" />
<Link Source="10345:[26673..26726).6" Target="10286:[1977..1981).1" />
<Link Source="10345:[26673..26726).6" Target="10286:[1532..2083).1" />
<Link Source="10345:[26673..26726).6" Target="10345:[25064..25074).2" />
<Link Source="10319:[17798..17821).1" Target="10345:[26673..26726).1" />
<Link Source="10319:[17823..17848).1" Target="10345:[26673..26726).1" />
<Link Source="10319:[17850..17896).1" Target="10345:[26673..26726).1" />
<Link Source="10319:[17719..18035).1" Target="10345:[26673..26726).1" />
<Link Source="10319:[17922..18024).1" Target="10319:[17798..17821).1" />
<Link Source="10319:[17922..18024).1" Target="10345:[26673..26726).1" />
<Link Source="10319:[17922..18024).2" Target="10319:[17823..17848).1" />
<Link Source="10319:[17922..18024).2" Target="10345:[26673..26726).1" />
<Link Source="10319:[17922..18024).3" Target="10319:[17850..17896).1" />
<Link Source="10319:[17922..18024).3" Target="10345:[26673..26726).1" />
<Link Source="10319:[17922..18024).4" Target="10345:[26673..26726).1" />
<Link Source="10319:[17922..18024).5" Target="10319:[17850..17896).1" />
<Link Source="10319:[17922..18024).5" Target="10319:[17922..18024).4" />
<Link Source="10319:[17922..18024).5" Target="10345:[26673..26726).1" />
<Link Source="10319:[17929..18023).1" Target="10345:[26673..26726).1" />
<Link Source="10319:[18431..18454).1" Target="10319:[17922..18024).1" />
<Link Source="10319:[18431..18454).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18456..18481).1" Target="10319:[17922..18024).2" />
<Link Source="10319:[18456..18481).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18483..18522).1" Target="10319:[17922..18024).3" />
<Link Source="10319:[18483..18522).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18524..18555).1" Target="10319:[17922..18024).5" />
<Link Source="10319:[18524..18555).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18300..18837).1" Target="10319:[17719..18035).1" />
<Link Source="10319:[18300..18837).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18581..18696).1" Target="10319:[18431..18454).1" />
<Link Source="10319:[18581..18696).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18581..18696).2" Target="10319:[18456..18481).1" />
<Link Source="10319:[18581..18696).2" Target="10319:[17929..18023).1" />
<Link Source="10319:[18581..18696).3" Target="10319:[18483..18522).1" />
<Link Source="10319:[18581..18696).3" Target="10319:[17929..18023).1" />
<Link Source="10319:[18581..18696).4" Target="10319:[18524..18555).1" />
<Link Source="10319:[18581..18696).4" Target="10319:[17929..18023).1" />
<Link Source="10319:[18594..18695).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[18581..18696).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[18594..18695).1" />
<Link Source="10319:[20027..20052).1" Target="10319:[18581..18696).2" />
<Link Source="10319:[20027..20052).1" Target="10319:[18594..18695).1" />
<Link Source="10319:[20054..20093).1" Target="10319:[18581..18696).3" />
<Link Source="10319:[20054..20093).1" Target="10319:[18594..18695).1" />
<Link Source="10319:[20095..20126).1" Target="10319:[18581..18696).4" />
<Link Source="10319:[20095..20126).1" Target="10319:[18594..18695).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[18300..18837).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[18594..18695).1" />
<Link Source="10319:[20152..24647).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20152..24647).1" Target="10345:[26673..26726).6" />
<Link Source="10319:[20152..24647).1" Target="10319:[18594..18695).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).2" Target="10319:[20027..20052).1" />
<Link Source="10319:[20508..20675).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).3" Target="10319:[20054..20093).1" />
<Link Source="10319:[20508..20675).3" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).4" Target="10319:[20095..20126).1" />
<Link Source="10319:[20508..20675).4" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).5" Target="10319:[20152..24647).1" />
<Link Source="10319:[20515..20674).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20508..20675).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41889..41914).1" Target="10319:[20508..20675).2" />
<Link Source="10319:[41889..41914).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41929..41968).1" Target="10319:[20508..20675).3" />
<Link Source="10319:[41929..41968).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41983..42014).1" Target="10319:[20508..20675).4" />
<Link Source="10319:[41983..42014).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42029..42063).1" Target="10319:[20508..20675).5" />
<Link Source="10319:[42029..42063).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[19916..30085).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[42089..42141).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[42839..42937).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42821..42938).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63885..63919).1" Target="10319:[42821..42938).2" />
<Link Source="10319:[63885..63919).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63934..63945).1" Target="10319:[42821..42938).3" />
<Link Source="10319:[63934..63945).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63960..63969).1" Target="10319:[42821..42938).4" />
<Link Source="10319:[63960..63969).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63984..64009).1" Target="10319:[42821..42938).6" />
<Link Source="10319:[63984..64009).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[63885..63919).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[64035..64445).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[42839..42937).1" />
<Link Source="10319:[64461..64473).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[64461..64473).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[42821..42938).7" />
<Link Source="10319:[42952..43079).2" Target="10319:[42952..43079).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[20515..20674).1" />
<Link Source="10354:[10975..11012).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10975..11012).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).3" Target="10354:[10826..10838).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[11026..11097).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[10809..10838).1" Target="10354:[11142..11154).1" />
<Link Source="10319:[43108..43134).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11244..11285).1" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[11026..11097).1" />
<Link Source="10354:[11244..11285).2" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).3" Target="10319:[43108..43134).1" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).2" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).1" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3068..3073).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3068..3073).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3200..3211).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3200..3211).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3319..3325).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3319..3325).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3380..3385).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3380..3385).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3474..3479).1" Target="10354:[3419..3448).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3501..3506).1" Target="EXTERNAL" />
<Link Source="10354:[3501..3506).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3501..3506).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3587).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3557).1" Target="10354:[3546..3587).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3615).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3607).1" Target="10354:[3601..3615).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).2" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3501..3506).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3557).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3601..3607).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3474..3479).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3587).1" />
<Link Source="10354:[11244..11285).4" Target="10319:[43108..43134).1" />
<Link Source="10354:[11312..11328).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[3684..3818).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3684..3818).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).1" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).2" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).3" Target="10354:[3720..3803).2" />
<Link Source="10354:[3720..3803).3" Target="10354:[11312..11328).1" />
<Link Source="10354:[11299..11330).1" Target="10354:[3720..3803).1" />
<Link Source="10354:[11299..11330).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11344..11360).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[11344..11360).1" Target="10319:[43108..43134).1" />
<Link Source="10319:[43095..43135).1" Target="10354:[11344..11360).1" />
<Link Source="10319:[43095..43135).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43173..43245).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43149..43246).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50330..50355).1" Target="10319:[43149..43246).2" />
<Link Source="10319:[50330..50355).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[50313..50328).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[51282..51325).1" Target="EXTERNAL" />
<Link Source="10319:[51282..51325).1" Target="10319:[50381..51340).1" />
<Link Source="10319:[43262..43312).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[41929..41968).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[51282..51325).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[43262..43312).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43489).1" Target="10319:[20515..20674).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43490).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43490).2" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43490).3" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43490).6" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43490).7" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43490).10" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[942..1750).1" Target="10319:[41732..45579).1" />
<Link Source="10312:[942..1750).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1322..1739).1" Target="10312:[1186..1207).1" />
<Link Source="10312:[1322..1739).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1326..1357).1" Target="10319:[43326..43489).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1322..1739).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1326..1357).1" />
<Link Source="10353:[7556..7642).1" Target="10353:[7504..7530).1" />
<Link Source="10353:[7556..7642).1" Target="EXTERNAL" />
<Link Source="10353:[7556..7642).1" Target="10312:[1326..1357).1" />
<Link Source="10312:[1585..1724).1" Target="10312:[994..1013).1" />
<Link Source="10312:[1585..1724).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).2" Target="10312:[1028..1062).1" />
<Link Source="10312:[1585..1724).2" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).3" Target="10312:[1077..1093).1" />
<Link Source="10312:[1585..1724).3" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).4" Target="10312:[1108..1117).1" />
<Link Source="10312:[1585..1724).4" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).5" Target="10312:[1132..1171).1" />
<Link Source="10312:[1585..1724).5" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).6" Target="10312:[1186..1207).1" />
<Link Source="10312:[1585..1724).6" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).7" Target="10312:[1222..1235).1" />
<Link Source="10312:[1585..1724).7" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).8" Target="10312:[1250..1296).1" />
<Link Source="10312:[1585..1724).8" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1723).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1724).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1724).2" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1724).3" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1724).4" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1724).5" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1724).6" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1724).7" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1724).8" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[942..1750).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[5755..5789).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[6044..6433).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[1585..1723).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[5721..5740).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).2" Target="10312:[5804..5815).1" />
<Link Source="10312:[6110..6221).2" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).3" Target="10312:[5830..5839).1" />
<Link Source="10312:[6110..6221).3" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).4" Target="10312:[5854..5893).1" />
<Link Source="10312:[6110..6221).4" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).5" Target="10312:[5908..5929).1" />
<Link Source="10312:[6110..6221).5" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).6" Target="10312:[5944..5957).1" />
<Link Source="10312:[6110..6221).6" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).7" Target="10312:[5972..6018).1" />
<Link Source="10312:[6110..6221).7" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6220).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6221).1" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6221).2" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6221).3" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6221).4" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6221).5" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6221).6" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6221).7" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[5663..6444).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3905..3919).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).9" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).9" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).9" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).9" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).10" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).11" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).11" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).11" Target="10354:[3720..3803).10" />
<Link Source="10354:[3720..3803).11" Target="10312:[3905..3919).1" />
<Link Source="10312:[3892..3921).1" Target="10354:[3720..3803).9" />
<Link Source="10312:[3892..3921).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3948..3966).1" Target="10312:[6110..6220).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3935..3968).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4750..4847).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4750..4847).1" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4863..5000).1" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5079..5183).1" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[5079..5183).1" />
<Link Source="10353:[5197..5323).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).1" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[4698..4724).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[5485..5759).1" />
<Link Source="10353:[5485..5759).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).1" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[4698..4724).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[5775..5979).1" />
<Link Source="10353:[5775..5979).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5995..6029).1" Target="10353:[5775..5979).3" />
<Link Source="10353:[5995..6029).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6002..6028).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[5995..6029).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6343..6358).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6384..6410).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6002..6028).1" />
<Link Source="10312:[3984..4005).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[3645..5112).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).2" Target="10312:[6110..6220).1" />
<Link Source="10312:[4060..4080).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[3696..3715).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4962..4966).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4919..5009).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[4058..4122).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[4094..4107).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4955..4994).1" Target="10354:[4094..4107).1" />
<Link Source="10354:[4955..4994).1" Target="10312:[4060..4080).1" />
<Link Source="10312:[4019..5073).4" Target="10354:[4955..4994).1" />
<Link Source="10312:[4019..5073).4" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).4" />
<Link Source="10312:[4019..5073).5" Target="10312:[6110..6220).1" />
<Link Source="10312:[4134..4806).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4134..4806).2" Target="10312:[3984..4005).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4134..4806).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4019..5073).5" />
<Link Source="10312:[4534..4658).1" Target="10312:[3696..3715).1" />
<Link Source="10312:[4534..4658).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).2" Target="10312:[3717..3728).1" />
<Link Source="10312:[4534..4658).2" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).3" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).4" Target="10312:[3741..3780).1" />
<Link Source="10312:[4534..4658).4" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).5" Target="10312:[3782..3803).1" />
<Link Source="10312:[4534..4658).5" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).6" Target="10312:[3645..5112).1" />
<Link Source="10312:[4534..4658).6" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).7" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).7" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).8" Target="10312:[3820..3866).1" />
<Link Source="10312:[4534..4658).8" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4657).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4658).1" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4658).2" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4658).3" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4658).4" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4658).5" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4658).6" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4658).7" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4658).8" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4019..5073).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[4534..4658).9" Target="10312:[4134..4806).2" />
<Link Source="10312:[4685..4699).1" Target="10312:[4134..4806).2" />
<Link Source="10354:[3684..3818).3" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).3" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).17" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).17" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).17" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).17" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).18" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).19" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).19" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).19" Target="10354:[3720..3803).18" />
<Link Source="10354:[3720..3803).19" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).1" Target="10354:[3720..3803).17" />
<Link Source="10312:[4680..4787).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4826..5058).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).1" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4826..5058).2" Target="10312:[4019..5073).5" />
<Link Source="10346:[10629..10648).1" Target="10312:[4534..4658).1" />
<Link Source="10346:[10629..10648).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10650..10661).1" Target="10312:[4534..4658).2" />
<Link Source="10346:[10650..10661).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10663..10672).1" Target="10312:[4534..4658).3" />
<Link Source="10346:[10663..10672).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10674..10713).1" Target="10312:[4534..4658).4" />
<Link Source="10346:[10674..10713).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10715..10736).1" Target="10312:[4534..4658).5" />
<Link Source="10346:[10715..10736).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10738..10759).1" Target="10312:[4534..4658).6" />
<Link Source="10346:[10738..10759).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10761..10774).1" Target="10312:[4534..4658).7" />
<Link Source="10346:[10761..10774).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10776..10822).1" Target="10312:[5335..5381).1" />
<Link Source="10346:[10776..10822).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10564..12467).1" Target="10312:[4019..5073).5" />
<Link Source="10346:[10564..12467).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10861..10875).1" Target="10312:[4534..4657).1" />
<Link Source="10354:[3684..3818).4" Target="10346:[10629..10648).1" />
<Link Source="10354:[3684..3818).4" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).25" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).25" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).25" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).25" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).26" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).27" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[3720..3803).26" />
<Link Source="10354:[3720..3803).27" Target="10346:[10861..10875).1" />
<Link Source="10346:[10848..10877).1" Target="10354:[3720..3803).25" />
<Link Source="10346:[10848..10877).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[10897..10914).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[7666..7775).1" Target="10346:[10564..12467).1" />
<Link Source="10346:[7666..7775).1" Target="10346:[10897..10914).1" />
<Link Source="10346:[7672..7773).1" Target="10346:[7666..7775).1" />
<Link Source="10346:[7672..7773).1" Target="10319:[50381..51340).1" />
<Link Source="10346:[7672..7773).1" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).1" Target="10346:[10897..10914).1" />
<Link Source="10346:[10893..11127).1" Target="10346:[7672..7773).1" />
<Link Source="10346:[10893..11127).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[11143..11188).1" Target="10346:[10674..10713).1" />
<Link Source="10346:[11143..11188).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[11157..11187).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[3460..3499).2" Target="10346:[11143..11188).1" />
<Link Source="10346:[3460..3499).2" Target="10346:[11157..11187).1" />
<Link Source="10346:[3423..3863).2" Target="10346:[10564..12467).1" />
<Link Source="10346:[3423..3863).2" Target="10346:[11157..11187).1" />
<Link Source="10346:[3525..3638).10" Target="10346:[11157..11187).1" />
<Link Source="10346:[3525..3638).11" Target="10346:[3423..3863).2" />
<Link Source="10346:[3525..3638).11" Target="10319:[50381..51340).1" />
<Link Source="10346:[3525..3638).11" Target="10346:[3525..3638).10" />
<Link Source="10346:[3525..3638).11" Target="10346:[11157..11187).1" />
<Link Source="10346:[11143..11188).2" Target="10346:[3423..3863).2" />
<Link Source="10346:[11143..11188).2" Target="10312:[4534..4657).1" />
<Link Source="10346:[11258..12246).1" Target="10346:[10715..10736).1" />
<Link Source="10346:[11258..12246).1" Target="EXTERNAL" />
<Link Source="10346:[11258..12246).1" Target="10312:[4534..4657).1" />
<Link Source="10346:[11258..12246).2" Target="10312:[4534..4657).1" />
<Link Source="10346:[11258..12246).5" Target="10346:[10564..12467).1" />
<Link Source="10346:[11258..12246).5" Target="10319:[50381..51340).1" />
<Link Source="10346:[11258..12246).5" Target="10346:[11258..12246).2" />
<Link Source="10346:[11258..12246).5" Target="10312:[4534..4657).1" />
<Link Source="10346:[11258..12246).6" Target="10346:[11258..12246).1" />
<Link Source="10346:[11258..12246).6" Target="10346:[11258..12246).5" />
<Link Source="10346:[11258..12246).6" Target="10312:[4534..4657).1" />
<Link Source="10346:[11369..11508).1" Target="10346:[10629..10648).1" />
<Link Source="10346:[11369..11508).1" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).2" Target="10346:[10564..12467).1" />
<Link Source="10346:[11369..11508).2" Target="10319:[50381..51340).1" />
<Link Source="10346:[11369..11508).2" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).3" Target="10346:[10650..10661).1" />
<Link Source="10346:[11369..11508).3" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).4" Target="10346:[10663..10672).1" />
<Link Source="10346:[11369..11508).4" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).5" Target="10346:[10674..10713).1" />
<Link Source="10346:[11369..11508).5" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).6" Target="10346:[10715..10736).1" />
<Link Source="10346:[11369..11508).6" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).7" Target="10346:[10738..10759).1" />
<Link Source="10346:[11369..11508).7" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).8" Target="10346:[10761..10774).1" />
<Link Source="10346:[11369..11508).8" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).9" Target="10346:[10776..10822).1" />
<Link Source="10346:[11369..11508).9" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11507).1" Target="10346:[11258..12246).6" />
<Link Source="10312:[7652..7671).1" Target="10346:[11369..11508).1" />
<Link Source="10312:[7652..7671).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7673..7703).1" Target="10346:[11369..11508).2" />
<Link Source="10312:[7673..7703).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7705..7716).1" Target="10346:[11369..11508).3" />
<Link Source="10312:[7705..7716).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7718..7727).1" Target="10346:[11369..11508).4" />
<Link Source="10312:[7718..7727).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7729..7768).1" Target="10346:[11369..11508).5" />
<Link Source="10312:[7729..7768).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7770..7791).1" Target="10346:[11369..11508).6" />
<Link Source="10312:[7770..7791).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7793..7814).1" Target="10346:[11369..11508).7" />
<Link Source="10312:[7793..7814).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7816..7829).1" Target="10346:[11369..11508).8" />
<Link Source="10312:[7816..7829).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7831..7877).1" Target="10346:[11369..11508).9" />
<Link Source="10312:[7831..7877).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7615..8420).1" Target="10346:[10564..12467).1" />
<Link Source="10312:[7615..8420).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7903..7936).1" Target="10312:[7770..7791).1" />
<Link Source="10312:[7903..7936).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7916..7934).1" Target="10346:[11369..11507).1" />
<Link Source="10353:[4698..4724).2" Target="10312:[7903..7936).1" />
<Link Source="10353:[4698..4724).2" Target="10312:[7916..7934).1" />
<Link Source="10353:[4750..4847).3" Target="10353:[4698..4724).2" />
<Link Source="10353:[4750..4847).3" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).3" Target="10312:[7916..7934).1" />
<Link Source="10353:[4863..5000).5" Target="10353:[4698..4724).2" />
<Link Source="10353:[4863..5000).5" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).5" Target="10312:[7916..7934).1" />
<Link Source="10353:[4863..5000).6" Target="10312:[7916..7934).1" />
<Link Source="10353:[5079..5183).3" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).3" Target="10312:[7916..7934).1" />
<Link Source="10353:[5197..5323).4" Target="10353:[4698..4724).2" />
<Link Source="10353:[5197..5323).4" Target="10353:[5079..5183).3" />
<Link Source="10353:[5197..5323).4" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).7" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).7" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).8" Target="10353:[4698..4724).2" />
<Link Source="10353:[5485..5759).8" Target="10353:[5485..5759).7" />
<Link Source="10353:[5485..5759).8" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).9" Target="10312:[7916..7934).1" />
<Link Source="10353:[5775..5979).5" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).5" Target="10312:[7916..7934).1" />
<Link Source="10353:[5775..5979).7" Target="10353:[4698..4724).2" />
<Link Source="10353:[5775..5979).7" Target="10353:[5775..5979).5" />
<Link Source="10353:[5775..5979).7" Target="10312:[7916..7934).1" />
<Link Source="10353:[5995..6029).4" Target="10353:[5775..5979).7" />
<Link Source="10353:[5995..6029).4" Target="10312:[7916..7934).1" />
<Link Source="10353:[6002..6028).2" Target="10312:[7916..7934).1" />
<Link Source="10353:[6343..6358).2" Target="10353:[5995..6029).4" />
<Link Source="10353:[6343..6358).2" Target="10353:[6002..6028).2" />
<Link Source="10353:[6384..6410).7" Target="10353:[6002..6028).2" />
<Link Source="10353:[6384..6410).8" Target="10353:[6343..6358).2" />
<Link Source="10353:[6384..6410).8" Target="10353:[6384..6410).7" />
<Link Source="10353:[6384..6410).8" Target="10353:[6002..6028).2" />
<Link Source="10312:[7952..7977).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7952..7977).2" Target="10312:[7718..7727).1" />
<Link Source="10312:[7952..7977).2" Target="10312:[7952..7977).1" />
<Link Source="10312:[7952..7977).2" Target="10346:[11369..11507).1" />
<Link Source="10312:[7991..8409).1" Target="10312:[7673..7703).1" />
<Link Source="10312:[7991..8409).1" Target="10319:[50381..51340).1" />
<Link Source="10312:[7991..8409).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[8049..8181).1" Target="10312:[7652..7671).1" />
<Link Source="10312:[8049..8181).1" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).2" Target="10312:[7673..7703).1" />
<Link Source="10312:[8049..8181).2" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).3" Target="10312:[7705..7716).1" />
<Link Source="10312:[8049..8181).3" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).4" Target="10312:[7718..7727).1" />
<Link Source="10312:[8049..8181).4" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).5" Target="10312:[7770..7791).1" />
<Link Source="10312:[8049..8181).5" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).6" Target="10312:[7793..7814).1" />
<Link Source="10312:[8049..8181).6" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).7" Target="10312:[7816..7829).1" />
<Link Source="10312:[8049..8181).7" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).8" Target="10312:[7831..7877).1" />
<Link Source="10312:[8049..8181).8" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8180).1" Target="10312:[7991..8409).1" />
<Link Source="10312:[18976..18995).1" Target="10312:[8049..8181).1" />
<Link Source="10312:[18976..18995).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[18997..19015).1" Target="10312:[8049..8181).2" />
<Link Source="10312:[18997..19015).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19017..19028).1" Target="10312:[8049..8181).3" />
<Link Source="10312:[19017..19028).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19030..19039).1" Target="10312:[8049..8181).4" />
<Link Source="10312:[19030..19039).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19041..19062).1" Target="10312:[8049..8181).5" />
<Link Source="10312:[19041..19062).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19064..19085).1" Target="10312:[8049..8181).6" />
<Link Source="10312:[19064..19085).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19087..19100).1" Target="10312:[8049..8181).7" />
<Link Source="10312:[19087..19100).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19102..19148).1" Target="10312:[8049..8181).8" />
<Link Source="10312:[19102..19148).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).1" Target="10312:[18997..19015).1" />
<Link Source="10312:[19174..19243).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).2" Target="10312:[19017..19028).1" />
<Link Source="10312:[19174..19243).2" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).3" Target="10312:[19041..19062).1" />
<Link Source="10312:[19174..19243).3" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).4" Target="10312:[19064..19085).1" />
<Link Source="10312:[19174..19243).4" Target="10312:[8049..8180).1" />
<Link Source="10312:[19188..19242).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[61540..61570).1" Target="10312:[19174..19243).1" />
<Link Source="10312:[61540..61570).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61572..61583).1" Target="10312:[19174..19243).2" />
<Link Source="10312:[61572..61583).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61585..61606).1" Target="10312:[19174..19243).3" />
<Link Source="10312:[61585..61606).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61608..61629).1" Target="10312:[19174..19243).4" />
<Link Source="10312:[61608..61629).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).1" Target="10312:[61585..61606).1" />
<Link Source="10312:[61655..62327).1" Target="EXTERNAL" />
<Link Source="10312:[61655..62327).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).2" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[61655..62327).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[61540..61570).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[19188..19242).1" />
<Link Source="10312:[61874..62327).1" Target="10312:[61540..61570).1" />
<Link Source="10312:[61874..62327).1" Target="10319:[50381..51340).1" />
<Link Source="10312:[61874..62327).1" Target="EXTERNAL" />
<Link Source="10312:[61874..62327).1" Target="10312:[61655..62327).4" />
<Link Source="10312:[62098..62327).1" Target="10312:[61585..61606).1" />
<Link Source="10312:[62098..62327).1" Target="EXTERNAL" />
<Link Source="10312:[62098..62327).1" Target="10312:[61874..62327).1" />
<Link Source="10312:[62098..62327).2" Target="10312:[61874..62327).1" />
<Link Source="10312:[62279..62312).1" Target="10312:[61572..61583).1" />
<Link Source="10312:[62279..62312).1" Target="10312:[62098..62327).1" />
<Link Source="10312:[19259..19531).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[19259..19531).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19326..19460).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).2" Target="10312:[19030..19039).1" />
<Link Source="10312:[19326..19460).2" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).3" Target="10312:[19041..19062).1" />
<Link Source="10312:[19326..19460).3" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).6" Target="10312:[19087..19100).1" />
<Link Source="10312:[19326..19460).6" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).7" Target="10312:[19102..19148).1" />
<Link Source="10312:[19326..19460).7" Target="10312:[19259..19531).1" />
<Link Source="10312:[19366..19459).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[63424..63437).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63424..63437).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63439..63448).1" Target="10312:[19326..19460).2" />
<Link Source="10312:[63439..63448).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63450..63471).1" Target="10312:[19326..19460).3" />
<Link Source="10312:[63450..63471).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63473..63501).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63473..63501).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63503..63516).1" Target="10312:[19326..19460).6" />
<Link Source="10312:[63503..63516).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63518..63564).1" Target="10312:[19326..19460).7" />
<Link Source="10312:[63518..63564).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63566..63612).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63566..63612).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63381..70761).1" Target="10312:[19064..19085).1" />
<Link Source="10312:[63381..70761).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63638..63668).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63682..63706).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[63424..63437).1" />
<Link Source="10312:[63859..64015).1" Target="10319:[50381..51340).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[63859..64015).1" Target="EXTERNAL" />
<Link Source="10312:[63859..64015).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[63859..64015).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64121..69285).1" Target="10319:[50381..51340).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[63381..70761).1" />
<Link Source="10312:[64121..69285).2" Target="10319:[50381..51340).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[64121..69285).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[62279..62312).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).3" Target="10312:[63881..63912).1" />
<Link Source="10312:[64121..69285).3" Target="10312:[19366..19459).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).2" Target="10312:[63439..63448).1" />
<Link Source="10312:[64353..69285).2" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).3" Target="10312:[63503..63516).1" />
<Link Source="10312:[64353..69285).3" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).4" Target="10312:[63450..63471).1" />
<Link Source="10312:[64353..69285).4" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).5" Target="10312:[63682..63706).1" />
<Link Source="10312:[64353..69285).5" Target="10312:[64121..69285).2" />
<Link Source="10312:[64357..64415).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[80978..80991).1" Target="10312:[64353..69285).1" />
<Link Source="10312:[80978..80991).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[80993..81002).1" Target="10312:[64353..69285).2" />
<Link Source="10312:[80993..81002).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81004..81017).1" Target="10312:[64353..69285).3" />
<Link Source="10312:[81004..81017).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81019..81040).1" Target="10312:[64353..69285).4" />
<Link Source="10312:[81019..81040).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81042..81069).1" Target="10312:[64353..69285).5" />
<Link Source="10312:[81042..81069).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[80978..80991).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81095..84034).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81196..82523).1" Target="10312:[81095..84034).1" />
<Link Source="10312:[81196..82523).2" Target="10312:[80993..81002).1" />
<Link Source="10312:[81196..82523).2" Target="10312:[81196..82523).1" />
<Link Source="10312:[81196..82523).2" Target="10312:[81095..84034).1" />
<Link Source="10312:[81196..82523).3" Target="10312:[81019..81040).1" />
<Link Source="10312:[81196..82523).3" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).3" Target="10312:[81095..84034).1" />
<Link Source="10312:[81196..82523).6" Target="10312:[81196..82523).2" />
<Link Source="10312:[81196..82523).6" Target="10312:[81196..82523).3" />
<Link Source="10312:[81196..82523).6" Target="10312:[81095..84034).1" />
<Link Source="10312:[81319..81371).1" Target="10312:[80978..80991).1" />
<Link Source="10312:[81319..81371).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81495..81570).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[81495..81570).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81495..81570).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81495..81570).2" Target="10312:[81319..81371).1" />
<Link Source="10312:[81495..81570).2" Target="10312:[81196..82523).6" />
<Link Source="10312:[81596..82500).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[81596..82500).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81596..82500).1" Target="10312:[80993..81002).1" />
<Link Source="10312:[81596..82500).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81596..82500).2" Target="10312:[81019..81040).1" />
<Link Source="10312:[81596..82500).2" Target="10312:[81196..82523).6" />
<Link Source="10312:[81628..81659).1" Target="10312:[81196..82523).6" />
<Link Source="10353:[7504..7530).2" Target="10312:[81596..82500).2" />
<Link Source="10353:[7504..7530).2" Target="10312:[81628..81659).1" />
<Link Source="10312:[81596..82500).5" Target="10312:[81596..82500).1" />
<Link Source="10312:[81596..82500).5" Target="10353:[7504..7530).2" />
<Link Source="10312:[81596..82500).5" Target="10312:[81196..82523).6" />
<Link Source="10312:[84050..84066).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[84080..84093).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[84080..84093).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[64121..69285).2" />
<Link Source="10312:[64537..64543).1" Target="10312:[64353..69285).6" />
<Link Source="10306:[3196..3249).1" Target="10312:[63381..70761).1" />
<Link Source="10306:[3196..3249).1" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).1" Target="10306:[3196..3249).1" />
<Link Source="10306:[3202..3247).1" Target="10312:[64121..69285).2" />
<Link Source="10306:[3202..3247).1" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).2" Target="EXTERNAL" />
<Link Source="10306:[3202..3247).2" Target="10312:[64537..64543).1" />
<Link Source="10306:[3209..3246).1" Target="10312:[64537..64543).1" />
<Link Source="10298:[471..492).9" Target="10306:[3202..3247).1" />
<Link Source="10298:[471..492).9" Target="10306:[3209..3246).1" />
<Link Source="10298:[494..511).9" Target="10306:[3202..3247).2" />
<Link Source="10298:[494..511).9" Target="10306:[3209..3246).1" />
<Link Source="10312:[64532..69285).1" Target="10298:[471..492).9" />
<Link Source="10312:[64532..69285).1" Target="10312:[64353..69285).6" />
<Link Source="10312:[65229..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65229..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65229..69285).1" Target="10312:[64532..69285).1" />
<Link Source="10312:[65229..69285).2" Target="10312:[64532..69285).1" />
<Link Source="10312:[65474..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65474..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65474..69285).1" Target="10312:[65229..69285).1" />
<Link Source="10312:[65474..69285).2" Target="10312:[65229..69285).1" />
<Link Source="10312:[65730..65736).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65730..65736).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[66182..66188).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[66182..66188).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[63450..63471).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[63473..63501).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[65726..69285).1" />
<Link Source="10312:[66291..66342).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[75301..75322).1" Target="10312:[66177..69285).3" />
<Link Source="10312:[75301..75322).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75324..75352).1" Target="10312:[66177..69285).4" />
<Link Source="10312:[75324..75352).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).1" Target="10312:[75301..75322).1" />
<Link Source="10312:[75735..75866).1" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).2" Target="10312:[66291..66342).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[75735..75866).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75324..75352).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75742..75804).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[63638..63668).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[63518..63564).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[63566..63612).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[65726..69285).1" />
<Link Source="10312:[66215..66540).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[77528..77541).1" Target="10312:[66177..69285).2" />
<Link Source="10312:[77528..77541).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77543..77571).1" Target="10312:[75735..75866).4" />
<Link Source="10312:[77543..77571).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77573..77604).1" Target="10312:[66177..69285).7" />
<Link Source="10312:[77573..77604).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77606..77652).1" Target="10312:[66177..69285).8" />
<Link Source="10312:[77606..77652).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77654..77700).1" Target="10312:[66177..69285).9" />
<Link Source="10312:[77654..77700).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[63381..70761).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[77726..77892).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).2" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77730..77782).1" Target="10312:[66215..66540).1" />
<Link Source="10298:[471..492).12" Target="10312:[77726..77892).1" />
<Link Source="10298:[471..492).12" Target="10312:[77730..77782).1" />
<Link Source="10298:[494..511).12" Target="10312:[77726..77892).2" />
<Link Source="10298:[494..511).12" Target="10312:[77730..77782).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[77528..77541).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[77543..77571).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[77573..77604).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[77606..77652).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[77654..77700).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[66215..66540).1" />
<Link Source="10312:[77915..78032).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77908..78033).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78402..78430).1" Target="10312:[77908..78033).2" />
<Link Source="10312:[78402..78430).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78432..78463).1" Target="10312:[77908..78033).3" />
<Link Source="10312:[78432..78463).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78465..78511).1" Target="10312:[77908..78033).4" />
<Link Source="10312:[78465..78511).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78513..78552).1" Target="10312:[77908..78033).5" />
<Link Source="10312:[78513..78552).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[78387..78400).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[78402..78430).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[78432..78463).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[78465..78511).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[78513..78552).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[77915..78032).1" />
<Link Source="10312:[78649..78771).1" Target="10312:[77915..78032).1" />
<Link Source="10346:[8019..8032).1" Target="10312:[78642..78772).1" />
<Link Source="10346:[8019..8032).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8034..8062).1" Target="10312:[78642..78772).2" />
<Link Source="10346:[8034..8062).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8064..8095).1" Target="10312:[78642..78772).3" />
<Link Source="10346:[8064..8095).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8097..8143).1" Target="10312:[78642..78772).4" />
<Link Source="10346:[8097..8143).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8145..8184).1" Target="10312:[78642..78772).5" />
<Link Source="10346:[8145..8184).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[7977..8737).1" Target="10312:[78346..78783).1" />
<Link Source="10346:[7977..8737).1" Target="10312:[64121..69285).2" />
<Link Source="10346:[7977..8737).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8210..8251).1" Target="10346:[7977..8737).1" />
<Link Source="10346:[8210..8251).1" Target="10312:[64121..69285).2" />
<Link Source="10346:[8210..8251).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8265..8726).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8265..8726).2" Target="10346:[8210..8251).1" />
<Link Source="10346:[8265..8726).2" Target="10346:[8265..8726).1" />
<Link Source="10346:[8265..8726).2" Target="10312:[78649..78771).1" />
<Link Source="10346:[8516..8646).1" Target="10346:[8019..8032).1" />
<Link Source="10346:[8516..8646).1" Target="10346:[8265..8726).2" />
<Link Source="10346:[8516..8646).2" Target="10346:[8034..8062).1" />
<Link Source="10346:[8516..8646).2" Target="10346:[8265..8726).2" />
<Link Source="10346:[8516..8646).3" Target="10346:[8064..8095).1" />
<Link Source="10346:[8516..8646).3" Target="10346:[8265..8726).2" />
<Link Source="10346:[8516..8646).4" Target="10346:[8097..8143).1" />
<Link Source="10346:[8516..8646).4" Target="10346:[8265..8726).2" />
<Link Source="10346:[8516..8646).5" Target="10346:[8145..8184).1" />
<Link Source="10346:[8516..8646).5" Target="10346:[8265..8726).2" />
<Link Source="10346:[8523..8645).1" Target="10346:[8265..8726).2" />
<Link Source="10325:[1906..1919).1" Target="10346:[8516..8646).1" />
<Link Source="10325:[1906..1919).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[1921..1949).1" Target="10346:[8516..8646).2" />
<Link Source="10325:[1921..1949).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[1951..1982).1" Target="10346:[8516..8646).3" />
<Link Source="10325:[1951..1982).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[1984..2031).1" Target="10346:[8516..8646).4" />
<Link Source="10325:[1984..2031).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[2033..2072).1" Target="10346:[8516..8646).5" />
<Link Source="10325:[2033..2072).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[1864..2245).1" Target="10346:[7977..8737).1" />
<Link Source="10325:[1864..2245).1" Target="10312:[64121..69285).2" />
<Link Source="10325:[1864..2245).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[2098..2129).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[2143..2234).1" Target="10325:[1906..1919).1" />
<Link Source="10325:[2143..2234).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[2143..2234).2" Target="10325:[1864..2245).1" />
<Link Source="10325:[2143..2234).2" Target="10312:[64121..69285).2" />
<Link Source="10325:[2143..2234).2" Target="10346:[8523..8645).1" />
<Link Source="10325:[2143..2234).3" Target="10325:[1984..2031).1" />
<Link Source="10325:[2143..2234).3" Target="10346:[8523..8645).1" />
<Link Source="10325:[2150..2233).1" Target="10346:[8523..8645).1" />
<Link Source="10286:[29357..29370).1" Target="10325:[2143..2234).1" />
<Link Source="10286:[29357..29370).1" Target="10325:[2150..2233).1" />
<Link Source="10286:[29385..29406).1" Target="10325:[2143..2234).2" />
<Link Source="10286:[29385..29406).1" Target="10325:[2150..2233).1" />
<Link Source="10286:[29421..29468).1" Target="10325:[2143..2234).3" />
<Link Source="10286:[29421..29468).1" Target="10325:[2150..2233).1" />
<Link Source="10286:[29494..29572).1" Target="10286:[29357..29370).1" />
<Link Source="10286:[29494..29572).1" Target="10325:[2150..2233).1" />
<Link Source="10286:[29494..29572).2" Target="10286:[29385..29406).1" />
<Link Source="10286:[29494..29572).2" Target="10325:[2150..2233).1" />
<Link Source="10286:[29494..29572).3" Target="10286:[29421..29468).1" />
<Link Source="10286:[29494..29572).3" Target="10325:[2150..2233).1" />
<Link Source="10286:[29501..29571).1" Target="10325:[2150..2233).1" />
<Link Source="10060:[826..839).1" Target="10286:[29494..29572).1" />
<Link Source="10060:[826..839).1" Target="10286:[29501..29571).1" />
<Link Source="10060:[854..875).1" Target="10286:[29494..29572).2" />
<Link Source="10060:[854..875).1" Target="10286:[29501..29571).1" />
<Link Source="10060:[890..936).1" Target="10286:[29494..29572).3" />
<Link Source="10060:[890..936).1" Target="10286:[29501..29571).1" />
<Link Source="10060:[962..990).1" Target="10286:[29501..29571).1" />
<Link Source="10060:[1004..1137).1" Target="10060:[826..839).1" />
<Link Source="10060:[1004..1137).1" Target="10286:[29501..29571).1" />
<Link Source="10060:[1004..1137).2" Target="10060:[854..875).1" />
<Link Source="10060:[1004..1137).2" Target="10286:[29501..29571).1" />
<Link Source="10060:[1004..1137).3" Target="10286:[29501..29571).1" />
<Link Source="10060:[1004..1137).5" Target="10060:[962..990).1" />
<Link Source="10060:[1004..1137).5" Target="10286:[29501..29571).1" />
<Link Source="10060:[1004..1137).6" Target="10060:[854..875).1" />
<Link Source="10060:[1004..1137).6" Target="10312:[64121..69285).2" />
<Link Source="10060:[1004..1137).6" Target="10286:[29501..29571).1" />
<Link Source="10060:[1004..1137).7" Target="10060:[890..936).1" />
<Link Source="10060:[1004..1137).7" Target="10286:[29501..29571).1" />
<Link Source="10060:[1011..1136).1" Target="10286:[29501..29571).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[1004..1137).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5621..5634).1" Target="10060:[1004..1137).2" />
<Link Source="10060:[5621..5634).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5691..5716).1" Target="10060:[1004..1137).3" />
<Link Source="10060:[5691..5716).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5731..5762).1" Target="10060:[1004..1137).5" />
<Link Source="10060:[5731..5762).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5777..5806).1" Target="10060:[1004..1137).6" />
<Link Source="10060:[5777..5806).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5821..5867).1" Target="10060:[1004..1137).7" />
<Link Source="10060:[5821..5867).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5882..5928).1" Target="10060:[1004..1137).3" />
<Link Source="10060:[5882..5928).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5954..5991).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5593..5606).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5954..5991).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[1011..1136).1" />
<Link Source="10060:[6005..6042).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[5621..5634).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[6005..6042).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[1011..1136).1" />
<Link Source="10060:[6056..6090).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6056..6090).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6056..6090).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[6188..6219).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[6235..9907).1" Target="10060:[5593..5606).1" />
<Link Source="10060:[6235..9907).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6235..9907).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[6814..6920).1" Target="10060:[5593..5606).1" />
<Link Source="10060:[6814..6920).1" Target="10060:[6235..9907).1" />
<Link Source="10060:[6814..6920).2" Target="10060:[5621..5634).1" />
<Link Source="10060:[6814..6920).2" Target="10060:[6235..9907).1" />
<Link Source="10060:[6814..6920).3" Target="10060:[5821..5867).1" />
<Link Source="10060:[6814..6920).3" Target="10060:[6235..9907).1" />
<Link Source="10060:[6814..6920).4" Target="10060:[5882..5928).1" />
<Link Source="10060:[6814..6920).4" Target="10060:[6235..9907).1" />
<Link Source="10060:[6821..6919).1" Target="10060:[6235..9907).1" />
<Link Source="10060:[10180..10200).1" Target="10060:[6814..6920).1" />
<Link Source="10060:[10180..10200).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10202..10215).1" Target="10060:[6814..6920).2" />
<Link Source="10060:[10202..10215).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10217..10263).1" Target="10060:[6814..6920).3" />
<Link Source="10060:[10217..10263).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10265..10311).1" Target="10060:[6814..6920).4" />
<Link Source="10060:[10265..10311).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10337..10405).1" Target="10060:[10202..10215).1" />
<Link Source="10060:[10337..10405).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10419..10454).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[10180..10200).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[10419..10454).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[6821..6919).1" />
<Link Source="10060:[10470..10516).1" Target="10060:[10202..10215).1" />
<Link Source="10060:[10470..10516).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[10470..10516).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10532..10544).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10558..11295).1" Target="10060:[10180..10200).1" />
<Link Source="10060:[10558..11295).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[10558..11295).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11311..11352).1" Target="10060:[10180..10200).1" />
<Link Source="10060:[11311..11352).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[11311..11352).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[11311..11352).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[11366..11675).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[6821..6919).1" />
<Link Source="10060:[11373..11403).1" Target="10060:[11366..11675).2" />
<Link Source="10060:[11373..11403).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).5" Target="10060:[10202..10215).1" />
<Link Source="10060:[11366..11675).5" Target="10060:[11373..11403).1" />
<Link Source="10060:[11423..11509).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[11990..12013).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[11990..12013).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12028..12063).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[12028..12063).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12078..12091).1" Target="10060:[11366..11675).5" />
<Link Source="10060:[12078..12091).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12117..12185).1" Target="10060:[12078..12091).1" />
<Link Source="10060:[12117..12185).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12199..12238).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[11990..12013).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[12199..12238).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[11423..11509).1" />
<Link Source="10060:[12254..13527).1" Target="10060:[12028..12063).1" />
<Link Source="10060:[12254..13527).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12494..12506).1" Target="10060:[12254..13527).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[66177..69285).1" />
<Link Source="10312:[66177..69285).11" Target="10060:[12494..12506).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[65726..69285).1" />
<Link Source="10312:[67587..67593).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).1" Target="10312:[67587..67593).1" />
<Link Source="10312:[67582..69285).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[67582..69285).2" Target="10312:[66177..69285).11" />
<Link Source="10312:[67858..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[67858..69285).1" Target="EXTERNAL" />
<Link Source="10312:[67858..69285).1" Target="10312:[67582..69285).1" />
<Link Source="10312:[67858..69285).2" Target="10312:[67582..69285).1" />
<Link Source="10312:[68183..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68183..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68183..69285).1" Target="10312:[67858..69285).1" />
<Link Source="10312:[68183..69285).2" Target="10312:[67858..69285).1" />
<Link Source="10312:[68512..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68512..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68512..69285).1" Target="10312:[68183..69285).1" />
<Link Source="10312:[68512..69285).2" Target="10312:[68183..69285).1" />
<Link Source="10312:[68882..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68882..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68882..69285).1" Target="10312:[68512..69285).1" />
<Link Source="10312:[68882..69285).2" Target="10312:[68512..69285).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[68882..69285).1" />
<Link Source="10312:[69244..69269).1" Target="10312:[68882..69285).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69237..69270).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).1" Target="EXTERNAL" />
<Link Source="10354:[5439..5508).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).2" Target="10354:[5400..5413).1" />
<Link Source="10354:[5439..5508).2" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).3" Target="10312:[69244..69269).1" />
<Link Source="10354:[5446..5507).1" Target="10312:[69244..69269).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5439..5508).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1099..1112).1" Target="10354:[5439..5508).2" />
<Link Source="10368:[1099..1112).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1114..1134).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1114..1134).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1048..1256).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1048..1256).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1076..1097).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1160..1169).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1099..1112).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1191..1202).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1114..1134).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1226..1236).1" Target="10354:[5446..5507).1" />
<Link Source="10312:[69237..69270).2" Target="10354:[5439..5508).3" />
<Link Source="10312:[69237..69270).2" Target="10312:[68882..69285).1" />
<Link Source="10312:[19478..19516).1" Target="10312:[69237..69270).2" />
<Link Source="10312:[19478..19516).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[19478..19515).1" Target="10312:[19259..19531).1" />
<Link Source="10354:[10217..10242).1" Target="10312:[19478..19516).1" />
<Link Source="10354:[10217..10242).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10192..10676).1" Target="10312:[18976..18995).1" />
<Link Source="10354:[10192..10676).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10272..10276).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[4058..4122).3" Target="10354:[10192..10676).1" />
<Link Source="10354:[4058..4122).3" Target="10354:[10272..10276).1" />
<Link Source="10354:[10268..10665).1" Target="10354:[4058..4122).3" />
<Link Source="10354:[10268..10665).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10268..10665).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10217..10242).1" />
<Link Source="10354:[10268..10665).2" Target="10368:[1160..1169).1" />
<Link Source="10354:[10268..10665).2" Target="10312:[19478..19515).1" />
<Link Source="10354:[10404..10408).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10386..10665).1" Target="10354:[10404..10408).1" />
<Link Source="10354:[10386..10665).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10442..10463).1" Target="10354:[10217..10242).1" />
<Link Source="10354:[10442..10463).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[10442..10462).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10463).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10192..10676).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8181..8186).1" Target="10368:[1160..1169).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[8214..8234).1" Target="10354:[8181..8186).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8248..8278).1" Target="10368:[1191..1202).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8109..8324).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8214..8234).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8248..8278).1" />
<Link Source="10354:[8248..8278).2" Target="10312:[67582..69285).2" />
<Link Source="10354:[8248..8278).2" Target="10354:[10442..10462).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8292..8298).1" Target="10368:[1226..1236).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[10442..10463).2" Target="10354:[10386..10665).1" />
<Link Source="10312:[19478..19516).2" Target="10312:[19259..19531).1" />
<Link Source="10312:[19259..19531).4" Target="10312:[19259..19531).1" />
<Link Source="10312:[19259..19531).4" Target="10354:[8248..8278).2" />
<Link Source="10312:[19259..19531).4" Target="10354:[8292..8298).1" />
<Link Source="10312:[19259..19531).4" Target="10312:[8049..8180).1" />
<Link Source="10312:[8049..8181).9" Target="10312:[7991..8409).1" />
<Link Source="10346:[11369..11508).10" Target="10346:[11258..12246).6" />
<Link Source="10346:[11532..11552).1" Target="10346:[11258..12246).6" />
<Link Source="10354:[4919..5009).3" Target="10346:[10629..10648).1" />
<Link Source="10354:[4919..5009).3" Target="10346:[11532..11552).1" />
<Link Source="10354:[4094..4107).5" Target="10354:[4919..5009).3" />
<Link Source="10354:[4094..4107).5" Target="10354:[8248..8278).2" />
<Link Source="10354:[4094..4107).5" Target="10346:[11532..11552).1" />
<Link Source="10346:[11528..12231).1" Target="10354:[4094..4107).5" />
<Link Source="10346:[11528..12231).1" Target="10346:[11258..12246).6" />
<Link Source="10346:[11665..12181).1" Target="10346:[11528..12231).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[10663..10672).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[11665..12181).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[11528..12231).1" />
<Link Source="10346:[11665..12181).3" Target="10346:[10650..10661).1" />
<Link Source="10346:[11665..12181).3" Target="10346:[11528..12231).1" />
<Link Source="10346:[11710..11746).1" Target="10346:[11528..12231).1" />
<Link Source="10286:[2155..2260).1" Target="10346:[10738..10759).1" />
<Link Source="10286:[2155..2260).1" Target="10346:[11710..11746).1" />
<Link Source="10286:[2191..2245).1" Target="10286:[2155..2260).1" />
<Link Source="10286:[2191..2245).1" Target="10354:[8248..8278).2" />
<Link Source="10286:[2191..2245).1" Target="10346:[11710..11746).1" />
<Link Source="10286:[2191..2245).2" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).2" Target="10346:[11710..11746).1" />
<Link Source="10286:[2198..2244).1" Target="10346:[11710..11746).1" />
<Link Source="10298:[471..492).14" Target="10286:[2191..2245).1" />
<Link Source="10298:[471..492).14" Target="10286:[2198..2244).1" />
<Link Source="10298:[494..511).14" Target="10286:[2191..2245).2" />
<Link Source="10298:[494..511).14" Target="10286:[2198..2244).1" />
<Link Source="10346:[11665..12181).4" Target="10298:[471..492).14" />
<Link Source="10346:[11665..12181).4" Target="10346:[11528..12231).1" />
<Link Source="10346:[11683..11747).1" Target="10346:[11528..12231).1" />
<Link Source="10345:[28212..28223).1" Target="10346:[11665..12181).3" />
<Link Source="10345:[28212..28223).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28225..28251).1" Target="10346:[11665..12181).4" />
<Link Source="10345:[28225..28251).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28185..28951).1" Target="10346:[11143..11188).2" />
<Link Source="10345:[28185..28951).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28277..28305).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28300..28304).1" Target="10345:[28277..28305).1" />
<Link Source="10345:[28300..28304).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).1" Target="10345:[28212..28223).1" />
<Link Source="10345:[28319..28911).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).2" Target="10345:[28277..28305).1" />
<Link Source="10345:[28319..28911).2" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28185..28951).1" />
<Link Source="10345:[28319..28911).3" Target="10354:[8248..8278).2" />
<Link Source="10345:[28319..28911).3" Target="10345:[28319..28911).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28319..28911).2" />
<Link Source="10345:[28319..28911).3" Target="10354:[8292..8298).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28300..28304).1" />
<Link Source="10345:[28319..28911).3" Target="10346:[11683..11747).1" />
<Link Source="10345:[28927..28940).1" Target="10346:[11683..11747).1" />
<Link Source="10346:[11665..12181).6" Target="10345:[28927..28940).1" />
<Link Source="10346:[11665..12181).6" Target="10346:[11528..12231).1" />
<Link Source="10346:[11665..12181).7" Target="10346:[11665..12181).2" />
<Link Source="10346:[11665..12181).7" Target="10346:[11665..12181).6" />
<Link Source="10346:[11665..12181).7" Target="10346:[11528..12231).1" />
<Link Source="10346:[12205..12212).1" Target="10346:[11528..12231).1" />
<Link Source="10354:[3720..3803).33" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).33" Target="10345:[28319..28911).3" />
<Link Source="10354:[3720..3803).33" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).33" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).3" Target="10354:[3720..3803).33" />
<Link Source="10312:[4680..4787).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4749..4764).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4749..4764).1" Target="10312:[4680..4787).3" />
<Link Source="10312:[5087..5101).1" Target="10312:[4749..4764).1" />
<Link Source="10312:[5087..5101).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[1585..1724).9" Target="10353:[7556..7642).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[41889..41914).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).3" Target="10060:[10217..10263).1" />
<Link Source="10319:[43504..43546).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).2" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).3" />
<Link Source="10319:[43504..43546).4" Target="10345:[28319..28911).3" />
<Link Source="10319:[43504..43546).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43562..43590).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[43799..44676).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[43095..43135).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43853..43873).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41088..41107).1" Target="10319:[43799..44676).3" />
<Link Source="10319:[41088..41107).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41138..41158).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4919..5009).5" Target="10319:[41088..41107).1" />
<Link Source="10354:[4919..5009).5" Target="10319:[41138..41158).1" />
<Link Source="10354:[4962..4966).5" Target="10319:[41138..41158).1" />
<Link Source="10354:[4058..4122).7" Target="10354:[4919..5009).5" />
<Link Source="10354:[4058..4122).7" Target="10354:[4962..4966).5" />
<Link Source="10354:[4094..4107).7" Target="10354:[4058..4122).7" />
<Link Source="10354:[4094..4107).7" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).7" Target="10354:[4962..4966).5" />
<Link Source="10319:[41133..41220).1" Target="10354:[4094..4107).7" />
<Link Source="10319:[41133..41220).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41254..41268).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41088..41107).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41254..41268).1" />
<Link Source="10354:[4561..4580).1" Target="10354:[4525..4595).1" />
<Link Source="10354:[4561..4580).1" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).1" Target="10319:[41254..41268).1" />
<Link Source="10319:[41236..41680).1" Target="10354:[4561..4580).1" />
<Link Source="10319:[41236..41680).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[41236..41680).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[43504..43546).4" />
<Link Source="10319:[41634..41646).1" Target="10319:[41302..41665).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[43562..43590).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[44751..44765).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[42089..42141).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).3" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[41849..41874).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[41983..42014).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44751..44765).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[42029..42063).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[51282..51325).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[44692..45392).1" />
<Link Source="10319:[44801..44929).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44785..44930).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84201..84218).1" Target="10319:[44785..44930).2" />
<Link Source="10319:[84201..84218).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84233..84242).1" Target="10319:[44785..44930).3" />
<Link Source="10319:[84233..84242).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84257..84273).1" Target="10319:[44785..44930).5" />
<Link Source="10319:[84257..84273).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84288..84313).1" Target="10319:[44785..44930).6" />
<Link Source="10319:[84288..84313).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84328..84359).1" Target="10319:[44785..44930).7" />
<Link Source="10319:[84328..84359).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84374..84391).1" Target="10319:[44785..44930).8" />
<Link Source="10319:[84374..84391).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84406..84447).1" Target="10319:[44785..44930).9" />
<Link Source="10319:[84406..84447).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84462..84508).1" Target="10319:[44785..44930).10" />
<Link Source="10319:[84462..84508).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[84167..84186).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[84201..84218).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[84233..84242).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[84257..84273).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[84288..84313).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[84328..84359).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[84374..84391).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[84406..84447).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[84462..84508).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[44801..44929).1" />
<Link Source="10319:[84550..84674).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84534..84675).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).2" Target="10319:[84534..84675).2" />
<Link Source="10319:[84907..109876).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).3" Target="10319:[84534..84675).3" />
<Link Source="10319:[84907..109876).3" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).4" Target="10319:[84534..84675).4" />
<Link Source="10319:[84907..109876).4" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).5" Target="10319:[84534..84675).5" />
<Link Source="10319:[84907..109876).5" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).6" Target="10319:[84534..84675).6" />
<Link Source="10319:[84907..109876).6" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).7" Target="10319:[84534..84675).7" />
<Link Source="10319:[84907..109876).7" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).8" Target="10319:[84534..84675).8" />
<Link Source="10319:[84907..109876).8" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).9" Target="10319:[84534..84675).9" />
<Link Source="10319:[84907..109876).9" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84124..109887).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84907..109876).4" />
<Link Source="10319:[85320..85348).2" Target="10319:[85320..85348).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[85366..85400).2" Target="10319:[85366..85400).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85434..85448).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[84907..109876).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[85434..85448).1" />
<Link Source="10354:[4561..4580).2" Target="10354:[4525..4595).2" />
<Link Source="10354:[4561..4580).2" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).2" Target="10319:[85434..85448).1" />
<Link Source="10319:[85420..85449).1" Target="10354:[4561..4580).2" />
<Link Source="10319:[85420..85449).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85467..85484).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85508..85528).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4919..5009).6" Target="10319:[84907..109876).1" />
<Link Source="10354:[4919..5009).6" Target="10319:[85508..85528).1" />
<Link Source="10354:[4962..4966).6" Target="10319:[85508..85528).1" />
<Link Source="10354:[4058..4122).8" Target="10354:[4919..5009).6" />
<Link Source="10354:[4058..4122).8" Target="10354:[4962..4966).6" />
<Link Source="10354:[4094..4107).8" Target="10354:[4058..4122).8" />
<Link Source="10354:[4094..4107).8" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).8" Target="10354:[4962..4966).6" />
<Link Source="10319:[85504..106825).1" Target="10354:[4094..4107).8" />
<Link Source="10319:[85504..106825).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85570..106806).1" Target="10319:[85504..106825).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85420..85449).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[43504..43546).4" />
<Link Source="10319:[85570..106806).2" Target="10319:[85570..106806).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85504..106825).1" />
<Link Source="10319:[103953..103983).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104078..104122).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104078..104122).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).2" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[104148..106735).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).3" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).3" Target="10319:[103953..103983).1" />
<Link Source="10319:[104148..106735).3" Target="EXTERNAL" />
<Link Source="10319:[104148..106735).3" Target="10319:[85570..106806).2" />
<Link Source="10319:[104874..105336).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104874..105336).1" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[104874..105336).2" Target="10319:[104874..105336).1" />
<Link Source="10319:[104874..105336).2" Target="10319:[84907..109876).10" />
<Link Source="10319:[104874..105336).2" Target="10319:[103953..103983).1" />
<Link Source="10319:[104874..105336).2" Target="10319:[104148..106735).2" />
<Link Source="10319:[105368..106708).1" Target="10319:[84907..109876).6" />
<Link Source="10319:[105368..106708).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105465..105535).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[105465..105535).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[105465..105535).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[105465..105535).2" Target="10319:[105368..106708).1" />
<Link Source="10319:[105465..105535).3" Target="10319:[84907..109876).4" />
<Link Source="10319:[105465..105535).3" Target="10319:[105368..106708).1" />
<Link Source="10319:[105476..105534).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[105465..105535).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76360..76385).1" Target="10319:[105465..105535).2" />
<Link Source="10319:[76360..76385).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76387..76402).1" Target="10319:[105465..105535).3" />
<Link Source="10319:[76387..76402).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[76345..76358).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76428..76480).2" Target="10319:[105476..105534).1" />
<Link Source="10060:[2841..2854).12" Target="10319:[76428..76480).1" />
<Link Source="10060:[2841..2854).12" Target="10319:[76428..76480).2" />
<Link Source="10060:[2856..2875).12" Target="10319:[76428..76480).1" />
<Link Source="10060:[2856..2875).12" Target="10319:[76428..76480).2" />
<Link Source="10060:[2901..2932).23" Target="10060:[2841..2854).12" />
<Link Source="10060:[2901..2932).23" Target="10319:[76428..76480).2" />
<Link Source="10060:[2948..3467).12" Target="10060:[2841..2854).12" />
<Link Source="10060:[2948..3467).12" Target="10319:[76428..76480).1" />
<Link Source="10060:[2948..3467).12" Target="10319:[76428..76480).2" />
<Link Source="10060:[3553..4223).14" Target="10060:[2841..2854).12" />
<Link Source="10060:[3553..4223).14" Target="10319:[76428..76480).1" />
<Link Source="10060:[3553..4223).14" Target="10319:[76428..76480).2" />
<Link Source="10060:[4243..4274).14" Target="10060:[2841..2854).12" />
<Link Source="10060:[4243..4274).14" Target="10319:[76428..76480).1" />
<Link Source="10060:[4243..4274).14" Target="10319:[76428..76480).2" />
<Link Source="10060:[3518..4328).14" Target="10060:[4243..4274).14" />
<Link Source="10060:[3518..4328).14" Target="10319:[76428..76480).2" />
<Link Source="10319:[76494..76582).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76428..76480).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76494..76582).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).3" Target="10319:[76428..76480).1" />
<Link Source="10319:[76494..76582).3" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).4" Target="10319:[76360..76385).1" />
<Link Source="10319:[76494..76582).4" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).5" Target="10319:[76387..76402).1" />
<Link Source="10319:[76494..76582).5" Target="10319:[76428..76480).1" />
<Link Source="10319:[76494..76582).5" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).6" Target="10319:[76494..76582).3" />
<Link Source="10319:[76494..76582).6" Target="10319:[76494..76582).4" />
<Link Source="10319:[76494..76582).6" Target="10319:[76494..76582).5" />
<Link Source="10319:[76494..76582).6" Target="10319:[76428..76480).1" />
<Link Source="10319:[76494..76582).6" Target="10319:[105476..105534).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[84691..84861).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84691..84861).1" Target="10319:[76494..76582).6" />
<Link Source="10319:[84691..84861).1" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84764..84846).1" Target="10319:[84257..84273).1" />
<Link Source="10319:[84764..84846).1" Target="10319:[84691..84861).1" />
<Link Source="10319:[84764..84846).2" Target="10319:[84691..84861).1" />
<Link Source="10319:[84764..84846).4" Target="10319:[106763..106783).1" />
<Link Source="10319:[84764..84846).4" Target="10319:[84691..84861).1" />
<Link Source="10319:[84764..84846).5" Target="10319:[84288..84313).1" />
<Link Source="10319:[84764..84846).5" Target="10319:[84691..84861).1" />
<Link Source="10319:[84764..84845).1" Target="10319:[84691..84861).1" />
<Link Source="10306:[358886..358901).1" Target="10319:[84764..84846).1" />
<Link Source="10306:[358886..358901).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358903..358930).1" Target="10319:[84764..84846).2" />
<Link Source="10306:[358903..358930).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358932..358945).1" Target="10319:[84764..84846).4" />
<Link Source="10306:[358932..358945).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358947..358972).1" Target="10319:[84764..84846).5" />
<Link Source="10306:[358947..358972).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358838..360009).1" Target="10319:[84124..109887).1" />
<Link Source="10306:[358838..360009).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358998..359998).1" Target="10306:[358932..358945).1" />
<Link Source="10306:[358998..359998).1" Target="10319:[76494..76582).6" />
<Link Source="10306:[358998..359998).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358998..359998).2" Target="10319:[84764..84845).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[84877..84891).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[76494..76582).6" />
<Link Source="10319:[44948..45377).1" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[45408..45421).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11383..11549).1" Target="10319:[43095..43135).1" />
<Link Source="10354:[11383..11549).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11428..11440).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[3841..3991).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[3841..3991).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3887..3892).1" Target="EXTERNAL" />
<Link Source="10354:[3887..3892).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3887..3892).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3932..3952).1" Target="10319:[76494..76582).6" />
<Link Source="10354:[3932..3952).1" Target="10354:[3887..3892).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3980).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3966..3980).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[11428..11441).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[3932..3952).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11455..11538).1" />
<Link Source="10354:[11455..11538).2" Target="10319:[45408..45421).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11455..11538).2" />
<Link Source="10354:[11506..11523).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[3932..3952).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[11506..11523).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[3966..3972).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[11455..11538).2" />
<Link Source="10319:[45408..45422).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45436..45568).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[45436..45568).1" Target="10354:[11506..11523).2" />
<Link Source="10319:[45436..45568).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45505..45551).1" Target="10319:[20515..20674).1" />
<Link Source="10286:[10010..10027).1" Target="10319:[45436..45568).1" />
<Link Source="10286:[10010..10027).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[9966..10197).1" Target="10319:[41732..45579).1" />
<Link Source="10286:[9966..10197).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10053..10100).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10053..10100).1" Target="10354:[11506..11523).2" />
<Link Source="10286:[10053..10100).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10114..10186).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10114..10186).1" Target="10354:[11506..11523).2" />
<Link Source="10286:[10114..10186).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10121..10185).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[9966..10197).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[9073..9094).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[9096..9108).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9134..9189).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9203..9282).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10053..10100).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10121..10185).1" />
<Link Source="10286:[9305..9942).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9305..9942).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9298..9943).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[9298..9943).2" Target="EXTERNAL" />
<Link Source="10286:[9298..9943).2" Target="10286:[9305..9942).1" />
<Link Source="10286:[9798..9837).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[10465..10663).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9298..9943).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10607..10651).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10465..10663).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10551..10586).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10607..10651).1" />
<Link Source="10325:[4462..4594).1" Target="10286:[10465..10663).2" />
<Link Source="10325:[4462..4594).1" Target="10286:[10607..10651).1" />
<Link Source="10325:[4556..4582).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4462..4594).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10675..11259).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10465..10663).2" />
<Link Source="10286:[10741..11248).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[11085..11098).1" Target="10286:[10741..11248).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[11085..11098).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10600..10652).1" Target="10325:[4549..4583).1" />
<Link Source="10286:[10600..10652).1" Target="10286:[10607..10651).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[84877..84891).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[45443..45567).1" Target="10319:[20515..20674).1" />
<Link Source="10287:[2306..2328).1" Target="10286:[10600..10652).1" />
<Link Source="10287:[2306..2328).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2330..2343).1" Target="10319:[45436..45568).4" />
<Link Source="10287:[2330..2343).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2377..2471).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2377..2471).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2489..2521).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2489..2521).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).1" Target="10287:[2489..2521).1" />
<Link Source="10287:[2539..2781).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2546..2558).1" Target="10287:[2539..2781).1" />
<Link Source="10287:[2546..2558).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).2" Target="10287:[2306..2328).1" />
<Link Source="10287:[2539..2781).2" Target="10287:[2546..2558).1" />
<Link Source="10287:[2680..2780).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[718..757).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[718..757).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[666..1076).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[666..1076).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[791..833).1" Target="10287:[718..757).1" />
<Link Source="10287:[791..833).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[791..833).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[851..871).1" Target="10287:[718..757).1" />
<Link Source="10287:[851..871).1" Target="10287:[666..1076).1" />
<Link Source="10287:[851..871).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..927).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..919).1" Target="10287:[912..927).1" />
<Link Source="10287:[912..919).1" Target="10287:[666..1076).1" />
<Link Source="10287:[912..919).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..972).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..963).1" Target="10287:[945..972).1" />
<Link Source="10287:[945..963).1" Target="10287:[666..1076).1" />
<Link Source="10287:[945..963).1" Target="10287:[2680..2780).1" />
<Link Source="10319:[18724..18740).1" Target="10319:[17929..18023).1" />
<Link Source="10287:[1857..1908).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1857..1908).1" Target="10319:[18724..18740).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1857..1908).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[851..871).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[1860..1908).1" Target="10319:[18724..18740).1" />
<Link Source="10319:[18710..18742).1" Target="10287:[1860..1908).1" />
<Link Source="10319:[18710..18742).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18758..18826).1" Target="10287:[2546..2558).1" />
<Link Source="10319:[18758..18826).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18758..18826).2" Target="10319:[18456..18481).1" />
<Link Source="10319:[18758..18826).2" Target="10319:[17929..18023).1" />
<Link Source="10319:[18758..18826).3" Target="10319:[18431..18454).1" />
<Link Source="10319:[18758..18826).3" Target="10319:[17929..18023).1" />
<Link Source="10319:[18758..18826).4" Target="10319:[18483..18522).1" />
<Link Source="10319:[18758..18826).4" Target="10319:[17929..18023).1" />
<Link Source="10319:[18765..18825).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[18758..18826).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51817..51842).1" Target="10319:[18758..18826).2" />
<Link Source="10319:[51817..51842).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51844..51861).1" Target="10319:[18758..18826).3" />
<Link Source="10319:[51844..51861).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51863..51909).1" Target="10319:[18758..18826).4" />
<Link Source="10319:[51863..51909).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[18300..18837).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51939..51953).1" Target="10319:[18765..18825).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51762..51815).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).1" Target="10287:[1680..1716).1" />
<Link Source="10287:[1683..1690).1" Target="10287:[912..919).1" />
<Link Source="10287:[1683..1690).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).1" Target="10287:[1683..1690).1" />
<Link Source="10287:[1683..1716).1" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).1" Target="10287:[1683..1716).1" />
<Link Source="10319:[51935..52244).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[51762..51815).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[18765..18825).1" />
<Link Source="10345:[26673..26726).9" Target="10345:[26673..26726).1" />
<Link Source="10345:[26673..26726).9" Target="10319:[52260..52274).1" />
<Link Source="10345:[26673..26726).9" Target="10287:[2539..2781).2" />
<Link Source="10345:[26673..26726).9" Target="10287:[851..871).1" />
<Link Source="10345:[26673..26726).9" Target="10287:[912..919).1" />
<Link Source="10345:[26673..26726).9" Target="10287:[945..963).1" />
<Link Source="10345:[26673..26726).9" Target="10345:[25064..25074).2" />
<Link Source="10287:[1784..1818).1" Target="10345:[26673..26726).1" />
<Link Source="10287:[1787..1793).1" Target="10345:[26673..26726).1" />
<Link Source="10287:[1535..1573).1" Target="10287:[1784..1818).1" />
<Link Source="10287:[1535..1573).1" Target="10287:[1787..1793).1" />
<Link Source="10287:[1549..1568).1" Target="10287:[1787..1793).1" />
<Link Source="10287:[1474..1497).1" Target="10287:[1535..1573).1" />
<Link Source="10287:[1474..1497).1" Target="10287:[1549..1568).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[1474..1497).1" />
<Link Source="10287:[1477..1497).1" Target="10345:[26673..26726).9" />
<Link Source="10287:[1477..1497).1" Target="10287:[1549..1568).1" />
<Link Source="10287:[1538..1573).1" Target="10287:[1477..1497).1" />
<Link Source="10287:[1538..1573).1" Target="10345:[26673..26726).9" />
<Link Source="10287:[1538..1573).1" Target="10287:[1787..1793).1" />
<Link Source="10287:[1787..1818).1" Target="10287:[1538..1573).1" />
<Link Source="10287:[1787..1818).1" Target="10345:[26673..26726).1" />
<Link Source="10345:[26744..26809).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[26744..26809).2" Target="10345:[26403..26475).1" />
<Link Source="10345:[26744..26809).2" Target="10345:[26744..26809).1" />
<Link Source="10345:[26744..26809).2" Target="10346:[3832..3852).1" />
<Link Source="10345:[26744..26809).2" Target="10345:[25064..25074).2" />
<Link Source="10345:[26913..26963).1" Target="10345:[26403..26475).1" />
<Link Source="10345:[26913..26963).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[26913..26963).2" Target="10345:[26913..26963).1" />
<Link Source="10345:[26913..26963).2" Target="10345:[26744..26809).2" />
<Link Source="10345:[26913..26963).2" Target="10345:[25064..25074).2" />
<Link Source="10345:[26913..26963).3" Target="10345:[25064..25074).2" />
<Link Source="10346:[7369..7588).1" Target="10345:[26913..26963).2" />
<Link Source="10346:[7369..7588).1" Target="10345:[26913..26963).3" />
<Link Source="10346:[7405..7454).1" Target="10346:[7369..7588).1" />
<Link Source="10346:[7405..7454).1" Target="10345:[26913..26963).2" />
<Link Source="10346:[7405..7454).1" Target="10345:[26913..26963).3" />
<Link Source="10346:[7472..7573).1" Target="10345:[26913..26963).3" />
<Link Source="10346:[7472..7573).2" Target="10346:[7405..7454).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7472..7573).1" />
<Link Source="10346:[7472..7573).2" Target="10345:[26913..26963).3" />
<Link Source="10346:[7479..7503).1" Target="10346:[7472..7573).2" />
<Link Source="10346:[7479..7503).1" Target="10345:[26913..26963).3" />
<Link Source="10845:[522..547).1" Target="10345:[26913..26963).2" />
<Link Source="10845:[522..547).1" Target="10345:[26913..26963).3" />
<Link Source="10845:[549..580).1" Target="10345:[26913..26963).2" />
<Link Source="10845:[549..580).1" Target="10345:[26913..26963).3" />
<Link Source="10845:[499..728).1" Target="10345:[26913..26963).2" />
<Link Source="10845:[499..728).1" Target="10345:[26913..26963).3" />
<Link Source="10845:[602..612).1" Target="10845:[522..547).1" />
<Link Source="10845:[602..612).1" Target="10345:[26913..26963).3" />
<Link Source="10845:[637..638).1" Target="10345:[26913..26963).3" />
<Link Source="10845:[660..678).1" Target="10845:[549..580).1" />
<Link Source="10845:[660..678).1" Target="10345:[26913..26963).3" />
<Link Source="10845:[701..705).1" Target="10345:[26913..26963).3" />
<Link Source="10845:[499..728).2" Target="10345:[26913..26963).3" />
<Link Source="10845:[764..789).1" Target="10845:[602..612).1" />
<Link Source="10845:[764..789).1" Target="10845:[499..728).2" />
<Link Source="10845:[791..816).1" Target="10845:[637..638).1" />
<Link Source="10845:[791..816).1" Target="10845:[499..728).2" />
<Link Source="10845:[818..841).1" Target="10845:[660..678).1" />
<Link Source="10845:[818..841).1" Target="10845:[499..728).2" />
<Link Source="10845:[843..878).1" Target="10845:[701..705).1" />
<Link Source="10845:[843..878).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).1" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).2" />
<Link Source="10843:[661..687).1" Target="10843:[685..687).1" />
<Link Source="10843:[82071..82080).1" Target="10843:[82075..82080).1" />
<Link Source="10843:[82110..82118).1" Target="10843:[82114..82118).1" />
<Link Source="10843:[82447..82485).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82447..82485).2" Target="10843:[82447..82485).1" />
<Link Source="10843:[82447..82485).4" Target="10843:[82110..82118).1" />
<Link Source="10843:[82447..82485).4" Target="10843:[82447..82485).1" />
<Link Source="10843:[82519..82557).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82519..82557).2" Target="10843:[82519..82557).1" />
<Link Source="10843:[82519..82557).4" Target="10843:[82110..82118).1" />
<Link Source="10843:[82519..82557).4" Target="10843:[82519..82557).1" />
<Link Source="10843:[82591..82629).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82591..82629).2" Target="10843:[82591..82629).1" />
<Link Source="10843:[82591..82629).6" Target="10843:[82110..82118).1" />
<Link Source="10843:[82591..82629).6" Target="10843:[82591..82629).1" />
<Link Source="10843:[82663..82701).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82663..82701).2" Target="10843:[82663..82701).1" />
<Link Source="10843:[82663..82701).6" Target="10843:[82110..82118).1" />
<Link Source="10843:[82663..82701).6" Target="10843:[82663..82701).1" />
<Link Source="10843:[82735..82773).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82735..82773).2" Target="10843:[82735..82773).1" />
<Link Source="10843:[82735..82773).8" Target="10843:[82110..82118).1" />
<Link Source="10843:[82735..82773).8" Target="10843:[82735..82773).1" />
<Link Source="10843:[82807..82845).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82807..82845).2" Target="10843:[82807..82845).1" />
<Link Source="10843:[82807..82845).8" Target="10843:[82110..82118).1" />
<Link Source="10843:[82807..82845).8" Target="10843:[82807..82845).1" />
<Link Source="10843:[82879..82917).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82879..82917).2" Target="10843:[82879..82917).1" />
<Link Source="10843:[82879..82917).11" Target="10843:[82110..82118).1" />
<Link Source="10843:[82879..82917).11" Target="10843:[82879..82917).1" />
<Link Source="10843:[82951..82989).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82951..82989).2" Target="10843:[82951..82989).1" />
<Link Source="10843:[82951..82989).11" Target="10843:[82110..82118).1" />
<Link Source="10843:[82951..82989).11" Target="10843:[82951..82989).1" />
<Link Source="10843:[83023..83061).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83023..83061).2" Target="10843:[83023..83061).1" />
<Link Source="10843:[83023..83061).5" Target="10843:[82110..82118).1" />
<Link Source="10843:[83023..83061).5" Target="10843:[83023..83061).1" />
<Link Source="10843:[83095..83133).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83095..83133).2" Target="10843:[83095..83133).1" />
<Link Source="10843:[83095..83133).12" Target="10843:[82110..82118).1" />
<Link Source="10843:[83095..83133).12" Target="10843:[83095..83133).1" />
<Link Source="10843:[83167..83205).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83167..83205).2" Target="10843:[83167..83205).1" />
<Link Source="10843:[83239..83277).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83239..83277).2" Target="10843:[83239..83277).1" />
<Link Source="10843:[82333..83288).2" Target="10843:[82447..82485).1" />
<Link Source="10843:[82333..83288).2" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).3" Target="10843:[82519..82557).1" />
<Link Source="10843:[82333..83288).3" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).4" Target="10843:[82591..82629).1" />
<Link Source="10843:[82333..83288).4" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).5" Target="10843:[82663..82701).1" />
<Link Source="10843:[82333..83288).5" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).6" Target="10843:[82735..82773).1" />
<Link Source="10843:[82333..83288).6" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).7" Target="10843:[82807..82845).1" />
<Link Source="10843:[82333..83288).7" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).8" Target="10843:[82879..82917).1" />
<Link Source="10843:[82333..83288).8" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).9" Target="10843:[82951..82989).1" />
<Link Source="10843:[82333..83288).9" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).10" Target="10843:[83023..83061).1" />
<Link Source="10843:[82333..83288).10" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).11" Target="10843:[83095..83133).1" />
<Link Source="10843:[82333..83288).11" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).12" Target="10843:[83167..83205).1" />
<Link Source="10843:[82333..83288).12" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).13" Target="10843:[83239..83277).1" />
<Link Source="10843:[82333..83288).13" Target="10843:[82333..83288).1" />
<Link Source="10843:[82293..83288).1" Target="10843:[82333..83288).1" />
<Link Source="10843:[83487..83525).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83487..83525).2" Target="10843:[83487..83525).1" />
<Link Source="10843:[83487..83525).3" Target="10843:[82110..82118).1" />
<Link Source="10843:[83487..83525).3" Target="10843:[83487..83525).1" />
<Link Source="10843:[83559..83597).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83559..83597).2" Target="10843:[83559..83597).1" />
<Link Source="10843:[83559..83597).3" Target="10843:[82071..82080).1" />
<Link Source="10843:[83559..83597).3" Target="10843:[83559..83597).1" />
<Link Source="10843:[83631..83669).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83631..83669).2" Target="10843:[83631..83669).1" />
<Link Source="10843:[83631..83669).4" Target="10843:[82071..82080).1" />
<Link Source="10843:[83631..83669).4" Target="10843:[83631..83669).1" />
<Link Source="10843:[83703..83741).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83703..83741).2" Target="10843:[83703..83741).1" />
<Link Source="10843:[83703..83741).5" Target="10843:[82071..82080).1" />
<Link Source="10843:[83703..83741).5" Target="10843:[83703..83741).1" />
<Link Source="10843:[83775..83813).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83775..83813).2" Target="10843:[83775..83813).1" />
<Link Source="10843:[83775..83813).6" Target="10843:[82071..82080).1" />
<Link Source="10843:[83775..83813).6" Target="10843:[83775..83813).1" />
<Link Source="10843:[83847..83885).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83847..83885).2" Target="10843:[83847..83885).1" />
<Link Source="10843:[83847..83885).7" Target="10843:[82071..82080).1" />
<Link Source="10843:[83847..83885).7" Target="10843:[83847..83885).1" />
<Link Source="10843:[83919..83957).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83919..83957).2" Target="10843:[83919..83957).1" />
<Link Source="10843:[83919..83957).8" Target="10843:[82071..82080).1" />
<Link Source="10843:[83919..83957).8" Target="10843:[83919..83957).1" />
<Link Source="10843:[83991..84029).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83991..84029).2" Target="10843:[83991..84029).1" />
<Link Source="10843:[83991..84029).9" Target="10843:[82071..82080).1" />
<Link Source="10843:[83991..84029).9" Target="10843:[83991..84029).1" />
<Link Source="10843:[84063..84101).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84063..84101).2" Target="10843:[84063..84101).1" />
<Link Source="10843:[84063..84101).5" Target="10843:[82071..82080).1" />
<Link Source="10843:[84063..84101).5" Target="10843:[84063..84101).1" />
<Link Source="10843:[84135..84173).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84135..84173).2" Target="10843:[84135..84173).1" />
<Link Source="10843:[84135..84173).11" Target="10843:[82071..82080).1" />
<Link Source="10843:[84135..84173).11" Target="10843:[84135..84173).1" />
<Link Source="10843:[84207..84245).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84207..84245).2" Target="10843:[84207..84245).1" />
<Link Source="10843:[84207..84245).12" Target="10843:[82071..82080).1" />
<Link Source="10843:[84207..84245).12" Target="10843:[84207..84245).1" />
<Link Source="10843:[84279..84317).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84279..84317).2" Target="10843:[84279..84317).1" />
<Link Source="10843:[84279..84317).13" Target="10843:[82071..82080).1" />
<Link Source="10843:[84279..84317).13" Target="10843:[84279..84317).1" />
<Link Source="10843:[83373..84328).2" Target="10843:[83487..83525).1" />
<Link Source="10843:[83373..84328).2" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).3" Target="10843:[83559..83597).1" />
<Link Source="10843:[83373..84328).3" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).4" Target="10843:[83631..83669).1" />
<Link Source="10843:[83373..84328).4" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).5" Target="10843:[83703..83741).1" />
<Link Source="10843:[83373..84328).5" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).6" Target="10843:[83775..83813).1" />
<Link Source="10843:[83373..84328).6" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).7" Target="10843:[83847..83885).1" />
<Link Source="10843:[83373..84328).7" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).8" Target="10843:[83919..83957).1" />
<Link Source="10843:[83373..84328).8" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).9" Target="10843:[83991..84029).1" />
<Link Source="10843:[83373..84328).9" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).10" Target="10843:[84063..84101).1" />
<Link Source="10843:[83373..84328).10" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).11" Target="10843:[84135..84173).1" />
<Link Source="10843:[83373..84328).11" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).12" Target="10843:[84207..84245).1" />
<Link Source="10843:[83373..84328).12" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).13" Target="10843:[84279..84317).1" />
<Link Source="10843:[83373..84328).13" Target="10843:[83373..84328).1" />
<Link Source="10843:[83333..84328).1" Target="10843:[83373..84328).1" />
<Link Source="10845:[900..910).1" Target="10845:[764..789).1" />
<Link Source="10845:[900..910).1" Target="10845:[499..728).2" />
<Link Source="10845:[912..933).1" Target="10845:[791..816).1" />
<Link Source="10845:[912..933).1" Target="10845:[499..728).2" />
<Link Source="10845:[935..953).1" Target="10845:[818..841).1" />
<Link Source="10845:[935..953).1" Target="10845:[499..728).2" />
<Link Source="10845:[955..974).1" Target="10845:[843..878).1" />
<Link Source="10845:[955..974).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).2" Target="10845:[499..728).2" />
<Link Source="10843:[1173..1198).1" Target="10845:[900..910).1" />
<Link Source="10843:[1173..1198).1" Target="10845:[740..997).2" />
<Link Source="10843:[1200..1225).1" Target="10845:[912..933).1" />
<Link Source="10843:[1200..1225).1" Target="10845:[740..997).2" />
<Link Source="10843:[1227..1250).1" Target="10845:[935..953).1" />
<Link Source="10843:[1227..1250).1" Target="10845:[740..997).2" />
<Link Source="10843:[1252..1287).1" Target="10845:[955..974).1" />
<Link Source="10843:[1252..1287).1" Target="10845:[740..997).2" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).1" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).2" />
<Link Source="10843:[734..744).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[734..744).1" Target="10845:[740..997).2" />
<Link Source="10843:[778..799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[778..799).1" Target="10845:[740..997).2" />
<Link Source="10843:[835..853).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[835..853).1" Target="10845:[740..997).2" />
<Link Source="10843:[1113..1134).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1113..1134).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).2" Target="10843:[1173..1198).1" />
<Link Source="10843:[1313..1354).2" Target="10843:[1313..1354).1" />
<Link Source="10843:[1313..1354).2" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).1" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1368..1474).2" Target="10843:[1368..1474).1" />
<Link Source="10843:[1368..1474).2" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).1" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1488..1600).2" Target="10843:[1488..1600).1" />
<Link Source="10843:[1488..1600).2" Target="10845:[740..997).2" />
<Link Source="10843:[1616..1631).1" Target="10843:[1173..1198).1" />
<Link Source="10843:[1616..1631).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1616..1631).1" Target="10845:[740..997).2" />
<Link Source="10843:[1659..1685).1" Target="10843:[1200..1225).1" />
<Link Source="10843:[1659..1685).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1659..1685).1" Target="10845:[740..997).2" />
<Link Source="10843:[1724..1742).1" Target="10843:[1227..1250).1" />
<Link Source="10843:[1724..1742).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1724..1742).1" Target="10845:[740..997).2" />
<Link Source="10843:[1778..1799).1" Target="10843:[1252..1287).1" />
<Link Source="10843:[1778..1799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1778..1799).1" Target="10845:[740..997).2" />
<Link Source="10345:[26913..26963).8" Target="10345:[26913..26963).2" />
<Link Source="10345:[26913..26963).8" Target="10346:[7479..7503).1" />
<Link Source="10345:[26913..26963).8" Target="10843:[1616..1631).1" />
<Link Source="10345:[26913..26963).8" Target="10843:[1659..1685).1" />
<Link Source="10345:[26913..26963).8" Target="10843:[1724..1742).1" />
<Link Source="10345:[26913..26963).8" Target="10843:[1778..1799).1" />
<Link Source="10345:[26913..26963).8" Target="10345:[25064..25074).2" />
<Link Source="10345:[26994..27050).1" Target="10345:[26266..28173).2" />
<Link Source="10345:[26994..27050).1" Target="10345:[26913..26963).8" />
<Link Source="10345:[26994..27050).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[27064..27114).1" Target="10345:[26994..27050).1" />
<Link Source="10345:[27064..27114).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[27064..27114).2" Target="10345:[25064..25074).2" />
<Link Source="10345:[27082..27113).1" Target="10345:[25064..25074).2" />
<Link Source="10845:[522..547).2" Target="10345:[27064..27114).1" />
<Link Source="10845:[522..547).2" Target="10345:[27082..27113).1" />
<Link Source="10845:[549..580).2" Target="10345:[27064..27114).2" />
<Link Source="10845:[549..580).2" Target="10345:[27082..27113).1" />
<Link Source="10845:[499..728).3" Target="10345:[27064..27114).2" />
<Link Source="10845:[499..728).3" Target="10345:[27082..27113).1" />
<Link Source="10845:[637..638).3" Target="10345:[27082..27113).1" />
<Link Source="10845:[660..678).2" Target="10845:[549..580).2" />
<Link Source="10845:[660..678).2" Target="10345:[27082..27113).1" />
<Link Source="10845:[701..705).3" Target="10345:[27082..27113).1" />
<Link Source="10845:[499..728).4" Target="10345:[27082..27113).1" />
<Link Source="10845:[791..816).2" Target="10845:[637..638).3" />
<Link Source="10845:[791..816).2" Target="10845:[499..728).4" />
<Link Source="10845:[818..841).2" Target="10845:[660..678).2" />
<Link Source="10845:[818..841).2" Target="10845:[499..728).4" />
<Link Source="10845:[843..878).2" Target="10845:[701..705).3" />
<Link Source="10845:[843..878).2" Target="10845:[499..728).4" />
<Link Source="10845:[740..997).3" Target="10845:[499..728).3" />
<Link Source="10845:[740..997).3" Target="10845:[499..728).4" />
<Link Source="10845:[912..933).2" Target="10845:[791..816).2" />
<Link Source="10845:[912..933).2" Target="10845:[499..728).4" />
<Link Source="10845:[935..953).2" Target="10845:[818..841).2" />
<Link Source="10845:[935..953).2" Target="10845:[499..728).4" />
<Link Source="10845:[955..974).2" Target="10845:[843..878).2" />
<Link Source="10845:[955..974).2" Target="10845:[499..728).4" />
<Link Source="10845:[740..997).4" Target="10845:[499..728).4" />
<Link Source="10843:[1200..1225).2" Target="10845:[912..933).2" />
<Link Source="10843:[1200..1225).2" Target="10845:[740..997).4" />
<Link Source="10843:[1227..1250).2" Target="10845:[935..953).2" />
<Link Source="10843:[1227..1250).2" Target="10845:[740..997).4" />
<Link Source="10843:[1252..1287).2" Target="10845:[955..974).2" />
<Link Source="10843:[1252..1287).2" Target="10845:[740..997).4" />
<Link Source="10843:[1147..1833).2" Target="10845:[740..997).3" />
<Link Source="10843:[1147..1833).2" Target="10845:[740..997).4" />
<Link Source="10843:[734..744).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[734..744).2" Target="10845:[740..997).4" />
<Link Source="10843:[778..799).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[778..799).2" Target="10845:[740..997).4" />
<Link Source="10843:[835..853).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[835..853).2" Target="10845:[740..997).4" />
<Link Source="10843:[1113..1134).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[1113..1134).2" Target="10845:[740..997).4" />
<Link Source="10843:[1313..1354).5" Target="10845:[740..997).4" />
<Link Source="10843:[1313..1354).6" Target="10845:[522..547).2" />
<Link Source="10843:[1313..1354).6" Target="10843:[1313..1354).5" />
<Link Source="10843:[1313..1354).6" Target="10845:[740..997).4" />
<Link Source="10843:[1368..1474).6" Target="10845:[740..997).4" />
<Link Source="10843:[1368..1474).7" Target="10843:[1252..1287).2" />
<Link Source="10843:[1368..1474).7" Target="10843:[1368..1474).6" />
<Link Source="10843:[1368..1474).7" Target="10845:[740..997).4" />
<Link Source="10843:[1488..1600).6" Target="10845:[740..997).4" />
<Link Source="10843:[1488..1600).7" Target="10843:[1252..1287).2" />
<Link Source="10843:[1488..1600).7" Target="10843:[1488..1600).6" />
<Link Source="10843:[1488..1600).7" Target="10845:[740..997).4" />
<Link Source="10843:[1659..1685).2" Target="10843:[1200..1225).2" />
<Link Source="10843:[1659..1685).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[1659..1685).2" Target="10845:[740..997).4" />
<Link Source="10843:[1724..1742).2" Target="10843:[1227..1250).2" />
<Link Source="10843:[1724..1742).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[1724..1742).2" Target="10845:[740..997).4" />
<Link Source="10843:[1778..1799).2" Target="10843:[1252..1287).2" />
<Link Source="10843:[1778..1799).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[1778..1799).2" Target="10845:[740..997).4" />
<Link Source="10345:[27128..27705).1" Target="10345:[26266..28173).2" />
<Link Source="10345:[27128..27705).1" Target="10345:[26913..26963).8" />
<Link Source="10345:[27128..27705).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[27773..27973).1" Target="10345:[26266..28173).2" />
<Link Source="10345:[27773..27973).1" Target="10345:[26913..26963).8" />
<Link Source="10345:[27773..27973).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[27989..28162).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[27989..28162).2" Target="10345:[26266..28173).2" />
<Link Source="10345:[27989..28162).2" Target="10345:[26913..26963).8" />
<Link Source="10345:[27989..28162).2" Target="10345:[27989..28162).1" />
<Link Source="10345:[27989..28162).2" Target="10345:[25064..25074).2" />
<Link Source="10345:[25064..25075).2" Target="10346:[3832..3852).1" />
<Link Source="10345:[25858..25865).2" Target="10345:[26913..26963).8" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4549..4579).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4549..4579).1" Target="10345:[26913..26963).8" />
<Link Source="10076:[4549..4579).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4821..4829).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3592..3700).2" Target="10076:[4411..5059).1" />
<Link Source="10076:[3592..3700).2" Target="10076:[4821..4829).1" />
<Link Source="10076:[3628..3685).3" Target="10076:[3592..3700).2" />
<Link Source="10076:[3628..3685).3" Target="10345:[26913..26963).8" />
<Link Source="10076:[3628..3685).3" Target="EXTERNAL" />
<Link Source="10076:[3628..3685).3" Target="10076:[4821..4829).1" />
<Link Source="10076:[4815..4966).1" Target="10076:[3628..3685).3" />
<Link Source="10076:[4815..4966).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).4" Target="10076:[4437..4452).1" />
<Link Source="10076:[4815..4966).4" Target="10345:[26913..26963).8" />
<Link Source="10076:[4815..4966).4" Target="10076:[4815..4966).3" />
<Link Source="10076:[4815..4966).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).4" />
<Link Source="10076:[4815..4966).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[4932..4951).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4932..4951).1" Target="10345:[26913..26963).8" />
<Link Source="10076:[4932..4951).1" Target="10076:[4815..4966).5" />
<Link Source="10076:[4982..5048).1" Target="10076:[4932..4951).1" />
<Link Source="10076:[4982..5048).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).2" Target="10076:[4549..4579).1" />
<Link Source="10076:[4982..5048).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).3" Target="10076:[4454..4498).1" />
<Link Source="10076:[4982..5048).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).4" Target="10076:[4500..4523).1" />
<Link Source="10076:[4982..5048).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4989..5047).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4982..5048).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5114..5126).1" Target="10076:[4982..5048).2" />
<Link Source="10076:[5114..5126).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5128..5172).1" Target="10076:[4982..5048).3" />
<Link Source="10076:[5128..5172).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5174..5197).1" Target="10076:[4982..5048).4" />
<Link Source="10076:[5174..5197).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5097..5112).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).2" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).2" Target="10345:[26913..26963).8" />
<Link Source="10076:[5277..5448).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).1" Target="10076:[5071..5759).1" />
<Link Source="10076:[5470..5538).1" Target="10345:[26913..26963).8" />
<Link Source="10076:[5470..5538).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[5114..5126).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[5128..5172).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[5174..5197).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5613).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[1039..1051).2" Target="10076:[5552..5614).1" />
<Link Source="10077:[1039..1051).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1053..1090).2" Target="10076:[5552..5614).2" />
<Link Source="10077:[1053..1090).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1092..1108).2" Target="10076:[5552..5614).3" />
<Link Source="10077:[1092..1108).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1014..1370).2" Target="10076:[5470..5538).1" />
<Link Source="10077:[1014..1370).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).8" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).9" Target="10077:[1053..1090).2" />
<Link Source="10077:[1142..1210).9" Target="10077:[1142..1210).8" />
<Link Source="10077:[1142..1210).9" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).11" Target="10077:[1092..1108).2" />
<Link Source="10077:[1142..1210).11" Target="10077:[1142..1210).8" />
<Link Source="10077:[1142..1210).11" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).12" Target="10077:[1142..1210).9" />
<Link Source="10077:[1142..1210).12" Target="10077:[1142..1210).11" />
<Link Source="10077:[1142..1210).12" Target="10076:[5552..5613).1" />
<Link Source="10077:[1230..1239).2" Target="10077:[1039..1051).2" />
<Link Source="10077:[1230..1239).2" Target="10077:[1014..1370).2" />
<Link Source="10077:[1230..1239).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1269..1290).2" Target="10077:[1053..1090).2" />
<Link Source="10077:[1269..1290).2" Target="10077:[1014..1370).2" />
<Link Source="10077:[1269..1290).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1332..1342).2" Target="10077:[1092..1108).2" />
<Link Source="10077:[1332..1342).2" Target="10077:[1014..1370).2" />
<Link Source="10077:[1332..1342).2" Target="10076:[5552..5613).1" />
<Link Source="10076:[5552..5614).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[5097..5112).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5644..5663).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5628..5664).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2664..2780).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[2664..2780).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2742..2765).1" Target="10077:[2693..2708).1" />
<Link Source="10077:[2742..2765).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2749..2764).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2742..2765).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2664..2780).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2852..2986).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2926..2971).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2877..2892).1" />
<Link Source="10077:[2926..2971).2" Target="10076:[5470..5538).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1230..1239).2" />
<Link Source="10077:[2926..2971).2" Target="10077:[1269..1290).2" />
<Link Source="10077:[2926..2971).2" Target="10077:[1332..1342).2" />
<Link Source="10077:[2926..2971).2" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).3" Target="10077:[2749..2764).1" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34678..34716).1" Target="10077:[34617..34644).1" />
<Link Source="10077:[34678..34716).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34685..34715).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[31025..31053).1" Target="10077:[34678..34716).1" />
<Link Source="10077:[31025..31053).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34572..34731).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[31087..31238).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[2926..2971).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[34685..34715).1" />
<Link Source="10077:[31258..31297).1" Target="10077:[39610..39829).1" />
<Link Source="10077:[31258..31297).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).2" Target="10077:[31490..32331).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[30985..32417).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).6" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).7" Target="10077:[34685..34715).1" />
<Link Source="10077:[31842..31894).1" Target="EXTERNAL" />
<Link Source="10077:[31842..31894).1" Target="10077:[31490..32331).2" />
<Link Source="10077:[32351..32402).1" Target="10077:[31025..31053).1" />
<Link Source="10077:[32351..32402).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[31842..31894).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[32358..32401).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32351..32402).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32504..32523).1" Target="10077:[32351..32402).2" />
<Link Source="10077:[32504..32523).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32504..32523).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32567..32606).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[32557..32607).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[32567..32606).1" />
<Link Source="10077:[44182..44197).2" Target="10077:[32557..32607).2" />
<Link Source="10077:[44182..44197).2" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).9" Target="10077:[44182..44197).2" />
<Link Source="10077:[44231..44317).9" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).11" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).7" Target="10077:[32567..32606).1" />
<Link Source="10077:[44342..44373).2" Target="10077:[32567..32606).1" />
<Link Source="10076:[853..1034).2" Target="10077:[44335..44374).7" />
<Link Source="10076:[853..1034).2" Target="10077:[44342..44373).2" />
<Link Source="10077:[32557..32607).3" Target="10077:[44335..44374).7" />
<Link Source="10077:[32557..32607).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32627..32647).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32670..32681).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2066..2158).3" Target="10077:[32433..34556).1" />
<Link Source="10077:[2066..2158).3" Target="10077:[32670..32681).1" />
<Link Source="10077:[2110..2139).3" Target="10077:[2066..2158).3" />
<Link Source="10077:[2110..2139).3" Target="10077:[31490..32331).6" />
<Link Source="10077:[2110..2139).3" Target="10077:[32670..32681).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[2110..2139).3" />
<Link Source="10077:[32665..34501).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[32665..34501).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32627..32647).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).2" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).3" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[32665..34501).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[32665..34501).4" Target="10077:[31490..32331).6" />
<Link Source="10077:[32665..34501).4" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).5" Target="10077:[32358..32401).1" />
<Link Source="10077:[33226..33266).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[33226..33266).1" Target="10077:[32665..34501).4" />
<Link Source="10077:[33241..33265).1" Target="10077:[32665..34501).4" />
<Link Source="10077:[2877..2892).2" Target="10077:[33226..33266).1" />
<Link Source="10077:[2877..2892).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[39020..39048).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[39020..39048).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[38976..39245).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[38976..39245).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[39020..39048).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39170..39187).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[39082..39230).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[44888..44934).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44954..44972).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[44954..44972).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[44990..45616).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44888..44934).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[45553..45597).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[45331..45616).1" />
<Link Source="10077:[45553..45597).2" Target="10077:[45331..45616).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[45553..45597).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45678..46310).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[44823..44854).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[39170..39187).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46088..46248).2" Target="EXTERNAL" />
<Link Source="10077:[46088..46248).2" Target="10077:[45678..46310).2" />
<Link Source="10077:[46272..46291).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[46088..46248).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46328..46341).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[46328..46341).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[33241..33265).1" />
<Link Source="10077:[39220..39228).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[39220..39228).1" />
<Link Source="10077:[2294..2311).1" Target="10077:[39220..39228).1" />
<Link Source="10076:[3592..3700).3" Target="10077:[2243..2331).1" />
<Link Source="10076:[3592..3700).3" Target="10077:[46272..46291).1" />
<Link Source="10076:[3592..3700).3" Target="10077:[2294..2311).1" />
<Link Source="10077:[2287..2312).1" Target="10076:[3592..3700).3" />
<Link Source="10077:[2287..2312).1" Target="10077:[39220..39228).1" />
<Link Source="10077:[39089..39229).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39298..39335).2" Target="10077:[39082..39230).1" />
<Link Source="10077:[39298..39335).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39337..39349).2" Target="10077:[39082..39230).3" />
<Link Source="10077:[39337..39349).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39351..39364).2" Target="10077:[2287..2312).1" />
<Link Source="10077:[39351..39364).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39261..44091).2" Target="10077:[38976..39245).1" />
<Link Source="10077:[39261..44091).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39421..39431).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[1641..1732).2" Target="10077:[39261..44091).2" />
<Link Source="10077:[1641..1732).2" Target="10077:[39421..39431).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[1641..1732).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[46272..46291).1" />
<Link Source="10077:[1685..1713).2" Target="10077:[39421..39431).2" />
<Link Source="10077:[39398..39590).7" Target="10077:[1685..1713).2" />
<Link Source="10077:[39398..39590).7" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).8" Target="10077:[39089..39229).1" />
<Link Source="10077:[39766..39774).2" Target="10077:[39351..39364).2" />
<Link Source="10077:[39766..39774).2" Target="10077:[39337..39349).2" />
<Link Source="10077:[44231..44317).17" Target="10077:[39766..39774).2" />
<Link Source="10077:[44231..44317).17" Target="10077:[39089..39229).1" />
<Link Source="10077:[44231..44317).19" Target="10077:[39089..39229).1" />
<Link Source="10077:[2110..2139).4" Target="10077:[39261..44091).2" />
<Link Source="10077:[2110..2139).4" Target="10077:[46272..46291).1" />
<Link Source="10077:[2110..2139).4" Target="10077:[39089..39229).1" />
<Link Source="10076:[1089..1109).1" Target="10077:[39766..39774).2" />
<Link Source="10076:[1089..1109).1" Target="10077:[39089..39229).1" />
<Link Source="10076:[1050..1225).1" Target="10077:[39766..39774).2" />
<Link Source="10076:[1050..1225).1" Target="10077:[39089..39229).1" />
<Link Source="10076:[1143..1210).1" Target="10076:[1050..1225).1" />
<Link Source="10076:[1143..1210).1" Target="10077:[39766..39774).2" />
<Link Source="10076:[1143..1210).1" Target="10076:[1089..1109).1" />
<Link Source="10076:[1143..1210).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[39766..39774).2" />
<Link Source="10077:[33290..34322).1" Target="10077:[32665..34501).4" />
<Link Source="10077:[33414..33451).1" Target="10077:[33290..34322).1" />
<Link Source="10346:[7369..7588).3" Target="10076:[1143..1210).1" />
<Link Source="10346:[7369..7588).3" Target="10077:[33414..33451).1" />
<Link Source="10077:[33373..33481).1" Target="10346:[7369..7588).3" />
<Link Source="10077:[33373..33481).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[33290..34322).1" />
<Link Source="10077:[33509..34299).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33509..34299).1" Target="EXTERNAL" />
<Link Source="10077:[33509..34299).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[33969..34032).2" Target="10076:[1143..1210).1" />
<Link Source="10077:[33969..34032).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[33969..34032).3" Target="10077:[33509..34299).1" />
<Link Source="10077:[33984..34031).1" Target="10077:[33509..34299).1" />
<Link Source="10346:[2571..2602).2" Target="10077:[33969..34032).1" />
<Link Source="10346:[2571..2602).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2604..2615).2" Target="10077:[33969..34032).2" />
<Link Source="10346:[2604..2615).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2617..2639).2" Target="10077:[33969..34032).3" />
<Link Source="10346:[2617..2639).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2544..2854).3" Target="10077:[33969..34032).3" />
<Link Source="10346:[2544..2854).3" Target="10077:[33984..34031).1" />
<Link Source="10286:[1317..1350).9" Target="10077:[33984..34031).1" />
<Link Source="10286:[1317..1350).10" Target="10346:[2604..2615).2" />
<Link Source="10286:[1317..1350).10" Target="10286:[1317..1350).9" />
<Link Source="10286:[1317..1350).10" Target="10077:[33984..34031).1" />
<Link Source="10286:[1390..1400).3" Target="10346:[2604..2615).2" />
<Link Source="10286:[1390..1400).3" Target="10077:[33373..33481).1" />
<Link Source="10286:[1390..1400).3" Target="10346:[2544..2854).3" />
<Link Source="10286:[1390..1400).3" Target="10077:[33984..34031).1" />
<Link Source="10286:[1428..1444).3" Target="10346:[2604..2615).2" />
<Link Source="10286:[1428..1444).3" Target="10077:[33373..33481).1" />
<Link Source="10286:[1428..1444).3" Target="10346:[2544..2854).3" />
<Link Source="10286:[1428..1444).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[858..868).3" Target="10346:[2544..2854).3" />
<Link Source="10346:[858..868).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).6" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).7" Target="10346:[2571..2602).2" />
<Link Source="10346:[2691..2750).7" Target="10346:[2691..2750).6" />
<Link Source="10346:[2691..2750).7" Target="10077:[33984..34031).1" />
<Link Source="10077:[34064..34272).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[33373..33481).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[34064..34272).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[32665..34501).4" />
<Link Source="10077:[34361..34419).1" Target="10077:[32665..34501).4" />
<Link Source="10307:[3496..3521).1" Target="10077:[34346..34420).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3452..3756).1" Target="10077:[33969..34032).3" />
<Link Source="10307:[3452..3756).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).1" Target="10307:[3452..3756).1" />
<Link Source="10307:[3547..3745).1" Target="10286:[1390..1400).3" />
<Link Source="10307:[3547..3745).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).2" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).2" Target="10077:[34361..34419).1" />
<Link Source="10307:[3555..3600).1" Target="10077:[34361..34419).1" />
<Link Source="10298:[471..492).15" Target="10307:[3547..3745).1" />
<Link Source="10298:[471..492).15" Target="10307:[3555..3600).1" />
<Link Source="10298:[494..511).15" Target="10307:[3547..3745).2" />
<Link Source="10298:[494..511).15" Target="10307:[3555..3600).1" />
<Link Source="10307:[3547..3745).4" Target="10307:[3496..3521).1" />
<Link Source="10307:[3547..3745).4" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).7" Target="10298:[471..492).15" />
<Link Source="10307:[3547..3745).7" Target="10307:[3547..3745).4" />
<Link Source="10307:[3547..3745).7" Target="10077:[34361..34419).1" />
<Link Source="10307:[3554..3645).1" Target="10307:[3547..3745).7" />
<Link Source="10307:[3554..3645).1" Target="10077:[34361..34419).1" />
<Link Source="10077:[34444..34455).1" Target="10077:[32665..34501).4" />
<Link Source="10077:[2110..2139).5" Target="10077:[34444..34455).1" />
<Link Source="10077:[2110..2139).5" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).1" Target="10077:[2110..2139).5" />
<Link Source="10077:[34444..34482).1" Target="10077:[32665..34501).4" />
<Link Source="10077:[34444..34482).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[34444..34482).2" Target="10077:[32665..34501).4" />
<Link Source="10077:[34444..34482).3" Target="10307:[3554..3645).1" />
<Link Source="10077:[34444..34482).3" Target="10077:[32665..34501).4" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).2" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).3" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).1" />
<Link Source="10077:[34444..34482).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[34444..34482).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1428..1444).3" />
<Link Source="10077:[34444..34482).4" Target="10286:[1390..1400).3" />
<Link Source="10077:[34444..34482).4" Target="10346:[2604..2615).2" />
<Link Source="10077:[34444..34482).4" Target="10346:[2544..2854).3" />
<Link Source="10077:[34444..34482).4" Target="10346:[2571..2602).2" />
<Link Source="10077:[34444..34482).4" Target="10346:[2617..2639).2" />
<Link Source="10077:[34444..34482).4" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).4" Target="10077:[32665..34501).4" />
<Link Source="10077:[34444..34482).5" Target="10077:[32665..34501).4" />
<Link Source="10077:[34521..34541).1" Target="10307:[3554..3645).1" />
<Link Source="10077:[34521..34541).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2926..2971).12" Target="10077:[2926..2971).2" />
<Link Source="10077:[2926..2971).12" Target="10077:[34521..34541).1" />
<Link Source="10077:[2926..2971).12" Target="10077:[34444..34482).4" />
<Link Source="10077:[2926..2971).12" Target="10077:[2749..2764).1" />
<Link Source="10076:[5678..5718).1" Target="10076:[5470..5538).1" />
<Link Source="10076:[5678..5718).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5678..5718).2" Target="10076:[5071..5759).1" />
<Link Source="10076:[5678..5718).2" Target="10077:[2926..2971).12" />
<Link Source="10076:[5678..5718).2" Target="10076:[5678..5718).1" />
<Link Source="10076:[5678..5718).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5734..5748).1" Target="10077:[2926..2971).12" />
<Link Source="10076:[5734..5748).1" Target="10076:[4989..5047).1" />
<Link Source="25002:[4395..4432).29" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).29" Target="10076:[5734..5748).1" />
<Link Source="25002:[4395..4432).29" Target="10076:[5678..5718).2" />
<Link Source="25002:[4395..4432).29" Target="28001:[57412..58687).4" />
<Link Source="10076:[5223..5250).6" Target="25002:[4395..4432).29" />
<Link Source="10076:[5223..5250).6" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).6" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).6" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).6" Target="25002:[4395..4432).29" />
<Link Source="10076:[5277..5448).6" Target="10076:[4989..5047).1" />
<Link Source="10076:[5391..5433).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5391..5433).1" Target="10076:[5277..5448).6" />
<Link Source="10076:[5391..5433).2" Target="10076:[5277..5448).6" />
<Link Source="10077:[4637..4671).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4637..4671).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4591..7075).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4591..7075).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[4705..4866).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4705..4866).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[4705..4866).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).3" Target="10077:[4705..4866).1" />
<Link Source="10077:[4705..4866).3" Target="10077:[4705..4866).2" />
<Link Source="10077:[4705..4866).3" Target="10076:[5391..5433).1" />
<Link Source="10077:[4705..4866).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[4886..4902).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4920..5555).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[4920..5555).1" Target="10077:[4705..4866).3" />
<Link Source="10077:[4920..5555).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4920..5555).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[4920..5555).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5083..5555).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[5083..5555).1" Target="10077:[4920..5555).1" />
<Link Source="10077:[5083..5555).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[5083..5555).2" Target="10077:[4920..5555).1" />
<Link Source="10077:[5511..5536).1" Target="10077:[39766..39774).2" />
<Link Source="10077:[5511..5536).1" Target="10077:[5083..5555).1" />
<Link Source="10077:[5575..5625).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[5575..5625).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5575..5625).2" Target="10077:[5511..5536).1" />
<Link Source="10077:[5575..5625).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5585..5624).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[44159..44180).4" Target="10077:[5575..5625).1" />
<Link Source="10077:[44159..44180).4" Target="10077:[5585..5624).1" />
<Link Source="10077:[44182..44197).4" Target="10077:[5575..5625).2" />
<Link Source="10077:[44182..44197).4" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).25" Target="10077:[44182..44197).4" />
<Link Source="10077:[44231..44317).25" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).27" Target="10077:[5585..5624).1" />
<Link Source="10077:[44335..44374).15" Target="10077:[5585..5624).1" />
<Link Source="10077:[44342..44373).4" Target="10077:[5585..5624).1" />
<Link Source="10076:[853..1034).4" Target="10077:[44335..44374).15" />
<Link Source="10076:[853..1034).4" Target="10077:[44342..44373).4" />
<Link Source="10077:[5575..5625).3" Target="10077:[44335..44374).15" />
<Link Source="10077:[5575..5625).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[5645..5665).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5688..5699).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2066..2158).6" Target="10077:[4591..7075).1" />
<Link Source="10077:[2066..2158).6" Target="10077:[5688..5699).1" />
<Link Source="10077:[2110..2139).6" Target="10077:[2066..2158).6" />
<Link Source="10077:[2110..2139).6" Target="10077:[5083..5555).1" />
<Link Source="10077:[2110..2139).6" Target="10077:[5688..5699).1" />
<Link Source="10077:[5683..7020).1" Target="10077:[2110..2139).6" />
<Link Source="10077:[5683..7020).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).2" Target="10077:[5575..5625).3" />
<Link Source="10077:[5683..7020).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).3" Target="10077:[5645..5665).1" />
<Link Source="10077:[5683..7020).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).2" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).1" />
<Link Source="10077:[5683..7020).4" Target="10077:[44159..44180).4" />
<Link Source="10077:[5683..7020).4" Target="10077:[44182..44197).4" />
<Link Source="10077:[5683..7020).4" Target="10077:[5083..5555).1" />
<Link Source="10077:[5683..7020).4" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).5" Target="10077:[2926..2971).3" />
<Link Source="10077:[5776..5836).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[5776..5836).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[5858..6188).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[5858..6188).2" Target="10077:[5776..5836).1" />
<Link Source="10077:[5858..6188).2" Target="10077:[5858..6188).1" />
<Link Source="10077:[5858..6188).2" Target="10077:[5683..7020).4" />
<Link Source="10077:[5930..6023).1" Target="10077:[5776..5836).1" />
<Link Source="10077:[5930..6023).1" Target="10077:[5858..6188).2" />
<Link Source="10077:[5930..6023).2" Target="EXTERNAL" />
<Link Source="10077:[5930..6023).2" Target="10077:[5858..6188).2" />
<Link Source="10077:[5945..6022).1" Target="10077:[5858..6188).2" />
<Link Source="10077:[32474..32502).2" Target="10077:[5930..6023).1" />
<Link Source="10077:[32474..32502).2" Target="10077:[5945..6022).1" />
<Link Source="10077:[32504..32523).2" Target="10077:[5930..6023).2" />
<Link Source="10077:[32504..32523).2" Target="10077:[5945..6022).1" />
<Link Source="10077:[44231..44317).33" Target="10077:[32504..32523).2" />
<Link Source="10077:[44231..44317).33" Target="10077:[5945..6022).1" />
<Link Source="10077:[44231..44317).35" Target="10077:[5945..6022).1" />
<Link Source="10077:[6212..6251).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6275..6566).1" Target="10077:[5511..5536).1" />
<Link Source="10077:[6275..6566).1" Target="10077:[39766..39774).2" />
<Link Source="10077:[6275..6566).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6590..6839).1" Target="10077:[5511..5536).1" />
<Link Source="10077:[6590..6839).1" Target="EXTERNAL" />
<Link Source="10077:[6590..6839).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6863..6941).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[6863..6941).1" Target="10077:[32474..32502).2" />
<Link Source="10077:[6863..6941).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6878..6940).1" Target="10077:[5683..7020).4" />
<Link Source="10307:[3496..3521).2" Target="10077:[6863..6941).1" />
<Link Source="10307:[3496..3521).2" Target="10077:[6878..6940).1" />
<Link Source="10307:[3452..3756).2" Target="10077:[32474..32502).2" />
<Link Source="10307:[3452..3756).2" Target="10077:[6878..6940).1" />
<Link Source="10077:[6963..6974).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[2110..2139).8" Target="10077:[6963..6974).1" />
<Link Source="10077:[2110..2139).8" Target="10307:[3496..3521).2" />
<Link Source="10077:[6963..7001).1" Target="10077:[2110..2139).8" />
<Link Source="10077:[6963..7001).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).2" Target="10077:[5575..5625).3" />
<Link Source="10077:[6963..7001).2" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).3" Target="10307:[3496..3521).2" />
<Link Source="10077:[6963..7001).3" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).5" Target="10077:[5683..7020).4" />
<Link Source="10077:[7040..7060).1" Target="10307:[3496..3521).2" />
<Link Source="10077:[7040..7060).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2926..2971).19" Target="10076:[5391..5433).1" />
<Link Source="10077:[2926..2971).19" Target="10077:[7040..7060).1" />
<Link Source="10077:[2926..2971).19" Target="10077:[6963..7001).1" />
<Link Source="10077:[2926..2971).19" Target="10077:[2749..2764).1" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3247..3264).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3290..3331).1" />
<Link Source="10307:[3290..3331).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).1" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).2" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).2" Target="10077:[2926..2971).19" />
<Link Source="10307:[3345..3429).2" Target="10307:[3228..3245).1" />
<Link Source="10307:[3345..3429).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).4" Target="10307:[3247..3264).1" />
<Link Source="10307:[3345..3429).4" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).5" Target="25002:[4395..4432).1" />
<Link Source="10307:[3352..3428).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3345..3429).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1085..1102).1" Target="10307:[3345..3429).2" />
<Link Source="10307:[1085..1102).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1104..1135).1" Target="10307:[3345..3429).4" />
<Link Source="10307:[1104..1135).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).1" Target="10307:[3345..3429).5" />
<Link Source="10307:[1028..1341).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[1072..1083).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[1085..1102).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).2" Target="10307:[3352..3428).1" />
<Link Source="10286:[1549..1560).2" Target="10307:[1161..1165).1" />
<Link Source="10286:[1549..1560).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1562..1579).2" Target="10307:[1167..1172).1" />
<Link Source="10286:[1562..1579).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1532..2083).2" Target="10307:[1028..1341).1" />
<Link Source="10286:[1532..2083).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[726..773).6" Target="10286:[1532..2083).2" />
<Link Source="10286:[726..773).6" Target="10307:[1028..1341).2" />
<Link Source="10286:[815..820).6" Target="10286:[1532..2083).2" />
<Link Source="10286:[815..820).6" Target="10307:[1028..1341).2" />
<Link Source="10286:[2975..3015).6" Target="10286:[1532..2083).2" />
<Link Source="10286:[2975..3015).6" Target="10307:[1028..1341).2" />
<Link Source="10286:[17802..17818).6" Target="10286:[1532..2083).2" />
<Link Source="10286:[17802..17818).6" Target="10307:[1028..1341).2" />
<Link Source="10286:[18200..18223).6" Target="10286:[1532..2083).2" />
<Link Source="10286:[18200..18223).6" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).5" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).6" Target="10286:[1549..1560).2" />
<Link Source="10286:[1605..1638).6" Target="10286:[1605..1638).5" />
<Link Source="10286:[1605..1638).6" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).7" Target="10286:[1562..1579).2" />
<Link Source="10286:[1688..1781).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).8" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).8" Target="10307:[1028..1341).2" />
<Link Source="10286:[1708..1779).2" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).17" Target="10286:[1688..1781).7" />
<Link Source="10298:[471..492).17" Target="10286:[1708..1779).2" />
<Link Source="10298:[494..511).17" Target="10286:[1688..1781).8" />
<Link Source="10298:[494..511).17" Target="10286:[1708..1779).2" />
<Link Source="10286:[1820..1963).7" Target="10286:[1562..1579).2" />
<Link Source="10286:[1820..1963).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[1820..1963).8" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).8" Target="10307:[1028..1341).2" />
<Link Source="10286:[1840..1888).2" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).18" Target="10286:[1820..1963).7" />
<Link Source="10298:[471..492).18" Target="10286:[1840..1888).2" />
<Link Source="10298:[494..511).18" Target="10286:[1820..1963).8" />
<Link Source="10298:[494..511).18" Target="10286:[1840..1888).2" />
<Link Source="10286:[1977..1981).2" Target="10286:[1549..1560).2" />
<Link Source="10286:[1977..1981).2" Target="10286:[1532..2083).2" />
<Link Source="10286:[1977..1981).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[2003..2013).2" Target="10286:[1562..1579).2" />
<Link Source="10286:[2003..2013).2" Target="10286:[1532..2083).2" />
<Link Source="10286:[2003..2013).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[2036..2052).2" Target="10286:[1549..1560).2" />
<Link Source="10286:[2036..2052).2" Target="10077:[2926..2971).19" />
<Link Source="10286:[2036..2052).2" Target="10286:[1532..2083).2" />
<Link Source="10286:[2036..2052).2" Target="10307:[1028..1341).2" />
<Link Source="10307:[683..708).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[683..708).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1104..1135).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1206..1253).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[3352..3428).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1104..1135).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[3352..3428).1" />
<Link Source="25002:[4395..4432).35" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).35" Target="10307:[3345..3429).5" />
<Link Source="25002:[4395..4432).35" Target="10077:[2926..2971).19" />
<Link Source="25002:[4395..4432).35" Target="10286:[2036..2052).2" />
<Link Source="25002:[4395..4432).35" Target="10286:[2003..2013).2" />
<Link Source="25002:[4395..4432).35" Target="10286:[1977..1981).2" />
<Link Source="25002:[4395..4432).35" Target="10286:[17802..17818).6" />
<Link Source="25002:[4395..4432).35" Target="10286:[18200..18223).6" />
<Link Source="25002:[4395..4432).35" Target="10307:[1273..1298).1" />
<Link Source="25002:[4395..4432).35" Target="28001:[57412..58687).4" />
<Link Source="10313:[1230..1280).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1230..1280).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1295..1337).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1295..1337).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1352..1376).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1352..1376).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1391..1416).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1391..1416).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1171..3563).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1171..3563).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1442..1480).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1494..2257).1" Target="10313:[1230..1280).1" />
<Link Source="10313:[1494..2257).1" Target="25002:[4395..4432).35" />
<Link Source="10313:[1494..2257).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[2273..2310).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[2324..3491).1" Target="10313:[1295..1337).1" />
<Link Source="10313:[2324..3491).1" Target="25002:[4395..4432).35" />
<Link Source="10313:[2324..3491).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[3507..3523).1" Target="10313:[1442..1480).1" />
<Link Source="10313:[3507..3523).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[3537..3552).1" Target="10313:[2273..2310).1" />
<Link Source="10313:[3537..3552).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).1" Target="10319:[13685..13708).1" />
<Link Source="10319:[13850..13948).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13850..13948).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).3" Target="10319:[13737..13783).1" />
<Link Source="10319:[13850..13948).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).4" Target="10319:[13785..13824).1" />
<Link Source="10319:[13850..13948).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13863..13947).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13850..13948).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14956..14981).1" Target="10319:[13850..13948).2" />
<Link Source="10319:[14956..14981).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14983..15029).1" Target="10319:[13850..13948).3" />
<Link Source="10319:[14983..15029).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15031..15070).1" Target="10319:[13850..13948).4" />
<Link Source="10319:[15031..15070).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[15096..15130).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[14931..14954).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).4" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[15146..15291).4" />
<Link Source="10319:[15146..15291).5" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).6" Target="10319:[15146..15291).5" />
<Link Source="10319:[15146..15291).6" Target="10319:[15031..15070).1" />
<Link Source="10319:[15146..15291).6" Target="10319:[13863..13947).1" />
<Link Source="10319:[15159..15290).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[20002..20025).2" Target="10319:[15146..15291).1" />
<Link Source="10319:[20002..20025).2" Target="10319:[15159..15290).1" />
<Link Source="10319:[20027..20052).2" Target="10319:[15146..15291).2" />
<Link Source="10319:[20027..20052).2" Target="10319:[15159..15290).1" />
<Link Source="10319:[20054..20093).2" Target="10319:[15146..15291).3" />
<Link Source="10319:[20054..20093).2" Target="10319:[15159..15290).1" />
<Link Source="10319:[20095..20126).2" Target="10319:[15146..15291).6" />
<Link Source="10319:[20095..20126).2" Target="10319:[15159..15290).1" />
<Link Source="10319:[19916..30085).2" Target="10319:[14862..16302).1" />
<Link Source="10319:[19916..30085).2" Target="10319:[15159..15290).1" />
<Link Source="10319:[20152..24647).3" Target="10319:[20002..20025).2" />
<Link Source="10319:[20152..24647).3" Target="25002:[4395..4432).35" />
<Link Source="10319:[20152..24647).3" Target="10319:[15159..15290).1" />
<Link Source="10319:[20508..20675).9" Target="10319:[20002..20025).2" />
<Link Source="10319:[20508..20675).9" Target="10319:[20152..24647).3" />
<Link Source="10319:[20508..20675).10" Target="10319:[20027..20052).2" />
<Link Source="10319:[20508..20675).10" Target="10319:[20152..24647).3" />
<Link Source="10319:[20508..20675).11" Target="10319:[20054..20093).2" />
<Link Source="10319:[20508..20675).11" Target="10319:[20152..24647).3" />
<Link Source="10319:[20508..20675).12" Target="10319:[20095..20126).2" />
<Link Source="10319:[20508..20675).12" Target="10319:[20152..24647).3" />
<Link Source="10319:[20508..20675).13" Target="10319:[20152..24647).3" />
<Link Source="10319:[20515..20674).2" Target="10319:[20152..24647).3" />
<Link Source="10319:[41849..41874).2" Target="10319:[20508..20675).9" />
<Link Source="10319:[41849..41874).2" Target="10319:[20515..20674).2" />
<Link Source="10319:[41889..41914).2" Target="10319:[20508..20675).10" />
<Link Source="10319:[41889..41914).2" Target="10319:[20515..20674).2" />
<Link Source="10319:[41929..41968).2" Target="10319:[20508..20675).11" />
<Link Source="10319:[41929..41968).2" Target="10319:[20515..20674).2" />
<Link Source="10319:[41983..42014).2" Target="10319:[20508..20675).12" />
<Link Source="10319:[41983..42014).2" Target="10319:[20515..20674).2" />
<Link Source="10319:[42029..42063).2" Target="10319:[20508..20675).13" />
<Link Source="10319:[42029..42063).2" Target="10319:[20515..20674).2" />
<Link Source="10319:[41732..45579).2" Target="10319:[19916..30085).2" />
<Link Source="10319:[41732..45579).2" Target="10319:[20515..20674).2" />
<Link Source="10319:[42089..42141).2" Target="10319:[41849..41874).2" />
<Link Source="10319:[42089..42141).2" Target="10319:[20152..24647).3" />
<Link Source="10319:[42089..42141).2" Target="10319:[20515..20674).2" />
<Link Source="10319:[42478..42805).4" Target="10319:[42089..42141).2" />
<Link Source="10319:[42478..42805).4" Target="10319:[20515..20674).2" />
<Link Source="10319:[42821..42938).9" Target="10319:[41849..41874).2" />
<Link Source="10319:[42821..42938).9" Target="10319:[20152..24647).3" />
<Link Source="10319:[42821..42938).9" Target="10319:[20515..20674).2" />
<Link Source="10319:[42821..42938).10" Target="10319:[42029..42063).2" />
<Link Source="10319:[42821..42938).10" Target="10319:[20515..20674).2" />
<Link Source="10319:[42821..42938).11" Target="10319:[42089..42141).2" />
<Link Source="10319:[42821..42938).11" Target="10319:[20515..20674).2" />
<Link Source="10319:[42821..42938).12" Target="10319:[20515..20674).2" />
<Link Source="10319:[42821..42938).14" Target="10319:[41889..41914).2" />
<Link Source="10319:[42821..42938).14" Target="10319:[20515..20674).2" />
<Link Source="10319:[42839..42937).2" Target="10319:[20515..20674).2" />
<Link Source="10319:[63849..63870).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63849..63870).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63885..63919).2" Target="10319:[42821..42938).10" />
<Link Source="10319:[63885..63919).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63934..63945).2" Target="10319:[42821..42938).11" />
<Link Source="10319:[63934..63945).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63960..63969).2" Target="10319:[42821..42938).12" />
<Link Source="10319:[63960..63969).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63984..64009).2" Target="10319:[42821..42938).14" />
<Link Source="10319:[63984..64009).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63768..64484).2" Target="10319:[41732..45579).2" />
<Link Source="10319:[63768..64484).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[64035..64445).5" Target="10319:[42839..42937).2" />
<Link Source="10319:[64035..64445).6" Target="10319:[63885..63919).2" />
<Link Source="10319:[64035..64445).6" Target="10319:[64035..64445).5" />
<Link Source="10319:[64035..64445).6" Target="10319:[42839..42937).2" />
<Link Source="10319:[64461..64473).3" Target="10319:[42839..42937).2" />
<Link Source="10319:[42821..42938).15" Target="10319:[64461..64473).3" />
<Link Source="10319:[42821..42938).15" Target="10319:[20515..20674).2" />
<Link Source="10319:[42952..43079).4" Target="10319:[20515..20674).2" />
<Link Source="10319:[42952..43079).5" Target="10319:[42821..42938).15" />
<Link Source="10319:[42952..43079).5" Target="10319:[42952..43079).4" />
<Link Source="10319:[42952..43079).5" Target="10319:[20515..20674).2" />
<Link Source="10319:[43108..43134).2" Target="10319:[20515..20674).2" />
<Link Source="10354:[11244..11285).7" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).7" Target="10287:[1787..1818).1" />
<Link Source="10354:[11244..11285).7" Target="10319:[43108..43134).2" />
<Link Source="10354:[11312..11328).2" Target="10319:[43108..43134).2" />
<Link Source="10354:[3684..3818).6" Target="10354:[11244..11285).7" />
<Link Source="10354:[3684..3818).6" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).37" Target="10354:[3684..3818).6" />
<Link Source="10354:[3720..3803).37" Target="10354:[11244..11285).7" />
<Link Source="10354:[3720..3803).37" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).37" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).38" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).39" Target="10354:[3684..3818).6" />
<Link Source="10354:[3720..3803).39" Target="10354:[11244..11285).7" />
<Link Source="10354:[3720..3803).39" Target="10354:[3720..3803).38" />
<Link Source="10354:[3720..3803).39" Target="10354:[11312..11328).2" />
<Link Source="10354:[11299..11330).4" Target="10354:[3720..3803).37" />
<Link Source="10354:[11299..11330).4" Target="10319:[43108..43134).2" />
<Link Source="10319:[43149..43246).7" Target="10319:[41849..41874).2" />
<Link Source="10319:[43149..43246).7" Target="10319:[20515..20674).2" />
<Link Source="10319:[43149..43246).8" Target="10319:[41849..41874).2" />
<Link Source="10319:[43149..43246).8" Target="10319:[20152..24647).3" />
<Link Source="10319:[43149..43246).8" Target="10319:[20515..20674).2" />
<Link Source="10319:[43173..43245).2" Target="10319:[20515..20674).2" />
<Link Source="10319:[50313..50328).2" Target="10319:[43149..43246).7" />
<Link Source="10319:[50313..50328).2" Target="10319:[43173..43245).2" />
<Link Source="10319:[50330..50355).2" Target="10319:[43149..43246).8" />
<Link Source="10319:[50330..50355).2" Target="10319:[43173..43245).2" />
<Link Source="10319:[50381..51340).4" Target="10319:[50313..50328).2" />
<Link Source="10319:[50381..51340).4" Target="10319:[43173..43245).2" />
<Link Source="10319:[51282..51325).2" Target="EXTERNAL" />
<Link Source="10319:[51282..51325).2" Target="10319:[50381..51340).4" />
<Link Source="10319:[43262..43312).3" Target="10319:[20515..20674).2" />
<Link Source="10319:[43326..43490).13" Target="10319:[42029..42063).2" />
<Link Source="10319:[43326..43490).13" Target="10319:[20515..20674).2" />
<Link Source="10319:[43326..43490).14" Target="10319:[42089..42141).2" />
<Link Source="10319:[43326..43490).14" Target="10319:[20515..20674).2" />
<Link Source="10319:[43326..43490).15" Target="10319:[20515..20674).2" />
<Link Source="10319:[43326..43490).17" Target="10319:[41929..41968).2" />
<Link Source="10319:[43326..43490).17" Target="10319:[20515..20674).2" />
<Link Source="10319:[43326..43490).18" Target="10319:[51282..51325).2" />
<Link Source="10319:[43326..43490).18" Target="10319:[20515..20674).2" />
<Link Source="10319:[43326..43490).21" Target="10319:[43262..43312).3" />
<Link Source="10319:[43326..43490).21" Target="10319:[20515..20674).2" />
<Link Source="10319:[43326..43489).2" Target="10319:[20515..20674).2" />
<Link Source="10312:[1028..1062).2" Target="10319:[43326..43490).13" />
<Link Source="10312:[1028..1062).2" Target="10319:[43326..43489).2" />
<Link Source="10312:[1077..1093).2" Target="10319:[43326..43490).14" />
<Link Source="10312:[1077..1093).2" Target="10319:[43326..43489).2" />
<Link Source="10312:[1108..1117).2" Target="10319:[43326..43490).15" />
<Link Source="10312:[1108..1117).2" Target="10319:[43326..43489).2" />
<Link Source="10312:[1132..1171).2" Target="10319:[43326..43490).17" />
<Link Source="10312:[1132..1171).2" Target="10319:[43326..43489).2" />
<Link Source="10312:[1186..1207).2" Target="10319:[43326..43490).18" />
<Link Source="10312:[1186..1207).2" Target="10319:[43326..43489).2" />
<Link Source="10312:[1222..1235).2" Target="10319:[43326..43490).15" />
<Link Source="10312:[1222..1235).2" Target="10319:[43326..43489).2" />
<Link Source="10312:[1250..1296).2" Target="10319:[43326..43490).21" />
<Link Source="10312:[1250..1296).2" Target="10319:[43326..43489).2" />
<Link Source="10312:[942..1750).2" Target="10319:[41732..45579).2" />
<Link Source="10312:[942..1750).2" Target="10319:[43326..43489).2" />
<Link Source="10312:[1322..1739).4" Target="10312:[1186..1207).2" />
<Link Source="10312:[1322..1739).4" Target="10319:[43326..43489).2" />
<Link Source="10312:[1326..1357).2" Target="10319:[43326..43489).2" />
<Link Source="10353:[7504..7530).3" Target="10312:[1322..1739).4" />
<Link Source="10353:[7504..7530).3" Target="10312:[1326..1357).2" />
<Link Source="10353:[7556..7642).7" Target="10353:[7504..7530).3" />
<Link Source="10353:[7556..7642).7" Target="EXTERNAL" />
<Link Source="10353:[7556..7642).7" Target="10312:[1326..1357).2" />
<Link Source="10312:[1585..1724).11" Target="10312:[1028..1062).2" />
<Link Source="10312:[1585..1724).11" Target="10353:[7556..7642).7" />
<Link Source="10312:[1585..1724).12" Target="10312:[1077..1093).2" />
<Link Source="10312:[1585..1724).12" Target="10353:[7556..7642).7" />
<Link Source="10312:[1585..1724).13" Target="10312:[1108..1117).2" />
<Link Source="10312:[1585..1724).13" Target="10353:[7556..7642).7" />
<Link Source="10312:[1585..1724).14" Target="10312:[1132..1171).2" />
<Link Source="10312:[1585..1724).14" Target="10353:[7556..7642).7" />
<Link Source="10312:[1585..1724).15" Target="10312:[1186..1207).2" />
<Link Source="10312:[1585..1724).15" Target="10353:[7556..7642).7" />
<Link Source="10312:[1585..1724).16" Target="10312:[1222..1235).2" />
<Link Source="10312:[1585..1724).16" Target="10353:[7556..7642).7" />
<Link Source="10312:[1585..1724).17" Target="10312:[1250..1296).2" />
<Link Source="10312:[1585..1724).17" Target="10353:[7556..7642).7" />
<Link Source="10312:[1585..1723).2" Target="10353:[7556..7642).7" />
<Link Source="10312:[5755..5789).2" Target="10312:[1585..1724).11" />
<Link Source="10312:[5755..5789).2" Target="10312:[1585..1723).2" />
<Link Source="10312:[5804..5815).2" Target="10312:[1585..1724).12" />
<Link Source="10312:[5804..5815).2" Target="10312:[1585..1723).2" />
<Link Source="10312:[5830..5839).2" Target="10312:[1585..1724).13" />
<Link Source="10312:[5830..5839).2" Target="10312:[1585..1723).2" />
<Link Source="10312:[5854..5893).2" Target="10312:[1585..1724).14" />
<Link Source="10312:[5854..5893).2" Target="10312:[1585..1723).2" />
<Link Source="10312:[5908..5929).2" Target="10312:[1585..1724).15" />
<Link Source="10312:[5908..5929).2" Target="10312:[1585..1723).2" />
<Link Source="10312:[5944..5957).2" Target="10312:[1585..1724).16" />
<Link Source="10312:[5944..5957).2" Target="10312:[1585..1723).2" />
<Link Source="10312:[5972..6018).2" Target="10312:[1585..1724).17" />
<Link Source="10312:[5972..6018).2" Target="10312:[1585..1723).2" />
<Link Source="10312:[5663..6444).2" Target="10312:[942..1750).2" />
<Link Source="10312:[5663..6444).2" Target="10312:[1585..1723).2" />
<Link Source="10312:[6044..6433).4" Target="10312:[1585..1723).2" />
<Link Source="10312:[6044..6433).5" Target="10312:[5755..5789).2" />
<Link Source="10312:[6044..6433).5" Target="10312:[6044..6433).4" />
<Link Source="10312:[6044..6433).5" Target="10312:[1585..1723).2" />
<Link Source="10312:[6110..6221).10" Target="10312:[5804..5815).2" />
<Link Source="10312:[6110..6221).10" Target="10312:[6044..6433).5" />
<Link Source="10312:[6110..6221).11" Target="10312:[5830..5839).2" />
<Link Source="10312:[6110..6221).11" Target="10312:[6044..6433).5" />
<Link Source="10312:[6110..6221).12" Target="10312:[5854..5893).2" />
<Link Source="10312:[6110..6221).12" Target="10312:[6044..6433).5" />
<Link Source="10312:[6110..6221).13" Target="10312:[5908..5929).2" />
<Link Source="10312:[6110..6221).13" Target="10312:[6044..6433).5" />
<Link Source="10312:[6110..6221).14" Target="10312:[5944..5957).2" />
<Link Source="10312:[6110..6221).14" Target="10312:[6044..6433).5" />
<Link Source="10312:[6110..6221).15" Target="10312:[5972..6018).2" />
<Link Source="10312:[6110..6221).15" Target="10312:[6044..6433).5" />
<Link Source="10312:[6110..6220).2" Target="10312:[6044..6433).5" />
<Link Source="10312:[3717..3728).2" Target="10312:[6110..6221).10" />
<Link Source="10312:[3717..3728).2" Target="10312:[6110..6220).2" />
<Link Source="10312:[3730..3739).2" Target="10312:[6110..6221).11" />
<Link Source="10312:[3730..3739).2" Target="10312:[6110..6220).2" />
<Link Source="10312:[3741..3780).2" Target="10312:[6110..6221).12" />
<Link Source="10312:[3741..3780).2" Target="10312:[6110..6220).2" />
<Link Source="10312:[3782..3803).2" Target="10312:[6110..6221).13" />
<Link Source="10312:[3782..3803).2" Target="10312:[6110..6220).2" />
<Link Source="10312:[3805..3818).2" Target="10312:[6110..6221).14" />
<Link Source="10312:[3805..3818).2" Target="10312:[6110..6220).2" />
<Link Source="10312:[3820..3866).2" Target="10312:[6110..6221).15" />
<Link Source="10312:[3820..3866).2" Target="10312:[6110..6220).2" />
<Link Source="10312:[3645..5112).2" Target="10312:[5663..6444).2" />
<Link Source="10312:[3645..5112).2" Target="10312:[6110..6220).2" />
<Link Source="10312:[3905..3919).2" Target="10312:[6110..6220).2" />
<Link Source="10354:[3684..3818).7" Target="10354:[11244..11285).7" />
<Link Source="10354:[3684..3818).7" Target="10312:[3905..3919).2" />
<Link Source="10354:[3720..3803).45" Target="10354:[3684..3818).7" />
<Link Source="10354:[3720..3803).45" Target="10354:[11244..11285).7" />
<Link Source="10354:[3720..3803).45" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).45" Target="10312:[3905..3919).2" />
<Link Source="10354:[3720..3803).46" Target="10312:[3905..3919).2" />
<Link Source="10354:[3720..3803).47" Target="10354:[3684..3818).7" />
<Link Source="10354:[3720..3803).47" Target="10354:[11244..11285).7" />
<Link Source="10354:[3720..3803).47" Target="10354:[3720..3803).46" />
<Link Source="10354:[3720..3803).47" Target="10312:[3905..3919).2" />
<Link Source="10312:[3892..3921).4" Target="10354:[3720..3803).45" />
<Link Source="10312:[3892..3921).4" Target="10312:[6110..6220).2" />
<Link Source="10312:[3935..3968).5" Target="10312:[3782..3803).2" />
<Link Source="10312:[3935..3968).5" Target="10312:[6110..6220).2" />
<Link Source="10312:[3948..3966).2" Target="10312:[6110..6220).2" />
<Link Source="10353:[4698..4724).3" Target="10312:[3935..3968).5" />
<Link Source="10353:[4698..4724).3" Target="10312:[3948..3966).2" />
<Link Source="10353:[4750..4847).5" Target="10353:[4698..4724).3" />
<Link Source="10353:[4750..4847).5" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).5" Target="10312:[3948..3966).2" />
<Link Source="10353:[4863..5000).9" Target="10353:[4698..4724).3" />
<Link Source="10353:[4863..5000).9" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).9" Target="10312:[3948..3966).2" />
<Link Source="10353:[4863..5000).10" Target="10312:[3948..3966).2" />
<Link Source="10353:[5079..5183).5" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).5" Target="10312:[3948..3966).2" />
<Link Source="10353:[5197..5323).7" Target="10353:[4698..4724).3" />
<Link Source="10353:[5197..5323).7" Target="10353:[5079..5183).5" />
<Link Source="10353:[5197..5323).7" Target="10312:[3948..3966).2" />
<Link Source="10353:[5485..5759).13" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).13" Target="10312:[3948..3966).2" />
<Link Source="10353:[5485..5759).14" Target="10353:[4698..4724).3" />
<Link Source="10353:[5485..5759).14" Target="10353:[5485..5759).13" />
<Link Source="10353:[5485..5759).14" Target="10312:[3948..3966).2" />
<Link Source="10353:[5485..5759).15" Target="10312:[3948..3966).2" />
<Link Source="10353:[5775..5979).9" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).9" Target="10312:[3948..3966).2" />
<Link Source="10353:[5775..5979).11" Target="10353:[4698..4724).3" />
<Link Source="10353:[5775..5979).11" Target="10353:[5775..5979).9" />
<Link Source="10353:[5775..5979).11" Target="10312:[3948..3966).2" />
<Link Source="10353:[5995..6029).7" Target="10353:[5775..5979).11" />
<Link Source="10353:[5995..6029).7" Target="10312:[3948..3966).2" />
<Link Source="10353:[6002..6028).3" Target="10312:[3948..3966).2" />
<Link Source="10353:[6343..6358).3" Target="10353:[5995..6029).7" />
<Link Source="10353:[6343..6358).3" Target="10353:[6002..6028).3" />
<Link Source="10353:[6384..6410).13" Target="10353:[6002..6028).3" />
<Link Source="10353:[6384..6410).14" Target="10353:[6343..6358).3" />
<Link Source="10353:[6384..6410).14" Target="10353:[6384..6410).13" />
<Link Source="10353:[6384..6410).14" Target="10353:[6002..6028).3" />
<Link Source="10312:[3984..4005).3" Target="10312:[6110..6220).2" />
<Link Source="10312:[4019..5073).19" Target="10312:[3645..5112).2" />
<Link Source="10312:[4019..5073).19" Target="10312:[6110..6220).2" />
<Link Source="10312:[4019..5073).20" Target="10312:[6110..6220).2" />
<Link Source="10312:[4060..4080).4" Target="10312:[6110..6220).2" />
<Link Source="10354:[4962..4966).7" Target="10312:[4060..4080).4" />
<Link Source="10312:[4019..5073).23" Target="10312:[4019..5073).19" />
<Link Source="10312:[4019..5073).23" Target="10354:[11244..11285).7" />
<Link Source="10312:[4019..5073).23" Target="10312:[6110..6220).2" />
<Link Source="10312:[4534..4658).21" Target="10312:[3730..3739).2" />
<Link Source="10312:[4534..4658).21" Target="10312:[4019..5073).23" />
<Link Source="10312:[4534..4658).22" Target="10312:[3741..3780).2" />
<Link Source="10312:[4534..4658).22" Target="10312:[4019..5073).23" />
<Link Source="10312:[4534..4658).25" Target="10312:[3805..3818).2" />
<Link Source="10312:[4534..4658).25" Target="10312:[4019..5073).23" />
<Link Source="10312:[5188..5207).2" Target="10312:[4019..5073).23" />
<Link Source="10312:[5209..5220).2" Target="10312:[4019..5073).23" />
<Link Source="10312:[5222..5231).2" Target="10312:[4534..4658).21" />
<Link Source="10312:[5222..5231).2" Target="10312:[4019..5073).23" />
<Link Source="10312:[5233..5272).2" Target="10312:[4534..4658).22" />
<Link Source="10312:[5233..5272).2" Target="10312:[4019..5073).23" />
<Link Source="10312:[5274..5295).2" Target="10312:[4019..5073).23" />
<Link Source="10312:[5297..5318).2" Target="10312:[4019..5073).23" />
<Link Source="10312:[5320..5333).2" Target="10312:[4534..4658).25" />
<Link Source="10312:[5320..5333).2" Target="10312:[4019..5073).23" />
<Link Source="10312:[5124..5404).2" Target="10312:[4019..5073).19" />
<Link Source="10312:[5124..5404).2" Target="10312:[4019..5073).23" />
<Link Source="10312:[4685..4699).3" Target="10312:[4019..5073).23" />
<Link Source="10354:[3684..3818).8" Target="10354:[11244..11285).7" />
<Link Source="10354:[3684..3818).8" Target="10312:[4685..4699).3" />
<Link Source="10354:[3720..3803).53" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).53" Target="10354:[11244..11285).7" />
<Link Source="10354:[3720..3803).53" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).53" Target="10312:[4685..4699).3" />
<Link Source="10354:[3720..3803).54" Target="10312:[4685..4699).3" />
<Link Source="10354:[3720..3803).55" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).55" Target="10354:[11244..11285).7" />
<Link Source="10354:[3720..3803).55" Target="10354:[3720..3803).54" />
<Link Source="10354:[3720..3803).55" Target="10312:[4685..4699).3" />
<Link Source="10312:[4680..4787).5" Target="10354:[3720..3803).53" />
<Link Source="10312:[4680..4787).5" Target="10312:[4019..5073).23" />
<Link Source="10312:[4826..5058).11" Target="10312:[3782..3803).2" />
<Link Source="10312:[4826..5058).11" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).11" Target="10312:[4019..5073).23" />
<Link Source="10312:[4826..5058).12" Target="10312:[4019..5073).23" />
<Link Source="10346:[10663..10672).2" Target="10312:[4534..4658).21" />
<Link Source="10346:[10663..10672).2" Target="10312:[4019..5073).23" />
<Link Source="10346:[10674..10713).2" Target="10312:[4534..4658).22" />
<Link Source="10346:[10674..10713).2" Target="10312:[4019..5073).23" />
<Link Source="10346:[10761..10774).2" Target="10312:[4534..4658).25" />
<Link Source="10346:[10761..10774).2" Target="10312:[4019..5073).23" />
<Link Source="10346:[10861..10875).2" Target="10312:[4019..5073).23" />
<Link Source="10354:[3684..3818).9" Target="10312:[4019..5073).23" />
<Link Source="10354:[3684..3818).9" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).61" Target="10354:[3684..3818).9" />
<Link Source="10354:[3720..3803).61" Target="10354:[11244..11285).7" />
<Link Source="10354:[3720..3803).61" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).61" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).62" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).63" Target="10354:[3684..3818).9" />
<Link Source="10354:[3720..3803).63" Target="10354:[11244..11285).7" />
<Link Source="10354:[3720..3803).63" Target="10354:[3720..3803).62" />
<Link Source="10354:[3720..3803).63" Target="10346:[10861..10875).2" />
<Link Source="10346:[10848..10877).4" Target="10354:[3720..3803).61" />
<Link Source="10346:[10848..10877).4" Target="10312:[4019..5073).23" />
<Link Source="10346:[10897..10914).2" Target="10312:[4019..5073).23" />
<Link Source="10346:[7666..7775).2" Target="10312:[4019..5073).23" />
<Link Source="10346:[7666..7775).2" Target="10346:[10897..10914).2" />
<Link Source="10346:[7672..7773).4" Target="10346:[7666..7775).2" />
<Link Source="10346:[7672..7773).4" Target="10319:[50381..51340).4" />
<Link Source="10346:[7672..7773).4" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).4" Target="10346:[10897..10914).2" />
<Link Source="10346:[10893..11127).3" Target="10346:[7672..7773).4" />
<Link Source="10346:[10893..11127).3" Target="10312:[4019..5073).23" />
<Link Source="10346:[3525..3638).17" Target="10312:[4019..5073).23" />
<Link Source="10312:[7718..7727).2" Target="10346:[10663..10672).2" />
<Link Source="10312:[7718..7727).2" Target="10312:[4019..5073).23" />
<Link Source="10312:[7729..7768).2" Target="10346:[10674..10713).2" />
<Link Source="10312:[7729..7768).2" Target="10312:[4019..5073).23" />
<Link Source="10312:[7816..7829).2" Target="10346:[10761..10774).2" />
<Link Source="10312:[7816..7829).2" Target="10312:[4019..5073).23" />
<Link Source="10312:[7615..8420).2" Target="10312:[4019..5073).23" />
<Link Source="10312:[7903..7936).5" Target="10312:[4019..5073).23" />
<Link Source="10312:[7916..7934).2" Target="10312:[4019..5073).23" />
<Link Source="10353:[4698..4724).4" Target="10312:[7903..7936).5" />
<Link Source="10353:[4698..4724).4" Target="10312:[7916..7934).2" />
<Link Source="10353:[4750..4847).7" Target="10353:[4698..4724).4" />
<Link Source="10353:[4750..4847).7" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).7" Target="10312:[7916..7934).2" />
<Link Source="10353:[4863..5000).13" Target="10353:[4698..4724).4" />
<Link Source="10353:[4863..5000).13" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).13" Target="10312:[7916..7934).2" />
<Link Source="10353:[4863..5000).14" Target="10312:[7916..7934).2" />
<Link Source="10353:[5079..5183).7" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).7" Target="10312:[7916..7934).2" />
<Link Source="10353:[5197..5323).10" Target="10353:[4698..4724).4" />
<Link Source="10353:[5197..5323).10" Target="10353:[5079..5183).7" />
<Link Source="10353:[5197..5323).10" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).19" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).19" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).20" Target="10353:[4698..4724).4" />
<Link Source="10353:[5485..5759).20" Target="10353:[5485..5759).19" />
<Link Source="10353:[5485..5759).20" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).21" Target="10312:[7916..7934).2" />
<Link Source="10353:[5775..5979).13" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).13" Target="10312:[7916..7934).2" />
<Link Source="10353:[5775..5979).15" Target="10353:[4698..4724).4" />
<Link Source="10353:[5775..5979).15" Target="10353:[5775..5979).13" />
<Link Source="10353:[5775..5979).15" Target="10312:[7916..7934).2" />
<Link Source="10353:[5995..6029).10" Target="10353:[5775..5979).15" />
<Link Source="10353:[5995..6029).10" Target="10312:[7916..7934).2" />
<Link Source="10353:[6002..6028).4" Target="10312:[7916..7934).2" />
<Link Source="10353:[6343..6358).4" Target="10353:[5995..6029).10" />
<Link Source="10353:[6343..6358).4" Target="10353:[6002..6028).4" />
<Link Source="10353:[6384..6410).19" Target="10353:[6002..6028).4" />
<Link Source="10353:[6384..6410).20" Target="10353:[6343..6358).4" />
<Link Source="10353:[6384..6410).20" Target="10353:[6384..6410).19" />
<Link Source="10353:[6384..6410).20" Target="10353:[6002..6028).4" />
<Link Source="10312:[7952..7977).5" Target="10312:[4019..5073).23" />
<Link Source="10312:[7952..7977).6" Target="10312:[7718..7727).2" />
<Link Source="10312:[7952..7977).6" Target="10312:[7952..7977).5" />
<Link Source="10312:[7952..7977).6" Target="10312:[4019..5073).23" />
<Link Source="10312:[8247..8394).1" Target="10312:[4019..5073).23" />
<Link Source="10312:[8247..8394).4" Target="10312:[7718..7727).2" />
<Link Source="10312:[8247..8394).4" Target="10312:[4019..5073).23" />
<Link Source="10312:[8247..8394).5" Target="10312:[7729..7768).2" />
<Link Source="10312:[8247..8394).5" Target="10312:[4019..5073).23" />
<Link Source="10312:[8247..8394).8" Target="10312:[7816..7829).2" />
<Link Source="10312:[8247..8394).8" Target="10312:[4019..5073).23" />
<Link Source="10312:[8247..8393).1" Target="10312:[4019..5073).23" />
<Link Source="10312:[8543..8562).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8543..8562).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8564..8579).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8564..8579).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8581..8592).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8581..8592).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8594..8603).1" Target="10312:[8247..8394).4" />
<Link Source="10312:[8594..8603).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8605..8644).1" Target="10312:[8247..8394).5" />
<Link Source="10312:[8605..8644).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8646..8667).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8646..8667).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8669..8690).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8669..8690).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8692..8705).1" Target="10312:[8247..8394).8" />
<Link Source="10312:[8692..8705).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8707..8753).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8707..8753).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8508..10685).1" Target="10312:[7615..8420).2" />
<Link Source="10312:[8508..10685).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8779..10524).1" Target="10312:[8564..8579).1" />
<Link Source="10312:[8779..10524).1" Target="10319:[50381..51340).4" />
<Link Source="10312:[8779..10524).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[9577..9709).1" Target="10312:[8543..8562).1" />
<Link Source="10312:[9577..9709).1" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).2" Target="10312:[8564..8579).1" />
<Link Source="10312:[9577..9709).2" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).3" Target="10312:[8581..8592).1" />
<Link Source="10312:[9577..9709).3" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).4" Target="10312:[8594..8603).1" />
<Link Source="10312:[9577..9709).4" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).5" Target="10312:[8605..8644).1" />
<Link Source="10312:[9577..9709).5" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).6" Target="10312:[8646..8667).1" />
<Link Source="10312:[9577..9709).6" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).7" Target="10312:[8669..8690).1" />
<Link Source="10312:[9577..9709).7" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).8" Target="10312:[8692..8705).1" />
<Link Source="10312:[9577..9709).8" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).9" Target="10312:[8707..8753).1" />
<Link Source="10312:[9577..9709).9" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9708).1" Target="10312:[8779..10524).1" />
<Link Source="10312:[34707..34726).1" Target="10312:[9577..9709).1" />
<Link Source="10312:[34707..34726).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34741..34756).1" Target="10312:[9577..9709).2" />
<Link Source="10312:[34741..34756).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34771..34782).1" Target="10312:[9577..9709).3" />
<Link Source="10312:[34771..34782).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34797..34806).1" Target="10312:[9577..9709).4" />
<Link Source="10312:[34797..34806).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34821..34860).1" Target="10312:[9577..9709).5" />
<Link Source="10312:[34821..34860).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34875..34896).1" Target="10312:[9577..9709).6" />
<Link Source="10312:[34875..34896).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34911..34932).1" Target="10312:[9577..9709).7" />
<Link Source="10312:[34911..34932).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34947..34960).1" Target="10312:[9577..9709).8" />
<Link Source="10312:[34947..34960).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34975..35021).1" Target="10312:[9577..9709).9" />
<Link Source="10312:[34975..35021).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34659..35191).1" Target="10312:[8508..10685).1" />
<Link Source="10312:[34659..35191).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).1" Target="10312:[34707..34726).1" />
<Link Source="10312:[35047..35180).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).2" Target="10312:[34741..34756).1" />
<Link Source="10312:[35047..35180).2" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).3" Target="10312:[34771..34782).1" />
<Link Source="10312:[35047..35180).3" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).4" Target="10312:[34797..34806).1" />
<Link Source="10312:[35047..35180).4" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).5" Target="10312:[34821..34860).1" />
<Link Source="10312:[35047..35180).5" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).6" Target="10312:[34875..34896).1" />
<Link Source="10312:[35047..35180).6" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).7" Target="10312:[34911..34932).1" />
<Link Source="10312:[35047..35180).7" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).9" Target="10312:[34947..34960).1" />
<Link Source="10312:[35047..35180).9" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).10" Target="10312:[34975..35021).1" />
<Link Source="10312:[35047..35180).10" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35179).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35313..35332).1" Target="10312:[35047..35180).1" />
<Link Source="10312:[35313..35332).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35347..35362).1" Target="10312:[35047..35180).2" />
<Link Source="10312:[35347..35362).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35377..35388).1" Target="10312:[35047..35180).3" />
<Link Source="10312:[35377..35388).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35403..35412).1" Target="10312:[35047..35180).4" />
<Link Source="10312:[35403..35412).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35427..35466).1" Target="10312:[35047..35180).5" />
<Link Source="10312:[35427..35466).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35481..35502).1" Target="10312:[35047..35180).6" />
<Link Source="10312:[35481..35502).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35517..35538).1" Target="10312:[35047..35180).7" />
<Link Source="10312:[35517..35538).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35553..35581).1" Target="10312:[35047..35180).2" />
<Link Source="10312:[35553..35581).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35596..35609).1" Target="10312:[35047..35180).9" />
<Link Source="10312:[35596..35609).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35624..35670).1" Target="10312:[35047..35180).10" />
<Link Source="10312:[35624..35670).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35265..38808).1" Target="10312:[34659..35191).1" />
<Link Source="10312:[35265..38808).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35696..35731).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35347..35362).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35696..35731).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35047..35179).1" />
<Link Source="10312:[35745..35826).1" Target="10312:[35347..35362).1" />
<Link Source="10312:[35745..35826).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35842..35872).1" Target="10312:[35347..35362).1" />
<Link Source="10312:[35842..35872).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35898..35924).1" Target="10312:[35047..35179).1" />
<Link Source="10354:[3068..3073).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3200..3211).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3319..3325).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3380..3385).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[11312..11328).3" Target="10312:[35898..35924).1" />
<Link Source="10354:[3684..3818).10" Target="10312:[35898..35924).1" />
<Link Source="10354:[3684..3818).10" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).69" Target="10354:[3684..3818).10" />
<Link Source="10354:[3720..3803).69" Target="10312:[35898..35924).1" />
<Link Source="10354:[3720..3803).69" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).69" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).70" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).71" Target="10354:[3684..3818).10" />
<Link Source="10354:[3720..3803).71" Target="10312:[35898..35924).1" />
<Link Source="10354:[3720..3803).71" Target="10354:[3720..3803).70" />
<Link Source="10354:[3720..3803).71" Target="10354:[11312..11328).3" />
<Link Source="10354:[11299..11330).7" Target="10354:[3720..3803).69" />
<Link Source="10354:[11299..11330).7" Target="10312:[35898..35924).1" />
<Link Source="10312:[35888..35925).1" Target="10312:[35898..35924).1" />
<Link Source="10312:[35888..35925).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35939..35985).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35999..38740).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35842..35872).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35999..38740).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35047..35179).1" />
<Link Source="10312:[36067..36078).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[3841..3991).2" Target="10312:[35888..35925).1" />
<Link Source="10354:[3841..3991).2" Target="10312:[36067..36078).1" />
<Link Source="10312:[36067..36079).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).1" Target="10312:[35888..35925).1" />
<Link Source="10312:[36097..36258).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).2" Target="10312:[35842..35872).1" />
<Link Source="10312:[36097..36258).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).3" Target="10312:[35377..35388).1" />
<Link Source="10312:[36097..36258).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).4" Target="10312:[35403..35412).1" />
<Link Source="10312:[36097..36258).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).5" Target="10312:[35481..35502).1" />
<Link Source="10312:[36097..36258).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).6" Target="10312:[35517..35538).1" />
<Link Source="10312:[36097..36258).6" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).7" Target="10312:[35553..35581).1" />
<Link Source="10312:[36097..36258).7" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).8" Target="10312:[35596..35609).1" />
<Link Source="10312:[36097..36258).8" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).9" Target="10312:[35624..35670).1" />
<Link Source="10312:[36097..36258).9" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).10" Target="10312:[35427..35466).1" />
<Link Source="10312:[36097..36258).10" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36257).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[33656..33675).1" Target="10312:[36097..36258).1" />
<Link Source="10312:[33656..33675).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33677..33692).1" Target="10312:[36097..36258).2" />
<Link Source="10312:[33677..33692).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33694..33705).1" Target="10312:[36097..36258).3" />
<Link Source="10312:[33694..33705).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33707..33716).1" Target="10312:[36097..36258).4" />
<Link Source="10312:[33707..33716).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33731..33752).1" Target="10312:[36097..36258).5" />
<Link Source="10312:[33731..33752).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33754..33775).1" Target="10312:[36097..36258).6" />
<Link Source="10312:[33754..33775).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33777..33805).1" Target="10312:[36097..36258).7" />
<Link Source="10312:[33777..33805).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33807..33820).1" Target="10312:[36097..36258).8" />
<Link Source="10312:[33807..33820).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33822..33868).1" Target="10312:[36097..36258).9" />
<Link Source="10312:[33822..33868).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33870..33909).1" Target="10312:[36097..36258).10" />
<Link Source="10312:[33870..33909).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).1" Target="10312:[33677..33692).1" />
<Link Source="10312:[33935..34006).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).2" Target="10312:[33694..33705).1" />
<Link Source="10312:[33935..34006).2" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).3" Target="10312:[33731..33752).1" />
<Link Source="10312:[33935..34006).3" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).4" Target="10312:[33754..33775).1" />
<Link Source="10312:[33935..34006).4" Target="10312:[36097..36257).1" />
<Link Source="10312:[33949..34005).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[61540..61570).2" Target="10312:[33935..34006).1" />
<Link Source="10312:[61540..61570).2" Target="10312:[33949..34005).1" />
<Link Source="10312:[61572..61583).2" Target="10312:[33935..34006).2" />
<Link Source="10312:[61572..61583).2" Target="10312:[33949..34005).1" />
<Link Source="10312:[61585..61606).2" Target="10312:[33935..34006).3" />
<Link Source="10312:[61585..61606).2" Target="10312:[33949..34005).1" />
<Link Source="10312:[61608..61629).2" Target="10312:[33935..34006).4" />
<Link Source="10312:[61608..61629).2" Target="10312:[33949..34005).1" />
<Link Source="10312:[61655..62327).9" Target="10312:[61585..61606).2" />
<Link Source="10312:[61655..62327).9" Target="10312:[61540..61570).2" />
<Link Source="10312:[61655..62327).9" Target="10312:[33949..34005).1" />
<Link Source="10312:[61771..61840).1" Target="10312:[61572..61583).2" />
<Link Source="10312:[61771..61840).1" Target="10312:[61655..62327).9" />
<Link Source="10312:[61771..61840).2" Target="10312:[61540..61570).2" />
<Link Source="10312:[61771..61840).2" Target="10312:[61771..61840).1" />
<Link Source="10312:[61771..61840).2" Target="10312:[35745..35826).1" />
<Link Source="10312:[61771..61840).2" Target="10312:[61655..62327).9" />
<Link Source="10312:[34022..34574).1" Target="10312:[61771..61840).2" />
<Link Source="10312:[34022..34574).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[36097..36258).11" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).1" Target="10312:[35313..35332).1" />
<Link Source="10312:[36278..36360).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).2" Target="10312:[35888..35925).1" />
<Link Source="10312:[36278..36360).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).3" Target="10312:[35427..35466).1" />
<Link Source="10312:[36278..36360).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).4" Target="10312:[33822..33868).1" />
<Link Source="10312:[36278..36360).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).1" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).3" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).4" />
<Link Source="10312:[36278..36360).5" Target="10354:[3841..3991).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[61771..61840).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).6" Target="10312:[35999..38740).2" />
<Link Source="10354:[9012..9030).1" Target="10312:[36278..36360).5" />
<Link Source="10354:[9012..9030).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[8981..9152).1" Target="10312:[36278..36360).5" />
<Link Source="10354:[8981..9152).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[9060..9070).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[4058..4122).12" Target="10354:[9012..9030).1" />
<Link Source="10354:[4058..4122).12" Target="10354:[9060..9070).1" />
<Link Source="10354:[9056..9141).1" Target="10354:[4058..4122).12" />
<Link Source="10354:[9056..9141).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[9073..9077).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[4058..4122).13" Target="10354:[8981..9152).1" />
<Link Source="10354:[4058..4122).13" Target="10354:[9073..9077).1" />
<Link Source="10354:[9056..9141).2" Target="10354:[4058..4122).13" />
<Link Source="10354:[9056..9141).2" Target="10312:[36278..36360).6" />
<Link Source="10354:[9056..9141).3" Target="10354:[9056..9141).1" />
<Link Source="10354:[9056..9141).3" Target="10354:[9056..9141).2" />
<Link Source="10354:[9056..9141).3" Target="10312:[36278..36360).6" />
<Link Source="10312:[36566..36625).1" Target="10312:[35842..35872).1" />
<Link Source="10312:[36566..36625).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36643..36855).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36643..36855).2" Target="10312:[36566..36625).1" />
<Link Source="10312:[36643..36855).2" Target="10312:[36278..36360).5" />
<Link Source="10312:[36643..36855).2" Target="10312:[36643..36855).1" />
<Link Source="10312:[36643..36855).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[37061..37078).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[4919..5009).10" Target="10312:[35888..35925).1" />
<Link Source="10354:[4919..5009).10" Target="10312:[37061..37078).1" />
<Link Source="10354:[4094..4107).14" Target="10354:[4919..5009).10" />
<Link Source="10354:[4094..4107).14" Target="10312:[36278..36360).5" />
<Link Source="10354:[4094..4107).14" Target="10312:[37061..37078).1" />
<Link Source="10312:[37029..37117).1" Target="10354:[4094..4107).14" />
<Link Source="10312:[37029..37117).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37258..37278).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[4919..5009).11" Target="10312:[35313..35332).1" />
<Link Source="10354:[4919..5009).11" Target="10312:[37258..37278).1" />
<Link Source="10354:[4094..4107).15" Target="10354:[4919..5009).11" />
<Link Source="10354:[4094..4107).15" Target="10312:[36278..36360).5" />
<Link Source="10354:[4094..4107).15" Target="10312:[37258..37278).1" />
<Link Source="10312:[37254..37416).1" Target="10354:[4094..4107).15" />
<Link Source="10312:[37254..37416).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37436..37988).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37436..37988).2" Target="10312:[35427..35466).1" />
<Link Source="10312:[37436..37988).2" Target="10312:[37436..37988).1" />
<Link Source="10312:[37436..37988).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38290..38338).1" Target="10312:[35999..38740).2" />
<Link Source="10306:[3345..3430).1" Target="10312:[35517..35538).1" />
<Link Source="10306:[3345..3430).1" Target="10312:[38290..38338).1" />
<Link Source="10306:[3358..3364).1" Target="10312:[38290..38338).1" />
<Link Source="10306:[3196..3249).5" Target="10306:[3345..3430).1" />
<Link Source="10306:[3196..3249).5" Target="10306:[3358..3364).1" />
<Link Source="10306:[3202..3247).17" Target="10306:[3196..3249).5" />
<Link Source="10306:[3202..3247).17" Target="10312:[36278..36360).5" />
<Link Source="10306:[3202..3247).17" Target="10306:[3358..3364).1" />
<Link Source="10306:[3351..3428).1" Target="10306:[3202..3247).17" />
<Link Source="10306:[3351..3428).1" Target="10312:[38290..38338).1" />
<Link Source="10312:[38286..38405).1" Target="10306:[3351..3428).1" />
<Link Source="10312:[38286..38405).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).1" Target="10312:[35842..35872).1" />
<Link Source="10312:[38425..38538).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).2" Target="10312:[35427..35466).1" />
<Link Source="10312:[38425..38538).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).3" Target="10312:[35265..38808).1" />
<Link Source="10312:[38425..38538).3" Target="10312:[36278..36360).5" />
<Link Source="10312:[38425..38538).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).4" Target="10312:[35939..35985).1" />
<Link Source="10312:[38425..38538).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).1" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).2" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).3" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).4" />
<Link Source="10312:[38425..38538).5" Target="10312:[36278..36360).5" />
<Link Source="10312:[38425..38538).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[38556..38725).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38556..38725).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[38556..38725).2" Target="10312:[38556..38725).1" />
<Link Source="10312:[38556..38725).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38629..38706).1" Target="10312:[38425..38538).5" />
<Link Source="10312:[38629..38706).1" Target="10312:[38556..38725).2" />
<Link Source="10312:[38629..38706).2" Target="10312:[36278..36360).5" />
<Link Source="10312:[38629..38706).2" Target="10312:[38556..38725).2" />
<Link Source="10312:[36067..36079).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).15" Target="10312:[35403..35412).1" />
<Link Source="10312:[36097..36258).15" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).17" Target="10312:[35517..35538).1" />
<Link Source="10312:[36097..36258).17" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).18" Target="10312:[35553..35581).1" />
<Link Source="10312:[36097..36258).18" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).19" Target="10312:[35596..35609).1" />
<Link Source="10312:[36097..36258).19" Target="10312:[38425..38538).5" />
<Link Source="10312:[33656..33675).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33707..33716).2" Target="10312:[36097..36258).15" />
<Link Source="10312:[33707..33716).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33754..33775).2" Target="10312:[36097..36258).17" />
<Link Source="10312:[33754..33775).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33777..33805).2" Target="10312:[36097..36258).18" />
<Link Source="10312:[33777..33805).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33807..33820).2" Target="10312:[36097..36258).19" />
<Link Source="10312:[33807..33820).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33870..33909).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[61608..61629).3" Target="10312:[33754..33775).2" />
<Link Source="10312:[61608..61629).3" Target="10312:[38425..38538).5" />
<Link Source="10312:[34022..34574).4" Target="10312:[38629..38706).1" />
<Link Source="10312:[34022..34574).4" Target="10312:[38425..38538).5" />
<Link Source="10354:[9012..9030).2" Target="10312:[38629..38706).1" />
<Link Source="10354:[9012..9030).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[8981..9152).2" Target="10312:[38629..38706).1" />
<Link Source="10354:[8981..9152).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[9060..9070).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4058..4122).17" Target="10354:[9012..9030).2" />
<Link Source="10354:[4058..4122).17" Target="10354:[9060..9070).2" />
<Link Source="10354:[9056..9141).5" Target="10354:[4058..4122).17" />
<Link Source="10354:[9056..9141).5" Target="10312:[38425..38538).5" />
<Link Source="10354:[9073..9077).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4058..4122).18" Target="10354:[8981..9152).2" />
<Link Source="10354:[4058..4122).18" Target="10354:[9073..9077).2" />
<Link Source="10354:[9056..9141).6" Target="10354:[4058..4122).18" />
<Link Source="10354:[9056..9141).6" Target="10312:[38425..38538).5" />
<Link Source="10354:[9056..9141).7" Target="10354:[9056..9141).5" />
<Link Source="10354:[9056..9141).7" Target="10354:[9056..9141).6" />
<Link Source="10354:[9056..9141).7" Target="10312:[38425..38538).5" />
<Link Source="10312:[36566..36625).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[36643..36855).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[36643..36855).5" Target="10312:[36566..36625).2" />
<Link Source="10312:[36643..36855).5" Target="10312:[38629..38706).1" />
<Link Source="10312:[36643..36855).5" Target="10312:[36643..36855).4" />
<Link Source="10312:[36643..36855).5" Target="10312:[38425..38538).5" />
<Link Source="10312:[37061..37078).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4094..4107).19" Target="10312:[37061..37078).2" />
<Link Source="10354:[4094..4107).19" Target="10312:[38629..38706).1" />
<Link Source="10312:[37029..37117).4" Target="10354:[4094..4107).19" />
<Link Source="10312:[37029..37117).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[37258..37278).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4094..4107).20" Target="10312:[37258..37278).2" />
<Link Source="10354:[4094..4107).20" Target="10312:[38629..38706).1" />
<Link Source="10312:[37254..37416).4" Target="10354:[4094..4107).20" />
<Link Source="10312:[37254..37416).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[37436..37988).5" Target="10312:[38425..38538).5" />
<Link Source="10312:[38290..38338).2" Target="10312:[38425..38538).5" />
<Link Source="10306:[3345..3430).2" Target="10312:[35517..35538).1" />
<Link Source="10306:[3345..3430).2" Target="10312:[38290..38338).2" />
<Link Source="10306:[3358..3364).2" Target="10312:[38290..38338).2" />
<Link Source="10306:[3196..3249).6" Target="10306:[3345..3430).2" />
<Link Source="10306:[3196..3249).6" Target="10306:[3358..3364).2" />
<Link Source="10306:[3202..3247).21" Target="10306:[3196..3249).6" />
<Link Source="10306:[3202..3247).21" Target="10312:[38629..38706).1" />
<Link Source="10306:[3202..3247).21" Target="10306:[3358..3364).2" />
<Link Source="10306:[3351..3428).4" Target="10306:[3202..3247).21" />
<Link Source="10306:[3351..3428).4" Target="10312:[38290..38338).2" />
<Link Source="10312:[38286..38405).3" Target="10306:[3351..3428).4" />
<Link Source="10312:[38286..38405).3" Target="10312:[38425..38538).5" />
<Link Source="10312:[38556..38725).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[38756..38772).1" Target="10312:[38629..38706).1" />
<Link Source="10312:[38756..38772).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[38786..38796).1" Target="10312:[35047..35179).1" />
<Link Source="10354:[11383..11549).2" Target="10312:[35888..35925).1" />
<Link Source="10354:[11383..11549).2" Target="10312:[38786..38796).1" />
<Link Source="10354:[3932..3952).4" Target="10354:[11383..11549).2" />
<Link Source="10354:[3932..3952).4" Target="10312:[38629..38706).1" />
<Link Source="10354:[3932..3952).4" Target="10312:[38786..38796).1" />
<Link Source="10354:[11428..11441).2" Target="10312:[38786..38796).1" />
<Link Source="10312:[38786..38797).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35047..35180).11" Target="10312:[9577..9708).1" />
<Link Source="10312:[9577..9709).10" Target="10312:[8779..10524).1" />
<Link Source="10346:[12335..12456).1" Target="10312:[4019..5073).23" />
<Link Source="10346:[12335..12456).4" Target="10346:[10663..10672).2" />
<Link Source="10346:[12335..12456).4" Target="10312:[4019..5073).23" />
<Link Source="10346:[12335..12456).5" Target="10346:[10674..10713).2" />
<Link Source="10346:[12335..12456).5" Target="10312:[4019..5073).23" />
<Link Source="10346:[12335..12456).7" Target="10346:[10761..10774).2" />
<Link Source="10346:[12335..12456).7" Target="10312:[4019..5073).23" />
<Link Source="10346:[12335..12456).8" Target="10312:[38629..38706).1" />
<Link Source="10346:[12335..12456).8" Target="10312:[4019..5073).23" />
<Link Source="10346:[12335..12455).1" Target="10312:[4019..5073).23" />
<Link Source="10345:[29004..29025).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29004..29025).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29040..29059).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29040..29059).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29074..29085).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29074..29085).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29100..29109).1" Target="10346:[12335..12456).4" />
<Link Source="10345:[29100..29109).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29124..29163).1" Target="10346:[12335..12456).5" />
<Link Source="10345:[29124..29163).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29178..29199).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29178..29199).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29214..29227).1" Target="10346:[12335..12456).7" />
<Link Source="10345:[29214..29227).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29242..29288).1" Target="10346:[12335..12456).8" />
<Link Source="10345:[29242..29288).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[28963..29726).1" Target="10312:[4019..5073).23" />
<Link Source="10345:[28963..29726).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).1" Target="10345:[29004..29025).1" />
<Link Source="10345:[29314..29436).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).2" Target="10345:[29040..29059).1" />
<Link Source="10345:[29314..29436).2" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).3" Target="10345:[29074..29085).1" />
<Link Source="10345:[29314..29436).3" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).4" Target="10345:[29100..29109).1" />
<Link Source="10345:[29314..29436).4" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).5" Target="10345:[29124..29163).1" />
<Link Source="10345:[29314..29436).5" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).6" Target="10345:[29178..29199).1" />
<Link Source="10345:[29314..29436).6" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).7" Target="10345:[29214..29227).1" />
<Link Source="10345:[29314..29436).7" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).8" Target="10345:[29242..29288).1" />
<Link Source="10345:[29314..29436).8" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29435).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29788..29809).1" Target="10345:[29314..29436).1" />
<Link Source="10345:[29788..29809).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29824..29843).1" Target="10345:[29314..29436).2" />
<Link Source="10345:[29824..29843).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29858..29869).1" Target="10345:[29314..29436).3" />
<Link Source="10345:[29858..29869).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29884..29893).1" Target="10345:[29314..29436).4" />
<Link Source="10345:[29884..29893).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29908..29947).1" Target="10345:[29314..29436).5" />
<Link Source="10345:[29908..29947).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29962..29983).1" Target="10345:[29314..29436).6" />
<Link Source="10345:[29962..29983).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29998..30011).1" Target="10345:[29314..29436).7" />
<Link Source="10345:[29998..30011).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30026..30072).1" Target="10345:[29314..29436).8" />
<Link Source="10345:[30026..30072).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29738..31666).1" Target="10345:[28963..29726).1" />
<Link Source="10345:[29738..31666).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30127..30163).1" Target="10345:[29314..29435).1" />
<Link Source="10286:[2155..2260).2" Target="10345:[29788..29809).1" />
<Link Source="10286:[2155..2260).2" Target="10345:[30127..30163).1" />
<Link Source="10286:[2191..2245).5" Target="10286:[2155..2260).2" />
<Link Source="10286:[2191..2245).5" Target="10354:[3932..3952).4" />
<Link Source="10286:[2191..2245).5" Target="10345:[30127..30163).1" />
<Link Source="10286:[2191..2245).6" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).6" Target="10345:[30127..30163).1" />
<Link Source="10286:[2198..2244).2" Target="10345:[30127..30163).1" />
<Link Source="10298:[471..492).21" Target="10286:[2191..2245).5" />
<Link Source="10298:[471..492).21" Target="10286:[2198..2244).2" />
<Link Source="10298:[494..511).21" Target="10286:[2191..2245).6" />
<Link Source="10298:[494..511).21" Target="10286:[2198..2244).2" />
<Link Source="10345:[30098..30164).1" Target="10298:[471..492).21" />
<Link Source="10345:[30098..30164).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30180..30209).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30203..30208).1" Target="10345:[30180..30209).1" />
<Link Source="10345:[30203..30208).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).1" Target="10345:[29858..29869).1" />
<Link Source="10345:[30223..30867).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).2" Target="10345:[30180..30209).1" />
<Link Source="10345:[30223..30867).2" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[29738..31666).1" />
<Link Source="10345:[30223..30867).3" Target="10354:[3932..3952).4" />
<Link Source="10345:[30223..30867).3" Target="10345:[30223..30867).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[30223..30867).2" />
<Link Source="10345:[30223..30867).3" Target="10345:[30203..30208).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[29314..29435).1" />
<Link Source="10345:[30883..31655).1" Target="10345:[29738..31666).1" />
<Link Source="10345:[30883..31655).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[30883..31655).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29314..29436).9" Target="10346:[12335..12455).1" />
<Link Source="10345:[29457..29477).1" Target="10346:[12335..12455).1" />
<Link Source="10354:[4919..5009).16" Target="10345:[29040..29059).1" />
<Link Source="10354:[4919..5009).16" Target="10345:[29457..29477).1" />
<Link Source="10354:[4094..4107).22" Target="10354:[4919..5009).16" />
<Link Source="10354:[4094..4107).22" Target="10345:[30223..30867).3" />
<Link Source="10354:[4094..4107).22" Target="10345:[29457..29477).1" />
<Link Source="10345:[29452..29715).1" Target="10354:[4094..4107).22" />
<Link Source="10345:[29452..29715).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).2" Target="10345:[29178..29199).1" />
<Link Source="10345:[29452..29715).2" Target="EXTERNAL" />
<Link Source="10345:[29452..29715).2" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).3" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).5" Target="10345:[29452..29715).1" />
<Link Source="10345:[29452..29715).5" Target="10345:[29452..29715).2" />
<Link Source="10345:[29452..29715).5" Target="10346:[12335..12455).1" />
<Link Source="10345:[29566..29700).1" Target="10345:[28963..29726).1" />
<Link Source="10345:[29566..29700).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[29566..29700).1" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).2" Target="10345:[29004..29025).1" />
<Link Source="10345:[29566..29700).2" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).3" Target="10345:[29040..29059).1" />
<Link Source="10345:[29566..29700).3" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).4" Target="10345:[29074..29085).1" />
<Link Source="10345:[29566..29700).4" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).5" Target="10345:[29100..29109).1" />
<Link Source="10345:[29566..29700).5" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).6" Target="10345:[29124..29163).1" />
<Link Source="10345:[29566..29700).6" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).7" Target="10345:[29178..29199).1" />
<Link Source="10345:[29566..29700).7" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).8" Target="10345:[29214..29227).1" />
<Link Source="10345:[29566..29700).8" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).9" Target="10345:[30026..30072).1" />
<Link Source="10345:[29566..29700).9" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29699).1" Target="10345:[29452..29715).5" />
<Link Source="10345:[31734..31789).1" Target="10345:[29566..29700).1" />
<Link Source="10345:[31734..31789).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31804..31825).1" Target="10345:[29566..29700).2" />
<Link Source="10345:[31804..31825).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31840..31859).1" Target="10345:[29566..29700).3" />
<Link Source="10345:[31840..31859).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31874..31885).1" Target="10345:[29566..29700).4" />
<Link Source="10345:[31874..31885).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31900..31909).1" Target="10345:[29566..29700).5" />
<Link Source="10345:[31900..31909).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31924..31963).1" Target="10345:[29566..29700).6" />
<Link Source="10345:[31924..31963).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31978..31999).1" Target="10345:[29566..29700).7" />
<Link Source="10345:[31978..31999).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32014..32027).1" Target="10345:[29566..29700).8" />
<Link Source="10345:[32014..32027).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32042..32088).1" Target="10345:[29566..29700).9" />
<Link Source="10345:[32042..32088).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32114..32230).1" Target="10345:[31804..31825).1" />
<Link Source="10345:[32114..32230).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[32114..32230).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32114..32230).2" Target="EXTERNAL" />
<Link Source="10345:[32114..32230).2" Target="10345:[29566..29699).1" />
<Link Source="10345:[32118..32174).1" Target="10345:[29566..29699).1" />
<Link Source="10298:[471..492).22" Target="10345:[32114..32230).1" />
<Link Source="10298:[471..492).22" Target="10345:[32118..32174).1" />
<Link Source="10298:[494..511).22" Target="10345:[32114..32230).2" />
<Link Source="10298:[494..511).22" Target="10345:[32118..32174).1" />
<Link Source="10345:[32275..32311).1" Target="10345:[29566..29699).1" />
<Link Source="10286:[2155..2260).3" Target="10345:[31804..31825).1" />
<Link Source="10286:[2155..2260).3" Target="10345:[32275..32311).1" />
<Link Source="10286:[2191..2245).9" Target="10286:[2155..2260).3" />
<Link Source="10286:[2191..2245).9" Target="10345:[30223..30867).3" />
<Link Source="10286:[2191..2245).9" Target="10345:[32275..32311).1" />
<Link Source="10286:[2191..2245).10" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).10" Target="10345:[32275..32311).1" />
<Link Source="10286:[2198..2244).3" Target="10345:[32275..32311).1" />
<Link Source="10298:[471..492).23" Target="10286:[2191..2245).9" />
<Link Source="10298:[471..492).23" Target="10286:[2198..2244).3" />
<Link Source="10298:[494..511).23" Target="10286:[2191..2245).10" />
<Link Source="10298:[494..511).23" Target="10286:[2198..2244).3" />
<Link Source="10345:[32246..32312).1" Target="10298:[471..492).23" />
<Link Source="10345:[32246..32312).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32328..33465).1" Target="10345:[31734..31789).1" />
<Link Source="10345:[32328..33465).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[29566..29700).10" Target="10345:[29452..29715).5" />
<Link Source="10354:[3720..3803).77" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).77" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).77" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).77" Target="10312:[4685..4699).3" />
<Link Source="10354:[3720..3803).79" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).79" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).79" Target="10354:[3720..3803).54" />
<Link Source="10354:[3720..3803).79" Target="10312:[4685..4699).3" />
<Link Source="10312:[4680..4787).7" Target="10354:[3720..3803).77" />
<Link Source="10312:[4680..4787).7" Target="10312:[4019..5073).23" />
<Link Source="10312:[4534..4658).39" Target="10312:[3730..3739).2" />
<Link Source="10312:[4534..4658).39" Target="10345:[30223..30867).3" />
<Link Source="10312:[4534..4658).43" Target="10312:[3805..3818).2" />
<Link Source="10312:[4534..4658).43" Target="10345:[30223..30867).3" />
<Link Source="10346:[10663..10672).3" Target="10312:[4534..4658).39" />
<Link Source="10346:[10663..10672).3" Target="10345:[30223..30867).3" />
<Link Source="10346:[10761..10774).3" Target="10312:[4534..4658).43" />
<Link Source="10346:[10761..10774).3" Target="10345:[30223..30867).3" />
<Link Source="10346:[10861..10875).3" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).12" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).12" Target="10346:[10861..10875).3" />
<Link Source="10354:[3720..3803).85" Target="10354:[3684..3818).12" />
<Link Source="10354:[3720..3803).85" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).85" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).85" Target="10346:[10861..10875).3" />
<Link Source="10354:[3720..3803).86" Target="10346:[10861..10875).3" />
<Link Source="10354:[3720..3803).87" Target="10354:[3684..3818).12" />
<Link Source="10354:[3720..3803).87" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).87" Target="10354:[3720..3803).86" />
<Link Source="10354:[3720..3803).87" Target="10346:[10861..10875).3" />
<Link Source="10346:[10848..10877).7" Target="10354:[3720..3803).85" />
<Link Source="10346:[10848..10877).7" Target="10345:[30223..30867).3" />
<Link Source="10346:[10897..10914).3" Target="10345:[30223..30867).3" />
<Link Source="10346:[7666..7775).3" Target="10345:[30223..30867).3" />
<Link Source="10346:[7666..7775).3" Target="10346:[10897..10914).3" />
<Link Source="10346:[7672..7773).7" Target="10346:[7666..7775).3" />
<Link Source="10346:[7672..7773).7" Target="10345:[30223..30867).3" />
<Link Source="10346:[7672..7773).7" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).7" Target="10346:[10897..10914).3" />
<Link Source="10346:[10893..11127).5" Target="10346:[7672..7773).7" />
<Link Source="10346:[10893..11127).5" Target="10345:[30223..30867).3" />
<Link Source="10346:[3525..3638).24" Target="10345:[30223..30867).3" />
<Link Source="10312:[7718..7727).3" Target="10346:[10663..10672).3" />
<Link Source="10312:[7718..7727).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[7816..7829).3" Target="10346:[10761..10774).3" />
<Link Source="10312:[7816..7829).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[7903..7936).9" Target="10345:[30223..30867).3" />
<Link Source="10312:[7916..7934).3" Target="10345:[30223..30867).3" />
<Link Source="10353:[4698..4724).5" Target="10312:[7903..7936).9" />
<Link Source="10353:[4698..4724).5" Target="10312:[7916..7934).3" />
<Link Source="10353:[4750..4847).9" Target="10353:[4698..4724).5" />
<Link Source="10353:[4750..4847).9" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).9" Target="10312:[7916..7934).3" />
<Link Source="10353:[4863..5000).17" Target="10353:[4698..4724).5" />
<Link Source="10353:[4863..5000).17" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).17" Target="10312:[7916..7934).3" />
<Link Source="10353:[4863..5000).18" Target="10312:[7916..7934).3" />
<Link Source="10353:[5079..5183).9" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).9" Target="10312:[7916..7934).3" />
<Link Source="10353:[5197..5323).13" Target="10353:[4698..4724).5" />
<Link Source="10353:[5197..5323).13" Target="10353:[5079..5183).9" />
<Link Source="10353:[5197..5323).13" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).25" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).25" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).26" Target="10353:[4698..4724).5" />
<Link Source="10353:[5485..5759).26" Target="10353:[5485..5759).25" />
<Link Source="10353:[5485..5759).26" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).27" Target="10312:[7916..7934).3" />
<Link Source="10353:[5775..5979).17" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).17" Target="10312:[7916..7934).3" />
<Link Source="10353:[5775..5979).19" Target="10353:[4698..4724).5" />
<Link Source="10353:[5775..5979).19" Target="10353:[5775..5979).17" />
<Link Source="10353:[5775..5979).19" Target="10312:[7916..7934).3" />
<Link Source="10353:[5995..6029).13" Target="10353:[5775..5979).19" />
<Link Source="10353:[5995..6029).13" Target="10312:[7916..7934).3" />
<Link Source="10353:[6002..6028).5" Target="10312:[7916..7934).3" />
<Link Source="10353:[6343..6358).5" Target="10353:[5995..6029).13" />
<Link Source="10353:[6343..6358).5" Target="10353:[6002..6028).5" />
<Link Source="10353:[6384..6410).25" Target="10353:[6002..6028).5" />
<Link Source="10353:[6384..6410).26" Target="10353:[6343..6358).5" />
<Link Source="10353:[6384..6410).26" Target="10353:[6384..6410).25" />
<Link Source="10353:[6384..6410).26" Target="10353:[6002..6028).5" />
<Link Source="10312:[7952..7977).9" Target="10345:[30223..30867).3" />
<Link Source="10312:[7952..7977).10" Target="10312:[7718..7727).3" />
<Link Source="10312:[7952..7977).10" Target="10312:[7952..7977).9" />
<Link Source="10312:[7952..7977).10" Target="10345:[30223..30867).3" />
<Link Source="10312:[19030..19039).2" Target="10312:[7718..7727).3" />
<Link Source="10312:[19030..19039).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[19087..19100).2" Target="10312:[7816..7829).3" />
<Link Source="10312:[19087..19100).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[61608..61629).4" Target="10345:[30223..30867).3" />
<Link Source="10345:[29004..29025).2" Target="10345:[30223..30867).3" />
<Link Source="10345:[29040..29059).2" Target="10345:[30223..30867).3" />
<Link Source="10345:[29100..29109).2" Target="10346:[10663..10672).3" />
<Link Source="10345:[29100..29109).2" Target="10345:[30223..30867).3" />
<Link Source="10345:[29124..29163).2" Target="10345:[30223..30867).3" />
<Link Source="10345:[29178..29199).2" Target="10345:[30223..30867).3" />
<Link Source="10345:[29214..29227).2" Target="10346:[10761..10774).3" />
<Link Source="10345:[29214..29227).2" Target="10345:[30223..30867).3" />
<Link Source="10345:[29788..29809).2" Target="10345:[29004..29025).2" />
<Link Source="10345:[29788..29809).2" Target="10345:[30223..30867).3" />
<Link Source="10345:[29824..29843).2" Target="10345:[29040..29059).2" />
<Link Source="10345:[29824..29843).2" Target="10345:[30223..30867).3" />
<Link Source="10345:[29884..29893).2" Target="10345:[29100..29109).2" />
<Link Source="10345:[29884..29893).2" Target="10345:[30223..30867).3" />
<Link Source="10345:[29908..29947).2" Target="10345:[29124..29163).2" />
<Link Source="10345:[29908..29947).2" Target="10345:[30223..30867).3" />
<Link Source="10345:[29962..29983).2" Target="10345:[29178..29199).2" />
<Link Source="10345:[29962..29983).2" Target="10345:[30223..30867).3" />
<Link Source="10345:[29998..30011).2" Target="10345:[29214..29227).2" />
<Link Source="10345:[29998..30011).2" Target="10345:[30223..30867).3" />
<Link Source="10345:[30127..30163).2" Target="10345:[30223..30867).3" />
<Link Source="10286:[2155..2260).4" Target="10345:[29788..29809).2" />
<Link Source="10286:[2155..2260).4" Target="10345:[30127..30163).2" />
<Link Source="10286:[2191..2245).13" Target="10286:[2155..2260).4" />
<Link Source="10286:[2191..2245).13" Target="10345:[30223..30867).3" />
<Link Source="10286:[2191..2245).13" Target="10345:[30127..30163).2" />
<Link Source="10286:[2191..2245).14" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).14" Target="10345:[30127..30163).2" />
<Link Source="10286:[2198..2244).4" Target="10345:[30127..30163).2" />
<Link Source="10298:[471..492).24" Target="10286:[2191..2245).13" />
<Link Source="10298:[471..492).24" Target="10286:[2198..2244).4" />
<Link Source="10298:[494..511).24" Target="10286:[2191..2245).14" />
<Link Source="10298:[494..511).24" Target="10286:[2198..2244).4" />
<Link Source="10345:[30098..30164).3" Target="10298:[471..492).24" />
<Link Source="10345:[30098..30164).3" Target="10345:[30223..30867).3" />
<Link Source="10345:[30497..30626).1" Target="10345:[29004..29025).2" />
<Link Source="10345:[30497..30626).2" Target="10345:[29884..29893).2" />
<Link Source="10345:[30497..30626).2" Target="10345:[29004..29025).2" />
<Link Source="10345:[30497..30626).3" Target="10345:[29962..29983).2" />
<Link Source="10345:[30497..30626).3" Target="10345:[29004..29025).2" />
<Link Source="10345:[30497..30626).6" Target="10345:[29998..30011).2" />
<Link Source="10345:[30497..30626).6" Target="10345:[29004..29025).2" />
<Link Source="10345:[30497..30626).7" Target="10345:[32042..32088).1" />
<Link Source="10345:[30497..30626).7" Target="10345:[29004..29025).2" />
<Link Source="10345:[30497..30626).8" Target="10345:[29908..29947).2" />
<Link Source="10345:[30497..30626).8" Target="10345:[29004..29025).2" />
<Link Source="10345:[30507..30625).1" Target="10345:[29004..29025).2" />
<Link Source="10312:[63424..63437).2" Target="10345:[30497..30626).1" />
<Link Source="10312:[63424..63437).2" Target="10345:[30507..30625).1" />
<Link Source="10312:[63439..63448).2" Target="10345:[30497..30626).2" />
<Link Source="10312:[63439..63448).2" Target="10345:[30507..30625).1" />
<Link Source="10312:[63450..63471).2" Target="10345:[30497..30626).3" />
<Link Source="10312:[63450..63471).2" Target="10345:[30507..30625).1" />
<Link Source="10312:[63473..63501).2" Target="10345:[30497..30626).1" />
<Link Source="10312:[63473..63501).2" Target="10345:[30507..30625).1" />
<Link Source="10312:[63503..63516).2" Target="10345:[30497..30626).6" />
<Link Source="10312:[63503..63516).2" Target="10345:[30507..30625).1" />
<Link Source="10312:[63518..63564).2" Target="10345:[30497..30626).7" />
<Link Source="10312:[63518..63564).2" Target="10345:[30507..30625).1" />
<Link Source="10312:[63566..63612).2" Target="10345:[30497..30626).8" />
<Link Source="10312:[63566..63612).2" Target="10345:[30507..30625).1" />
<Link Source="10312:[63381..70761).2" Target="10345:[29788..29809).2" />
<Link Source="10312:[63381..70761).2" Target="10345:[30507..30625).1" />
<Link Source="10312:[63638..63668).2" Target="10345:[30507..30625).1" />
<Link Source="10312:[63682..63706).2" Target="10345:[30507..30625).1" />
<Link Source="10312:[64121..69285).8" Target="10312:[63381..70761).2" />
<Link Source="10312:[64121..69285).8" Target="10312:[63566..63612).2" />
<Link Source="10312:[64121..69285).8" Target="10345:[30507..30625).1" />
<Link Source="10312:[64353..69285).9" Target="10312:[63439..63448).2" />
<Link Source="10312:[64353..69285).9" Target="10312:[64121..69285).8" />
<Link Source="10312:[64353..69285).10" Target="10312:[63503..63516).2" />
<Link Source="10312:[64353..69285).10" Target="10312:[64121..69285).8" />
<Link Source="10312:[64353..69285).11" Target="10312:[63450..63471).2" />
<Link Source="10312:[64353..69285).11" Target="10312:[64121..69285).8" />
<Link Source="10312:[64353..69285).12" Target="10312:[63682..63706).2" />
<Link Source="10312:[64353..69285).12" Target="10312:[64121..69285).8" />
<Link Source="10312:[80978..80991).2" Target="10312:[64121..69285).8" />
<Link Source="10312:[80993..81002).2" Target="10312:[64353..69285).9" />
<Link Source="10312:[80993..81002).2" Target="10312:[64121..69285).8" />
<Link Source="10312:[81004..81017).2" Target="10312:[64353..69285).10" />
<Link Source="10312:[81004..81017).2" Target="10312:[64121..69285).8" />
<Link Source="10312:[81019..81040).2" Target="10312:[64353..69285).11" />
<Link Source="10312:[81019..81040).2" Target="10312:[64121..69285).8" />
<Link Source="10312:[81042..81069).2" Target="10312:[64353..69285).12" />
<Link Source="10312:[81042..81069).2" Target="10312:[64121..69285).8" />
<Link Source="10312:[81095..84034).2" Target="10312:[80978..80991).2" />
<Link Source="10312:[81095..84034).2" Target="10312:[64121..69285).8" />
<Link Source="10312:[83750..83991).1" Target="10312:[81095..84034).2" />
<Link Source="10312:[83750..83991).2" Target="10312:[80993..81002).2" />
<Link Source="10312:[83750..83991).2" Target="10312:[83750..83991).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[81095..84034).2" />
<Link Source="10312:[84050..84066).3" Target="10312:[64121..69285).8" />
<Link Source="10312:[65229..69285).6" Target="10312:[63450..63471).2" />
<Link Source="10312:[65229..69285).6" Target="EXTERNAL" />
<Link Source="10312:[65229..69285).6" Target="10312:[64121..69285).8" />
<Link Source="10312:[66177..69285).16" Target="10312:[63473..63501).2" />
<Link Source="10312:[66177..69285).16" Target="10312:[65229..69285).6" />
<Link Source="10312:[66291..66342).2" Target="10312:[65229..69285).6" />
<Link Source="10312:[75301..75322).2" Target="10312:[65229..69285).6" />
<Link Source="10312:[75301..75322).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75324..75352).2" Target="10312:[66177..69285).16" />
<Link Source="10312:[75324..75352).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).6" Target="10312:[75301..75322).2" />
<Link Source="10312:[75735..75866).6" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).6" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).7" Target="10312:[66291..66342).2" />
<Link Source="10312:[75742..75804).2" Target="10312:[75735..75866).6" />
<Link Source="10312:[75742..75804).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).9" Target="10312:[75324..75352).2" />
<Link Source="10312:[75735..75866).9" Target="10312:[75742..75804).2" />
<Link Source="10312:[66177..69285).19" Target="10312:[63638..63668).2" />
<Link Source="10312:[66177..69285).19" Target="10312:[65229..69285).6" />
<Link Source="10312:[66177..69285).20" Target="10312:[63518..63564).2" />
<Link Source="10312:[66177..69285).20" Target="10312:[65229..69285).6" />
<Link Source="10312:[77543..77571).2" Target="10312:[75735..75866).9" />
<Link Source="10312:[77543..77571).2" Target="10312:[65229..69285).6" />
<Link Source="10312:[77573..77604).2" Target="10312:[66177..69285).19" />
<Link Source="10312:[77573..77604).2" Target="10312:[65229..69285).6" />
<Link Source="10312:[77654..77700).2" Target="10312:[65229..69285).6" />
<Link Source="10312:[77726..77892).5" Target="10312:[65229..69285).6" />
<Link Source="10312:[77726..77892).5" Target="10312:[64121..69285).8" />
<Link Source="10312:[77726..77892).6" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).6" Target="10312:[65229..69285).6" />
<Link Source="10312:[77730..77782).2" Target="10312:[65229..69285).6" />
<Link Source="10298:[471..492).28" Target="10312:[77726..77892).5" />
<Link Source="10298:[471..492).28" Target="10312:[77730..77782).2" />
<Link Source="10298:[494..511).28" Target="10312:[77726..77892).6" />
<Link Source="10298:[494..511).28" Target="10312:[77730..77782).2" />
<Link Source="10312:[78402..78430).2" Target="10312:[77543..77571).2" />
<Link Source="10312:[78402..78430).2" Target="10312:[65229..69285).6" />
<Link Source="10312:[78432..78463).2" Target="10312:[77573..77604).2" />
<Link Source="10312:[78432..78463).2" Target="10312:[65229..69285).6" />
<Link Source="10312:[78513..78552).2" Target="10312:[77654..77700).2" />
<Link Source="10312:[78513..78552).2" Target="10312:[65229..69285).6" />
<Link Source="10346:[8034..8062).2" Target="10312:[78402..78430).2" />
<Link Source="10346:[8034..8062).2" Target="10312:[65229..69285).6" />
<Link Source="10346:[8064..8095).2" Target="10312:[78432..78463).2" />
<Link Source="10346:[8064..8095).2" Target="10312:[65229..69285).6" />
<Link Source="10346:[8145..8184).2" Target="10312:[78513..78552).2" />
<Link Source="10346:[8145..8184).2" Target="10312:[65229..69285).6" />
<Link Source="10346:[8323..8450).1" Target="10312:[65229..69285).6" />
<Link Source="10346:[8323..8450).3" Target="10346:[8034..8062).2" />
<Link Source="10346:[8323..8450).3" Target="10312:[65229..69285).6" />
<Link Source="10346:[8323..8450).4" Target="10346:[8064..8095).2" />
<Link Source="10346:[8323..8450).4" Target="10312:[65229..69285).6" />
<Link Source="10346:[8323..8450).5" Target="10312:[66177..69285).20" />
<Link Source="10346:[8323..8450).5" Target="10312:[65229..69285).6" />
<Link Source="10346:[8330..8449).1" Target="10312:[65229..69285).6" />
<Link Source="10286:[30070..30083).1" Target="10346:[8323..8450).1" />
<Link Source="10286:[30070..30083).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30098..30120).1" Target="10346:[8323..8450).1" />
<Link Source="10286:[30098..30120).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30135..30160).1" Target="10346:[8323..8450).3" />
<Link Source="10286:[30135..30160).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30175..30206).1" Target="10346:[8323..8450).4" />
<Link Source="10286:[30175..30206).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30221..30268).1" Target="10346:[8323..8450).5" />
<Link Source="10286:[30221..30268).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30283..30330).1" Target="10346:[8323..8450).1" />
<Link Source="10286:[30283..30330).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30012..30691).1" Target="10312:[65229..69285).6" />
<Link Source="10286:[30012..30691).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30356..30522).1" Target="10286:[30012..30691).1" />
<Link Source="10286:[30356..30522).1" Target="10312:[64121..69285).8" />
<Link Source="10286:[30356..30522).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30356..30522).2" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).2" Target="10346:[8330..8449).1" />
<Link Source="10286:[30360..30412).1" Target="10346:[8330..8449).1" />
<Link Source="10298:[471..492).29" Target="10286:[30356..30522).1" />
<Link Source="10298:[471..492).29" Target="10286:[30360..30412).1" />
<Link Source="10298:[494..511).29" Target="10286:[30356..30522).2" />
<Link Source="10298:[494..511).29" Target="10286:[30360..30412).1" />
<Link Source="10286:[30538..30680).1" Target="10286:[30070..30083).1" />
<Link Source="10286:[30538..30680).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).2" Target="10286:[30098..30120).1" />
<Link Source="10286:[30538..30680).2" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).3" Target="10286:[30135..30160).1" />
<Link Source="10286:[30538..30680).3" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).4" Target="10286:[30175..30206).1" />
<Link Source="10286:[30538..30680).4" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).5" Target="10286:[30221..30268).1" />
<Link Source="10286:[30538..30680).5" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).6" Target="10286:[30283..30330).1" />
<Link Source="10286:[30538..30680).6" Target="10346:[8330..8449).1" />
<Link Source="10286:[30545..30679).1" Target="10346:[8330..8449).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30538..30680).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2136..2158).1" Target="10286:[30538..30680).2" />
<Link Source="10060:[2136..2158).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2173..2198).1" Target="10286:[30538..30680).3" />
<Link Source="10060:[2173..2198).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2213..2244).1" Target="10286:[30538..30680).4" />
<Link Source="10060:[2213..2244).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2259..2305).1" Target="10286:[30538..30680).5" />
<Link Source="10060:[2259..2305).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2320..2366).1" Target="10286:[30538..30680).6" />
<Link Source="10060:[2320..2366).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).1" Target="10060:[2108..2121).1" />
<Link Source="10060:[2392..2555).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).2" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).2" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).3" Target="10060:[2173..2198).1" />
<Link Source="10060:[2392..2555).3" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).4" Target="10060:[2213..2244).1" />
<Link Source="10060:[2392..2555).4" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).5" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).5" Target="10312:[64121..69285).8" />
<Link Source="10060:[2392..2555).5" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).6" Target="10060:[2259..2305).1" />
<Link Source="10060:[2392..2555).6" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).7" Target="10060:[2320..2366).1" />
<Link Source="10060:[2392..2555).7" Target="10286:[30545..30679).1" />
<Link Source="10060:[2399..2554).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[5593..5606).2" Target="10060:[2392..2555).1" />
<Link Source="10060:[5593..5606).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5621..5634).2" Target="10060:[2392..2555).2" />
<Link Source="10060:[5621..5634).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5691..5716).2" Target="10060:[2392..2555).3" />
<Link Source="10060:[5691..5716).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5731..5762).2" Target="10060:[2392..2555).4" />
<Link Source="10060:[5731..5762).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5777..5806).2" Target="10060:[2392..2555).5" />
<Link Source="10060:[5777..5806).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5821..5867).2" Target="10060:[2392..2555).6" />
<Link Source="10060:[5821..5867).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5882..5928).2" Target="10060:[2392..2555).7" />
<Link Source="10060:[5882..5928).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).5" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).6" Target="10060:[5593..5606).2" />
<Link Source="10060:[5954..5991).6" Target="10060:[5954..5991).5" />
<Link Source="10060:[5954..5991).6" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).5" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).6" Target="10060:[5621..5634).2" />
<Link Source="10060:[6005..6042).6" Target="10060:[6005..6042).5" />
<Link Source="10060:[6005..6042).6" Target="10060:[2399..2554).1" />
<Link Source="10060:[6056..6090).3" Target="10060:[5621..5634).2" />
<Link Source="10060:[6056..6090).3" Target="10312:[64121..69285).8" />
<Link Source="10060:[6056..6090).3" Target="10060:[2399..2554).1" />
<Link Source="10060:[6104..6172).4" Target="10060:[5621..5634).2" />
<Link Source="10060:[6104..6172).4" Target="10060:[2399..2554).1" />
<Link Source="10060:[6188..6219).3" Target="10060:[2399..2554).1" />
<Link Source="10060:[6814..6920).8" Target="10060:[5621..5634).2" />
<Link Source="10060:[6814..6920).8" Target="10060:[5593..5606).2" />
<Link Source="10060:[6814..6920).9" Target="10060:[5821..5867).2" />
<Link Source="10060:[6814..6920).9" Target="10060:[5593..5606).2" />
<Link Source="10060:[6814..6920).10" Target="10060:[5882..5928).2" />
<Link Source="10060:[6814..6920).10" Target="10060:[5593..5606).2" />
<Link Source="10060:[10202..10215).2" Target="10060:[6814..6920).8" />
<Link Source="10060:[10202..10215).2" Target="10060:[5593..5606).2" />
<Link Source="10060:[10265..10311).2" Target="10060:[6814..6920).10" />
<Link Source="10060:[10265..10311).2" Target="10060:[5593..5606).2" />
<Link Source="10060:[10337..10405).4" Target="10060:[10202..10215).2" />
<Link Source="10060:[10337..10405).4" Target="10060:[5593..5606).2" />
<Link Source="10060:[10419..10454).5" Target="10060:[5593..5606).2" />
<Link Source="10060:[10470..10516).2" Target="10060:[10202..10215).2" />
<Link Source="10060:[10470..10516).2" Target="10312:[64121..69285).8" />
<Link Source="10060:[10470..10516).2" Target="10060:[5593..5606).2" />
<Link Source="10060:[10532..10544).2" Target="10060:[5593..5606).2" />
<Link Source="10060:[10558..11295).2" Target="10060:[5593..5606).2" />
<Link Source="10060:[10558..11295).2" Target="10312:[64121..69285).8" />
<Link Source="10060:[11990..12013).2" Target="10060:[5593..5606).2" />
<Link Source="10060:[12078..12091).2" Target="10060:[10202..10215).2" />
<Link Source="10060:[12078..12091).2" Target="10060:[5593..5606).2" />
<Link Source="10060:[12117..12185).4" Target="10060:[12078..12091).2" />
<Link Source="10060:[12117..12185).4" Target="10060:[5593..5606).2" />
<Link Source="10060:[12199..12238).5" Target="10060:[5593..5606).2" />
<Link Source="10060:[12199..12238).6" Target="10060:[11990..12013).2" />
<Link Source="10060:[12199..12238).6" Target="10060:[12199..12238).5" />
<Link Source="10060:[12199..12238).6" Target="10060:[5593..5606).2" />
<Link Source="10345:[30644..30809).1" Target="10060:[5593..5606).2" />
<Link Source="10345:[30644..30809).1" Target="EXTERNAL" />
<Link Source="10345:[30644..30809).1" Target="10345:[29004..29025).2" />
<Link Source="10345:[30725..30790).1" Target="10345:[29004..29025).2" />
<Link Source="10345:[30725..30790).1" Target="10345:[30644..30809).1" />
<Link Source="10345:[30725..30790).2" Target="10345:[30098..30164).3" />
<Link Source="10345:[30725..30790).2" Target="10345:[30644..30809).1" />
<Link Source="10345:[30725..30789).1" Target="10345:[30644..30809).1" />
<Link Source="10345:[23904..23930).1" Target="10345:[30725..30790).1" />
<Link Source="10345:[23904..23930).1" Target="10345:[30725..30789).1" />
<Link Source="10345:[23932..23958).1" Target="10345:[30725..30790).2" />
<Link Source="10345:[23932..23958).1" Target="10345:[30725..30789).1" />
<Link Source="10345:[23871..24063).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[23871..24063).1" Target="10345:[30725..30789).1" />
<Link Source="10345:[23984..24052).1" Target="10345:[23871..24063).1" />
<Link Source="10345:[23984..24052).1" Target="10060:[5593..5606).2" />
<Link Source="10345:[23984..24052).1" Target="10345:[30725..30789).1" />
<Link Source="10345:[23984..24052).2" Target="10345:[23904..23930).1" />
<Link Source="10345:[23984..24052).2" Target="10345:[30725..30789).1" />
<Link Source="10345:[23984..24052).3" Target="10345:[23932..23958).1" />
<Link Source="10345:[23984..24052).3" Target="10345:[30725..30789).1" />
<Link Source="10345:[23984..24051).1" Target="10345:[30725..30789).1" />
<Link Source="10345:[24115..24144).1" Target="10345:[23984..24052).1" />
<Link Source="10345:[24115..24144).1" Target="10345:[23984..24051).1" />
<Link Source="10345:[24146..24172).1" Target="10345:[23984..24052).2" />
<Link Source="10345:[24146..24172).1" Target="10345:[23984..24051).1" />
<Link Source="10345:[24174..24200).1" Target="10345:[23984..24052).3" />
<Link Source="10345:[24174..24200).1" Target="10345:[23984..24051).1" />
<Link Source="10345:[24226..24260).1" Target="10345:[23984..24051).1" />
<Link Source="10345:[24226..24260).2" Target="10345:[24115..24144).1" />
<Link Source="10345:[24226..24260).2" Target="10345:[24226..24260).1" />
<Link Source="10345:[24226..24260).2" Target="10345:[23984..24051).1" />
<Link Source="10345:[24339..24484).1" Target="10345:[23984..24051).1" />
<Link Source="10345:[24339..24484).2" Target="10345:[24146..24172).1" />
<Link Source="10345:[24339..24484).2" Target="10345:[24339..24484).1" />
<Link Source="10345:[24339..24484).2" Target="10345:[23984..24051).1" />
<Link Source="10345:[24339..24484).3" Target="10345:[24339..24484).2" />
<Link Source="10345:[24339..24484).3" Target="10345:[24174..24200).1" />
<Link Source="10345:[24339..24484).3" Target="10345:[23984..24051).1" />
<Link Source="10345:[24420..24469).1" Target="10345:[24146..24172).1" />
<Link Source="10345:[24420..24469).1" Target="10345:[24339..24484).3" />
<Link Source="10345:[24420..24469).2" Target="10345:[24115..24144).1" />
<Link Source="10345:[24420..24469).2" Target="10345:[24420..24469).1" />
<Link Source="10345:[24420..24469).2" Target="10060:[5593..5606).2" />
<Link Source="10345:[24420..24469).2" Target="10345:[24339..24484).3" />
<Link Source="10345:[23984..24052).4" Target="10345:[30725..30789).1" />
<Link Source="10345:[30725..30790).3" Target="10345:[30644..30809).1" />
<Link Source="10345:[30829..30852).1" Target="10060:[5593..5606).2" />
<Link Source="10345:[30829..30852).1" Target="10345:[29004..29025).2" />
<Link Source="10345:[30829..30851).1" Target="10345:[29004..29025).2" />
<Link Source="10354:[10217..10242).2" Target="10345:[30829..30852).1" />
<Link Source="10354:[10217..10242).2" Target="10345:[30829..30851).1" />
<Link Source="10354:[10192..10676).2" Target="10345:[29824..29843).2" />
<Link Source="10354:[10192..10676).2" Target="10345:[30829..30851).1" />
<Link Source="10354:[4094..4107).25" Target="10354:[10192..10676).2" />
<Link Source="10354:[4094..4107).25" Target="10345:[24420..24469).2" />
<Link Source="10354:[4094..4107).25" Target="10345:[30829..30851).1" />
<Link Source="10354:[10268..10665).5" Target="10354:[4094..4107).25" />
<Link Source="10354:[10268..10665).5" Target="10354:[10217..10242).2" />
<Link Source="10354:[10268..10665).5" Target="10060:[5593..5606).2" />
<Link Source="10354:[10268..10665).5" Target="10345:[30829..30851).1" />
<Link Source="10345:[30829..30852).2" Target="10345:[29004..29025).2" />
<Link Source="10345:[30883..31655).4" Target="10345:[30223..30867).3" />
<Link Source="10345:[30883..31655).4" Target="10354:[10268..10665).5" />
<Link Source="10345:[29457..29477).2" Target="10345:[30223..30867).3" />
<Link Source="10354:[4919..5009).19" Target="10345:[29040..29059).2" />
<Link Source="10354:[4919..5009).19" Target="10345:[29457..29477).2" />
<Link Source="10354:[4094..4107).27" Target="10354:[4919..5009).19" />
<Link Source="10354:[4094..4107).27" Target="10354:[10268..10665).5" />
<Link Source="10354:[4094..4107).27" Target="10345:[29457..29477).2" />
<Link Source="10345:[29452..29715).7" Target="10354:[4094..4107).27" />
<Link Source="10345:[29452..29715).7" Target="10345:[30223..30867).3" />
<Link Source="10312:[4685..4699).5" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).13" Target="10354:[11244..11285).7" />
<Link Source="10354:[3684..3818).13" Target="10312:[4685..4699).5" />
<Link Source="10354:[3720..3803).93" Target="10354:[3684..3818).13" />
<Link Source="10354:[3720..3803).93" Target="10354:[10268..10665).5" />
<Link Source="10354:[3720..3803).93" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).93" Target="10312:[4685..4699).5" />
<Link Source="10312:[4680..4787).9" Target="10354:[3720..3803).93" />
<Link Source="10312:[4680..4787).9" Target="10345:[30223..30867).3" />
<Link Source="10312:[4749..4764).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[4749..4764).2" Target="10312:[4680..4787).9" />
<Link Source="10312:[4826..5058).21" Target="10312:[3782..3803).2" />
<Link Source="10312:[4826..5058).21" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).21" Target="10345:[30223..30867).3" />
<Link Source="10312:[4826..5058).22" Target="10345:[30223..30867).3" />
<Link Source="10312:[5087..5101).2" Target="10312:[4749..4764).2" />
<Link Source="10312:[5087..5101).2" Target="10312:[6110..6220).2" />
<Link Source="10312:[1585..1724).18" Target="10353:[7556..7642).7" />
<Link Source="10319:[43504..43546).5" Target="10319:[41889..41914).2" />
<Link Source="10319:[43504..43546).5" Target="10319:[20515..20674).2" />
<Link Source="10319:[43504..43546).6" Target="10319:[41849..41874).2" />
<Link Source="10319:[43504..43546).6" Target="10319:[20515..20674).2" />
<Link Source="10319:[43504..43546).8" Target="10319:[43504..43546).5" />
<Link Source="10319:[43504..43546).8" Target="10319:[43504..43546).6" />
<Link Source="10319:[43504..43546).8" Target="10060:[6814..6920).9" />
<Link Source="10319:[43504..43546).8" Target="10354:[10268..10665).5" />
<Link Source="10319:[43504..43546).8" Target="10319:[20515..20674).2" />
<Link Source="10319:[43562..43590).3" Target="10319:[20515..20674).2" />
<Link Source="10319:[43799..44676).7" Target="10319:[20515..20674).2" />
<Link Source="10319:[43799..44676).8" Target="10319:[42029..42063).2" />
<Link Source="10319:[43799..44676).8" Target="10319:[43799..44676).7" />
<Link Source="10319:[43799..44676).8" Target="10319:[20515..20674).2" />
<Link Source="10319:[43799..44676).9" Target="10354:[11244..11285).7" />
<Link Source="10319:[43799..44676).9" Target="10319:[20515..20674).2" />
<Link Source="10319:[43853..43873).2" Target="10319:[20515..20674).2" />
<Link Source="10319:[41088..41107).2" Target="10319:[43799..44676).9" />
<Link Source="10319:[41088..41107).2" Target="10319:[43853..43873).2" />
<Link Source="10319:[41138..41158).2" Target="10319:[43853..43873).2" />
<Link Source="10354:[4919..5009).21" Target="10319:[41088..41107).2" />
<Link Source="10354:[4919..5009).21" Target="10319:[41138..41158).2" />
<Link Source="10354:[4962..4966).21" Target="10319:[41138..41158).2" />
<Link Source="10354:[4094..4107).29" Target="10354:[4919..5009).21" />
<Link Source="10354:[4094..4107).29" Target="10319:[43504..43546).8" />
<Link Source="10354:[4094..4107).29" Target="10354:[4962..4966).21" />
<Link Source="10319:[41133..41220).3" Target="10354:[4094..4107).29" />
<Link Source="10319:[41133..41220).3" Target="10319:[43853..43873).2" />
<Link Source="10319:[41254..41268).2" Target="10319:[43853..43873).2" />
<Link Source="10354:[4525..4595).3" Target="10319:[41088..41107).2" />
<Link Source="10354:[4525..4595).3" Target="10319:[41254..41268).2" />
<Link Source="10354:[4561..4580).3" Target="10354:[4525..4595).3" />
<Link Source="10354:[4561..4580).3" Target="10319:[43504..43546).8" />
<Link Source="10354:[4561..4580).3" Target="10319:[41254..41268).2" />
<Link Source="10319:[41236..41680).5" Target="10354:[4561..4580).3" />
<Link Source="10319:[41236..41680).5" Target="10319:[43853..43873).2" />
<Link Source="10319:[41302..41665).2" Target="10319:[41236..41680).5" />
<Link Source="10319:[41302..41665).2" Target="10319:[43504..43546).8" />
<Link Source="10319:[41406..41476).1" Target="10319:[41236..41680).5" />
<Link Source="10319:[41406..41476).1" Target="10319:[43504..43546).8" />
<Link Source="10319:[41406..41476).1" Target="EXTERNAL" />
<Link Source="10319:[41406..41476).1" Target="10319:[41302..41665).2" />
<Link Source="10319:[41464..41476).1" Target="10319:[41406..41476).1" />
<Link Source="10319:[44692..45392).3" Target="10319:[43562..43590).3" />
<Link Source="10319:[44692..45392).3" Target="10319:[20515..20674).2" />
<Link Source="10319:[44751..44765).2" Target="10319:[44692..45392).3" />
<Link Source="10319:[44785..44930).14" Target="10319:[42089..42141).2" />
<Link Source="10319:[44785..44930).14" Target="10319:[44692..45392).3" />
<Link Source="10319:[44785..44930).15" Target="10319:[44692..45392).3" />
<Link Source="10319:[44785..44930).17" Target="10319:[41849..41874).2" />
<Link Source="10319:[44785..44930).17" Target="10319:[44692..45392).3" />
<Link Source="10319:[44785..44930).18" Target="10319:[41889..41914).2" />
<Link Source="10319:[44785..44930).18" Target="10319:[44692..45392).3" />
<Link Source="10319:[44785..44930).19" Target="10319:[41983..42014).2" />
<Link Source="10319:[44785..44930).19" Target="10319:[44692..45392).3" />
<Link Source="10319:[44785..44930).20" Target="10319:[44751..44765).2" />
<Link Source="10319:[44785..44930).20" Target="10319:[44692..45392).3" />
<Link Source="10319:[44785..44930).21" Target="10319:[42029..42063).2" />
<Link Source="10319:[44785..44930).21" Target="10319:[44692..45392).3" />
<Link Source="10319:[44785..44930).22" Target="10319:[51282..51325).2" />
<Link Source="10319:[44785..44930).22" Target="10319:[44692..45392).3" />
<Link Source="10319:[44801..44929).2" Target="10319:[44692..45392).3" />
<Link Source="10319:[84201..84218).2" Target="10319:[44785..44930).14" />
<Link Source="10319:[84201..84218).2" Target="10319:[44801..44929).2" />
<Link Source="10319:[84233..84242).2" Target="10319:[44785..44930).15" />
<Link Source="10319:[84233..84242).2" Target="10319:[44801..44929).2" />
<Link Source="10319:[84257..84273).2" Target="10319:[44785..44930).17" />
<Link Source="10319:[84257..84273).2" Target="10319:[44801..44929).2" />
<Link Source="10319:[84288..84313).2" Target="10319:[44785..44930).18" />
<Link Source="10319:[84288..84313).2" Target="10319:[44801..44929).2" />
<Link Source="10319:[84328..84359).2" Target="10319:[44785..44930).19" />
<Link Source="10319:[84328..84359).2" Target="10319:[44801..44929).2" />
<Link Source="10319:[84374..84391).2" Target="10319:[44785..44930).20" />
<Link Source="10319:[84374..84391).2" Target="10319:[44801..44929).2" />
<Link Source="10319:[84406..84447).2" Target="10319:[44785..44930).21" />
<Link Source="10319:[84406..84447).2" Target="10319:[44801..44929).2" />
<Link Source="10319:[84462..84508).2" Target="10319:[44785..44930).22" />
<Link Source="10319:[84462..84508).2" Target="10319:[44801..44929).2" />
<Link Source="10319:[84124..109887).2" Target="10319:[41732..45579).2" />
<Link Source="10319:[84124..109887).2" Target="10319:[44801..44929).2" />
<Link Source="10319:[84534..84675).13" Target="10319:[84201..84218).2" />
<Link Source="10319:[84534..84675).13" Target="10319:[44801..44929).2" />
<Link Source="10319:[84534..84675).14" Target="10319:[84233..84242).2" />
<Link Source="10319:[84534..84675).14" Target="10319:[44801..44929).2" />
<Link Source="10319:[84534..84675).15" Target="10319:[84257..84273).2" />
<Link Source="10319:[84534..84675).15" Target="10319:[44801..44929).2" />
<Link Source="10319:[84534..84675).16" Target="10319:[84288..84313).2" />
<Link Source="10319:[84534..84675).16" Target="10319:[44801..44929).2" />
<Link Source="10319:[84534..84675).17" Target="10319:[84328..84359).2" />
<Link Source="10319:[84534..84675).17" Target="10319:[44801..44929).2" />
<Link Source="10319:[84534..84675).18" Target="10319:[84374..84391).2" />
<Link Source="10319:[84534..84675).18" Target="10319:[44801..44929).2" />
<Link Source="10319:[84534..84675).19" Target="10319:[84406..84447).2" />
<Link Source="10319:[84534..84675).19" Target="10319:[44801..44929).2" />
<Link Source="10319:[84534..84675).20" Target="10319:[84462..84508).2" />
<Link Source="10319:[84534..84675).20" Target="10319:[44801..44929).2" />
<Link Source="10319:[84550..84674).2" Target="10319:[44801..44929).2" />
<Link Source="10319:[84907..109876).12" Target="10319:[84534..84675).13" />
<Link Source="10319:[84907..109876).12" Target="10319:[84550..84674).2" />
<Link Source="10319:[84907..109876).13" Target="10319:[84534..84675).14" />
<Link Source="10319:[84907..109876).13" Target="10319:[84550..84674).2" />
<Link Source="10319:[84907..109876).14" Target="10319:[84534..84675).15" />
<Link Source="10319:[84907..109876).14" Target="10319:[84550..84674).2" />
<Link Source="10319:[84907..109876).15" Target="10319:[84534..84675).16" />
<Link Source="10319:[84907..109876).15" Target="10319:[84550..84674).2" />
<Link Source="10319:[84907..109876).16" Target="10319:[84534..84675).17" />
<Link Source="10319:[84907..109876).16" Target="10319:[84550..84674).2" />
<Link Source="10319:[84907..109876).17" Target="10319:[84534..84675).18" />
<Link Source="10319:[84907..109876).17" Target="10319:[84550..84674).2" />
<Link Source="10319:[84907..109876).18" Target="10319:[84534..84675).19" />
<Link Source="10319:[84907..109876).18" Target="10319:[84550..84674).2" />
<Link Source="10319:[84907..109876).19" Target="10319:[84534..84675).20" />
<Link Source="10319:[84907..109876).19" Target="10319:[84550..84674).2" />
<Link Source="10319:[84907..109876).20" Target="10319:[84124..109887).2" />
<Link Source="10319:[84907..109876).20" Target="10319:[84550..84674).2" />
<Link Source="10319:[85320..85348).5" Target="10319:[84550..84674).2" />
<Link Source="10319:[85320..85348).6" Target="10319:[84907..109876).14" />
<Link Source="10319:[85320..85348).6" Target="10319:[85320..85348).5" />
<Link Source="10319:[85320..85348).6" Target="10319:[84550..84674).2" />
<Link Source="10319:[85366..85400).5" Target="10319:[84550..84674).2" />
<Link Source="10319:[85366..85400).6" Target="10319:[84907..109876).15" />
<Link Source="10319:[85366..85400).6" Target="10319:[85366..85400).5" />
<Link Source="10319:[85366..85400).6" Target="10319:[84550..84674).2" />
<Link Source="10319:[85434..85448).2" Target="10319:[84550..84674).2" />
<Link Source="10319:[85467..85484).3" Target="10319:[84550..84674).2" />
<Link Source="10319:[85508..85528).2" Target="10319:[84550..84674).2" />
<Link Source="10354:[4962..4966).22" Target="10319:[85508..85528).2" />
<Link Source="10319:[104874..105336).4" Target="10319:[43504..43546).8" />
<Link Source="10319:[104874..105336).4" Target="EXTERNAL" />
<Link Source="10319:[105368..106708).2" Target="10319:[84907..109876).16" />
<Link Source="10319:[105368..106708).2" Target="10319:[43504..43546).8" />
<Link Source="10319:[84691..84861).3" Target="10319:[43504..43546).8" />
<Link Source="10319:[84691..84861).3" Target="10319:[105368..106708).2" />
<Link Source="10319:[84691..84861).3" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).3" Target="10319:[44801..44929).2" />
<Link Source="10319:[44948..45377).3" Target="10319:[43504..43546).8" />
<Link Source="10319:[44948..45377).3" Target="10319:[105368..106708).2" />
<Link Source="10319:[44948..45377).3" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).3" Target="10319:[44692..45392).3" />
<Link Source="10319:[45032..45114).1" Target="10319:[41929..41968).2" />
<Link Source="10319:[45032..45114).1" Target="10319:[44948..45377).3" />
<Link Source="10319:[45136..45358).1" Target="10319:[45032..45114).1" />
<Link Source="10319:[45136..45358).1" Target="EXTERNAL" />
<Link Source="10319:[45136..45358).1" Target="10319:[44948..45377).3" />
<Link Source="10319:[45136..45358).2" Target="10319:[45032..45114).1" />
<Link Source="10319:[45136..45358).2" Target="10319:[44948..45377).3" />
<Link Source="10319:[45408..45421).2" Target="10319:[20515..20674).2" />
<Link Source="10354:[11428..11440).3" Target="10319:[45408..45421).2" />
<Link Source="10354:[3966..3980).5" Target="10354:[11428..11440).3" />
<Link Source="10354:[11428..11441).3" Target="10319:[45408..45421).2" />
<Link Source="10354:[11455..11538).7" Target="10319:[45408..45421).2" />
<Link Source="10319:[45408..45422).2" Target="10319:[20515..20674).2" />
<Link Source="10319:[45505..45551).2" Target="10319:[20515..20674).2" />
<Link Source="10286:[9966..10197).2" Target="10319:[41732..45579).2" />
<Link Source="10286:[9966..10197).2" Target="10319:[45505..45551).2" />
<Link Source="10286:[10121..10185).2" Target="10319:[45505..45551).2" />
<Link Source="10286:[9029..9954).2" Target="10286:[9966..10197).2" />
<Link Source="10286:[9029..9954).2" Target="10286:[10121..10185).2" />
<Link Source="10319:[45443..45567).2" Target="10319:[20515..20674).2" />
<Link Source="10287:[2377..2471).3" Target="10319:[43504..43546).8" />
<Link Source="10287:[2377..2471).3" Target="10319:[45443..45567).2" />
<Link Source="10287:[2582..2656).1" Target="10319:[43504..43546).8" />
<Link Source="10287:[1144..1157).1" Target="10319:[43504..43546).8" />
<Link Source="10287:[1144..1157).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1159..1181).1" Target="10319:[45136..45358).2" />
<Link Source="10287:[1159..1181).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1092..1409).1" Target="10319:[43504..43546).8" />
<Link Source="10287:[1092..1409).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1215..1253).1" Target="10287:[1144..1157).1" />
<Link Source="10287:[1215..1253).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1271..1302).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1271..1291).1" Target="10287:[1271..1302).1" />
<Link Source="10287:[1271..1291).1" Target="10287:[1092..1409).1" />
<Link Source="10287:[1271..1291).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1320..1327).1" Target="10287:[1144..1157).1" />
<Link Source="10287:[1320..1327).1" Target="10287:[1092..1409).1" />
<Link Source="10287:[1320..1327).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1355..1373).1" Target="10287:[1159..1181).1" />
<Link Source="10287:[1355..1373).1" Target="10287:[1092..1409).1" />
<Link Source="10287:[1355..1373).1" Target="10287:[2582..2656).1" />
<Link Source="10319:[15383..15396).1" Target="10319:[13863..13947).1" />
<Link Source="10287:[1609..1643).1" Target="10319:[43504..43546).8" />
<Link Source="10287:[1609..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[1609..1643).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[1271..1291).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[1271..1302).1" />
<Link Source="10287:[1612..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10319:[15379..15933).1" Target="10287:[1612..1643).1" />
<Link Source="10319:[15379..15933).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15418..15432).1" Target="10319:[13863..13947).1" />
<Link Source="10287:[1680..1716).2" Target="10319:[43504..43546).8" />
<Link Source="10287:[1680..1716).2" Target="10319:[15418..15432).1" />
<Link Source="10287:[1683..1716).3" Target="10287:[1680..1716).2" />
<Link Source="10287:[1683..1716).3" Target="10287:[1320..1327).1" />
<Link Source="10287:[1683..1716).3" Target="10319:[45136..45358).2" />
<Link Source="10287:[1683..1716).3" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).3" Target="10319:[15418..15432).1" />
<Link Source="10319:[15379..15933).2" Target="10287:[1683..1716).3" />
<Link Source="10319:[15379..15933).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15461..15474).1" Target="10319:[13863..13947).1" />
<Link Source="10287:[1535..1573).2" Target="10319:[43504..43546).8" />
<Link Source="10287:[1535..1573).2" Target="10319:[15461..15474).1" />
<Link Source="10287:[1538..1573).4" Target="10287:[1535..1573).2" />
<Link Source="10287:[1538..1573).4" Target="10287:[1320..1327).1" />
<Link Source="10287:[1538..1573).4" Target="10319:[15461..15474).1" />
<Link Source="10319:[15379..15933).3" Target="10287:[1538..1573).4" />
<Link Source="10319:[15379..15933).3" Target="10319:[13863..13947).1" />
<Link Source="10319:[15379..15933).5" Target="10319:[14983..15029).1" />
<Link Source="10319:[15379..15933).5" Target="10319:[13863..13947).1" />
<Link Source="10319:[15436..15495).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[51410..51423).1" Target="10319:[15379..15933).3" />
<Link Source="10319:[51410..51423).1" Target="10319:[15436..15495).1" />
<Link Source="10319:[51425..51471).1" Target="10319:[15379..15933).5" />
<Link Source="10319:[51425..51471).1" Target="10319:[15436..15495).1" />
<Link Source="10319:[51497..51645).1" Target="10319:[51410..51423).1" />
<Link Source="10319:[51497..51645).1" Target="10319:[45136..45358).2" />
<Link Source="10319:[51497..51645).1" Target="EXTERNAL" />
<Link Source="10319:[51497..51645).1" Target="10319:[15436..15495).1" />
<Link Source="10319:[51566..51630).1" Target="10319:[51425..51471).1" />
<Link Source="10319:[51566..51630).1" Target="10319:[51497..51645).1" />
<Link Source="10319:[15379..15933).7" Target="10319:[15379..15933).2" />
<Link Source="10319:[15379..15933).7" Target="10319:[51566..51630).1" />
<Link Source="10319:[15379..15933).7" Target="10319:[13863..13947).1" />
<Link Source="10319:[15379..15933).8" Target="10319:[15379..15933).1" />
<Link Source="10319:[15379..15933).8" Target="10319:[15379..15933).7" />
<Link Source="10319:[15379..15933).8" Target="10319:[13863..13947).1" />
<Link Source="10319:[15548..15561).1" Target="10319:[15379..15933).8" />
<Link Source="10319:[15544..15884).1" Target="10319:[15548..15561).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15379..15933).8" />
<Link Source="10319:[15904..15918).1" Target="10319:[43504..43546).8" />
<Link Source="10319:[15904..15918).1" Target="10319:[15379..15933).8" />
<Link Source="10319:[13962..14050).1" Target="10319:[15904..15918).1" />
<Link Source="10319:[13962..14050).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13962..14050).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).3" Target="10319:[13685..13708).1" />
<Link Source="10319:[13962..14050).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).4" Target="10319:[13737..13783).1" />
<Link Source="10319:[13962..14050).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13969..14029).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[51762..51815).2" Target="10319:[13962..14050).1" />
<Link Source="10319:[51762..51815).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51817..51842).2" Target="10319:[13962..14050).2" />
<Link Source="10319:[51817..51842).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51844..51861).2" Target="10319:[13962..14050).3" />
<Link Source="10319:[51844..51861).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51863..51909).2" Target="10319:[13962..14050).4" />
<Link Source="10319:[51863..51909).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51698..52285).2" Target="10319:[13647..14061).1" />
<Link Source="10319:[51698..52285).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51939..51953).2" Target="10319:[13969..14029).1" />
<Link Source="10287:[1680..1716).3" Target="10319:[51762..51815).2" />
<Link Source="10287:[1680..1716).3" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).3" Target="10287:[1680..1716).3" />
<Link Source="10319:[51935..52244).3" Target="10319:[13969..14029).1" />
<Link Source="10319:[51987..52009).1" Target="10319:[51935..52244).3" />
<Link Source="10319:[52096..52120).1" Target="10319:[51935..52244).3" />
<Link Source="10287:[1989..2197).1" Target="10319:[51762..51815).2" />
<Link Source="10287:[1989..2197).1" Target="10319:[52096..52120).1" />
<Link Source="10287:[2033..2081).1" Target="10287:[1989..2197).1" />
<Link Source="10287:[2033..2081).1" Target="10287:[1320..1327).1" />
<Link Source="10287:[2033..2081).1" Target="10319:[51566..51630).1" />
<Link Source="10287:[2033..2081).1" Target="EXTERNAL" />
<Link Source="10287:[2033..2081).1" Target="10319:[52096..52120).1" />
<Link Source="10287:[2152..2178).1" Target="10287:[1989..2197).1" />
<Link Source="10287:[2152..2178).1" Target="10287:[1355..1373).1" />
<Link Source="10287:[2152..2178).1" Target="10319:[52096..52120).1" />
<Link Source="10319:[52027..52229).1" Target="10287:[2152..2178).1" />
<Link Source="10319:[52027..52229).1" Target="10319:[51935..52244).3" />
<Link Source="10319:[52157..52170).1" Target="10319:[51935..52244).3" />
<Link Source="10319:[52027..52229).3" Target="10319:[52157..52170).1" />
<Link Source="10319:[52027..52229).3" Target="10319:[51935..52244).3" />
<Link Source="10319:[52027..52229).5" Target="10319:[51987..52009).1" />
<Link Source="10319:[52027..52229).5" Target="10319:[51935..52244).3" />
<Link Source="10319:[52027..52229).6" Target="10319:[51817..51842).2" />
<Link Source="10319:[52027..52229).6" Target="10319:[51935..52244).3" />
<Link Source="10319:[52027..52229).7" Target="10319:[51844..51861).2" />
<Link Source="10319:[52027..52229).7" Target="10319:[51935..52244).3" />
<Link Source="10319:[52027..52229).8" Target="10319:[51863..51909).2" />
<Link Source="10319:[52027..52229).8" Target="10319:[51935..52244).3" />
<Link Source="10319:[52145..52227).1" Target="10319:[51935..52244).3" />
<Link Source="10319:[53231..53244).1" Target="10319:[52027..52229).3" />
<Link Source="10319:[53231..53244).1" Target="10319:[52145..52227).1" />
<Link Source="10319:[53246..53267).1" Target="10319:[52027..52229).5" />
<Link Source="10319:[53246..53267).1" Target="10319:[52145..52227).1" />
<Link Source="10319:[53269..53294).1" Target="10319:[52027..52229).6" />
<Link Source="10319:[53269..53294).1" Target="10319:[52145..52227).1" />
<Link Source="10319:[53296..53313).1" Target="10319:[52027..52229).7" />
<Link Source="10319:[53296..53313).1" Target="10319:[52145..52227).1" />
<Link Source="10319:[53315..53361).1" Target="10319:[52027..52229).8" />
<Link Source="10319:[53315..53361).1" Target="10319:[52145..52227).1" />
<Link Source="10319:[53204..54344).1" Target="10319:[51698..52285).2" />
<Link Source="10319:[53204..54344).1" Target="10319:[52145..52227).1" />
<Link Source="10319:[53387..53416).1" Target="10319:[52145..52227).1" />
<Link Source="10319:[53387..53416).2" Target="10319:[53296..53313).1" />
<Link Source="10319:[53387..53416).2" Target="10319:[53387..53416).1" />
<Link Source="10319:[53387..53416).2" Target="10319:[52145..52227).1" />
<Link Source="10319:[53430..53464).1" Target="10319:[52145..52227).1" />
<Link Source="10319:[53430..53464).2" Target="10319:[53269..53294).1" />
<Link Source="10319:[53430..53464).2" Target="10319:[53430..53464).1" />
<Link Source="10319:[53430..53464).2" Target="10319:[52145..52227).1" />
<Link Source="10319:[53480..54276).1" Target="10319:[53231..53244).1" />
<Link Source="10319:[53480..54276).1" Target="10319:[51566..51630).1" />
<Link Source="10319:[53480..54276).1" Target="EXTERNAL" />
<Link Source="10319:[53480..54276).1" Target="10319:[52145..52227).1" />
<Link Source="10319:[53549..53577).1" Target="10319:[53231..53244).1" />
<Link Source="10319:[53549..53577).1" Target="10319:[53480..54276).1" />
<Link Source="10319:[53595..53649).1" Target="10319:[53315..53361).1" />
<Link Source="10319:[53595..53649).1" Target="10319:[53480..54276).1" />
<Link Source="10319:[53595..53649).2" Target="10319:[53549..53577).1" />
<Link Source="10319:[53595..53649).2" Target="10319:[53595..53649).1" />
<Link Source="10319:[53595..53649).2" Target="10319:[51566..51630).1" />
<Link Source="10319:[53595..53649).2" Target="10319:[53480..54276).1" />
<Link Source="10319:[53667..53699).1" Target="10319:[53595..53649).2" />
<Link Source="10319:[53667..53699).1" Target="10319:[53480..54276).1" />
<Link Source="10319:[53717..54227).1" Target="10319:[53480..54276).1" />
<Link Source="10319:[53717..54227).2" Target="10319:[53667..53699).1" />
<Link Source="10319:[53717..54227).2" Target="10319:[53717..54227).1" />
<Link Source="10319:[53717..54227).2" Target="10319:[53480..54276).1" />
<Link Source="10319:[53864..53903).1" Target="10319:[53717..54227).2" />
<Link Source="10319:[53876..53880).1" Target="10319:[53204..54344).1" />
<Link Source="10319:[53876..53880).1" Target="10319:[53864..53903).1" />
<Link Source="10319:[53876..53880).1" Target="10319:[53717..54227).2" />
<Link Source="10319:[53882..53893).1" Target="10319:[53269..53294).1" />
<Link Source="10319:[53882..53893).1" Target="10319:[53864..53903).1" />
<Link Source="10319:[53882..53893).1" Target="10319:[53717..54227).2" />
<Link Source="10319:[53895..53901).1" Target="10319:[53296..53313).1" />
<Link Source="10319:[53895..53901).1" Target="10319:[53864..53903).1" />
<Link Source="10319:[53895..53901).1" Target="10319:[53717..54227).2" />
<Link Source="10319:[53925..54208).1" Target="10319:[53667..53699).1" />
<Link Source="10319:[53925..54208).1" Target="10319:[53717..54227).2" />
<Link Source="10319:[53925..54208).2" Target="10319:[53717..54227).2" />
<Link Source="10319:[53925..54208).4" Target="10319:[53864..53903).1" />
<Link Source="10319:[53925..54208).4" Target="10319:[53717..54227).2" />
<Link Source="10319:[53925..54208).7" Target="10319:[53925..54208).1" />
<Link Source="10319:[53925..54208).7" Target="10319:[53925..54208).2" />
<Link Source="10319:[53925..54208).7" Target="10319:[53925..54208).4" />
<Link Source="10319:[53925..54208).7" Target="10319:[53595..53649).2" />
<Link Source="10319:[53925..54208).7" Target="10319:[53876..53880).1" />
<Link Source="10319:[53925..54208).7" Target="10319:[53882..53893).1" />
<Link Source="10319:[53925..54208).7" Target="10319:[53895..53901).1" />
<Link Source="10319:[53925..54208).7" Target="10319:[53717..54227).2" />
<Link Source="10286:[21504..21529).1" Target="10319:[53925..54208).7" />
<Link Source="10286:[21504..21529).1" Target="10319:[53925..54208).2" />
<Link Source="10286:[21531..21544).1" Target="10319:[53925..54208).7" />
<Link Source="10286:[21531..21544).1" Target="10319:[53925..54208).2" />
<Link Source="10286:[21546..21561).1" Target="10319:[53925..54208).7" />
<Link Source="10286:[21546..21561).1" Target="10319:[53925..54208).2" />
<Link Source="10286:[21563..21583).1" Target="10319:[53925..54208).7" />
<Link Source="10286:[21563..21583).1" Target="10319:[53925..54208).2" />
<Link Source="10286:[21462..21711).1" Target="10319:[53925..54208).7" />
<Link Source="10286:[21462..21711).1" Target="10319:[53925..54208).2" />
<Link Source="10286:[21609..21700).1" Target="10286:[21504..21529).1" />
<Link Source="10286:[21609..21700).1" Target="10319:[53925..54208).2" />
<Link Source="10286:[21609..21700).2" Target="10286:[21531..21544).1" />
<Link Source="10286:[21609..21700).2" Target="10319:[53925..54208).2" />
<Link Source="10286:[21609..21700).3" Target="10286:[21546..21561).1" />
<Link Source="10286:[21609..21700).3" Target="10319:[53925..54208).2" />
<Link Source="10286:[21609..21700).4" Target="10286:[21563..21583).1" />
<Link Source="10286:[21609..21700).4" Target="10319:[53925..54208).2" />
<Link Source="10286:[21609..21699).1" Target="10319:[53925..54208).2" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21700).1" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21700).2" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21700).3" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21700).4" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21462..21711).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[22071..22084).1" />
<Link Source="10286:[22156..22600).1" Target="10319:[53925..54208).7" />
<Link Source="10286:[22156..22600).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22421..22557).1" Target="10286:[22044..22069).1" />
<Link Source="10286:[22421..22557).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).2" Target="10286:[22071..22084).1" />
<Link Source="10286:[22421..22557).2" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).3" Target="10286:[22086..22108).1" />
<Link Source="10286:[22421..22557).3" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).4" Target="10286:[22110..22130).1" />
<Link Source="10286:[22421..22557).4" Target="10286:[22156..22600).1" />
<Link Source="10286:[22493..22522).1" Target="10286:[22156..22600).1" />
<Link Source="10307:[1439..1480).1" Target="10286:[22002..22611).1" />
<Link Source="10307:[1439..1480).1" Target="10286:[22493..22522).1" />
<Link Source="10307:[1445..1478).1" Target="10307:[1439..1480).1" />
<Link Source="10307:[1445..1478).1" Target="10319:[53925..54208).7" />
<Link Source="10307:[1445..1478).1" Target="10286:[22493..22522).1" />
<Link Source="10286:[22421..22557).5" Target="10307:[1445..1478).1" />
<Link Source="10286:[22421..22557).5" Target="10286:[22156..22600).1" />
<Link Source="10286:[22524..22543).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[15519..15926).1" Target="10286:[22002..22611).1" />
<Link Source="10286:[15519..15926).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15568..15597).1" Target="10286:[22524..22543).1" />
<Link Source="10307:[1439..1480).2" Target="10286:[15519..15926).1" />
<Link Source="10307:[1439..1480).2" Target="10286:[15568..15597).1" />
<Link Source="10307:[1445..1478).2" Target="10307:[1439..1480).2" />
<Link Source="10307:[1445..1478).2" Target="10319:[53925..54208).7" />
<Link Source="10307:[1445..1478).2" Target="10286:[15568..15597).1" />
<Link Source="10286:[15555..15598).1" Target="10307:[1445..1478).2" />
<Link Source="10286:[15555..15598).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15616..15690).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15616..15690).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15616..15690).2" Target="10286:[15555..15598).1" />
<Link Source="10286:[15616..15690).2" Target="10319:[53925..54208).7" />
<Link Source="10286:[15616..15690).2" Target="EXTERNAL" />
<Link Source="10286:[15616..15690).2" Target="10286:[22524..22543).1" />
<Link Source="10286:[15715..15910).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15715..15910).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15708..15911).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15708..15911).1" Target="10319:[53925..54208).7" />
<Link Source="10286:[15708..15911).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[22421..22557).7" Target="10286:[15708..15911).1" />
<Link Source="10286:[22421..22557).7" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).9" Target="10286:[22002..22611).1" />
<Link Source="10286:[22421..22557).9" Target="10319:[53925..54208).7" />
<Link Source="10286:[22421..22557).9" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22556).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[23056..23081).1" Target="10286:[22421..22557).1" />
<Link Source="10286:[23056..23081).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23096..23109).1" Target="10286:[22421..22557).2" />
<Link Source="10286:[23096..23109).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23124..23146).1" Target="10286:[22421..22557).3" />
<Link Source="10286:[23124..23146).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23161..23181).1" Target="10286:[22421..22557).4" />
<Link Source="10286:[23161..23181).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23196..23220).1" Target="10286:[22421..22557).5" />
<Link Source="10286:[23196..23220).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23235..23266).1" Target="10286:[22421..22557).7" />
<Link Source="10286:[23235..23266).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23281..23301).1" Target="10286:[22421..22557).9" />
<Link Source="10286:[23281..23301).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23327..23364).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23327..23364).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23380..23684).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23380..23684).1" Target="10286:[23327..23364).1" />
<Link Source="10286:[23380..23684).1" Target="EXTERNAL" />
<Link Source="10286:[23380..23684).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23893..24026).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23893..24026).1" Target="10286:[23327..23364).1" />
<Link Source="10286:[23893..24026).1" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[24450..24529).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).2" Target="10286:[23235..23266).1" />
<Link Source="10286:[24450..24529).2" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[24450..24529).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[24450..24529).2" />
<Link Source="10286:[24450..24529).3" Target="10286:[23327..23364).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[22421..22556).1" />
<Link Source="10286:[24545..24641).1" Target="10286:[23161..23181).1" />
<Link Source="10286:[24545..24641).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24655..25349).1" Target="10286:[24545..24641).1" />
<Link Source="10286:[24655..25349).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).1" Target="10286:[23056..23081).1" />
<Link Source="10286:[25365..25492).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).2" Target="10286:[24450..24529).3" />
<Link Source="10286:[25365..25492).2" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).3" Target="10286:[23124..23146).1" />
<Link Source="10286:[25365..25492).3" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).4" Target="10286:[23196..23220).1" />
<Link Source="10286:[25365..25492).4" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).5" Target="10286:[23281..23301).1" />
<Link Source="10286:[25365..25492).5" Target="10286:[22421..22556).1" />
<Link Source="10286:[25386..25491).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[26910..26935).1" Target="10286:[25365..25492).1" />
<Link Source="10286:[26910..26935).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26937..26950).1" Target="10286:[25365..25492).2" />
<Link Source="10286:[26937..26950).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26952..26974).1" Target="10286:[25365..25492).3" />
<Link Source="10286:[26952..26974).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26976..27000).1" Target="10286:[25365..25492).4" />
<Link Source="10286:[26976..27000).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27002..27022).1" Target="10286:[25365..25492).5" />
<Link Source="10286:[27002..27022).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27048..27088).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[26910..26935).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[27048..27088).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).1" Target="10286:[26937..26950).1" />
<Link Source="10286:[27104..27192).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).2" Target="10286:[26976..27000).1" />
<Link Source="10286:[27104..27192).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).3" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).1" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).2" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).3" />
<Link Source="10286:[27104..27192).5" Target="10286:[24450..24529).3" />
<Link Source="10286:[27104..27192).5" Target="10286:[25386..25491).1" />
<Link Source="10286:[27208..27236).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27250..27722).1" Target="10286:[27104..27192).5" />
<Link Source="10286:[27250..27722).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27738..27845).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[27208..27236).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[27738..27845).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27861..27873).1" Target="10286:[27104..27192).5" />
<Link Source="10286:[27861..27873).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26281..26812).1" Target="10286:[27861..27873).1" />
<Link Source="10286:[26281..26812).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[26450..26769).1" Target="10286:[24545..24641).1" />
<Link Source="10286:[26450..26769).1" Target="10286:[26281..26812).1" />
<Link Source="10286:[22421..22557).10" Target="10286:[22156..22600).1" />
<Link Source="10286:[21609..21700).5" Target="10319:[53925..54208).2" />
<Link Source="10319:[54247..54261).1" Target="10319:[53595..53649).2" />
<Link Source="10319:[54247..54261).1" Target="10319:[53480..54276).1" />
<Link Source="10319:[52034..52228).1" Target="10319:[51935..52244).3" />
<Link Source="10287:[2306..2328).3" Target="10319:[52027..52229).1" />
<Link Source="10287:[2306..2328).3" Target="10319:[52034..52228).1" />
<Link Source="10287:[2330..2343).3" Target="10319:[54247..54261).1" />
<Link Source="10287:[2330..2343).3" Target="10319:[52034..52228).1" />
<Link Source="10287:[2377..2471).5" Target="10287:[2330..2343).3" />
<Link Source="10287:[2377..2471).5" Target="10319:[52034..52228).1" />
<Link Source="10287:[2539..2781).18" Target="10287:[2306..2328).3" />
<Link Source="10287:[2539..2781).18" Target="10287:[2330..2343).3" />
<Link Source="10287:[2539..2781).22" Target="10287:[2539..2781).18" />
<Link Source="10287:[2539..2781).22" Target="10287:[2330..2343).3" />
<Link Source="10287:[2539..2781).22" Target="10286:[27104..27192).5" />
<Link Source="10287:[791..833).3" Target="10287:[2539..2781).22" />
<Link Source="10287:[791..833).3" Target="10287:[2330..2343).3" />
<Link Source="10319:[13969..14049).1" Target="25002:[4395..4432).1" />
<Link Source="10287:[1474..1497).2" Target="10287:[2330..2343).3" />
<Link Source="10287:[1474..1497).2" Target="10319:[13969..14049).1" />
<Link Source="10287:[1477..1497).2" Target="10287:[1474..1497).2" />
<Link Source="10287:[1477..1497).2" Target="10287:[2539..2781).22" />
<Link Source="10287:[1477..1497).2" Target="10319:[13969..14049).1" />
<Link Source="10076:[5223..5250).10" Target="10287:[1477..1497).2" />
<Link Source="10076:[5223..5250).10" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).10" Target="10076:[4989..5047).1" />
<Link Source="10077:[44231..44317).41" Target="10287:[1477..1497).2" />
<Link Source="10077:[44231..44317).41" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).49" Target="10287:[1477..1497).2" />
<Link Source="10077:[6212..6251).3" Target="10287:[1477..1497).2" />
<Link Source="10077:[6275..6566).4" Target="10287:[1477..1497).2" />
<Link Source="10077:[6275..6566).4" Target="10077:[39766..39774).2" />
<Link Source="10077:[6590..6839).3" Target="10287:[1477..1497).2" />
<Link Source="10077:[6590..6839).3" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).13" Target="10287:[1477..1497).2" />
<Link Source="10286:[1688..1781).13" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).32" Target="10286:[1688..1781).13" />
<Link Source="10298:[471..492).32" Target="10286:[1708..1779).2" />
<Link Source="10286:[1820..1963).13" Target="10287:[1477..1497).2" />
<Link Source="10286:[1820..1963).13" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).33" Target="10286:[1820..1963).13" />
<Link Source="10298:[471..492).33" Target="10286:[1840..1888).2" />
<Link Source="10319:[42478..42805).7" Target="10287:[1477..1497).2" />
<Link Source="10319:[42821..42938).17" Target="10287:[1477..1497).2" />
<Link Source="10319:[42839..42937).3" Target="10287:[1477..1497).2" />
<Link Source="10319:[63849..63870).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63849..63870).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63885..63919).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63885..63919).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63934..63945).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63934..63945).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63960..63969).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63960..63969).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63984..64009).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63984..64009).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63768..64484).3" Target="10287:[1477..1497).2" />
<Link Source="10319:[63768..64484).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[64035..64445).9" Target="10319:[42839..42937).3" />
<Link Source="10319:[64035..64445).10" Target="10319:[63885..63919).3" />
<Link Source="10319:[64035..64445).10" Target="10319:[64035..64445).9" />
<Link Source="10319:[64035..64445).10" Target="10319:[42839..42937).3" />
<Link Source="10319:[64461..64473).5" Target="10319:[42839..42937).3" />
<Link Source="10319:[42821..42938).23" Target="10319:[64461..64473).5" />
<Link Source="10319:[42821..42938).23" Target="10287:[1477..1497).2" />
<Link Source="10319:[42952..43079).7" Target="10287:[1477..1497).2" />
<Link Source="10319:[42952..43079).8" Target="10319:[42821..42938).23" />
<Link Source="10319:[42952..43079).8" Target="10319:[42952..43079).7" />
<Link Source="10319:[42952..43079).8" Target="10287:[1477..1497).2" />
<Link Source="10354:[11312..11328).4" Target="10287:[1477..1497).2" />
<Link Source="10354:[3684..3818).14" Target="10287:[1477..1497).2" />
<Link Source="10354:[3684..3818).14" Target="10354:[11312..11328).4" />
<Link Source="10354:[3720..3803).97" Target="10354:[3684..3818).14" />
<Link Source="10354:[3720..3803).97" Target="10287:[1477..1497).2" />
<Link Source="10354:[3720..3803).97" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).97" Target="10354:[11312..11328).4" />
<Link Source="10354:[3720..3803).98" Target="10354:[11312..11328).4" />
<Link Source="10354:[3720..3803).99" Target="10354:[3684..3818).14" />
<Link Source="10354:[3720..3803).99" Target="10287:[1477..1497).2" />
<Link Source="10354:[3720..3803).99" Target="10354:[3720..3803).98" />
<Link Source="10354:[3720..3803).99" Target="10354:[11312..11328).4" />
<Link Source="10354:[11299..11330).10" Target="10354:[3720..3803).97" />
<Link Source="10354:[11299..11330).10" Target="10287:[1477..1497).2" />
<Link Source="10319:[50330..50355).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[1108..1117).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[1222..1235).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[5830..5839).3" Target="10312:[1108..1117).3" />
<Link Source="10312:[5830..5839).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[5944..5957).3" Target="10312:[1222..1235).3" />
<Link Source="10312:[5944..5957).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[3730..3739).3" Target="10312:[5830..5839).3" />
<Link Source="10312:[3730..3739).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[3805..3818).3" Target="10312:[5944..5957).3" />
<Link Source="10312:[3805..3818).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[3905..3919).3" Target="10287:[1477..1497).2" />
<Link Source="10354:[3684..3818).15" Target="10287:[1477..1497).2" />
<Link Source="10354:[3684..3818).15" Target="10312:[3905..3919).3" />
<Link Source="10354:[3720..3803).105" Target="10354:[3684..3818).15" />
<Link Source="10354:[3720..3803).105" Target="10287:[1477..1497).2" />
<Link Source="10354:[3720..3803).105" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).105" Target="10312:[3905..3919).3" />
<Link Source="10354:[3720..3803).106" Target="10312:[3905..3919).3" />
<Link Source="10354:[3720..3803).107" Target="10354:[3684..3818).15" />
<Link Source="10354:[3720..3803).107" Target="10287:[1477..1497).2" />
<Link Source="10354:[3720..3803).107" Target="10354:[3720..3803).106" />
<Link Source="10354:[3720..3803).107" Target="10312:[3905..3919).3" />
<Link Source="10312:[3892..3921).7" Target="10354:[3720..3803).105" />
<Link Source="10312:[3892..3921).7" Target="10287:[1477..1497).2" />
<Link Source="10312:[3935..3968).9" Target="10312:[5830..5839).3" />
<Link Source="10312:[3935..3968).9" Target="10287:[1477..1497).2" />
<Link Source="10312:[3948..3966).3" Target="10287:[1477..1497).2" />
<Link Source="10353:[4698..4724).6" Target="10312:[3935..3968).9" />
<Link Source="10353:[4698..4724).6" Target="10312:[3948..3966).3" />
<Link Source="10353:[4750..4847).11" Target="10353:[4698..4724).6" />
<Link Source="10353:[4750..4847).11" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).11" Target="10312:[3948..3966).3" />
<Link Source="10353:[4863..5000).21" Target="10353:[4698..4724).6" />
<Link Source="10353:[4863..5000).21" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).21" Target="10312:[3948..3966).3" />
<Link Source="10353:[4863..5000).22" Target="10312:[3948..3966).3" />
<Link Source="10353:[5079..5183).11" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).11" Target="10312:[3948..3966).3" />
<Link Source="10353:[5197..5323).16" Target="10353:[4698..4724).6" />
<Link Source="10353:[5197..5323).16" Target="10353:[5079..5183).11" />
<Link Source="10353:[5197..5323).16" Target="10312:[3948..3966).3" />
<Link Source="10353:[5485..5759).31" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).31" Target="10312:[3948..3966).3" />
<Link Source="10353:[5485..5759).32" Target="10353:[4698..4724).6" />
<Link Source="10353:[5485..5759).32" Target="10353:[5485..5759).31" />
<Link Source="10353:[5485..5759).32" Target="10312:[3948..3966).3" />
<Link Source="10353:[5485..5759).33" Target="10312:[3948..3966).3" />
<Link Source="10353:[5775..5979).21" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).21" Target="10312:[3948..3966).3" />
<Link Source="10353:[5775..5979).23" Target="10353:[4698..4724).6" />
<Link Source="10353:[5775..5979).23" Target="10353:[5775..5979).21" />
<Link Source="10353:[5775..5979).23" Target="10312:[3948..3966).3" />
<Link Source="10353:[5995..6029).16" Target="10353:[5775..5979).23" />
<Link Source="10353:[5995..6029).16" Target="10312:[3948..3966).3" />
<Link Source="10353:[6002..6028).6" Target="10312:[3948..3966).3" />
<Link Source="10353:[6343..6358).6" Target="10353:[5995..6029).16" />
<Link Source="10353:[6343..6358).6" Target="10353:[6002..6028).6" />
<Link Source="10353:[6384..6410).31" Target="10353:[6002..6028).6" />
<Link Source="10353:[6384..6410).32" Target="10353:[6343..6358).6" />
<Link Source="10353:[6384..6410).32" Target="10353:[6384..6410).31" />
<Link Source="10353:[6384..6410).32" Target="10353:[6002..6028).6" />
<Link Source="10312:[5188..5207).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[5209..5220).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[5222..5231).3" Target="10312:[3730..3739).3" />
<Link Source="10312:[5222..5231).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[5233..5272).3" Target="10312:[3730..3739).3" />
<Link Source="10312:[5233..5272).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[5274..5295).3" Target="10312:[3730..3739).3" />
<Link Source="10312:[5274..5295).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[5297..5318).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[5320..5333).3" Target="10312:[3805..3818).3" />
<Link Source="10312:[5320..5333).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[5124..5404).3" Target="10287:[1477..1497).2" />
<Link Source="10312:[4685..4699).6" Target="10287:[1477..1497).2" />
<Link Source="10354:[3684..3818).16" Target="10287:[1477..1497).2" />
<Link Source="10354:[3684..3818).16" Target="10312:[4685..4699).6" />
<Link Source="10354:[3720..3803).113" Target="10354:[3684..3818).16" />
<Link Source="10354:[3720..3803).113" Target="10287:[1477..1497).2" />
<Link Source="10354:[3720..3803).113" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).113" Target="10312:[4685..4699).6" />
<Link Source="10354:[3720..3803).114" Target="10312:[4685..4699).6" />
<Link Source="10354:[3720..3803).115" Target="10354:[3684..3818).16" />
<Link Source="10354:[3720..3803).115" Target="10287:[1477..1497).2" />
<Link Source="10354:[3720..3803).115" Target="10354:[3720..3803).114" />
<Link Source="10354:[3720..3803).115" Target="10312:[4685..4699).6" />
<Link Source="10312:[4680..4787).11" Target="10354:[3720..3803).113" />
<Link Source="10312:[4680..4787).11" Target="10287:[1477..1497).2" />
<Link Source="10312:[4826..5058).26" Target="10312:[5830..5839).3" />
<Link Source="10312:[4826..5058).26" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).26" Target="10287:[1477..1497).2" />
<Link Source="10312:[4826..5058).27" Target="10287:[1477..1497).2" />
<Link Source="10346:[10663..10672).4" Target="10312:[3730..3739).3" />
<Link Source="10346:[10663..10672).4" Target="10287:[1477..1497).2" />
<Link Source="10346:[10761..10774).4" Target="10312:[3805..3818).3" />
<Link Source="10346:[10761..10774).4" Target="10287:[1477..1497).2" />
<Link Source="10346:[10861..10875).4" Target="10287:[1477..1497).2" />
<Link Source="10354:[3684..3818).17" Target="10287:[1477..1497).2" />
<Link Source="10354:[3684..3818).17" Target="10346:[10861..10875).4" />
<Link Source="10354:[3720..3803).121" Target="10354:[3684..3818).17" />
<Link Source="10354:[3720..3803).121" Target="10287:[1477..1497).2" />
<Link Source="10354:[3720..3803).121" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).121" Target="10346:[10861..10875).4" />
<Link Source="10354:[3720..3803).122" Target="10346:[10861..10875).4" />
<Link Source="10354:[3720..3803).123" Target="10354:[3684..3818).17" />
<Link Source="10354:[3720..3803).123" Target="10287:[1477..1497).2" />
<Link Source="10354:[3720..3803).123" Target="10354:[3720..3803).122" />
<Link Source="10354:[3720..3803).123" Target="10346:[10861..10875).4" />
<Link Source="10346:[10848..10877).10" Target="10354:[3720..3803).121" />
<Link Source="10346:[10848..10877).10" Target="10287:[1477..1497).2" />
<Link Source="10346:[10897..10914).4" Target="10287:[1477..1497).2" />
<Link Source="10346:[7666..7775).4" Target="10287:[1477..1497).2" />
<Link Source="10346:[7666..7775).4" Target="10346:[10897..10914).4" />
<Link Source="10346:[7672..7773).10" Target="10346:[7666..7775).4" />
<Link Source="10346:[7672..7773).10" Target="10287:[1477..1497).2" />
<Link Source="10346:[7672..7773).10" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).10" Target="10346:[10897..10914).4" />
<Link Source="10346:[10893..11127).7" Target="10346:[7672..7773).10" />
<Link Source="10346:[10893..11127).7" Target="10287:[1477..1497).2" />
<Link Source="10346:[3525..3638).31" Target="10287:[1477..1497).2" />
<Link Source="10346:[11369..11508).38" Target="10346:[10761..10774).4" />
<Link Source="10346:[11369..11508).38" Target="10312:[3730..3739).3" />
<Link Source="10312:[7718..7727).4" Target="10346:[10663..10672).4" />
<Link Source="10312:[7718..7727).4" Target="10312:[3730..3739).3" />
<Link Source="10312:[7816..7829).4" Target="10346:[11369..11508).38" />
<Link Source="10312:[7816..7829).4" Target="10312:[3730..3739).3" />
<Link Source="10312:[7903..7936).13" Target="10312:[3730..3739).3" />
<Link Source="10312:[7916..7934).4" Target="10312:[3730..3739).3" />
<Link Source="10353:[4698..4724).7" Target="10312:[7903..7936).13" />
<Link Source="10353:[4698..4724).7" Target="10312:[7916..7934).4" />
<Link Source="10353:[4750..4847).13" Target="10353:[4698..4724).7" />
<Link Source="10353:[4750..4847).13" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).13" Target="10312:[7916..7934).4" />
<Link Source="10353:[4863..5000).25" Target="10353:[4698..4724).7" />
<Link Source="10353:[4863..5000).25" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).25" Target="10312:[7916..7934).4" />
<Link Source="10353:[4863..5000).26" Target="10312:[7916..7934).4" />
<Link Source="10353:[5079..5183).13" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).13" Target="10312:[7916..7934).4" />
<Link Source="10353:[5197..5323).19" Target="10353:[4698..4724).7" />
<Link Source="10353:[5197..5323).19" Target="10353:[5079..5183).13" />
<Link Source="10353:[5197..5323).19" Target="10312:[7916..7934).4" />
<Link Source="10353:[5485..5759).37" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).37" Target="10312:[7916..7934).4" />
<Link Source="10353:[5485..5759).38" Target="10353:[4698..4724).7" />
<Link Source="10353:[5485..5759).38" Target="10353:[5485..5759).37" />
<Link Source="10353:[5485..5759).38" Target="10312:[7916..7934).4" />
<Link Source="10353:[5485..5759).39" Target="10312:[7916..7934).4" />
<Link Source="10353:[5775..5979).25" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).25" Target="10312:[7916..7934).4" />
<Link Source="10353:[5775..5979).27" Target="10353:[4698..4724).7" />
<Link Source="10353:[5775..5979).27" Target="10353:[5775..5979).25" />
<Link Source="10353:[5775..5979).27" Target="10312:[7916..7934).4" />
<Link Source="10353:[5995..6029).19" Target="10353:[5775..5979).27" />
<Link Source="10353:[5995..6029).19" Target="10312:[7916..7934).4" />
<Link Source="10353:[6002..6028).7" Target="10312:[7916..7934).4" />
<Link Source="10353:[6343..6358).7" Target="10353:[5995..6029).19" />
<Link Source="10353:[6343..6358).7" Target="10353:[6002..6028).7" />
<Link Source="10353:[6384..6410).37" Target="10353:[6002..6028).7" />
<Link Source="10353:[6384..6410).38" Target="10353:[6343..6358).7" />
<Link Source="10353:[6384..6410).38" Target="10353:[6384..6410).37" />
<Link Source="10353:[6384..6410).38" Target="10353:[6002..6028).7" />
<Link Source="10312:[7952..7977).13" Target="10312:[3730..3739).3" />
<Link Source="10312:[7952..7977).14" Target="10312:[7718..7727).4" />
<Link Source="10312:[7952..7977).14" Target="10312:[7952..7977).13" />
<Link Source="10312:[7952..7977).14" Target="10312:[3730..3739).3" />
<Link Source="10312:[8594..8603).2" Target="10312:[7718..7727).4" />
<Link Source="10312:[8594..8603).2" Target="10312:[3730..3739).3" />
<Link Source="10312:[8669..8690).2" Target="10312:[7718..7727).4" />
<Link Source="10312:[8669..8690).2" Target="10312:[3730..3739).3" />
<Link Source="10312:[8692..8705).2" Target="10312:[7816..7829).4" />
<Link Source="10312:[8692..8705).2" Target="10312:[3730..3739).3" />
<Link Source="10312:[34797..34806).2" Target="10312:[8594..8603).2" />
<Link Source="10312:[34797..34806).2" Target="10312:[3730..3739).3" />
<Link Source="10312:[34911..34932).2" Target="10312:[8669..8690).2" />
<Link Source="10312:[34911..34932).2" Target="10312:[3730..3739).3" />
<Link Source="10312:[34947..34960).2" Target="10312:[8692..8705).2" />
<Link Source="10312:[34947..34960).2" Target="10312:[3730..3739).3" />
<Link Source="10312:[35403..35412).2" Target="10312:[34797..34806).2" />
<Link Source="10312:[35403..35412).2" Target="10312:[3730..3739).3" />
<Link Source="10312:[35517..35538).2" Target="10312:[34911..34932).2" />
<Link Source="10312:[35517..35538).2" Target="10312:[3730..3739).3" />
<Link Source="10312:[35553..35581).2" Target="10312:[3730..3739).3" />
<Link Source="10312:[35596..35609).2" Target="10312:[34947..34960).2" />
<Link Source="10312:[35596..35609).2" Target="10312:[3730..3739).3" />
<Link Source="10312:[35696..35731).5" Target="10312:[3730..3739).3" />
<Link Source="10354:[11312..11328).5" Target="10312:[3730..3739).3" />
<Link Source="10354:[3684..3818).18" Target="10312:[3730..3739).3" />
<Link Source="10354:[3684..3818).18" Target="10354:[11312..11328).5" />
<Link Source="10354:[3720..3803).129" Target="10354:[3684..3818).18" />
<Link Source="10354:[3720..3803).129" Target="10312:[3730..3739).3" />
<Link Source="10354:[3720..3803).129" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).129" Target="10354:[11312..11328).5" />
<Link Source="10354:[3720..3803).130" Target="10354:[11312..11328).5" />
<Link Source="10354:[3720..3803).131" Target="10354:[3684..3818).18" />
<Link Source="10354:[3720..3803).131" Target="10312:[3730..3739).3" />
<Link Source="10354:[3720..3803).131" Target="10354:[3720..3803).130" />
<Link Source="10354:[3720..3803).131" Target="10354:[11312..11328).5" />
<Link Source="10354:[11299..11330).13" Target="10354:[3720..3803).129" />
<Link Source="10354:[11299..11330).13" Target="10312:[3730..3739).3" />
<Link Source="10312:[36067..36079).3" Target="10312:[3730..3739).3" />
<Link Source="10312:[33656..33675).3" Target="10312:[3730..3739).3" />
<Link Source="10312:[33707..33716).3" Target="10312:[35403..35412).2" />
<Link Source="10312:[33707..33716).3" Target="10312:[3730..3739).3" />
<Link Source="10312:[33754..33775).3" Target="10312:[35517..35538).2" />
<Link Source="10312:[33754..33775).3" Target="10312:[3730..3739).3" />
<Link Source="10312:[33777..33805).3" Target="10312:[35553..35581).2" />
<Link Source="10312:[33777..33805).3" Target="10312:[3730..3739).3" />
<Link Source="10312:[33807..33820).3" Target="10312:[35596..35609).2" />
<Link Source="10312:[33807..33820).3" Target="10312:[3730..3739).3" />
<Link Source="10312:[33870..33909).3" Target="10312:[35553..35581).2" />
<Link Source="10312:[33870..33909).3" Target="10312:[3730..3739).3" />
<Link Source="10312:[61608..61629).5" Target="10312:[33754..33775).3" />
<Link Source="10312:[61608..61629).5" Target="10312:[3730..3739).3" />
<Link Source="10312:[34022..34574).7" Target="10312:[3730..3739).3" />
<Link Source="10354:[9012..9030).3" Target="10312:[35553..35581).2" />
<Link Source="10354:[8981..9152).3" Target="10312:[35553..35581).2" />
<Link Source="10354:[9060..9070).3" Target="10312:[35553..35581).2" />
<Link Source="10354:[4058..4122).34" Target="10354:[9012..9030).3" />
<Link Source="10354:[4058..4122).34" Target="10354:[9060..9070).3" />
<Link Source="10354:[9056..9141).9" Target="10354:[4058..4122).34" />
<Link Source="10354:[9056..9141).9" Target="10312:[35553..35581).2" />
<Link Source="10354:[9073..9077).3" Target="10312:[35553..35581).2" />
<Link Source="10354:[4058..4122).35" Target="10354:[8981..9152).3" />
<Link Source="10354:[4058..4122).35" Target="10354:[9073..9077).3" />
<Link Source="10354:[9056..9141).10" Target="10354:[4058..4122).35" />
<Link Source="10354:[9056..9141).10" Target="10312:[35553..35581).2" />
<Link Source="10354:[9056..9141).11" Target="10354:[9056..9141).9" />
<Link Source="10354:[9056..9141).11" Target="10354:[9056..9141).10" />
<Link Source="10354:[9056..9141).11" Target="10312:[35553..35581).2" />
<Link Source="10312:[36566..36625).3" Target="10312:[3730..3739).3" />
<Link Source="10312:[36643..36855).7" Target="10312:[3730..3739).3" />
<Link Source="10312:[36643..36855).8" Target="10312:[36566..36625).3" />
<Link Source="10312:[36643..36855).8" Target="10312:[35553..35581).2" />
<Link Source="10312:[36643..36855).8" Target="10312:[36643..36855).7" />
<Link Source="10312:[36643..36855).8" Target="10312:[3730..3739).3" />
<Link Source="10312:[37061..37078).3" Target="10312:[3730..3739).3" />
<Link Source="10354:[4094..4107).36" Target="10312:[37061..37078).3" />
<Link Source="10354:[4094..4107).36" Target="10312:[35553..35581).2" />
<Link Source="10312:[37029..37117).7" Target="10354:[4094..4107).36" />
<Link Source="10312:[37029..37117).7" Target="10312:[3730..3739).3" />
<Link Source="10312:[37258..37278).3" Target="10312:[3730..3739).3" />
<Link Source="10354:[4094..4107).37" Target="10312:[37258..37278).3" />
<Link Source="10354:[4094..4107).37" Target="10312:[35553..35581).2" />
<Link Source="10312:[37254..37416).7" Target="10354:[4094..4107).37" />
<Link Source="10312:[37254..37416).7" Target="10312:[3730..3739).3" />
<Link Source="10312:[37436..37988).9" Target="10312:[3730..3739).3" />
<Link Source="10312:[38290..38338).3" Target="10312:[3730..3739).3" />
<Link Source="10306:[3345..3430).3" Target="10312:[35517..35538).2" />
<Link Source="10306:[3345..3430).3" Target="10312:[38290..38338).3" />
<Link Source="10306:[3358..3364).3" Target="10312:[38290..38338).3" />
<Link Source="10306:[3196..3249).11" Target="10306:[3345..3430).3" />
<Link Source="10306:[3196..3249).11" Target="10306:[3358..3364).3" />
<Link Source="10306:[3202..3247).41" Target="10306:[3196..3249).11" />
<Link Source="10306:[3202..3247).41" Target="10312:[35553..35581).2" />
<Link Source="10306:[3202..3247).41" Target="10306:[3358..3364).3" />
<Link Source="10306:[3351..3428).7" Target="10306:[3202..3247).41" />
<Link Source="10306:[3351..3428).7" Target="10312:[38290..38338).3" />
<Link Source="10312:[38286..38405).5" Target="10306:[3351..3428).7" />
<Link Source="10312:[38286..38405).5" Target="10312:[3730..3739).3" />
<Link Source="10312:[36067..36079).4" Target="10312:[35553..35581).2" />
<Link Source="10312:[36097..36258).37" Target="10312:[35403..35412).2" />
<Link Source="10312:[36097..36258).37" Target="10312:[35553..35581).2" />
<Link Source="10312:[36097..36258).39" Target="10312:[35517..35538).2" />
<Link Source="10312:[36097..36258).39" Target="10312:[35553..35581).2" />
<Link Source="10312:[36097..36258).41" Target="10312:[35596..35609).2" />
<Link Source="10312:[36097..36258).41" Target="10312:[35553..35581).2" />
<Link Source="10312:[33656..33675).4" Target="10312:[35553..35581).2" />
<Link Source="10312:[33707..33716).4" Target="10312:[36097..36258).37" />
<Link Source="10312:[33707..33716).4" Target="10312:[35553..35581).2" />
<Link Source="10312:[33754..33775).4" Target="10312:[36097..36258).39" />
<Link Source="10312:[33754..33775).4" Target="10312:[35553..35581).2" />
<Link Source="10312:[33777..33805).4" Target="10312:[35553..35581).2" />
<Link Source="10312:[33807..33820).4" Target="10312:[36097..36258).41" />
<Link Source="10312:[33807..33820).4" Target="10312:[35553..35581).2" />
<Link Source="10312:[33870..33909).4" Target="10312:[35553..35581).2" />
<Link Source="10312:[61608..61629).6" Target="10312:[33754..33775).4" />
<Link Source="10312:[61608..61629).6" Target="10312:[35553..35581).2" />
<Link Source="10312:[34022..34574).10" Target="10312:[35553..35581).2" />
<Link Source="10312:[36566..36625).4" Target="10312:[35553..35581).2" />
<Link Source="10312:[36643..36855).10" Target="10312:[35553..35581).2" />
<Link Source="10312:[36643..36855).11" Target="10312:[36566..36625).4" />
<Link Source="10312:[36643..36855).11" Target="10312:[35553..35581).2" />
<Link Source="10312:[36643..36855).11" Target="10312:[36643..36855).10" />
<Link Source="10312:[37061..37078).4" Target="10312:[35553..35581).2" />
<Link Source="10312:[37029..37117).10" Target="10312:[37061..37078).4" />
<Link Source="10312:[37029..37117).10" Target="10312:[35553..35581).2" />
<Link Source="10312:[37258..37278).4" Target="10312:[35553..35581).2" />
<Link Source="10312:[37254..37416).10" Target="10312:[37258..37278).4" />
<Link Source="10312:[37254..37416).10" Target="10312:[35553..35581).2" />
<Link Source="10312:[37436..37988).13" Target="10312:[35553..35581).2" />
<Link Source="10312:[38290..38338).4" Target="10312:[35553..35581).2" />
<Link Source="10306:[3345..3430).4" Target="10312:[35517..35538).2" />
<Link Source="10306:[3345..3430).4" Target="10312:[38290..38338).4" />
<Link Source="10306:[3358..3364).4" Target="10312:[38290..38338).4" />
<Link Source="10306:[3196..3249).12" Target="10306:[3345..3430).4" />
<Link Source="10306:[3196..3249).12" Target="10306:[3358..3364).4" />
<Link Source="10306:[3351..3428).10" Target="10306:[3196..3249).12" />
<Link Source="10306:[3351..3428).10" Target="10312:[38290..38338).4" />
<Link Source="10312:[38286..38405).7" Target="10306:[3351..3428).10" />
<Link Source="10312:[38286..38405).7" Target="10312:[35553..35581).2" />
<Link Source="10312:[38756..38772).2" Target="10312:[35553..35581).2" />
<Link Source="10312:[38756..38772).2" Target="10312:[3730..3739).3" />
<Link Source="10354:[11428..11441).4" Target="10312:[3730..3739).3" />
<Link Source="10312:[38786..38797).2" Target="10312:[3730..3739).3" />
<Link Source="10345:[29100..29109).3" Target="10346:[10663..10672).4" />
<Link Source="10345:[29100..29109).3" Target="10287:[1477..1497).2" />
<Link Source="10345:[29214..29227).3" Target="10346:[10761..10774).4" />
<Link Source="10345:[29214..29227).3" Target="10287:[1477..1497).2" />
<Link Source="10345:[29884..29893).3" Target="10345:[29100..29109).3" />
<Link Source="10345:[29884..29893).3" Target="10287:[1477..1497).2" />
<Link Source="10345:[29998..30011).3" Target="10345:[29214..29227).3" />
<Link Source="10345:[29998..30011).3" Target="10287:[1477..1497).2" />
<Link Source="10345:[30883..31655).7" Target="10287:[1477..1497).2" />
<Link Source="10345:[30883..31655).7" Target="10312:[35553..35581).2" />
<Link Source="10345:[29452..29715).14" Target="10312:[35553..35581).2" />
<Link Source="10345:[29452..29715).14" Target="10346:[10663..10672).4" />
<Link Source="10345:[29452..29715).14" Target="10287:[1477..1497).2" />
<Link Source="10345:[29566..29700).15" Target="10345:[29100..29109).3" />
<Link Source="10345:[29566..29700).15" Target="10345:[29452..29715).14" />
<Link Source="10345:[29566..29700).18" Target="10345:[29214..29227).3" />
<Link Source="10345:[29566..29700).18" Target="10345:[29452..29715).14" />
<Link Source="10345:[31734..31789).2" Target="10345:[29452..29715).14" />
<Link Source="10345:[31804..31825).2" Target="10345:[29452..29715).14" />
<Link Source="10345:[31840..31859).2" Target="10345:[29452..29715).14" />
<Link Source="10345:[31874..31885).2" Target="10345:[29452..29715).14" />
<Link Source="10345:[31900..31909).2" Target="10345:[29566..29700).15" />
<Link Source="10345:[31900..31909).2" Target="10345:[29452..29715).14" />
<Link Source="10345:[31924..31963).2" Target="10345:[29452..29715).14" />
<Link Source="10345:[31978..31999).2" Target="10345:[29452..29715).14" />
<Link Source="10345:[32014..32027).2" Target="10345:[29566..29700).18" />
<Link Source="10345:[32014..32027).2" Target="10345:[29452..29715).14" />
<Link Source="10345:[32114..32230).5" Target="10345:[31804..31825).2" />
<Link Source="10345:[32114..32230).5" Target="10312:[35553..35581).2" />
<Link Source="10345:[32114..32230).5" Target="10345:[29452..29715).14" />
<Link Source="10345:[32114..32230).6" Target="EXTERNAL" />
<Link Source="10345:[32114..32230).6" Target="10345:[29452..29715).14" />
<Link Source="10345:[32118..32174).2" Target="10345:[29452..29715).14" />
<Link Source="10298:[471..492).37" Target="10345:[32114..32230).5" />
<Link Source="10298:[471..492).37" Target="10345:[32118..32174).2" />
<Link Source="10298:[494..511).37" Target="10345:[32114..32230).6" />
<Link Source="10298:[494..511).37" Target="10345:[32118..32174).2" />
<Link Source="10345:[32275..32311).2" Target="10345:[29452..29715).14" />
<Link Source="10286:[2155..2260).6" Target="10345:[31804..31825).2" />
<Link Source="10286:[2155..2260).6" Target="10345:[32275..32311).2" />
<Link Source="10345:[32246..32312).3" Target="10286:[2155..2260).6" />
<Link Source="10345:[32246..32312).3" Target="10345:[29452..29715).14" />
<Link Source="10345:[32328..33465).4" Target="10345:[31734..31789).2" />
<Link Source="10345:[32328..33465).4" Target="10345:[29452..29715).14" />
<Link Source="10354:[3720..3803).137" Target="10354:[3684..3818).16" />
<Link Source="10354:[3720..3803).137" Target="10312:[35553..35581).2" />
<Link Source="10354:[3720..3803).137" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).137" Target="10312:[4685..4699).6" />
<Link Source="10354:[3720..3803).139" Target="10354:[3684..3818).16" />
<Link Source="10354:[3720..3803).139" Target="10312:[35553..35581).2" />
<Link Source="10354:[3720..3803).139" Target="10354:[3720..3803).114" />
<Link Source="10354:[3720..3803).139" Target="10312:[4685..4699).6" />
<Link Source="10312:[4680..4787).13" Target="10354:[3720..3803).137" />
<Link Source="10312:[4680..4787).13" Target="10287:[1477..1497).2" />
<Link Source="10312:[4534..4658).70" Target="10312:[3805..3818).3" />
<Link Source="10312:[4534..4658).70" Target="10312:[35553..35581).2" />
<Link Source="10346:[10663..10672).5" Target="10312:[35553..35581).2" />
<Link Source="10346:[10761..10774).5" Target="10312:[4534..4658).70" />
<Link Source="10346:[10761..10774).5" Target="10312:[35553..35581).2" />
<Link Source="10346:[10861..10875).5" Target="10312:[35553..35581).2" />
<Link Source="10354:[3684..3818).20" Target="10312:[35553..35581).2" />
<Link Source="10354:[3684..3818).20" Target="10346:[10861..10875).5" />
<Link Source="10354:[3720..3803).145" Target="10354:[3684..3818).20" />
<Link Source="10354:[3720..3803).145" Target="10312:[35553..35581).2" />
<Link Source="10354:[3720..3803).145" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).145" Target="10346:[10861..10875).5" />
<Link Source="10354:[3720..3803).146" Target="10346:[10861..10875).5" />
<Link Source="10354:[3720..3803).147" Target="10354:[3684..3818).20" />
<Link Source="10354:[3720..3803).147" Target="10312:[35553..35581).2" />
<Link Source="10354:[3720..3803).147" Target="10354:[3720..3803).146" />
<Link Source="10354:[3720..3803).147" Target="10346:[10861..10875).5" />
<Link Source="10346:[10848..10877).13" Target="10354:[3720..3803).145" />
<Link Source="10346:[10848..10877).13" Target="10312:[35553..35581).2" />
<Link Source="10346:[10897..10914).5" Target="10312:[35553..35581).2" />
<Link Source="10346:[7666..7775).5" Target="10312:[35553..35581).2" />
<Link Source="10346:[7666..7775).5" Target="10346:[10897..10914).5" />
<Link Source="10346:[7672..7773).13" Target="10346:[7666..7775).5" />
<Link Source="10346:[7672..7773).13" Target="10312:[35553..35581).2" />
<Link Source="10346:[7672..7773).13" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).13" Target="10346:[10897..10914).5" />
<Link Source="10346:[10893..11127).9" Target="10346:[7672..7773).13" />
<Link Source="10346:[10893..11127).9" Target="10312:[35553..35581).2" />
<Link Source="10346:[3525..3638).38" Target="10312:[35553..35581).2" />
<Link Source="10312:[7718..7727).5" Target="10346:[10663..10672).5" />
<Link Source="10312:[7718..7727).5" Target="10312:[35553..35581).2" />
<Link Source="10312:[7816..7829).5" Target="10346:[10761..10774).5" />
<Link Source="10312:[7816..7829).5" Target="10312:[35553..35581).2" />
<Link Source="10312:[7903..7936).17" Target="10346:[10663..10672).5" />
<Link Source="10312:[7903..7936).17" Target="10312:[35553..35581).2" />
<Link Source="10312:[7916..7934).5" Target="10312:[35553..35581).2" />
<Link Source="10353:[4698..4724).8" Target="10312:[7903..7936).17" />
<Link Source="10353:[4698..4724).8" Target="10312:[7916..7934).5" />
<Link Source="10353:[4750..4847).15" Target="10353:[4698..4724).8" />
<Link Source="10353:[4750..4847).15" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).15" Target="10312:[7916..7934).5" />
<Link Source="10353:[4863..5000).29" Target="10353:[4698..4724).8" />
<Link Source="10353:[4863..5000).29" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).29" Target="10312:[7916..7934).5" />
<Link Source="10353:[4863..5000).30" Target="10312:[7916..7934).5" />
<Link Source="10353:[5079..5183).15" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).15" Target="10312:[7916..7934).5" />
<Link Source="10353:[5197..5323).22" Target="10353:[4698..4724).8" />
<Link Source="10353:[5197..5323).22" Target="10353:[5079..5183).15" />
<Link Source="10353:[5197..5323).22" Target="10312:[7916..7934).5" />
<Link Source="10353:[5485..5759).43" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).43" Target="10312:[7916..7934).5" />
<Link Source="10353:[5485..5759).44" Target="10353:[4698..4724).8" />
<Link Source="10353:[5485..5759).44" Target="10353:[5485..5759).43" />
<Link Source="10353:[5485..5759).44" Target="10312:[7916..7934).5" />
<Link Source="10353:[5485..5759).45" Target="10312:[7916..7934).5" />
<Link Source="10353:[5775..5979).29" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).29" Target="10312:[7916..7934).5" />
<Link Source="10353:[5775..5979).31" Target="10353:[4698..4724).8" />
<Link Source="10353:[5775..5979).31" Target="10353:[5775..5979).29" />
<Link Source="10353:[5775..5979).31" Target="10312:[7916..7934).5" />
<Link Source="10353:[5995..6029).22" Target="10353:[5775..5979).31" />
<Link Source="10353:[5995..6029).22" Target="10312:[7916..7934).5" />
<Link Source="10353:[6002..6028).8" Target="10312:[7916..7934).5" />
<Link Source="10353:[6343..6358).8" Target="10353:[5995..6029).22" />
<Link Source="10353:[6343..6358).8" Target="10353:[6002..6028).8" />
<Link Source="10353:[6384..6410).43" Target="10353:[6002..6028).8" />
<Link Source="10353:[6384..6410).44" Target="10353:[6343..6358).8" />
<Link Source="10353:[6384..6410).44" Target="10353:[6384..6410).43" />
<Link Source="10353:[6384..6410).44" Target="10353:[6002..6028).8" />
<Link Source="10312:[7952..7977).17" Target="10312:[35553..35581).2" />
<Link Source="10312:[7952..7977).18" Target="10312:[7718..7727).5" />
<Link Source="10312:[7952..7977).18" Target="10312:[7952..7977).17" />
<Link Source="10312:[7952..7977).18" Target="10312:[35553..35581).2" />
<Link Source="10312:[19030..19039).3" Target="10312:[7718..7727).5" />
<Link Source="10312:[19030..19039).3" Target="10312:[35553..35581).2" />
<Link Source="10312:[19087..19100).3" Target="10312:[7816..7829).5" />
<Link Source="10312:[19087..19100).3" Target="10312:[35553..35581).2" />
<Link Source="10312:[61608..61629).7" Target="10312:[7718..7727).5" />
<Link Source="10312:[61608..61629).7" Target="10312:[35553..35581).2" />
<Link Source="10345:[29100..29109).4" Target="10346:[10663..10672).5" />
<Link Source="10345:[29100..29109).4" Target="10312:[35553..35581).2" />
<Link Source="10345:[29214..29227).4" Target="10346:[10761..10774).5" />
<Link Source="10345:[29214..29227).4" Target="10312:[35553..35581).2" />
<Link Source="10345:[29884..29893).4" Target="10345:[29100..29109).4" />
<Link Source="10345:[29884..29893).4" Target="10312:[35553..35581).2" />
<Link Source="10345:[29998..30011).4" Target="10345:[29214..29227).4" />
<Link Source="10345:[29998..30011).4" Target="10312:[35553..35581).2" />
<Link Source="10312:[63439..63448).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[63439..63448).3" Target="10312:[35553..35581).2" />
<Link Source="10312:[63473..63501).3" Target="10312:[35553..35581).2" />
<Link Source="10312:[63503..63516).3" Target="10345:[29998..30011).4" />
<Link Source="10312:[63503..63516).3" Target="10312:[35553..35581).2" />
<Link Source="10312:[63638..63668).3" Target="10312:[35553..35581).2" />
<Link Source="10312:[63682..63706).3" Target="10312:[35553..35581).2" />
<Link Source="10312:[64353..69285).17" Target="10312:[63503..63516).3" />
<Link Source="10312:[64353..69285).17" Target="10345:[29884..29893).4" />
<Link Source="10312:[64353..69285).19" Target="10312:[63682..63706).3" />
<Link Source="10312:[64353..69285).19" Target="10345:[29884..29893).4" />
<Link Source="10312:[80978..80991).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[80993..81002).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[80993..81002).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[81004..81017).3" Target="10312:[64353..69285).17" />
<Link Source="10312:[81004..81017).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[81019..81040).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[81042..81069).3" Target="10312:[64353..69285).19" />
<Link Source="10312:[81042..81069).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[81095..84034).3" Target="10312:[80978..80991).3" />
<Link Source="10312:[81095..84034).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[83750..83991).4" Target="10312:[81095..84034).3" />
<Link Source="10312:[83750..83991).5" Target="10312:[80993..81002).3" />
<Link Source="10312:[83750..83991).5" Target="10312:[83750..83991).4" />
<Link Source="10312:[83750..83991).5" Target="10312:[81095..84034).3" />
<Link Source="10312:[84050..84066).5" Target="10345:[29884..29893).4" />
<Link Source="10312:[66177..69285).28" Target="10312:[63473..63501).3" />
<Link Source="10312:[66177..69285).28" Target="10345:[29884..29893).4" />
<Link Source="10312:[66291..66342).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[75301..75322).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[75301..75322).3" Target="10312:[66291..66342).3" />
<Link Source="10312:[75324..75352).3" Target="10312:[66177..69285).28" />
<Link Source="10312:[75324..75352).3" Target="10312:[66291..66342).3" />
<Link Source="10312:[75735..75866).11" Target="10312:[75301..75322).3" />
<Link Source="10312:[75735..75866).11" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).11" Target="10312:[66291..66342).3" />
<Link Source="10312:[75735..75866).12" Target="10312:[66291..66342).3" />
<Link Source="10312:[75742..75804).3" Target="10312:[75735..75866).11" />
<Link Source="10312:[75742..75804).3" Target="10312:[66291..66342).3" />
<Link Source="10312:[75735..75866).14" Target="10312:[75324..75352).3" />
<Link Source="10312:[75735..75866).14" Target="10312:[75742..75804).3" />
<Link Source="10312:[66177..69285).31" Target="10312:[63638..63668).3" />
<Link Source="10312:[66177..69285).31" Target="10345:[29884..29893).4" />
<Link Source="10312:[77543..77571).3" Target="10312:[75735..75866).14" />
<Link Source="10312:[77543..77571).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[77573..77604).3" Target="10312:[66177..69285).31" />
<Link Source="10312:[77573..77604).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[77654..77700).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[77726..77892).9" Target="10345:[29884..29893).4" />
<Link Source="10312:[77726..77892).10" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).10" Target="10345:[29884..29893).4" />
<Link Source="10312:[77730..77782).3" Target="10345:[29884..29893).4" />
<Link Source="10298:[471..492).43" Target="10312:[77726..77892).9" />
<Link Source="10298:[471..492).43" Target="10312:[77730..77782).3" />
<Link Source="10298:[494..511).43" Target="10312:[77726..77892).10" />
<Link Source="10298:[494..511).43" Target="10312:[77730..77782).3" />
<Link Source="10312:[78402..78430).3" Target="10312:[77543..77571).3" />
<Link Source="10312:[78402..78430).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[78432..78463).3" Target="10312:[77573..77604).3" />
<Link Source="10312:[78432..78463).3" Target="10345:[29884..29893).4" />
<Link Source="10312:[78513..78552).3" Target="10312:[77654..77700).3" />
<Link Source="10312:[78513..78552).3" Target="10345:[29884..29893).4" />
<Link Source="10346:[8034..8062).3" Target="10312:[78402..78430).3" />
<Link Source="10346:[8034..8062).3" Target="10345:[29884..29893).4" />
<Link Source="10346:[8064..8095).3" Target="10312:[78432..78463).3" />
<Link Source="10346:[8064..8095).3" Target="10345:[29884..29893).4" />
<Link Source="10346:[8145..8184).3" Target="10312:[78513..78552).3" />
<Link Source="10346:[8145..8184).3" Target="10345:[29884..29893).4" />
<Link Source="10286:[30098..30120).2" Target="10345:[29884..29893).4" />
<Link Source="10286:[30135..30160).2" Target="10346:[8034..8062).3" />
<Link Source="10286:[30135..30160).2" Target="10345:[29884..29893).4" />
<Link Source="10286:[30175..30206).2" Target="10346:[8064..8095).3" />
<Link Source="10286:[30175..30206).2" Target="10345:[29884..29893).4" />
<Link Source="10286:[30283..30330).2" Target="10345:[29884..29893).4" />
<Link Source="10286:[30012..30691).2" Target="10345:[29884..29893).4" />
<Link Source="10286:[30356..30522).5" Target="10286:[30012..30691).2" />
<Link Source="10286:[30356..30522).5" Target="10345:[29884..29893).4" />
<Link Source="10286:[30356..30522).6" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).6" Target="10345:[29884..29893).4" />
<Link Source="10286:[30360..30412).2" Target="10345:[29884..29893).4" />
<Link Source="10298:[471..492).44" Target="10286:[30356..30522).5" />
<Link Source="10298:[471..492).44" Target="10286:[30360..30412).2" />
<Link Source="10298:[494..511).44" Target="10286:[30356..30522).6" />
<Link Source="10298:[494..511).44" Target="10286:[30360..30412).2" />
<Link Source="10060:[2136..2158).2" Target="10286:[30098..30120).2" />
<Link Source="10060:[2136..2158).2" Target="10345:[29884..29893).4" />
<Link Source="10060:[2173..2198).2" Target="10286:[30135..30160).2" />
<Link Source="10060:[2173..2198).2" Target="10345:[29884..29893).4" />
<Link Source="10060:[2213..2244).2" Target="10286:[30175..30206).2" />
<Link Source="10060:[2213..2244).2" Target="10345:[29884..29893).4" />
<Link Source="10060:[2320..2366).2" Target="10286:[30283..30330).2" />
<Link Source="10060:[2320..2366).2" Target="10345:[29884..29893).4" />
<Link Source="10060:[5621..5634).3" Target="10060:[2136..2158).2" />
<Link Source="10060:[5621..5634).3" Target="10345:[29884..29893).4" />
<Link Source="10060:[5691..5716).3" Target="10060:[2173..2198).2" />
<Link Source="10060:[5691..5716).3" Target="10345:[29884..29893).4" />
<Link Source="10060:[5731..5762).3" Target="10060:[2213..2244).2" />
<Link Source="10060:[5731..5762).3" Target="10345:[29884..29893).4" />
<Link Source="10060:[5777..5806).3" Target="10060:[2136..2158).2" />
<Link Source="10060:[5777..5806).3" Target="10345:[29884..29893).4" />
<Link Source="10060:[5882..5928).3" Target="10060:[2320..2366).2" />
<Link Source="10060:[5882..5928).3" Target="10345:[29884..29893).4" />
<Link Source="10060:[5954..5991).9" Target="10345:[29884..29893).4" />
<Link Source="10060:[6005..6042).9" Target="10345:[29884..29893).4" />
<Link Source="10060:[6005..6042).10" Target="10060:[5621..5634).3" />
<Link Source="10060:[6005..6042).10" Target="10060:[6005..6042).9" />
<Link Source="10060:[6005..6042).10" Target="10345:[29884..29893).4" />
<Link Source="10060:[6056..6090).5" Target="10060:[5621..5634).3" />
<Link Source="10060:[6056..6090).5" Target="10345:[29884..29893).4" />
<Link Source="10060:[6104..6172).7" Target="10060:[5621..5634).3" />
<Link Source="10060:[6104..6172).7" Target="10345:[29884..29893).4" />
<Link Source="10060:[6188..6219).5" Target="10345:[29884..29893).4" />
<Link Source="10060:[10202..10215).3" Target="10060:[5621..5634).3" />
<Link Source="10060:[10202..10215).3" Target="10345:[29884..29893).4" />
<Link Source="10060:[10265..10311).3" Target="10060:[5882..5928).3" />
<Link Source="10060:[10265..10311).3" Target="10345:[29884..29893).4" />
<Link Source="10060:[10337..10405).7" Target="10060:[10202..10215).3" />
<Link Source="10060:[10337..10405).7" Target="10345:[29884..29893).4" />
<Link Source="10060:[10419..10454).9" Target="10345:[29884..29893).4" />
<Link Source="10060:[10470..10516).3" Target="10060:[10202..10215).3" />
<Link Source="10060:[10470..10516).3" Target="10345:[29884..29893).4" />
<Link Source="10060:[10532..10544).3" Target="10345:[29884..29893).4" />
<Link Source="10060:[10558..11295).3" Target="10345:[29884..29893).4" />
<Link Source="10060:[11990..12013).3" Target="10345:[29884..29893).4" />
<Link Source="10060:[12078..12091).3" Target="10060:[10202..10215).3" />
<Link Source="10060:[12078..12091).3" Target="10345:[29884..29893).4" />
<Link Source="10060:[12117..12185).7" Target="10060:[12078..12091).3" />
<Link Source="10060:[12117..12185).7" Target="10345:[29884..29893).4" />
<Link Source="10060:[12199..12238).9" Target="10345:[29884..29893).4" />
<Link Source="10060:[12199..12238).10" Target="10060:[11990..12013).3" />
<Link Source="10060:[12199..12238).10" Target="10060:[12199..12238).9" />
<Link Source="10060:[12199..12238).10" Target="10345:[29884..29893).4" />
<Link Source="10345:[24226..24260).5" Target="10286:[30098..30120).2" />
<Link Source="10354:[4094..4107).47" Target="10312:[37061..37078).4" />
<Link Source="10354:[4094..4107).47" Target="10286:[30098..30120).2" />
<Link Source="10354:[4094..4107).47" Target="10312:[35553..35581).2" />
<Link Source="10345:[30883..31655).10" Target="10312:[35553..35581).2" />
<Link Source="10345:[30883..31655).10" Target="10354:[4094..4107).47" />
<Link Source="10312:[4685..4699).8" Target="10312:[35553..35581).2" />
<Link Source="10354:[3684..3818).21" Target="10287:[1477..1497).2" />
<Link Source="10354:[3684..3818).21" Target="10312:[4685..4699).8" />
<Link Source="10354:[3720..3803).153" Target="10354:[3684..3818).21" />
<Link Source="10354:[3720..3803).153" Target="10354:[4094..4107).47" />
<Link Source="10354:[3720..3803).153" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).153" Target="10312:[4685..4699).8" />
<Link Source="10312:[4680..4787).15" Target="10354:[3720..3803).153" />
<Link Source="10312:[4680..4787).15" Target="10312:[35553..35581).2" />
<Link Source="10312:[4749..4764).3" Target="10312:[35553..35581).2" />
<Link Source="10312:[4749..4764).3" Target="10312:[4680..4787).15" />
<Link Source="10312:[4826..5058).36" Target="10312:[5830..5839).3" />
<Link Source="10312:[4826..5058).36" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).36" Target="10312:[35553..35581).2" />
<Link Source="10312:[4826..5058).37" Target="10312:[35553..35581).2" />
<Link Source="10312:[5087..5101).3" Target="10312:[4749..4764).3" />
<Link Source="10312:[5087..5101).3" Target="10287:[1477..1497).2" />
<Link Source="10319:[43504..43546).12" Target="10287:[1477..1497).2" />
<Link Source="10319:[43504..43546).12" Target="10060:[5621..5634).3" />
<Link Source="10319:[43504..43546).12" Target="10354:[4094..4107).47" />
<Link Source="10319:[43799..44676).13" Target="10287:[1477..1497).2" />
<Link Source="10319:[43853..43873).3" Target="10287:[1477..1497).2" />
<Link Source="10319:[41088..41107).3" Target="10319:[43799..44676).13" />
<Link Source="10319:[41088..41107).3" Target="10319:[43853..43873).3" />
<Link Source="10319:[41138..41158).3" Target="10319:[43853..43873).3" />
<Link Source="10354:[4919..5009).37" Target="10319:[41088..41107).3" />
<Link Source="10354:[4919..5009).37" Target="10319:[41138..41158).3" />
<Link Source="10354:[4094..4107).51" Target="10354:[4919..5009).37" />
<Link Source="10354:[4094..4107).51" Target="10319:[43504..43546).12" />
<Link Source="10354:[4094..4107).51" Target="10319:[41138..41158).3" />
<Link Source="10319:[41133..41220).5" Target="10354:[4094..4107).51" />
<Link Source="10319:[41133..41220).5" Target="10319:[43853..43873).3" />
<Link Source="10319:[41254..41268).3" Target="10319:[43853..43873).3" />
<Link Source="10354:[4525..4595).5" Target="10319:[41088..41107).3" />
<Link Source="10354:[4525..4595).5" Target="10319:[41254..41268).3" />
<Link Source="10354:[4561..4580).5" Target="10354:[4525..4595).5" />
<Link Source="10354:[4561..4580).5" Target="10319:[43504..43546).12" />
<Link Source="10354:[4561..4580).5" Target="10319:[41254..41268).3" />
<Link Source="10319:[41236..41680).9" Target="10354:[4561..4580).5" />
<Link Source="10319:[41236..41680).9" Target="10319:[43853..43873).3" />
<Link Source="10319:[41302..41665).3" Target="10319:[41236..41680).9" />
<Link Source="10319:[41302..41665).3" Target="10319:[43504..43546).12" />
<Link Source="10319:[41406..41476).3" Target="10319:[41236..41680).9" />
<Link Source="10319:[41406..41476).3" Target="10319:[43504..43546).12" />
<Link Source="10319:[41406..41476).3" Target="EXTERNAL" />
<Link Source="10319:[41406..41476).3" Target="10319:[41302..41665).3" />
<Link Source="10319:[41464..41476).3" Target="10319:[41406..41476).3" />
<Link Source="10319:[44751..44765).3" Target="10287:[1477..1497).2" />
<Link Source="10319:[84201..84218).3" Target="10287:[1477..1497).2" />
<Link Source="10319:[84233..84242).3" Target="10287:[1477..1497).2" />
<Link Source="10319:[84374..84391).3" Target="10319:[44751..44765).3" />
<Link Source="10319:[84374..84391).3" Target="10287:[1477..1497).2" />
<Link Source="10319:[84406..84447).3" Target="10319:[44751..44765).3" />
<Link Source="10319:[84406..84447).3" Target="10287:[1477..1497).2" />
<Link Source="10319:[84462..84508).3" Target="10319:[44751..44765).3" />
<Link Source="10319:[84462..84508).3" Target="10287:[1477..1497).2" />
<Link Source="10319:[84124..109887).3" Target="10287:[1477..1497).2" />
<Link Source="10319:[85320..85348).9" Target="10287:[1477..1497).2" />
<Link Source="10319:[85320..85348).10" Target="10319:[84201..84218).3" />
<Link Source="10319:[85320..85348).10" Target="10319:[85320..85348).9" />
<Link Source="10319:[85320..85348).10" Target="10287:[1477..1497).2" />
<Link Source="10319:[85366..85400).9" Target="10287:[1477..1497).2" />
<Link Source="10319:[85366..85400).10" Target="10319:[84201..84218).3" />
<Link Source="10319:[85366..85400).10" Target="10319:[85366..85400).9" />
<Link Source="10319:[85366..85400).10" Target="10287:[1477..1497).2" />
<Link Source="10319:[85467..85484).5" Target="10287:[1477..1497).2" />
<Link Source="10319:[104874..105336).7" Target="10319:[43504..43546).12" />
<Link Source="10319:[104874..105336).7" Target="EXTERNAL" />
<Link Source="10319:[105368..106708).3" Target="10319:[84201..84218).3" />
<Link Source="10319:[105368..106708).3" Target="10319:[43504..43546).12" />
<Link Source="10319:[84691..84861).5" Target="10319:[43504..43546).12" />
<Link Source="10319:[84691..84861).5" Target="10319:[105368..106708).3" />
<Link Source="10319:[84691..84861).5" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).5" Target="10287:[1477..1497).2" />
<Link Source="10354:[11428..11441).5" Target="10287:[1477..1497).2" />
<Link Source="10319:[45408..45422).3" Target="10287:[1477..1497).2" />
<Link Source="10287:[2377..2471).7" Target="10319:[43504..43546).12" />
<Link Source="10287:[2377..2471).7" Target="10287:[1477..1497).2" />
<Link Source="10287:[1215..1253).3" Target="10319:[43504..43546).12" />
<Link Source="10319:[15548..15561).2" Target="10319:[105368..106708).3" />
<Link Source="10319:[15544..15884).3" Target="10319:[15548..15561).2" />
<Link Source="10319:[15544..15884).3" Target="10319:[105368..106708).3" />
<Link Source="10319:[51987..52009).2" Target="10319:[105368..106708).3" />
<Link Source="10287:[2033..2081).4" Target="10319:[105368..106708).3" />
<Link Source="10287:[2033..2081).4" Target="10319:[43504..43546).12" />
<Link Source="10287:[2033..2081).4" Target="EXTERNAL" />
<Link Source="10319:[53246..53267).2" Target="10319:[51987..52009).2" />
<Link Source="10319:[53246..53267).2" Target="10319:[105368..106708).3" />
<Link Source="10319:[53387..53416).5" Target="10319:[105368..106708).3" />
<Link Source="10319:[53430..53464).5" Target="10319:[105368..106708).3" />
<Link Source="10286:[21504..21529).2" Target="10319:[105368..106708).3" />
<Link Source="10286:[21546..21561).2" Target="10319:[105368..106708).3" />
<Link Source="10286:[21563..21583).2" Target="10319:[105368..106708).3" />
<Link Source="10286:[22044..22069).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[22044..22069).2" Target="10319:[105368..106708).3" />
<Link Source="10286:[22086..22108).2" Target="10286:[21546..21561).2" />
<Link Source="10286:[22086..22108).2" Target="10319:[105368..106708).3" />
<Link Source="10286:[22110..22130).2" Target="10286:[21563..21583).2" />
<Link Source="10286:[22110..22130).2" Target="10319:[105368..106708).3" />
<Link Source="10286:[22421..22557).13" Target="10286:[22086..22108).2" />
<Link Source="10286:[22421..22557).13" Target="10286:[21504..21529).2" />
<Link Source="10286:[22421..22557).14" Target="10286:[22110..22130).2" />
<Link Source="10286:[22421..22557).14" Target="10286:[21504..21529).2" />
<Link Source="10286:[15616..15690).6" Target="10286:[21504..21529).2" />
<Link Source="10286:[15616..15690).7" Target="10286:[21504..21529).2" />
<Link Source="10286:[15616..15690).7" Target="10319:[105368..106708).3" />
<Link Source="10286:[15616..15690).7" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23056..23081).2" Target="10286:[22044..22069).2" />
<Link Source="10286:[23056..23081).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23124..23146).2" Target="10286:[22421..22557).13" />
<Link Source="10286:[23124..23146).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23161..23181).2" Target="10286:[22421..22557).14" />
<Link Source="10286:[23161..23181).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23281..23301).2" Target="10286:[22044..22069).2" />
<Link Source="10286:[23281..23301).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23380..23684).8" Target="10286:[21504..21529).2" />
<Link Source="10286:[23380..23684).8" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).3" Target="10286:[21504..21529).2" />
<Link Source="10286:[23893..24026).3" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).3" Target="10286:[23161..23181).2" />
<Link Source="10286:[24545..24641).3" Target="10286:[21504..21529).2" />
<Link Source="10286:[24655..25349).2" Target="10286:[24545..24641).3" />
<Link Source="10286:[24655..25349).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26910..26935).2" Target="10286:[23056..23081).2" />
<Link Source="10286:[26910..26935).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26952..26974).2" Target="10286:[23124..23146).2" />
<Link Source="10286:[26952..26974).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[27002..27022).2" Target="10286:[23281..23301).2" />
<Link Source="10286:[27002..27022).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[27048..27088).5" Target="10286:[21504..21529).2" />
<Link Source="10286:[27048..27088).6" Target="10286:[26910..26935).2" />
<Link Source="10286:[27048..27088).6" Target="10286:[27048..27088).5" />
<Link Source="10286:[27048..27088).6" Target="10286:[21504..21529).2" />
<Link Source="10286:[27208..27236).3" Target="10286:[21504..21529).2" />
<Link Source="10286:[27250..27722).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[27738..27845).4" Target="10286:[21504..21529).2" />
<Link Source="10286:[27738..27845).5" Target="10286:[27208..27236).3" />
<Link Source="10286:[27738..27845).5" Target="10286:[27738..27845).4" />
<Link Source="10286:[27738..27845).5" Target="10286:[21504..21529).2" />
<Link Source="10286:[27861..27873).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26281..26812).2" Target="10286:[27861..27873).2" />
<Link Source="10286:[26281..26812).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26450..26769).2" Target="10286:[24545..24641).3" />
<Link Source="10286:[26450..26769).2" Target="10286:[26281..26812).2" />
<Link Source="10287:[2377..2471).9" Target="10319:[51987..52009).2" />
<Link Source="10287:[2377..2471).9" Target="10319:[105368..106708).3" />
<Link Source="10287:[2539..2781).38" Target="10319:[51987..52009).2" />
<Link Source="10287:[2539..2781).38" Target="10286:[21504..21529).2" />
<Link Source="10287:[791..833).5" Target="10287:[2539..2781).38" />
<Link Source="10287:[791..833).5" Target="10319:[51987..52009).2" />
<Link Source="10313:[1494..2257).2" Target="10313:[1230..1280).1" />
<Link Source="10313:[1494..2257).2" Target="10287:[2539..2781).38" />
<Link Source="10313:[1494..2257).2" Target="25002:[4395..4432).1" />
<Link Source="10313:[2324..3491).2" Target="10313:[1295..1337).1" />
<Link Source="10313:[2324..3491).2" Target="10287:[2539..2781).38" />
<Link Source="10313:[2324..3491).2" Target="25002:[4395..4432).1" />
<Link Source="10313:[2390..2435).1" Target="10313:[2324..3491).2" />
<Link Source="10313:[2453..3476).1" Target="10313:[1295..1337).1" />
<Link Source="10313:[2453..3476).1" Target="10313:[2324..3491).2" />
<Link Source="10313:[2523..2541).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[2523..2541).1" Target="10287:[2539..2781).38" />
<Link Source="10313:[2563..2675).1" Target="10313:[2523..2541).1" />
<Link Source="10313:[2563..2675).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[2699..3019).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[2699..3019).2" Target="10313:[1442..1480).1" />
<Link Source="10313:[2699..3019).2" Target="10313:[2699..3019).1" />
<Link Source="10313:[2699..3019).2" Target="10313:[2453..3476).1" />
<Link Source="10313:[3043..3457).1" Target="10313:[2523..2541).1" />
<Link Source="10313:[3043..3457).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[3043..3457).2" Target="10313:[2390..2435).1" />
<Link Source="10313:[3043..3457).2" Target="10313:[3043..3457).1" />
<Link Source="10313:[3043..3457).2" Target="10313:[2453..3476).1" />
<Link Source="10313:[3304..3457).1" Target="10313:[1352..1376).1" />
<Link Source="10313:[3304..3457).1" Target="10313:[3043..3457).2" />
<Link Source="10313:[3378..3434).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[3378..3434).1" Target="10313:[3304..3457).1" />
<Link Source="10313:[3378..3434).2" Target="10313:[1391..1416).1" />
<Link Source="10313:[3378..3434).2" Target="10313:[3304..3457).1" />
<Link Source="10313:[3378..3433).1" Target="10313:[3304..3457).1" />
<Link Source="10313:[720..733).1" Target="10313:[3378..3434).1" />
<Link Source="10313:[720..733).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[735..760).1" Target="10313:[3378..3434).2" />
<Link Source="10313:[735..760).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[666..931).1" Target="10313:[1171..3563).1" />
<Link Source="10313:[666..931).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[786..826).1" Target="10313:[720..733).1" />
<Link Source="10313:[786..826).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[806..825).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[979..992).1" Target="10313:[786..826).1" />
<Link Source="10313:[979..992).1" Target="10313:[806..825).1" />
<Link Source="10313:[1018..1051).1" Target="10313:[979..992).1" />
<Link Source="10313:[1018..1051).1" Target="10287:[2539..2781).38" />
<Link Source="10313:[1018..1051).1" Target="10313:[806..825).1" />
<Link Source="10313:[1065..1148).1" Target="10313:[806..825).1" />
<Link Source="10313:[1065..1148).2" Target="10313:[1018..1051).1" />
<Link Source="10313:[1065..1148).2" Target="10287:[2539..2781).38" />
<Link Source="10313:[1065..1148).2" Target="10313:[1065..1148).1" />
<Link Source="10313:[1065..1148).2" Target="10313:[806..825).1" />
<Link Source="10313:[1072..1093).1" Target="10313:[1065..1148).2" />
<Link Source="10313:[1072..1093).1" Target="10313:[806..825).1" />
<Link Source="10313:[840..920).1" Target="10313:[720..733).1" />
<Link Source="10313:[840..920).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[840..920).2" Target="10313:[1072..1093).1" />
<Link Source="10313:[840..920).2" Target="10313:[3378..3433).1" />
<Link Source="10313:[840..920).3" Target="10313:[720..733).1" />
<Link Source="10313:[840..920).3" Target="10287:[2539..2781).38" />
<Link Source="10313:[840..920).3" Target="10313:[1072..1093).1" />
<Link Source="10313:[840..920).3" Target="10313:[3378..3433).1" />
<Link Source="10313:[840..920).4" Target="10313:[735..760).1" />
<Link Source="10313:[840..920).4" Target="10313:[3378..3433).1" />
<Link Source="10313:[847..919).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[3733..3747).1" Target="10313:[840..920).1" />
<Link Source="10313:[3733..3747).1" Target="10313:[847..919).1" />
<Link Source="10313:[3749..3766).1" Target="10313:[840..920).2" />
<Link Source="10313:[3749..3766).1" Target="10313:[847..919).1" />
<Link Source="10313:[3768..3779).1" Target="10313:[840..920).3" />
<Link Source="10313:[3768..3779).1" Target="10313:[847..919).1" />
<Link Source="10313:[3781..3806).1" Target="10313:[840..920).4" />
<Link Source="10313:[3781..3806).1" Target="10313:[847..919).1" />
<Link Source="10313:[3691..5083).1" Target="10313:[666..931).1" />
<Link Source="10313:[3691..5083).1" Target="10313:[847..919).1" />
<Link Source="10313:[3832..3924).1" Target="10313:[3768..3779).1" />
<Link Source="10313:[3832..3924).1" Target="10313:[847..919).1" />
<Link Source="10313:[3940..4044).1" Target="10313:[3691..5083).1" />
<Link Source="10313:[3940..4044).1" Target="10313:[1072..1093).1" />
<Link Source="10313:[3940..4044).1" Target="10313:[847..919).1" />
<Link Source="10313:[3940..4044).2" Target="EXTERNAL" />
<Link Source="10313:[3940..4044).2" Target="10313:[847..919).1" />
<Link Source="10313:[4060..5043).1" Target="10313:[3691..5083).1" />
<Link Source="10313:[4060..5043).1" Target="10313:[847..919).1" />
<Link Source="10313:[4060..5043).2" Target="10313:[847..919).1" />
<Link Source="10313:[4210..4315).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4335..4374).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4392..4543).1" Target="10313:[4335..4374).1" />
<Link Source="10313:[4392..4543).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4392..4543).2" Target="10313:[4060..5043).1" />
<Link Source="10313:[4698..4727).1" Target="10313:[4060..5043).1" />
<Link Source="10286:[8381..8389).1" Target="10313:[4060..5043).1" />
<Link Source="10286:[8381..8389).1" Target="10313:[4698..4727).1" />
<Link Source="10286:[8384..8389).1" Target="10313:[4698..4727).1" />
<Link Source="10313:[4676..4801).1" Target="10286:[8384..8389).1" />
<Link Source="10313:[4676..4801).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4676..4801).2" Target="10313:[3940..4044).1" />
<Link Source="10313:[4676..4801).2" Target="10313:[4676..4801).1" />
<Link Source="10313:[4676..4801).2" Target="10313:[4060..5043).1" />
<Link Source="10313:[4825..4858).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[5095..5688).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[5095..5688).1" Target="10313:[4825..4858).1" />
<Link Source="10313:[5190..5219).1" Target="10313:[4825..4858).1" />
<Link Source="10307:[1439..1480).5" Target="10313:[5095..5688).1" />
<Link Source="10307:[1439..1480).5" Target="10313:[5190..5219).1" />
<Link Source="10307:[1445..1478).5" Target="10307:[1439..1480).5" />
<Link Source="10307:[1445..1478).5" Target="10313:[3940..4044).1" />
<Link Source="10307:[1445..1478).5" Target="10313:[5190..5219).1" />
<Link Source="10313:[5159..5220).1" Target="10307:[1445..1478).5" />
<Link Source="10313:[5159..5220).1" Target="10313:[4825..4858).1" />
<Link Source="10313:[5236..5677).1" Target="10313:[5159..5220).1" />
<Link Source="10313:[5236..5677).1" Target="10313:[3940..4044).1" />
<Link Source="10313:[5236..5677).1" Target="10313:[4825..4858).1" />
<Link Source="10313:[5488..5662).1" Target="10313:[5159..5220).1" />
<Link Source="10313:[5488..5662).1" Target="10313:[3940..4044).1" />
<Link Source="10313:[5488..5662).1" Target="EXTERNAL" />
<Link Source="10313:[5488..5662).1" Target="10313:[5236..5677).1" />
<Link Source="10313:[5608..5633).1" Target="10313:[5236..5677).1" />
<Link Source="10346:[7562..7572).1" Target="10313:[5608..5633).1" />
<Link Source="10346:[7562..7572).1" Target="10313:[3940..4044).1" />
<Link Source="10313:[5488..5662).2" Target="10346:[7562..7572).1" />
<Link Source="10313:[5488..5662).2" Target="10313:[5236..5677).1" />
<Link Source="10313:[4821..5028).1" Target="10313:[5488..5662).2" />
<Link Source="10313:[4821..5028).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4996..5009).1" Target="10313:[4821..5028).1" />
<Link Source="10313:[840..920).5" Target="10313:[4996..5009).1" />
<Link Source="10313:[840..920).5" Target="10313:[3378..3433).1" />
<Link Source="10313:[3537..3552).2" Target="10313:[2390..2435).1" />
<Link Source="10313:[3537..3552).2" Target="10313:[3043..3457).2" />
<Link Source="10313:[3537..3552).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[20392..20435).1" Target="10319:[20002..20025).2" />
<Link Source="10319:[20392..20435).1" Target="10346:[7562..7572).1" />
<Link Source="10319:[20392..20435).2" Target="10319:[20027..20052).2" />
<Link Source="10319:[20392..20435).2" Target="10346:[7562..7572).1" />
<Link Source="10319:[20399..20434).1" Target="10346:[7562..7572).1" />
<Link Source="10319:[27647..28051).1" Target="10319:[20392..20435).1" />
<Link Source="10319:[27647..28051).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27647..28051).2" Target="10319:[20392..20435).2" />
<Link Source="10319:[27647..28051).2" Target="10319:[20399..20434).1" />
<Link Source="10319:[27647..28051).3" Target="10319:[19916..30085).2" />
<Link Source="10319:[27647..28051).3" Target="10319:[20399..20434).1" />
<Link Source="10319:[27790..27840).1" Target="10319:[27647..28051).1" />
<Link Source="10319:[27790..27840).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27858..27923).1" Target="10319:[27790..27840).1" />
<Link Source="10319:[27858..27923).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27858..27923).2" Target="10319:[27647..28051).2" />
<Link Source="10319:[27858..27923).2" Target="10319:[20399..20434).1" />
<Link Source="10319:[27869..27922).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[39111..39136).1" Target="10319:[27858..27923).1" />
<Link Source="10319:[39111..39136).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39138..39163).1" Target="10319:[27858..27923).2" />
<Link Source="10319:[39138..39163).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39062..39279).1" Target="10319:[27647..28051).3" />
<Link Source="10319:[39062..39279).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).1" Target="10319:[39111..39136).1" />
<Link Source="10319:[39189..39268).1" Target="10346:[7562..7572).1" />
<Link Source="10319:[39189..39268).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).6" Target="10319:[39138..39163).1" />
<Link Source="10319:[39189..39268).6" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).7" Target="10319:[39111..39136).1" />
<Link Source="10319:[39189..39268).7" Target="10319:[27869..27922).1" />
<Link Source="10319:[39196..39267).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[73460..73478).1" Target="10319:[39189..39268).1" />
<Link Source="10319:[73460..73478).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73480..73505).1" Target="10319:[39189..39268).6" />
<Link Source="10319:[73480..73505).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73507..73522).1" Target="10319:[39189..39268).7" />
<Link Source="10319:[73507..73522).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73420..73626).1" Target="10319:[39062..39279).1" />
<Link Source="10319:[73420..73626).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[73420..73626).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[39189..39268).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).2" Target="10319:[73460..73478).1" />
<Link Source="10319:[73548..73615).2" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).3" Target="10319:[73507..73522).1" />
<Link Source="10319:[73548..73615).3" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).4" Target="10319:[73480..73505).1" />
<Link Source="10319:[73548..73615).4" Target="10319:[39196..39267).1" />
<Link Source="10319:[73555..73614).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73685..73714).1" Target="10319:[73548..73615).1" />
<Link Source="10319:[73685..73714).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73716..73734).1" Target="10319:[73548..73615).2" />
<Link Source="10319:[73716..73734).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73736..73751).1" Target="10319:[73548..73615).3" />
<Link Source="10319:[73736..73751).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73753..73778).1" Target="10319:[73548..73615).4" />
<Link Source="10319:[73753..73778).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73804..73868).1" Target="10319:[73716..73734).1" />
<Link Source="10319:[73804..73868).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73685..73714).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73804..73868).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[39189..39268).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73882..73975).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73882..73975).2" Target="10319:[73804..73868).2" />
<Link Source="10319:[73882..73975).2" Target="10319:[73882..73975).1" />
<Link Source="10319:[73882..73975).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).1" Target="10319:[73804..73868).2" />
<Link Source="10319:[73989..74045).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).2" Target="10319:[73753..73778).1" />
<Link Source="10319:[73989..74045).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).3" Target="10319:[73736..73751).1" />
<Link Source="10319:[73989..74045).3" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74044).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[76345..76358).4" Target="10319:[73989..74045).1" />
<Link Source="10319:[76345..76358).4" Target="10319:[73989..74044).1" />
<Link Source="10319:[76360..76385).4" Target="10319:[73989..74045).2" />
<Link Source="10319:[76360..76385).4" Target="10319:[73989..74044).1" />
<Link Source="10319:[76387..76402).4" Target="10319:[73989..74045).3" />
<Link Source="10319:[76387..76402).4" Target="10319:[73989..74044).1" />
<Link Source="10319:[74059..74077).1" Target="10319:[73804..73868).2" />
<Link Source="10319:[74059..74077).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[27941..28036).1" Target="10319:[27790..27840).1" />
<Link Source="10319:[27941..28036).1" Target="10319:[76345..76358).4" />
<Link Source="10319:[27941..28036).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27975..28028).1" Target="10319:[20399..20434).1" />
<Link Source="10286:[10010..10027).4" Target="10319:[27941..28036).1" />
<Link Source="10286:[10010..10027).4" Target="10319:[27975..28028).1" />
<Link Source="10286:[9966..10197).4" Target="10319:[27647..28051).3" />
<Link Source="10286:[9966..10197).4" Target="10319:[27975..28028).1" />
<Link Source="10319:[27941..28036).4" Target="10319:[74059..74077).1" />
<Link Source="10319:[27941..28036).4" Target="10319:[20399..20434).1" />
<Link Source="10319:[28030..28034).1" Target="10319:[20399..20434).1" />
<Link Source="10287:[2888..2927).1" Target="10319:[27941..28036).4" />
<Link Source="10287:[2888..2927).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[2961..3037).1" Target="10287:[2888..2927).1" />
<Link Source="10287:[2961..3037).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[2961..3037).2" Target="10319:[28030..28034).1" />
<Link Source="10287:[2968..3036).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[718..757).4" Target="10287:[2961..3037).1" />
<Link Source="10287:[718..757).4" Target="10287:[2968..3036).1" />
<Link Source="10287:[666..1076).4" Target="10287:[2961..3037).2" />
<Link Source="10287:[666..1076).4" Target="10287:[2968..3036).1" />
<Link Source="10287:[791..833).7" Target="10287:[718..757).4" />
<Link Source="10287:[791..833).7" Target="10287:[2968..3036).1" />
<Link Source="10319:[27941..28036).5" Target="10287:[2961..3037).2" />
<Link Source="10319:[27941..28036).5" Target="10319:[20399..20434).1" />
<Link Source="10319:[27941..28036).7" Target="10319:[20399..20434).1" />
<Link Source="10319:[27941..28036).9" Target="10286:[10010..10027).4" />
<Link Source="10319:[27941..28036).9" Target="10319:[27941..28036).5" />
<Link Source="10319:[27941..28036).9" Target="10319:[27941..28036).7" />
<Link Source="10319:[27941..28036).9" Target="10287:[718..757).4" />
<Link Source="10319:[27941..28036).9" Target="10287:[666..1076).4" />
<Link Source="10319:[27941..28036).9" Target="10319:[20399..20434).1" />
<Link Source="10319:[15548..15561).3" Target="10319:[27941..28036).9" />
<Link Source="10319:[15544..15884).5" Target="10319:[15548..15561).3" />
<Link Source="10319:[15544..15884).5" Target="10319:[27941..28036).9" />
<Link Source="10319:[15783..15809).1" Target="10319:[15544..15884).5" />
<Link Source="10319:[15783..15865).1" Target="10319:[15783..15809).1" />
<Link Source="10319:[15783..15865).1" Target="10319:[15544..15884).5" />
<Link Source="10319:[15783..15865).2" Target="10319:[14862..16302).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[15544..15884).5" />
<Link Source="10319:[15783..15865).3" Target="10319:[14931..14954).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[15544..15884).5" />
<Link Source="10319:[15783..15865).4" Target="10319:[14956..14981).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[15544..15884).5" />
<Link Source="10319:[15783..15865).6" Target="10319:[15544..15884).5" />
<Link Source="10286:[21546..21561).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[21546..21561).3" Target="10319:[15783..15865).6" />
<Link Source="10286:[21563..21583).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[21563..21583).3" Target="10319:[15783..15865).6" />
<Link Source="10286:[22044..22069).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[22044..22069).3" Target="10319:[15783..15865).6" />
<Link Source="10286:[22086..22108).3" Target="10286:[21546..21561).3" />
<Link Source="10286:[22086..22108).3" Target="10319:[15783..15865).6" />
<Link Source="10286:[22110..22130).3" Target="10286:[21563..21583).3" />
<Link Source="10286:[22110..22130).3" Target="10319:[15783..15865).6" />
<Link Source="10286:[15616..15690).11" Target="10319:[15783..15865).1" />
<Link Source="10286:[15616..15690).12" Target="10319:[15783..15865).1" />
<Link Source="10286:[15616..15690).12" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[23056..23081).3" Target="10286:[22044..22069).3" />
<Link Source="10286:[23056..23081).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[23124..23146).3" Target="10286:[22086..22108).3" />
<Link Source="10286:[23124..23146).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[23161..23181).3" Target="10286:[22110..22130).3" />
<Link Source="10286:[23161..23181).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[23281..23301).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[23380..23684).15" Target="10319:[15783..15865).1" />
<Link Source="10286:[23380..23684).15" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).5" Target="10319:[15783..15865).1" />
<Link Source="10286:[23893..24026).5" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).5" Target="10286:[23161..23181).3" />
<Link Source="10286:[24545..24641).5" Target="10319:[15783..15865).1" />
<Link Source="10286:[24655..25349).3" Target="10286:[24545..24641).5" />
<Link Source="10286:[24655..25349).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[26910..26935).3" Target="10286:[23056..23081).3" />
<Link Source="10286:[26910..26935).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[26952..26974).3" Target="10286:[23124..23146).3" />
<Link Source="10286:[26952..26974).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[27002..27022).3" Target="10286:[23281..23301).3" />
<Link Source="10286:[27002..27022).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[27048..27088).9" Target="10319:[15783..15865).1" />
<Link Source="10286:[27048..27088).10" Target="10286:[26910..26935).3" />
<Link Source="10286:[27048..27088).10" Target="10286:[27048..27088).9" />
<Link Source="10286:[27048..27088).10" Target="10319:[15783..15865).1" />
<Link Source="10286:[27208..27236).5" Target="10319:[15783..15865).1" />
<Link Source="10286:[27250..27722).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[27738..27845).7" Target="10319:[15783..15865).1" />
<Link Source="10286:[27738..27845).8" Target="10286:[27208..27236).5" />
<Link Source="10286:[27738..27845).8" Target="10286:[27738..27845).7" />
<Link Source="10286:[27738..27845).8" Target="10319:[15783..15865).1" />
<Link Source="10286:[27861..27873).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[26281..26812).3" Target="10286:[27861..27873).3" />
<Link Source="10286:[26281..26812).3" Target="10319:[15783..15865).1" />
<Link Source="10286:[26450..26769).3" Target="10286:[24545..24641).5" />
<Link Source="10286:[26450..26769).3" Target="10286:[26281..26812).3" />
<Link Source="10287:[1683..1690).2" Target="10319:[27941..28036).9" />
<Link Source="10287:[1683..1690).2" Target="10319:[51939..51953).2" />
<Link Source="10845:[522..547).3" Target="25002:[4395..4432).3" />
<Link Source="10845:[522..547).3" Target="25002:[4395..4432).1" />
<Link Source="10845:[549..580).3" Target="25002:[4395..4432).3" />
<Link Source="10845:[549..580).3" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).5" Target="25002:[4395..4432).3" />
<Link Source="10845:[499..728).5" Target="25002:[4395..4432).1" />
<Link Source="10845:[602..612).3" Target="10845:[522..547).3" />
<Link Source="10845:[602..612).3" Target="25002:[4395..4432).1" />
<Link Source="10845:[637..638).5" Target="25002:[4395..4432).1" />
<Link Source="10845:[660..678).3" Target="10845:[549..580).3" />
<Link Source="10845:[660..678).3" Target="25002:[4395..4432).1" />
<Link Source="10845:[701..705).5" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).6" Target="25002:[4395..4432).1" />
<Link Source="10845:[764..789).3" Target="10845:[602..612).3" />
<Link Source="10845:[764..789).3" Target="10845:[499..728).6" />
<Link Source="10845:[791..816).3" Target="10845:[637..638).5" />
<Link Source="10845:[791..816).3" Target="10845:[499..728).6" />
<Link Source="10845:[818..841).3" Target="10845:[660..678).3" />
<Link Source="10845:[818..841).3" Target="10845:[499..728).6" />
<Link Source="10845:[843..878).3" Target="10845:[701..705).5" />
<Link Source="10845:[843..878).3" Target="10845:[499..728).6" />
<Link Source="10845:[740..997).5" Target="10845:[499..728).5" />
<Link Source="10845:[740..997).5" Target="10845:[499..728).6" />
<Link Source="10845:[900..910).3" Target="10845:[764..789).3" />
<Link Source="10845:[900..910).3" Target="10845:[499..728).6" />
<Link Source="10845:[912..933).3" Target="10845:[791..816).3" />
<Link Source="10845:[912..933).3" Target="10845:[499..728).6" />
<Link Source="10845:[935..953).3" Target="10845:[818..841).3" />
<Link Source="10845:[935..953).3" Target="10845:[499..728).6" />
<Link Source="10845:[955..974).3" Target="10845:[843..878).3" />
<Link Source="10845:[955..974).3" Target="10845:[499..728).6" />
<Link Source="10845:[740..997).6" Target="10845:[499..728).6" />
<Link Source="10843:[1173..1198).3" Target="10845:[900..910).3" />
<Link Source="10843:[1173..1198).3" Target="10845:[740..997).6" />
<Link Source="10843:[1200..1225).3" Target="10845:[912..933).3" />
<Link Source="10843:[1200..1225).3" Target="10845:[740..997).6" />
<Link Source="10843:[1227..1250).3" Target="10845:[935..953).3" />
<Link Source="10843:[1227..1250).3" Target="10845:[740..997).6" />
<Link Source="10843:[1252..1287).3" Target="10845:[955..974).3" />
<Link Source="10843:[1252..1287).3" Target="10845:[740..997).6" />
<Link Source="10843:[1147..1833).3" Target="10845:[740..997).5" />
<Link Source="10843:[1147..1833).3" Target="10845:[740..997).6" />
<Link Source="10843:[734..744).3" Target="10843:[1147..1833).3" />
<Link Source="10843:[734..744).3" Target="10845:[740..997).6" />
<Link Source="10843:[778..799).3" Target="10843:[1147..1833).3" />
<Link Source="10843:[778..799).3" Target="10845:[740..997).6" />
<Link Source="10843:[835..853).3" Target="10843:[1147..1833).3" />
<Link Source="10843:[835..853).3" Target="10845:[740..997).6" />
<Link Source="10843:[1113..1134).3" Target="10843:[1147..1833).3" />
<Link Source="10843:[1113..1134).3" Target="10845:[740..997).6" />
<Link Source="10843:[1313..1354).9" Target="10845:[740..997).6" />
<Link Source="10843:[1313..1354).10" Target="10843:[1173..1198).3" />
<Link Source="10843:[1313..1354).10" Target="10843:[1313..1354).9" />
<Link Source="10843:[1313..1354).10" Target="10845:[740..997).6" />
<Link Source="10843:[1368..1474).11" Target="10845:[740..997).6" />
<Link Source="10843:[1368..1474).12" Target="10843:[1252..1287).3" />
<Link Source="10843:[1368..1474).12" Target="10843:[1368..1474).11" />
<Link Source="10843:[1368..1474).12" Target="10845:[740..997).6" />
<Link Source="10843:[1488..1600).11" Target="10845:[740..997).6" />
<Link Source="10843:[1488..1600).12" Target="10843:[1252..1287).3" />
<Link Source="10843:[1488..1600).12" Target="10843:[1488..1600).11" />
<Link Source="10843:[1488..1600).12" Target="10845:[740..997).6" />
<Link Source="10843:[1616..1631).3" Target="10843:[1173..1198).3" />
<Link Source="10843:[1616..1631).3" Target="10843:[1147..1833).3" />
<Link Source="10843:[1616..1631).3" Target="10845:[740..997).6" />
<Link Source="10843:[1659..1685).3" Target="10843:[1200..1225).3" />
<Link Source="10843:[1659..1685).3" Target="10843:[1147..1833).3" />
<Link Source="10843:[1659..1685).3" Target="10845:[740..997).6" />
<Link Source="10843:[1724..1742).3" Target="10843:[1227..1250).3" />
<Link Source="10843:[1724..1742).3" Target="10843:[1147..1833).3" />
<Link Source="10843:[1724..1742).3" Target="10845:[740..997).6" />
<Link Source="10843:[1778..1799).3" Target="10843:[1252..1287).3" />
<Link Source="10843:[1778..1799).3" Target="10843:[1147..1833).3" />
<Link Source="10843:[1778..1799).3" Target="10845:[740..997).6" />
<Link Source="10076:[5223..5250).14" Target="10319:[15783..15865).1" />
<Link Source="10076:[5223..5250).14" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).14" Target="10076:[4989..5047).1" />
<Link Source="10077:[2398..2415).1" Target="10319:[15783..15865).1" />
<Link Source="10077:[2398..2415).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2362..2496).1" Target="10319:[15783..15865).1" />
<Link Source="10077:[2362..2496).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2449..2481).1" Target="10077:[2398..2415).1" />
<Link Source="10077:[2449..2481).1" Target="10319:[15783..15865).1" />
<Link Source="10077:[2449..2481).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2456..2480).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2877..2892).6" Target="10077:[2449..2481).1" />
<Link Source="10077:[2877..2892).6" Target="10077:[2456..2480).1" />
<Link Source="10077:[2852..2986).6" Target="10077:[2362..2496).1" />
<Link Source="10077:[2852..2986).6" Target="10077:[2456..2480).1" />
<Link Source="10077:[2926..2971).33" Target="10077:[2852..2986).6" />
<Link Source="10077:[2926..2971).33" Target="10077:[2877..2892).6" />
<Link Source="10077:[2926..2971).33" Target="10319:[15783..15865).1" />
<Link Source="10077:[2926..2971).33" Target="10077:[2456..2480).1" />
<Link Source="10077:[15216..15245).1" Target="10077:[2926..2971).33" />
<Link Source="10077:[15216..15245).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[15171..15372).1" Target="10077:[2926..2971).33" />
<Link Source="10077:[15171..15372).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[15279..15357).1" Target="10077:[15216..15245).1" />
<Link Source="10077:[15279..15357).1" Target="10077:[2926..2971).33" />
<Link Source="10077:[15279..15357).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[15286..15310).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[2877..2892).7" Target="10077:[15279..15357).1" />
<Link Source="10077:[2877..2892).7" Target="10077:[15286..15310).1" />
<Link Source="10077:[2852..2986).7" Target="10077:[15171..15372).1" />
<Link Source="10077:[2852..2986).7" Target="10077:[15286..15310).1" />
<Link Source="10077:[2926..2971).36" Target="10077:[2852..2986).7" />
<Link Source="10077:[2926..2971).36" Target="10077:[2877..2892).7" />
<Link Source="10077:[2926..2971).36" Target="10077:[2926..2971).33" />
<Link Source="10077:[2926..2971).36" Target="10077:[15286..15310).1" />
<Link Source="10077:[34685..34715).2" Target="10077:[15286..15310).1" />
<Link Source="10077:[31258..31297).2" Target="10077:[39766..39774).2" />
<Link Source="10077:[31258..31297).2" Target="10077:[34685..34715).2" />
<Link Source="10077:[31490..32331).13" Target="10077:[34685..34715).2" />
<Link Source="10077:[32358..32401).2" Target="10077:[34685..34715).2" />
<Link Source="10077:[32567..32606).4" Target="10077:[32358..32401).2" />
<Link Source="10077:[44231..44317).57" Target="10077:[2926..2971).36" />
<Link Source="10077:[44231..44317).57" Target="10077:[32567..32606).4" />
<Link Source="10077:[44231..44317).59" Target="10077:[32567..32606).4" />
<Link Source="10077:[44335..44374).31" Target="10077:[32567..32606).4" />
<Link Source="10077:[44342..44373).8" Target="10077:[32567..32606).4" />
<Link Source="10076:[853..1034).8" Target="10077:[44335..44374).31" />
<Link Source="10076:[853..1034).8" Target="10077:[44342..44373).8" />
<Link Source="10077:[32557..32607).15" Target="10077:[44335..44374).31" />
<Link Source="10077:[32557..32607).15" Target="10077:[32358..32401).2" />
<Link Source="10077:[32627..32647).4" Target="10077:[32358..32401).2" />
<Link Source="10077:[32670..32681).4" Target="10077:[32358..32401).2" />
<Link Source="10077:[32665..34501).35" Target="10077:[32557..32607).15" />
<Link Source="10077:[32665..34501).35" Target="10077:[32358..32401).2" />
<Link Source="10077:[32665..34501).36" Target="10077:[32627..32647).4" />
<Link Source="10077:[32665..34501).36" Target="10077:[32358..32401).2" />
<Link Source="10077:[32665..34501).38" Target="10077:[32358..32401).2" />
<Link Source="10077:[15286..15356).1" Target="10077:[2456..2480).1" />
<Link Source="10307:[3496..3521).4" Target="10077:[2926..2971).36" />
<Link Source="10307:[3496..3521).4" Target="10077:[15286..15356).1" />
<Link Source="10307:[3452..3756).4" Target="10077:[2926..2971).36" />
<Link Source="10307:[3452..3756).4" Target="10077:[15286..15356).1" />
<Link Source="10307:[3547..3745).29" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).29" Target="10077:[15286..15356).1" />
<Link Source="10307:[3555..3600).4" Target="10077:[15286..15356).1" />
<Link Source="10298:[494..511).46" Target="10307:[3547..3745).29" />
<Link Source="10298:[494..511).46" Target="10307:[3555..3600).4" />
<Link Source="10286:[1688..1781).19" Target="10307:[3452..3756).4" />
<Link Source="10286:[1688..1781).19" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).47" Target="10286:[1688..1781).19" />
<Link Source="10298:[471..492).47" Target="10286:[1708..1779).2" />
<Link Source="10286:[1820..1963).19" Target="10307:[3452..3756).4" />
<Link Source="10286:[1820..1963).19" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).48" Target="10286:[1820..1963).19" />
<Link Source="10298:[471..492).48" Target="10286:[1840..1888).2" />
<Link Source="10319:[42478..42805).10" Target="10307:[3452..3756).4" />
<Link Source="10319:[42821..42938).25" Target="10307:[3452..3756).4" />
<Link Source="10319:[42839..42937).4" Target="10307:[3452..3756).4" />
<Link Source="10319:[63849..63870).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63849..63870).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63885..63919).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63885..63919).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63934..63945).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63934..63945).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63960..63969).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63960..63969).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63984..64009).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63984..64009).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63768..64484).4" Target="10307:[3452..3756).4" />
<Link Source="10319:[63768..64484).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[64035..64445).13" Target="10319:[42839..42937).4" />
<Link Source="10319:[64035..64445).14" Target="10319:[63885..63919).4" />
<Link Source="10319:[64035..64445).14" Target="10319:[64035..64445).13" />
<Link Source="10319:[64035..64445).14" Target="10319:[42839..42937).4" />
<Link Source="10319:[64461..64473).7" Target="10319:[42839..42937).4" />
<Link Source="10319:[42821..42938).31" Target="10319:[64461..64473).7" />
<Link Source="10319:[42821..42938).31" Target="10307:[3452..3756).4" />
<Link Source="10319:[42952..43079).10" Target="10307:[3452..3756).4" />
<Link Source="10319:[42952..43079).11" Target="10319:[42821..42938).31" />
<Link Source="10319:[42952..43079).11" Target="10319:[42952..43079).10" />
<Link Source="10319:[42952..43079).11" Target="10307:[3452..3756).4" />
<Link Source="10354:[11312..11328).6" Target="10307:[3452..3756).4" />
<Link Source="10354:[3684..3818).22" Target="10307:[3452..3756).4" />
<Link Source="10354:[3684..3818).22" Target="10354:[11312..11328).6" />
<Link Source="10354:[3720..3803).157" Target="10354:[3684..3818).22" />
<Link Source="10354:[3720..3803).157" Target="10307:[3452..3756).4" />
<Link Source="10354:[3720..3803).157" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).157" Target="10354:[11312..11328).6" />
<Link Source="10354:[3720..3803).158" Target="10354:[11312..11328).6" />
<Link Source="10354:[3720..3803).159" Target="10354:[3684..3818).22" />
<Link Source="10354:[3720..3803).159" Target="10307:[3452..3756).4" />
<Link Source="10354:[3720..3803).159" Target="10354:[3720..3803).158" />
<Link Source="10354:[3720..3803).159" Target="10354:[11312..11328).6" />
<Link Source="10354:[11299..11330).16" Target="10354:[3720..3803).157" />
<Link Source="10354:[11299..11330).16" Target="10307:[3452..3756).4" />
<Link Source="10319:[50330..50355).4" Target="10307:[3452..3756).4" />
<Link Source="10312:[1222..1235).4" Target="10307:[3452..3756).4" />
<Link Source="10312:[5944..5957).4" Target="10312:[1222..1235).4" />
<Link Source="10312:[5944..5957).4" Target="10307:[3452..3756).4" />
<Link Source="10312:[3805..3818).4" Target="10312:[5944..5957).4" />
<Link Source="10312:[3805..3818).4" Target="10307:[3452..3756).4" />
<Link Source="10312:[3905..3919).4" Target="10307:[3452..3756).4" />
<Link Source="10354:[3684..3818).23" Target="10307:[3452..3756).4" />
<Link Source="10354:[3684..3818).23" Target="10312:[3905..3919).4" />
<Link Source="10354:[3720..3803).165" Target="10354:[3684..3818).23" />
<Link Source="10354:[3720..3803).165" Target="10307:[3452..3756).4" />
<Link Source="10354:[3720..3803).165" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).165" Target="10312:[3905..3919).4" />
<Link Source="10354:[3720..3803).166" Target="10312:[3905..3919).4" />
<Link Source="10354:[3720..3803).167" Target="10354:[3684..3818).23" />
<Link Source="10354:[3720..3803).167" Target="10307:[3452..3756).4" />
<Link Source="10354:[3720..3803).167" Target="10354:[3720..3803).166" />
<Link Source="10354:[3720..3803).167" Target="10312:[3905..3919).4" />
<Link Source="10312:[3892..3921).10" Target="10354:[3720..3803).165" />
<Link Source="10312:[3892..3921).10" Target="10307:[3452..3756).4" />
<Link Source="10312:[3935..3968).13" Target="10307:[3452..3756).4" />
<Link Source="10312:[3948..3966).4" Target="10307:[3452..3756).4" />
<Link Source="10353:[4698..4724).9" Target="10312:[3935..3968).13" />
<Link Source="10353:[4698..4724).9" Target="10312:[3948..3966).4" />
<Link Source="10353:[4750..4847).17" Target="10353:[4698..4724).9" />
<Link Source="10353:[4750..4847).17" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).17" Target="10312:[3948..3966).4" />
<Link Source="10353:[4863..5000).33" Target="10353:[4698..4724).9" />
<Link Source="10353:[4863..5000).33" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).33" Target="10312:[3948..3966).4" />
<Link Source="10353:[4863..5000).34" Target="10312:[3948..3966).4" />
<Link Source="10353:[5079..5183).17" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).17" Target="10312:[3948..3966).4" />
<Link Source="10353:[5197..5323).25" Target="10353:[4698..4724).9" />
<Link Source="10353:[5197..5323).25" Target="10353:[5079..5183).17" />
<Link Source="10353:[5197..5323).25" Target="10312:[3948..3966).4" />
<Link Source="10353:[5485..5759).49" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).49" Target="10312:[3948..3966).4" />
<Link Source="10353:[5485..5759).50" Target="10353:[4698..4724).9" />
<Link Source="10353:[5485..5759).50" Target="10353:[5485..5759).49" />
<Link Source="10353:[5485..5759).50" Target="10312:[3948..3966).4" />
<Link Source="10353:[5485..5759).51" Target="10312:[3948..3966).4" />
<Link Source="10353:[5775..5979).33" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).33" Target="10312:[3948..3966).4" />
<Link Source="10353:[5775..5979).35" Target="10353:[4698..4724).9" />
<Link Source="10353:[5775..5979).35" Target="10353:[5775..5979).33" />
<Link Source="10353:[5775..5979).35" Target="10312:[3948..3966).4" />
<Link Source="10353:[5995..6029).25" Target="10353:[5775..5979).35" />
<Link Source="10353:[5995..6029).25" Target="10312:[3948..3966).4" />
<Link Source="10353:[6002..6028).9" Target="10312:[3948..3966).4" />
<Link Source="10353:[6343..6358).9" Target="10353:[5995..6029).25" />
<Link Source="10353:[6343..6358).9" Target="10353:[6002..6028).9" />
<Link Source="10353:[6384..6410).49" Target="10353:[6002..6028).9" />
<Link Source="10353:[6384..6410).50" Target="10353:[6343..6358).9" />
<Link Source="10353:[6384..6410).50" Target="10353:[6384..6410).49" />
<Link Source="10353:[6384..6410).50" Target="10353:[6002..6028).9" />
<Link Source="10312:[5188..5207).4" Target="10307:[3452..3756).4" />
<Link Source="10312:[5209..5220).4" Target="10307:[3452..3756).4" />
<Link Source="10312:[5222..5231).4" Target="10307:[3452..3756).4" />
<Link Source="10312:[5233..5272).4" Target="10307:[3452..3756).4" />
<Link Source="10312:[5274..5295).4" Target="10307:[3452..3756).4" />
<Link Source="10312:[5297..5318).4" Target="10307:[3452..3756).4" />
<Link Source="10312:[5320..5333).4" Target="10312:[3805..3818).4" />
<Link Source="10312:[5320..5333).4" Target="10307:[3452..3756).4" />
<Link Source="10312:[5124..5404).4" Target="10307:[3452..3756).4" />
<Link Source="10312:[4685..4699).9" Target="10307:[3452..3756).4" />
<Link Source="10354:[3684..3818).24" Target="10307:[3452..3756).4" />
<Link Source="10354:[3684..3818).24" Target="10312:[4685..4699).9" />
<Link Source="10354:[3720..3803).173" Target="10354:[3684..3818).24" />
<Link Source="10354:[3720..3803).173" Target="10307:[3452..3756).4" />
<Link Source="10354:[3720..3803).173" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).173" Target="10312:[4685..4699).9" />
<Link Source="10354:[3720..3803).174" Target="10312:[4685..4699).9" />
<Link Source="10354:[3720..3803).175" Target="10354:[3684..3818).24" />
<Link Source="10354:[3720..3803).175" Target="10307:[3452..3756).4" />
<Link Source="10354:[3720..3803).175" Target="10354:[3720..3803).174" />
<Link Source="10354:[3720..3803).175" Target="10312:[4685..4699).9" />
<Link Source="10312:[4680..4787).17" Target="10354:[3720..3803).173" />
<Link Source="10312:[4680..4787).17" Target="10307:[3452..3756).4" />
<Link Source="10312:[4826..5058).41" Target="10307:[3452..3756).4" />
<Link Source="10312:[4826..5058).41" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).42" Target="10307:[3452..3756).4" />
<Link Source="10346:[10761..10774).6" Target="10312:[3805..3818).4" />
<Link Source="10346:[10761..10774).6" Target="10307:[3452..3756).4" />
<Link Source="10346:[10861..10875).6" Target="10307:[3452..3756).4" />
<Link Source="10354:[3684..3818).25" Target="10307:[3452..3756).4" />
<Link Source="10354:[3684..3818).25" Target="10346:[10861..10875).6" />
<Link Source="10354:[3720..3803).181" Target="10354:[3684..3818).25" />
<Link Source="10354:[3720..3803).181" Target="10307:[3452..3756).4" />
<Link Source="10354:[3720..3803).181" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).181" Target="10346:[10861..10875).6" />
<Link Source="10354:[3720..3803).182" Target="10346:[10861..10875).6" />
<Link Source="10354:[3720..3803).183" Target="10354:[3684..3818).25" />
<Link Source="10354:[3720..3803).183" Target="10307:[3452..3756).4" />
<Link Source="10354:[3720..3803).183" Target="10354:[3720..3803).182" />
<Link Source="10354:[3720..3803).183" Target="10346:[10861..10875).6" />
<Link Source="10346:[10848..10877).16" Target="10354:[3720..3803).181" />
<Link Source="10346:[10848..10877).16" Target="10307:[3452..3756).4" />
<Link Source="10346:[10897..10914).6" Target="10307:[3452..3756).4" />
<Link Source="10346:[7666..7775).6" Target="10307:[3452..3756).4" />
<Link Source="10346:[7666..7775).6" Target="10346:[10897..10914).6" />
<Link Source="10346:[7672..7773).16" Target="10346:[7666..7775).6" />
<Link Source="10346:[7672..7773).16" Target="10307:[3452..3756).4" />
<Link Source="10346:[7672..7773).16" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).16" Target="10346:[10897..10914).6" />
<Link Source="10346:[10893..11127).11" Target="10346:[7672..7773).16" />
<Link Source="10346:[10893..11127).11" Target="10307:[3452..3756).4" />
<Link Source="10346:[3525..3638).45" Target="10307:[3452..3756).4" />
<Link Source="10312:[7718..7727).6" Target="10307:[3452..3756).4" />
<Link Source="10312:[7816..7829).6" Target="10346:[10761..10774).6" />
<Link Source="10312:[7816..7829).6" Target="10307:[3452..3756).4" />
<Link Source="10312:[7903..7936).21" Target="10307:[3452..3756).4" />
<Link Source="10312:[7916..7934).6" Target="10307:[3452..3756).4" />
<Link Source="10353:[4698..4724).10" Target="10312:[7903..7936).21" />
<Link Source="10353:[4698..4724).10" Target="10312:[7916..7934).6" />
<Link Source="10353:[4750..4847).19" Target="10353:[4698..4724).10" />
<Link Source="10353:[4750..4847).19" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).19" Target="10312:[7916..7934).6" />
<Link Source="10353:[4863..5000).37" Target="10353:[4698..4724).10" />
<Link Source="10353:[4863..5000).37" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).37" Target="10312:[7916..7934).6" />
<Link Source="10353:[4863..5000).38" Target="10312:[7916..7934).6" />
<Link Source="10353:[5079..5183).19" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).19" Target="10312:[7916..7934).6" />
<Link Source="10353:[5197..5323).28" Target="10353:[4698..4724).10" />
<Link Source="10353:[5197..5323).28" Target="10353:[5079..5183).19" />
<Link Source="10353:[5197..5323).28" Target="10312:[7916..7934).6" />
<Link Source="10353:[5485..5759).55" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).55" Target="10312:[7916..7934).6" />
<Link Source="10353:[5485..5759).56" Target="10353:[4698..4724).10" />
<Link Source="10353:[5485..5759).56" Target="10353:[5485..5759).55" />
<Link Source="10353:[5485..5759).56" Target="10312:[7916..7934).6" />
<Link Source="10353:[5485..5759).57" Target="10312:[7916..7934).6" />
<Link Source="10353:[5775..5979).37" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).37" Target="10312:[7916..7934).6" />
<Link Source="10353:[5775..5979).39" Target="10353:[4698..4724).10" />
<Link Source="10353:[5775..5979).39" Target="10353:[5775..5979).37" />
<Link Source="10353:[5775..5979).39" Target="10312:[7916..7934).6" />
<Link Source="10353:[5995..6029).28" Target="10353:[5775..5979).39" />
<Link Source="10353:[5995..6029).28" Target="10312:[7916..7934).6" />
<Link Source="10353:[6002..6028).10" Target="10312:[7916..7934).6" />
<Link Source="10353:[6343..6358).10" Target="10353:[5995..6029).28" />
<Link Source="10353:[6343..6358).10" Target="10353:[6002..6028).10" />
<Link Source="10353:[6384..6410).55" Target="10353:[6002..6028).10" />
<Link Source="10353:[6384..6410).56" Target="10353:[6343..6358).10" />
<Link Source="10353:[6384..6410).56" Target="10353:[6384..6410).55" />
<Link Source="10353:[6384..6410).56" Target="10353:[6002..6028).10" />
<Link Source="10312:[7952..7977).21" Target="10307:[3452..3756).4" />
<Link Source="10312:[7952..7977).22" Target="10312:[7718..7727).6" />
<Link Source="10312:[7952..7977).22" Target="10312:[7952..7977).21" />
<Link Source="10312:[7952..7977).22" Target="10307:[3452..3756).4" />
<Link Source="10312:[8594..8603).3" Target="10312:[7718..7727).6" />
<Link Source="10312:[8594..8603).3" Target="10307:[3452..3756).4" />
<Link Source="10312:[8669..8690).3" Target="10312:[7718..7727).6" />
<Link Source="10312:[8669..8690).3" Target="10307:[3452..3756).4" />
<Link Source="10312:[8692..8705).3" Target="10312:[7816..7829).6" />
<Link Source="10312:[8692..8705).3" Target="10307:[3452..3756).4" />
<Link Source="10312:[34797..34806).3" Target="10312:[8594..8603).3" />
<Link Source="10312:[34797..34806).3" Target="10307:[3452..3756).4" />
<Link Source="10312:[34911..34932).3" Target="10312:[8669..8690).3" />
<Link Source="10312:[34911..34932).3" Target="10307:[3452..3756).4" />
<Link Source="10312:[34947..34960).3" Target="10312:[8692..8705).3" />
<Link Source="10312:[34947..34960).3" Target="10307:[3452..3756).4" />
<Link Source="10312:[35403..35412).3" Target="10312:[34797..34806).3" />
<Link Source="10312:[35403..35412).3" Target="10307:[3452..3756).4" />
<Link Source="10312:[35517..35538).3" Target="10312:[34911..34932).3" />
<Link Source="10312:[35517..35538).3" Target="10307:[3452..3756).4" />
<Link Source="10312:[35596..35609).3" Target="10312:[34947..34960).3" />
<Link Source="10312:[35596..35609).3" Target="10307:[3452..3756).4" />
<Link Source="10312:[35696..35731).9" Target="10307:[3452..3756).4" />
<Link Source="10312:[36067..36079).5" Target="10307:[3452..3756).4" />
<Link Source="10312:[33656..33675).5" Target="10307:[3452..3756).4" />
<Link Source="10312:[33707..33716).5" Target="10312:[35403..35412).3" />
<Link Source="10312:[33707..33716).5" Target="10307:[3452..3756).4" />
<Link Source="10312:[33754..33775).5" Target="10312:[35517..35538).3" />
<Link Source="10312:[33754..33775).5" Target="10307:[3452..3756).4" />
<Link Source="10312:[33777..33805).5" Target="10307:[3452..3756).4" />
<Link Source="10312:[33807..33820).5" Target="10312:[35596..35609).3" />
<Link Source="10312:[33807..33820).5" Target="10307:[3452..3756).4" />
<Link Source="10312:[33870..33909).5" Target="10312:[35403..35412).3" />
<Link Source="10312:[33870..33909).5" Target="10307:[3452..3756).4" />
<Link Source="10312:[61608..61629).8" Target="10312:[33754..33775).5" />
<Link Source="10312:[61608..61629).8" Target="10307:[3452..3756).4" />
<Link Source="10312:[34022..34574).13" Target="10312:[35403..35412).3" />
<Link Source="10312:[34022..34574).13" Target="10307:[3452..3756).4" />
<Link Source="10312:[36278..36360).45" Target="10307:[3452..3756).4" />
<Link Source="10312:[36278..36360).45" Target="10312:[34797..34806).3" />
<Link Source="10312:[36278..36360).45" Target="10312:[35596..35609).3" />
<Link Source="10312:[36278..36360).45" Target="10312:[35403..35412).3" />
<Link Source="10354:[9012..9030).5" Target="10312:[36278..36360).45" />
<Link Source="10354:[9012..9030).5" Target="10307:[3452..3756).4" />
<Link Source="10354:[8981..9152).5" Target="10312:[36278..36360).45" />
<Link Source="10354:[8981..9152).5" Target="10307:[3452..3756).4" />
<Link Source="10354:[9060..9070).5" Target="10307:[3452..3756).4" />
<Link Source="10354:[4058..4122).56" Target="10354:[9012..9030).5" />
<Link Source="10354:[4058..4122).56" Target="10354:[9060..9070).5" />
<Link Source="10354:[9056..9141).17" Target="10354:[4058..4122).56" />
<Link Source="10354:[9056..9141).17" Target="10307:[3452..3756).4" />
<Link Source="10354:[9073..9077).5" Target="10307:[3452..3756).4" />
<Link Source="10354:[4058..4122).57" Target="10354:[8981..9152).5" />
<Link Source="10354:[4058..4122).57" Target="10354:[9073..9077).5" />
<Link Source="10354:[9056..9141).18" Target="10354:[4058..4122).57" />
<Link Source="10354:[9056..9141).18" Target="10307:[3452..3756).4" />
<Link Source="10354:[9056..9141).19" Target="10354:[9056..9141).17" />
<Link Source="10354:[9056..9141).19" Target="10354:[9056..9141).18" />
<Link Source="10354:[9056..9141).19" Target="10307:[3452..3756).4" />
<Link Source="10312:[36566..36625).5" Target="10307:[3452..3756).4" />
<Link Source="10312:[36643..36855).13" Target="10307:[3452..3756).4" />
<Link Source="10312:[36643..36855).14" Target="10312:[36566..36625).5" />
<Link Source="10312:[36643..36855).14" Target="10312:[36278..36360).45" />
<Link Source="10312:[36643..36855).14" Target="10312:[36643..36855).13" />
<Link Source="10312:[36643..36855).14" Target="10307:[3452..3756).4" />
<Link Source="10312:[37029..37117).13" Target="10312:[36278..36360).45" />
<Link Source="10312:[37029..37117).13" Target="10307:[3452..3756).4" />
<Link Source="10312:[37258..37278).5" Target="10307:[3452..3756).4" />
<Link Source="10354:[4094..4107).59" Target="10312:[37258..37278).5" />
<Link Source="10354:[4094..4107).59" Target="10312:[36278..36360).45" />
<Link Source="10312:[37254..37416).13" Target="10354:[4094..4107).59" />
<Link Source="10312:[37254..37416).13" Target="10307:[3452..3756).4" />
<Link Source="10312:[37436..37988).17" Target="10307:[3452..3756).4" />
<Link Source="10312:[37436..37988).18" Target="10312:[34797..34806).3" />
<Link Source="10312:[37436..37988).18" Target="10312:[37436..37988).17" />
<Link Source="10312:[37436..37988).18" Target="10307:[3452..3756).4" />
<Link Source="10312:[38290..38338).5" Target="10307:[3452..3756).4" />
<Link Source="10306:[3345..3430).5" Target="10312:[35517..35538).3" />
<Link Source="10306:[3345..3430).5" Target="10312:[38290..38338).5" />
<Link Source="10306:[3358..3364).5" Target="10312:[38290..38338).5" />
<Link Source="10306:[3196..3249).17" Target="10306:[3345..3430).5" />
<Link Source="10306:[3196..3249).17" Target="10306:[3358..3364).5" />
<Link Source="10306:[3202..3247).65" Target="10306:[3196..3249).17" />
<Link Source="10306:[3202..3247).65" Target="10312:[36278..36360).45" />
<Link Source="10306:[3202..3247).65" Target="10306:[3358..3364).5" />
<Link Source="10306:[3351..3428).13" Target="10306:[3202..3247).65" />
<Link Source="10306:[3351..3428).13" Target="10312:[38290..38338).5" />
<Link Source="10312:[38286..38405).9" Target="10306:[3351..3428).13" />
<Link Source="10312:[38286..38405).9" Target="10307:[3452..3756).4" />
<Link Source="10312:[36067..36079).6" Target="10312:[36278..36360).45" />
<Link Source="10312:[36097..36258).61" Target="10312:[35517..35538).3" />
<Link Source="10312:[36097..36258).61" Target="10312:[36278..36360).45" />
<Link Source="10312:[33656..33675).6" Target="10312:[36278..36360).45" />
<Link Source="10312:[33707..33716).6" Target="10312:[36278..36360).45" />
<Link Source="10312:[33754..33775).6" Target="10312:[36097..36258).61" />
<Link Source="10312:[33754..33775).6" Target="10312:[36278..36360).45" />
<Link Source="10312:[33777..33805).6" Target="10312:[36278..36360).45" />
<Link Source="10312:[33807..33820).6" Target="10312:[36278..36360).45" />
<Link Source="10312:[33870..33909).6" Target="10312:[36278..36360).45" />
<Link Source="10312:[61608..61629).9" Target="10312:[33754..33775).6" />
<Link Source="10312:[61608..61629).9" Target="10312:[36278..36360).45" />
<Link Source="10312:[34022..34574).16" Target="10312:[36278..36360).45" />
<Link Source="10354:[9012..9030).6" Target="10312:[36278..36360).45" />
<Link Source="10354:[8981..9152).6" Target="10312:[36278..36360).45" />
<Link Source="10354:[9060..9070).6" Target="10312:[36278..36360).45" />
<Link Source="10354:[4058..4122).61" Target="10354:[9012..9030).6" />
<Link Source="10354:[4058..4122).61" Target="10354:[9060..9070).6" />
<Link Source="10354:[9056..9141).21" Target="10354:[4058..4122).61" />
<Link Source="10354:[9056..9141).21" Target="10312:[36278..36360).45" />
<Link Source="10354:[9073..9077).6" Target="10312:[36278..36360).45" />
<Link Source="10354:[4058..4122).62" Target="10354:[8981..9152).6" />
<Link Source="10354:[4058..4122).62" Target="10354:[9073..9077).6" />
<Link Source="10354:[9056..9141).22" Target="10354:[4058..4122).62" />
<Link Source="10354:[9056..9141).22" Target="10312:[36278..36360).45" />
<Link Source="10354:[9056..9141).23" Target="10354:[9056..9141).21" />
<Link Source="10354:[9056..9141).23" Target="10354:[9056..9141).22" />
<Link Source="10354:[9056..9141).23" Target="10312:[36278..36360).45" />
<Link Source="10312:[36566..36625).6" Target="10312:[36278..36360).45" />
<Link Source="10312:[36643..36855).16" Target="10312:[36278..36360).45" />
<Link Source="10312:[36643..36855).17" Target="10312:[36566..36625).6" />
<Link Source="10312:[36643..36855).17" Target="10312:[36278..36360).45" />
<Link Source="10312:[36643..36855).17" Target="10312:[36643..36855).16" />
<Link Source="10312:[37029..37117).16" Target="10312:[36278..36360).45" />
<Link Source="10312:[37258..37278).6" Target="10312:[36278..36360).45" />
<Link Source="10312:[37254..37416).16" Target="10312:[37258..37278).6" />
<Link Source="10312:[37254..37416).16" Target="10312:[36278..36360).45" />
<Link Source="10312:[37436..37988).21" Target="10312:[36278..36360).45" />
<Link Source="10312:[38290..38338).6" Target="10312:[36278..36360).45" />
<Link Source="10306:[3345..3430).6" Target="10312:[35517..35538).3" />
<Link Source="10306:[3345..3430).6" Target="10312:[38290..38338).6" />
<Link Source="10306:[3358..3364).6" Target="10312:[38290..38338).6" />
<Link Source="10306:[3196..3249).18" Target="10306:[3345..3430).6" />
<Link Source="10306:[3196..3249).18" Target="10306:[3358..3364).6" />
<Link Source="10306:[3351..3428).16" Target="10306:[3196..3249).18" />
<Link Source="10306:[3351..3428).16" Target="10312:[38290..38338).6" />
<Link Source="10312:[38286..38405).11" Target="10306:[3351..3428).16" />
<Link Source="10312:[38286..38405).11" Target="10312:[36278..36360).45" />
<Link Source="10312:[38756..38772).3" Target="10312:[36278..36360).45" />
<Link Source="10312:[38756..38772).3" Target="10307:[3452..3756).4" />
<Link Source="10354:[11428..11441).6" Target="10307:[3452..3756).4" />
<Link Source="10312:[38786..38797).3" Target="10307:[3452..3756).4" />
<Link Source="10345:[29214..29227).5" Target="10346:[10761..10774).6" />
<Link Source="10345:[29214..29227).5" Target="10307:[3452..3756).4" />
<Link Source="10345:[29998..30011).5" Target="10345:[29214..29227).5" />
<Link Source="10345:[29998..30011).5" Target="10307:[3452..3756).4" />
<Link Source="10345:[30883..31655).13" Target="10307:[3452..3756).4" />
<Link Source="10345:[30883..31655).13" Target="10312:[36278..36360).45" />
<Link Source="10345:[29566..29700).28" Target="10345:[29214..29227).5" />
<Link Source="10345:[29566..29700).28" Target="10354:[4094..4107).59" />
<Link Source="10345:[31734..31789).3" Target="10354:[4094..4107).59" />
<Link Source="10345:[31804..31825).3" Target="10354:[4094..4107).59" />
<Link Source="10345:[31840..31859).3" Target="10354:[4094..4107).59" />
<Link Source="10345:[31874..31885).3" Target="10354:[4094..4107).59" />
<Link Source="10345:[31900..31909).3" Target="10354:[4094..4107).59" />
<Link Source="10345:[31924..31963).3" Target="10354:[4094..4107).59" />
<Link Source="10345:[31978..31999).3" Target="10354:[4094..4107).59" />
<Link Source="10345:[32014..32027).3" Target="10345:[29566..29700).28" />
<Link Source="10345:[32014..32027).3" Target="10354:[4094..4107).59" />
<Link Source="10345:[32114..32230).9" Target="10345:[31804..31825).3" />
<Link Source="10345:[32114..32230).9" Target="10312:[36278..36360).45" />
<Link Source="10345:[32114..32230).9" Target="10354:[4094..4107).59" />
<Link Source="10345:[32114..32230).10" Target="EXTERNAL" />
<Link Source="10345:[32114..32230).10" Target="10354:[4094..4107).59" />
<Link Source="10345:[32118..32174).3" Target="10354:[4094..4107).59" />
<Link Source="10298:[471..492).52" Target="10345:[32114..32230).9" />
<Link Source="10298:[471..492).52" Target="10345:[32118..32174).3" />
<Link Source="10298:[494..511).52" Target="10345:[32114..32230).10" />
<Link Source="10298:[494..511).52" Target="10345:[32118..32174).3" />
<Link Source="10345:[32275..32311).3" Target="10354:[4094..4107).59" />
<Link Source="10286:[2155..2260).9" Target="10345:[31804..31825).3" />
<Link Source="10286:[2155..2260).9" Target="10345:[32275..32311).3" />
<Link Source="10345:[32246..32312).5" Target="10286:[2155..2260).9" />
<Link Source="10345:[32246..32312).5" Target="10354:[4094..4107).59" />
<Link Source="10345:[32328..33465).7" Target="10345:[31734..31789).3" />
<Link Source="10345:[32328..33465).7" Target="10354:[4094..4107).59" />
<Link Source="10354:[3720..3803).197" Target="10354:[3684..3818).24" />
<Link Source="10354:[3720..3803).197" Target="10312:[36278..36360).45" />
<Link Source="10354:[3720..3803).197" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).197" Target="10312:[4685..4699).9" />
<Link Source="10354:[3720..3803).199" Target="10354:[3684..3818).24" />
<Link Source="10354:[3720..3803).199" Target="10312:[36278..36360).45" />
<Link Source="10354:[3720..3803).199" Target="10354:[3720..3803).174" />
<Link Source="10354:[3720..3803).199" Target="10312:[4685..4699).9" />
<Link Source="10312:[4680..4787).19" Target="10354:[3720..3803).197" />
<Link Source="10312:[4680..4787).19" Target="10307:[3452..3756).4" />
<Link Source="10346:[10861..10875).7" Target="10354:[4094..4107).59" />
<Link Source="10354:[3684..3818).28" Target="10354:[4094..4107).59" />
<Link Source="10354:[3684..3818).28" Target="10346:[10861..10875).7" />
<Link Source="10354:[3720..3803).205" Target="10354:[3684..3818).28" />
<Link Source="10354:[3720..3803).205" Target="10312:[36278..36360).45" />
<Link Source="10354:[3720..3803).205" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).205" Target="10346:[10861..10875).7" />
<Link Source="10354:[3720..3803).206" Target="10346:[10861..10875).7" />
<Link Source="10354:[3720..3803).207" Target="10354:[3684..3818).28" />
<Link Source="10354:[3720..3803).207" Target="10312:[36278..36360).45" />
<Link Source="10354:[3720..3803).207" Target="10354:[3720..3803).206" />
<Link Source="10354:[3720..3803).207" Target="10346:[10861..10875).7" />
<Link Source="10346:[10848..10877).19" Target="10354:[3720..3803).205" />
<Link Source="10346:[10848..10877).19" Target="10354:[4094..4107).59" />
<Link Source="10346:[10897..10914).7" Target="10354:[4094..4107).59" />
<Link Source="10346:[7666..7775).7" Target="10354:[4094..4107).59" />
<Link Source="10346:[7666..7775).7" Target="10346:[10897..10914).7" />
<Link Source="10346:[7672..7773).19" Target="10346:[7666..7775).7" />
<Link Source="10346:[7672..7773).19" Target="10312:[36278..36360).45" />
<Link Source="10346:[7672..7773).19" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).19" Target="10346:[10897..10914).7" />
<Link Source="10346:[10893..11127).13" Target="10346:[7672..7773).19" />
<Link Source="10346:[10893..11127).13" Target="10354:[4094..4107).59" />
<Link Source="10346:[3525..3638).52" Target="10354:[4094..4107).59" />
<Link Source="10312:[7903..7936).25" Target="10354:[4094..4107).59" />
<Link Source="10312:[7916..7934).7" Target="10354:[4094..4107).59" />
<Link Source="10353:[4698..4724).11" Target="10312:[7903..7936).25" />
<Link Source="10353:[4698..4724).11" Target="10312:[7916..7934).7" />
<Link Source="10353:[4750..4847).21" Target="10353:[4698..4724).11" />
<Link Source="10353:[4750..4847).21" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).21" Target="10312:[7916..7934).7" />
<Link Source="10353:[4863..5000).41" Target="10353:[4698..4724).11" />
<Link Source="10353:[4863..5000).41" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).41" Target="10312:[7916..7934).7" />
<Link Source="10353:[4863..5000).42" Target="10312:[7916..7934).7" />
<Link Source="10353:[5079..5183).21" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).21" Target="10312:[7916..7934).7" />
<Link Source="10353:[5197..5323).31" Target="10353:[4698..4724).11" />
<Link Source="10353:[5197..5323).31" Target="10353:[5079..5183).21" />
<Link Source="10353:[5197..5323).31" Target="10312:[7916..7934).7" />
<Link Source="10353:[5485..5759).61" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).61" Target="10312:[7916..7934).7" />
<Link Source="10353:[5485..5759).62" Target="10353:[4698..4724).11" />
<Link Source="10353:[5485..5759).62" Target="10353:[5485..5759).61" />
<Link Source="10353:[5485..5759).62" Target="10312:[7916..7934).7" />
<Link Source="10353:[5485..5759).63" Target="10312:[7916..7934).7" />
<Link Source="10353:[5775..5979).41" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).41" Target="10312:[7916..7934).7" />
<Link Source="10353:[5775..5979).43" Target="10353:[4698..4724).11" />
<Link Source="10353:[5775..5979).43" Target="10353:[5775..5979).41" />
<Link Source="10353:[5775..5979).43" Target="10312:[7916..7934).7" />
<Link Source="10353:[5995..6029).31" Target="10353:[5775..5979).43" />
<Link Source="10353:[5995..6029).31" Target="10312:[7916..7934).7" />
<Link Source="10353:[6002..6028).11" Target="10312:[7916..7934).7" />
<Link Source="10353:[6343..6358).11" Target="10353:[5995..6029).31" />
<Link Source="10353:[6343..6358).11" Target="10353:[6002..6028).11" />
<Link Source="10353:[6384..6410).61" Target="10353:[6002..6028).11" />
<Link Source="10353:[6384..6410).62" Target="10353:[6343..6358).11" />
<Link Source="10353:[6384..6410).62" Target="10353:[6384..6410).61" />
<Link Source="10353:[6384..6410).62" Target="10353:[6002..6028).11" />
<Link Source="10312:[7952..7977).25" Target="10354:[4094..4107).59" />
<Link Source="10312:[19030..19039).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[19087..19100).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[61608..61629).10" Target="10354:[4094..4107).59" />
<Link Source="10345:[29214..29227).6" Target="10354:[4094..4107).59" />
<Link Source="10345:[29998..30011).6" Target="10345:[29214..29227).6" />
<Link Source="10345:[29998..30011).6" Target="10354:[4094..4107).59" />
<Link Source="10312:[63439..63448).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[63473..63501).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[63503..63516).4" Target="10345:[29998..30011).6" />
<Link Source="10312:[63503..63516).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[63638..63668).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[63682..63706).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[80978..80991).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[80993..81002).4" Target="10312:[63439..63448).4" />
<Link Source="10312:[80993..81002).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[81004..81017).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[81004..81017).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[81019..81040).4" Target="10312:[63439..63448).4" />
<Link Source="10312:[81019..81040).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[81042..81069).4" Target="10312:[63682..63706).4" />
<Link Source="10312:[81042..81069).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[81095..84034).4" Target="10312:[80978..80991).4" />
<Link Source="10312:[81095..84034).4" Target="10354:[4094..4107).59" />
<Link Source="10312:[83750..83991).7" Target="10312:[81095..84034).4" />
<Link Source="10312:[83750..83991).8" Target="10312:[80993..81002).4" />
<Link Source="10312:[83750..83991).8" Target="10312:[83750..83991).7" />
<Link Source="10312:[83750..83991).8" Target="10312:[81095..84034).4" />
<Link Source="10312:[84050..84066).7" Target="10354:[4094..4107).59" />
<Link Source="10312:[66177..69285).40" Target="10312:[63473..63501).4" />
<Link Source="10312:[66177..69285).40" Target="10312:[63439..63448).4" />
<Link Source="10312:[66291..66342).4" Target="10312:[63439..63448).4" />
<Link Source="10312:[75301..75322).4" Target="10312:[63439..63448).4" />
<Link Source="10312:[75301..75322).4" Target="10312:[66291..66342).4" />
<Link Source="10312:[75324..75352).4" Target="10312:[66177..69285).40" />
<Link Source="10312:[75324..75352).4" Target="10312:[66291..66342).4" />
<Link Source="10312:[75735..75866).16" Target="10312:[75301..75322).4" />
<Link Source="10312:[75735..75866).16" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).16" Target="10312:[66291..66342).4" />
<Link Source="10312:[75735..75866).17" Target="10312:[66291..66342).4" />
<Link Source="10312:[75742..75804).4" Target="10312:[75735..75866).16" />
<Link Source="10312:[75742..75804).4" Target="10312:[66291..66342).4" />
<Link Source="10312:[75735..75866).19" Target="10312:[75324..75352).4" />
<Link Source="10312:[75735..75866).19" Target="10312:[75742..75804).4" />
<Link Source="10312:[66177..69285).43" Target="10312:[63638..63668).4" />
<Link Source="10312:[66177..69285).43" Target="10312:[63439..63448).4" />
<Link Source="10312:[66177..69285).44" Target="10345:[29998..30011).6" />
<Link Source="10312:[66177..69285).44" Target="10312:[63439..63448).4" />
<Link Source="10312:[77543..77571).4" Target="10312:[75735..75866).19" />
<Link Source="10312:[77543..77571).4" Target="10312:[63439..63448).4" />
<Link Source="10312:[77573..77604).4" Target="10312:[66177..69285).43" />
<Link Source="10312:[77573..77604).4" Target="10312:[63439..63448).4" />
<Link Source="10312:[77654..77700).4" Target="10312:[63439..63448).4" />
<Link Source="10312:[77726..77892).13" Target="10312:[63439..63448).4" />
<Link Source="10312:[77726..77892).13" Target="10354:[4094..4107).59" />
<Link Source="10312:[77726..77892).14" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).14" Target="10312:[63439..63448).4" />
<Link Source="10312:[77730..77782).4" Target="10312:[63439..63448).4" />
<Link Source="10298:[471..492).58" Target="10312:[77726..77892).13" />
<Link Source="10298:[471..492).58" Target="10312:[77730..77782).4" />
<Link Source="10298:[494..511).58" Target="10312:[77726..77892).14" />
<Link Source="10298:[494..511).58" Target="10312:[77730..77782).4" />
<Link Source="10312:[78402..78430).4" Target="10312:[77543..77571).4" />
<Link Source="10312:[78402..78430).4" Target="10312:[63439..63448).4" />
<Link Source="10312:[78432..78463).4" Target="10312:[77573..77604).4" />
<Link Source="10312:[78432..78463).4" Target="10312:[63439..63448).4" />
<Link Source="10312:[78513..78552).4" Target="10312:[77654..77700).4" />
<Link Source="10312:[78513..78552).4" Target="10312:[63439..63448).4" />
<Link Source="10346:[8034..8062).4" Target="10312:[78402..78430).4" />
<Link Source="10346:[8034..8062).4" Target="10312:[63439..63448).4" />
<Link Source="10346:[8064..8095).4" Target="10312:[78432..78463).4" />
<Link Source="10346:[8064..8095).4" Target="10312:[63439..63448).4" />
<Link Source="10346:[8145..8184).4" Target="10312:[78513..78552).4" />
<Link Source="10346:[8145..8184).4" Target="10312:[63439..63448).4" />
<Link Source="10286:[30135..30160).3" Target="10346:[8034..8062).4" />
<Link Source="10286:[30135..30160).3" Target="10312:[63439..63448).4" />
<Link Source="10286:[30175..30206).3" Target="10346:[8064..8095).4" />
<Link Source="10286:[30175..30206).3" Target="10312:[63439..63448).4" />
<Link Source="10286:[30283..30330).3" Target="10312:[63439..63448).4" />
<Link Source="10286:[30012..30691).3" Target="10312:[63439..63448).4" />
<Link Source="10286:[30356..30522).9" Target="10286:[30012..30691).3" />
<Link Source="10286:[30356..30522).9" Target="10354:[4094..4107).59" />
<Link Source="10286:[30356..30522).9" Target="10312:[63439..63448).4" />
<Link Source="10286:[30356..30522).10" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).10" Target="10312:[63439..63448).4" />
<Link Source="10286:[30360..30412).3" Target="10312:[63439..63448).4" />
<Link Source="10298:[471..492).59" Target="10286:[30356..30522).9" />
<Link Source="10298:[471..492).59" Target="10286:[30360..30412).3" />
<Link Source="10298:[494..511).59" Target="10286:[30356..30522).10" />
<Link Source="10298:[494..511).59" Target="10286:[30360..30412).3" />
<Link Source="10060:[2173..2198).3" Target="10286:[30135..30160).3" />
<Link Source="10060:[2173..2198).3" Target="10312:[63439..63448).4" />
<Link Source="10060:[2213..2244).3" Target="10286:[30175..30206).3" />
<Link Source="10060:[2213..2244).3" Target="10312:[63439..63448).4" />
<Link Source="10060:[2320..2366).3" Target="10286:[30283..30330).3" />
<Link Source="10060:[2320..2366).3" Target="10312:[63439..63448).4" />
<Link Source="10060:[5691..5716).4" Target="10060:[2173..2198).3" />
<Link Source="10060:[5691..5716).4" Target="10312:[63439..63448).4" />
<Link Source="10060:[5731..5762).4" Target="10060:[2213..2244).3" />
<Link Source="10060:[5731..5762).4" Target="10312:[63439..63448).4" />
<Link Source="10060:[5777..5806).4" Target="10312:[63439..63448).4" />
<Link Source="10060:[5882..5928).4" Target="10060:[2320..2366).3" />
<Link Source="10060:[5882..5928).4" Target="10312:[63439..63448).4" />
<Link Source="10060:[5954..5991).13" Target="10312:[63439..63448).4" />
<Link Source="10060:[6005..6042).13" Target="10312:[63439..63448).4" />
<Link Source="10060:[6056..6090).7" Target="10312:[63439..63448).4" />
<Link Source="10060:[6056..6090).7" Target="10354:[4094..4107).59" />
<Link Source="10060:[6104..6172).10" Target="10312:[63439..63448).4" />
<Link Source="10060:[6188..6219).7" Target="10312:[63439..63448).4" />
<Link Source="10060:[10202..10215).4" Target="10312:[63439..63448).4" />
<Link Source="10060:[10265..10311).4" Target="10060:[5882..5928).4" />
<Link Source="10060:[10265..10311).4" Target="10312:[63439..63448).4" />
<Link Source="10060:[10337..10405).10" Target="10060:[10202..10215).4" />
<Link Source="10060:[10337..10405).10" Target="10312:[63439..63448).4" />
<Link Source="10060:[10419..10454).13" Target="10312:[63439..63448).4" />
<Link Source="10060:[10470..10516).4" Target="10060:[10202..10215).4" />
<Link Source="10060:[10470..10516).4" Target="10354:[4094..4107).59" />
<Link Source="10060:[10470..10516).4" Target="10312:[63439..63448).4" />
<Link Source="10060:[10532..10544).4" Target="10312:[63439..63448).4" />
<Link Source="10060:[10558..11295).4" Target="10312:[63439..63448).4" />
<Link Source="10060:[10558..11295).4" Target="10354:[4094..4107).59" />
<Link Source="10060:[11990..12013).4" Target="10312:[63439..63448).4" />
<Link Source="10060:[12078..12091).4" Target="10060:[10202..10215).4" />
<Link Source="10060:[12078..12091).4" Target="10312:[63439..63448).4" />
<Link Source="10060:[12117..12185).10" Target="10060:[12078..12091).4" />
<Link Source="10060:[12117..12185).10" Target="10312:[63439..63448).4" />
<Link Source="10060:[12199..12238).13" Target="10312:[63439..63448).4" />
<Link Source="10060:[12199..12238).14" Target="10060:[11990..12013).4" />
<Link Source="10060:[12199..12238).14" Target="10060:[12199..12238).13" />
<Link Source="10060:[12199..12238).14" Target="10312:[63439..63448).4" />
<Link Source="10345:[30725..30790).8" Target="10345:[32275..32311).3" />
<Link Source="10345:[30725..30790).8" Target="10060:[10202..10215).4" />
<Link Source="10345:[24226..24260).9" Target="10060:[10202..10215).4" />
<Link Source="10345:[30883..31655).16" Target="10354:[4094..4107).59" />
<Link Source="10345:[30883..31655).16" Target="10345:[30725..30790).8" />
<Link Source="10312:[4685..4699).11" Target="10354:[4094..4107).59" />
<Link Source="10354:[3684..3818).29" Target="10307:[3452..3756).4" />
<Link Source="10354:[3684..3818).29" Target="10312:[4685..4699).11" />
<Link Source="10354:[3720..3803).213" Target="10354:[3684..3818).29" />
<Link Source="10354:[3720..3803).213" Target="10345:[30725..30790).8" />
<Link Source="10354:[3720..3803).213" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).213" Target="10312:[4685..4699).11" />
<Link Source="10312:[4680..4787).21" Target="10354:[3720..3803).213" />
<Link Source="10312:[4680..4787).21" Target="10354:[4094..4107).59" />
<Link Source="10312:[4749..4764).4" Target="10312:[36278..36360).45" />
<Link Source="10312:[4749..4764).4" Target="10312:[4680..4787).21" />
<Link Source="10312:[4826..5058).51" Target="10307:[3452..3756).4" />
<Link Source="10312:[4826..5058).51" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).51" Target="10354:[4094..4107).59" />
<Link Source="10312:[4826..5058).52" Target="10354:[4094..4107).59" />
<Link Source="10312:[5087..5101).4" Target="10312:[4749..4764).4" />
<Link Source="10312:[5087..5101).4" Target="10307:[3452..3756).4" />
<Link Source="10319:[43504..43546).16" Target="10307:[3452..3756).4" />
<Link Source="10319:[43504..43546).16" Target="10312:[66177..69285).44" />
<Link Source="10319:[43504..43546).16" Target="10345:[30725..30790).8" />
<Link Source="10319:[43799..44676).19" Target="10307:[3452..3756).4" />
<Link Source="10319:[43853..43873).4" Target="10307:[3452..3756).4" />
<Link Source="10319:[41088..41107).4" Target="10319:[43799..44676).19" />
<Link Source="10319:[41088..41107).4" Target="10319:[43853..43873).4" />
<Link Source="10319:[41138..41158).4" Target="10319:[43853..43873).4" />
<Link Source="10354:[4919..5009).53" Target="10319:[41088..41107).4" />
<Link Source="10354:[4919..5009).53" Target="10319:[41138..41158).4" />
<Link Source="10354:[4094..4107).73" Target="10354:[4919..5009).53" />
<Link Source="10354:[4094..4107).73" Target="10319:[43504..43546).16" />
<Link Source="10354:[4094..4107).73" Target="10319:[41138..41158).4" />
<Link Source="10319:[41133..41220).7" Target="10354:[4094..4107).73" />
<Link Source="10319:[41133..41220).7" Target="10319:[43853..43873).4" />
<Link Source="10319:[41254..41268).4" Target="10319:[43853..43873).4" />
<Link Source="10354:[4525..4595).7" Target="10319:[41088..41107).4" />
<Link Source="10354:[4525..4595).7" Target="10319:[41254..41268).4" />
<Link Source="10354:[4561..4580).7" Target="10354:[4525..4595).7" />
<Link Source="10354:[4561..4580).7" Target="10319:[43504..43546).16" />
<Link Source="10354:[4561..4580).7" Target="10319:[41254..41268).4" />
<Link Source="10319:[41236..41680).13" Target="10354:[4561..4580).7" />
<Link Source="10319:[41236..41680).13" Target="10319:[43853..43873).4" />
<Link Source="10319:[41302..41665).4" Target="10319:[41236..41680).13" />
<Link Source="10319:[41302..41665).4" Target="10319:[43504..43546).16" />
<Link Source="10319:[41406..41476).5" Target="10319:[41236..41680).13" />
<Link Source="10319:[41406..41476).5" Target="10319:[43504..43546).16" />
<Link Source="10319:[41406..41476).5" Target="EXTERNAL" />
<Link Source="10319:[41406..41476).5" Target="10319:[41302..41665).4" />
<Link Source="10319:[41464..41476).5" Target="10319:[41406..41476).5" />
<Link Source="10319:[44751..44765).4" Target="10307:[3452..3756).4" />
<Link Source="10319:[84233..84242).4" Target="10307:[3452..3756).4" />
<Link Source="10319:[84374..84391).4" Target="10319:[44751..44765).4" />
<Link Source="10319:[84374..84391).4" Target="10307:[3452..3756).4" />
<Link Source="10319:[84406..84447).4" Target="10319:[44751..44765).4" />
<Link Source="10319:[84406..84447).4" Target="10307:[3452..3756).4" />
<Link Source="10319:[84462..84508).4" Target="10319:[44751..44765).4" />
<Link Source="10319:[84462..84508).4" Target="10307:[3452..3756).4" />
<Link Source="10319:[84124..109887).4" Target="10307:[3452..3756).4" />
<Link Source="10319:[85320..85348).13" Target="10307:[3452..3756).4" />
<Link Source="10319:[85320..85348).14" Target="10319:[84233..84242).4" />
<Link Source="10319:[85320..85348).14" Target="10319:[85320..85348).13" />
<Link Source="10319:[85320..85348).14" Target="10307:[3452..3756).4" />
<Link Source="10319:[85366..85400).13" Target="10307:[3452..3756).4" />
<Link Source="10319:[85366..85400).14" Target="10319:[84233..84242).4" />
<Link Source="10319:[85366..85400).14" Target="10319:[85366..85400).13" />
<Link Source="10319:[85366..85400).14" Target="10307:[3452..3756).4" />
<Link Source="10319:[85467..85484).7" Target="10307:[3452..3756).4" />
<Link Source="10319:[104874..105336).10" Target="10319:[43504..43546).16" />
<Link Source="10319:[104874..105336).10" Target="EXTERNAL" />
<Link Source="10319:[105368..106708).4" Target="10319:[84233..84242).4" />
<Link Source="10319:[105368..106708).4" Target="10319:[43504..43546).16" />
<Link Source="10319:[84691..84861).7" Target="10319:[43504..43546).16" />
<Link Source="10319:[84691..84861).7" Target="10319:[105368..106708).4" />
<Link Source="10319:[84691..84861).7" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).7" Target="10307:[3452..3756).4" />
<Link Source="10319:[45408..45422).4" Target="10307:[3452..3756).4" />
<Link Source="10287:[2377..2471).11" Target="10319:[43504..43546).16" />
<Link Source="10287:[2377..2471).11" Target="10307:[3452..3756).4" />
<Link Source="10287:[1215..1253).5" Target="10319:[43504..43546).16" />
<Link Source="10287:[2033..2081).7" Target="10319:[105368..106708).4" />
<Link Source="10287:[2033..2081).7" Target="10319:[43504..43546).16" />
<Link Source="10287:[2033..2081).7" Target="EXTERNAL" />
<Link Source="10319:[53246..53267).3" Target="10319:[105368..106708).4" />
<Link Source="10319:[53387..53416).9" Target="10319:[105368..106708).4" />
<Link Source="10319:[53430..53464).9" Target="10319:[105368..106708).4" />
<Link Source="10286:[21546..21561).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[21563..21583).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[22044..22069).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[22086..22108).4" Target="10286:[21546..21561).4" />
<Link Source="10286:[22086..22108).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[22110..22130).4" Target="10286:[21563..21583).4" />
<Link Source="10286:[22110..22130).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[15616..15690).16" Target="10319:[105368..106708).4" />
<Link Source="10286:[15616..15690).17" Target="10319:[105368..106708).4" />
<Link Source="10286:[15616..15690).17" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23056..23081).4" Target="10286:[22044..22069).4" />
<Link Source="10286:[23056..23081).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23124..23146).4" Target="10286:[22086..22108).4" />
<Link Source="10286:[23124..23146).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23161..23181).4" Target="10286:[22110..22130).4" />
<Link Source="10286:[23161..23181).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23281..23301).4" Target="10286:[22044..22069).4" />
<Link Source="10286:[23281..23301).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23380..23684).22" Target="10286:[22044..22069).4" />
<Link Source="10286:[23380..23684).22" Target="EXTERNAL" />
<Link Source="10286:[23380..23684).22" Target="10319:[105368..106708).4" />
<Link Source="10286:[23893..24026).7" Target="10286:[22044..22069).4" />
<Link Source="10286:[23893..24026).7" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).7" Target="10319:[105368..106708).4" />
<Link Source="10286:[24545..24641).7" Target="10286:[23161..23181).4" />
<Link Source="10286:[24545..24641).7" Target="10319:[105368..106708).4" />
<Link Source="10286:[24655..25349).4" Target="10286:[24545..24641).7" />
<Link Source="10286:[24655..25349).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[26910..26935).4" Target="10286:[23056..23081).4" />
<Link Source="10286:[26910..26935).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[26952..26974).4" Target="10286:[23124..23146).4" />
<Link Source="10286:[26952..26974).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[27002..27022).4" Target="10286:[23281..23301).4" />
<Link Source="10286:[27002..27022).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[27048..27088).13" Target="10319:[105368..106708).4" />
<Link Source="10286:[27048..27088).14" Target="10286:[26910..26935).4" />
<Link Source="10286:[27048..27088).14" Target="10286:[27048..27088).13" />
<Link Source="10286:[27048..27088).14" Target="10319:[105368..106708).4" />
<Link Source="10286:[27208..27236).7" Target="10319:[105368..106708).4" />
<Link Source="10286:[27250..27722).4" Target="10286:[23056..23081).4" />
<Link Source="10286:[27250..27722).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[27738..27845).10" Target="10319:[105368..106708).4" />
<Link Source="10286:[27738..27845).11" Target="10286:[27208..27236).7" />
<Link Source="10286:[27738..27845).11" Target="10286:[27738..27845).10" />
<Link Source="10286:[27738..27845).11" Target="10319:[105368..106708).4" />
<Link Source="10286:[27861..27873).4" Target="10286:[23056..23081).4" />
<Link Source="10286:[27861..27873).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[26281..26812).4" Target="10286:[27861..27873).4" />
<Link Source="10286:[26281..26812).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[26450..26769).4" Target="10286:[24545..24641).7" />
<Link Source="10286:[26450..26769).4" Target="10286:[26281..26812).4" />
<Link Source="10287:[2377..2471).13" Target="10319:[105368..106708).4" />
<Link Source="10287:[791..833).9" Target="10286:[23056..23081).4" />
<Link Source="10287:[791..833).9" Target="10319:[105368..106708).4" />
<Link Source="10076:[5223..5250).18" Target="10286:[23056..23081).4" />
<Link Source="10076:[5223..5250).18" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).18" Target="10076:[4989..5047).1" />
<Link Source="10077:[44231..44317).65" Target="10286:[23056..23081).4" />
<Link Source="10077:[44231..44317).65" Target="10077:[32567..32606).4" />
<Link Source="10077:[15286..15356).2" Target="10077:[15286..15310).1" />
<Link Source="10307:[3547..3745).38" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).38" Target="10077:[15286..15356).2" />
<Link Source="10307:[3555..3600).5" Target="10077:[15286..15356).2" />
<Link Source="10298:[494..511).61" Target="10307:[3547..3745).38" />
<Link Source="10298:[494..511).61" Target="10307:[3555..3600).5" />
<Link Source="10286:[1688..1781).25" Target="10286:[23056..23081).4" />
<Link Source="10286:[1688..1781).25" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).62" Target="10286:[1688..1781).25" />
<Link Source="10298:[471..492).62" Target="10286:[1708..1779).2" />
<Link Source="10286:[1820..1963).25" Target="10286:[23056..23081).4" />
<Link Source="10286:[1820..1963).25" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).63" Target="10286:[1820..1963).25" />
<Link Source="10298:[471..492).63" Target="10286:[1840..1888).2" />
<Link Source="10319:[42478..42805).13" Target="10286:[23056..23081).4" />
<Link Source="10319:[42821..42938).33" Target="10286:[23056..23081).4" />
<Link Source="10319:[42839..42937).5" Target="10286:[23056..23081).4" />
<Link Source="10319:[63849..63870).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63849..63870).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63885..63919).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63885..63919).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63934..63945).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63934..63945).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63960..63969).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63960..63969).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63984..64009).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63984..64009).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63768..64484).5" Target="10286:[23056..23081).4" />
<Link Source="10319:[63768..64484).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[64035..64445).17" Target="10319:[42839..42937).5" />
<Link Source="10319:[64035..64445).18" Target="10319:[63885..63919).5" />
<Link Source="10319:[64035..64445).18" Target="10319:[64035..64445).17" />
<Link Source="10319:[64035..64445).18" Target="10319:[42839..42937).5" />
<Link Source="10319:[64461..64473).9" Target="10319:[42839..42937).5" />
<Link Source="10319:[42821..42938).39" Target="10319:[64461..64473).9" />
<Link Source="10319:[42821..42938).39" Target="10286:[23056..23081).4" />
<Link Source="10319:[42952..43079).13" Target="10286:[23056..23081).4" />
<Link Source="10319:[42952..43079).14" Target="10319:[42821..42938).39" />
<Link Source="10319:[42952..43079).14" Target="10319:[42952..43079).13" />
<Link Source="10319:[42952..43079).14" Target="10286:[23056..23081).4" />
<Link Source="10354:[11312..11328).8" Target="10286:[23056..23081).4" />
<Link Source="10354:[3684..3818).30" Target="10286:[23056..23081).4" />
<Link Source="10354:[3684..3818).30" Target="10354:[11312..11328).8" />
<Link Source="10354:[3720..3803).217" Target="10354:[3684..3818).30" />
<Link Source="10354:[3720..3803).217" Target="10286:[23056..23081).4" />
<Link Source="10354:[3720..3803).217" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).217" Target="10354:[11312..11328).8" />
<Link Source="10354:[3720..3803).218" Target="10354:[11312..11328).8" />
<Link Source="10354:[3720..3803).219" Target="10354:[3684..3818).30" />
<Link Source="10354:[3720..3803).219" Target="10286:[23056..23081).4" />
<Link Source="10354:[3720..3803).219" Target="10354:[3720..3803).218" />
<Link Source="10354:[3720..3803).219" Target="10354:[11312..11328).8" />
<Link Source="10354:[11299..11330).22" Target="10354:[3720..3803).217" />
<Link Source="10354:[11299..11330).22" Target="10286:[23056..23081).4" />
<Link Source="10319:[50330..50355).5" Target="10286:[23056..23081).4" />
<Link Source="10312:[3905..3919).5" Target="10286:[23056..23081).4" />
<Link Source="10354:[3684..3818).31" Target="10286:[23056..23081).4" />
<Link Source="10354:[3684..3818).31" Target="10312:[3905..3919).5" />
<Link Source="10354:[3720..3803).225" Target="10354:[3684..3818).31" />
<Link Source="10354:[3720..3803).225" Target="10286:[23056..23081).4" />
<Link Source="10354:[3720..3803).225" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).225" Target="10312:[3905..3919).5" />
<Link Source="10354:[3720..3803).226" Target="10312:[3905..3919).5" />
<Link Source="10354:[3720..3803).227" Target="10354:[3684..3818).31" />
<Link Source="10354:[3720..3803).227" Target="10286:[23056..23081).4" />
<Link Source="10354:[3720..3803).227" Target="10354:[3720..3803).226" />
<Link Source="10354:[3720..3803).227" Target="10312:[3905..3919).5" />
<Link Source="10312:[3892..3921).13" Target="10354:[3720..3803).225" />
<Link Source="10312:[3892..3921).13" Target="10286:[23056..23081).4" />
<Link Source="10312:[3935..3968).17" Target="10286:[23056..23081).4" />
<Link Source="10312:[3948..3966).5" Target="10286:[23056..23081).4" />
<Link Source="10353:[4698..4724).12" Target="10312:[3935..3968).17" />
<Link Source="10353:[4698..4724).12" Target="10312:[3948..3966).5" />
<Link Source="10353:[4750..4847).23" Target="10353:[4698..4724).12" />
<Link Source="10353:[4750..4847).23" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).23" Target="10312:[3948..3966).5" />
<Link Source="10353:[4863..5000).45" Target="10353:[4698..4724).12" />
<Link Source="10353:[4863..5000).45" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).45" Target="10312:[3948..3966).5" />
<Link Source="10353:[4863..5000).46" Target="10312:[3948..3966).5" />
<Link Source="10353:[5079..5183).23" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).23" Target="10312:[3948..3966).5" />
<Link Source="10353:[5197..5323).34" Target="10353:[4698..4724).12" />
<Link Source="10353:[5197..5323).34" Target="10353:[5079..5183).23" />
<Link Source="10353:[5197..5323).34" Target="10312:[3948..3966).5" />
<Link Source="10353:[5485..5759).67" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).67" Target="10312:[3948..3966).5" />
<Link Source="10353:[5485..5759).68" Target="10353:[4698..4724).12" />
<Link Source="10353:[5485..5759).68" Target="10353:[5485..5759).67" />
<Link Source="10353:[5485..5759).68" Target="10312:[3948..3966).5" />
<Link Source="10353:[5485..5759).69" Target="10312:[3948..3966).5" />
<Link Source="10353:[5775..5979).45" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).45" Target="10312:[3948..3966).5" />
<Link Source="10353:[5775..5979).47" Target="10353:[4698..4724).12" />
<Link Source="10353:[5775..5979).47" Target="10353:[5775..5979).45" />
<Link Source="10353:[5775..5979).47" Target="10312:[3948..3966).5" />
<Link Source="10353:[5995..6029).34" Target="10353:[5775..5979).47" />
<Link Source="10353:[5995..6029).34" Target="10312:[3948..3966).5" />
<Link Source="10353:[6002..6028).12" Target="10312:[3948..3966).5" />
<Link Source="10353:[6343..6358).12" Target="10353:[5995..6029).34" />
<Link Source="10353:[6343..6358).12" Target="10353:[6002..6028).12" />
<Link Source="10353:[6384..6410).67" Target="10353:[6002..6028).12" />
<Link Source="10353:[6384..6410).68" Target="10353:[6343..6358).12" />
<Link Source="10353:[6384..6410).68" Target="10353:[6384..6410).67" />
<Link Source="10353:[6384..6410).68" Target="10353:[6002..6028).12" />
<Link Source="10312:[5188..5207).5" Target="10286:[23056..23081).4" />
<Link Source="10312:[5209..5220).5" Target="10286:[23056..23081).4" />
<Link Source="10312:[5222..5231).5" Target="10286:[23056..23081).4" />
<Link Source="10312:[5233..5272).5" Target="10286:[23056..23081).4" />
<Link Source="10312:[5274..5295).5" Target="10286:[23056..23081).4" />
<Link Source="10312:[5297..5318).5" Target="10286:[23056..23081).4" />
<Link Source="10312:[5320..5333).5" Target="10286:[23056..23081).4" />
<Link Source="10312:[5124..5404).5" Target="10286:[23056..23081).4" />
<Link Source="10312:[4685..4699).12" Target="10286:[23056..23081).4" />
<Link Source="10354:[3684..3818).32" Target="10286:[23056..23081).4" />
<Link Source="10354:[3684..3818).32" Target="10312:[4685..4699).12" />
<Link Source="10354:[3720..3803).233" Target="10354:[3684..3818).32" />
<Link Source="10354:[3720..3803).233" Target="10286:[23056..23081).4" />
<Link Source="10354:[3720..3803).233" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).233" Target="10312:[4685..4699).12" />
<Link Source="10354:[3720..3803).234" Target="10312:[4685..4699).12" />
<Link Source="10354:[3720..3803).235" Target="10354:[3684..3818).32" />
<Link Source="10354:[3720..3803).235" Target="10286:[23056..23081).4" />
<Link Source="10354:[3720..3803).235" Target="10354:[3720..3803).234" />
<Link Source="10354:[3720..3803).235" Target="10312:[4685..4699).12" />
<Link Source="10312:[4680..4787).23" Target="10354:[3720..3803).233" />
<Link Source="10312:[4680..4787).23" Target="10286:[23056..23081).4" />
<Link Source="10312:[4826..5058).56" Target="10286:[23056..23081).4" />
<Link Source="10312:[4826..5058).56" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).57" Target="10286:[23056..23081).4" />
<Link Source="10346:[10861..10875).8" Target="10286:[23056..23081).4" />
<Link Source="10354:[3684..3818).33" Target="10286:[23056..23081).4" />
<Link Source="10354:[3684..3818).33" Target="10346:[10861..10875).8" />
<Link Source="10354:[3720..3803).241" Target="10354:[3684..3818).33" />
<Link Source="10354:[3720..3803).241" Target="10286:[23056..23081).4" />
<Link Source="10354:[3720..3803).241" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).241" Target="10346:[10861..10875).8" />
<Link Source="10354:[3720..3803).242" Target="10346:[10861..10875).8" />
<Link Source="10354:[3720..3803).243" Target="10354:[3684..3818).33" />
<Link Source="10354:[3720..3803).243" Target="10286:[23056..23081).4" />
<Link Source="10354:[3720..3803).243" Target="10354:[3720..3803).242" />
<Link Source="10354:[3720..3803).243" Target="10346:[10861..10875).8" />
<Link Source="10346:[10848..10877).22" Target="10354:[3720..3803).241" />
<Link Source="10346:[10848..10877).22" Target="10286:[23056..23081).4" />
<Link Source="10346:[10897..10914).8" Target="10286:[23056..23081).4" />
<Link Source="10346:[7666..7775).8" Target="10286:[23056..23081).4" />
<Link Source="10346:[7666..7775).8" Target="10346:[10897..10914).8" />
<Link Source="10346:[7672..7773).22" Target="10346:[7666..7775).8" />
<Link Source="10346:[7672..7773).22" Target="10286:[23056..23081).4" />
<Link Source="10346:[7672..7773).22" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).22" Target="10346:[10897..10914).8" />
<Link Source="10346:[10893..11127).15" Target="10346:[7672..7773).22" />
<Link Source="10346:[10893..11127).15" Target="10286:[23056..23081).4" />
<Link Source="10346:[3525..3638).59" Target="10286:[23056..23081).4" />
<Link Source="10312:[7903..7936).29" Target="10286:[23056..23081).4" />
<Link Source="10312:[7916..7934).8" Target="10286:[23056..23081).4" />
<Link Source="10353:[4698..4724).13" Target="10312:[7903..7936).29" />
<Link Source="10353:[4698..4724).13" Target="10312:[7916..7934).8" />
<Link Source="10353:[4750..4847).25" Target="10353:[4698..4724).13" />
<Link Source="10353:[4750..4847).25" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).25" Target="10312:[7916..7934).8" />
<Link Source="10353:[4863..5000).49" Target="10353:[4698..4724).13" />
<Link Source="10353:[4863..5000).49" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).49" Target="10312:[7916..7934).8" />
<Link Source="10353:[4863..5000).50" Target="10312:[7916..7934).8" />
<Link Source="10353:[5079..5183).25" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).25" Target="10312:[7916..7934).8" />
<Link Source="10353:[5197..5323).37" Target="10353:[4698..4724).13" />
<Link Source="10353:[5197..5323).37" Target="10353:[5079..5183).25" />
<Link Source="10353:[5197..5323).37" Target="10312:[7916..7934).8" />
<Link Source="10353:[5485..5759).73" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).73" Target="10312:[7916..7934).8" />
<Link Source="10353:[5485..5759).74" Target="10353:[4698..4724).13" />
<Link Source="10353:[5485..5759).74" Target="10353:[5485..5759).73" />
<Link Source="10353:[5485..5759).74" Target="10312:[7916..7934).8" />
<Link Source="10353:[5485..5759).75" Target="10312:[7916..7934).8" />
<Link Source="10353:[5775..5979).49" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).49" Target="10312:[7916..7934).8" />
<Link Source="10353:[5775..5979).51" Target="10353:[4698..4724).13" />
<Link Source="10353:[5775..5979).51" Target="10353:[5775..5979).49" />
<Link Source="10353:[5775..5979).51" Target="10312:[7916..7934).8" />
<Link Source="10353:[5995..6029).37" Target="10353:[5775..5979).51" />
<Link Source="10353:[5995..6029).37" Target="10312:[7916..7934).8" />
<Link Source="10353:[6002..6028).13" Target="10312:[7916..7934).8" />
<Link Source="10353:[6343..6358).13" Target="10353:[5995..6029).37" />
<Link Source="10353:[6343..6358).13" Target="10353:[6002..6028).13" />
<Link Source="10353:[6384..6410).73" Target="10353:[6002..6028).13" />
<Link Source="10353:[6384..6410).74" Target="10353:[6343..6358).13" />
<Link Source="10353:[6384..6410).74" Target="10353:[6384..6410).73" />
<Link Source="10353:[6384..6410).74" Target="10353:[6002..6028).13" />
<Link Source="10312:[7952..7977).29" Target="10286:[23056..23081).4" />
<Link Source="10312:[8669..8690).4" Target="10286:[23056..23081).4" />
<Link Source="10312:[34911..34932).4" Target="10312:[8669..8690).4" />
<Link Source="10312:[34911..34932).4" Target="10286:[23056..23081).4" />
<Link Source="10312:[35517..35538).4" Target="10312:[34911..34932).4" />
<Link Source="10312:[35517..35538).4" Target="10286:[23056..23081).4" />
<Link Source="10312:[35696..35731).13" Target="10286:[23056..23081).4" />
<Link Source="10312:[36067..36079).7" Target="10286:[23056..23081).4" />
<Link Source="10312:[33656..33675).7" Target="10286:[23056..23081).4" />
<Link Source="10312:[33707..33716).7" Target="10286:[23056..23081).4" />
<Link Source="10312:[33754..33775).7" Target="10312:[35517..35538).4" />
<Link Source="10312:[33754..33775).7" Target="10286:[23056..23081).4" />
<Link Source="10312:[33777..33805).7" Target="10286:[23056..23081).4" />
<Link Source="10312:[33807..33820).7" Target="10312:[35517..35538).4" />
<Link Source="10312:[33807..33820).7" Target="10286:[23056..23081).4" />
<Link Source="10312:[33870..33909).7" Target="10286:[23056..23081).4" />
<Link Source="10312:[61608..61629).11" Target="10312:[33754..33775).7" />
<Link Source="10312:[61608..61629).11" Target="10286:[23056..23081).4" />
<Link Source="10312:[34022..34574).19" Target="10286:[23056..23081).4" />
<Link Source="10354:[9012..9030).7" Target="10312:[35517..35538).4" />
<Link Source="10354:[9012..9030).7" Target="10286:[23056..23081).4" />
<Link Source="10354:[8981..9152).7" Target="10312:[35517..35538).4" />
<Link Source="10354:[8981..9152).7" Target="10286:[23056..23081).4" />
<Link Source="10354:[9060..9070).7" Target="10286:[23056..23081).4" />
<Link Source="10354:[4058..4122).78" Target="10354:[9012..9030).7" />
<Link Source="10354:[4058..4122).78" Target="10354:[9060..9070).7" />
<Link Source="10354:[9056..9141).25" Target="10354:[4058..4122).78" />
<Link Source="10354:[9056..9141).25" Target="10286:[23056..23081).4" />
<Link Source="10354:[9073..9077).7" Target="10286:[23056..23081).4" />
<Link Source="10354:[4058..4122).79" Target="10354:[8981..9152).7" />
<Link Source="10354:[4058..4122).79" Target="10354:[9073..9077).7" />
<Link Source="10354:[9056..9141).26" Target="10354:[4058..4122).79" />
<Link Source="10354:[9056..9141).26" Target="10286:[23056..23081).4" />
<Link Source="10354:[9056..9141).27" Target="10354:[9056..9141).25" />
<Link Source="10354:[9056..9141).27" Target="10354:[9056..9141).26" />
<Link Source="10354:[9056..9141).27" Target="10286:[23056..23081).4" />
<Link Source="10312:[36566..36625).7" Target="10286:[23056..23081).4" />
<Link Source="10312:[36643..36855).19" Target="10286:[23056..23081).4" />
<Link Source="10312:[36643..36855).20" Target="10312:[36566..36625).7" />
<Link Source="10312:[36643..36855).20" Target="10312:[35517..35538).4" />
<Link Source="10312:[36643..36855).20" Target="10312:[36643..36855).19" />
<Link Source="10312:[36643..36855).20" Target="10286:[23056..23081).4" />
<Link Source="10312:[37029..37117).19" Target="10312:[35517..35538).4" />
<Link Source="10312:[37029..37117).19" Target="10286:[23056..23081).4" />
<Link Source="10312:[37254..37416).19" Target="10312:[35517..35538).4" />
<Link Source="10312:[37254..37416).19" Target="10286:[23056..23081).4" />
<Link Source="10312:[37436..37988).25" Target="10286:[23056..23081).4" />
<Link Source="10312:[38290..38338).7" Target="10286:[23056..23081).4" />
<Link Source="10306:[3345..3430).7" Target="10312:[35517..35538).4" />
<Link Source="10306:[3345..3430).7" Target="10312:[38290..38338).7" />
<Link Source="10306:[3358..3364).7" Target="10312:[38290..38338).7" />
<Link Source="10306:[3196..3249).23" Target="10306:[3345..3430).7" />
<Link Source="10306:[3196..3249).23" Target="10306:[3358..3364).7" />
<Link Source="10306:[3351..3428).19" Target="10306:[3196..3249).23" />
<Link Source="10306:[3351..3428).19" Target="10312:[38290..38338).7" />
<Link Source="10312:[38286..38405).13" Target="10306:[3351..3428).19" />
<Link Source="10312:[38286..38405).13" Target="10286:[23056..23081).4" />
<Link Source="10312:[36067..36079).8" Target="10312:[35517..35538).4" />
<Link Source="10312:[33656..33675).8" Target="10312:[35517..35538).4" />
<Link Source="10312:[33707..33716).8" Target="10312:[35517..35538).4" />
<Link Source="10312:[33754..33775).8" Target="10312:[35517..35538).4" />
<Link Source="10312:[33777..33805).8" Target="10312:[35517..35538).4" />
<Link Source="10312:[33807..33820).8" Target="10312:[35517..35538).4" />
<Link Source="10312:[33870..33909).8" Target="10312:[35517..35538).4" />
<Link Source="10312:[61608..61629).12" Target="10312:[33754..33775).8" />
<Link Source="10312:[61608..61629).12" Target="10312:[35517..35538).4" />
<Link Source="10312:[34022..34574).22" Target="10312:[33754..33775).8" />
<Link Source="10312:[34022..34574).22" Target="10312:[35517..35538).4" />
<Link Source="10354:[9012..9030).8" Target="10312:[35517..35538).4" />
<Link Source="10354:[8981..9152).8" Target="10312:[35517..35538).4" />
<Link Source="10354:[9060..9070).8" Target="10312:[35517..35538).4" />
<Link Source="10354:[4058..4122).83" Target="10354:[9012..9030).8" />
<Link Source="10354:[4058..4122).83" Target="10354:[9060..9070).8" />
<Link Source="10354:[9056..9141).29" Target="10354:[4058..4122).83" />
<Link Source="10354:[9056..9141).29" Target="10312:[35517..35538).4" />
<Link Source="10354:[9073..9077).8" Target="10312:[35517..35538).4" />
<Link Source="10354:[4058..4122).84" Target="10354:[8981..9152).8" />
<Link Source="10354:[4058..4122).84" Target="10354:[9073..9077).8" />
<Link Source="10354:[9056..9141).30" Target="10354:[4058..4122).84" />
<Link Source="10354:[9056..9141).30" Target="10312:[35517..35538).4" />
<Link Source="10354:[9056..9141).31" Target="10354:[9056..9141).29" />
<Link Source="10354:[9056..9141).31" Target="10354:[9056..9141).30" />
<Link Source="10354:[9056..9141).31" Target="10312:[35517..35538).4" />
<Link Source="10312:[36566..36625).8" Target="10312:[35517..35538).4" />
<Link Source="10312:[36643..36855).22" Target="10312:[35517..35538).4" />
<Link Source="10312:[36643..36855).23" Target="10312:[36566..36625).8" />
<Link Source="10312:[36643..36855).23" Target="10312:[35517..35538).4" />
<Link Source="10312:[36643..36855).23" Target="10312:[36643..36855).22" />
<Link Source="10312:[37029..37117).22" Target="10312:[35517..35538).4" />
<Link Source="10312:[37254..37416).22" Target="10312:[35517..35538).4" />
<Link Source="10312:[37436..37988).29" Target="10312:[35517..35538).4" />
<Link Source="10312:[38290..38338).8" Target="10312:[35517..35538).4" />
<Link Source="10306:[3345..3430).8" Target="10312:[35517..35538).4" />
<Link Source="10306:[3345..3430).8" Target="10312:[38290..38338).8" />
<Link Source="10306:[3358..3364).8" Target="10312:[38290..38338).8" />
<Link Source="10306:[3196..3249).24" Target="10306:[3345..3430).8" />
<Link Source="10306:[3196..3249).24" Target="10306:[3358..3364).8" />
<Link Source="10306:[3351..3428).22" Target="10306:[3196..3249).24" />
<Link Source="10306:[3351..3428).22" Target="10312:[38290..38338).8" />
<Link Source="10312:[38286..38405).15" Target="10306:[3351..3428).22" />
<Link Source="10312:[38286..38405).15" Target="10312:[35517..35538).4" />
<Link Source="10312:[38756..38772).4" Target="10312:[35517..35538).4" />
<Link Source="10312:[38756..38772).4" Target="10286:[23056..23081).4" />
<Link Source="10354:[11428..11441).8" Target="10286:[23056..23081).4" />
<Link Source="10312:[38786..38797).4" Target="10286:[23056..23081).4" />
<Link Source="10345:[30883..31655).19" Target="10286:[23056..23081).4" />
<Link Source="10345:[30883..31655).19" Target="10312:[35517..35538).4" />
<Link Source="10345:[31734..31789).4" Target="10312:[35517..35538).4" />
<Link Source="10345:[31804..31825).4" Target="10312:[35517..35538).4" />
<Link Source="10345:[31840..31859).4" Target="10312:[35517..35538).4" />
<Link Source="10345:[31874..31885).4" Target="10312:[35517..35538).4" />
<Link Source="10345:[31900..31909).4" Target="10312:[35517..35538).4" />
<Link Source="10345:[31924..31963).4" Target="10312:[35517..35538).4" />
<Link Source="10345:[31978..31999).4" Target="10312:[35517..35538).4" />
<Link Source="10345:[32014..32027).4" Target="10312:[35517..35538).4" />
<Link Source="10345:[32114..32230).13" Target="10345:[31804..31825).4" />
<Link Source="10345:[32114..32230).13" Target="10312:[35517..35538).4" />
<Link Source="10345:[32114..32230).14" Target="EXTERNAL" />
<Link Source="10345:[32114..32230).14" Target="10312:[35517..35538).4" />
<Link Source="10345:[32118..32174).4" Target="10312:[35517..35538).4" />
<Link Source="10298:[471..492).67" Target="10345:[32114..32230).13" />
<Link Source="10298:[471..492).67" Target="10345:[32118..32174).4" />
<Link Source="10298:[494..511).67" Target="10345:[32114..32230).14" />
<Link Source="10298:[494..511).67" Target="10345:[32118..32174).4" />
<Link Source="10345:[32246..32312).7" Target="10345:[31804..31825).4" />
<Link Source="10345:[32246..32312).7" Target="10312:[35517..35538).4" />
<Link Source="10345:[32328..33465).10" Target="10345:[31734..31789).4" />
<Link Source="10345:[32328..33465).10" Target="10312:[35517..35538).4" />
<Link Source="10354:[3720..3803).257" Target="10354:[3684..3818).32" />
<Link Source="10354:[3720..3803).257" Target="10312:[35517..35538).4" />
<Link Source="10354:[3720..3803).257" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).257" Target="10312:[4685..4699).12" />
<Link Source="10354:[3720..3803).259" Target="10354:[3684..3818).32" />
<Link Source="10354:[3720..3803).259" Target="10312:[35517..35538).4" />
<Link Source="10354:[3720..3803).259" Target="10354:[3720..3803).234" />
<Link Source="10354:[3720..3803).259" Target="10312:[4685..4699).12" />
<Link Source="10312:[4680..4787).25" Target="10354:[3720..3803).257" />
<Link Source="10312:[4680..4787).25" Target="10286:[23056..23081).4" />
<Link Source="10346:[10861..10875).9" Target="10312:[35517..35538).4" />
<Link Source="10354:[3684..3818).36" Target="10312:[35517..35538).4" />
<Link Source="10354:[3684..3818).36" Target="10346:[10861..10875).9" />
<Link Source="10354:[3720..3803).265" Target="10354:[3684..3818).36" />
<Link Source="10354:[3720..3803).265" Target="10312:[35517..35538).4" />
<Link Source="10354:[3720..3803).265" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).265" Target="10346:[10861..10875).9" />
<Link Source="10354:[3720..3803).266" Target="10346:[10861..10875).9" />
<Link Source="10354:[3720..3803).267" Target="10354:[3684..3818).36" />
<Link Source="10354:[3720..3803).267" Target="10312:[35517..35538).4" />
<Link Source="10354:[3720..3803).267" Target="10354:[3720..3803).266" />
<Link Source="10354:[3720..3803).267" Target="10346:[10861..10875).9" />
<Link Source="10346:[10848..10877).25" Target="10354:[3720..3803).265" />
<Link Source="10346:[10848..10877).25" Target="10312:[35517..35538).4" />
<Link Source="10346:[10897..10914).9" Target="10312:[35517..35538).4" />
<Link Source="10346:[7666..7775).9" Target="10312:[35517..35538).4" />
<Link Source="10346:[7666..7775).9" Target="10346:[10897..10914).9" />
<Link Source="10346:[7672..7773).25" Target="10346:[7666..7775).9" />
<Link Source="10346:[7672..7773).25" Target="10312:[35517..35538).4" />
<Link Source="10346:[7672..7773).25" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).25" Target="10346:[10897..10914).9" />
<Link Source="10346:[10893..11127).17" Target="10346:[7672..7773).25" />
<Link Source="10346:[10893..11127).17" Target="10312:[35517..35538).4" />
<Link Source="10346:[3525..3638).66" Target="10312:[35517..35538).4" />
<Link Source="10312:[7903..7936).33" Target="10312:[35517..35538).4" />
<Link Source="10312:[7916..7934).9" Target="10312:[35517..35538).4" />
<Link Source="10353:[4698..4724).14" Target="10312:[7903..7936).33" />
<Link Source="10353:[4698..4724).14" Target="10312:[7916..7934).9" />
<Link Source="10353:[4750..4847).27" Target="10353:[4698..4724).14" />
<Link Source="10353:[4750..4847).27" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).27" Target="10312:[7916..7934).9" />
<Link Source="10353:[4863..5000).53" Target="10353:[4698..4724).14" />
<Link Source="10353:[4863..5000).53" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).53" Target="10312:[7916..7934).9" />
<Link Source="10353:[4863..5000).54" Target="10312:[7916..7934).9" />
<Link Source="10353:[5079..5183).27" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).27" Target="10312:[7916..7934).9" />
<Link Source="10353:[5197..5323).40" Target="10353:[4698..4724).14" />
<Link Source="10353:[5197..5323).40" Target="10353:[5079..5183).27" />
<Link Source="10353:[5197..5323).40" Target="10312:[7916..7934).9" />
<Link Source="10353:[5485..5759).79" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).79" Target="10312:[7916..7934).9" />
<Link Source="10353:[5485..5759).80" Target="10353:[4698..4724).14" />
<Link Source="10353:[5485..5759).80" Target="10353:[5485..5759).79" />
<Link Source="10353:[5485..5759).80" Target="10312:[7916..7934).9" />
<Link Source="10353:[5485..5759).81" Target="10312:[7916..7934).9" />
<Link Source="10353:[5775..5979).53" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).53" Target="10312:[7916..7934).9" />
<Link Source="10353:[5775..5979).55" Target="10353:[4698..4724).14" />
<Link Source="10353:[5775..5979).55" Target="10353:[5775..5979).53" />
<Link Source="10353:[5775..5979).55" Target="10312:[7916..7934).9" />
<Link Source="10353:[5995..6029).40" Target="10353:[5775..5979).55" />
<Link Source="10353:[5995..6029).40" Target="10312:[7916..7934).9" />
<Link Source="10353:[6002..6028).14" Target="10312:[7916..7934).9" />
<Link Source="10353:[6343..6358).14" Target="10353:[5995..6029).40" />
<Link Source="10353:[6343..6358).14" Target="10353:[6002..6028).14" />
<Link Source="10353:[6384..6410).79" Target="10353:[6002..6028).14" />
<Link Source="10353:[6384..6410).80" Target="10353:[6343..6358).14" />
<Link Source="10353:[6384..6410).80" Target="10353:[6384..6410).79" />
<Link Source="10353:[6384..6410).80" Target="10353:[6002..6028).14" />
<Link Source="10312:[7952..7977).33" Target="10312:[35517..35538).4" />
<Link Source="10312:[19030..19039).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[19087..19100).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[61608..61629).13" Target="10312:[35517..35538).4" />
<Link Source="10312:[63473..63501).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[63503..63516).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[63638..63668).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[63682..63706).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[80978..80991).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[80993..81002).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[81004..81017).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[81004..81017).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[81019..81040).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[81019..81040).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[81042..81069).5" Target="10312:[63682..63706).5" />
<Link Source="10312:[81042..81069).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[81095..84034).5" Target="10312:[80978..80991).5" />
<Link Source="10312:[81095..84034).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[83750..83991).10" Target="10312:[81095..84034).5" />
<Link Source="10312:[83750..83991).11" Target="10312:[80993..81002).5" />
<Link Source="10312:[83750..83991).11" Target="10312:[83750..83991).10" />
<Link Source="10312:[83750..83991).11" Target="10312:[81095..84034).5" />
<Link Source="10312:[84050..84066).9" Target="10312:[35517..35538).4" />
<Link Source="10312:[66177..69285).52" Target="10312:[63473..63501).5" />
<Link Source="10312:[66177..69285).52" Target="10312:[63503..63516).5" />
<Link Source="10312:[66291..66342).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[75301..75322).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[75301..75322).5" Target="10312:[66291..66342).5" />
<Link Source="10312:[75324..75352).5" Target="10312:[66177..69285).52" />
<Link Source="10312:[75324..75352).5" Target="10312:[66291..66342).5" />
<Link Source="10312:[75735..75866).21" Target="10312:[75301..75322).5" />
<Link Source="10312:[75735..75866).21" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).21" Target="10312:[66291..66342).5" />
<Link Source="10312:[75735..75866).22" Target="10312:[66291..66342).5" />
<Link Source="10312:[75742..75804).5" Target="10312:[75735..75866).21" />
<Link Source="10312:[75742..75804).5" Target="10312:[66291..66342).5" />
<Link Source="10312:[75735..75866).24" Target="10312:[75324..75352).5" />
<Link Source="10312:[75735..75866).24" Target="10312:[75742..75804).5" />
<Link Source="10312:[66177..69285).55" Target="10312:[63638..63668).5" />
<Link Source="10312:[66177..69285).55" Target="10312:[63503..63516).5" />
<Link Source="10312:[77543..77571).5" Target="10312:[75735..75866).24" />
<Link Source="10312:[77543..77571).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[77573..77604).5" Target="10312:[66177..69285).55" />
<Link Source="10312:[77573..77604).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[77654..77700).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[77726..77892).17" Target="10312:[63503..63516).5" />
<Link Source="10312:[77726..77892).17" Target="10312:[35517..35538).4" />
<Link Source="10312:[77726..77892).18" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).18" Target="10312:[63503..63516).5" />
<Link Source="10312:[77730..77782).5" Target="10312:[63503..63516).5" />
<Link Source="10298:[471..492).73" Target="10312:[77726..77892).17" />
<Link Source="10298:[471..492).73" Target="10312:[77730..77782).5" />
<Link Source="10298:[494..511).73" Target="10312:[77726..77892).18" />
<Link Source="10298:[494..511).73" Target="10312:[77730..77782).5" />
<Link Source="10312:[78402..78430).5" Target="10312:[77543..77571).5" />
<Link Source="10312:[78402..78430).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[78432..78463).5" Target="10312:[77573..77604).5" />
<Link Source="10312:[78432..78463).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[78513..78552).5" Target="10312:[77654..77700).5" />
<Link Source="10312:[78513..78552).5" Target="10312:[63503..63516).5" />
<Link Source="10346:[8034..8062).5" Target="10312:[78402..78430).5" />
<Link Source="10346:[8034..8062).5" Target="10312:[63503..63516).5" />
<Link Source="10346:[8064..8095).5" Target="10312:[78432..78463).5" />
<Link Source="10346:[8064..8095).5" Target="10312:[63503..63516).5" />
<Link Source="10346:[8145..8184).5" Target="10312:[78513..78552).5" />
<Link Source="10346:[8145..8184).5" Target="10312:[63503..63516).5" />
<Link Source="10286:[30135..30160).4" Target="10346:[8034..8062).5" />
<Link Source="10286:[30135..30160).4" Target="10312:[63503..63516).5" />
<Link Source="10286:[30175..30206).4" Target="10346:[8064..8095).5" />
<Link Source="10286:[30175..30206).4" Target="10312:[63503..63516).5" />
<Link Source="10286:[30283..30330).4" Target="10312:[63503..63516).5" />
<Link Source="10286:[30012..30691).4" Target="10312:[63503..63516).5" />
<Link Source="10286:[30356..30522).13" Target="10286:[30012..30691).4" />
<Link Source="10286:[30356..30522).13" Target="10312:[35517..35538).4" />
<Link Source="10286:[30356..30522).13" Target="10312:[63503..63516).5" />
<Link Source="10286:[30356..30522).14" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).14" Target="10312:[63503..63516).5" />
<Link Source="10286:[30360..30412).4" Target="10312:[63503..63516).5" />
<Link Source="10298:[471..492).74" Target="10286:[30356..30522).13" />
<Link Source="10298:[471..492).74" Target="10286:[30360..30412).4" />
<Link Source="10298:[494..511).74" Target="10286:[30356..30522).14" />
<Link Source="10298:[494..511).74" Target="10286:[30360..30412).4" />
<Link Source="10060:[2173..2198).4" Target="10286:[30135..30160).4" />
<Link Source="10060:[2173..2198).4" Target="10312:[63503..63516).5" />
<Link Source="10060:[2213..2244).4" Target="10286:[30175..30206).4" />
<Link Source="10060:[2213..2244).4" Target="10312:[63503..63516).5" />
<Link Source="10060:[2320..2366).4" Target="10286:[30283..30330).4" />
<Link Source="10060:[2320..2366).4" Target="10312:[63503..63516).5" />
<Link Source="10060:[5691..5716).5" Target="10060:[2173..2198).4" />
<Link Source="10060:[5691..5716).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[5731..5762).5" Target="10060:[2213..2244).4" />
<Link Source="10060:[5731..5762).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[5777..5806).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[5882..5928).5" Target="10060:[2320..2366).4" />
<Link Source="10060:[5882..5928).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[5954..5991).17" Target="10312:[63503..63516).5" />
<Link Source="10060:[6005..6042).17" Target="10312:[63503..63516).5" />
<Link Source="10060:[6056..6090).9" Target="10312:[63503..63516).5" />
<Link Source="10060:[6056..6090).9" Target="10312:[35517..35538).4" />
<Link Source="10060:[6104..6172).13" Target="10312:[63503..63516).5" />
<Link Source="10060:[6188..6219).9" Target="10312:[63503..63516).5" />
<Link Source="10060:[10265..10311).5" Target="10060:[5882..5928).5" />
<Link Source="10060:[10265..10311).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[10337..10405).13" Target="10312:[63503..63516).5" />
<Link Source="10060:[10419..10454).17" Target="10312:[63503..63516).5" />
<Link Source="10060:[10470..10516).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[10470..10516).5" Target="10312:[35517..35538).4" />
<Link Source="10060:[10532..10544).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[10558..11295).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[10558..11295).5" Target="10312:[35517..35538).4" />
<Link Source="10060:[11990..12013).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[12078..12091).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[12117..12185).13" Target="10060:[12078..12091).5" />
<Link Source="10060:[12117..12185).13" Target="10312:[63503..63516).5" />
<Link Source="10060:[12199..12238).17" Target="10312:[63503..63516).5" />
<Link Source="10060:[12199..12238).18" Target="10060:[11990..12013).5" />
<Link Source="10060:[12199..12238).18" Target="10060:[12199..12238).17" />
<Link Source="10060:[12199..12238).18" Target="10312:[63503..63516).5" />
<Link Source="10345:[30725..30790).11" Target="10345:[31804..31825).4" />
<Link Source="10345:[30725..30790).11" Target="10286:[30283..30330).4" />
<Link Source="10345:[24226..24260).13" Target="10286:[30283..30330).4" />
<Link Source="10345:[30883..31655).22" Target="10312:[35517..35538).4" />
<Link Source="10345:[30883..31655).22" Target="10345:[30725..30790).11" />
<Link Source="10312:[4685..4699).14" Target="10312:[35517..35538).4" />
<Link Source="10354:[3684..3818).37" Target="10286:[23056..23081).4" />
<Link Source="10354:[3684..3818).37" Target="10312:[4685..4699).14" />
<Link Source="10354:[3720..3803).273" Target="10354:[3684..3818).37" />
<Link Source="10354:[3720..3803).273" Target="10345:[30725..30790).11" />
<Link Source="10354:[3720..3803).273" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).273" Target="10312:[4685..4699).14" />
<Link Source="10312:[4680..4787).27" Target="10354:[3720..3803).273" />
<Link Source="10312:[4680..4787).27" Target="10312:[35517..35538).4" />
<Link Source="10312:[4749..4764).5" Target="10312:[35517..35538).4" />
<Link Source="10312:[4749..4764).5" Target="10312:[4680..4787).27" />
<Link Source="10312:[4826..5058).66" Target="10286:[23056..23081).4" />
<Link Source="10312:[4826..5058).66" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).66" Target="10312:[35517..35538).4" />
<Link Source="10312:[4826..5058).67" Target="10312:[35517..35538).4" />
<Link Source="10312:[5087..5101).5" Target="10312:[4749..4764).5" />
<Link Source="10312:[5087..5101).5" Target="10286:[23056..23081).4" />
<Link Source="10319:[43799..44676).25" Target="10286:[23056..23081).4" />
<Link Source="10319:[43853..43873).5" Target="10286:[23056..23081).4" />
<Link Source="10319:[41088..41107).5" Target="10319:[43799..44676).25" />
<Link Source="10319:[41088..41107).5" Target="10319:[43853..43873).5" />
<Link Source="10319:[41138..41158).5" Target="10319:[43853..43873).5" />
<Link Source="10354:[4919..5009).69" Target="10319:[41088..41107).5" />
<Link Source="10354:[4919..5009).69" Target="10319:[41138..41158).5" />
<Link Source="10354:[4094..4107).95" Target="10354:[4919..5009).69" />
<Link Source="10354:[4094..4107).95" Target="10345:[30725..30790).11" />
<Link Source="10354:[4094..4107).95" Target="10319:[41138..41158).5" />
<Link Source="10319:[41133..41220).9" Target="10354:[4094..4107).95" />
<Link Source="10319:[41133..41220).9" Target="10319:[43853..43873).5" />
<Link Source="10319:[41254..41268).5" Target="10319:[43853..43873).5" />
<Link Source="10354:[4525..4595).9" Target="10319:[41088..41107).5" />
<Link Source="10354:[4525..4595).9" Target="10319:[41254..41268).5" />
<Link Source="10354:[4561..4580).9" Target="10354:[4525..4595).9" />
<Link Source="10354:[4561..4580).9" Target="10345:[30725..30790).11" />
<Link Source="10354:[4561..4580).9" Target="10319:[41254..41268).5" />
<Link Source="10319:[41236..41680).17" Target="10354:[4561..4580).9" />
<Link Source="10319:[41236..41680).17" Target="10319:[43853..43873).5" />
<Link Source="10319:[41302..41665).5" Target="10319:[41236..41680).17" />
<Link Source="10319:[41302..41665).5" Target="10345:[30725..30790).11" />
<Link Source="10319:[41406..41476).7" Target="10319:[41236..41680).17" />
<Link Source="10319:[41406..41476).7" Target="10345:[30725..30790).11" />
<Link Source="10319:[41406..41476).7" Target="EXTERNAL" />
<Link Source="10319:[41406..41476).7" Target="10319:[41302..41665).5" />
<Link Source="10319:[41464..41476).7" Target="10319:[41406..41476).7" />
<Link Source="10319:[44751..44765).5" Target="10286:[23056..23081).4" />
<Link Source="10319:[84374..84391).5" Target="10319:[44751..44765).5" />
<Link Source="10319:[84374..84391).5" Target="10286:[23056..23081).4" />
<Link Source="10319:[84406..84447).5" Target="10319:[44751..44765).5" />
<Link Source="10319:[84406..84447).5" Target="10286:[23056..23081).4" />
<Link Source="10319:[84462..84508).5" Target="10319:[44751..44765).5" />
<Link Source="10319:[84462..84508).5" Target="10286:[23056..23081).4" />
<Link Source="10319:[84124..109887).5" Target="10286:[23056..23081).4" />
<Link Source="10319:[85320..85348).17" Target="10286:[23056..23081).4" />
<Link Source="10319:[85366..85400).17" Target="10286:[23056..23081).4" />
<Link Source="10319:[85467..85484).9" Target="10286:[23056..23081).4" />
<Link Source="10319:[104874..105336).13" Target="10345:[30725..30790).11" />
<Link Source="10319:[104874..105336).13" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).9" Target="10345:[30725..30790).11" />
<Link Source="10319:[84691..84861).9" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).9" Target="10286:[23056..23081).4" />
<Link Source="10319:[45408..45422).5" Target="10286:[23056..23081).4" />
<Link Source="10287:[2377..2471).15" Target="10345:[30725..30790).11" />
<Link Source="10287:[2377..2471).15" Target="10286:[23056..23081).4" />
<Link Source="10287:[1215..1253).7" Target="10345:[30725..30790).11" />
<Link Source="10287:[2033..2081).10" Target="10345:[30725..30790).11" />
<Link Source="10287:[2033..2081).10" Target="EXTERNAL" />
<Link Source="10319:[53246..53267).4" Target="10345:[30725..30790).11" />
<Link Source="10319:[53387..53416).13" Target="10345:[30725..30790).11" />
<Link Source="10319:[53430..53464).13" Target="10345:[30725..30790).11" />
<Link Source="10286:[21546..21561).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[21563..21583).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[22086..22108).5" Target="10286:[21546..21561).5" />
<Link Source="10286:[22086..22108).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[22110..22130).5" Target="10286:[21563..21583).5" />
<Link Source="10286:[22110..22130).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[15616..15690).21" Target="10345:[30725..30790).11" />
<Link Source="10286:[15616..15690).22" Target="10345:[30725..30790).11" />
<Link Source="10286:[15616..15690).22" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[23124..23146).5" Target="10286:[22086..22108).5" />
<Link Source="10286:[23124..23146).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[23161..23181).5" Target="10286:[22110..22130).5" />
<Link Source="10286:[23161..23181).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[23281..23301).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[23380..23684).29" Target="10345:[30725..30790).11" />
<Link Source="10286:[23380..23684).29" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).9" Target="10345:[30725..30790).11" />
<Link Source="10286:[23893..24026).9" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).9" Target="10286:[23161..23181).5" />
<Link Source="10286:[24545..24641).9" Target="10345:[30725..30790).11" />
<Link Source="10286:[24655..25349).5" Target="10286:[24545..24641).9" />
<Link Source="10286:[24655..25349).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[26910..26935).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[26952..26974).5" Target="10286:[23124..23146).5" />
<Link Source="10286:[26952..26974).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[27002..27022).5" Target="10286:[23281..23301).5" />
<Link Source="10286:[27002..27022).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[27048..27088).17" Target="10345:[30725..30790).11" />
<Link Source="10286:[27048..27088).18" Target="10286:[26910..26935).5" />
<Link Source="10286:[27048..27088).18" Target="10286:[27048..27088).17" />
<Link Source="10286:[27048..27088).18" Target="10345:[30725..30790).11" />
<Link Source="10286:[27208..27236).9" Target="10345:[30725..30790).11" />
<Link Source="10286:[27250..27722).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[27738..27845).13" Target="10345:[30725..30790).11" />
<Link Source="10286:[27738..27845).14" Target="10286:[27208..27236).9" />
<Link Source="10286:[27738..27845).14" Target="10286:[27738..27845).13" />
<Link Source="10286:[27738..27845).14" Target="10345:[30725..30790).11" />
<Link Source="10286:[27861..27873).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[26281..26812).5" Target="10286:[27861..27873).5" />
<Link Source="10286:[26281..26812).5" Target="10345:[30725..30790).11" />
<Link Source="10286:[26450..26769).5" Target="10286:[24545..24641).9" />
<Link Source="10286:[26450..26769).5" Target="10286:[26281..26812).5" />
<Link Source="10287:[2377..2471).17" Target="10345:[30725..30790).11" />
<Link Source="10287:[791..833).11" Target="10345:[30725..30790).11" />
<Link Source="10327:[1017..1043).1" Target="10327:[945..949).1" />
<Link Source="10327:[1017..1043).1" Target="10327:[916..956).1" />
<Link Source="10327:[1058..1116).1" Target="10327:[951..955).1" />
<Link Source="10327:[1058..1116).1" Target="10327:[916..956).1" />
<Link Source="10327:[969..1217).1" Target="10327:[916..956).1" />
<Link Source="10327:[749..758).1" Target="10327:[969..1217).1" />
<Link Source="10327:[749..758).1" Target="10327:[916..956).1" />
<Link Source="10327:[832..845).1" Target="10327:[969..1217).1" />
<Link Source="10327:[832..845).1" Target="10327:[916..956).1" />
<Link Source="10327:[1142..1151).1" Target="10327:[1017..1043).1" />
<Link Source="10327:[1142..1151).1" Target="10327:[969..1217).1" />
<Link Source="10327:[1142..1151).1" Target="10327:[916..956).1" />
<Link Source="10327:[1177..1190).1" Target="10327:[1058..1116).1" />
<Link Source="10327:[1177..1190).1" Target="10327:[969..1217).1" />
<Link Source="10327:[1177..1190).1" Target="10327:[916..956).1" />
<Link Source="10327:[908..956).1" Target="10327:[916..956).1" />
<Link Source="10327:[1273..1314).1" Target="25002:[4395..4432).3" />
<Link Source="10327:[1273..1314).1" Target="25002:[4395..4432).1" />
<Link Source="10327:[1279..1312).1" Target="25002:[4395..4432).1" />
<Link Source="10327:[1279..1312).2" Target="10327:[1273..1314).1" />
<Link Source="10327:[1279..1312).2" Target="10345:[30725..30790).11" />
<Link Source="10327:[1279..1312).2" Target="10327:[1279..1312).1" />
<Link Source="10327:[1279..1312).2" Target="25002:[4395..4432).1" />
<Link Source="25002:[4446..4475).1" Target="10327:[1279..1312).2" />
<Link Source="25002:[4446..4475).1" Target="28001:[57412..58687).4" />
<Link Source="25002:[4446..4475).2" Target="25002:[4284..4323).1" />
<Link Source="25002:[4446..4475).2" Target="28001:[57412..58687).4" />
<Link Source="25002:[4446..4474).1" Target="28001:[57412..58687).4" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4475).1" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4475).2" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[2296..2334).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[2336..2375).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2450).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2451).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2451).2" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[1554..1589).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[1591..1630).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).3" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1702).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1703).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1703).2" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1703).3" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2533..2565).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2611..2759).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).2" Target="25002:[2775..2867).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[57393..58688).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[57412..58687).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[57412..58687).2" />
<Link Source="25002:[2775..2867).2" Target="28001:[57412..58687).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2816..2827).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[2842..2863).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[3253..3278).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[2878..2898).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[3427..3437).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[2946..2973).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[3562..3589).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[3091..3116).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[1383..1412).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[3131..3176).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[3191..3238).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[2988..3030).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[1713..1727).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[1891..1900).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[1941..1960).2" />
<Link Source="25002:[2775..2867).2" Target="25003:[2816..2827).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[2842..2863).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[3253..3278).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[2878..2898).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[3427..3437).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[2946..2973).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[3562..3589).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[3091..3116).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[1383..1412).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[3131..3176).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[3191..3238).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[2988..3030).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[1713..1727).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[1891..1900).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[1941..1960).4" />
<Link Source="25002:[2775..2867).2" Target="25003:[2816..2827).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[2842..2863).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3253..3278).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[2878..2898).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3427..3437).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[2946..2973).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3562..3589).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3091..3116).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[1383..1412).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3131..3176).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[3191..3238).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[2988..3030).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[1713..1727).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[1891..1900).6" />
<Link Source="25002:[2775..2867).2" Target="25003:[1941..1960).6" />
<Link Source="25002:[2775..2867).2" Target="28001:[58596..58672).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[58056..58258).1" />
<Link Source="25002:[2775..2867).2" Target="25007:[3901..4266).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[58389..58465).1" />
<Link Source="25002:[2775..2867).2" Target="25007:[3901..4266).20" />
<Link Source="25002:[2775..2867).2" Target="25007:[3901..4266).39" />
<Link Source="25002:[2775..2867).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).6" Target="25002:[2775..2867).1" />
<Link Source="25002:[2775..2867).6" Target="25002:[2775..2867).4" />
<Link Source="25002:[2775..2867).6" Target="28001:[57393..58688).1" />
<Link Source="25002:[2775..2867).6" Target="28001:[57412..58687).1" />
<Link Source="25002:[2775..2867).6" Target="28001:[57412..58687).2" />
<Link Source="25002:[2775..2867).6" Target="28001:[57412..58687).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2816..2827).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[2842..2863).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[3253..3278).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[2878..2898).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[3427..3437).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[2946..2973).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[3562..3589).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[3091..3116).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[1383..1412).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[3131..3176).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[3191..3238).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[2988..3030).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[1713..1727).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[1891..1900).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[1941..1960).2" />
<Link Source="25002:[2775..2867).6" Target="25003:[2816..2827).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[2842..2863).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[3253..3278).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[2878..2898).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[3427..3437).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[2946..2973).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[3562..3589).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[3091..3116).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[1383..1412).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[3131..3176).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[3191..3238).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[2988..3030).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[1713..1727).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[1891..1900).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[1941..1960).4" />
<Link Source="25002:[2775..2867).6" Target="25003:[2816..2827).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[2842..2863).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3253..3278).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[2878..2898).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3427..3437).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[2946..2973).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3562..3589).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3091..3116).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[1383..1412).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3131..3176).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[3191..3238).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[2988..3030).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[1713..1727).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[1891..1900).6" />
<Link Source="25002:[2775..2867).6" Target="25003:[1941..1960).6" />
<Link Source="25002:[2775..2867).6" Target="28001:[58596..58672).1" />
<Link Source="25002:[2775..2867).6" Target="28001:[58056..58258).1" />
<Link Source="25002:[2775..2867).6" Target="25007:[3901..4266).1" />
<Link Source="25002:[2775..2867).6" Target="28001:[58389..58465).1" />
<Link Source="25002:[2775..2867).6" Target="25007:[3901..4266).20" />
<Link Source="25002:[2775..2867).6" Target="25007:[3901..4266).39" />
<Link Source="25002:[2775..2867).6" Target="25002:[1656..1702).1" />
<Link Source="25003:[10448..10470).1" Target="25002:[2775..2867).6" />
<Link Source="25003:[10448..10470).1" Target="25002:[2775..2867).4" />
<Link Source="25003:[10451..10470).1" Target="25003:[10448..10470).1" />
<Link Source="25003:[10451..10470).1" Target="25002:[2775..2867).6" />
<Link Source="25003:[10451..10470).1" Target="25002:[2775..2867).4" />
<Link Source="25002:[2881..2977).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2881..2977).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).2" Target="25002:[2881..2977).1" />
<Link Source="25002:[2881..2977).2" Target="25003:[10451..10470).1" />
<Link Source="25002:[2881..2977).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[2881..2977).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[2881..2977).4" />
<Link Source="25002:[2881..2977).6" Target="25003:[10451..10470).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[1656..1702).1" />
<Link Source="25003:[10526..10550).1" Target="25002:[2881..2977).6" />
<Link Source="25003:[10526..10550).1" Target="25002:[2881..2977).4" />
<Link Source="25003:[10529..10550).1" Target="25003:[10526..10550).1" />
<Link Source="25003:[10529..10550).1" Target="25002:[2881..2977).6" />
<Link Source="25003:[10529..10550).1" Target="25002:[2881..2977).4" />
<Link Source="25002:[2991..3166).1" Target="25002:[2501..2531).1" />
<Link Source="25002:[2991..3166).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2567..2585).1" />
<Link Source="25002:[2991..3166).2" Target="25003:[10451..10470).1" />
<Link Source="25002:[2991..3166).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).2" />
<Link Source="25002:[2991..3166).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).8" Target="25002:[1656..1702).1" />
<Link Source="25003:[4933..4945).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4933..4945).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4947..4965).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4947..4965).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4967..5002).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4967..5002).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5004..5041).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5004..5041).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4904..7352).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4904..7352).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[912..917).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[912..917).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[950..967).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[950..967).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1000..1013).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1000..1013).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1048..1062).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1048..1062).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1099..1109).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1099..1109).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1151..1165).19" Target="25003:[4904..7352).1" />
<Link Source="25003:[1151..1165).19" Target="25002:[2991..3166).8" />
<Link Source="25003:[1276..1303).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1276..1303).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1336..1350).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1336..1350).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1460..1479).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1460..1479).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1527..1548).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1527..1548).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[1673..1689).7" Target="25003:[4904..7352).1" />
<Link Source="25003:[1673..1689).7" Target="25002:[2991..3166).8" />
<Link Source="25003:[5067..5072).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5067..5072).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5067..5072).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5067..5072).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5096..5113).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5096..5113).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5096..5113).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5096..5113).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5149..5162).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5149..5162).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5149..5162).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5149..5162).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5194..5203).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5194..5203).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5194..5203).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5194..5203).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5253..5275).1" Target="25003:[4967..5002).1" />
<Link Source="25003:[5253..5275).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5231..5324).1" Target="25003:[5253..5275).1" />
<Link Source="25003:[5231..5250).1" Target="25003:[5231..5324).1" />
<Link Source="25003:[5231..5250).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5231..5250).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5362..5386).1" Target="25003:[5004..5041).1" />
<Link Source="25003:[5362..5386).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5338..5428).1" Target="25003:[5362..5386).1" />
<Link Source="25003:[5338..5359).1" Target="25003:[5338..5428).1" />
<Link Source="25003:[5338..5359).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5338..5359).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5444..5476).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).2" Target="25003:[4933..4945).1" />
<Link Source="25003:[5490..6130).2" Target="25002:[2991..3166).4" />
<Link Source="25003:[5490..6130).2" Target="25003:[5490..6130).1" />
<Link Source="25003:[5490..6130).2" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).3" Target="25003:[4933..4945).1" />
<Link Source="25003:[5490..6130).3" Target="25002:[2991..3166).4" />
<Link Source="25003:[5490..6130).3" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).4" Target="EXTERNAL" />
<Link Source="25003:[5490..6130).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[5744..5776).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5744..5776).1" Target="25003:[5490..6130).2" />
<Link Source="25003:[5794..6115).1" Target="25003:[5490..6130).2" />
<Link Source="25003:[5794..6115).2" Target="25003:[5744..5776).1" />
<Link Source="25003:[5794..6115).2" Target="25003:[5794..6115).1" />
<Link Source="25003:[5794..6115).2" Target="25003:[5490..6130).2" />
<Link Source="25003:[6001..6015).1" Target="25003:[5744..5776).1" />
<Link Source="25003:[6001..6015).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6001..6015).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6001..6015).1" Target="25003:[5794..6115).2" />
<Link Source="25003:[6081..6086).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[6081..6086).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6081..6086).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6081..6086).1" Target="25003:[5794..6115).2" />
<Link Source="25003:[6146..6175).1" Target="25003:[4947..4965).1" />
<Link Source="25003:[6146..6175).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6146..6175).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[6208..7260).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6208..7260).1" Target="25003:[6146..6175).1" />
<Link Source="25003:[6208..7260).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[6276..6580).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6276..6580).1" Target="25003:[5194..5203).1" />
<Link Source="25003:[6276..6580).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6276..6580).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[6482..6561).1" Target="25003:[6276..6580).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[6276..6580).1" />
<Link Source="25003:[6600..7098).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[5744..5776).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[6600..7098).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[6208..7260).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[5744..5776).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[6600..7098).2" />
<Link Source="25003:[7118..7245).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[6659..6669).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[6208..7260).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6659..6669).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6482..6561).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6208..7260).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[5194..5203).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[7276..7341).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[7276..7290).1" Target="25003:[7276..7341).1" />
<Link Source="25003:[7276..7290).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[7276..7290).1" Target="25002:[2991..3166).8" />
<Link Source="25002:[2991..3166).9" Target="25002:[2991..3166).4" />
<Link Source="25002:[2991..3166).9" Target="25003:[7276..7341).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6081..6086).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5096..5113).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5149..5162).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6482..6496).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6659..6669).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[7276..7290).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[1276..1303).7" />
<Link Source="25002:[2991..3166).9" Target="25003:[6001..6015).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6146..6175).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5231..5250).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5338..5359).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[1673..1689).7" />
<Link Source="25002:[2991..3166).9" Target="25003:[4904..7352).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5194..5203).1" />
<Link Source="25002:[2991..3166).9" Target="25002:[1656..1702).1" />
<Link Source="25003:[5067..5072).2" Target="25003:[4933..4945).1" />
<Link Source="25003:[5067..5072).2" Target="25002:[2991..3166).9" />
<Link Source="25003:[5067..5072).2" Target="25003:[4904..7352).1" />
<Link Source="25003:[5067..5072).2" Target="25002:[2991..3166).8" />
<Link Source="25003:[7118..7245).8" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).8" Target="25002:[2991..3166).9" />
<Link Source="25003:[7118..7245).8" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).8" Target="25003:[6208..7260).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3341..3730).2" Target="25002:[3341..3730).1" />
<Link Source="25002:[3341..3730).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[3341..3730).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[3401..3434).1" Target="25002:[3341..3730).2" />
<Link Source="25002:[3401..3434).2" Target="25002:[3401..3434).1" />
<Link Source="25002:[3401..3434).2" Target="25002:[2991..3166).9" />
<Link Source="25002:[3401..3434).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[3401..3434).2" Target="25002:[3341..3730).2" />
<Link Source="25003:[10591..10601).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10591..10601).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10563..13732).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10563..13732).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10627..10664).1" Target="25003:[10591..10601).1" />
<Link Source="25003:[10627..10664).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10680..10725).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10680..10725).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[10680..10725).2" Target="25003:[10680..10725).1" />
<Link Source="25003:[10680..10725).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[10741..10799).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10741..10799).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10741..10799).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10741..10799).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[10741..10799).2" Target="25002:[3401..3434).2" />
<Link Source="25003:[10741..10799).2" Target="25003:[10741..10799).1" />
<Link Source="25003:[10741..10799).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[10815..10891).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10815..10891).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10815..10891).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10815..10891).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10907..10975).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10907..10975).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10907..10975).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10907..10975).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10991..11148).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10991..11148).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10991..11148).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[11059..11133).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10991..11148).1" />
<Link Source="25003:[11164..11464).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11164..11464).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[11164..11464).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11164..11464).2" Target="25003:[11164..11464).1" />
<Link Source="25003:[11164..11464).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[11224..11449).1" Target="25003:[11164..11464).2" />
<Link Source="25003:[11480..11903).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11480..11903).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[11480..11903).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11480..11903).2" Target="25003:[11480..11903).1" />
<Link Source="25003:[11480..11903).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[11917..12344).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11917..12344).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[11917..12344).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11917..12344).2" Target="25003:[11917..12344).1" />
<Link Source="25003:[11917..12344).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[12436..12535).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[12436..12535).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[12436..12535).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[12436..12535).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[12651..13498).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[12651..13498).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[12651..13498).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[12651..13498).2" Target="25003:[12651..13498).1" />
<Link Source="25003:[12651..13498).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[12855..12915).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13006..13029).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[1971..2761).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[1971..2761).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[2047..2709).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[1971..2761).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[2047..2709).2" Target="25003:[2047..2709).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[13006..13029).1" />
<Link Source="25003:[2321..2694).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2321..2694).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[2321..2694).1" Target="25003:[2047..2709).2" />
<Link Source="25003:[2321..2694).2" Target="25003:[2047..2709).2" />
<Link Source="25003:[2321..2340).1" Target="25003:[2321..2694).1" />
<Link Source="25003:[2321..2340).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2321..2340).1" Target="25003:[2047..2709).2" />
<Link Source="25003:[2723..2750).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2723..2750).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[2723..2750).1" Target="25003:[2321..2340).1" />
<Link Source="25003:[2723..2750).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[12994..13030).1" Target="25003:[2723..2750).1" />
<Link Source="25003:[12994..13030).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13060..13085).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[1971..2761).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[1971..2761).2" Target="25003:[13060..13085).1" />
<Link Source="25003:[2047..2709).4" Target="25003:[13060..13085).1" />
<Link Source="25003:[2047..2709).5" Target="25003:[1971..2761).2" />
<Link Source="25003:[2047..2709).5" Target="25003:[10741..10799).2" />
<Link Source="25003:[2047..2709).5" Target="25003:[2321..2340).1" />
<Link Source="25003:[2047..2709).5" Target="25003:[2047..2709).4" />
<Link Source="25003:[2047..2709).5" Target="25003:[13060..13085).1" />
<Link Source="25003:[2723..2750).2" Target="25003:[1971..2761).2" />
<Link Source="25003:[2723..2750).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[2723..2750).2" Target="25003:[2321..2340).1" />
<Link Source="25003:[2723..2750).2" Target="25003:[2047..2709).5" />
<Link Source="25003:[2723..2750).2" Target="25003:[13060..13085).1" />
<Link Source="25003:[13048..13086).1" Target="25003:[2723..2750).2" />
<Link Source="25003:[13048..13086).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13104..13483).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[13104..13483).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[13104..13483).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[13104..13483).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13393..13464).1" Target="25003:[12994..13030).1" />
<Link Source="25003:[13393..13464).1" Target="25003:[13104..13483).1" />
<Link Source="25003:[13393..13464).2" Target="25003:[13048..13086).1" />
<Link Source="25003:[13393..13464).2" Target="25003:[13104..13483).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[13393..13464).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[13393..13464).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[10741..10799).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2340).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[2047..2709).5" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2694).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2694).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[13104..13483).1" />
<Link Source="25003:[13514..13693).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[13514..13693).1" Target="25003:[13393..13464).3" />
<Link Source="25003:[13514..13693).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[13514..13693).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[13709..13721).1" Target="25002:[3401..3434).1" />
<Link Source="25002:[3401..3434).5" Target="25002:[3401..3434).2" />
<Link Source="25002:[3401..3434).5" Target="25003:[13709..13721).1" />
<Link Source="25002:[3401..3434).5" Target="25003:[13393..13464).3" />
<Link Source="25002:[3401..3434).5" Target="25002:[3341..3730).2" />
<Link Source="25002:[3452..3715).1" Target="25002:[3341..3730).2" />
<Link Source="25002:[3452..3715).2" Target="25002:[3401..3434).5" />
<Link Source="25002:[3452..3715).2" Target="25002:[3452..3715).1" />
<Link Source="25002:[3452..3715).2" Target="25002:[3341..3730).2" />
<Link Source="25002:[3508..3534).1" Target="25002:[3401..3434).5" />
<Link Source="25002:[3508..3534).1" Target="25002:[3452..3715).2" />
<Link Source="25003:[10680..10725).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[10815..10891).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[10907..10975).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[10991..11148).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[11059..11133).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[11059..11133).3" Target="25003:[10991..11148).2" />
<Link Source="25003:[11164..11464).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[11224..11449).4" Target="25003:[11164..11464).4" />
<Link Source="25003:[11480..11903).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[11917..12344).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[12436..12535).3" Target="25002:[3508..3534).1" />
<Link Source="25003:[12855..12915).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[13514..13693).5" Target="25002:[3508..3534).1" />
<Link Source="25002:[3840..3992).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[2991..3166).9" />
<Link Source="25002:[3840..3992).2" Target="25002:[3508..3534).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[3840..3992).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[2533..2565).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[2501..2531).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[4126..4179).1" Target="25002:[1656..1702).1" />
<Link Source="25003:[17577..17609).1" Target="25002:[4102..4181).3" />
<Link Source="25003:[17577..17609).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17611..17641).1" Target="25002:[4102..4181).4" />
<Link Source="25003:[17611..17641).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17667..17688).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17702..17728).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[17742..17827).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).2" Target="25003:[17742..17827).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[17742..17827).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[17757..17803).1" Target="25003:[17742..17827).2" />
<Link Source="25003:[17757..17803).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).6" Target="25003:[17667..17688).1" />
<Link Source="25003:[17742..17827).6" Target="25003:[17757..17803).1" />
<Link Source="25003:[17841..17904).1" Target="25003:[17742..17827).6" />
<Link Source="25003:[17841..17904).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17918..17965).1" Target="25003:[17742..17827).6" />
<Link Source="25003:[17918..17965).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17936..17956).1" Target="25003:[17918..17965).1" />
<Link Source="25003:[17936..17956).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[17979..18071).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).2" Target="25003:[17979..18071).1" />
<Link Source="25003:[17979..18071).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[17979..18071).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).6" Target="25003:[17979..18071).1" />
<Link Source="25003:[17979..18071).6" Target="25003:[17979..18071).4" />
<Link Source="25003:[17979..18071).6" Target="25002:[3508..3534).1" />
<Link Source="25003:[17979..18071).6" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18085..18181).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).2" Target="25003:[18085..18181).1" />
<Link Source="25003:[18085..18181).2" Target="25003:[17979..18071).6" />
<Link Source="25003:[18085..18181).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).6" Target="25003:[18085..18181).1" />
<Link Source="25003:[18085..18181).6" Target="25003:[18085..18181).4" />
<Link Source="25003:[18085..18181).6" Target="25003:[17979..18071).6" />
<Link Source="25003:[18085..18181).6" Target="25002:[4126..4179).1" />
<Link Source="25003:[18197..18490).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18197..18490).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18201..18226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18197..18490).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[22962..23812).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[23085..23122).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[23085..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21725..21759).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[21605..21640).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).2" Target="25003:[21773..22187).1" />
<Link Source="25003:[21773..22187).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[21773..22187).2" Target="25003:[18201..18226).1" />
<Link Source="25003:[21845..21956).1" Target="25003:[21773..22187).2" />
<Link Source="25003:[21924..21937).1" Target="25003:[21845..21956).1" />
<Link Source="25003:[18506..18543).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18557..18581).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18557..18581).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18658..18664).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18678..18713).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18557..18581).1" />
<Link Source="25003:[18678..18713).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[18727..18781).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18795..18929).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).2" Target="25003:[18795..18929).1" />
<Link Source="25003:[18795..18929).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[18795..18929).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18855..18914).1" Target="25003:[18795..18929).2" />
<Link Source="25003:[18855..18914).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[18855..18914).2" Target="25003:[18795..18929).2" />
<Link Source="25003:[18872..18912).1" Target="25003:[18795..18929).2" />
<Link Source="25003:[22283..22306).1" Target="25003:[18855..18914).1" />
<Link Source="25003:[22283..22306).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22308..22323).1" Target="25003:[18855..18914).2" />
<Link Source="25003:[22308..22323).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[22349..22404).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[22308..22323).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[18872..18912).1" />
<Link Source="25003:[22391..22403).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[14779..17530).1" Target="25003:[22283..22306).1" />
<Link Source="25003:[14779..17530).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14837..14866).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14882..14907).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[14882..14907).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[22391..22403).1" />
<Link Source="25003:[14921..15244).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[14921..15244).2" Target="25003:[14921..15244).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15100..15131).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15100..15131).1" Target="25003:[18085..18181).6" />
<Link Source="25003:[15100..15131).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15100..15131).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[15100..15131).2" Target="25003:[15100..15131).1" />
<Link Source="25003:[15100..15131).2" Target="25003:[14882..14907).3" />
<Link Source="25003:[15100..15131).2" Target="25003:[14921..15244).2" />
<Link Source="25003:[15149..15164).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15149..15164).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15149..15164).3" Target="25003:[15149..15164).1" />
<Link Source="25003:[15149..15164).3" Target="25003:[15100..15131).2" />
<Link Source="25003:[15149..15164).3" Target="25003:[14921..15244).2" />
<Link Source="25003:[15182..15229).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15182..15229).1" Target="25003:[18085..18181).6" />
<Link Source="25003:[15182..15229).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15182..15229).5" Target="25003:[14837..14866).1" />
<Link Source="25003:[15182..15229).5" Target="25003:[15182..15229).1" />
<Link Source="25003:[15182..15229).5" Target="25003:[15149..15164).3" />
<Link Source="25003:[15182..15229).5" Target="25003:[14921..15244).2" />
<Link Source="25003:[15260..15767).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[15260..15767).2" Target="25003:[15260..15767).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15320..15717).1" Target="25003:[15260..15767).2" />
<Link Source="25003:[15632..15650).1" Target="25003:[15320..15717).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[15632..15650).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[15182..15229).5" />
<Link Source="25003:[15632..15650).3" Target="25003:[15320..15717).1" />
<Link Source="25003:[15672..15698).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15672..15698).1" Target="25003:[18085..18181).6" />
<Link Source="25003:[15672..15698).1" Target="25003:[15320..15717).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[15672..15698).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[15632..15650).3" />
<Link Source="25003:[15672..15698).2" Target="25003:[15320..15717).1" />
<Link Source="25003:[15737..15752).1" Target="25003:[15260..15767).2" />
<Link Source="25003:[15737..15752).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15737..15752).3" Target="25003:[15737..15752).1" />
<Link Source="25003:[15737..15752).3" Target="25003:[15672..15698).2" />
<Link Source="25003:[15737..15752).3" Target="25003:[15260..15767).2" />
<Link Source="25003:[15783..15883).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15783..15883).1" Target="25003:[18085..18181).6" />
<Link Source="25003:[15783..15883).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15899..15914).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[15899..15914).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[15737..15752).3" />
<Link Source="25003:[15899..15914).3" Target="25003:[22391..22403).1" />
<Link Source="25003:[15930..16520).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[15930..16520).2" Target="25003:[15930..16520).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15986..16015).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[15986..16015).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15986..16015).3" Target="25003:[15986..16015).1" />
<Link Source="25003:[15986..16015).3" Target="25003:[15899..15914).3" />
<Link Source="25003:[15986..16015).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16055..16078).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16033..16095).1" Target="25003:[16055..16078).1" />
<Link Source="25003:[16033..16095).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16113..16472).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16113..16472).3" Target="25003:[16033..16095).1" />
<Link Source="25003:[16113..16472).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16202..16218).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16202..16218).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16202..16218).3" Target="25003:[16202..16218).1" />
<Link Source="25003:[16202..16218).3" Target="25003:[15986..16015).3" />
<Link Source="25003:[16202..16218).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).1" Target="25003:[16033..16095).1" />
<Link Source="25003:[16240..16275).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[16240..16275).2" Target="25003:[16240..16275).1" />
<Link Source="25003:[16240..16275).2" Target="25003:[16202..16218).3" />
<Link Source="25003:[16240..16275).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16297..16313).3" Target="25003:[16297..16313).1" />
<Link Source="25003:[16297..16313).3" Target="25003:[16240..16275).2" />
<Link Source="25003:[16297..16313).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[16335..16453).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16414..16430).1" Target="25003:[16335..16453).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[16414..16430).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[16297..16313).3" />
<Link Source="25003:[16414..16430).3" Target="25003:[16335..16453).1" />
<Link Source="25003:[16490..16505).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16490..16505).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16490..16505).3" Target="25003:[16490..16505).1" />
<Link Source="25003:[16490..16505).3" Target="25003:[16414..16430).3" />
<Link Source="25003:[16490..16505).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16536..16829).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16536..16829).2" Target="25003:[16536..16829).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[16845..16954).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[16845..16954).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16845..16954).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16970..17144).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16970..17144).2" Target="25003:[16970..17144).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17160..17340).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[17160..17340).2" Target="25003:[17160..17340).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17356..17482).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[17356..17482).2" Target="25003:[17356..17482).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17498..17519).1" Target="25003:[14837..14866).1" />
<Link Source="25003:[17498..17519).1" Target="25003:[16490..16505).3" />
<Link Source="25003:[17498..17519).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[22349..22404).7" Target="25003:[17498..17519).1" />
<Link Source="25003:[22349..22404).7" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).8" Target="25003:[22349..22404).4" />
<Link Source="25003:[22349..22404).8" Target="25003:[22349..22404).7" />
<Link Source="25003:[22349..22404).8" Target="25003:[18872..18912).1" />
<Link Source="25003:[18855..18914).5" Target="25003:[18727..18781).1" />
<Link Source="25003:[18855..18914).5" Target="25003:[22349..22404).8" />
<Link Source="25003:[18855..18914).5" Target="25003:[18795..18929).2" />
<Link Source="25003:[18855..18914).7" Target="25003:[17936..17956).1" />
<Link Source="25003:[18855..18914).7" Target="25003:[16113..16472).3" />
<Link Source="25003:[22308..22323).2" Target="25003:[18855..18914).7" />
<Link Source="25003:[22308..22323).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[22349..22404).10" Target="25003:[16113..16472).3" />
<Link Source="25003:[22349..22404).13" Target="25003:[22349..22404).10" />
<Link Source="25003:[22349..22404).13" Target="25003:[22308..22323).2" />
<Link Source="25003:[22349..22404).13" Target="25003:[16113..16472).3" />
<Link Source="25003:[14837..14866).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[14882..14907).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[14882..14907).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[14882..14907).6" Target="25003:[14882..14907).4" />
<Link Source="25003:[14882..14907).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[14921..15244).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[15100..15131).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[15100..15131).3" Target="25003:[14921..15244).4" />
<Link Source="25003:[15100..15131).4" Target="25003:[14837..14866).3" />
<Link Source="25003:[15100..15131).4" Target="25003:[15100..15131).3" />
<Link Source="25003:[15100..15131).4" Target="25003:[14882..14907).6" />
<Link Source="25003:[15100..15131).4" Target="25003:[14921..15244).4" />
<Link Source="25003:[15149..15164).4" Target="25003:[14921..15244).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15149..15164).6" Target="25003:[15149..15164).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[15100..15131).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[14921..15244).4" />
<Link Source="25003:[15182..15229).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[15182..15229).6" Target="25003:[14921..15244).4" />
<Link Source="25003:[15182..15229).10" Target="25003:[14837..14866).3" />
<Link Source="25003:[15182..15229).10" Target="25003:[15182..15229).6" />
<Link Source="25003:[15182..15229).10" Target="25003:[15149..15164).6" />
<Link Source="25003:[15182..15229).10" Target="25003:[14921..15244).4" />
<Link Source="25003:[15260..15767).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[15320..15717).13" Target="25003:[15260..15767).4" />
<Link Source="25003:[15632..15650).4" Target="25003:[15320..15717).13" />
<Link Source="25003:[15632..15650).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15632..15650).6" Target="25003:[15632..15650).4" />
<Link Source="25003:[15632..15650).6" Target="25003:[15182..15229).10" />
<Link Source="25003:[15632..15650).6" Target="25003:[15320..15717).13" />
<Link Source="25003:[15672..15698).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[15672..15698).3" Target="25003:[15320..15717).13" />
<Link Source="25003:[15672..15698).4" Target="25003:[14837..14866).3" />
<Link Source="25003:[15672..15698).4" Target="25003:[15672..15698).3" />
<Link Source="25003:[15672..15698).4" Target="25003:[15632..15650).6" />
<Link Source="25003:[15672..15698).4" Target="25003:[15320..15717).13" />
<Link Source="25003:[15737..15752).4" Target="25003:[15260..15767).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15737..15752).6" Target="25003:[15737..15752).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[15672..15698).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[15260..15767).4" />
<Link Source="25003:[15783..15883).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[15899..15914).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[15899..15914).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15899..15914).6" Target="25003:[15899..15914).4" />
<Link Source="25003:[15899..15914).6" Target="25003:[15737..15752).6" />
<Link Source="25003:[15899..15914).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[15986..16015).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[15986..16015).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15986..16015).6" Target="25003:[15986..16015).4" />
<Link Source="25003:[15986..16015).6" Target="25003:[15899..15914).6" />
<Link Source="25003:[15986..16015).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[16202..16218).9" Target="25003:[14837..14866).3" />
<Link Source="25003:[16202..16218).9" Target="25003:[16202..16218).1" />
<Link Source="25003:[16202..16218).9" Target="25003:[15986..16015).6" />
<Link Source="25003:[16202..16218).9" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).5" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16240..16275).6" Target="25003:[16240..16275).5" />
<Link Source="25003:[16240..16275).6" Target="25003:[16202..16218).9" />
<Link Source="25003:[16240..16275).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).9" Target="25003:[14837..14866).3" />
<Link Source="25003:[16297..16313).9" Target="25003:[16297..16313).1" />
<Link Source="25003:[16297..16313).9" Target="25003:[16240..16275).6" />
<Link Source="25003:[16297..16313).9" Target="25003:[16113..16472).3" />
<Link Source="25003:[16490..16505).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[16490..16505).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16490..16505).6" Target="25003:[16490..16505).4" />
<Link Source="25003:[16490..16505).6" Target="25003:[16297..16313).9" />
<Link Source="25003:[16490..16505).6" Target="25003:[16113..16472).3" />
<Link Source="25003:[16536..16829).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[16845..16954).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16970..17144).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[17160..17340).4" Target="25003:[16113..16472).3" />
<Link Source="25003:[17356..17482).5" Target="25003:[16113..16472).3" />
<Link Source="25003:[17498..17519).3" Target="25003:[14837..14866).3" />
<Link Source="25003:[17498..17519).3" Target="25003:[16490..16505).6" />
<Link Source="25003:[17498..17519).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[22349..22404).16" Target="25003:[17498..17519).3" />
<Link Source="25003:[22349..22404).16" Target="25003:[16113..16472).3" />
<Link Source="25003:[22349..22404).17" Target="25003:[22349..22404).13" />
<Link Source="25003:[22349..22404).17" Target="25003:[22349..22404).16" />
<Link Source="25003:[22349..22404).17" Target="25003:[16113..16472).3" />
<Link Source="25003:[18943..18992).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18943..18992).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18992).2" Target="25003:[18727..18781).1" />
<Link Source="25003:[18943..18992).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18991).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18992).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18992).2" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[18855..18914).5" />
<Link Source="25003:[22669..22689).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22703..22939).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22669..22689).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[18943..18991).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[22703..22939).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[18855..18914).5" />
<Link Source="25003:[22763..22783).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[22763..22783).3" Target="25003:[22599..22615).1" />
<Link Source="25003:[22763..22783).3" Target="25003:[22763..22783).1" />
<Link Source="25003:[22763..22783).3" Target="25003:[18678..18713).3" />
<Link Source="25003:[22763..22783).3" Target="25003:[22703..22939).3" />
<Link Source="25003:[22801..22890).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[22856..22871).1" Target="25003:[22801..22890).1" />
<Link Source="25003:[22856..22871).3" Target="25003:[22599..22615).1" />
<Link Source="25003:[22856..22871).3" Target="25003:[22856..22871).1" />
<Link Source="25003:[22856..22871).3" Target="25003:[22763..22783).3" />
<Link Source="25003:[22856..22871).3" Target="25003:[22801..22890).1" />
<Link Source="25003:[22908..22924).1" Target="25003:[22599..22615).1" />
<Link Source="25003:[22908..22924).1" Target="25003:[22856..22871).3" />
<Link Source="25003:[22908..22924).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[18943..18992).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[19106..19139).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[22908..22924).1" />
<Link Source="25003:[19106..19139).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19153..19205).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19219..19250).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[19219..19250).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[19219..19250).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).3" Target="25003:[19219..19250).1" />
<Link Source="25003:[19264..20938).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19327..19352).1" Target="25003:[19219..19250).1" />
<Link Source="25003:[19327..19352).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[19370..19400).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[19370..19400).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[19418..19628).1" Target="25003:[19370..19400).1" />
<Link Source="25003:[19418..19628).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[19418..19628).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[19648..19745).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[19765..20366).1" Target="25003:[17841..17904).1" />
<Link Source="25003:[19765..20366).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[19846..19878).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[19846..19878).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19846..19878).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[19846..19878).2" Target="25003:[19765..20366).1" />
<Link Source="25003:[19846..19877).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[22454..22470).1" Target="25003:[19846..19878).1" />
<Link Source="25003:[22454..22470).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22472..22481).1" Target="25003:[19846..19878).2" />
<Link Source="25003:[22472..22481).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[22507..22533).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[22472..22481).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22454..22470).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22507..22533).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22507..22533).4" />
<Link Source="25003:[22507..22533).6" Target="25003:[19106..19139).3" />
<Link Source="25003:[22507..22533).6" Target="25003:[19846..19877).1" />
<Link Source="25003:[19846..19878).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[19900..19925).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[19900..19925).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[22507..22533).6" />
<Link Source="25003:[19900..19925).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19370..19400).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[19947..19983).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[19900..19925).3" />
<Link Source="25003:[19947..19983).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19947..19983).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[20005..20024).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[19947..19983).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[20112..20144).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[20112..20144).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20112..20144).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20112..20144).2" Target="25003:[20046..20347).1" />
<Link Source="25003:[20112..20143).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[22454..22470).2" Target="25003:[20112..20144).1" />
<Link Source="25003:[22454..22470).2" Target="25003:[20112..20143).1" />
<Link Source="25003:[22472..22481).2" Target="25003:[20112..20144).2" />
<Link Source="25003:[22472..22481).2" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).7" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).10" Target="25003:[22507..22533).7" />
<Link Source="25003:[22507..22533).10" Target="25003:[22472..22481).2" />
<Link Source="25003:[22507..22533).10" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).12" Target="25003:[22454..22470).2" />
<Link Source="25003:[22507..22533).12" Target="25003:[22507..22533).7" />
<Link Source="25003:[22507..22533).12" Target="25003:[22507..22533).10" />
<Link Source="25003:[22507..22533).12" Target="25003:[19947..19983).3" />
<Link Source="25003:[22507..22533).12" Target="25003:[20112..20143).1" />
<Link Source="25003:[20112..20144).3" Target="25003:[20046..20347).1" />
<Link Source="25003:[20170..20195).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[20170..20195).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[22507..22533).12" />
<Link Source="25003:[20170..20195).3" Target="25003:[20046..20347).1" />
<Link Source="25003:[20221..20324).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[18506..18543).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[20221..20324).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[20170..20195).3" />
<Link Source="25003:[20221..20324).8" Target="25003:[20046..20347).1" />
<Link Source="25003:[20386..20505).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[20386..20505).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[20386..20505).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[20386..20505).4" Target="25003:[17979..18071).2" />
<Link Source="25003:[20386..20505).4" Target="25003:[19264..20938).3" />
<Link Source="25003:[20386..20505).5" Target="25003:[18085..18181).2" />
<Link Source="25003:[20386..20505).5" Target="25003:[19264..20938).3" />
<Link Source="25003:[20404..20504).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[4933..4945).4" Target="25003:[20386..20505).1" />
<Link Source="25003:[4933..4945).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[4947..4965).4" Target="25003:[20386..20505).2" />
<Link Source="25003:[4947..4965).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[4967..5002).4" Target="25003:[20386..20505).4" />
<Link Source="25003:[4967..5002).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[5004..5041).4" Target="25003:[20386..20505).5" />
<Link Source="25003:[5004..5041).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[4904..7352).4" Target="25003:[20386..20505).2" />
<Link Source="25003:[4904..7352).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[912..917).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[912..917).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[950..967).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[950..967).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[1000..1013).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[1000..1013).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[1048..1062).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[1048..1062).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[1099..1109).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[1099..1109).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[1151..1165).28" Target="25003:[4904..7352).4" />
<Link Source="25003:[1151..1165).28" Target="25003:[20404..20504).1" />
<Link Source="25003:[1336..1350).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[1336..1350).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[1460..1479).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[1460..1479).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[1527..1548).10" Target="25003:[4904..7352).4" />
<Link Source="25003:[1527..1548).10" Target="25003:[20404..20504).1" />
<Link Source="25003:[5067..5072).4" Target="25003:[4933..4945).4" />
<Link Source="25003:[5067..5072).4" Target="25003:[20221..20324).1" />
<Link Source="25003:[5067..5072).4" Target="25003:[4904..7352).4" />
<Link Source="25003:[5067..5072).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[5096..5113).4" Target="25003:[4933..4945).4" />
<Link Source="25003:[5096..5113).4" Target="25003:[20221..20324).1" />
<Link Source="25003:[5096..5113).4" Target="25003:[4904..7352).4" />
<Link Source="25003:[5096..5113).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[5149..5162).4" Target="25003:[4933..4945).4" />
<Link Source="25003:[5149..5162).4" Target="25003:[20221..20324).1" />
<Link Source="25003:[5149..5162).4" Target="25003:[4904..7352).4" />
<Link Source="25003:[5149..5162).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[5194..5203).4" Target="25003:[4933..4945).4" />
<Link Source="25003:[5194..5203).4" Target="25003:[20221..20324).1" />
<Link Source="25003:[5194..5203).4" Target="25003:[4904..7352).4" />
<Link Source="25003:[5194..5203).4" Target="25003:[20404..20504).1" />
<Link Source="25003:[5444..5476).7" Target="25003:[20404..20504).1" />
<Link Source="25003:[5490..6130).23" Target="25003:[4933..4945).4" />
<Link Source="25003:[5490..6130).23" Target="25003:[20221..20324).1" />
<Link Source="25003:[5490..6130).23" Target="25003:[20404..20504).1" />
<Link Source="25003:[7118..7245).19" Target="25003:[4904..7352).4" />
<Link Source="25003:[7118..7245).20" Target="25003:[4904..7352).4" />
<Link Source="25003:[7118..7245).20" Target="25003:[5490..6130).23" />
<Link Source="25003:[7118..7245).20" Target="25003:[7118..7245).19" />
<Link Source="25003:[7118..7245).22" Target="25003:[4904..7352).4" />
<Link Source="25003:[7118..7245).22" Target="25003:[5490..6130).23" />
<Link Source="25003:[7118..7245).22" Target="25003:[5194..5203).4" />
<Link Source="25003:[7118..7245).22" Target="25003:[7118..7245).19" />
<Link Source="25003:[20523..20557).1" Target="25003:[20386..20505).2" />
<Link Source="25003:[20523..20557).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[20575..20622).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[20575..20622).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[20575..20622).2" Target="25003:[20386..20505).2" />
<Link Source="25003:[20575..20622).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[20575..20622).3" Target="25003:[20575..20622).1" />
<Link Source="25003:[20575..20622).3" Target="25003:[20575..20622).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[5194..5203).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[5490..6130).23" />
<Link Source="25003:[20575..20622).3" Target="25003:[5096..5113).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[5149..5162).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[4904..7352).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[4947..4965).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[4967..5002).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[5004..5041).4" />
<Link Source="25003:[20575..20622).3" Target="25003:[19264..20938).3" />
<Link Source="25003:[20575..20622).4" Target="25003:[19264..20938).3" />
<Link Source="25003:[10680..10725).10" Target="25003:[20575..20622).4" />
<Link Source="25003:[10680..10725).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[10680..10725).11" Target="25003:[10680..10725).10" />
<Link Source="25003:[10680..10725).11" Target="25003:[20575..20622).4" />
<Link Source="25003:[10815..10891).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[10815..10891).7" Target="25003:[20575..20622).4" />
<Link Source="25003:[10907..10975).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[10907..10975).7" Target="25003:[20575..20622).4" />
<Link Source="25003:[10991..11148).4" Target="25003:[20575..20622).3" />
<Link Source="25003:[10991..11148).4" Target="25003:[20575..20622).4" />
<Link Source="25003:[11059..11133).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[11059..11133).7" Target="25003:[10991..11148).4" />
<Link Source="25003:[11164..11464).10" Target="25003:[20575..20622).4" />
<Link Source="25003:[11164..11464).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[11164..11464).11" Target="25003:[11164..11464).10" />
<Link Source="25003:[11164..11464).11" Target="25003:[20575..20622).4" />
<Link Source="25003:[11480..11903).10" Target="25003:[20575..20622).4" />
<Link Source="25003:[11480..11903).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[11480..11903).11" Target="25003:[11480..11903).10" />
<Link Source="25003:[11480..11903).11" Target="25003:[20575..20622).4" />
<Link Source="25003:[11917..12344).10" Target="25003:[20575..20622).4" />
<Link Source="25003:[11917..12344).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[11917..12344).11" Target="25003:[11917..12344).10" />
<Link Source="25003:[11917..12344).11" Target="25003:[20575..20622).4" />
<Link Source="25003:[12436..12535).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[12436..12535).7" Target="25003:[20575..20622).4" />
<Link Source="25003:[12855..12915).10" Target="25003:[20575..20622).3" />
<Link Source="25003:[13514..13693).13" Target="25003:[20575..20622).3" />
<Link Source="25003:[13514..13693).13" Target="25003:[20575..20622).4" />
<Link Source="25003:[20640..20746).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[20640..20746).2" Target="25003:[20575..20622).3" />
<Link Source="25003:[20640..20746).2" Target="25003:[20640..20746).1" />
<Link Source="25003:[20640..20746).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[20695..20727).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[20695..20727).1" Target="25003:[20575..20622).3" />
<Link Source="25003:[20695..20727).1" Target="25003:[20640..20746).2" />
<Link Source="25003:[20764..20834).1" Target="25003:[20386..20505).2" />
<Link Source="25003:[20764..20834).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[20764..20834).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20764..20834).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[20782..20832).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[22283..22306).4" Target="25003:[20764..20834).1" />
<Link Source="25003:[22283..22306).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[22308..22323).4" Target="25003:[20764..20834).2" />
<Link Source="25003:[22308..22323).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).28" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).31" Target="25003:[22349..22404).28" />
<Link Source="25003:[22349..22404).31" Target="25003:[22308..22323).4" />
<Link Source="25003:[22349..22404).31" Target="25003:[20782..20832).1" />
<Link Source="25003:[14837..14866).7" Target="25003:[20782..20832).1" />
<Link Source="25003:[14882..14907).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[14882..14907).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[14882..14907).12" Target="25003:[14882..14907).10" />
<Link Source="25003:[14882..14907).12" Target="25003:[20782..20832).1" />
<Link Source="25003:[14921..15244).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[14921..15244).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[14921..15244).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[14921..15244).11" Target="25003:[14921..15244).10" />
<Link Source="25003:[14921..15244).11" Target="25003:[20782..20832).1" />
<Link Source="25003:[15100..15131).7" Target="25003:[22283..22306).4" />
<Link Source="25003:[15100..15131).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[15100..15131).7" Target="25003:[14921..15244).11" />
<Link Source="25003:[15100..15131).8" Target="25003:[14837..14866).7" />
<Link Source="25003:[15100..15131).8" Target="25003:[15100..15131).7" />
<Link Source="25003:[15100..15131).8" Target="25003:[14882..14907).12" />
<Link Source="25003:[15100..15131).8" Target="25003:[14921..15244).11" />
<Link Source="25003:[15149..15164).10" Target="25003:[14921..15244).11" />
<Link Source="25003:[15149..15164).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15149..15164).12" Target="25003:[15149..15164).10" />
<Link Source="25003:[15149..15164).12" Target="25003:[15100..15131).8" />
<Link Source="25003:[15149..15164).12" Target="25003:[14921..15244).11" />
<Link Source="25003:[15182..15229).16" Target="25003:[22283..22306).4" />
<Link Source="25003:[15182..15229).16" Target="25003:[20575..20622).3" />
<Link Source="25003:[15182..15229).16" Target="25003:[14921..15244).11" />
<Link Source="25003:[15182..15229).20" Target="25003:[14837..14866).7" />
<Link Source="25003:[15182..15229).20" Target="25003:[15182..15229).16" />
<Link Source="25003:[15182..15229).20" Target="25003:[15149..15164).12" />
<Link Source="25003:[15182..15229).20" Target="25003:[14921..15244).11" />
<Link Source="25003:[15260..15767).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[15260..15767).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[15260..15767).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[15260..15767).11" Target="25003:[15260..15767).10" />
<Link Source="25003:[15260..15767).11" Target="25003:[20782..20832).1" />
<Link Source="25003:[15320..15717).37" Target="25003:[15260..15767).11" />
<Link Source="25003:[15632..15650).10" Target="25003:[15320..15717).37" />
<Link Source="25003:[15632..15650).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15632..15650).12" Target="25003:[15632..15650).10" />
<Link Source="25003:[15632..15650).12" Target="25003:[15182..15229).20" />
<Link Source="25003:[15632..15650).12" Target="25003:[15320..15717).37" />
<Link Source="25003:[15672..15698).7" Target="25003:[22283..22306).4" />
<Link Source="25003:[15672..15698).7" Target="25003:[20575..20622).3" />
<Link Source="25003:[15672..15698).7" Target="25003:[15320..15717).37" />
<Link Source="25003:[15672..15698).8" Target="25003:[14837..14866).7" />
<Link Source="25003:[15672..15698).8" Target="25003:[15672..15698).7" />
<Link Source="25003:[15672..15698).8" Target="25003:[15632..15650).12" />
<Link Source="25003:[15672..15698).8" Target="25003:[15320..15717).37" />
<Link Source="25003:[15737..15752).10" Target="25003:[15260..15767).11" />
<Link Source="25003:[15737..15752).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15737..15752).12" Target="25003:[15737..15752).10" />
<Link Source="25003:[15737..15752).12" Target="25003:[15672..15698).8" />
<Link Source="25003:[15737..15752).12" Target="25003:[15260..15767).11" />
<Link Source="25003:[15783..15883).4" Target="25003:[22283..22306).4" />
<Link Source="25003:[15783..15883).4" Target="25003:[20575..20622).3" />
<Link Source="25003:[15783..15883).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[15899..15914).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[15899..15914).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15899..15914).12" Target="25003:[15899..15914).10" />
<Link Source="25003:[15899..15914).12" Target="25003:[15737..15752).12" />
<Link Source="25003:[15899..15914).12" Target="25003:[20782..20832).1" />
<Link Source="25003:[15930..16520).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[15930..16520).11" Target="25003:[20575..20622).3" />
<Link Source="25003:[15930..16520).11" Target="25003:[20782..20832).1" />
<Link Source="25003:[15986..16015).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[15986..16015).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[15986..16015).12" Target="25003:[15986..16015).10" />
<Link Source="25003:[15986..16015).12" Target="25003:[15899..15914).12" />
<Link Source="25003:[15986..16015).12" Target="25003:[15930..16520).11" />
<Link Source="25003:[16202..16218).13" Target="25003:[15930..16520).11" />
<Link Source="25003:[16202..16218).15" Target="25003:[14837..14866).7" />
<Link Source="25003:[16202..16218).15" Target="25003:[16202..16218).13" />
<Link Source="25003:[16202..16218).15" Target="25003:[15986..16015).12" />
<Link Source="25003:[16202..16218).15" Target="25003:[15930..16520).11" />
<Link Source="25003:[16240..16275).9" Target="25003:[15930..16520).11" />
<Link Source="25003:[16240..16275).10" Target="25003:[14837..14866).7" />
<Link Source="25003:[16240..16275).10" Target="25003:[16240..16275).9" />
<Link Source="25003:[16240..16275).10" Target="25003:[16202..16218).15" />
<Link Source="25003:[16240..16275).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[16297..16313).13" Target="25003:[15930..16520).11" />
<Link Source="25003:[16297..16313).15" Target="25003:[14837..14866).7" />
<Link Source="25003:[16297..16313).15" Target="25003:[16297..16313).13" />
<Link Source="25003:[16297..16313).15" Target="25003:[16240..16275).10" />
<Link Source="25003:[16297..16313).15" Target="25003:[15930..16520).11" />
<Link Source="25003:[16335..16453).17" Target="25003:[15930..16520).11" />
<Link Source="25003:[16414..16430).4" Target="25003:[16335..16453).17" />
<Link Source="25003:[16414..16430).6" Target="25003:[14837..14866).7" />
<Link Source="25003:[16414..16430).6" Target="25003:[16414..16430).4" />
<Link Source="25003:[16414..16430).6" Target="25003:[16297..16313).15" />
<Link Source="25003:[16414..16430).6" Target="25003:[16335..16453).17" />
<Link Source="25003:[16490..16505).10" Target="25003:[15930..16520).11" />
<Link Source="25003:[16490..16505).12" Target="25003:[14837..14866).7" />
<Link Source="25003:[16490..16505).12" Target="25003:[16490..16505).10" />
<Link Source="25003:[16490..16505).12" Target="25003:[16414..16430).6" />
<Link Source="25003:[16490..16505).12" Target="25003:[15930..16520).11" />
<Link Source="25003:[16536..16829).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[16536..16829).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[16536..16829).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[16536..16829).11" Target="25003:[16536..16829).10" />
<Link Source="25003:[16536..16829).11" Target="25003:[20782..20832).1" />
<Link Source="25003:[16596..16624).1" Target="25003:[16536..16829).11" />
<Link Source="25003:[16596..16624).3" Target="25003:[14837..14866).7" />
<Link Source="25003:[16596..16624).3" Target="25003:[16596..16624).1" />
<Link Source="25003:[16596..16624).3" Target="25003:[16490..16505).12" />
<Link Source="25003:[16596..16624).3" Target="25003:[16536..16829).11" />
<Link Source="25003:[16642..16683).1" Target="25003:[16536..16829).11" />
<Link Source="25003:[16642..16683).4" Target="25003:[14837..14866).7" />
<Link Source="25003:[16642..16683).4" Target="25003:[16642..16683).1" />
<Link Source="25003:[16642..16683).4" Target="25003:[16596..16624).3" />
<Link Source="25003:[16642..16683).4" Target="25003:[16536..16829).11" />
<Link Source="25003:[16701..16717).1" Target="25003:[16536..16829).11" />
<Link Source="25003:[16701..16717).3" Target="25003:[14837..14866).7" />
<Link Source="25003:[16701..16717).3" Target="25003:[16701..16717).1" />
<Link Source="25003:[16701..16717).3" Target="25003:[16642..16683).4" />
<Link Source="25003:[16701..16717).3" Target="25003:[16536..16829).11" />
<Link Source="25003:[16735..16781).1" Target="25003:[16536..16829).11" />
<Link Source="25003:[16735..16781).4" Target="25003:[14837..14866).7" />
<Link Source="25003:[16735..16781).4" Target="25003:[16735..16781).1" />
<Link Source="25003:[16735..16781).4" Target="25003:[16701..16717).3" />
<Link Source="25003:[16735..16781).4" Target="25003:[16536..16829).11" />
<Link Source="25003:[16799..16814).1" Target="25003:[16536..16829).11" />
<Link Source="25003:[16799..16814).3" Target="25003:[14837..14866).7" />
<Link Source="25003:[16799..16814).3" Target="25003:[16799..16814).1" />
<Link Source="25003:[16799..16814).3" Target="25003:[16735..16781).4" />
<Link Source="25003:[16799..16814).3" Target="25003:[16536..16829).11" />
<Link Source="25003:[16845..16954).4" Target="25003:[22283..22306).4" />
<Link Source="25003:[16845..16954).4" Target="25003:[15930..16520).11" />
<Link Source="25003:[16845..16954).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[16970..17144).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[16970..17144).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[16970..17144).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[16970..17144).11" Target="25003:[16970..17144).10" />
<Link Source="25003:[16970..17144).11" Target="25003:[20782..20832).1" />
<Link Source="25003:[17160..17340).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[17160..17340).11" Target="25003:[22283..22306).4" />
<Link Source="25003:[17160..17340).11" Target="25003:[15930..16520).11" />
<Link Source="25003:[17160..17340).11" Target="25003:[17160..17340).10" />
<Link Source="25003:[17160..17340).11" Target="25003:[20782..20832).1" />
<Link Source="25003:[17356..17482).13" Target="25003:[20782..20832).1" />
<Link Source="25003:[17356..17482).14" Target="25003:[22283..22306).4" />
<Link Source="25003:[17356..17482).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[17356..17482).14" Target="25003:[17356..17482).13" />
<Link Source="25003:[17356..17482).14" Target="25003:[20782..20832).1" />
<Link Source="25003:[17498..17519).7" Target="25003:[14837..14866).7" />
<Link Source="25003:[17498..17519).7" Target="25003:[16799..16814).3" />
<Link Source="25003:[17498..17519).7" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).34" Target="25003:[17498..17519).7" />
<Link Source="25003:[22349..22404).34" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).35" Target="25003:[22349..22404).31" />
<Link Source="25003:[22349..22404).35" Target="25003:[22349..22404).34" />
<Link Source="25003:[22349..22404).35" Target="25003:[20782..20832).1" />
<Link Source="25003:[20764..20834).5" Target="25003:[18506..18543).1" />
<Link Source="25003:[20764..20834).5" Target="25003:[22349..22404).35" />
<Link Source="25003:[20764..20834).5" Target="25003:[20221..20324).8" />
<Link Source="25003:[20764..20834).5" Target="25003:[19264..20938).3" />
<Link Source="25003:[20852..20923).1" Target="25003:[20695..20727).1" />
<Link Source="25003:[20852..20923).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[20852..20923).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20852..20923).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[20867..20921).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[22283..22306).5" Target="25003:[20852..20923).1" />
<Link Source="25003:[22283..22306).5" Target="25003:[20867..20921).1" />
<Link Source="25003:[22308..22323).5" Target="25003:[20852..20923).2" />
<Link Source="25003:[22308..22323).5" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).37" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).40" Target="25003:[22349..22404).37" />
<Link Source="25003:[22349..22404).40" Target="25003:[22308..22323).5" />
<Link Source="25003:[22349..22404).40" Target="25003:[20867..20921).1" />
<Link Source="25003:[14837..14866).9" Target="25003:[20867..20921).1" />
<Link Source="25003:[14882..14907).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[14882..14907).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[14882..14907).15" Target="25003:[14882..14907).13" />
<Link Source="25003:[14882..14907).15" Target="25003:[20867..20921).1" />
<Link Source="25003:[14921..15244).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[14921..15244).14" Target="25003:[22283..22306).5" />
<Link Source="25003:[14921..15244).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[14921..15244).14" Target="25003:[14921..15244).13" />
<Link Source="25003:[14921..15244).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[15100..15131).9" Target="25003:[22283..22306).5" />
<Link Source="25003:[15100..15131).9" Target="25003:[15930..16520).11" />
<Link Source="25003:[15100..15131).9" Target="25003:[14921..15244).14" />
<Link Source="25003:[15100..15131).10" Target="25003:[14837..14866).9" />
<Link Source="25003:[15100..15131).10" Target="25003:[15100..15131).9" />
<Link Source="25003:[15100..15131).10" Target="25003:[14882..14907).15" />
<Link Source="25003:[15100..15131).10" Target="25003:[14921..15244).14" />
<Link Source="25003:[15149..15164).13" Target="25003:[14921..15244).14" />
<Link Source="25003:[15149..15164).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15149..15164).15" Target="25003:[15149..15164).13" />
<Link Source="25003:[15149..15164).15" Target="25003:[15100..15131).10" />
<Link Source="25003:[15149..15164).15" Target="25003:[14921..15244).14" />
<Link Source="25003:[15182..15229).21" Target="25003:[22283..22306).5" />
<Link Source="25003:[15182..15229).21" Target="25003:[15930..16520).11" />
<Link Source="25003:[15182..15229).21" Target="25003:[14921..15244).14" />
<Link Source="25003:[15182..15229).25" Target="25003:[14837..14866).9" />
<Link Source="25003:[15182..15229).25" Target="25003:[15182..15229).21" />
<Link Source="25003:[15182..15229).25" Target="25003:[15149..15164).15" />
<Link Source="25003:[15182..15229).25" Target="25003:[14921..15244).14" />
<Link Source="25003:[15260..15767).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[15260..15767).14" Target="25003:[22283..22306).5" />
<Link Source="25003:[15260..15767).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[15260..15767).14" Target="25003:[15260..15767).13" />
<Link Source="25003:[15260..15767).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[15320..15717).49" Target="25003:[15260..15767).14" />
<Link Source="25003:[15632..15650).13" Target="25003:[15320..15717).49" />
<Link Source="25003:[15632..15650).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15632..15650).15" Target="25003:[15632..15650).13" />
<Link Source="25003:[15632..15650).15" Target="25003:[15182..15229).25" />
<Link Source="25003:[15632..15650).15" Target="25003:[15320..15717).49" />
<Link Source="25003:[15672..15698).9" Target="25003:[22283..22306).5" />
<Link Source="25003:[15672..15698).9" Target="25003:[15930..16520).11" />
<Link Source="25003:[15672..15698).9" Target="25003:[15320..15717).49" />
<Link Source="25003:[15672..15698).10" Target="25003:[14837..14866).9" />
<Link Source="25003:[15672..15698).10" Target="25003:[15672..15698).9" />
<Link Source="25003:[15672..15698).10" Target="25003:[15632..15650).15" />
<Link Source="25003:[15672..15698).10" Target="25003:[15320..15717).49" />
<Link Source="25003:[15737..15752).13" Target="25003:[15260..15767).14" />
<Link Source="25003:[15737..15752).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15737..15752).15" Target="25003:[15737..15752).13" />
<Link Source="25003:[15737..15752).15" Target="25003:[15672..15698).10" />
<Link Source="25003:[15737..15752).15" Target="25003:[15260..15767).14" />
<Link Source="25003:[15783..15883).5" Target="25003:[22283..22306).5" />
<Link Source="25003:[15783..15883).5" Target="25003:[15930..16520).11" />
<Link Source="25003:[15783..15883).5" Target="25003:[20867..20921).1" />
<Link Source="25003:[15899..15914).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[15899..15914).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15899..15914).15" Target="25003:[15899..15914).13" />
<Link Source="25003:[15899..15914).15" Target="25003:[15737..15752).15" />
<Link Source="25003:[15899..15914).15" Target="25003:[20867..20921).1" />
<Link Source="25003:[15930..16520).14" Target="25003:[22283..22306).5" />
<Link Source="25003:[15930..16520).14" Target="25003:[15930..16520).11" />
<Link Source="25003:[15930..16520).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[15986..16015).13" Target="25003:[15930..16520).14" />
<Link Source="25003:[15986..16015).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[15986..16015).15" Target="25003:[15986..16015).13" />
<Link Source="25003:[15986..16015).15" Target="25003:[15899..15914).15" />
<Link Source="25003:[15986..16015).15" Target="25003:[15930..16520).14" />
<Link Source="25003:[16202..16218).19" Target="25003:[15930..16520).14" />
<Link Source="25003:[16202..16218).21" Target="25003:[14837..14866).9" />
<Link Source="25003:[16202..16218).21" Target="25003:[16202..16218).19" />
<Link Source="25003:[16202..16218).21" Target="25003:[15986..16015).15" />
<Link Source="25003:[16202..16218).21" Target="25003:[15930..16520).14" />
<Link Source="25003:[16240..16275).13" Target="25003:[15930..16520).14" />
<Link Source="25003:[16240..16275).14" Target="25003:[14837..14866).9" />
<Link Source="25003:[16240..16275).14" Target="25003:[16240..16275).13" />
<Link Source="25003:[16240..16275).14" Target="25003:[16202..16218).21" />
<Link Source="25003:[16240..16275).14" Target="25003:[15930..16520).14" />
<Link Source="25003:[16297..16313).19" Target="25003:[15930..16520).14" />
<Link Source="25003:[16297..16313).21" Target="25003:[14837..14866).9" />
<Link Source="25003:[16297..16313).21" Target="25003:[16297..16313).19" />
<Link Source="25003:[16297..16313).21" Target="25003:[16240..16275).14" />
<Link Source="25003:[16297..16313).21" Target="25003:[15930..16520).14" />
<Link Source="25003:[16335..16453).25" Target="25003:[15930..16520).14" />
<Link Source="25003:[16414..16430).7" Target="25003:[16335..16453).25" />
<Link Source="25003:[16414..16430).9" Target="25003:[14837..14866).9" />
<Link Source="25003:[16414..16430).9" Target="25003:[16414..16430).7" />
<Link Source="25003:[16414..16430).9" Target="25003:[16297..16313).21" />
<Link Source="25003:[16414..16430).9" Target="25003:[16335..16453).25" />
<Link Source="25003:[16490..16505).13" Target="25003:[15930..16520).14" />
<Link Source="25003:[16490..16505).15" Target="25003:[14837..14866).9" />
<Link Source="25003:[16490..16505).15" Target="25003:[16490..16505).13" />
<Link Source="25003:[16490..16505).15" Target="25003:[16414..16430).9" />
<Link Source="25003:[16490..16505).15" Target="25003:[15930..16520).14" />
<Link Source="25003:[16536..16829).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[16536..16829).14" Target="25003:[22283..22306).5" />
<Link Source="25003:[16536..16829).14" Target="25003:[15930..16520).14" />
<Link Source="25003:[16536..16829).14" Target="25003:[16536..16829).13" />
<Link Source="25003:[16536..16829).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[16845..16954).5" Target="25003:[22283..22306).5" />
<Link Source="25003:[16845..16954).5" Target="25003:[15930..16520).14" />
<Link Source="25003:[16845..16954).5" Target="25003:[20867..20921).1" />
<Link Source="25003:[16970..17144).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[16970..17144).14" Target="25003:[22283..22306).5" />
<Link Source="25003:[16970..17144).14" Target="25003:[15930..16520).14" />
<Link Source="25003:[16970..17144).14" Target="25003:[16970..17144).13" />
<Link Source="25003:[16970..17144).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[17160..17340).13" Target="25003:[20867..20921).1" />
<Link Source="25003:[17160..17340).14" Target="25003:[22283..22306).5" />
<Link Source="25003:[17160..17340).14" Target="25003:[15930..16520).14" />
<Link Source="25003:[17160..17340).14" Target="25003:[17160..17340).13" />
<Link Source="25003:[17160..17340).14" Target="25003:[20867..20921).1" />
<Link Source="25003:[17356..17482).17" Target="25003:[20867..20921).1" />
<Link Source="25003:[17356..17482).18" Target="25003:[22283..22306).5" />
<Link Source="25003:[17356..17482).18" Target="25003:[15930..16520).14" />
<Link Source="25003:[17356..17482).18" Target="25003:[17356..17482).17" />
<Link Source="25003:[17356..17482).18" Target="25003:[20867..20921).1" />
<Link Source="25003:[17498..17519).9" Target="25003:[14837..14866).9" />
<Link Source="25003:[17498..17519).9" Target="25003:[16490..16505).15" />
<Link Source="25003:[17498..17519).9" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).43" Target="25003:[17498..17519).9" />
<Link Source="25003:[22349..22404).43" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).44" Target="25003:[22349..22404).40" />
<Link Source="25003:[22349..22404).44" Target="25003:[22349..22404).43" />
<Link Source="25003:[22349..22404).44" Target="25003:[20867..20921).1" />
<Link Source="25003:[20852..20923).5" Target="25003:[19153..19205).1" />
<Link Source="25003:[20852..20923).5" Target="25003:[22349..22404).44" />
<Link Source="25003:[20852..20923).5" Target="25003:[19264..20938).3" />
<Link Source="25003:[19418..19628).6" Target="25003:[15930..16520).14" />
<Link Source="25003:[19648..19745).4" Target="25003:[15930..16520).14" />
<Link Source="25003:[19699..19726).1" Target="25003:[19648..19745).4" />
<Link Source="25003:[19699..19726).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19699..19726).3" Target="25003:[19699..19726).1" />
<Link Source="25003:[19699..19726).3" Target="25003:[20764..20834).5" />
<Link Source="25003:[19699..19726).3" Target="25003:[19648..19745).4" />
<Link Source="25003:[19846..19878).4" Target="25003:[18506..18543).1" />
<Link Source="25003:[19846..19878).4" Target="25003:[15930..16520).14" />
<Link Source="25003:[19846..19878).5" Target="25003:[17936..17956).1" />
<Link Source="25003:[19846..19878).5" Target="25003:[15930..16520).14" />
<Link Source="25003:[19846..19877).2" Target="25003:[15930..16520).14" />
<Link Source="25003:[22454..22470).3" Target="25003:[19846..19878).4" />
<Link Source="25003:[22454..22470).3" Target="25003:[19846..19877).2" />
<Link Source="25003:[22472..22481).3" Target="25003:[19846..19878).5" />
<Link Source="25003:[22472..22481).3" Target="25003:[19846..19877).2" />
<Link Source="25003:[22507..22533).13" Target="25003:[19846..19877).2" />
<Link Source="25003:[22507..22533).16" Target="25003:[22507..22533).13" />
<Link Source="25003:[22507..22533).16" Target="25003:[22472..22481).3" />
<Link Source="25003:[22507..22533).16" Target="25003:[19846..19877).2" />
<Link Source="25003:[19846..19878).6" Target="25003:[15930..16520).14" />
<Link Source="25003:[19900..19925).4" Target="25003:[15930..16520).14" />
<Link Source="25003:[20112..20144).4" Target="25003:[18506..18543).1" />
<Link Source="25003:[20112..20144).4" Target="25003:[15930..16520).14" />
<Link Source="25003:[20112..20144).5" Target="25003:[17936..17956).1" />
<Link Source="25003:[20112..20144).5" Target="25003:[15930..16520).14" />
<Link Source="25003:[20112..20143).2" Target="25003:[15930..16520).14" />
<Link Source="25003:[22454..22470).4" Target="25003:[20112..20144).4" />
<Link Source="25003:[22454..22470).4" Target="25003:[20112..20143).2" />
<Link Source="25003:[22472..22481).4" Target="25003:[20112..20144).5" />
<Link Source="25003:[22472..22481).4" Target="25003:[20112..20143).2" />
<Link Source="25003:[22507..22533).19" Target="25003:[20112..20143).2" />
<Link Source="25003:[22507..22533).22" Target="25003:[22507..22533).19" />
<Link Source="25003:[22507..22533).22" Target="25003:[22472..22481).4" />
<Link Source="25003:[22507..22533).22" Target="25003:[20112..20143).2" />
<Link Source="25003:[20112..20144).6" Target="25003:[15930..16520).14" />
<Link Source="25003:[20170..20195).4" Target="25003:[15930..16520).14" />
<Link Source="25003:[912..917).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[950..967).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[1000..1013).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[1048..1062).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[1099..1109).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[1151..1165).31" Target="25003:[15930..16520).14" />
<Link Source="25003:[1336..1350).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[1460..1479).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[1527..1548).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[5067..5072).5" Target="25003:[15930..16520).14" />
<Link Source="25003:[5444..5476).9" Target="25003:[15930..16520).14" />
<Link Source="25003:[7118..7245).25" Target="25003:[15930..16520).14" />
<Link Source="25003:[20523..20557).2" Target="25003:[15930..16520).14" />
<Link Source="25003:[10680..10725).13" Target="25003:[15930..16520).14" />
<Link Source="25003:[10786..10799).1" Target="25003:[15930..16520).14" />
<Link Source="25003:[10680..10725).16" Target="25003:[10786..10799).1" />
<Link Source="25003:[10815..10891).9" Target="25003:[10786..10799).1" />
<Link Source="25003:[10907..10975).9" Target="25003:[10786..10799).1" />
<Link Source="25003:[10991..11148).5" Target="25003:[10786..10799).1" />
<Link Source="25003:[11059..11133).9" Target="25003:[10786..10799).1" />
<Link Source="25003:[11059..11133).9" Target="25003:[10991..11148).5" />
<Link Source="25003:[11164..11464).13" Target="25003:[10786..10799).1" />
<Link Source="25003:[11480..11903).13" Target="25003:[10786..10799).1" />
<Link Source="25003:[11917..12344).13" Target="25003:[10786..10799).1" />
<Link Source="25003:[12436..12535).9" Target="25003:[10786..10799).1" />
<Link Source="25003:[12855..12915).13" Target="25003:[10786..10799).1" />
<Link Source="25003:[13514..13693).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[20764..20834).7" Target="25003:[17936..17956).1" />
<Link Source="25003:[20764..20834).7" Target="25003:[15930..16520).14" />
<Link Source="25003:[22308..22323).6" Target="25003:[20764..20834).7" />
<Link Source="25003:[22308..22323).6" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).46" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).49" Target="25003:[22349..22404).46" />
<Link Source="25003:[22349..22404).49" Target="25003:[22308..22323).6" />
<Link Source="25003:[22349..22404).49" Target="25003:[15930..16520).14" />
<Link Source="25003:[14837..14866).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[14882..14907).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[14882..14907).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[14882..14907).18" Target="25003:[14882..14907).16" />
<Link Source="25003:[14882..14907).18" Target="25003:[15930..16520).14" />
<Link Source="25003:[14921..15244).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[14921..15244).17" Target="25003:[15930..16520).14" />
<Link Source="25003:[14921..15244).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[14921..15244).17" Target="25003:[14921..15244).16" />
<Link Source="25003:[15100..15131).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[15100..15131).11" Target="25003:[10786..10799).1" />
<Link Source="25003:[15100..15131).11" Target="25003:[14921..15244).17" />
<Link Source="25003:[15100..15131).12" Target="25003:[14837..14866).11" />
<Link Source="25003:[15100..15131).12" Target="25003:[15100..15131).11" />
<Link Source="25003:[15100..15131).12" Target="25003:[14882..14907).18" />
<Link Source="25003:[15100..15131).12" Target="25003:[14921..15244).17" />
<Link Source="25003:[15149..15164).16" Target="25003:[14921..15244).17" />
<Link Source="25003:[15149..15164).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[15149..15164).18" Target="25003:[15149..15164).16" />
<Link Source="25003:[15149..15164).18" Target="25003:[15100..15131).12" />
<Link Source="25003:[15149..15164).18" Target="25003:[14921..15244).17" />
<Link Source="25003:[15182..15229).26" Target="25003:[15930..16520).14" />
<Link Source="25003:[15182..15229).26" Target="25003:[10786..10799).1" />
<Link Source="25003:[15182..15229).26" Target="25003:[14921..15244).17" />
<Link Source="25003:[15182..15229).30" Target="25003:[14837..14866).11" />
<Link Source="25003:[15182..15229).30" Target="25003:[15182..15229).26" />
<Link Source="25003:[15182..15229).30" Target="25003:[15149..15164).18" />
<Link Source="25003:[15182..15229).30" Target="25003:[14921..15244).17" />
<Link Source="25003:[15260..15767).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[15260..15767).17" Target="25003:[15930..16520).14" />
<Link Source="25003:[15260..15767).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[15260..15767).17" Target="25003:[15260..15767).16" />
<Link Source="25003:[15320..15717).61" Target="25003:[15260..15767).17" />
<Link Source="25003:[15632..15650).16" Target="25003:[15320..15717).61" />
<Link Source="25003:[15632..15650).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[15632..15650).18" Target="25003:[15632..15650).16" />
<Link Source="25003:[15632..15650).18" Target="25003:[15182..15229).30" />
<Link Source="25003:[15632..15650).18" Target="25003:[15320..15717).61" />
<Link Source="25003:[15672..15698).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[15672..15698).11" Target="25003:[10786..10799).1" />
<Link Source="25003:[15672..15698).11" Target="25003:[15320..15717).61" />
<Link Source="25003:[15672..15698).12" Target="25003:[14837..14866).11" />
<Link Source="25003:[15672..15698).12" Target="25003:[15672..15698).11" />
<Link Source="25003:[15672..15698).12" Target="25003:[15632..15650).18" />
<Link Source="25003:[15672..15698).12" Target="25003:[15320..15717).61" />
<Link Source="25003:[15737..15752).16" Target="25003:[15260..15767).17" />
<Link Source="25003:[15737..15752).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[15737..15752).18" Target="25003:[15737..15752).16" />
<Link Source="25003:[15737..15752).18" Target="25003:[15672..15698).12" />
<Link Source="25003:[15737..15752).18" Target="25003:[15260..15767).17" />
<Link Source="25003:[15783..15883).6" Target="25003:[15930..16520).14" />
<Link Source="25003:[15783..15883).6" Target="25003:[10786..10799).1" />
<Link Source="25003:[15899..15914).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[15899..15914).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[15899..15914).18" Target="25003:[15899..15914).16" />
<Link Source="25003:[15899..15914).18" Target="25003:[15737..15752).18" />
<Link Source="25003:[15899..15914).18" Target="25003:[15930..16520).14" />
<Link Source="25003:[15986..16015).16" Target="25003:[10786..10799).1" />
<Link Source="25003:[15986..16015).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[15986..16015).18" Target="25003:[15986..16015).16" />
<Link Source="25003:[15986..16015).18" Target="25003:[15899..15914).18" />
<Link Source="25003:[15986..16015).18" Target="25003:[10786..10799).1" />
<Link Source="25003:[16202..16218).25" Target="25003:[10786..10799).1" />
<Link Source="25003:[16202..16218).27" Target="25003:[14837..14866).11" />
<Link Source="25003:[16202..16218).27" Target="25003:[16202..16218).25" />
<Link Source="25003:[16202..16218).27" Target="25003:[15986..16015).18" />
<Link Source="25003:[16202..16218).27" Target="25003:[10786..10799).1" />
<Link Source="25003:[16240..16275).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[16240..16275).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[16240..16275).18" Target="25003:[16240..16275).17" />
<Link Source="25003:[16240..16275).18" Target="25003:[16202..16218).27" />
<Link Source="25003:[16240..16275).18" Target="25003:[10786..10799).1" />
<Link Source="25003:[16297..16313).25" Target="25003:[10786..10799).1" />
<Link Source="25003:[16297..16313).27" Target="25003:[14837..14866).11" />
<Link Source="25003:[16297..16313).27" Target="25003:[16297..16313).25" />
<Link Source="25003:[16297..16313).27" Target="25003:[16240..16275).18" />
<Link Source="25003:[16297..16313).27" Target="25003:[10786..10799).1" />
<Link Source="25003:[16335..16453).33" Target="25003:[10786..10799).1" />
<Link Source="25003:[16490..16505).16" Target="25003:[10786..10799).1" />
<Link Source="25003:[16490..16505).18" Target="25003:[14837..14866).11" />
<Link Source="25003:[16490..16505).18" Target="25003:[16490..16505).16" />
<Link Source="25003:[16490..16505).18" Target="25003:[16297..16313).27" />
<Link Source="25003:[16490..16505).18" Target="25003:[10786..10799).1" />
<Link Source="25003:[16536..16829).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[16536..16829).17" Target="25003:[15930..16520).14" />
<Link Source="25003:[16536..16829).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[16536..16829).17" Target="25003:[16536..16829).16" />
<Link Source="25003:[16596..16624).4" Target="25003:[16536..16829).17" />
<Link Source="25003:[16596..16624).6" Target="25003:[14837..14866).11" />
<Link Source="25003:[16596..16624).6" Target="25003:[16596..16624).4" />
<Link Source="25003:[16596..16624).6" Target="25003:[16490..16505).18" />
<Link Source="25003:[16596..16624).6" Target="25003:[16536..16829).17" />
<Link Source="25003:[16642..16683).5" Target="25003:[16536..16829).17" />
<Link Source="25003:[16642..16683).8" Target="25003:[14837..14866).11" />
<Link Source="25003:[16642..16683).8" Target="25003:[16642..16683).5" />
<Link Source="25003:[16642..16683).8" Target="25003:[16596..16624).6" />
<Link Source="25003:[16642..16683).8" Target="25003:[16536..16829).17" />
<Link Source="25003:[16701..16717).4" Target="25003:[16536..16829).17" />
<Link Source="25003:[16701..16717).6" Target="25003:[14837..14866).11" />
<Link Source="25003:[16701..16717).6" Target="25003:[16701..16717).4" />
<Link Source="25003:[16701..16717).6" Target="25003:[16642..16683).8" />
<Link Source="25003:[16701..16717).6" Target="25003:[16536..16829).17" />
<Link Source="25003:[16735..16781).5" Target="25003:[16536..16829).17" />
<Link Source="25003:[16735..16781).8" Target="25003:[14837..14866).11" />
<Link Source="25003:[16735..16781).8" Target="25003:[16735..16781).5" />
<Link Source="25003:[16735..16781).8" Target="25003:[16701..16717).6" />
<Link Source="25003:[16735..16781).8" Target="25003:[16536..16829).17" />
<Link Source="25003:[16799..16814).4" Target="25003:[16536..16829).17" />
<Link Source="25003:[16799..16814).6" Target="25003:[14837..14866).11" />
<Link Source="25003:[16799..16814).6" Target="25003:[16799..16814).4" />
<Link Source="25003:[16799..16814).6" Target="25003:[16735..16781).8" />
<Link Source="25003:[16799..16814).6" Target="25003:[16536..16829).17" />
<Link Source="25003:[16845..16954).6" Target="25003:[15930..16520).14" />
<Link Source="25003:[16845..16954).6" Target="25003:[10786..10799).1" />
<Link Source="25003:[16970..17144).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[16970..17144).17" Target="25003:[15930..16520).14" />
<Link Source="25003:[16970..17144).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[16970..17144).17" Target="25003:[16970..17144).16" />
<Link Source="25003:[17160..17340).16" Target="25003:[15930..16520).14" />
<Link Source="25003:[17160..17340).17" Target="25003:[15930..16520).14" />
<Link Source="25003:[17160..17340).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[17160..17340).17" Target="25003:[17160..17340).16" />
<Link Source="25003:[17356..17482).21" Target="25003:[15930..16520).14" />
<Link Source="25003:[17356..17482).22" Target="25003:[15930..16520).14" />
<Link Source="25003:[17356..17482).22" Target="25003:[10786..10799).1" />
<Link Source="25003:[17356..17482).22" Target="25003:[17356..17482).21" />
<Link Source="25003:[17498..17519).11" Target="25003:[14837..14866).11" />
<Link Source="25003:[17498..17519).11" Target="25003:[16799..16814).6" />
<Link Source="25003:[17498..17519).11" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).52" Target="25003:[17498..17519).11" />
<Link Source="25003:[22349..22404).52" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).53" Target="25003:[22349..22404).49" />
<Link Source="25003:[22349..22404).53" Target="25003:[22349..22404).52" />
<Link Source="25003:[22349..22404).53" Target="25003:[15930..16520).14" />
<Link Source="25003:[20764..20834).10" Target="25003:[18506..18543).1" />
<Link Source="25003:[20764..20834).10" Target="25003:[22349..22404).53" />
<Link Source="25003:[20764..20834).10" Target="25003:[19699..19726).3" />
<Link Source="25003:[20764..20834).10" Target="25003:[15930..16520).14" />
<Link Source="25003:[20852..20923).7" Target="25003:[17936..17956).1" />
<Link Source="25003:[20852..20923).7" Target="25003:[15930..16520).14" />
<Link Source="25003:[22308..22323).7" Target="25003:[20852..20923).7" />
<Link Source="25003:[22308..22323).7" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).58" Target="25003:[22349..22404).46" />
<Link Source="25003:[22349..22404).58" Target="25003:[22308..22323).7" />
<Link Source="25003:[22349..22404).58" Target="25003:[15930..16520).14" />
<Link Source="25003:[15100..15131).13" Target="25003:[10786..10799).1" />
<Link Source="25003:[15100..15131).13" Target="25003:[14921..15244).17" />
<Link Source="25003:[15100..15131).14" Target="25003:[14837..14866).11" />
<Link Source="25003:[15100..15131).14" Target="25003:[15100..15131).13" />
<Link Source="25003:[15100..15131).14" Target="25003:[14882..14907).18" />
<Link Source="25003:[15100..15131).14" Target="25003:[14921..15244).17" />
<Link Source="25003:[15149..15164).21" Target="25003:[14837..14866).11" />
<Link Source="25003:[15149..15164).21" Target="25003:[15149..15164).16" />
<Link Source="25003:[15149..15164).21" Target="25003:[15100..15131).14" />
<Link Source="25003:[15149..15164).21" Target="25003:[14921..15244).17" />
<Link Source="25003:[15182..15229).31" Target="25003:[10786..10799).1" />
<Link Source="25003:[15182..15229).31" Target="25003:[14921..15244).17" />
<Link Source="25003:[15182..15229).35" Target="25003:[14837..14866).11" />
<Link Source="25003:[15182..15229).35" Target="25003:[15182..15229).31" />
<Link Source="25003:[15182..15229).35" Target="25003:[15149..15164).21" />
<Link Source="25003:[15182..15229).35" Target="25003:[14921..15244).17" />
<Link Source="25003:[15632..15650).21" Target="25003:[14837..14866).11" />
<Link Source="25003:[15632..15650).21" Target="25003:[15632..15650).16" />
<Link Source="25003:[15632..15650).21" Target="25003:[15182..15229).35" />
<Link Source="25003:[15632..15650).21" Target="25003:[15320..15717).61" />
<Link Source="25003:[15672..15698).13" Target="25003:[10786..10799).1" />
<Link Source="25003:[15672..15698).13" Target="25003:[15320..15717).61" />
<Link Source="25003:[15672..15698).14" Target="25003:[14837..14866).11" />
<Link Source="25003:[15672..15698).14" Target="25003:[15672..15698).13" />
<Link Source="25003:[15672..15698).14" Target="25003:[15632..15650).21" />
<Link Source="25003:[15672..15698).14" Target="25003:[15320..15717).61" />
<Link Source="25003:[15737..15752).21" Target="25003:[14837..14866).11" />
<Link Source="25003:[15737..15752).21" Target="25003:[15737..15752).16" />
<Link Source="25003:[15737..15752).21" Target="25003:[15672..15698).14" />
<Link Source="25003:[15737..15752).21" Target="25003:[15260..15767).17" />
<Link Source="25003:[15899..15914).21" Target="25003:[14837..14866).11" />
<Link Source="25003:[15899..15914).21" Target="25003:[15899..15914).16" />
<Link Source="25003:[15899..15914).21" Target="25003:[15737..15752).21" />
<Link Source="25003:[15899..15914).21" Target="25003:[15930..16520).14" />
<Link Source="25003:[15986..16015).21" Target="25003:[14837..14866).11" />
<Link Source="25003:[15986..16015).21" Target="25003:[15986..16015).16" />
<Link Source="25003:[15986..16015).21" Target="25003:[15899..15914).21" />
<Link Source="25003:[15986..16015).21" Target="25003:[10786..10799).1" />
<Link Source="25003:[16202..16218).30" Target="25003:[14837..14866).11" />
<Link Source="25003:[16202..16218).30" Target="25003:[16202..16218).25" />
<Link Source="25003:[16202..16218).30" Target="25003:[15986..16015).21" />
<Link Source="25003:[16202..16218).30" Target="25003:[10786..10799).1" />
<Link Source="25003:[16240..16275).20" Target="25003:[14837..14866).11" />
<Link Source="25003:[16240..16275).20" Target="25003:[16240..16275).17" />
<Link Source="25003:[16240..16275).20" Target="25003:[16202..16218).30" />
<Link Source="25003:[16240..16275).20" Target="25003:[10786..10799).1" />
<Link Source="25003:[16297..16313).30" Target="25003:[14837..14866).11" />
<Link Source="25003:[16297..16313).30" Target="25003:[16297..16313).25" />
<Link Source="25003:[16297..16313).30" Target="25003:[16240..16275).20" />
<Link Source="25003:[16297..16313).30" Target="25003:[10786..10799).1" />
<Link Source="25003:[16490..16505).21" Target="25003:[14837..14866).11" />
<Link Source="25003:[16490..16505).21" Target="25003:[16490..16505).16" />
<Link Source="25003:[16490..16505).21" Target="25003:[16297..16313).30" />
<Link Source="25003:[16490..16505).21" Target="25003:[10786..10799).1" />
<Link Source="25003:[17498..17519).13" Target="25003:[14837..14866).11" />
<Link Source="25003:[17498..17519).13" Target="25003:[16490..16505).21" />
<Link Source="25003:[17498..17519).13" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).61" Target="25003:[17498..17519).13" />
<Link Source="25003:[22349..22404).61" Target="25003:[15930..16520).14" />
<Link Source="25003:[22349..22404).62" Target="25003:[22349..22404).58" />
<Link Source="25003:[22349..22404).62" Target="25003:[22349..22404).61" />
<Link Source="25003:[22349..22404).62" Target="25003:[15930..16520).14" />
<Link Source="25003:[20852..20923).10" Target="25003:[19153..19205).1" />
<Link Source="25003:[20852..20923).10" Target="25003:[22349..22404).62" />
<Link Source="25003:[20852..20923).10" Target="25003:[20852..20923).5" />
<Link Source="25003:[20852..20923).10" Target="25003:[15930..16520).14" />
<Link Source="25003:[19418..19628).11" Target="25003:[10786..10799).1" />
<Link Source="25003:[19648..19745).7" Target="25003:[10786..10799).1" />
<Link Source="25003:[19699..19726).4" Target="25003:[19648..19745).7" />
<Link Source="25003:[19846..19878).7" Target="25003:[18506..18543).1" />
<Link Source="25003:[19846..19878).7" Target="25003:[10786..10799).1" />
<Link Source="25003:[19846..19878).8" Target="25003:[17936..17956).1" />
<Link Source="25003:[19846..19878).8" Target="25003:[10786..10799).1" />
<Link Source="25003:[19846..19877).3" Target="25003:[10786..10799).1" />
<Link Source="25003:[22454..22470).5" Target="25003:[19846..19878).7" />
<Link Source="25003:[22454..22470).5" Target="25003:[19846..19877).3" />
<Link Source="25003:[22472..22481).5" Target="25003:[19846..19878).8" />
<Link Source="25003:[22472..22481).5" Target="25003:[19846..19877).3" />
<Link Source="25003:[22507..22533).25" Target="25003:[19846..19877).3" />
<Link Source="25003:[22507..22533).28" Target="25003:[22507..22533).25" />
<Link Source="25003:[22507..22533).28" Target="25003:[22472..22481).5" />
<Link Source="25003:[22507..22533).28" Target="25003:[19846..19877).3" />
<Link Source="25003:[19846..19878).9" Target="25003:[10786..10799).1" />
<Link Source="25003:[19900..19925).7" Target="25003:[10786..10799).1" />
<Link Source="25003:[20112..20144).7" Target="25003:[18506..18543).1" />
<Link Source="25003:[20112..20144).7" Target="25003:[10786..10799).1" />
<Link Source="25003:[20112..20144).8" Target="25003:[17936..17956).1" />
<Link Source="25003:[20112..20144).8" Target="25003:[10786..10799).1" />
<Link Source="25003:[20112..20143).3" Target="25003:[10786..10799).1" />
<Link Source="25003:[22454..22470).6" Target="25003:[20112..20144).7" />
<Link Source="25003:[22454..22470).6" Target="25003:[20112..20143).3" />
<Link Source="25003:[22472..22481).6" Target="25003:[20112..20144).8" />
<Link Source="25003:[22472..22481).6" Target="25003:[20112..20143).3" />
<Link Source="25003:[22507..22533).31" Target="25003:[20112..20143).3" />
<Link Source="25003:[22507..22533).34" Target="25003:[22507..22533).31" />
<Link Source="25003:[22507..22533).34" Target="25003:[22472..22481).6" />
<Link Source="25003:[22507..22533).34" Target="25003:[20112..20143).3" />
<Link Source="25003:[20112..20144).9" Target="25003:[10786..10799).1" />
<Link Source="25003:[20170..20195).7" Target="25003:[10786..10799).1" />
<Link Source="25003:[912..917).12" Target="25003:[10786..10799).1" />
<Link Source="25003:[950..967).12" Target="25003:[10786..10799).1" />
<Link Source="25003:[1000..1013).12" Target="25003:[10786..10799).1" />
<Link Source="25003:[1048..1062).12" Target="25003:[10786..10799).1" />
<Link Source="25003:[1099..1109).12" Target="25003:[10786..10799).1" />
<Link Source="25003:[1151..1165).34" Target="25003:[10786..10799).1" />
<Link Source="25003:[1336..1350).12" Target="25003:[10786..10799).1" />
<Link Source="25003:[1460..1479).12" Target="25003:[10786..10799).1" />
<Link Source="25003:[1527..1548).12" Target="25003:[10786..10799).1" />
<Link Source="25003:[5067..5072).6" Target="25003:[10786..10799).1" />
<Link Source="25003:[5444..5476).11" Target="25003:[10786..10799).1" />
<Link Source="25003:[7118..7245).31" Target="25003:[10786..10799).1" />
<Link Source="25003:[20523..20557).3" Target="25003:[10786..10799).1" />
<Link Source="25003:[11120..11133).1" Target="25003:[11059..11133).9" />
<Link Source="25003:[10815..10891).13" Target="25003:[10786..10799).1" />
<Link Source="25003:[10815..10891).13" Target="25003:[11120..11133).1" />
<Link Source="25003:[10907..10975).13" Target="25003:[10786..10799).1" />
<Link Source="25003:[10907..10975).13" Target="25003:[11120..11133).1" />
<Link Source="25003:[11164..11464).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[11164..11464).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[11164..11464).17" Target="25003:[11164..11464).13" />
<Link Source="25003:[11480..11903).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[11480..11903).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[11480..11903).17" Target="25003:[11480..11903).13" />
<Link Source="25003:[11917..12344).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[11917..12344).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[11917..12344).17" Target="25003:[11917..12344).13" />
<Link Source="25003:[12436..12535).11" Target="25003:[10786..10799).1" />
<Link Source="25003:[12436..12535).11" Target="25003:[11120..11133).1" />
<Link Source="25003:[12855..12915).16" Target="25003:[11120..11133).1" />
<Link Source="25003:[13514..13693).21" Target="25003:[10786..10799).1" />
<Link Source="25003:[13514..13693).21" Target="25003:[11120..11133).1" />
<Link Source="25003:[20764..20834).12" Target="25003:[17936..17956).1" />
<Link Source="25003:[20764..20834).12" Target="25003:[10786..10799).1" />
<Link Source="25003:[22308..22323).8" Target="25003:[20764..20834).12" />
<Link Source="25003:[22308..22323).8" Target="25003:[10786..10799).1" />
<Link Source="25003:[22349..22404).64" Target="25003:[10786..10799).1" />
<Link Source="25003:[22349..22404).67" Target="25003:[22349..22404).64" />
<Link Source="25003:[22349..22404).67" Target="25003:[22308..22323).8" />
<Link Source="25003:[22349..22404).67" Target="25003:[10786..10799).1" />
<Link Source="25003:[14837..14866).15" Target="25003:[10786..10799).1" />
<Link Source="25003:[14882..14907).22" Target="25003:[10786..10799).1" />
<Link Source="25003:[14882..14907).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[14882..14907).24" Target="25003:[14882..14907).22" />
<Link Source="25003:[14882..14907).24" Target="25003:[10786..10799).1" />
<Link Source="25003:[14921..15244).22" Target="25003:[10786..10799).1" />
<Link Source="25003:[14921..15244).23" Target="25003:[10786..10799).1" />
<Link Source="25003:[14921..15244).23" Target="25003:[11120..11133).1" />
<Link Source="25003:[14921..15244).23" Target="25003:[14921..15244).22" />
<Link Source="25003:[15100..15131).15" Target="25003:[10786..10799).1" />
<Link Source="25003:[15100..15131).15" Target="25003:[11120..11133).1" />
<Link Source="25003:[15100..15131).15" Target="25003:[14921..15244).23" />
<Link Source="25003:[15100..15131).16" Target="25003:[14837..14866).15" />
<Link Source="25003:[15100..15131).16" Target="25003:[15100..15131).15" />
<Link Source="25003:[15100..15131).16" Target="25003:[14882..14907).24" />
<Link Source="25003:[15100..15131).16" Target="25003:[14921..15244).23" />
<Link Source="25003:[15149..15164).22" Target="25003:[14921..15244).23" />
<Link Source="25003:[15149..15164).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[15149..15164).24" Target="25003:[15149..15164).22" />
<Link Source="25003:[15149..15164).24" Target="25003:[15100..15131).16" />
<Link Source="25003:[15149..15164).24" Target="25003:[14921..15244).23" />
<Link Source="25003:[15182..15229).36" Target="25003:[10786..10799).1" />
<Link Source="25003:[15182..15229).36" Target="25003:[11120..11133).1" />
<Link Source="25003:[15182..15229).36" Target="25003:[14921..15244).23" />
<Link Source="25003:[15182..15229).40" Target="25003:[14837..14866).15" />
<Link Source="25003:[15182..15229).40" Target="25003:[15182..15229).36" />
<Link Source="25003:[15182..15229).40" Target="25003:[15149..15164).24" />
<Link Source="25003:[15182..15229).40" Target="25003:[14921..15244).23" />
<Link Source="25003:[15260..15767).22" Target="25003:[10786..10799).1" />
<Link Source="25003:[15260..15767).23" Target="25003:[10786..10799).1" />
<Link Source="25003:[15260..15767).23" Target="25003:[11120..11133).1" />
<Link Source="25003:[15260..15767).23" Target="25003:[15260..15767).22" />
<Link Source="25003:[15320..15717).85" Target="25003:[15260..15767).23" />
<Link Source="25003:[15632..15650).22" Target="25003:[15320..15717).85" />
<Link Source="25003:[15632..15650).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[15632..15650).24" Target="25003:[15632..15650).22" />
<Link Source="25003:[15632..15650).24" Target="25003:[15182..15229).40" />
<Link Source="25003:[15632..15650).24" Target="25003:[15320..15717).85" />
<Link Source="25003:[15672..15698).15" Target="25003:[10786..10799).1" />
<Link Source="25003:[15672..15698).15" Target="25003:[11120..11133).1" />
<Link Source="25003:[15672..15698).15" Target="25003:[15320..15717).85" />
<Link Source="25003:[15672..15698).16" Target="25003:[14837..14866).15" />
<Link Source="25003:[15672..15698).16" Target="25003:[15672..15698).15" />
<Link Source="25003:[15672..15698).16" Target="25003:[15632..15650).24" />
<Link Source="25003:[15672..15698).16" Target="25003:[15320..15717).85" />
<Link Source="25003:[15737..15752).22" Target="25003:[15260..15767).23" />
<Link Source="25003:[15737..15752).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[15737..15752).24" Target="25003:[15737..15752).22" />
<Link Source="25003:[15737..15752).24" Target="25003:[15672..15698).16" />
<Link Source="25003:[15737..15752).24" Target="25003:[15260..15767).23" />
<Link Source="25003:[15783..15883).8" Target="25003:[10786..10799).1" />
<Link Source="25003:[15783..15883).8" Target="25003:[11120..11133).1" />
<Link Source="25003:[15899..15914).22" Target="25003:[10786..10799).1" />
<Link Source="25003:[15899..15914).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[15899..15914).24" Target="25003:[15899..15914).22" />
<Link Source="25003:[15899..15914).24" Target="25003:[15737..15752).24" />
<Link Source="25003:[15899..15914).24" Target="25003:[10786..10799).1" />
<Link Source="25003:[15986..16015).22" Target="25003:[11120..11133).1" />
<Link Source="25003:[15986..16015).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[15986..16015).24" Target="25003:[15986..16015).22" />
<Link Source="25003:[15986..16015).24" Target="25003:[15899..15914).24" />
<Link Source="25003:[15986..16015).24" Target="25003:[11120..11133).1" />
<Link Source="25003:[16202..16218).31" Target="25003:[11120..11133).1" />
<Link Source="25003:[16202..16218).33" Target="25003:[14837..14866).15" />
<Link Source="25003:[16202..16218).33" Target="25003:[16202..16218).31" />
<Link Source="25003:[16202..16218).33" Target="25003:[15986..16015).24" />
<Link Source="25003:[16202..16218).33" Target="25003:[11120..11133).1" />
<Link Source="25003:[16240..16275).21" Target="25003:[11120..11133).1" />
<Link Source="25003:[16240..16275).22" Target="25003:[14837..14866).15" />
<Link Source="25003:[16240..16275).22" Target="25003:[16240..16275).21" />
<Link Source="25003:[16240..16275).22" Target="25003:[16202..16218).33" />
<Link Source="25003:[16240..16275).22" Target="25003:[11120..11133).1" />
<Link Source="25003:[16297..16313).31" Target="25003:[11120..11133).1" />
<Link Source="25003:[16297..16313).33" Target="25003:[14837..14866).15" />
<Link Source="25003:[16297..16313).33" Target="25003:[16297..16313).31" />
<Link Source="25003:[16297..16313).33" Target="25003:[16240..16275).22" />
<Link Source="25003:[16297..16313).33" Target="25003:[11120..11133).1" />
<Link Source="25003:[16335..16453).41" Target="25003:[11120..11133).1" />
<Link Source="25003:[16490..16505).22" Target="25003:[11120..11133).1" />
<Link Source="25003:[16490..16505).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[16490..16505).24" Target="25003:[16490..16505).22" />
<Link Source="25003:[16490..16505).24" Target="25003:[16297..16313).33" />
<Link Source="25003:[16490..16505).24" Target="25003:[11120..11133).1" />
<Link Source="25003:[16536..16829).22" Target="25003:[10786..10799).1" />
<Link Source="25003:[16536..16829).23" Target="25003:[10786..10799).1" />
<Link Source="25003:[16536..16829).23" Target="25003:[11120..11133).1" />
<Link Source="25003:[16536..16829).23" Target="25003:[16536..16829).22" />
<Link Source="25003:[16596..16624).7" Target="25003:[16536..16829).23" />
<Link Source="25003:[16596..16624).9" Target="25003:[14837..14866).15" />
<Link Source="25003:[16596..16624).9" Target="25003:[16596..16624).7" />
<Link Source="25003:[16596..16624).9" Target="25003:[16490..16505).24" />
<Link Source="25003:[16596..16624).9" Target="25003:[16536..16829).23" />
<Link Source="25003:[16642..16683).9" Target="25003:[16536..16829).23" />
<Link Source="25003:[16642..16683).12" Target="25003:[14837..14866).15" />
<Link Source="25003:[16642..16683).12" Target="25003:[16642..16683).9" />
<Link Source="25003:[16642..16683).12" Target="25003:[16596..16624).9" />
<Link Source="25003:[16642..16683).12" Target="25003:[16536..16829).23" />
<Link Source="25003:[16701..16717).7" Target="25003:[16536..16829).23" />
<Link Source="25003:[16701..16717).9" Target="25003:[14837..14866).15" />
<Link Source="25003:[16701..16717).9" Target="25003:[16701..16717).7" />
<Link Source="25003:[16701..16717).9" Target="25003:[16642..16683).12" />
<Link Source="25003:[16701..16717).9" Target="25003:[16536..16829).23" />
<Link Source="25003:[16735..16781).9" Target="25003:[16536..16829).23" />
<Link Source="25003:[16735..16781).12" Target="25003:[14837..14866).15" />
<Link Source="25003:[16735..16781).12" Target="25003:[16735..16781).9" />
<Link Source="25003:[16735..16781).12" Target="25003:[16701..16717).9" />
<Link Source="25003:[16735..16781).12" Target="25003:[16536..16829).23" />
<Link Source="25003:[16799..16814).7" Target="25003:[16536..16829).23" />
<Link Source="25003:[16799..16814).9" Target="25003:[14837..14866).15" />
<Link Source="25003:[16799..16814).9" Target="25003:[16799..16814).7" />
<Link Source="25003:[16799..16814).9" Target="25003:[16735..16781).12" />
<Link Source="25003:[16799..16814).9" Target="25003:[16536..16829).23" />
<Link Source="25003:[16845..16954).8" Target="25003:[10786..10799).1" />
<Link Source="25003:[16845..16954).8" Target="25003:[11120..11133).1" />
<Link Source="25003:[16970..17144).22" Target="25003:[10786..10799).1" />
<Link Source="25003:[16970..17144).23" Target="25003:[10786..10799).1" />
<Link Source="25003:[16970..17144).23" Target="25003:[11120..11133).1" />
<Link Source="25003:[16970..17144).23" Target="25003:[16970..17144).22" />
<Link Source="25003:[17160..17340).22" Target="25003:[10786..10799).1" />
<Link Source="25003:[17160..17340).23" Target="25003:[10786..10799).1" />
<Link Source="25003:[17160..17340).23" Target="25003:[11120..11133).1" />
<Link Source="25003:[17160..17340).23" Target="25003:[17160..17340).22" />
<Link Source="25003:[17356..17482).29" Target="25003:[10786..10799).1" />
<Link Source="25003:[17356..17482).30" Target="25003:[10786..10799).1" />
<Link Source="25003:[17356..17482).30" Target="25003:[11120..11133).1" />
<Link Source="25003:[17356..17482).30" Target="25003:[17356..17482).29" />
<Link Source="25003:[17498..17519).15" Target="25003:[14837..14866).15" />
<Link Source="25003:[17498..17519).15" Target="25003:[16799..16814).9" />
<Link Source="25003:[17498..17519).15" Target="25003:[10786..10799).1" />
<Link Source="25003:[22349..22404).70" Target="25003:[17498..17519).15" />
<Link Source="25003:[22349..22404).70" Target="25003:[10786..10799).1" />
<Link Source="25003:[22349..22404).71" Target="25003:[22349..22404).67" />
<Link Source="25003:[22349..22404).71" Target="25003:[22349..22404).70" />
<Link Source="25003:[22349..22404).71" Target="25003:[10786..10799).1" />
<Link Source="25003:[20764..20834).15" Target="25003:[18506..18543).1" />
<Link Source="25003:[20764..20834).15" Target="25003:[22349..22404).71" />
<Link Source="25003:[20764..20834).15" Target="25003:[20764..20834).10" />
<Link Source="25003:[20764..20834).15" Target="25003:[10786..10799).1" />
<Link Source="25003:[20852..20923).12" Target="25003:[17936..17956).1" />
<Link Source="25003:[20852..20923).12" Target="25003:[10786..10799).1" />
<Link Source="25003:[22308..22323).9" Target="25003:[20852..20923).12" />
<Link Source="25003:[22308..22323).9" Target="25003:[10786..10799).1" />
<Link Source="25003:[22349..22404).76" Target="25003:[22349..22404).64" />
<Link Source="25003:[22349..22404).76" Target="25003:[22308..22323).9" />
<Link Source="25003:[22349..22404).76" Target="25003:[10786..10799).1" />
<Link Source="25003:[15100..15131).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[15100..15131).17" Target="25003:[14921..15244).23" />
<Link Source="25003:[15100..15131).18" Target="25003:[14837..14866).15" />
<Link Source="25003:[15100..15131).18" Target="25003:[15100..15131).17" />
<Link Source="25003:[15100..15131).18" Target="25003:[14882..14907).24" />
<Link Source="25003:[15100..15131).18" Target="25003:[14921..15244).23" />
<Link Source="25003:[15149..15164).27" Target="25003:[14837..14866).15" />
<Link Source="25003:[15149..15164).27" Target="25003:[15149..15164).22" />
<Link Source="25003:[15149..15164).27" Target="25003:[15100..15131).18" />
<Link Source="25003:[15149..15164).27" Target="25003:[14921..15244).23" />
<Link Source="25003:[15182..15229).41" Target="25003:[11120..11133).1" />
<Link Source="25003:[15182..15229).41" Target="25003:[14921..15244).23" />
<Link Source="25003:[15182..15229).45" Target="25003:[14837..14866).15" />
<Link Source="25003:[15182..15229).45" Target="25003:[15182..15229).41" />
<Link Source="25003:[15182..15229).45" Target="25003:[15149..15164).27" />
<Link Source="25003:[15182..15229).45" Target="25003:[14921..15244).23" />
<Link Source="25003:[15632..15650).27" Target="25003:[14837..14866).15" />
<Link Source="25003:[15632..15650).27" Target="25003:[15632..15650).22" />
<Link Source="25003:[15632..15650).27" Target="25003:[15182..15229).45" />
<Link Source="25003:[15632..15650).27" Target="25003:[15320..15717).85" />
<Link Source="25003:[15672..15698).17" Target="25003:[11120..11133).1" />
<Link Source="25003:[15672..15698).17" Target="25003:[15320..15717).85" />
<Link Source="25003:[15672..15698).18" Target="25003:[14837..14866).15" />
<Link Source="25003:[15672..15698).18" Target="25003:[15672..15698).17" />
<Link Source="25003:[15672..15698).18" Target="25003:[15632..15650).27" />
<Link Source="25003:[15672..15698).18" Target="25003:[15320..15717).85" />
<Link Source="25003:[15737..15752).27" Target="25003:[14837..14866).15" />
<Link Source="25003:[15737..15752).27" Target="25003:[15737..15752).22" />
<Link Source="25003:[15737..15752).27" Target="25003:[15672..15698).18" />
<Link Source="25003:[15737..15752).27" Target="25003:[15260..15767).23" />
<Link Source="25003:[15899..15914).27" Target="25003:[14837..14866).15" />
<Link Source="25003:[15899..15914).27" Target="25003:[15899..15914).22" />
<Link Source="25003:[15899..15914).27" Target="25003:[15737..15752).27" />
<Link Source="25003:[15899..15914).27" Target="25003:[10786..10799).1" />
<Link Source="25003:[15986..16015).27" Target="25003:[14837..14866).15" />
<Link Source="25003:[15986..16015).27" Target="25003:[15986..16015).22" />
<Link Source="25003:[15986..16015).27" Target="25003:[15899..15914).27" />
<Link Source="25003:[15986..16015).27" Target="25003:[11120..11133).1" />
<Link Source="25003:[16202..16218).36" Target="25003:[14837..14866).15" />
<Link Source="25003:[16202..16218).36" Target="25003:[16202..16218).31" />
<Link Source="25003:[16202..16218).36" Target="25003:[15986..16015).27" />
<Link Source="25003:[16202..16218).36" Target="25003:[11120..11133).1" />
<Link Source="25003:[16240..16275).24" Target="25003:[14837..14866).15" />
<Link Source="25003:[16240..16275).24" Target="25003:[16240..16275).21" />
<Link Source="25003:[16240..16275).24" Target="25003:[16202..16218).36" />
<Link Source="25003:[16240..16275).24" Target="25003:[11120..11133).1" />
<Link Source="25003:[16297..16313).36" Target="25003:[14837..14866).15" />
<Link Source="25003:[16297..16313).36" Target="25003:[16297..16313).31" />
<Link Source="25003:[16297..16313).36" Target="25003:[16240..16275).24" />
<Link Source="25003:[16297..16313).36" Target="25003:[11120..11133).1" />
<Link Source="25003:[16490..16505).27" Target="25003:[14837..14866).15" />
<Link Source="25003:[16490..16505).27" Target="25003:[16490..16505).22" />
<Link Source="25003:[16490..16505).27" Target="25003:[16297..16313).36" />
<Link Source="25003:[16490..16505).27" Target="25003:[11120..11133).1" />
<Link Source="25003:[17498..17519).17" Target="25003:[14837..14866).15" />
<Link Source="25003:[17498..17519).17" Target="25003:[16490..16505).27" />
<Link Source="25003:[17498..17519).17" Target="25003:[10786..10799).1" />
<Link Source="25003:[22349..22404).79" Target="25003:[17498..17519).17" />
<Link Source="25003:[22349..22404).79" Target="25003:[10786..10799).1" />
<Link Source="25003:[22349..22404).80" Target="25003:[22349..22404).76" />
<Link Source="25003:[22349..22404).80" Target="25003:[22349..22404).79" />
<Link Source="25003:[22349..22404).80" Target="25003:[10786..10799).1" />
<Link Source="25003:[20852..20923).15" Target="25003:[19153..19205).1" />
<Link Source="25003:[20852..20923).15" Target="25003:[22349..22404).80" />
<Link Source="25003:[20852..20923).15" Target="25003:[20852..20923).10" />
<Link Source="25003:[20852..20923).15" Target="25003:[10786..10799).1" />
<Link Source="25003:[20952..21034).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[10786..10799).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[20952..21034).1" />
<Link Source="25003:[20952..21034).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[20995..21019).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[20995..21019).1" Target="25003:[20764..20834).15" />
<Link Source="25003:[20995..21019).1" Target="25003:[20952..21034).2" />
<Link Source="25003:[21050..21081).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[21050..21081).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[20995..21019).1" />
<Link Source="25003:[21050..21081).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21095..21192).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).2" Target="25003:[19153..19205).1" />
<Link Source="25003:[21095..21192).2" Target="25002:[4126..4179).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3129..3133).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3121..3141).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3135..3139).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3121..3141).1" />
<Link Source="25012:[3102..3141).1" Target="25012:[3121..3141).1" />
<Link Source="25003:[21095..21192).3" Target="EXTERNAL" />
<Link Source="25003:[21095..21192).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[21113..21190).1" Target="25002:[4126..4179).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21095..21192).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2498..2519).1" Target="25003:[21095..21192).2" />
<Link Source="25012:[2498..2519).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2521..2537).1" Target="25003:[21095..21192).3" />
<Link Source="25012:[2521..2537).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2539..2575).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2539..2575).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2577..2608).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2577..2608).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2539..2575).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2634..2703).1" />
<Link Source="25012:[2634..2703).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2644..2662).1" Target="25012:[2634..2703).2" />
<Link Source="25012:[2644..2662).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1074..1101).1" Target="EXTERNAL" />
<Link Source="25012:[1194..1223).1" Target="25012:[1074..1101).1" />
<Link Source="25012:[1194..1223).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1183..1293).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[4217..4231).1" Target="25012:[4230..4231).1" />
<Link Source="25012:[4264..4278).1" Target="25012:[4277..4278).1" />
<Link Source="25012:[4311..4325).1" Target="25012:[4324..4325).1" />
<Link Source="25012:[3676..10647).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1194..1223).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1053..1102).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[2717..2783).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2717..2783).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2577..2608).1" />
<Link Source="25012:[2717..2783).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2799..2869).1" Target="25012:[2473..2496).1" />
<Link Source="25012:[2799..2869).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2883..2947).1" Target="25012:[2498..2519).1" />
<Link Source="25012:[2883..2947).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).1" Target="25012:[2521..2537).1" />
<Link Source="25012:[2963..3048).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[2963..3048).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2963..3048).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).4" Target="25012:[2717..2783).3" />
<Link Source="25012:[2963..3048).4" Target="25003:[21113..21190).1" />
<Link Source="25012:[2993..3046).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1574..1592).1" Target="25012:[2963..3048).2" />
<Link Source="25012:[1574..1592).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1594..1612).1" Target="25012:[2963..3048).3" />
<Link Source="25012:[1594..1612).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1614..1638).1" Target="25012:[2963..3048).4" />
<Link Source="25012:[1614..1638).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2644..2662).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2883..2947).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2993..3046).1" />
<Link Source="25012:[1693..1757).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1672..2400).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5415..5426).1" Target="25012:[1672..2400).2" />
<Link Source="25012:[5415..5426).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5428..5447).1" Target="25012:[1672..2400).3" />
<Link Source="25012:[5428..5447).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5449..5460).1" Target="25012:[1672..2400).4" />
<Link Source="25012:[5449..5460).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1533..2415).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[5394..5413).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[5415..5426).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[5428..5447).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[5449..5460).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5505..5562).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5494..5563).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9423..9434).1" Target="25012:[5494..5563).2" />
<Link Source="25012:[9423..9434).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9436..9455).1" Target="25012:[5494..5563).3" />
<Link Source="25012:[9436..9455).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9457..9468).1" Target="25012:[5494..5563).4" />
<Link Source="25012:[9457..9468).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5357..6686).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9423..9434).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9502..9523).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9457..9468).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9541..9562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9740..9764).1" Target="25012:[9502..9523).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[9541..9562).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9796).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9784..9796).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9814..9943).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[9889..9924).1" Target="25012:[9814..9943).3" />
<Link Source="25012:[9889..9924).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9889..9924).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9814..9943).3" />
<Link Source="25012:[9889..9896).1" Target="25012:[9889..9924).5" />
<Link Source="25012:[9889..9896).1" Target="25012:[9814..9943).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9889..9924).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9814..9943).3" />
<Link Source="25012:[9963..10092).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9963..10092).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10038..10073).1" Target="25012:[9963..10092).3" />
<Link Source="25012:[10038..10073).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9889..9896).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[10038..10073).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9963..10092).3" />
<Link Source="25012:[10038..10045).1" Target="25012:[10038..10073).5" />
<Link Source="25012:[10038..10045).1" Target="25012:[10038..10073).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9963..10092).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9963..10092).3" />
<Link Source="25012:[10112..10592).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10187..10573).1" Target="25012:[10112..10592).3" />
<Link Source="25012:[10187..10573).3" Target="25012:[10187..10573).1" />
<Link Source="25012:[10187..10573).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[10187..10573).3" Target="25012:[10112..10592).3" />
<Link Source="25012:[10270..10363).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[9889..9896).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10038..10045).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10270..10363).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).6" Target="25012:[9402..9421).1" />
<Link Source="25012:[10270..10363).6" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).10" Target="25012:[9436..9455).1" />
<Link Source="25012:[10270..10363).10" Target="25012:[10187..10573).3" />
<Link Source="25012:[10298..10344).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[1344..1362).1" Target="25012:[10270..10363).6" />
<Link Source="25012:[1344..1362).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1364..1374).1" Target="25012:[10270..10363).1" />
<Link Source="25012:[1364..1374).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1376..1394).1" Target="25012:[10270..10363).10" />
<Link Source="25012:[1376..1394).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1396..1406).1" Target="25012:[10270..10363).1" />
<Link Source="25012:[1396..1406).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1309..1517).1" Target="25012:[9369..10636).1" />
<Link Source="25012:[1309..1517).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[1344..1362).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[2799..2869).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[1364..1374).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[1376..1394).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[1396..1406).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[1309..1517).1" />
<Link Source="25012:[1440..1502).5" Target="EXTERNAL" />
<Link Source="25012:[1440..1502).5" Target="25012:[1440..1502).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[1440..1502).3" />
<Link Source="25012:[1440..1502).5" Target="25012:[2799..2869).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[2883..2947).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[10298..10344).1" />
<Link Source="25012:[10270..10363).17" Target="25012:[10270..10363).5" />
<Link Source="25012:[10270..10363).17" Target="25012:[1440..1502).5" />
<Link Source="25012:[10270..10363).17" Target="25012:[10187..10573).3" />
<Link Source="25012:[10389..10423).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10389..10423).3" Target="25012:[9740..9764).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[9784..9791).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[9889..9896).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10038..10045).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10389..10423).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10187..10573).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10449..10483).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10449..10483).3" Target="25012:[9740..9764).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[9784..9791).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[9889..9896).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10038..10045).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10449..10483).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).1" Target="25012:[10270..10363).17" />
<Link Source="25012:[10509..10550).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).2" Target="25012:[10389..10423).3" />
<Link Source="25012:[10509..10550).2" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).3" Target="25012:[10509..10550).1" />
<Link Source="25012:[10509..10550).3" Target="25012:[10509..10550).2" />
<Link Source="25012:[10509..10550).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).5" Target="25012:[10449..10483).3" />
<Link Source="25012:[10509..10550).5" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).6" Target="25012:[10509..10550).3" />
<Link Source="25012:[10509..10550).6" Target="25012:[10509..10550).5" />
<Link Source="25012:[10509..10550).6" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10516).1" Target="25012:[10509..10550).6" />
<Link Source="25012:[10509..10516).1" Target="25012:[10112..10592).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[10187..10573).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10612..10621).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10612..10621).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[5415..5426).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[5449..5460).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5581..5597).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[5615..5631).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).5" Target="25012:[5651..6341).2" />
<Link Source="25012:[5651..6341).5" Target="25012:[5651..6341).4" />
<Link Source="25012:[5651..6341).5" Target="25012:[1693..1757).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10612..10621).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9784..9791).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9889..9896).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10038..10045).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10509..10516).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5651..6341).5" />
<Link Source="25012:[5716..6322).2" Target="25012:[5651..6341).5" />
<Link Source="25012:[5716..6322).4" Target="25012:[10612..10621).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9740..9764).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9784..9791).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9889..9896).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[10038..10045).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[10509..10516).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[5716..6322).2" />
<Link Source="25012:[5716..6322).4" Target="25012:[5615..5631).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[5651..6341).5" />
<Link Source="25012:[5931..6322).1" Target="25012:[10612..10621).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9784..9791).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9889..9896).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[10038..10045).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[10509..10516).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5716..6322).4" />
<Link Source="25012:[5931..6322).2" Target="25012:[5716..6322).4" />
<Link Source="25012:[6194..6198).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[6194..6198).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6224..6228).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[6224..6228).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).2" Target="EXTERNAL" />
<Link Source="25012:[6254..6299).2" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).3" Target="25012:[6194..6198).1" />
<Link Source="25012:[6254..6299).3" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).4" Target="25012:[6224..6228).1" />
<Link Source="25012:[6254..6299).4" Target="25012:[5931..6322).2" />
<Link Source="25012:[6267..6298).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[3967..3980).1" Target="25012:[6254..6299).2" />
<Link Source="25012:[3967..3980).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3982..3992).1" Target="25012:[6254..6299).3" />
<Link Source="25012:[3982..3992).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3994..4004).1" Target="25012:[6254..6299).4" />
<Link Source="25012:[3994..4004).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3953..4168).1" Target="25012:[6254..6299).1" />
<Link Source="25012:[3953..4168).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[3967..3980).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[3982..3992).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[3994..4004).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[5651..6341).11" Target="25012:[6194..6198).1" />
<Link Source="25012:[5651..6341).11" Target="25012:[6224..6228).1" />
<Link Source="25012:[5651..6341).11" Target="25012:[1693..1757).1" />
<Link Source="25012:[6254..6299).7" Target="EXTERNAL" />
<Link Source="25012:[6254..6299).7" Target="25012:[5651..6341).11" />
<Link Source="25012:[6254..6299).8" Target="25012:[5651..6341).11" />
<Link Source="25012:[6267..6298).2" Target="25012:[5651..6341).11" />
<Link Source="25012:[3967..3980).2" Target="25012:[6254..6299).7" />
<Link Source="25012:[3967..3980).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[3982..3992).2" Target="25012:[6254..6299).8" />
<Link Source="25012:[3982..3992).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[3994..4004).2" Target="25012:[6254..6299).8" />
<Link Source="25012:[3994..4004).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[3953..4168).2" Target="25012:[6254..6299).8" />
<Link Source="25012:[3953..4168).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[4046..4055).2" Target="25012:[3967..3980).2" />
<Link Source="25012:[4046..4055).2" Target="25012:[3953..4168).2" />
<Link Source="25012:[4046..4055).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[4085..4096).2" Target="25012:[3982..3992).2" />
<Link Source="25012:[4085..4096).2" Target="25012:[3953..4168).2" />
<Link Source="25012:[4085..4096).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[4128..4139).2" Target="25012:[3994..4004).2" />
<Link Source="25012:[4128..4139).2" Target="25012:[3953..4168).2" />
<Link Source="25012:[4128..4139).2" Target="25012:[6267..6298).2" />
<Link Source="25012:[6361..6506).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[5651..6341).11" />
<Link Source="25012:[6361..6506).2" Target="25012:[6361..6506).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[5651..6341).11" />
<Link Source="25012:[6526..6671).2" Target="25012:[6526..6671).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[6254..6299).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[6254..6299).8" />
<Link Source="25012:[1672..2400).7" Target="25012:[4046..4055).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4085..4096).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4128..4139).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4046..4055).2" />
<Link Source="25012:[1672..2400).7" Target="25012:[4085..4096).2" />
<Link Source="25012:[1672..2400).7" Target="25012:[4128..4139).2" />
<Link Source="25012:[1672..2400).7" Target="25012:[2993..3046).1" />
<Link Source="25012:[1809..2381).1" Target="25012:[1672..2400).7" />
<Link Source="25012:[2267..2322).1" Target="25012:[1809..2381).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[1440..1502).5" />
<Link Source="25012:[2267..2322).3" Target="25012:[1672..2400).7" />
<Link Source="25012:[2267..2322).3" Target="25012:[1809..2381).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[1614..1638).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[2267..2322).3" />
<Link Source="25012:[2267..2322).5" Target="25012:[2717..2783).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[1809..2381).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2963..3048).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2267..2322).1" />
<Link Source="25012:[2963..3048).7" Target="25003:[21113..21190).1" />
<Link Source="25003:[21095..21192).10" Target="25003:[18506..18543).1" />
<Link Source="25003:[21095..21192).10" Target="25012:[2963..3048).7" />
<Link Source="25003:[21095..21192).10" Target="25003:[21050..21081).3" />
<Link Source="25003:[21095..21192).10" Target="25002:[4126..4179).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[19153..19205).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[20852..20923).15" />
<Link Source="25003:[21208..21226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[22763..22783).1" />
<Link Source="25003:[21240..21260).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[21095..21192).10" />
<Link Source="25003:[21276..21305).1" Target="25002:[4126..4179).1" />
<Link Source="25002:[2401..2451).3" Target="25002:[4446..4474).1" />
<Link Source="25002:[4446..4475).3" Target="28001:[57412..58687).4" />
<Link Source="25002:[4489..4523).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4489..4523).1" Target="28001:[57412..58687).4" />
<Link Source="25002:[4489..4523).2" Target="10327:[1279..1312).2" />
<Link Source="25002:[4489..4523).2" Target="28001:[57412..58687).4" />
<Link Source="25002:[4489..4522).1" Target="28001:[57412..58687).4" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4523).1" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4523).2" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4653..4691).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[5097..5821).1" Target="25002:[4750..5836).1" />
<Link Source="25002:[5097..5821).1" Target="10327:[1279..1312).2" />
<Link Source="25002:[5097..5821).1" Target="25003:[11120..11133).1" />
<Link Source="25002:[5097..5821).2" Target="25002:[4637..4651).1" />
<Link Source="25002:[5097..5821).2" Target="25002:[5097..5821).1" />
<Link Source="25002:[5097..5821).2" Target="25003:[11120..11133).1" />
<Link Source="25002:[5097..5821).2" Target="25002:[4750..5836).1" />
<Link Source="25002:[5675..5741).1" Target="25002:[4750..5836).1" />
<Link Source="25002:[5675..5741).1" Target="25002:[5097..5821).2" />
<Link Source="25002:[5763..5802).1" Target="25002:[5675..5741).1" />
<Link Source="25002:[5763..5802).1" Target="25002:[5097..5821).2" />
<Link Source="25002:[5763..5802).3" Target="25002:[5675..5741).1" />
<Link Source="25002:[4489..4523).3" Target="28001:[57412..58687).4" />
<Link Source="25002:[4539..4548).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4539..4548).1" Target="28001:[57412..58687).4" />
</Links>
</DirectedGraph>
